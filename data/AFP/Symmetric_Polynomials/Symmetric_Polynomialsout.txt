Loading theory "Draft.Vieta" (required by "Draft.Symmetric_PolynomialsTemplates" via "Draft.Symmetric_Polynomials")
Loading theory "Draft.Templates" (required by "Draft.Symmetric_PolynomialsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.159s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Symmetric_PolynomialsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.541s elapsed time, 1.119s cpu time, 0.112s GC time
### theory "Draft.Vieta"
### 0.641s elapsed time, 1.315s cpu time, 0.112s GC time
Loading theory "Draft.Symmetric_Polynomials" (required by "Draft.Symmetric_PolynomialsTemplates")
### Ignoring duplicate rewrite rule:
### length (sorted_list_of_set ?A1) == card ?A1
locale ring_closed
  fixes A :: "'a set"
  assumes "ring_closed A"
locale ring_homomorphism
  fixes f :: "'a => 'b"
  assumes "ring_homomorphism f"
### theory "Draft.Symmetric_Polynomials"
### 1.411s elapsed time, 1.548s cpu time, 0.207s GC time
Loading theory "Draft.Symmetric_PolynomialsTemplates"
val templateLemmas =
   [("Symmetric_Polynomials.poly_mapping_nat_ge_0", "0 <= ?m",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("Symmetric_Polynomials.symmetric_mpoly_0", "symmetric_mpoly ?A 0",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Symmetric_Polynomials.symmetric_mpoly_empty", "symmetric_mpoly {} ?p",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Symmetric_Polynomials.symmetric_mpoly_1", "symmetric_mpoly ?A 1",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Symmetric_Polynomials.inj_permutep", "inj (permutep ?f)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Symmetric_Polynomials.symmetric_mpoly_Const",
     "symmetric_mpoly ?A (Const ?c)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Symmetric_Polynomials.check_symmetric_mpoly_dom",
     "check_symmetric_mpoly_dom ?A ?p",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Symmetric_Polynomials.fund_sym_poly_wit_dom",
     "fund_sym_poly_wit_dom ?A ?p",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Symmetric_Polynomials.bij_permutep", "bij (permutep ?f)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0),
           template_hole 0)
         )),
    ("Symmetric_Polynomials.mpoly_coeff_0",
     "MPoly_Type.coeff 0 ?m = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Symmetric_Polynomials.lead_coeff_Const",
     "Symmetric_Polynomials.lead_coeff (Const ?c) = ?c",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Symmetric_Polynomials.vars_Const", "vars (Const ?c) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Symmetric_Polynomials.mpoly_map_vars_0", "mpoly_map_vars ?f 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Symmetric_Polynomials.mpoly_map_vars_1", "mpoly_map_vars ?f 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Symmetric_Polynomials.permutep_id", "permutep id ?mon = ?mon",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Symmetric_Polynomials.permutep_0", "permutep ?f 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Symmetric_Polynomials.lead_monom_Const", "lead_monom (Const ?c) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Symmetric_Polynomials.lead_monom_numeral",
     "lead_monom (numeral ?n) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Symmetric_Polynomials.fund_sym_step_poly",
     "symmetric_mpoly ?A (fund_sym_step_poly ?A ?p)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Symmetric_Polynomials.lead_coeff_monom",
     "Symmetric_Polynomials.lead_coeff (MPoly_Type.monom ?p ?c) = ?c",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Symmetric_Polynomials.insertion_Const",
     "insertion ?f (Const ?c) = ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Symmetric_Polynomials.insertion_aux_Const\<^sub>0",
     "insertion_aux ?f (Const\<^sub>0 ?c) = ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Symmetric_Polynomials.map_mpoly_conv_mapm_mpoly",
     "map_mpoly ?f = mapm_mpoly (%_. ?f)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, t_empty))),
    ("Symmetric_Polynomials.poly_mapping_map_conv_mapp",
     "Poly_Mapping.map ?f = Poly_Mapping.mapp (%_. ?f)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, t_empty))),
    ("Symmetric_Polynomials.length_sorted_list_of_set",
     "length (sorted_list_of_set ?A) = card ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Symmetric_Polynomials.keys_uminus", "keys (- ?m) = keys ?m",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Symmetric_Polynomials.vars_uminus", "vars (- ?p) = vars ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Symmetric_Polynomials.surj_permutep", "surj (permutep ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Symmetric_Polynomials.permutep_id'", "permutep (%x. x) ?mon = ?mon",
     template_equation
      (template_app
        (template_app (template_hole 0, t_empty), template_var 0),
       template_var 0)),
    ("Symmetric_Polynomials.lead_monom_uminus",
     "lead_monom (- ?p) = lead_monom ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Symmetric_Polynomials.keys_lead_monom_subset",
     "keys (lead_monom ?p) <= vars ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Symmetric_Polynomials.vars_sym_mpoly_subset",
     "vars (sym_mpoly ?A ?k) <= ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Symmetric_Polynomials.insertion_Var", "insertion ?f (Var ?i) = ?f ?i",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Symmetric_Polynomials.poly_mapping_nat_le_0", "(?m <= 0) = (?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Symmetric_Polynomials.check_symmetric_mpoly_correct",
     "check_symmetric_mpoly ?A ?p = symmetric_mpoly ?A ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_Const",
     "mpoly_map_vars ?f (Const ?c) = Const ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Symmetric_Polynomials.coeffs_subset",
     "MPoly_Type.coeffs (Const ?c) <= {?c}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Symmetric_Polynomials.vars_map_mpoly_subset",
     "vars (map_mpoly ?f ?p) <= vars ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Symmetric_Polynomials.vars_mapm_mpoly_subset",
     "vars (mapm_mpoly ?f ?p) <= vars ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Symmetric_Polynomials.vars_smult",
     "vars (MPoly_Type.smult ?c ?p) <= vars ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Symmetric_Polynomials.vars_power", "vars (?p ^ ?n) <= vars ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Symmetric_Polynomials.wf_monom_less_on",
     "finite ?A ==> wf (monom_less_on ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Symmetric_Polynomials.lead_coeff_eq_0_iff",
     "(Symmetric_Polynomials.lead_coeff ?p = (0::?'a)) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Symmetric_Polynomials.keys_empty_iff", "(keys ?p = {}) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Symmetric_Polynomials.mapping_of_eq_0_iff",
     "(mapping_of ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Symmetric_Polynomials.symmetric_mpoly_uminus_iff",
     "symmetric_mpoly ?A (- ?p) = symmetric_mpoly ?A ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Symmetric_Polynomials.finite_coeff_support",
     "finite {m. MPoly_Type.coeff ?p m ~= (0::?'a)}",
     template_predicate
      (
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))
         )),
    ("Symmetric_Polynomials.sum_list_replicate",
     "sum_list (replicate ?n ?x) = of_nat ?n * ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Symmetric_Polynomials.insertion_uminus",
     "insertion ?f (- ?p) = - insertion ?f ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_coeff_uminus",
     "MPoly_Type.coeff (- ?p) ?m = - MPoly_Type.coeff ?p ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.Sum_any_uminus",
     "(SUM x. - ?f x) = - Sum_any ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Symmetric_Polynomials.keys_restrictpm",
     "keys (restrictpm ?A ?m) = keys ?m Int ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_var 1))),
    ("Symmetric_Polynomials.keys_monom_of_set",
     "keys (monom_of_set ?X) = (if finite ?X then ?X else {})",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Symmetric_Polynomials.lead_monom_eq_0_iff",
     "(lead_monom ?p = 0) = (vars ?p = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_eq_0_iff",
     "(mpoly_map_vars ?f ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Symmetric_Polynomials.permutep_eq_0_iff",
     "(permutep ?f ?m = 0) = (?m = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_uminus",
     "mpoly_map_vars ?f (- ?p) = - mpoly_map_vars ?f ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.permutep_uminus",
     "permutep ?f (- ?m) = - permutep ?f ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.Sum_any_mapping_of",
     "(SUM x. mapping_of (?f x)) = mapping_of (Sum_any ?f)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Symmetric_Polynomials.vars_fund_sym_step_coeff",
     "vars (fund_sym_step_coeff ?A ?p) <= vars ?p - ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_var 1))),
    ("Symmetric_Polynomials.fund_sym_step_poly",
     "vars (fund_sym_step_poly ?A ?p) <= vars ?p Un ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_var 1))),
    ("Symmetric_Polynomials.fund_sym_poly_wit_vars",
     "vars (fund_sym_poly_wit ?A ?p) <= {1..card ?A}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 1)))),
    ("Symmetric_Polynomials.keys_fund_sym_step_monom",
     "keys (fund_sym_step_monom ?A ?p) <= {1..card ?A}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 1)))),
    ("Symmetric_Polynomials.keys_monom_of_set_finite",
     "finite ?X ==> keys (monom_of_set ?X) = ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Symmetric_Polynomials.symmetric_mpoly_uminus",
     "symmetric_mpoly ?A ?p ==> symmetric_mpoly ?A (- ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Symmetric_Polynomials.mpoly_coeff_1",
     "MPoly_Type.coeff 1 ?m = (if ?m = 0 then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Symmetric_Polynomials.lookup_1",
     "lookup 1 ?m = (if ?m = (0::?'b) then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Symmetric_Polynomials.prod_fun_nat_0",
     "prod_fun ?f ?g 0 = ?f 0 * ?g 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 1, template_hole 1)),
         template_app (template_var 0, template_hole 1)))),
    ("Symmetric_Polynomials.vars_empty_iff",
     "(vars ?p = {}) = (?p = Const (Symmetric_Polynomials.lead_coeff ?p))",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_equation
        (template_var 0,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Symmetric_Polynomials.restrictpm_add_complements",
     "restrictpm ?X ?m + restrictpm (- ?X) ?m = ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_var 0)),
    ("Symmetric_Polynomials.restrictpm_add_complements",
     "restrictpm (- ?X) ?m + restrictpm ?X ?m = ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_var 0)),
    ("Symmetric_Polynomials.keys_diff_subset",
     "keys (?f - ?g) <= keys ?f Un keys ?g",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Symmetric_Polynomials.vars_diff",
     "vars (?p1.0 - ?p2.0) <= vars ?p1.0 Un vars ?p2.0",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Symmetric_Polynomials.lead_monom_mult_le",
     "lead_monom (?p * ?q) <= lead_monom ?p + lead_monom ?q",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Symmetric_Polynomials.lead_monom_add",
     "lead_monom (?p + ?q) <= max (lead_monom ?p) (lead_monom ?q)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Symmetric_Polynomials.lead_monom_diff",
     "lead_monom (?p - ?q) <= max (lead_monom ?p) (lead_monom ?q)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Symmetric_Polynomials.sym_mpoly_infinite",
     "infinite ?A ==> sym_mpoly ?A ?k = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Symmetric_Polynomials.symmetric_sym_mpoly",
     "?A <= ?B ==> symmetric_mpoly ?A (sym_mpoly ?B ?k)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Symmetric_Polynomials.symmetric_mpoly_smult",
     "symmetric_mpoly ?A ?p ==>
      symmetric_mpoly ?A (MPoly_Type.smult ?c ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Symmetric_Polynomials.symmetric_mpoly_power",
     "symmetric_mpoly ?A ?p ==> symmetric_mpoly ?A (?p ^ ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Symmetric_Polynomials.mpoly_coeff_Const",
     "MPoly_Type.coeff (Const ?c) ?m = (if ?m = 0 then ?c else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_var 1),
             template_hole 0)
           ))),
    ("Symmetric_Polynomials.lookup_Const\<^sub>0",
     "lookup (Const\<^sub>0 ?c) ?m = (if ?m = 0 then ?c else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_var 1),
             template_hole 0)
           ))),
    ("Symmetric_Polynomials.coeff_smult",
     "MPoly_Type.coeff (MPoly_Type.smult ?c ?p) ?m =
      ?c * MPoly_Type.coeff ?p ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_coeff_power_0",
     "MPoly_Type.coeff (?p ^ ?n) 0 = MPoly_Type.coeff ?p 0 ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_var 0))),
    ("Symmetric_Polynomials.insertion_smult",
     "insertion ?f (MPoly_Type.smult ?c ?p) = ?c * insertion ?f ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.insertion_power",
     "insertion ?f (?p ^ ?n) = insertion ?f ?p ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Symmetric_Polynomials.permutep_eq_iff",
     "(permutep ?f ?p = permutep ?f ?q) = (?p = ?q)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_map_mpoly",
     "mpoly_map_vars ?f (map_mpoly ?g ?p) =
      map_mpoly ?g (mpoly_map_vars ?f ?p)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_map_vars_smult",
     "mpoly_map_vars ?f (MPoly_Type.smult ?c ?p) =
      MPoly_Type.smult ?c (mpoly_map_vars ?f ?p)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_map_vars_power",
     "mpoly_map_vars ?f (?p ^ ?n) = mpoly_map_vars ?f ?p ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_Sum_any",
     "mpoly_map_vars ?f (Sum_any ?g) = (SUM x. mpoly_map_vars ?f (?g x))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Symmetric_Polynomials.lead_monom_monom",
     "lead_monom (MPoly_Type.monom ?m ?c) =
      (if ?c = (0::?'a) then 0 else ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_var 1)
           ))),
    ("Symmetric_Polynomials.mapping_of_sum",
     "(SUM x:?A. mapping_of (?f x)) = mapping_of (sum ?f ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.vars_Prod_any",
     "vars (Prod_any ?h) <= (UN i. vars (?h i))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Symmetric_Polynomials.vars_Sum_any",
     "vars (Sum_any ?h) <= (UN i. vars (?h i))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_hole 0)))),
    ("Symmetric_Polynomials.coeff_sym_mpoly_0_or_1",
     "MPoly_Type.coeff (sym_mpoly ?A ?k) ?m : {0::?'a, 1::?'a}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_hole 0)))
         )),
    ("Symmetric_Polynomials.lead_coeff_nonzero",
     "?p ~= 0 ==> Symmetric_Polynomials.lead_coeff ?p ~= (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Symmetric_Polynomials.coeff_gt_lead_monom_zero",
     "lead_monom ?p < ?m ==> MPoly_Type.coeff ?p ?m = (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Symmetric_Polynomials.restrictpm_id",
     "keys ?m <= ?X ==> restrictpm ?X ?m = ?m",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Symmetric_Polynomials.symmetric_mpoly_orthogonal",
     "vars ?p Int ?A = {} ==> symmetric_mpoly ?A ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1)),
            template_var 0),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Symmetric_Polynomials.coeff_Var",
     "MPoly_Type.coeff (Var ?i) ?m =
      ((1::?'a) when ?m = Poly_Mapping.single ?i 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))
           ))),
    ("Symmetric_Polynomials.coeff_mpoly_times",
     "MPoly_Type.coeff (?p * ?q) ?mon =
      prod_fun (MPoly_Type.coeff ?p) (MPoly_Type.coeff ?q) ?mon",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Symmetric_Polynomials.lookup_mult_of_nat",
     "lookup (of_nat ?n * ?m) ?k = ?n * lookup ?m ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.coeffs_Const",
     "MPoly_Type.coeffs (Const ?c) = (if ?c = (0::?'a) then {} else {?c})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 1))
           ))),
    ("Symmetric_Polynomials.vars_Var",
     "vars (Var ?i) = (if (0::?'a) = (1::?'a) then {} else {?i})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2)),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 1))
           ))),
    ("Symmetric_Polynomials.keys_Const\<^sub>0",
     "keys (Const\<^sub>0 ?c) = (if ?c = (0::?'b) then {} else {0})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)),
               template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 2))
           ))),
    ("Symmetric_Polynomials.zero_eq_monom_of_set_iff",
     "(0 = monom_of_set ?X) = (infinite ?X | ?X = {})",
     template_bimplication
      (template_equation
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Symmetric_Polynomials.monom_of_set_eq_zero_iff",
     "(monom_of_set ?X = 0) = (infinite ?X | ?X = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 6, template_var 0), template_hole 5),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Symmetric_Polynomials.vars_prod",
     "vars (prod ?f ?A) <= (UN x:?A. vars (?f x))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Symmetric_Polynomials.vars_sum",
     "vars (sum ?f ?A) <= (UN x:?A. vars (?f x))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Symmetric_Polynomials.coeff_fund_sym_step_coeff",
     "MPoly_Type.coeff (fund_sym_step_coeff ?A ?p) ?m
      : {Symmetric_Polynomials.lead_coeff ?p, 0::?'a}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_hole 0)))
         )),
    ("Symmetric_Polynomials.permutep_monom_of_set_permutes",
     "?\<pi> permutes ?A ==>
      permutep ?\<pi> (monom_of_set ?A) = monom_of_set ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Symmetric_Polynomials.lead_monom_monom'",
     "?c ~= (0::?'a) ==> lead_monom (MPoly_Type.monom ?m ?c) = ?m",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("Symmetric_Polynomials.lookup_monom_of_set_0",
     "?i ~: ?X ==> lookup (monom_of_set ?X) ?i = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("Symmetric_Polynomials.restrictpm_orthogonal",
     "keys ?m <= - ?X ==> restrictpm ?X ?m = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Symmetric_Polynomials.lead_monom_geI",
     "MPoly_Type.coeff ?p ?m ~= (0::?'a) ==> ?m <= lead_monom ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0),
              template_hole 2)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 1)))),
    ("Symmetric_Polynomials.keys_sym_mpoly_aux",
     "?m : keys (sym_mpoly_aux ?A ?k) ==> keys ?m <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_var 1))),
    ("Symmetric_Polynomials.Sum_any_zeroI",
     "(!!x. ?f x = (0::?'b)) ==> Sum_any ?f = (0::?'b)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Symmetric_Polynomials.mpoly_coeff_times_0",
     "MPoly_Type.coeff (?p * ?q) 0 =
      MPoly_Type.coeff ?p 0 * MPoly_Type.coeff ?q 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Symmetric_Polynomials.coeff_add",
     "MPoly_Type.coeff (?p + ?q) ?m =
      MPoly_Type.coeff ?p ?m + MPoly_Type.coeff ?q ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.insertion_diff",
     "insertion ?f (?p - ?q) = insertion ?f ?p - insertion ?f ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.insertion_sum",
     "insertion ?f (sum ?g ?A) = (SUM x:?A. insertion ?f (?g x))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Symmetric_Polynomials.insertion_prod",
     "insertion ?f (prod ?g ?A) = (PROD x:?A. insertion ?f (?g x))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Symmetric_Polynomials.coeff_sum",
     "MPoly_Type.coeff (sum ?f ?A) ?m =
      (SUM x:?A. MPoly_Type.coeff (?f x) ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Symmetric_Polynomials.coeff_diff",
     "MPoly_Type.coeff (?p - ?q) ?m =
      MPoly_Type.coeff ?p ?m - MPoly_Type.coeff ?q ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.add_nat_poly_mapping_zero_iff",
     "(?a + ?b = 0) = (?a = 0 & ?b = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Symmetric_Polynomials.mpoly_map_vars_mult",
     "mpoly_map_vars ?f (?p * ?q) =
      mpoly_map_vars ?f ?p * mpoly_map_vars ?f ?q",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_map_vars_add",
     "mpoly_map_vars ?f (?p + ?q) =
      mpoly_map_vars ?f ?p + mpoly_map_vars ?f ?q",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_map_vars_prod",
     "mpoly_map_vars ?f (prod ?g ?A) =
      (PROD x:?A. mpoly_map_vars ?f (?g x))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_sum",
     "mpoly_map_vars ?f (sum ?g ?A) = (SUM x:?A. mpoly_map_vars ?f (?g x))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_diff",
     "mpoly_map_vars ?f (?p - ?q) =
      mpoly_map_vars ?f ?p - mpoly_map_vars ?f ?q",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.permutep_add",
     "permutep ?f (?m1.0 + ?m2.0) = permutep ?f ?m1.0 + permutep ?f ?m2.0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.restrictpm_add",
     "restrictpm ?X (?m1.0 + ?m2.0) =
      restrictpm ?X ?m1.0 + restrictpm ?X ?m2.0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.permutep_diff",
     "permutep ?f (?m1.0 - ?m2.0) = permutep ?f ?m1.0 - permutep ?f ?m2.0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.fund_sym_poly_wit_insertion",
     "symmetric_mpoly ?A ?p ==>
      insertion (sym_mpoly ?A) (fund_sym_poly_wit ?A ?p) = ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Symmetric_Polynomials.lead_monom_nonzero_eq",
     "?p ~= 0 ==> lead_monom ?p = Max (keys (mapping_of ?p))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Symmetric_Polynomials.lookup_restrict_pm_not_in",
     "?x ~: ?A ==> lookup (restrictpm ?A ?m) ?x = (0::?'b)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_hole 0))),
    ("Symmetric_Polynomials.coeff_notin_vars",
     "~ keys ?m <= vars ?p ==> MPoly_Type.coeff ?p ?m = (0::?'a)",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Symmetric_Polynomials.symmetric_mpoly_monom",
     "keys ?m Int ?A = {} ==> symmetric_mpoly ?A (MPoly_Type.monom ?m ?c)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2)),
            template_var 1),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Symmetric_Polynomials.symmetric_mpoly_subset",
     "[| symmetric_mpoly ?A ?p; ?B <= ?A |] ==> symmetric_mpoly ?B ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Symmetric_Polynomials.lookup_restrictpm",
     "lookup (restrictpm ?A ?m) ?x =
      (if ?x : ?A then lookup ?m ?x else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Symmetric_Polynomials.lookup_monom_of_set",
     "lookup (monom_of_set ?X) ?i = (if finite ?X & ?i : ?X then 1 else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1))),
           template_hole 1),
         template_hole 0))),
    ("Symmetric_Polynomials.lookup_restrictpm_in",
     "?x : ?A ==> lookup (restrictpm ?A ?m) ?x = lookup ?m ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Symmetric_Polynomials.keys_mult_const",
     "?c ~= (0::?'a) ==> keys (Poly_Mapping.map ((*) ?c) ?p) = keys ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Symmetric_Polynomials.mpoly_eqI",
     "(!!mon. MPoly_Type.coeff ?p mon = MPoly_Type.coeff ?q mon) ==>
      ?p = ?q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Symmetric_Polynomials.lead_coeff_mult_aux",
     "MPoly_Type.coeff (?p * ?q) (lead_monom ?p + lead_monom ?q) =
      Symmetric_Polynomials.lead_coeff ?p *
      Symmetric_Polynomials.lead_coeff ?q",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Symmetric_Polynomials.coeff_sym_mpoly_0",
     "MPoly_Type.coeff (sym_mpoly ?X ?k) 0 =
      (if finite ?X & ?k = 0 then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 0)),
              template_hole 7)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_var 1)),
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2))),
               template_hole 1),
             template_hole 0)
           ))),
    ("Symmetric_Polynomials.mpoly_coeff_prod_0",
     "MPoly_Type.coeff (prod ?f ?A) 0 =
      (PROD x:?A. MPoly_Type.coeff (?f x) 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Symmetric_Polynomials.permutep_smult",
     "permutep (permutep ?f) (Poly_Mapping.map ((*) ?c) ?p) =
      Poly_Mapping.map ((*) ?c) (permutep (permutep ?f) ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("Symmetric_Polynomials.of_nat_diff_poly_mapping_nat",
     "?n <= ?m ==> of_nat (?m - ?n) = of_nat ?m - of_nat ?n",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Symmetric_Polynomials.inv_permutep",
     "bij ?f ==> inv (permutep ?f) = permutep (inv ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 5),
             template_var 0))))),
    ("Symmetric_Polynomials.keys_permutep",
     "bij ?f ==> keys (permutep ?f ?m) = ?f -` keys ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("Symmetric_Polynomials.vars_mpoly_map_vars",
     "bij ?f ==> vars (mpoly_map_vars ?f ?p) = ?f ` vars ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("Symmetric_Polynomials.permutep_monom_of_set",
     "bij ?f ==> permutep ?f (monom_of_set ?A) = monom_of_set (?f -` ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Symmetric_Polynomials.lead_coeff_power'",
     "?p ~= 0 ==>
      Symmetric_Polynomials.lead_coeff (?p ^ ?n) =
      Symmetric_Polynomials.lead_coeff ?p ^ ?n",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("Symmetric_Polynomials.lookup_monom_of_set_1",
     "[| finite ?X; ?i : ?X |] ==> lookup (monom_of_set ?X) ?i = 1",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Symmetric_Polynomials.symmetric_mpoly_mult",
     "[| symmetric_mpoly ?A ?p; symmetric_mpoly ?A ?q |]
      ==> symmetric_mpoly ?A (?p * ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Symmetric_Polynomials.symmetric_mpoly_add",
     "[| symmetric_mpoly ?A ?p; symmetric_mpoly ?A ?q |]
      ==> symmetric_mpoly ?A (?p + ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Symmetric_Polynomials.symmetric_mpoly_diff",
     "[| symmetric_mpoly ?A ?p; symmetric_mpoly ?A ?q |]
      ==> symmetric_mpoly ?A (?p - ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Symmetric_Polynomials.insertion_monom",
     "insertion ?f (MPoly_Type.monom ?m ?c) =
      ?c * (PROD x. ?f x ^ lookup ?m x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, t_empty)))),
    ("Symmetric_Polynomials.insertion_insertion",
     "insertion ?g (insertion ?k ?p) =
      insertion (%x. insertion ?g (?k x)) (map_mpoly (insertion ?g) ?p)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("Symmetric_Polynomials.infinite_infinite_subsets",
     "infinite ?A ==> infinite {X. X <= ?A & infinite X}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 3, template_app (template_hole 2, t_empty))
               )
           ))),
    ("Symmetric_Polynomials.symmetric_mpoly_imp_orthogonal_or_subset",
     "symmetric_mpoly ?A ?p ==> vars ?p Int ?A = {} | ?A <= vars ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_var 0)),
                     template_var 1)),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 2, template_var 0)))
           ))),
    ("Symmetric_Polynomials.fund_sym_poly_wit_coeffs",
     "symmetric_mpoly ?A ?p ==>
      vars (MPoly_Type.coeff (fund_sym_poly_wit ?A ?p) ?m) <= vars ?p - ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_var 2)))),
    ("Symmetric_Polynomials.lead_monom_power'",
     "?p ~= 0 ==> lead_monom (?p ^ ?n) = of_nat ?n * lead_monom ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 3, template_var 1))))),
    ("Symmetric_Polynomials.coeff_map_mpoly'",
     "?f (0::?'b) = (0::?'a) ==>
      MPoly_Type.coeff (map_mpoly ?f ?p) ?m = ?f (MPoly_Type.coeff ?p ?m)",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_hole 4), template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Symmetric_Polynomials.lead_monom_smult",
     "?c * Symmetric_Polynomials.lead_coeff ?p ~= (0::?'a) ==>
      lead_monom (MPoly_Type.smult ?c ?p) = lead_monom ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_app (template_hole 4, template_var 0)),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Symmetric_Polynomials.sym_mpoly_nz",
     "[| finite ?A; ?k <= card ?A |] ==> sym_mpoly ?A ?k ~= 0",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Symmetric_Polynomials.lead_coeff_sym_mpoly",
     "[| finite ?A; ?k <= card ?A |]
      ==> Symmetric_Polynomials.lead_coeff (sym_mpoly ?A ?k) = (1::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Symmetric_Polynomials.coeff_map_mpoly",
     "MPoly_Type.coeff (map_mpoly ?f ?p) ?m =
      (if MPoly_Type.coeff ?p ?m = (0::?'b) then 0::?'a
       else ?f (MPoly_Type.coeff ?p ?m))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0)),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_var 2,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("Symmetric_Polynomials.comp_bij_eq_iff",
     "bij ?f ==> (?g o ?f = ?h o ?f) = (?g = ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_hole 5),
              template_hole 4)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_equation (template_var 1, template_var 0)))),
    ("Symmetric_Polynomials.coeff_mpoly_map_vars",
     "bij ?f ==>
      MPoly_Type.coeff (mpoly_map_vars ?f ?p) ?mon =
      MPoly_Type.coeff ?p (permutep ?f ?mon)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Symmetric_Polynomials.insertion_mpoly_map_vars",
     "bij ?f ==>
      insertion ?g (mpoly_map_vars ?f ?p) = insertion (?g o ?f) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Symmetric_Polynomials.map_mpoly_comp",
     "?f (0::?'b) = (0::?'a) ==>
      map_mpoly ?f (map_mpoly ?g ?p) = map_mpoly (?f o ?g) ?p",
     template_implication
      ([template_equation
         (template_app (template_var 2, template_hole 6), template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Symmetric_Polynomials.monom_of_set_eq_iff",
     "[| finite ?X; finite ?Y |]
      ==> (monom_of_set ?X = monom_of_set ?Y) = (?X = ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Symmetric_Polynomials.coeff_mapm_mpoly",
     "MPoly_Type.coeff (mapm_mpoly ?f ?p) ?m =
      (if MPoly_Type.coeff ?p ?m = (0::?'b) then 0::?'a
       else ?f ?m (MPoly_Type.coeff ?p ?m))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0)),
                   template_hole 1)),
               template_hole 0),
             template_app
              (template_app (template_var 2, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))
           ))),
    ("Symmetric_Polynomials.lookup_permutep",
     "lookup (permutep ?f ?m) ?x =
      (if bij ?f then lookup ?m (?f ?x) else lookup ?m ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0),
               template_hole 0)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_var 2, template_var 0))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.insertion_altdef",
     "insertion ?f ?p =
      (SUM m. MPoly_Type.coeff ?p m * (PROD i. ?f i ^ lookup m i))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Symmetric_Polynomials.permutep_single",
     "bij ?f ==>
      permutep ?f (Poly_Mapping.single ?a ?b) =
      Poly_Mapping.single (inv ?f ?a) ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 2),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_hole 4),
                 template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Symmetric_Polynomials.lead_coeff_smult",
     "?c * Symmetric_Polynomials.lead_coeff ?p ~= (0::?'a) ==>
      Symmetric_Polynomials.lead_coeff (MPoly_Type.smult ?c ?p) =
      ?c * Symmetric_Polynomials.lead_coeff ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_var 0)),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("Symmetric_Polynomials.lead_coeff_power",
     "Symmetric_Polynomials.lead_coeff ?p ^ ?n ~= (0::?'a) ==>
      Symmetric_Polynomials.lead_coeff (?p ^ ?n) =
      Symmetric_Polynomials.lead_coeff ?p ^ ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_var 0),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("Symmetric_Polynomials.symmetric_mpoly_prod",
     "(!!i. i : ?B ==> symmetric_mpoly ?A (?f i)) ==>
      symmetric_mpoly ?A (prod ?f ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Symmetric_Polynomials.symmetric_mpoly_sum",
     "(!!i. i : ?B ==> symmetric_mpoly ?A (?f i)) ==>
      symmetric_mpoly ?A (sum ?f ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Symmetric_Polynomials.permutep_eq_monom_of_set_iff",
     "bij ?f ==>
      (permutep ?f ?mon = monom_of_set ?A) =
      (?mon = monom_of_set (?f ` ?A))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_hole 5),
              template_hole 5)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_equation
          (template_var 1,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("Symmetric_Polynomials.mpoly_map_vars_monom",
     "bij ?f ==>
      mpoly_map_vars ?f (MPoly_Type.monom ?m ?c) =
      MPoly_Type.monom (permutep (inv ?f) ?m) ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_hole 5),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_hole 5),
                   template_var 2)),
               template_var 1)),
           template_var 0)))),
    ("Symmetric_Polynomials.lead_monom_power",
     "Symmetric_Polynomials.lead_coeff ?p ^ ?n ~= (0::?'a) ==>
      lead_monom (?p ^ ?n) = of_nat ?n * lead_monom ?p",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 1)),
                template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 3, template_var 1))))),
    ("Symmetric_Polynomials.permutep_Const\<^sub>0",
     "(!!x. (?f x = 0) = (x = 0)) ==>
      permutep ?f (Const\<^sub>0 ?c) = Const\<^sub>0 ?c",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Symmetric_Polynomials.check_symmetric_mpoly_dom_aux",
     "[| finite ?B; vars ?p <= ?B; ?A <= ?B |]
      ==> check_symmetric_mpoly_dom ?A ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 2),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Symmetric_Polynomials.fund_sym_poly_wit_dom_aux",
     "[| finite ?B; vars ?p <= ?B; ?A <= ?B |]
      ==> fund_sym_poly_wit_dom ?A ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 2),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Symmetric_Polynomials.sym_mpoly_altdef",
     "sym_mpoly ?A ?k =
      (SUM X | X <= ?A & card X = ?k.
          MPoly_Type.monom (monom_of_set X) (1::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app (template_hole 4, t_empty)))),
    ("Symmetric_Polynomials.mpoly_map_vars_monom_single",
     "bij ?f ==>
      mpoly_map_vars ?f (MPoly_Type.monom (Poly_Mapping.single ?i ?n) ?c) =
      MPoly_Type.monom (Poly_Mapping.single (?f ?i) ?n) ?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 3, template_var 2)),
               template_var 1)),
           template_var 0)))),
    ("Symmetric_Polynomials.restrictpm_add_disjoint",
     "?X Int ?Y = {} ==>
      restrictpm ?X ?m + restrictpm ?Y ?m = restrictpm (?X Un ?Y) ?m",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Symmetric_Polynomials.coeff_mapm_mpoly'",
     "(!!m. ?f m (0::?'b) = (0::?'a)) ==>
      MPoly_Type.coeff (mapm_mpoly ?f ?p) ?m =
      ?f ?m (MPoly_Type.coeff ?p ?m)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_var 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Symmetric_Polynomials.lead_coeff_mult",
     "Symmetric_Polynomials.lead_coeff ?p *
      Symmetric_Polynomials.lead_coeff ?q ~=
      (0::?'a) ==>
      Symmetric_Polynomials.lead_coeff (?p * ?q) =
      Symmetric_Polynomials.lead_coeff ?p *
      Symmetric_Polynomials.lead_coeff ?q",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_app (template_hole 2, template_var 0)),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Symmetric_Polynomials.lead_monom_mult",
     "Symmetric_Polynomials.lead_coeff ?p *
      Symmetric_Polynomials.lead_coeff ?q ~=
      (0::?'a) ==>
      lead_monom (?p * ?q) = lead_monom ?p + lead_monom ?q",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_var 1)),
                template_app (template_hole 5, template_var 0)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Symmetric_Polynomials.lead_monom_sum_le",
     "(!!x. x : ?X ==> lead_monom (?h x) <= ?ub) ==>
      lead_monom (sum ?h ?X) <= ?ub",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Symmetric_Polynomials.ex_subset_of_card",
     "[| finite ?A; ?k <= card ?A |] ==> EX B<=?A. card B = ?k",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Symmetric_Polynomials.coeff_fund_sym_step_poly",
     "[| ALL m. MPoly_Type.coeff ?p m : ?C; ring_closed ?C |]
      ==> MPoly_Type.coeff (fund_sym_step_poly ?A ?p) ?m : ?C",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 3)),
                 template_var 0)),
             template_var 2)
           ))),
    ("Symmetric_Polynomials.insertion_Prod_any",
     "finite {x. ?g x ~= 1} ==>
      insertion ?f (Prod_any ?g) = (PROD x. insertion ?f (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8, template_app (template_hole 7, t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, t_empty)))),
    ("Symmetric_Polynomials.insertion_Sum_any",
     "finite {x. ?g x ~= 0} ==>
      insertion ?f (Sum_any ?g) = (SUM x. insertion ?f (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8, template_app (template_hole 7, t_empty))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, t_empty)))),
    ("Symmetric_Polynomials.coeff_Sum_any",
     "finite {x. ?f x ~= 0} ==>
      MPoly_Type.coeff (Sum_any ?f) ?m =
      (SUM x. MPoly_Type.coeff (?f x) ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8, template_app (template_hole 7, t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app (template_hole 0, t_empty)))),
    ("Symmetric_Polynomials.Sum_any_lookup",
     "finite {x. ?g x ~= 0} ==>
      (SUM x. lookup (?g x) ?y) = lookup (Sum_any ?g) ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8, template_app (template_hole 7, t_empty))
            )],
       template_equation
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Symmetric_Polynomials.upt_add_eq_append'",
     "[| ?i <= ?j; ?j <= ?k |] ==> [?i..<?k] = [?i..<?j] @ [?j..<?k]",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Symmetric_Polynomials.in_keys_mapI",
     "[| ?x : keys ?m; ?f (lookup ?m ?x) ~= (0::?'c) |]
      ==> ?x : keys (Poly_Mapping.map ?f ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_var 0,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 2)),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Symmetric_Polynomials.permutep_comp",
     "[| bij ?f; bij ?g |]
      ==> permutep (?f o ?g) = permutep ?g o permutep ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Symmetric_Polynomials.permutep_comp'",
     "[| bij ?f; bij ?g |]
      ==> permutep (?f o ?g) ?mon = permutep ?g (permutep ?f ?mon)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_hole 3),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_hole 3),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Symmetric_Polynomials.mpoly_map_vars_comp",
     "[| bij ?f; bij ?g |]
      ==> mpoly_map_vars ?f (mpoly_map_vars ?g ?p) =
          mpoly_map_vars (?f o ?g) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_hole 3),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_hole 3),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Symmetric_Polynomials.coeff_sym_mpoly_monom_of_set",
     "[| finite ?X; ?Y <= ?X; card ?Y = ?k |]
      ==> MPoly_Type.coeff (sym_mpoly ?X ?k) (monom_of_set ?Y) = (1::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_equation
         (template_app (template_hole 5, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Symmetric_Polynomials.lookup_sym_mpoly_aux_monom_of_set",
     "[| finite ?X; ?Y <= ?X; card ?Y = ?k |]
      ==> lookup (sym_mpoly_aux ?X ?k) (monom_of_set ?Y) = (1::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_equation
         (template_app (template_hole 5, template_var 1), template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("Symmetric_Polynomials.mapp_mapp",
     "(!!x. ?f x (0::?'c) = (0::?'b)) ==>
      Poly_Mapping.mapp ?f (Poly_Mapping.mapp ?g ?m) =
      Poly_Mapping.mapp (%x y. ?f x (?g x y)) ?m",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Symmetric_Polynomials.mapm_mpoly_comp",
     "(!!x. ?f x (0::?'b) = (0::?'a)) ==>
      mapm_mpoly ?f (mapm_mpoly ?g ?p) =
      mapm_mpoly (%m c. ?f m (?g m c)) ?p",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Symmetric_Polynomials.lead_coeff_prod",
     "(PROD i:?A. Symmetric_Polynomials.lead_coeff (?f i)) ~= (0::?'a) ==>
      Symmetric_Polynomials.lead_coeff (prod ?f ?A) =
      (PROD i:?A. Symmetric_Polynomials.lead_coeff (?f i))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 3, t_empty), template_var 0),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0)),
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)))),
    ("Symmetric_Polynomials.lead_monom_prod",
     "(PROD i:?A. Symmetric_Polynomials.lead_coeff (?f i)) ~= (0::?'a) ==>
      lead_monom (prod ?f ?A) = (SUM i:?A. lead_monom (?f i))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, t_empty), template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Symmetric_Polynomials.insertion_substitute_linear",
     "insertion (%i. ?c i * ?f i) ?p =
      insertion ?f (mapm_mpoly (%m. (*) (PROD i. ?c i ^ lookup m i)) ?p)",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_var 0),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)))),
    ("Symmetric_Polynomials.insertion_sym_mpoly",
     "finite ?X ==>
      insertion ?f (sym_mpoly ?X ?k) =
      (SUM Y | Y <= ?X & card Y = ?k. prod ?f Y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 1),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 6, t_empty),
           template_app (template_hole 4, t_empty))))),
    ("Symmetric_Polynomials.infinite_card_subsets",
     "[| infinite ?A; 0 < ?k |]
      ==> infinite {X. X <= ?A & finite X & card X = ?k}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 8, template_var 1))
            ),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 5, template_app (template_hole 4, t_empty))
               )
           ))),
    ("Symmetric_Polynomials.map_mpoly_cong",
     "[| !!m. ?f (MPoly_Type.coeff ?p m) = ?g (MPoly_Type.coeff ?p m);
         ?p = ?q |]
      ==> map_mpoly ?f ?p = map_mpoly ?g ?q",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_equation (template_var 2, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.fund_sym_poly_wit_coeff",
     "[| ALL m. MPoly_Type.coeff ?p m : ?C; ring_closed ?C |]
      ==> ALL m m'.
             MPoly_Type.coeff (MPoly_Type.coeff (fund_sym_poly_wit ?A ?p) m)
              m'
             : ?C",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Symmetric_Polynomials.lead_monom_sym_mpoly",
     "[| sorted ?xs; distinct ?xs; ?k <= length ?xs |]
      ==> lead_monom (sym_mpoly (set ?xs) ?k) =
          monom_of_set (set (take ?k ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("Symmetric_Polynomials.permutep_cong",
     "[| ?f permutes - keys ?p; ?g permutes - keys ?p; ?p = ?q |]
      ==> permutep ?f ?p = permutep ?g ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)))
            ),
        template_equation (template_var 2, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_map_vars_cong",
     "[| ?f permutes - vars ?p; ?g permutes - vars ?q; ?p = ?q |]
      ==> mpoly_map_vars ?f ?p = mpoly_map_vars ?g ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            ),
        template_equation (template_var 2, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.coeff_sym_mpoly",
     "MPoly_Type.coeff (sym_mpoly ?X ?k) ?mon =
      (if finite ?X & (EX Y<=?X. card Y = ?k & ?mon = monom_of_set Y)
       then 1::?'a else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 2)),
               template_app (template_hole 7, t_empty))),
           template_hole 1),
         template_hole 0))),
    ("Symmetric_Polynomials.lookup_sym_mpoly_aux",
     "lookup (sym_mpoly_aux ?X ?k) ?mon =
      (if finite ?X & (EX Y<=?X. card Y = ?k & ?mon = monom_of_set Y)
       then 1::?'a else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 2)),
               template_app (template_hole 7, t_empty))),
           template_hole 1),
         template_hole 0))),
    ("Symmetric_Polynomials.lead_coeff_prod'",
     "(!!i. i : ?A ==> ?f i ~= 0) ==>
      Symmetric_Polynomials.lead_coeff (prod ?f ?A) =
      (PROD i:?A. Symmetric_Polynomials.lead_coeff (?f i))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Symmetric_Polynomials.lead_monom_prod'",
     "(!!i. i : ?A ==> ?f i ~= 0) ==>
      lead_monom (prod ?f ?A) = (SUM i:?A. lead_monom (?f i))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Symmetric_Polynomials.lead_monom_sym_mpoly_prod_notin",
     "[| finite ?A; ?k ~: ?A |]
      ==> lookup (lead_monom (PROD i = 1..card ?A. sym_mpoly ?A i ^ ?h i))
           ?k =
          0",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, t_empty),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app (template_hole 1, template_var 2))))),
           template_var 1),
         template_hole 0))),
    ("Symmetric_Polynomials.lead_monom_induct'",
     "(!!p. (!!p'. [| vars p' <= vars p; lead_monom p' < lead_monom p |]
                   ==> ?P p') ==>
            ?P p) ==>
      ?P ?p",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Symmetric_Polynomials.fund_sym_poly_wit_insertion_aux",
     "[| finite ?B; vars ?p <= ?B; symmetric_mpoly ?A ?p; ?A <= ?B |]
      ==> insertion (sym_mpoly ?A) (fund_sym_poly_wit ?A ?p) = ?p",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Symmetric_Polynomials.permutep_mult",
     "(!!x y. ?f (x + y) = ?f x + ?f y) ==>
      permutep ?f (?m1.0 * ?m2.0) = permutep ?f ?m1.0 * permutep ?f ?m2.0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Symmetric_Polynomials.lookup_lead_monom_decreasing",
     "[| symmetric_mpoly ?A ?p; ?i : ?A; ?j : ?A; ?i <= ?j |]
      ==> lookup (lead_monom ?p) ?j <= lookup (lead_monom ?p) ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1)))),
    ("Symmetric_Polynomials.fund_sym_poly_wit_coeffs_aux",
     "[| finite ?B; vars ?p <= ?B; symmetric_mpoly ?A ?p; ?A <= ?B |]
      ==> vars (MPoly_Type.coeff (fund_sym_poly_wit ?A ?p) ?m) <= ?B - ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 3)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("Symmetric_Polynomials.lead_monom_sym_mpoly_prod",
     "finite ?A ==>
      lead_monom (PROD i = 1..card ?A. sym_mpoly ?A i ^ ?h i) =
      (SUM i = 1..card ?A. of_nat (?h i) * lead_monom (sym_mpoly ?A i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, t_empty),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_hole 3, template_var 1)))),
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, template_var 1)))))),
    ("Symmetric_Polynomials.lead_coeff_sym_mpoly_powerprod",
     "[| finite ?A; !!x. x : ?X ==> ?f x : {1..card ?A} |]
      ==> Symmetric_Polynomials.lead_coeff
           (PROD x:?X. sym_mpoly ?A (?f x) ^ ?g x) =
          (1::?'b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_var 2)),
         template_hole 0))),
    ("Symmetric_Polynomials.Sum_any_diff",
     "[| finite {x. ?f x ~= (0::?'a)}; finite {x. ?g x ~= (0::?'a)} |]
      ==> (SUM x. ?f x - ?g x) = Sum_any ?f - Sum_any ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6, template_app (template_hole 5, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 6, template_app (template_hole 5, t_empty))
            )],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 0))))),
    ("Symmetric_Polynomials.symmetric_mpoly_symmetric_prod",
     "[| ?g permutes ?X;
         !!x \<pi>.
            [| x : ?X; \<pi> permutes ?A |]
            ==> mpoly_map_vars \<pi> (?f x) = ?f (?g x) |]
      ==> symmetric_mpoly ?A (prod ?f ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, t_empty), template_var 2))
           ))),
    ("Symmetric_Polynomials.symmetric_mpoly_symmetric_sum",
     "[| ?g permutes ?X;
         !!x \<pi>.
            [| x : ?X; \<pi> permutes ?A |]
            ==> mpoly_map_vars \<pi> (?f x) = ?f (?g x) |]
      ==> symmetric_mpoly ?A (sum ?f ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, t_empty), template_var 2))
           ))),
    ("Symmetric_Polynomials.prod_fun_compose_bij",
     "[| bij ?f; !!x y. ?f (x + y) = ?f x + ?f y |]
      ==> prod_fun ?m1.0 ?m2.0 (?f ?x) =
          prod_fun (?m1.0 o ?f) (?m2.0 o ?f) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 3),
                template_hole 9),
              template_hole 8)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_app (template_var 3, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 3)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3)),
           template_var 0)))),
    ("Symmetric_Polynomials.sym_mpoly_representation_unique_aux",
     "[| finite ?A; insertion (sym_mpoly ?A) ?p = 0;
         !!m. vars (MPoly_Type.coeff ?p m) Int ?A = {};
         vars ?p <= {1..card ?A} |]
      ==> ?p = 0",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_equation
         (template_app
           (template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 1)),
            template_var 0),
          template_hole 13),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app (template_hole 2, template_var 1)))],
       template_equation (template_var 0, template_hole 0))),
    ("Symmetric_Polynomials.fund_sym_step_poly",
     "[| finite ?A; ?p ~= 0;
         ALL i:?A.
            ALL j:?A.
               i <= j -->
               lookup (lead_monom ?p) j <= lookup (lead_monom ?p) i |]
      ==> Symmetric_Polynomials.lead_coeff (fund_sym_step_poly ?A ?p) =
          Symmetric_Polynomials.lead_coeff ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 8)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Symmetric_Polynomials.fund_sym_step_poly",
     "[| finite ?A; ?p ~= 0;
         ALL i:?A.
            ALL j:?A.
               i <= j -->
               lookup (lead_monom ?p) j <= lookup (lead_monom ?p) i |]
      ==> lead_monom (fund_sym_step_poly ?A ?p) = lead_monom ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Symmetric_Polynomials.lead_monom_sym_mpoly_prod_in",
     "[| finite ?A; ?k < card ?A |]
      ==> lookup (lead_monom (PROD i = 1..card ?A. sym_mpoly ?A i ^ ?h i))
           (sorted_list_of_set ?A ! ?k) =
          sum ?h {?k + 1..card ?A}",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 12, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, t_empty),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app (template_hole 12, template_var 2))))),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_hole 4)),
             template_app (template_hole 12, template_var 2)))))),
    ("Symmetric_Polynomials.lead_monom_fund_sym_step_poly_less",
     "[| finite ?A; lead_monom ?p ~= 0;
         ALL i:?A.
            ALL j:?A.
               i <= j -->
               lookup (lead_monom ?p) j <= lookup (lead_monom ?p) i |]
      ==> lead_monom (?p - fund_sym_step_poly ?A ?p) < lead_monom ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 8, template_var 0),
              template_hole 7)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1), t_empty)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app (template_hole 8, template_var 0)))),
    ("Symmetric_Polynomials.lead_monom_induct",
     "[| finite ?A; vars ?p <= ?A;
         !!p. [| vars p <= ?A;
                 !!p'. [| vars p' <= ?A; lead_monom p' < lead_monom p |]
                       ==> ?P p' |]
              ==> ?P p |]
      ==> ?P ?p",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 2),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Symmetric_Polynomials.eq_fund_sym_poly_witI",
     "[| finite ?A; symmetric_mpoly ?A ?p; insertion (sym_mpoly ?A) ?q = ?p;
         !!m. vars (MPoly_Type.coeff ?q m) Int ?A = {};
         vars ?q <= {1..card ?A} |]
      ==> ?q = fund_sym_poly_wit ?A ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 2)),
            template_var 0),
          template_var 1),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_app (template_hole 2, template_var 2)))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Symmetric_Polynomials.lead_monom_sum",
     "[| inj_on (lead_monom o ?h) ?X; finite ?X; ?X ~= {};
         !!x. x : ?X ==> ?h x ~= 0 |]
      ==> lead_monom (sum ?h ?X) = Max ((lead_monom o ?h) ` ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_var 1)),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 8)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 13, template_hole 12),
                 template_var 1)),
             template_var 0))))),
    ("Symmetric_Polynomials.lead_monom_sym_poly_powerprod_inj",
     "[| lead_monom (PROD i. sym_mpoly ?A i ^ lookup ?m1.0 i) =
         lead_monom (PROD i. sym_mpoly ?A i ^ lookup ?m2.0 i);
         finite ?A; keys ?m1.0 <= {1..card ?A};
         keys ?m2.0 <= {1..card ?A} |]
      ==> ?m1.0 = ?m2.0",
     template_implication
      ([template_equation
         (template_app
           (template_hole 10, template_app (template_hole 9, t_empty)),
          template_app
           (template_hole 10, template_app (template_hole 9, t_empty))),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_app (template_hole 0, template_var 2))),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 0),
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_app (template_hole 0, template_var 2)))],
       template_equation (template_var 1, template_var 0))),
    ("Symmetric_Polynomials.fund_sym_step_poly",
     "[| finite ?A; ?p ~= 0;
         ALL i:?A.
            ALL j:?A.
               i <= j -->
               lookup (lead_monom ?p) j <= lookup (lead_monom ?p) i |]
      ==> fund_sym_step_poly ?A ?p =
          fund_sym_step_coeff ?A ?p *
          (PROD x. sym_mpoly ?A x ^ lookup (fund_sym_step_monom ?A ?p) x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 12)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)),
           template_app (template_hole 3, t_empty))))),
    ("Symmetric_Polynomials.prod_fun_max",
     "[| !!m. ?a < m ==> ?f m = (0::?'b); !!m. ?b < m ==> ?g m = (0::?'b);
         finite {m. ?f m ~= (0::?'b)}; finite {m. ?g m ~= (0::?'b)} |]
      ==> prod_fun ?f ?g (?a + ?b) = ?f ?a * ?g ?b",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 5, template_app (template_hole 4, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 5, template_app (template_hole 4, t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 3)),
           template_app (template_var 0, template_var 1))))),
    ("Symmetric_Polynomials.prod_fun_gt_max_eq_zero",
     "[| ?a + ?b < ?m; !!m. ?a < m ==> ?f m = (0::?'b);
         !!m. ?b < m ==> ?g m = (0::?'b); finite {m. ?f m ~= (0::?'b)};
         finite {m. ?g m ~= (0::?'b)} |]
      ==> prod_fun ?f ?g ?m = (0::?'b)",
     template_implication
      ([template_inequation
         (less_than,
          template_app
           (template_app (template_hole 7, template_var 4), template_var 3),
          template_var 2),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 3, template_app (template_hole 2, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 3, template_app (template_hole 2, t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2),
         template_hole 4))),
    ("Symmetric_Polynomials.sym_mpoly_representation_unique",
     "[| finite ?A;
         insertion (sym_mpoly ?A) ?p = insertion (sym_mpoly ?A) ?q;
         !!m. vars (MPoly_Type.coeff ?p m) Int ?A = {};
         !!m. vars (MPoly_Type.coeff ?q m) Int ?A = {};
         vars ?p <= {1..card ?A}; vars ?q <= {1..card ?A} |]
      ==> ?p = ?q",
     template_implication
      ([template_predicate
         (template_app (template_hole 15, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_hole 13,
              template_app (template_hole 12, template_var 2)),
            template_var 1),
          template_app
           (template_app
             (template_hole 13,
              template_app (template_hole 12, template_var 2)),
            template_var 0)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_app (template_hole 1, template_var 2))),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_app (template_hole 1, template_var 2)))],
       template_equation (template_var 1, template_var 0))),
    ("Symmetric_Polynomials.symmetric_poly_of_roots_in_subring_monic",
     "[| ring_closed ?C; ALL m. MPoly_Type.coeff ?q m : ?C;
         ring_homomorphism ?l; finite ?A; symmetric_mpoly ?A ?q;
         vars ?q <= ?A; ?p = (PROD i:?A. [:- ?root i, 1::?'a:]);
         ALL i. ?l (poly.coeff ?p i) : ?C |]
      ==> insertion (%x. ?l (?root x)) ?q : ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 5)),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (template_app (template_hole 13, template_var 3)),
        template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 4)
            ),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 4),
          template_var 2),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 7, t_empty), template_var 2)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 0, t_empty), template_var 4)),
             template_var 5)
           ))),
    ("Symmetric_Polynomials.symmetric_poly_of_roots_in_subring",
     "[| ring_closed ?C; ALL m. MPoly_Type.coeff ?q m : ?C;
         ring_homomorphism ?l; finite ?A; symmetric_mpoly ?A ?q;
         vars ?q <= ?A; ?cinv * ?l ?c = (1::?'b); ?cinv : ?C;
         ?p = Polynomial.smult ?c (PROD i:?A. [:- ?root i, 1::?'a:]);
         ALL i. ?l (poly.coeff ?p i) : ?C |]
      ==> insertion (%x. ?l (?root x)) ?q : ?C",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 7)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate
         (template_app (template_hole 17, template_var 5)),
        template_predicate
         (template_app (template_hole 16, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 4),
              template_var 6)
            ),
        template_inequation
         (less_equals, template_app (template_hole 13, template_var 6),
          template_var 4),
        template_equation
         (template_app
           (template_app (template_hole 11, template_var 3),
            template_app (template_var 5, template_var 2)),
          template_hole 10),
        template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 3),
              template_var 7)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 8, template_var 2),
            template_app
             (template_app (template_hole 7, t_empty), template_var 4))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app (template_hole 0, t_empty), template_var 6)),
             template_var 7)
           ))),
    ("Symmetric_Polynomials.symmetric_poly_of_roots_conv_poly_of_coeffs_monic",
     "[| ring_closed ?C; ALL m. MPoly_Type.coeff ?q m : ?C;
         ring_homomorphism ?l; finite ?A; symmetric_mpoly ?A ?q;
         vars ?q <= ?A; ?p = (PROD i:?A. [:- ?root i, 1::?'a:]);
         !!q'. [| vars q' <= {0..<card ?A}; !!m. MPoly_Type.coeff q' m : ?C;
                  insertion (?l o poly.coeff ?p) q' =
                  insertion (?l o ?root) ?q |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 23, template_var 6)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate
         (template_app (template_hole 19, template_var 4)),
        template_predicate
         (template_app (template_hole 18, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 3),
              template_var 5)
            ),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 5),
          template_var 3),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 13, t_empty), template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Symmetric_Polynomials.symmetric_poly_of_roots_conv_poly_of_coeffs",
     "[| ring_closed ?C; ALL m. MPoly_Type.coeff ?q m : ?C;
         ring_homomorphism ?l; finite ?A; symmetric_mpoly ?A ?q;
         vars ?q <= ?A; ?cinv * ?l ?c = (1::?'b); ?cinv : ?C;
         ?p = Polynomial.smult ?c (PROD i:?A. [:- ?root i, 1::?'a:]);
         !!q'. [| vars q' <= {0..<card ?A}; !!m. MPoly_Type.coeff q' m : ?C;
                  insertion (?l o poly.coeff ?p) q' =
                  insertion (?l o ?root) ?q |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 26, template_var 8)),
        template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate
         (template_app (template_hole 22, template_var 6)),
        template_predicate
         (template_app (template_hole 21, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 5),
              template_var 7)
            ),
        template_inequation
         (less_equals, template_app (template_hole 18, template_var 7),
          template_var 5),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 4),
            template_app (template_var 6, template_var 3)),
          template_hole 15),
        template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 4),
              template_var 8)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 13, template_var 3),
            template_app
             (template_app (template_hole 12, t_empty), template_var 5))),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Symmetric_PolynomialsTemplates"
### 0.807s elapsed time, 1.264s cpu time, 0.520s GC time
val it = (): unit
