   [("Symmetric_Polynomials.mpoly_coeff_0",
     "MPoly_Type.coeff 0 ?m = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Symmetric_Polynomials.lead_coeff_Const",
     "Symmetric_Polynomials.lead_coeff (Const ?c) = ?c",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Symmetric_Polynomials.vars_Const", "vars (Const ?c) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Symmetric_Polynomials.mpoly_map_vars_0", "mpoly_map_vars ?f 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Symmetric_Polynomials.mpoly_map_vars_1", "mpoly_map_vars ?f 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Symmetric_Polynomials.permutep_id", "permutep id ?mon = ?mon",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Symmetric_Polynomials.permutep_0", "permutep ?f 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Symmetric_Polynomials.lead_monom_Const", "lead_monom (Const ?c) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Symmetric_Polynomials.lead_monom_numeral",
     "lead_monom (numeral ?n) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Symmetric_Polynomials.lead_coeff_monom",
     "Symmetric_Polynomials.lead_coeff (MPoly_Type.monom ?p ?c) = ?c",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Symmetric_Polynomials.insertion_Const",
     "insertion ?f (Const ?c) = ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Symmetric_Polynomials.insertion_aux_Const\<^sub>0",
     "insertion_aux ?f (Const\<^sub>0 ?c) = ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Symmetric_Polynomials.map_mpoly_conv_mapm_mpoly",
     "map_mpoly ?f = mapm_mpoly (%_. ?f)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, t_empty))),
    ("Symmetric_Polynomials.poly_mapping_map_conv_mapp",
     "Poly_Mapping.map ?f = Poly_Mapping.mapp (%_. ?f)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, t_empty))),
    ("Symmetric_Polynomials.length_sorted_list_of_set",
     "length (sorted_list_of_set ?A) = card ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Symmetric_Polynomials.keys_uminus", "keys (- ?m) = keys ?m",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Symmetric_Polynomials.vars_uminus", "vars (- ?p) = vars ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Symmetric_Polynomials.surj_permutep", "surj (permutep ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Symmetric_Polynomials.permutep_id'", "permutep (%x. x) ?mon = ?mon",
     template_equation
      (template_app
        (template_app (template_hole 0, t_empty), template_var 0),
       template_var 0)),
    ("Symmetric_Polynomials.lead_monom_uminus",
     "lead_monom (- ?p) = lead_monom ?p",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Symmetric_Polynomials.insertion_Var", "insertion ?f (Var ?i) = ?f ?i",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Symmetric_Polynomials.poly_mapping_nat_le_0", "(?m <= 0) = (?m = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("Symmetric_Polynomials.check_symmetric_mpoly_correct",
     "check_symmetric_mpoly ?A ?p = symmetric_mpoly ?A ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_Const",
     "mpoly_map_vars ?f (Const ?c) = Const ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Symmetric_Polynomials.lead_coeff_eq_0_iff",
     "(Symmetric_Polynomials.lead_coeff ?p = (0::?'a)) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Symmetric_Polynomials.keys_empty_iff", "(keys ?p = {}) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Symmetric_Polynomials.mapping_of_eq_0_iff",
     "(mapping_of ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Symmetric_Polynomials.symmetric_mpoly_uminus_iff",
     "symmetric_mpoly ?A (- ?p) = symmetric_mpoly ?A ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Symmetric_Polynomials.sum_list_replicate",
     "sum_list (replicate ?n ?x) = of_nat ?n * ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Symmetric_Polynomials.insertion_uminus",
     "insertion ?f (- ?p) = - insertion ?f ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_coeff_uminus",
     "MPoly_Type.coeff (- ?p) ?m = - MPoly_Type.coeff ?p ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.Sum_any_uminus",
     "(SUM x. - ?f x) = - Sum_any ?f",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Symmetric_Polynomials.keys_restrictpm",
     "keys (restrictpm ?A ?m) = keys ?m Int ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_var 1))),
    ("Symmetric_Polynomials.keys_monom_of_set",
     "keys (monom_of_set ?X) = (if finite ?X then ?X else {})",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Symmetric_Polynomials.lead_monom_eq_0_iff",
     "(lead_monom ?p = 0) = (vars ?p = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_eq_0_iff",
     "(mpoly_map_vars ?f ?p = 0) = (?p = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Symmetric_Polynomials.permutep_eq_0_iff",
     "(permutep ?f ?m = 0) = (?m = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_uminus",
     "mpoly_map_vars ?f (- ?p) = - mpoly_map_vars ?f ?p",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.permutep_uminus",
     "permutep ?f (- ?m) = - permutep ?f ?m",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.Sum_any_mapping_of",
     "(SUM x. mapping_of (?f x)) = mapping_of (Sum_any ?f)",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Symmetric_Polynomials.mpoly_coeff_1",
     "MPoly_Type.coeff 1 ?m = (if ?m = 0 then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_dunno)),
    ("Symmetric_Polynomials.lookup_1",
     "lookup 1 ?m = (if ?m = (0::?'b) then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_dunno)),
    ("Symmetric_Polynomials.prod_fun_nat_0",
     "prod_fun ?f ?g 0 = ?f 0 * ?g 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 1, template_hole 1)),
         template_app (template_var 0, template_hole 1)))),
    ("Symmetric_Polynomials.vars_empty_iff",
     "(vars ?p = {}) = (?p = Const (Symmetric_Polynomials.lead_coeff ?p))",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_equation
        (template_var 0,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Symmetric_Polynomials.restrictpm_add_complements",
     "restrictpm ?X ?m + restrictpm (- ?X) ?m = ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_var 0)),
    ("Symmetric_Polynomials.restrictpm_add_complements",
     "restrictpm (- ?X) ?m + restrictpm ?X ?m = ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_var 0)),
    ("Symmetric_Polynomials.mpoly_coeff_Const",
     "MPoly_Type.coeff (Const ?c) ?m = (if ?m = 0 then ?c else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Symmetric_Polynomials.lookup_Const\<^sub>0",
     "lookup (Const\<^sub>0 ?c) ?m = (if ?m = 0 then ?c else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Symmetric_Polynomials.coeff_smult",
     "MPoly_Type.coeff (MPoly_Type.smult ?c ?p) ?m =
      ?c * MPoly_Type.coeff ?p ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_coeff_power_0",
     "MPoly_Type.coeff (?p ^ ?n) 0 = MPoly_Type.coeff ?p 0 ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_var 0))),
    ("Symmetric_Polynomials.insertion_smult",
     "insertion ?f (MPoly_Type.smult ?c ?p) = ?c * insertion ?f ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.insertion_power",
     "insertion ?f (?p ^ ?n) = insertion ?f ?p ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Symmetric_Polynomials.permutep_eq_iff",
     "(permutep ?f ?p = permutep ?f ?q) = (?p = ?q)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_map_mpoly",
     "mpoly_map_vars ?f (map_mpoly ?g ?p) =
      map_mpoly ?g (mpoly_map_vars ?f ?p)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_map_vars_smult",
     "mpoly_map_vars ?f (MPoly_Type.smult ?c ?p) =
      MPoly_Type.smult ?c (mpoly_map_vars ?f ?p)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_map_vars_power",
     "mpoly_map_vars ?f (?p ^ ?n) = mpoly_map_vars ?f ?p ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_Sum_any",
     "mpoly_map_vars ?f (Sum_any ?g) = (SUM x. mpoly_map_vars ?f (?g x))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, t_empty))),
    ("Symmetric_Polynomials.lead_monom_monom",
     "lead_monom (MPoly_Type.monom ?m ?c) =
      (if ?c = (0::?'a) then 0 else ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_dunno)),
    ("Symmetric_Polynomials.mapping_of_sum",
     "(SUM x:?A. mapping_of (?f x)) = mapping_of (sum ?f ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.coeff_Var",
     "MPoly_Type.coeff (Var ?i) ?m =
      ((1::?'a) when ?m = Poly_Mapping.single ?i 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Symmetric_Polynomials.coeff_mpoly_times",
     "MPoly_Type.coeff (?p * ?q) ?mon =
      prod_fun (MPoly_Type.coeff ?p) (MPoly_Type.coeff ?q) ?mon",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Symmetric_Polynomials.lookup_mult_of_nat",
     "lookup (of_nat ?n * ?m) ?k = ?n * lookup ?m ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.coeffs_Const",
     "MPoly_Type.coeffs (Const ?c) = (if ?c = (0::?'a) then {} else {?c})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))
            )],
       template_dunno)),
    ("Symmetric_Polynomials.vars_Var",
     "vars (Var ?i) = (if (0::?'a) = (1::?'a) then {} else {?i})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 0))
            )],
       template_dunno)),
    ("Symmetric_Polynomials.keys_Const\<^sub>0",
     "keys (Const\<^sub>0 ?c) = (if ?c = (0::?'b) then {} else {0})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 0))
            )],
       template_dunno)),
    ("Symmetric_Polynomials.zero_eq_monom_of_set_iff",
     "(0 = monom_of_set ?X) = (infinite ?X | ?X = {})",
     template_bimplication
      (template_equation
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_dunno)),
    ("Symmetric_Polynomials.monom_of_set_eq_zero_iff",
     "(monom_of_set ?X = 0) = (infinite ?X | ?X = {})",
     template_bimplication
      (template_equation
        (template_app (template_hole 6, template_var 0), template_hole 5),
       template_dunno)),
    ("Symmetric_Polynomials.mpoly_coeff_times_0",
     "MPoly_Type.coeff (?p * ?q) 0 =
      MPoly_Type.coeff ?p 0 * MPoly_Type.coeff ?q 0",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_hole 1)))),
    ("Symmetric_Polynomials.coeff_add",
     "MPoly_Type.coeff (?p + ?q) ?m =
      MPoly_Type.coeff ?p ?m + MPoly_Type.coeff ?q ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.insertion_diff",
     "insertion ?f (?p - ?q) = insertion ?f ?p - insertion ?f ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.insertion_sum",
     "insertion ?f (sum ?g ?A) = (SUM x:?A. insertion ?f (?g x))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Symmetric_Polynomials.insertion_prod",
     "insertion ?f (prod ?g ?A) = (PROD x:?A. insertion ?f (?g x))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Symmetric_Polynomials.coeff_sum",
     "MPoly_Type.coeff (sum ?f ?A) ?m =
      (SUM x:?A. MPoly_Type.coeff (?f x) ?m)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Symmetric_Polynomials.coeff_diff",
     "MPoly_Type.coeff (?p - ?q) ?m =
      MPoly_Type.coeff ?p ?m - MPoly_Type.coeff ?q ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.add_nat_poly_mapping_zero_iff",
     "(?a + ?b = 0) = (?a = 0 & ?b = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_dunno)),
    ("Symmetric_Polynomials.mpoly_map_vars_mult",
     "mpoly_map_vars ?f (?p * ?q) =
      mpoly_map_vars ?f ?p * mpoly_map_vars ?f ?q",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_map_vars_add",
     "mpoly_map_vars ?f (?p + ?q) =
      mpoly_map_vars ?f ?p + mpoly_map_vars ?f ?q",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.mpoly_map_vars_prod",
     "mpoly_map_vars ?f (prod ?g ?A) =
      (PROD x:?A. mpoly_map_vars ?f (?g x))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_sum",
     "mpoly_map_vars ?f (sum ?g ?A) = (SUM x:?A. mpoly_map_vars ?f (?g x))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Symmetric_Polynomials.mpoly_map_vars_diff",
     "mpoly_map_vars ?f (?p - ?q) =
      mpoly_map_vars ?f ?p - mpoly_map_vars ?f ?q",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.permutep_add",
     "permutep ?f (?m1.0 + ?m2.0) = permutep ?f ?m1.0 + permutep ?f ?m2.0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.restrictpm_add",
     "restrictpm ?X (?m1.0 + ?m2.0) =
      restrictpm ?X ?m1.0 + restrictpm ?X ?m2.0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.permutep_diff",
     "permutep ?f (?m1.0 - ?m2.0) = permutep ?f ?m1.0 - permutep ?f ?m2.0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Symmetric_Polynomials.lookup_restrictpm",
     "lookup (restrictpm ?A ?m) ?x =
      (if ?x : ?A then lookup ?m ?x else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Symmetric_Polynomials.lookup_monom_of_set",
     "lookup (monom_of_set ?X) ?i = (if finite ?X & ?i : ?X then 1 else 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1))),
           template_hole 1),
         template_hole 0))),
    ("Symmetric_Polynomials.lead_coeff_mult_aux",
     "MPoly_Type.coeff (?p * ?q) (lead_monom ?p + lead_monom ?q) =
      Symmetric_Polynomials.lead_coeff ?p *
      Symmetric_Polynomials.lead_coeff ?q",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Symmetric_Polynomials.coeff_sym_mpoly_0",
     "MPoly_Type.coeff (sym_mpoly ?X ?k) 0 =
      (if finite ?X & ?k = 0 then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 0)),
              template_hole 7)
            )],
       template_dunno)),
    ("Symmetric_Polynomials.mpoly_coeff_prod_0",
     "MPoly_Type.coeff (prod ?f ?A) 0 =
      (PROD x:?A. MPoly_Type.coeff (?f x) 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)),
         template_hole 1),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Symmetric_Polynomials.permutep_smult",
     "permutep (permutep ?f) (Poly_Mapping.map ((*) ?c) ?p) =
      Poly_Mapping.map ((*) ?c) (permutep (permutep ?f) ?p)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("Symmetric_Polynomials.insertion_monom",
     "insertion ?f (MPoly_Type.monom ?m ?c) =
      ?c * (PROD x. ?f x ^ lookup ?m x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, t_empty)))),
    ("Symmetric_Polynomials.insertion_insertion",
     "insertion ?g (insertion ?k ?p) =
      insertion (%x. insertion ?g (?k x)) (map_mpoly (insertion ?g) ?p)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("Symmetric_Polynomials.coeff_map_mpoly",
     "MPoly_Type.coeff (map_mpoly ?f ?p) ?m =
      (if MPoly_Type.coeff ?p ?m = (0::?'b) then 0::?'a
       else ?f (MPoly_Type.coeff ?p ?m))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Symmetric_Polynomials.coeff_mapm_mpoly",
     "MPoly_Type.coeff (mapm_mpoly ?f ?p) ?m =
      (if MPoly_Type.coeff ?p ?m = (0::?'b) then 0::?'a
       else ?f ?m (MPoly_Type.coeff ?p ?m))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Symmetric_Polynomials.lookup_permutep",
     "lookup (permutep ?f ?m) ?x =
      (if bij ?f then lookup ?m (?f ?x) else lookup ?m ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0),
               template_hole 0)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_var 2, template_var 0))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("Symmetric_Polynomials.insertion_altdef",
     "insertion ?f ?p =
      (SUM m. MPoly_Type.coeff ?p m * (PROD i. ?f i ^ lookup m i))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Symmetric_Polynomials.sym_mpoly_altdef",
     "sym_mpoly ?A ?k =
      (SUM X | X <= ?A & card X = ?k.
          MPoly_Type.monom (monom_of_set X) (1::?'a))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app (template_hole 4, t_empty)))),
    ("Symmetric_Polynomials.insertion_substitute_linear",
     "insertion (%i. ?c i * ?f i) ?p =
      insertion ?f (mapm_mpoly (%m. (*) (PROD i. ?c i ^ lookup m i)) ?p)",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_var 0),
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_app (template_hole 3, t_empty), template_var 0)))),
    ("Symmetric_Polynomials.coeff_sym_mpoly",
     "MPoly_Type.coeff (sym_mpoly ?X ?k) ?mon =
      (if finite ?X & (EX Y<=?X. card Y = ?k & ?mon = monom_of_set Y)
       then 1::?'a else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 2)),
               template_app (template_hole 7, t_empty))),
           template_hole 1),
         template_hole 0))),
    ("Symmetric_Polynomials.lookup_sym_mpoly_aux",
     "lookup (sym_mpoly_aux ?X ?k) ?mon =
      (if finite ?X & (EX Y<=?X. card Y = ?k & ?mon = monom_of_set Y)
       then 1::?'a else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 2)),
               template_app (template_hole 7, t_empty))),
           template_hole 1),
         template_hole 0)))]
