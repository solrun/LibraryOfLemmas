   [("Vieta.prod_uminus",
     "(PROD x:?A. - ?f x) = (- (1::?'a)) ^ card ?A * prod ?f ?A",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_hole 1)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app (template_hole 5, t_empty), template_var 0)))),
    ("Vieta.card_vimage_inter",
     "[| inj_on ?f ?A; ?X <= ?f ` ?A |]
      ==> card (?f -` ?X Int ?A) = card ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Vieta.prod_add",
     "finite ?A ==>
      (PROD x:?A. ?f1.0 x + ?f2.0 x) =
      (SUM X:Pow ?A. prod ?f1.0 X * prod ?f2.0 (?A - X))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty), template_var 2),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Vieta.bij_betw_image_fixed_card_subset",
     "inj_on ?f ?A ==>
      bij_betw ((`) ?f) {X. X <= ?A & card X = ?k}
       {X. X <= ?f ` ?A & card X = ?k}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, t_empty),
               template_app (template_hole 7, t_empty)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Vieta.image_image_fixed_card_subset",
     "inj_on ?f ?A ==>
      (`) ?f ` {X. X <= ?A & card X = ?k} =
      {X. X <= ?f ` ?A & card X = ?k}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 9, t_empty),
           template_app (template_hole 7, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Vieta.poly_from_roots",
     "finite ?A ==>
      (PROD x:?A. [:- ?f x, 1::?'b:]) =
      (SUM X:Pow ?A.
          monom ((- (1::?'b)) ^ card X * prod ?f X) (card (?A - X)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 12, t_empty), template_var 1),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("Vieta.prod_diff1",
     "finite ?A ==>
      (PROD x:?A. ?f1.0 x - ?f2.0 x) =
      (SUM X:Pow ?A.
          (- (1::?'c)) ^ card X * prod ?f2.0 X * prod ?f1.0 (?A - X))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 9, t_empty), template_var 2),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Vieta.prod_diff2",
     "finite ?A ==>
      (PROD x:?A. ?f1.0 x - ?f2.0 x) =
      (SUM X:Pow ?A.
          (- (1::?'c)) ^ (card ?A - card X) * prod ?f1.0 X *
          prod ?f2.0 (?A - X))",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 10, t_empty), template_var 2),
         template_app
          (template_app (template_hole 8, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Vieta.prod_sum_PiE",
     "[| finite ?A; !!x. x : ?A ==> finite (?B x) |]
      ==> (PROD x:?A. sum (?f x) (?B x)) =
          (SUM g:Pi\<^sub>E ?A ?B. PROD x:?A. ?f x (g x))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty), template_var 2),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Vieta.coeff_poly_from_roots",
     "[| finite ?A; ?k <= card ?A |]
      ==> coeff (PROD x:?A. [:- ?f x, 1::?'b:]) ?k =
          (- (1::?'b)) ^ (card ?A - ?k) *
          (SUM X | X <= ?A & card X = card ?A - ?k. prod ?f X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 16, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, t_empty), template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 11, template_hole 10)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 16, template_var 2)),
                 template_var 1))),
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 3, t_empty)))))),
    ("Vieta.coeff_poly_from_roots'",
     "[| finite ?A; inj_on ?f ?A; ?k <= card ?A |]
      ==> coeff (PROD x:?A. [:- ?f x, 1::?'b:]) ?k =
          (- (1::?'b)) ^ (card ?A - ?k) *
          sum Prod {X. X <= ?f ` ?A & card X = card ?A - ?k}",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 1),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 18, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app (template_hole 15, t_empty), template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 13, template_hole 12)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 18, template_var 2)),
                 template_var 0))),
           template_app
            (template_app (template_hole 7, t_empty),
             template_app (template_hole 5, t_empty))))))]
