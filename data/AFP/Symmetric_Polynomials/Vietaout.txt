Loading theory "Draft.Vieta" (required by "Draft.VietaTemplates")
Loading theory "Draft.Templates" (required by "Draft.VietaTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.170s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.VietaTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.547s elapsed time, 1.134s cpu time, 0.113s GC time
### theory "Draft.Vieta"
### 0.644s elapsed time, 1.332s cpu time, 0.113s GC time
Loading theory "Draft.VietaTemplates"
val templateLemmas =
   [("Vieta.prod_uminus",
     "(PROD x:?A. - ?f x) = (- (1::?'a)) ^ card ?A * prod ?f ?A",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_hole 1)),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app (template_hole 5, t_empty), template_var 0)))),
    ("Vieta.card_vimage_inter",
     "[| inj_on ?f ?A; ?X <= ?f ` ?A |]
      ==> card (?f -` ?X Int ?A) = card ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Vieta.prod_add",
     "finite ?A ==>
      (PROD x:?A. ?f1.0 x + ?f2.0 x) =
      (SUM X:Pow ?A. prod ?f1.0 X * prod ?f2.0 (?A - X))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty), template_var 2),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Vieta.bij_betw_image_fixed_card_subset",
     "inj_on ?f ?A ==>
      bij_betw ((`) ?f) {X. X <= ?A & card X = ?k}
       {X. X <= ?f ` ?A & card X = ?k}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, t_empty),
               template_app (template_hole 7, t_empty)),
             template_app (template_hole 2, t_empty))
           ))),
    ("Vieta.image_image_fixed_card_subset",
     "inj_on ?f ?A ==>
      (`) ?f ` {X. X <= ?A & card X = ?k} =
      {X. X <= ?f ` ?A & card X = ?k}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 9, t_empty),
           template_app (template_hole 7, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Vieta.poly_from_roots",
     "finite ?A ==>
      (PROD x:?A. [:- ?f x, 1::?'b:]) =
      (SUM X:Pow ?A.
          monom ((- (1::?'b)) ^ card X * prod ?f X) (card (?A - X)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 12, t_empty), template_var 1),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("Vieta.prod_diff1",
     "finite ?A ==>
      (PROD x:?A. ?f1.0 x - ?f2.0 x) =
      (SUM X:Pow ?A.
          (- (1::?'c)) ^ card X * prod ?f2.0 X * prod ?f1.0 (?A - X))",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 9, t_empty), template_var 2),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Vieta.prod_diff2",
     "finite ?A ==>
      (PROD x:?A. ?f1.0 x - ?f2.0 x) =
      (SUM X:Pow ?A.
          (- (1::?'c)) ^ (card ?A - card X) * prod ?f1.0 X *
          prod ?f2.0 (?A - X))",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 10, t_empty), template_var 2),
         template_app
          (template_app (template_hole 8, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Vieta.prod_sum_PiE",
     "[| finite ?A; !!x. x : ?A ==> finite (?B x) |]
      ==> (PROD x:?A. sum (?f x) (?B x)) =
          (SUM g:Pi\<^sub>E ?A ?B. PROD x:?A. ?f x (g x))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty), template_var 2),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("Vieta.coeff_poly_from_roots",
     "[| finite ?A; ?k <= card ?A |]
      ==> coeff (PROD x:?A. [:- ?f x, 1::?'b:]) ?k =
          (- (1::?'b)) ^ (card ?A - ?k) *
          (SUM X | X <= ?A & card X = card ?A - ?k. prod ?f X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 16, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, t_empty), template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 11, template_hole 10)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 16, template_var 2)),
                 template_var 1))),
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 3, t_empty)))))),
    ("Vieta.coeff_poly_from_roots'",
     "[| finite ?A; inj_on ?f ?A; ?k <= card ?A |]
      ==> coeff (PROD x:?A. [:- ?f x, 1::?'b:]) ?k =
          (- (1::?'b)) ^ (card ?A - ?k) *
          sum Prod {X. X <= ?f ` ?A & card X = card ?A - ?k}",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 20, template_var 1),
              template_var 2)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 18, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app (template_hole 15, t_empty), template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 13, template_hole 12)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 18, template_var 2)),
                 template_var 0))),
           template_app
            (template_app (template_hole 7, t_empty),
             template_app (template_hole 5, t_empty))))))]:
   (string * thm * template) list
### theory "Draft.VietaTemplates"
### 0.525s elapsed time, 0.683s cpu time, 0.076s GC time
val it = (): unit
