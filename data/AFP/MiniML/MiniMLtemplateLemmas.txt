   [("MiniML.S_o_alpha_typ",
     "$ (?S o ?alpha) ?t = $ ?S ($ (%x. TVar (?alpha x)) ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("MiniML.S_o_alpha_type_scheme_list",
     "$ (?S o ?alpha) ?A = $ ?S ($ (%x. TVar (?alpha x)) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("MiniML.S_o_alpha_type_scheme",
     "$ (?S o ?alpha) ?sch = $ ?S ($ (%x. TVar (?alpha x)) ?sch)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("MiniML.alpha_A",
     "$ (%x. TVar (if x : free_tv ?A then x else ?n + x)) ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_var 1),
       template_var 1)),
    ("MiniML.has_type_le_env",
     "[| ?A \<turnstile> ?e :: ?t; ?A <= ?B |]
      ==> ?B \<turnstile> ?e :: ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("MiniML.S_o_alpha_typ'",
     "$ (?S o ?alpha) ?t = $ ?S ($ (%x. TVar (?alpha x)) ?t)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("MiniML.has_type_cl_sub",
     "?A \<turnstile> ?e :: ?t ==> ALL S. $ S ?A \<turnstile> ?e :: $ S ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("MiniML.alpha_A'",
     "$ (%x. TVar (if x : free_tv ?A then x else ?n + x)) ?A =
      $ id_subst ?A",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_var 1),
       template_app
        (template_app (template_hole 6, template_hole 0), template_var 1))),
    ("MiniML.s'_t_equals_s_t",
     "$ (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n) ?t =
      $ ?S ?t",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_var 1),
       template_app
        (template_app (template_hole 6, template_var 0), template_var 1))),
    ("MiniML.s'_a_equals_s_a",
     "$ (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n) ?A =
      $ ?S ?A",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_var 2),
       template_app
        (template_app (template_hole 6, template_var 0), template_var 2))),
    ("MiniML.new_tv_Int_free_tv_empty_type",
     "new_tv ?n ?t ==> {x. EX y. x = ?n + y} Int free_tv ?t = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("MiniML.new_tv_Int_free_tv_empty_scheme",
     "new_tv ?n ?sch ==> {x. EX y. x = ?n + y} Int free_tv ?sch = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("MiniML.new_tv_Int_free_tv_empty_scheme_list",
     "ALL A. new_tv ?n A --> {x. EX y. x = ?n + y} Int free_tv A = {}",
     template_predicate (template_app (template_hole 10, t_empty))),
    ("MiniML.dom_S'",
     "Type.dom (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n)
      <= free_tv ?A Un free_tv ?t",
     template_inequation
      (less_equals, template_app (template_hole 6, t_empty),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app (template_hole 1, template_var 1)))),
    ("MiniML.cod_S'",
     "cod (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n)
      <= free_tv ($ ?S ?A) Un free_tv ($ ?S ?t)",
     template_inequation
      (less_equals, template_app (template_hole 8, t_empty),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("MiniML.gen_t_le_gen_alpha_t",
     "new_tv ?n ?A ==>
      gen ?A ?t
      <= gen ?A ($ (%x. TVar (if x : free_tv ?A then x else ?n + x)) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 5, t_empty), template_var 0))))),
    ("MiniML.free_tv_alpha",
     "free_tv ($ (%x. TVar (if x : free_tv ?A then x else ?n + x)) ?t1.0) -
      free_tv ?A
      <= {x. EX y. x = ?n + y}",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, t_empty), template_var 0))),
         template_app (template_hole 4, template_var 2)),
       template_app (template_hole 2, t_empty))),
    ("MiniML.free_tv_S'",
     "free_tv (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n)
      <= free_tv ?A Un free_tv ($ ?S ?A) Un free_tv ?t Un
         free_tv ($ ?S ?t)",
     template_inequation
      (less_equals, template_app (template_hole 8, t_empty),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 2)))),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("MiniML.S'_A_eq_S'_alpha_A",
     "$ (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n) ?A =
      $ ((%x. if x : free_tv ?A Un free_tv ?t then ?S x else TVar x) o
         (%x. if x : free_tv ?A then x else ?n + x))
       ?A",
     template_equation
      (template_app
        (template_app (template_hole 9, t_empty), template_var 3),
       template_app
        (template_app
          (template_hole 9,
           template_app (template_app (template_hole 2, t_empty), t_empty)),
         template_var 3))),
    ("MiniML.replace_s_by_s'",
     "$ (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n)
       ?A \<turnstile>
      ?e :: $ (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n)
             ?t ==>
      $ ?S ?A \<turnstile> ?e :: $ ?S ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, t_empty),
                    template_var 3)),
                template_var 0),
              template_app
               (template_app (template_hole 0, t_empty), template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 3)),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           )))]
