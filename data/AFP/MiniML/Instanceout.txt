Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.InstanceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "Draft.Maybe" (required by "Draft.InstanceMoreTemplates" via "Draft.Instance" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.InstanceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.InstanceMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "Draft.Maybe"
### 0.057s elapsed time, 0.266s cpu time, 0.000s GC time
Loading theory "Draft.Type" (required by "Draft.InstanceMoreTemplates" via "Draft.Instance")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.522s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.InstanceMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.835s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.InstanceMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.324s elapsed time, 1.301s cpu time, 0.140s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.InstanceMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class type_struct = type +
  fixes free_tv :: "'a => nat set"
    and free_tv_ML :: "'a => nat list"
    and bound_tv :: "'a => nat set"
    and min_new_bound_tv :: "'a => nat"
    and app_subst :: "(nat => typ) => 'a => 'a"
instantiation
  typ :: type_struct
  free_tv_typ == free_tv :: typ => nat set
  free_tv_ML_typ == free_tv_ML :: typ => nat list
  bound_tv_typ == bound_tv :: typ => nat set
  min_new_bound_tv_typ == min_new_bound_tv :: typ => nat
  app_subst_typ == app_subst :: (nat => typ) => typ => typ
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.995s elapsed time, 3.771s cpu time, 0.866s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  type_scheme :: type_struct
  free_tv_type_scheme == free_tv :: type_scheme => nat set
  free_tv_ML_type_scheme == free_tv_ML :: type_scheme => nat list
  bound_tv_type_scheme == bound_tv :: type_scheme => nat set
  min_new_bound_tv_type_scheme == min_new_bound_tv :: type_scheme => nat
  app_subst_type_scheme == app_subst ::
    (nat => typ) => type_scheme => type_scheme
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.076s elapsed time, 3.923s cpu time, 0.810s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  list :: (type_struct) type_struct
  free_tv_list == free_tv :: 'a list => nat set
  free_tv_ML_list == free_tv_ML :: 'a list => nat list
  bound_tv_list == bound_tv :: 'a list => nat set
  min_new_bound_tv_list == min_new_bound_tv :: 'a list => nat
  app_subst_list == app_subst :: (nat => typ) => 'a list => 'a list
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class of_nat = type +
  fixes of_nat :: "nat => 'a"
instantiation
  nat :: of_nat
  of_nat_nat == of_nat_class.of_nat :: nat => nat
class typ_of = type +
  fixes typ_of :: "'a => typ"
instantiation
  typ :: typ_of
  typ_of_typ == typ_of :: typ => typ
instantiation
  fun :: (of_nat, typ_of) type_struct
  free_tv_fun == free_tv :: ('a => 'b) => nat set
  free_tv_ML_fun == free_tv_ML :: ('a => 'b) => nat list
  bound_tv_fun == bound_tv :: ('a => 'b) => nat set
  min_new_bound_tv_fun == min_new_bound_tv :: ('a => 'b) => nat
  app_subst_fun == app_subst :: (nat => typ) => ('a => 'b) => 'a => 'b
Found termination order: "size <*mlex*> {}"
### theory "Draft.Type"
### 1.925s elapsed time, 6.247s cpu time, 1.152s GC time
Loading theory "Draft.Instance" (required by "Draft.InstanceMoreTemplates")
consts
  bound_typ_inst :: "(nat => typ) => type_scheme => typ"
consts
  bound_scheme_inst :: "(nat => type_scheme) => type_scheme => type_scheme"
instantiation
  type_scheme :: ord
  less_eq_type_scheme == less_eq :: type_scheme => type_scheme => bool
  less_type_scheme == less :: type_scheme => type_scheme => bool
consts
  subst_to_scheme :: "(nat => type_scheme) => typ => type_scheme"
instantiation
  list :: (ord) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
### theory "Draft.Instance"
### 0.120s elapsed time, 0.249s cpu time, 0.000s GC time
### theory "HOL-Library.Tree"
### 1.987s elapsed time, 6.258s cpu time, 1.112s GC time
Loading theory "Draft.Templates" (required by "Draft.InstanceMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.057s elapsed time, 0.080s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.InstanceMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.471s elapsed time, 0.526s cpu time, 0.068s GC time
Loading theory "Draft.InstanceMoreTemplates"
val templateLemmas =
   [("Instance.le_env_refl", "?A <= ?A",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("Instance.le_type_scheme_refl", "?sch <= ?sch",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("Instance.bound_typ_instance_BVar", "?sch <= BVar ?n",
     template_inequation
      (less_equals, template_var 1,
       template_app (template_hole 0, template_var 0))),
    ("Instance.bound_typ_inst_mk_scheme",
     "bound_typ_inst ?S (mk_scheme ?t) = ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Instance.not_BVar_le_Fun", "~ BVar ?n <= ?sch1.0 =-> ?sch2.0",
     template_negation
      (
         template_inequation
          (less_equals, template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Instance.not_FVar_le_Fun", "~ FVar ?n <= ?sch1.0 =-> ?sch2.0",
     template_negation
      (
         template_inequation
          (less_equals, template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Instance.bound_scheme_inst_mk_scheme",
     "bound_scheme_inst ?B (mk_scheme ?t) = mk_scheme ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Instance.le_type_eq_is_bound_typ_instance",
     "(mk_scheme ?t <= ?sch) = ?t <| ?sch",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Instance.le_FVar", "(?sch <= FVar ?n) = (?sch = FVar ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Instance.le_env_free_tv", "?A <= ?B ==> free_tv ?B <= free_tv ?A",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Instance.le_type_scheme_free_tv",
     "?sch <= ?sch' ==> free_tv ?sch' <= free_tv ?sch",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Instance.is_bound_typ_instance",
     "?t <| ?sch = (EX S. ?t = bound_typ_inst S ?sch)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Instance.is_bound_typ_instance_closed_subst",
     "?t <| ?sch ==> $ ?S ?t <| $ ?S ?sch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Instance.S_compatible_le_scheme_lists",
     "?A' <= ?A ==> $ ?S ?A' <= $ ?S ?A",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Instance.S_compatible_le_scheme",
     "?sch' <= ?sch ==> $ ?S ?sch' <= $ ?S ?sch",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Instance.bound_typ_instance_trans",
     "[| ?t <| ?sch; ?sch <= ?sch' |] ==> ?t <| ?sch'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Instance.bound_typ_inst_composed_subst",
     "bound_typ_inst ($ ?S o ?R) ($ ?S ?sch) =
      $ ?S (bound_typ_inst ?R ?sch)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Instance.substitution_lemma",
     "$ ?S (bound_scheme_inst ?B ?sch) =
      bound_scheme_inst ($ ?S o ?B) ($ ?S ?sch)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Instance.le_env_Cons",
     "(?sch # ?A <= ?sch' # ?B) = (?sch <= ?sch' & ?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Instance.scheme_le_Fun",
     "?sch' <= ?sch1.0 =-> ?sch2.0 ==>
      EX sch'1 sch'2. ?sch' = sch'1 =-> sch'2",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Instance.Fun_le_FunD",
     "?sch1.0 =-> ?sch2.0 <= ?sch1' =-> ?sch2' ==>
      ?sch1.0 <= ?sch1' & ?sch2.0 <= ?sch2'",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))
           ))),
    ("Instance.bound_typ_inst_eq",
     "[| ?S = ?S'; ?sch = ?sch' |]
      ==> bound_typ_inst ?S ?sch = bound_typ_inst ?S' ?sch'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Instance.bound_scheme_inst_type",
     "mk_scheme ?t = bound_scheme_inst ?B ?sch ==>
      EX S. ALL x:bound_tv ?sch. ?B x = mk_scheme (S x)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Instance.subst_to_scheme_inverse",
     "new_tv ?n ?sch ==>
      subst_to_scheme (%k. if ?n <= k then BVar (k - ?n) else FVar k)
       (bound_typ_inst (%k. TVar (k + ?n)) ?sch) =
      ?sch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, t_empty),
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)),
         template_var 0))),
    ("Instance.aux",
     "?t = ?t' ==>
      subst_to_scheme (%k. if ?n <= k then BVar (k - ?n) else FVar k) ?t =
      subst_to_scheme (%k. if ?n <= k then BVar (k - ?n) else FVar k) ?t'",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty), template_var 2),
         template_app
          (template_app (template_hole 5, t_empty), template_var 1)))),
    ("Instance.aux2",
     "new_tv ?n ?sch ==>
      subst_to_scheme (%k. if ?n <= k then BVar (k - ?n) else FVar k)
       (bound_typ_inst ?S ?sch) =
      bound_scheme_inst
       (subst_to_scheme (%k. if ?n <= k then BVar (k - ?n) else FVar k) o
        ?S)
       ?sch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, t_empty),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0, template_app (template_hole 8, t_empty)),
               template_var 0)),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.InstanceMoreTemplates"
### 0.345s elapsed time, 0.496s cpu time, 0.072s GC time
val it = (): unit
