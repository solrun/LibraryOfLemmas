   [("Instance.le_env_refl", "?A <= ?A",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("Instance.le_type_scheme_refl", "?sch <= ?sch",
     template_inequation (less_equals, template_var 0, template_var 0)),
    ("Instance.bound_typ_instance_BVar", "?sch <= BVar ?n",
     template_inequation
      (less_equals, template_var 1,
       template_app (template_hole 0, template_var 0))),
    ("Instance.bound_typ_inst_mk_scheme",
     "bound_typ_inst ?S (mk_scheme ?t) = ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Instance.not_BVar_le_Fun", "~ BVar ?n <= ?sch1.0 =-> ?sch2.0",
     template_negation
      (
         template_inequation
          (less_equals, template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Instance.not_FVar_le_Fun", "~ FVar ?n <= ?sch1.0 =-> ?sch2.0",
     template_negation
      (
         template_inequation
          (less_equals, template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Instance.bound_scheme_inst_mk_scheme",
     "bound_scheme_inst ?B (mk_scheme ?t) = mk_scheme ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Instance.le_type_eq_is_bound_typ_instance",
     "(mk_scheme ?t <= ?sch) = ?t <| ?sch",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Instance.le_FVar", "(?sch <= FVar ?n) = (?sch = FVar ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Instance.le_env_free_tv", "?A <= ?B ==> free_tv ?B <= free_tv ?A",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Instance.le_type_scheme_free_tv",
     "?sch <= ?sch' ==> free_tv ?sch' <= free_tv ?sch",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Instance.is_bound_typ_instance",
     "?t <| ?sch = (EX S. ?t = bound_typ_inst S ?sch)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Instance.is_bound_typ_instance_closed_subst",
     "?t <| ?sch ==> $ ?S ?t <| $ ?S ?sch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Instance.S_compatible_le_scheme_lists",
     "?A' <= ?A ==> $ ?S ?A' <= $ ?S ?A",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Instance.S_compatible_le_scheme",
     "?sch' <= ?sch ==> $ ?S ?sch' <= $ ?S ?sch",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Instance.bound_typ_instance_trans",
     "[| ?t <| ?sch; ?sch <= ?sch' |] ==> ?t <| ?sch'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Instance.bound_typ_inst_composed_subst",
     "bound_typ_inst ($ ?S o ?R) ($ ?S ?sch) =
      $ ?S (bound_typ_inst ?R ?sch)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Instance.substitution_lemma",
     "$ ?S (bound_scheme_inst ?B ?sch) =
      bound_scheme_inst ($ ?S o ?B) ($ ?S ?sch)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Instance.le_env_Cons",
     "(?sch # ?A <= ?sch' # ?B) = (?sch <= ?sch' & ?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Instance.scheme_le_Fun",
     "?sch' <= ?sch1.0 =-> ?sch2.0 ==>
      EX sch'1 sch'2. ?sch' = sch'1 =-> sch'2",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Instance.Fun_le_FunD",
     "?sch1.0 =-> ?sch2.0 <= ?sch1' =-> ?sch2' ==>
      ?sch1.0 <= ?sch1' & ?sch2.0 <= ?sch2'",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))
           ))),
    ("Instance.bound_typ_inst_eq",
     "[| ?S = ?S'; ?sch = ?sch' |]
      ==> bound_typ_inst ?S ?sch = bound_typ_inst ?S' ?sch'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Instance.bound_scheme_inst_type",
     "mk_scheme ?t = bound_scheme_inst ?B ?sch ==>
      EX S. ALL x:bound_tv ?sch. ?B x = mk_scheme (S x)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Instance.subst_to_scheme_inverse",
     "new_tv ?n ?sch ==>
      subst_to_scheme (%k. if ?n <= k then BVar (k - ?n) else FVar k)
       (bound_typ_inst (%k. TVar (k + ?n)) ?sch) =
      ?sch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, t_empty),
           template_app
            (template_app (template_hole 2, t_empty), template_var 0)),
         template_var 0))),
    ("Instance.aux",
     "?t = ?t' ==>
      subst_to_scheme (%k. if ?n <= k then BVar (k - ?n) else FVar k) ?t =
      subst_to_scheme (%k. if ?n <= k then BVar (k - ?n) else FVar k) ?t'",
     template_implication
      ([template_equation (template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty), template_var 2),
         template_app
          (template_app (template_hole 5, t_empty), template_var 1)))),
    ("Instance.aux2",
     "new_tv ?n ?sch ==>
      subst_to_scheme (%k. if ?n <= k then BVar (k - ?n) else FVar k)
       (bound_typ_inst ?S ?sch) =
      bound_scheme_inst
       (subst_to_scheme (%k. if ?n <= k then BVar (k - ?n) else FVar k) o
        ?S)
       ?sch",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, t_empty),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0, template_app (template_hole 8, t_empty)),
               template_var 0)),
           template_var 1))))]
