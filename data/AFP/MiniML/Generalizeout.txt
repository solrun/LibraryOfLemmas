Loading theory "Draft.Maybe" (required by "Draft.GeneralizeMoreTemplates" via "Draft.Generalize" via "Draft.Instance" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.GeneralizeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.GeneralizeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.GeneralizeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "Draft.Maybe"
### 0.060s elapsed time, 0.269s cpu time, 0.000s GC time
Loading theory "Draft.Type" (required by "Draft.GeneralizeMoreTemplates" via "Draft.Generalize" via "Draft.Instance")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.160s elapsed time, 0.654s cpu time, 0.054s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.GeneralizeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.232s elapsed time, 0.935s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.GeneralizeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.356s elapsed time, 1.413s cpu time, 0.145s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.GeneralizeMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class type_struct = type +
  fixes free_tv :: "'a => nat set"
    and free_tv_ML :: "'a => nat list"
    and bound_tv :: "'a => nat set"
    and min_new_bound_tv :: "'a => nat"
    and app_subst :: "(nat => typ) => 'a => 'a"
instantiation
  typ :: type_struct
  free_tv_typ == free_tv :: typ => nat set
  free_tv_ML_typ == free_tv_ML :: typ => nat list
  bound_tv_typ == bound_tv :: typ => nat set
  min_new_bound_tv_typ == min_new_bound_tv :: typ => nat
  app_subst_typ == app_subst :: (nat => typ) => typ => typ
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.957s elapsed time, 3.621s cpu time, 0.912s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  type_scheme :: type_struct
  free_tv_type_scheme == free_tv :: type_scheme => nat set
  free_tv_ML_type_scheme == free_tv_ML :: type_scheme => nat list
  bound_tv_type_scheme == bound_tv :: type_scheme => nat set
  min_new_bound_tv_type_scheme == min_new_bound_tv :: type_scheme => nat
  app_subst_type_scheme == app_subst ::
    (nat => typ) => type_scheme => type_scheme
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.030s elapsed time, 3.746s cpu time, 0.865s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  list :: (type_struct) type_struct
  free_tv_list == free_tv :: 'a list => nat set
  free_tv_ML_list == free_tv_ML :: 'a list => nat list
  bound_tv_list == bound_tv :: 'a list => nat set
  min_new_bound_tv_list == min_new_bound_tv :: 'a list => nat
  app_subst_list == app_subst :: (nat => typ) => 'a list => 'a list
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class of_nat = type +
  fixes of_nat :: "nat => 'a"
instantiation
  nat :: of_nat
  of_nat_nat == of_nat_class.of_nat :: nat => nat
class typ_of = type +
  fixes typ_of :: "'a => typ"
instantiation
  typ :: typ_of
  typ_of_typ == typ_of :: typ => typ
instantiation
  fun :: (of_nat, typ_of) type_struct
  free_tv_fun == free_tv :: ('a => 'b) => nat set
  free_tv_ML_fun == free_tv_ML :: ('a => 'b) => nat list
  bound_tv_fun == bound_tv :: ('a => 'b) => nat set
  min_new_bound_tv_fun == min_new_bound_tv :: ('a => 'b) => nat
  app_subst_fun == app_subst :: (nat => typ) => ('a => 'b) => 'a => 'b
### theory "Draft.Type"
### 1.928s elapsed time, 6.187s cpu time, 1.153s GC time
Loading theory "Draft.Instance" (required by "Draft.GeneralizeMoreTemplates" via "Draft.Generalize")
Found termination order: "size <*mlex*> {}"
consts
  bound_typ_inst :: "(nat => typ) => type_scheme => typ"
consts
  bound_scheme_inst :: "(nat => type_scheme) => type_scheme => type_scheme"
instantiation
  type_scheme :: ord
  less_eq_type_scheme == less_eq :: type_scheme => type_scheme => bool
  less_type_scheme == less :: type_scheme => type_scheme => bool
consts
  subst_to_scheme :: "(nat => type_scheme) => typ => type_scheme"
instantiation
  list :: (ord) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
### theory "Draft.Instance"
### 0.133s elapsed time, 0.294s cpu time, 0.050s GC time
Loading theory "Draft.Generalize" (required by "Draft.GeneralizeMoreTemplates")
### theory "HOL-Library.Tree"
### 1.984s elapsed time, 6.150s cpu time, 1.150s GC time
Loading theory "Draft.Templates" (required by "Draft.GeneralizeMoreTemplates" via "Draft.ExtrEqs")
consts
  gen :: "type_scheme list => typ => type_scheme"
consts
  gen_ML_aux :: "nat list => typ => type_scheme"
### theory "Draft.Generalize"
### 0.063s elapsed time, 0.126s cpu time, 0.000s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.114s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GeneralizeMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.478s elapsed time, 0.532s cpu time, 0.054s GC time
Loading theory "Draft.GeneralizeMoreTemplates"
val templateLemmas =
   [("Generalize.gen_eq_gen_ML", "gen ?A ?t = gen_ML ?A ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Generalize.bound_tv_gen",
     "bound_tv (gen ?A ?t) = free_tv ?t - free_tv ?A",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Generalize.new_tv_compatible_gen",
     "new_tv ?n ?t ==> new_tv ?n (gen ?A ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Generalize.gen_bound_typ_instance",
     "gen ($ ?S ?A) ($ ?S ?t) <= $ ?S (gen ?A ?t)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Generalize.gen_without_effect",
     "free_tv ?t <= free_tv ?sch ==> gen ?sch ?t = mk_scheme ?t",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 1)))),
    ("Generalize.free_tv_gen",
     "free_tv (gen ($ ?S ?A) ?t) = free_tv ?t Int free_tv ($ ?S ?A)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1))))),
    ("Generalize.gen_eq_on_free_tv",
     "free_tv ?A = free_tv ?B ==> gen ?A ?t = gen ?B ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Generalize.bound_typ_inst_gen",
     "free_tv ?t <= free_tv ?A ==> bound_typ_inst ?S (gen ?A ?t) = ?t",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 2))),
    ("Generalize.free_tv_subset_gen_le",
     "free_tv ?B <= free_tv ?A ==> gen ?A ?t <= gen ?B ?t",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 2),
          template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Generalize.free_tv_gen_cons",
     "free_tv (gen ($ ?S ?A) ?t # $ ?S ?A) = free_tv ($ ?S ?A)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 1)))),
    ("Generalize.gen_t_le_gen_alpha_t",
     "new_tv ?n ?A ==>
      gen ?A ?t
      <= gen ?A ($ (%x. TVar (if x : free_tv ?A then x else ?n + x)) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 5, t_empty), template_var 0))))),
    ("Generalize.gen_subst_commutes",
     "free_tv ?S Int (free_tv ?t - free_tv ?A) = {} ==>
      gen ($ ?S ?A) ($ ?S ?t) = $ ?S (gen ?A ?t)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2)),
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              template_app (template_hole 6, template_var 0))),
          template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)))))]:
   (string * thm * template) list
### theory "Draft.GeneralizeMoreTemplates"
### 0.338s elapsed time, 0.474s cpu time, 0.054s GC time
val it = (): unit
