   [("Instance.bound_typ_inst_mk_scheme",
     "bound_typ_inst ?S (mk_scheme ?t) = ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Instance.bound_scheme_inst_mk_scheme",
     "bound_scheme_inst ?B (mk_scheme ?t) = mk_scheme ?t",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Instance.le_type_eq_is_bound_typ_instance",
     "(mk_scheme ?t <= ?sch) = ?t <| ?sch",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Instance.le_FVar", "(?sch <= FVar ?n) = (?sch = FVar ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_var 0)))),
    ("Instance.is_bound_typ_instance",
     "?t <| ?sch = (EX S. ?t = bound_typ_inst S ?sch)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Instance.bound_typ_inst_composed_subst",
     "bound_typ_inst ($ ?S o ?R) ($ ?S ?sch) =
      $ ?S (bound_typ_inst ?R ?sch)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Instance.substitution_lemma",
     "$ ?S (bound_scheme_inst ?B ?sch) =
      bound_scheme_inst ($ ?S o ?B) ($ ?S ?sch)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Instance.le_env_Cons",
     "(?sch # ?A <= ?sch' # ?B) = (?sch <= ?sch' & ?A <= ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0))))]
