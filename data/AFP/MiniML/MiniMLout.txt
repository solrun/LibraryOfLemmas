Loading theory "Draft.Maybe" (required by "Draft.MiniMLMoreTemplates" via "Draft.MiniML" via "Draft.Generalize" via "Draft.Instance" via "Draft.Type")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MiniMLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MiniMLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MiniMLMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Maybe"
### 0.059s elapsed time, 0.265s cpu time, 0.000s GC time
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Loading theory "Draft.Type" (required by "Draft.MiniMLMoreTemplates" via "Draft.MiniML" via "Draft.Generalize" via "Draft.Instance")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.149s elapsed time, 0.612s cpu time, 0.058s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MiniMLMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.245s elapsed time, 0.993s cpu time, 0.058s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MiniMLMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.345s elapsed time, 1.373s cpu time, 0.155s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MiniMLMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class type_struct = type +
  fixes free_tv :: "'a => nat set"
    and free_tv_ML :: "'a => nat list"
    and bound_tv :: "'a => nat set"
    and min_new_bound_tv :: "'a => nat"
    and app_subst :: "(nat => typ) => 'a => 'a"
instantiation
  typ :: type_struct
  free_tv_typ == free_tv :: typ => nat set
  free_tv_ML_typ == free_tv_ML :: typ => nat list
  bound_tv_typ == bound_tv :: typ => nat set
  min_new_bound_tv_typ == min_new_bound_tv :: typ => nat
  app_subst_typ == app_subst :: (nat => typ) => typ => typ
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  type_scheme :: type_struct
  free_tv_type_scheme == free_tv :: type_scheme => nat set
  free_tv_ML_type_scheme == free_tv_ML :: type_scheme => nat list
  bound_tv_type_scheme == bound_tv :: type_scheme => nat set
  min_new_bound_tv_type_scheme == min_new_bound_tv :: type_scheme => nat
  app_subst_type_scheme == app_subst ::
    (nat => typ) => type_scheme => type_scheme
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.041s elapsed time, 3.943s cpu time, 0.940s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.053s elapsed time, 3.904s cpu time, 0.843s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  list :: (type_struct) type_struct
  free_tv_list == free_tv :: 'a list => nat set
  free_tv_ML_list == free_tv_ML :: 'a list => nat list
  bound_tv_list == bound_tv :: 'a list => nat set
  min_new_bound_tv_list == min_new_bound_tv :: 'a list => nat
  app_subst_list == app_subst :: (nat => typ) => 'a list => 'a list
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class of_nat = type +
  fixes of_nat :: "nat => 'a"
instantiation
  nat :: of_nat
  of_nat_nat == of_nat_class.of_nat :: nat => nat
class typ_of = type +
  fixes typ_of :: "'a => typ"
instantiation
  typ :: typ_of
  typ_of_typ == typ_of :: typ => typ
instantiation
  fun :: (of_nat, typ_of) type_struct
  free_tv_fun == free_tv :: ('a => 'b) => nat set
  free_tv_ML_fun == free_tv_ML :: ('a => 'b) => nat list
  bound_tv_fun == bound_tv :: ('a => 'b) => nat set
  min_new_bound_tv_fun == min_new_bound_tv :: ('a => 'b) => nat
  app_subst_fun == app_subst :: (nat => typ) => ('a => 'b) => 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Type"
### 1.925s elapsed time, 6.259s cpu time, 1.120s GC time
Loading theory "Draft.Instance" (required by "Draft.MiniMLMoreTemplates" via "Draft.MiniML" via "Draft.Generalize")
consts
  bound_typ_inst :: "(nat => typ) => type_scheme => typ"
consts
  bound_scheme_inst :: "(nat => type_scheme) => type_scheme => type_scheme"
instantiation
  type_scheme :: ord
  less_eq_type_scheme == less_eq :: type_scheme => type_scheme => bool
  less_type_scheme == less :: type_scheme => type_scheme => bool
consts
  subst_to_scheme :: "(nat => type_scheme) => typ => type_scheme"
Found termination order: "size <*mlex*> {}"
instantiation
  list :: (ord) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
### theory "Draft.Instance"
### 0.132s elapsed time, 0.292s cpu time, 0.047s GC time
Loading theory "Draft.Generalize" (required by "Draft.MiniMLMoreTemplates" via "Draft.MiniML")
consts
  gen :: "type_scheme list => typ => type_scheme"
consts
  gen_ML_aux :: "nat list => typ => type_scheme"
### theory "Draft.Generalize"
### 0.064s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "Draft.MiniML" (required by "Draft.MiniMLMoreTemplates")
### theory "HOL-Library.Tree"
### 2.046s elapsed time, 6.371s cpu time, 1.110s GC time
Loading theory "Draft.Templates" (required by "Draft.MiniMLMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.170s cpu time, 0.060s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MiniMLMoreTemplates")
Proofs for inductive predicate(s) "has_type"
  Proving monotonicity ...
### theory "Draft.MiniML"
### 0.484s elapsed time, 1.019s cpu time, 0.117s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.522s elapsed time, 0.976s cpu time, 0.057s GC time
Loading theory "Draft.MiniMLMoreTemplates"
val templateLemmas =
   [("MiniML.S_o_alpha_typ",
     "$ (?S o ?alpha) ?t = $ ?S ($ (%x. TVar (?alpha x)) ?t)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("MiniML.S_o_alpha_type_scheme_list",
     "$ (?S o ?alpha) ?A = $ ?S ($ (%x. TVar (?alpha x)) ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("MiniML.S_o_alpha_type_scheme",
     "$ (?S o ?alpha) ?sch = $ ?S ($ (%x. TVar (?alpha x)) ?sch)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("MiniML.alpha_A",
     "$ (%x. TVar (if x : free_tv ?A then x else ?n + x)) ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_var 1),
       template_var 1)),
    ("MiniML.has_type_le_env",
     "[| ?A \<turnstile> ?e :: ?t; ?A <= ?B |]
      ==> ?B \<turnstile> ?e :: ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 3, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("MiniML.S_o_alpha_typ'",
     "$ (?S o ?alpha) ?t = $ ?S ($ (%x. TVar (?alpha x)) ?t)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, t_empty), template_var 0)))),
    ("MiniML.has_type_cl_sub",
     "?A \<turnstile> ?e :: ?t ==> ALL S. $ S ?A \<turnstile> ?e :: $ S ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("MiniML.alpha_A'",
     "$ (%x. TVar (if x : free_tv ?A then x else ?n + x)) ?A =
      $ id_subst ?A",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_var 1),
       template_app
        (template_app (template_hole 6, template_hole 0), template_var 1))),
    ("MiniML.s'_t_equals_s_t",
     "$ (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n) ?t =
      $ ?S ?t",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_var 1),
       template_app
        (template_app (template_hole 6, template_var 0), template_var 1))),
    ("MiniML.s'_a_equals_s_a",
     "$ (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n) ?A =
      $ ?S ?A",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty), template_var 2),
       template_app
        (template_app (template_hole 6, template_var 0), template_var 2))),
    ("MiniML.new_tv_Int_free_tv_empty_type",
     "new_tv ?n ?t ==> {x. EX y. x = ?n + y} Int free_tv ?t = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("MiniML.new_tv_Int_free_tv_empty_scheme",
     "new_tv ?n ?sch ==> {x. EX y. x = ?n + y} Int free_tv ?sch = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("MiniML.new_tv_Int_free_tv_empty_scheme_list",
     "ALL A. new_tv ?n A --> {x. EX y. x = ?n + y} Int free_tv A = {}",
     template_predicate (template_app (template_hole 10, t_empty))),
    ("MiniML.dom_S'",
     "Type.dom (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n)
      <= free_tv ?A Un free_tv ?t",
     template_inequation
      (less_equals, template_app (template_hole 6, t_empty),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app (template_hole 1, template_var 1)))),
    ("MiniML.cod_S'",
     "cod (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n)
      <= free_tv ($ ?S ?A) Un free_tv ($ ?S ?t)",
     template_inequation
      (less_equals, template_app (template_hole 8, t_empty),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("MiniML.gen_t_le_gen_alpha_t",
     "new_tv ?n ?A ==>
      gen ?A ?t
      <= gen ?A ($ (%x. TVar (if x : free_tv ?A then x else ?n + x)) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 5, t_empty), template_var 0))))),
    ("MiniML.free_tv_alpha",
     "free_tv ($ (%x. TVar (if x : free_tv ?A then x else ?n + x)) ?t1.0) -
      free_tv ?A
      <= {x. EX y. x = ?n + y}",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, t_empty), template_var 0))),
         template_app (template_hole 4, template_var 2)),
       template_app (template_hole 2, t_empty))),
    ("MiniML.free_tv_S'",
     "free_tv (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n)
      <= free_tv ?A Un free_tv ($ ?S ?A) Un free_tv ?t Un
         free_tv ($ ?S ?t)",
     template_inequation
      (less_equals, template_app (template_hole 8, t_empty),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 2)),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 2)))),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("MiniML.S'_A_eq_S'_alpha_A",
     "$ (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n) ?A =
      $ ((%x. if x : free_tv ?A Un free_tv ?t then ?S x else TVar x) o
         (%x. if x : free_tv ?A then x else ?n + x))
       ?A",
     template_equation
      (template_app
        (template_app (template_hole 9, t_empty), template_var 3),
       template_app
        (template_app
          (template_hole 9,
           template_app (template_app (template_hole 2, t_empty), t_empty)),
         template_var 3))),
    ("MiniML.replace_s_by_s'",
     "$ (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n)
       ?A \<turnstile>
      ?e :: $ (%n. if n : free_tv ?A Un free_tv ?t then ?S n else TVar n)
             ?t ==>
      $ ?S ?A \<turnstile> ?e :: $ ?S ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, t_empty),
                    template_var 3)),
                template_var 0),
              template_app
               (template_app (template_hole 0, t_empty), template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 3)),
               template_var 0),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2))
           )))]:
   (string * thm * template) list
### theory "Draft.MiniMLMoreTemplates"
### 0.351s elapsed time, 0.482s cpu time, 0.041s GC time
val it = (): unit
