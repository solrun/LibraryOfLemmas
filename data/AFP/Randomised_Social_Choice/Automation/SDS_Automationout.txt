Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SDS_AutomationTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.QSOpt_Exact" (required by "Draft.SDS_AutomationTemplates" via "Draft.SDS_Automation")
Loading theory "Draft.Templates" (required by "Draft.SDS_AutomationTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Lotteries" (required by "Draft.SDS_AutomationTemplates" via "Draft.SDS_Automation" via "Draft.Social_Decision_Schemes" via "Draft.Stochastic_Dominance")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature RAT_UTILS =
  sig
    val dest_rat_number: term -> Rat.rat
    val mk_rat_number: typ -> Rat.rat -> term
    val pretty_rat: Rat.rat -> string
    val rat_to_string: Rat.rat -> string
    val string_to_rat: string -> Rat.rat option
  end
structure Rat_Utils: RAT_UTILS
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.315s cpu time, 0.000s GC time
Loading theory "Draft.Order_Predicates" (required by "Draft.SDS_AutomationTemplates" via "Draft.SDS_Automation" via "Draft.Preference_Profile_Cmd" via "Draft.Elections" via "Draft.Preference_Profiles")
### theory "Draft.Lotteries"
### 0.108s elapsed time, 0.434s cpu time, 0.048s GC time
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.483s cpu time, 0.048s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SDS_AutomationTemplates" via "Draft.ExtrEqs")
signature LP_PARAMS =
  sig
    type T
    val compare: T * T -> order
    val from_int: int -> T
    val negate: T -> T
    val print: T -> string
    val read: string -> T option
  end
signature LINEAR_PROGRAM_COMMON =
  sig
    exception QSOpt_Parse
    type 'a bound = 'a infty * var * 'a infty
    datatype comparison = EQ | GEQ | LEQ
    type 'a constraint = 'a linterm * comparison * 'a
    val gen_print_bound: ('a -> string) -> 'a bound -> string
    val gen_print_constraint:
       ('a * 'a -> order) * (int -> 'a) * ('a -> string) * ('a -> 'a) ->
         'a constraint -> string
    val gen_print_linterm:
       ('a * 'a -> order) * (int -> 'a) * ('a -> string) * ('a -> 'a) ->
         'a linterm -> string
    val gen_print_program:
       ('a * 'a -> order) * (int -> 'a) * ('a -> string) * ('a -> 'a) ->
         'a prog -> string
    val gen_read_result: (string -> 'a option) -> string -> 'a result
    datatype 'a infty = Finite of 'a | Neg_Infty | Pos_Infty
    val is_finite: 'a infty -> bool
    type 'a linterm = ('a * var) list
    val map_infty: ('a -> 'b) -> 'a infty -> 'b infty
    datatype optimization_mode = MAXIMIZE | MINIMIZE
    val print_comparison: comparison -> string
    val print_infty: ('a -> string) -> 'a infty -> string
    val print_optimization_mode: optimization_mode -> string
    type 'a prog =
       optimization_mode * 'a linterm * 'a constraint list * 'a bound list
    datatype 'a result
    = Infeasible | Optimal of 'a * (string * 'a) list | Unbounded | Unknown
    eqtype var
  end
signature LINEAR_PROGRAM =
  sig
    exception QSOpt_Parse
    type T
    type 'a bound = 'a infty * var * 'a infty
    datatype comparison = EQ | GEQ | LEQ
    type 'a constraint = 'a linterm * comparison * 'a
    val gen_print_bound: ('a -> string) -> 'a bound -> string
    val gen_print_constraint:
       ('a * 'a -> order) * (int -> 'a) * ('a -> string) * ('a -> 'a) ->
         'a constraint -> string
    val gen_print_linterm:
       ('a * 'a -> order) * (int -> 'a) * ('a -> string) * ('a -> 'a) ->
         'a linterm -> string
    val gen_print_program:
       ('a * 'a -> order) * (int -> 'a) * ('a -> string) * ('a -> 'a) ->
         'a prog -> string
    val gen_read_result: (string -> 'a option) -> string -> 'a result
    datatype 'a infty = Finite of 'a | Neg_Infty | Pos_Infty
    val is_finite: 'a infty -> bool
    type 'a linterm = ('a * var) list
    val map_infty: ('a -> 'b) -> 'a infty -> 'b infty
    datatype optimization_mode = MAXIMIZE | MINIMIZE
    val print_bound: T bound -> string
    val print_comparison: comparison -> string
    val print_constraint: T constraint -> string
    val print_infty: ('a -> string) -> 'a infty -> string
    val print_linterm: T linterm -> string
    val print_optimization_mode: optimization_mode -> string
    val print_program: T prog -> string
    type 'a prog =
       optimization_mode * 'a linterm * 'a constraint list * 'a bound list
    val read_result: string -> T result
    val read_result_file: string -> T result
    datatype 'a result
    = Infeasible | Optimal of 'a * (string * 'a) list | Unbounded | Unknown
    val save_program: string -> T prog -> unit
    val solve_program: T prog -> T result
    eqtype var
  end
structure Linear_Program_Common: LINEAR_PROGRAM_COMMON
structure Rat_Linear_Program: LINEAR_PROGRAM
functor Linear_Program (LP_Params: LP_PARAMS): LINEAR_PROGRAM
### theory "Draft.QSOpt_Exact"
### 0.132s elapsed time, 0.511s cpu time, 0.048s GC time
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
locale total_preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "total_preorder_on carrier le"
"R b a = R b a"
  :: "bool"
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
locale order_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "order_on carrier le"
locale linorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "linorder_on carrier le"
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
locale total_preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "total_preorder_on carrier le"
Proofs for inductive predicate(s) "of_weak_ranking"
  Proving monotonicity ...
### Not an equation, in theorem:
### is_weak_ranking []
### Not an equation, in theorem:
### is_finite_weak_ranking []
consts
  is_weak_ranking_aux :: "'a set => 'a set list => bool"
### Code generator: dropping subsumed code equation
### is_weak_ranking (?x # ?xs) ==
### ?x ~= {} & is_weak_ranking ?xs & ?x Int \<Union> (set ?xs) = {}
locale finite_total_preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "finite_total_preorder_on carrier le"
locale finite_linorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "finite_linorder_on carrier le"
### theory "Draft.Order_Predicates"
### 0.599s elapsed time, 1.300s cpu time, 0.149s GC time
Loading theory "Draft.Preference_Profiles" (required by "Draft.SDS_AutomationTemplates" via "Draft.SDS_Automation" via "Draft.Preference_Profile_Cmd" via "Draft.Elections")
locale preorder_family
  fixes dom :: "'a set"
    and carrier :: "'b set"
    and R :: "'a => 'b => 'b => bool"
  assumes "preorder_family dom carrier R"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
### theory "HOL-Library.BigO"
### 0.626s elapsed time, 1.321s cpu time, 0.149s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SDS_AutomationTemplates")
locale preorder_family
  fixes dom :: "'a set"
    and carrier :: "'b set"
    and R :: "'a => 'b => 'b => bool"
  assumes "preorder_family dom carrier R"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale pref_profile_unique_favorites
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_unique_favorites agents alts R"
### theory "Draft.Preference_Profiles"
### 0.326s elapsed time, 0.688s cpu time, 0.091s GC time
Loading theory "Draft.Elections" (required by "Draft.SDS_AutomationTemplates" via "Draft.SDS_Automation" via "Draft.Preference_Profile_Cmd")
Loading theory "Draft.Utility_Functions" (required by "Draft.SDS_AutomationTemplates" via "Draft.SDS_Automation" via "Draft.Social_Decision_Schemes" via "Draft.Stochastic_Dominance")
locale election
  fixes agents :: "'agent set"
    and alts :: "'alt set"
  assumes "election agents alts"
### theory "Draft.Elections"
### 0.066s elapsed time, 0.193s cpu time, 0.000s GC time
Loading theory "Draft.Preference_Profile_Cmd" (required by "Draft.SDS_AutomationTemplates" via "Draft.SDS_Automation")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.582s elapsed time, 1.501s cpu time, 0.179s GC time
signature PREFERENCE_PROFILES =
  sig
    val agentT: profile -> typ
    val agents_of_profile: profile -> term list
    val altT: profile -> typ
    val alts_of_profile: profile -> term list
    val apply_permutation: ('a * 'a -> bool) -> 'a permutation -> 'a -> 'a
    val apply_reverse_permutation:
       ('a * 'a -> bool) -> 'a permutation -> 'a -> 'a
    val cycles: ('a * 'a -> bool) -> 'a permutation -> 'a list list
    val derive_orbit_equations:
       profile -> ((term * term) * term permutation) list
    val eq_prefs: prefs * prefs -> bool
    val equiv_profile_anonymity: profile * profile -> bool
    val find_an_automorphisms:
       profile -> ((term * term) * term permutation) list
    val find_an_isomorphism: profile * profile -> term permutation option
    val find_an_isomorphisms: profile * profile -> term permutation Seq.seq
    val find_manipulations:
       profile * profile -> (term * term * int * term permutation) list
    val find_pareto_witness: profile -> term -> (term * term * term) option
    val fixpoints: ('a * 'a -> bool) -> 'a permutation -> 'a list
    val is_identity: ('a * 'a -> bool) -> 'a permutation -> bool
    val manipulation_distance: prefs * prefs -> int
    val pareto: profile -> term * term -> bool
    val pareto_losers: profile -> (term * term * term) list
    val pareto_pairs: profile -> (term * term * term) list
    type 'a permutation
    val permutations: ('a * 'a -> bool) -> 'a list -> 'a permutation Seq.seq
    val permute_profile: term permutation -> profile -> profile
    val pref_profileT: typ -> typ -> typ
    val preferred_alts: prefs -> term -> term list
    type prefs
    type profile
    val ranking: prefs -> term * term -> bool
    val relation_of_prefs: prefs -> (term * term) list
    val strict_pareto: profile -> term * term -> bool
    val strict_ranking: prefs -> term * term -> bool
    type support
  end
structure Preference_Profiles: PREFERENCE_PROFILES
locale election
  fixes agents :: "'agent set"
    and alts :: "'alt set"
  assumes "election agents alts"
locale vnm_utility
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
    and u :: "'a => real"
  assumes "vnm_utility carrier le u"
### theory "Draft.Utility_Functions"
### 0.692s elapsed time, 1.918s cpu time, 0.571s GC time
Loading theory "Draft.Stochastic_Dominance" (required by "Draft.SDS_AutomationTemplates" via "Draft.SDS_Automation" via "Draft.Social_Decision_Schemes")
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
signature PREFERENCE_PROFILES_CMD =
  sig
    val add_info: term -> info -> Context.generic -> Context.generic
    val get_info: term -> Proof.context -> info
    type info
    val preference_profile:
       (term * term) * (binding * (term * term list list) list) list ->
         Proof.context -> Proof.state
    val preference_profile_cmd:
       (string * string) * (binding * (string * string list list) list) list
         -> Proof.context -> Proof.state
    val transform_info: info -> morphism -> info
  end
structure Preference_Profiles_Cmd: PREFERENCE_PROFILES_CMD
### theory "Draft.Preference_Profile_Cmd"
### 0.800s elapsed time, 2.077s cpu time, 0.609s GC time
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale finite_total_preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "finite_total_preorder_on carrier le"
### theory "Draft.Stochastic_Dominance"
### 0.306s elapsed time, 0.487s cpu time, 0.038s GC time
Loading theory "Draft.SD_Efficiency" (required by "Draft.SDS_AutomationTemplates" via "Draft.SDS_Automation" via "Draft.Social_Decision_Schemes")
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
Found termination order: "size <*mlex*> {}"
### theory "Draft.SD_Efficiency"
### 0.238s elapsed time, 0.263s cpu time, 0.038s GC time
Loading theory "Draft.Social_Decision_Schemes" (required by "Draft.SDS_AutomationTemplates" via "Draft.SDS_Automation")
locale election
  fixes agents :: "'agent set"
    and alts :: "'alt set"
  assumes "election agents alts"
locale social_decision_scheme
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "social_decision_scheme agents alts sds"
locale anonymous_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "anonymous_sds agents alts sds"
locale neutral_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "neutral_sds agents alts sds"
locale an_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "an_sds agents alts sds"
locale ex_post_efficient_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "ex_post_efficient_sds agents alts sds"
locale sd_efficient_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "sd_efficient_sds agents alts sds"
locale social_decision_scheme
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "social_decision_scheme agents alts sds"
locale strategyproof_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "strategyproof_sds agents alts sds"
locale social_decision_scheme
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "social_decision_scheme agents alts sds"
locale strongly_strategyproof_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "strongly_strategyproof_sds agents alts sds"
locale strategyproof_an_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "strategyproof_an_sds agents alts sds"
### theory "Draft.Social_Decision_Schemes"
### 1.266s elapsed time, 1.393s cpu time, 0.181s GC time
Loading theory "Draft.SDS_Automation" (required by "Draft.SDS_AutomationTemplates")
consts
  pref_classes_lists :: "'a set list => 'a set set"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
signature RANDOMISED_SOCIAL_CHOICE =
  sig
    val find_inefficiency_witness:
       Preference_Profiles.profile ->
         Preference_Profiles.support -> (lottery * term) option
    val find_minimal_inefficient_supports:
       Preference_Profiles.profile ->
         (Preference_Profiles.support * lottery * term) list
    type lottery
    val lotteryT: typ -> typ
    val mk_inefficiency_lp:
       Preference_Profiles.profile ->
         Preference_Profiles.support -> (string list * string * int) list
    val mk_support_witness:
       Preference_Profiles.profile ->
         Preference_Profiles.support * lottery ->
           Preference_Profiles.support * lottery * term
    val probability: lottery -> term list -> Rat.rat
    val sdsT: typ -> typ -> typ
    val stochastic_dominance:
       Preference_Profiles.prefs -> lottery * lottery -> bool
    val strict_stochastic_dominance:
       Preference_Profiles.prefs -> lottery * lottery -> bool
  end
structure Randomised_Social_Choice: RANDOMISED_SOCIAL_CHOICE
### ML warning (line 104 of "$AFP/Randomised_Social_Choice/Automation/sds_automation.ML"):
### Pattern is not exhaustive.
### ML warning (line 126 of "$AFP/Randomised_Social_Choice/Automation/sds_automation.ML"):
### Pattern is not exhaustive.
### ML warning (line 133 of "$AFP/Randomised_Social_Choice/Automation/sds_automation.ML"):
### Pattern is not exhaustive.
### ML warning (line 121 of "$AFP/Randomised_Social_Choice/Automation/sds_automation.ML"):
### Value identifier (sds) has not been referenced.
### ML warning (line 248 of "$AFP/Randomised_Social_Choice/Automation/sds_automation.ML"):
### Pattern is not exhaustive.
### ML warning (line 492 of "$AFP/Randomised_Social_Choice/Automation/sds_automation.ML"):
### Pattern is not exhaustive.
### ML warning (line 499 of "$AFP/Randomised_Social_Choice/Automation/sds_automation.ML"):
### Pattern is not exhaustive.
### ML warning (line 487 of "$AFP/Randomised_Social_Choice/Automation/sds_automation.ML"):
### Value identifier (sds) has not been referenced.
val prove_in_set = fn: Proof.context -> term -> thm
val prove_in_list = fn: Proof.context -> term -> term list -> thm
val eval_inverse_permutation_of_list_conv = fn:
   thm -> Proof.context -> cterm -> thm
val dest_wf_thm = fn: thm -> term
val gen_derive_orbit_equations = fn:
   Proof.context -> thm option -> term list -> Proof.state
val derive_orbit_equations_cmd = fn:
   thm option -> string list -> Proof.context -> Proof.state
val optional_thm_parser = fn:
   Token.T list -> (Facts.ref * Token.src list) option * Token.T list
val optional_thms_parser = fn:
   Token.T list -> (Facts.ref * Token.src list) list option * Token.T list
val gen_prepare_ex_post_conditions = fn:
   ((term * term list list) list -> (term * term * term) list) ->
     term -> Preference_Profiles_Cmd.info -> Proof.context -> thm list
val prepare_find_ex_post_conditions = fn:
   term -> Preference_Profiles_Cmd.info -> Proof.context -> thm list
val prepare_ex_post_conditions = fn:
   (Preference_Profiles.profile * term) list ->
     term -> Preference_Profiles_Cmd.info -> Proof.context -> thm list
val gen_prepare_sdeff_conditions = fn:
   ((term * term list list) list ->
      (term list * (term * Rat.rat) list * term) list)
     -> term -> Preference_Profiles_Cmd.info -> Proof.context -> thm list
val prepare_find_sdeff_conditions = fn:
   term -> Preference_Profiles_Cmd.info -> Proof.context -> thm list
val prepare_sdeff_conditions_from_wits = fn:
   (Preference_Profiles.profile * Preference_Profiles.support *
    Randomised_Social_Choice.lottery option
   )
   list
     -> term -> Preference_Profiles_Cmd.info -> Proof.context -> thm list
val gen_derive_support_conditions = fn:
   (term -> Preference_Profiles_Cmd.info -> Proof.context -> thm list) list
     -> thm list option -> term list -> Proof.context -> Proof.state
val gen_derive_support_conditions_cmd = fn:
   (term -> Preference_Profiles_Cmd.info -> Proof.context -> thm list) list
     -> thm list option -> string list -> Proof.context -> Proof.state
val derive_support_conditions_cmd = fn:
   thm list option -> string list -> Proof.context -> Proof.state
val derive_ex_post_conditions_cmd = fn:
   thm list option -> string list -> Proof.context -> Proof.state
val find_inefficient_supports = fn:
   Preference_Profiles.profile ->
     (term list * Randomised_Social_Choice.lottery option) list
val find_sd_inefficient_supports_cmd = fn:
   string list -> Proof.context -> unit
val prove_sd_inefficient_supports_cmd = fn:
   thm list option ->
     ((string * string list) * (string * Rat.rat) list option) list ->
       Proof.context -> Proof.state
val parse_rat = fn: Token.T list -> Rat.rat * Token.T list
val parse_support = fn: string list parser
val parse_lottery = fn: (string * Rat.rat) list parser
val pref_classes = fn: 'a list list -> 'a list list
val combine_all = fn: ('a * 'a -> 'b) -> 'a list -> 'b list
val prepare_strategyproofness_intro_thms = fn:
   Proof.context ->
     int option ->
       thm -> Preference_Profiles_Cmd.info list -> (binding * thm list) list
val gen_derive_strategyproofness_conditions = fn:
   Proof.context -> int option -> thm option -> term list -> Proof.state
val derive_strategyproofness_conditions_cmd = fn:
   int option -> thm option -> string list -> Proof.context -> Proof.state
### theory "Draft.SDS_Automation"
### 1.573s elapsed time, 2.183s cpu time, 0.847s GC time
Loading theory "Draft.SDS_AutomationTemplates"
val templateLemmas =
   [("SDS_Automation.disj_False_right", "(?P | False) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("SDS_Automation.multiset_add_ac", "?a + ?b = ?b + ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("SDS_Automation.less_or_eq_real", "(?x < ?y | ?x = ?y) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SDS_Automation.less_or_eq_real", "(?x < ?y | ?y = ?x) = (?x <= ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("SDS_Automation.multiset_add_ac", "?b + (?a + ?c) = ?a + (?b + ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SDS_Automation.multiset_add_ac", "?a + ?b + ?c = ?a + (?b + ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SDS_Automation.pref_classes_of_weak_ranking_aux",
     "is_weak_ranking ?xss ==>
      of_weak_ranking_Collect_ge ?xss ` \<Union> (set ?xss) =
      pref_classes_lists ?xss",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("SDS_Automation.pref_classes_lists_append",
     "pref_classes_lists (?xs @ ?ys) =
      (Un) (\<Union> (set ?ys)) ` pref_classes_lists ?xs Un
      pref_classes_lists ?ys",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)))),
             template_app (template_hole 6, template_var 1))),
         template_app (template_hole 6, template_var 0)))),
    ("SDS_Automation.multiset_Diff_single_normalize",
     "?a ~= ?c ==> {#?a#} + ?B - {#?c#} = {#?a#} + (?B - {#?c#})",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)))))),
    ("SDS_Automation.pref_classes_list_aux_hd_tl",
     "[| is_weak_ranking ?xss; ?xss ~= [] |]
      ==> pref_classes_lists_aux (hd ?xss) (tl ?xss) =
          pref_classes_lists (rev ?xss) - {\<Union> (set ?xss)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 11))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 0)),
           template_app (template_hole 7, template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_hole 0))))),
    ("SDS_Automation.pref_classes_lists_aux_finite",
     "[| ?A : pref_classes_lists_aux ?acc ?xss; finite ?acc;
         !!A. A : set ?xss ==> finite A |]
      ==> finite ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate
        (template_app (template_hole 2, template_var 2)))),
    ("SDS_Automation.eval_pref_classes_of_weak_ranking",
     "[| \<Union> (set ?xss) = ?alts; is_weak_ranking ?xss; ?alts ~= {} |]
      ==> pref_classes ?alts (of_weak_ranking ?xss) =
          pref_classes_lists_aux (hd ?xss) (tl ?xss)",
     template_implication
      ([template_equation
         (template_app
           (template_hole 10,
            template_app (template_hole 9, template_var 1)),
          template_var 0),
        template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 6))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 3, template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 1))))),
    ("SDS_Automation.pref_classes_lists_aux",
     "[| is_weak_ranking ?xss; ?acc Int \<Union> (set ?xss) = {} |]
      ==> pref_classes_lists_aux ?acc ?xss =
          insert ?acc ((%A. A Un ?acc) ` pref_classes_lists (rev ?xss)) -
          {?acc Un \<Union> (set ?xss)}",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 12, template_var 0),
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 1))),
          template_hole 9)],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_app (template_hole 4, t_empty),
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1))))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 1)))),
             template_hole 0))))),
    ("SDS_Automation.strategyproof_aux",
     "[| prefs_from_table_wf ?agents ?alts ?xss1.0;
         ?R1.0 = prefs_from_table ?xss1.0;
         prefs_from_table_wf ?agents ?alts ?xss2.0;
         ?R2.0 = prefs_from_table ?xss2.0;
         strategyproof_an_sds ?agents ?alts ?sds; ?i : ?agents;
         ?j : ?agents; ?R1.0(?i := ?R2.0 ?j) = ?R2.0;
         the (map_of ?xss1.0 ?i) = ?xs;
         pref_classes_lists_aux (hd ?xs) (tl ?xs) = ?ps |]
      ==> (EX A:?ps. sum (pmf (?sds ?R2.0)) A < sum (pmf (?sds ?R1.0)) A) |
          (ALL A:?ps. sum (pmf (?sds ?R2.0)) A = sum (pmf (?sds ?R1.0)) A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 10),
                template_var 9),
              template_var 8)
            ),
        template_equation
         (template_var 7, template_app (template_hole 17, template_var 8)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 19, template_var 10),
                template_var 9),
              template_var 6)
            ),
        template_equation
         (template_var 5, template_app (template_hole 17, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 10),
                template_var 9),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_var 10)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 14, template_var 7),
              template_var 3),
            template_app (template_var 5, template_var 2)),
          template_var 5),
        template_equation
         (template_app
           (template_hole 12,
            template_app
             (template_app (template_hole 11, template_var 8),
              template_var 3)),
          template_var 1),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1)),
            template_app (template_hole 7, template_var 1)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0), t_empty)),
             template_app
              (template_app (template_hole 1, template_var 0), t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.SDS_AutomationTemplates"
### 1.273s elapsed time, 1.583s cpu time, 0.179s GC time
val it = (): unit
