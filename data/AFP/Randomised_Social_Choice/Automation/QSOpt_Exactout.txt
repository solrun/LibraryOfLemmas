Loading theory "Draft.QSOpt_Exact" (required by "Draft.QSOpt_ExactTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.QSOpt_ExactTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.QSOpt_ExactTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature RAT_UTILS =
  sig
    val dest_rat_number: term -> Rat.rat
    val mk_rat_number: typ -> Rat.rat -> term
    val pretty_rat: Rat.rat -> string
    val rat_to_string: Rat.rat -> string
    val string_to_rat: string -> Rat.rat option
  end
structure Rat_Utils: RAT_UTILS
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.248s cpu time, 0.000s GC time
signature LP_PARAMS =
  sig
    type T
    val compare: T * T -> order
    val from_int: int -> T
    val negate: T -> T
    val print: T -> string
    val read: string -> T option
  end
signature LINEAR_PROGRAM_COMMON =
  sig
    exception QSOpt_Parse
    type 'a bound = 'a infty * var * 'a infty
    datatype comparison = EQ | GEQ | LEQ
    type 'a constraint = 'a linterm * comparison * 'a
    val gen_print_bound: ('a -> string) -> 'a bound -> string
    val gen_print_constraint:
       ('a * 'a -> order) * (int -> 'a) * ('a -> string) * ('a -> 'a) ->
         'a constraint -> string
    val gen_print_linterm:
       ('a * 'a -> order) * (int -> 'a) * ('a -> string) * ('a -> 'a) ->
         'a linterm -> string
    val gen_print_program:
       ('a * 'a -> order) * (int -> 'a) * ('a -> string) * ('a -> 'a) ->
         'a prog -> string
    val gen_read_result: (string -> 'a option) -> string -> 'a result
    datatype 'a infty = Finite of 'a | Neg_Infty | Pos_Infty
    val is_finite: 'a infty -> bool
    type 'a linterm = ('a * var) list
    val map_infty: ('a -> 'b) -> 'a infty -> 'b infty
    datatype optimization_mode = MAXIMIZE | MINIMIZE
    val print_comparison: comparison -> string
    val print_infty: ('a -> string) -> 'a infty -> string
    val print_optimization_mode: optimization_mode -> string
    type 'a prog =
       optimization_mode * 'a linterm * 'a constraint list * 'a bound list
    datatype 'a result
    = Infeasible | Optimal of 'a * (string * 'a) list | Unbounded | Unknown
    eqtype var
  end
signature LINEAR_PROGRAM =
  sig
    exception QSOpt_Parse
    type T
    type 'a bound = 'a infty * var * 'a infty
    datatype comparison = EQ | GEQ | LEQ
    type 'a constraint = 'a linterm * comparison * 'a
    val gen_print_bound: ('a -> string) -> 'a bound -> string
    val gen_print_constraint:
       ('a * 'a -> order) * (int -> 'a) * ('a -> string) * ('a -> 'a) ->
         'a constraint -> string
    val gen_print_linterm:
       ('a * 'a -> order) * (int -> 'a) * ('a -> string) * ('a -> 'a) ->
         'a linterm -> string
    val gen_print_program:
       ('a * 'a -> order) * (int -> 'a) * ('a -> string) * ('a -> 'a) ->
         'a prog -> string
    val gen_read_result: (string -> 'a option) -> string -> 'a result
    datatype 'a infty = Finite of 'a | Neg_Infty | Pos_Infty
    val is_finite: 'a infty -> bool
    type 'a linterm = ('a * var) list
    val map_infty: ('a -> 'b) -> 'a infty -> 'b infty
    datatype optimization_mode = MAXIMIZE | MINIMIZE
    val print_bound: T bound -> string
    val print_comparison: comparison -> string
    val print_constraint: T constraint -> string
    val print_infty: ('a -> string) -> 'a infty -> string
    val print_linterm: T linterm -> string
    val print_optimization_mode: optimization_mode -> string
    val print_program: T prog -> string
    type 'a prog =
       optimization_mode * 'a linterm * 'a constraint list * 'a bound list
    val read_result: string -> T result
    val read_result_file: string -> T result
    datatype 'a result
    = Infeasible | Optimal of 'a * (string * 'a) list | Unbounded | Unknown
    val save_program: string -> T prog -> unit
    val solve_program: T prog -> T result
    eqtype var
  end
structure Linear_Program_Common: LINEAR_PROGRAM_COMMON
structure Rat_Linear_Program: LINEAR_PROGRAM
functor Linear_Program (LP_Params: LP_PARAMS): LINEAR_PROGRAM
### theory "Draft.QSOpt_Exact"
### 0.125s elapsed time, 0.359s cpu time, 0.035s GC time
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.368s cpu time, 0.035s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.QSOpt_ExactTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.BigO"
### 0.594s elapsed time, 0.595s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.QSOpt_ExactTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.465s elapsed time, 0.520s cpu time, 0.080s GC time
Loading theory "Draft.QSOpt_ExactTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.QSOpt_ExactTemplates"
### 0.291s elapsed time, 0.428s cpu time, 0.064s GC time
val it = (): unit
