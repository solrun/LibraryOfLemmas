Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Random_Serial_DictatorshipTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Order_Predicates" (required by "Draft.Random_Serial_DictatorshipTemplates" via "Draft.Random_Serial_Dictatorship" via "Draft.Social_Decision_Schemes" via "Draft.Preference_Profiles")
Loading theory "Draft.Templates" (required by "Draft.Random_Serial_DictatorshipTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Lotteries" (required by "Draft.Random_Serial_DictatorshipTemplates" via "Draft.Random_Serial_Dictatorship" via "Draft.Social_Decision_Schemes" via "Draft.Stochastic_Dominance")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.335s cpu time, 0.000s GC time
### theory "Draft.Lotteries"
### 0.077s elapsed time, 0.340s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.137s elapsed time, 0.462s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Random_Serial_DictatorshipTemplates" via "Draft.ExtrEqs")
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
locale total_preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "total_preorder_on carrier le"
"R b a = R b a"
  :: "bool"
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
locale order_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "order_on carrier le"
locale linorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "linorder_on carrier le"
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
locale total_preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "total_preorder_on carrier le"
Proofs for inductive predicate(s) "of_weak_ranking"
  Proving monotonicity ...
### Not an equation, in theorem:
### is_weak_ranking []
### Not an equation, in theorem:
### is_finite_weak_ranking []
consts
  is_weak_ranking_aux :: "'a set => 'a set list => bool"
### Code generator: dropping subsumed code equation
### is_weak_ranking (?x # ?xs) ==
### ?x ~= {} & is_weak_ranking ?xs & ?x Int \<Union> (set ?xs) = {}
locale finite_total_preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "finite_total_preorder_on carrier le"
locale finite_linorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "finite_linorder_on carrier le"
### theory "Draft.Order_Predicates"
### 0.610s elapsed time, 1.416s cpu time, 0.101s GC time
Loading theory "Draft.Preference_Profiles" (required by "Draft.Random_Serial_DictatorshipTemplates" via "Draft.Random_Serial_Dictatorship" via "Draft.Social_Decision_Schemes")
locale preorder_family
  fixes dom :: "'a set"
    and carrier :: "'b set"
    and R :: "'a => 'b => 'b => bool"
  assumes "preorder_family dom carrier R"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale preorder_family
  fixes dom :: "'a set"
    and carrier :: "'b set"
    and R :: "'a => 'b => 'b => bool"
  assumes "preorder_family dom carrier R"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
### theory "HOL-Library.BigO"
### 0.618s elapsed time, 1.291s cpu time, 0.127s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Random_Serial_DictatorshipTemplates")
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale pref_profile_unique_favorites
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_unique_favorites agents alts R"
### theory "Draft.Preference_Profiles"
### 0.301s elapsed time, 0.625s cpu time, 0.070s GC time
Loading theory "Draft.Elections" (required by "Draft.Random_Serial_DictatorshipTemplates" via "Draft.Random_Serial_Dictatorship" via "Draft.Social_Decision_Schemes")
Loading theory "Draft.Utility_Functions" (required by "Draft.Random_Serial_DictatorshipTemplates" via "Draft.Random_Serial_Dictatorship" via "Draft.Social_Decision_Schemes" via "Draft.Stochastic_Dominance")
locale election
  fixes agents :: "'agent set"
    and alts :: "'alt set"
  assumes "election agents alts"
### theory "Draft.Elections"
### 0.068s elapsed time, 0.205s cpu time, 0.076s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.494s elapsed time, 1.058s cpu time, 0.076s GC time
locale vnm_utility
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
    and u :: "'a => real"
  assumes "vnm_utility carrier le u"
### theory "Draft.Utility_Functions"
### 0.463s elapsed time, 0.906s cpu time, 0.120s GC time
Loading theory "Draft.Stochastic_Dominance" (required by "Draft.Random_Serial_DictatorshipTemplates" via "Draft.Random_Serial_Dictatorship" via "Draft.Social_Decision_Schemes")
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale finite_total_preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "finite_total_preorder_on carrier le"
### theory "Draft.Stochastic_Dominance"
### 0.228s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "Draft.SD_Efficiency" (required by "Draft.Random_Serial_DictatorshipTemplates" via "Draft.Random_Serial_Dictatorship" via "Draft.Social_Decision_Schemes")
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
Found termination order: "size <*mlex*> {}"
### theory "Draft.SD_Efficiency"
### 0.216s elapsed time, 0.239s cpu time, 0.037s GC time
Loading theory "Draft.Social_Decision_Schemes" (required by "Draft.Random_Serial_DictatorshipTemplates" via "Draft.Random_Serial_Dictatorship")
locale election
  fixes agents :: "'agent set"
    and alts :: "'alt set"
  assumes "election agents alts"
locale social_decision_scheme
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "social_decision_scheme agents alts sds"
locale anonymous_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "anonymous_sds agents alts sds"
locale neutral_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "neutral_sds agents alts sds"
locale an_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "an_sds agents alts sds"
locale ex_post_efficient_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "ex_post_efficient_sds agents alts sds"
locale sd_efficient_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "sd_efficient_sds agents alts sds"
locale social_decision_scheme
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "social_decision_scheme agents alts sds"
locale strategyproof_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "strategyproof_sds agents alts sds"
locale social_decision_scheme
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "social_decision_scheme agents alts sds"
locale strongly_strategyproof_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "strongly_strategyproof_sds agents alts sds"
locale strategyproof_an_sds
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and sds :: "('agent => 'alt => 'alt => bool) => 'alt pmf"
  assumes "strategyproof_an_sds agents alts sds"
### theory "Draft.Social_Decision_Schemes"
### 1.536s elapsed time, 1.971s cpu time, 0.624s GC time
Loading theory "Draft.Random_Dictatorship" (required by "Draft.Random_Serial_DictatorshipTemplates" via "Draft.Random_Serial_Dictatorship")
locale election
  fixes agents :: "'agent set"
    and alts :: "'alt set"
  assumes "election agents alts"
### theory "Draft.Random_Dictatorship"
### 0.081s elapsed time, 0.081s cpu time, 0.000s GC time
Loading theory "Draft.Random_Serial_Dictatorship" (required by "Draft.Random_Serial_DictatorshipTemplates")
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale election
  fixes agents :: "'agent set"
    and alts :: "'alt set"
  assumes "election agents alts"
### theory "Draft.Random_Serial_Dictatorship"
### 0.231s elapsed time, 0.231s cpu time, 0.000s GC time
Loading theory "Draft.Random_Serial_DictatorshipTemplates"
val templateLemmas =
   [("Random_Serial_Dictatorship.rsd_winners_empty",
     "rsd_winners ?R ?alts [] = ?alts",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 0)),
    ("Random_Serial_Dictatorship.random_serial_dictatorship_empty",
     "random_serial_dictatorship {} ?alts ?R = pmf_of_set ?alts",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 1),
         template_var 0),
       template_app (template_hole 0, template_var 1))),
    ("Random_Serial_Dictatorship.RSD_pareto_eqclassD",
     "RSD_pareto_eqclass ?agents ?alts ?R ?A ==> ?A <= ?alts",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation (less_equals, template_var 0, template_var 2))),
    ("Random_Serial_Dictatorship.RSD_pareto_eqclass_empty",
     "?alts ~= {} ==> RSD_pareto_eqclass {} ?alts ?R ?alts",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1),
               template_var 0),
             template_var 1)
           ))),
    ("Random_Serial_Dictatorship.RSD_pareto_eqclassD",
     "RSD_pareto_eqclass ?agents ?alts ?R ?A ==> ?A ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Random_Serial_Dictatorship.rsd_winners_map",
     "rsd_winners ?R ?alts (map ?f ?agents) =
      rsd_winners (?R o ?f) ?alts ?agents",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 2),
         template_var 0))),
    ("Random_Serial_Dictatorship.rsd_winners_Cons",
     "rsd_winners ?R ?alts (?i # ?agents) =
      Max_wrt_among (?R ?i) (rsd_winners ?R ?alts ?agents)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 3, template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Random_Serial_Dictatorship.random_serial_dictatorship_altdef",
     "finite ?agents ==>
      random_serial_dictatorship ?agents ?alts ?R =
      pmf_of_set (permutations_of_set ?agents) >>=
      (%agents'. pmf_of_set (rsd_winners ?R ?alts agents'))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2))),
           t_empty)))),
    ("Random_Serial_Dictatorship.random_serial_dictatorship_foldl",
     "finite ?agents ==>
      random_serial_dictatorship ?agents ?alts ?R =
      pmf_of_set (permutations_of_set ?agents) >>=
      (%agents'.
          pmf_of_set
           (foldl (%alts i. Max_wrt_among (?R i) alts) ?alts agents'))",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2))),
           t_empty)))),
    ("Random_Serial_Dictatorship.RSD_pareto_eqclass_indiff_set",
     "[| RSD_pareto_eqclass ?agents ?alts ?R ?A; ?i : ?agents; ?x : ?A;
         ?y : ?A |]
      ==> ?R ?i ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_var 4, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Random_Serial_Dictatorship.RSD_pareto_eqclassD",
     "[| RSD_pareto_eqclass ?agents ?alts ?R ?A; ?x : ?A; ?y : ?alts |]
      ==> (?y : ?A) = (ALL i:?agents. ?R i ?x ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 5), t_empty)))),
    ("Random_Serial_Dictatorship.random_serial_dictatorship_nonempty",
     "[| finite ?agents; ?agents ~= {} |]
      ==> random_serial_dictatorship ?agents ?alts ?R =
          pmf_of_set ?agents >>=
          (%i. random_serial_dictatorship (?agents - {i})
                (Max_wrt_among (?R i) ?alts) ?R)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 7))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 2)),
           t_empty)))),
    ("Random_Serial_Dictatorship.RSD_pareto_eqclassI",
     "[| ?A ~= {}; ?A <= ?alts;
         !!x y.
            [| x : ?A; y : ?alts |]
            ==> (y : ?A) = (ALL i:?agents. ?R i x y) |]
      ==> RSD_pareto_eqclass ?agents ?alts ?R ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6)),
        template_inequation (less_equals, template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0),
             template_var 3)
           )))]:
   (string * thm * template) list
### theory "Draft.Random_Serial_DictatorshipTemplates"
### 1.238s elapsed time, 1.527s cpu time, 0.213s GC time
val it = (): unit
