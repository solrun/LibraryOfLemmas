Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.MFMC_Finite" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates" via "Draft.Rel_PMF_Characterisation_MFMC" via "Draft.MFMC_Bounded" via "Draft.Matrix_For_Marginals")
Loading theory "Draft.MFMC_Misc" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates" via "Draft.Rel_PMF_Characterisation_MFMC" via "Draft.MFMC_Bounded" via "Draft.Matrix_For_Marginals")
Loading theory "Draft.Templates" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.096s elapsed time, 0.417s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.547s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates" via "Draft.ExtrEqs")
locale Graph
  fixes c :: "nat * nat => 'capacity"
locale NFlow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NFlow c s t f"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
### theory "Draft.MFMC_Finite"
### 0.293s elapsed time, 1.003s cpu time, 0.039s GC time
### theory "Draft.MFMC_Misc"
### 0.643s elapsed time, 1.722s cpu time, 0.094s GC time
Loading theory "Draft.MFMC_Network" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates" via "Draft.Rel_PMF_Characterisation_MFMC" via "Draft.MFMC_Bounded" via "Draft.MFMC_Reduction" via "Draft.MFMC_Web")
Loading theory "Draft.Matrix_For_Marginals" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates" via "Draft.Rel_PMF_Characterisation_MFMC" via "Draft.MFMC_Bounded")
### theory "HOL-Library.BigO"
### 0.644s elapsed time, 1.612s cpu time, 0.153s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates")
Proofs for inductive predicate(s) "cycle"
  Proving monotonicity ...
### theory "Draft.Matrix_For_Marginals"
### 0.455s elapsed time, 1.378s cpu time, 0.201s GC time
Proofs for inductive predicate(s) "support_flowp"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.564s elapsed time, 1.493s cpu time, 0.204s GC time
Proofs for inductive predicate(s) "SINKp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "flow"
  Proving monotonicity ...
Proofs for inductive predicate(s) "cut"
  Proving monotonicity ...
Proofs for inductive predicate(s) "orthogonal"
  Proving monotonicity ...
locale countable_network
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "countable_network \<Delta>"
locale antiparallel_edges
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "antiparallel_edges \<Delta>"
Proofs for inductive predicate(s) "edg"
  Proving monotonicity ...
Found termination order: "{}"
### theory "Draft.MFMC_Network"
### 1.824s elapsed time, 3.436s cpu time, 0.820s GC time
Loading theory "Draft.MFMC_Flow_Attainability" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates" via "Draft.Rel_PMF_Characterisation_MFMC" via "Draft.MFMC_Unbounded")
Loading theory "Draft.MFMC_Web" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates" via "Draft.Rel_PMF_Characterisation_MFMC" via "Draft.MFMC_Bounded" via "Draft.MFMC_Reduction")
locale flow_attainability
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "flow_attainability \<Delta>"
locale flow_network
  fixes \<Delta> :: "('v, 'a) network_scheme"  (structure)
    and g :: "'v * 'v => ennreal"
  assumes "flow_network \<Delta> g"
Proofs for inductive predicate(s) "current"
  Proving monotonicity ...
Proofs for inductive predicate(s) "web_flow"
  Proving monotonicity ...
Proofs for inductive predicate(s) "SATp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "separating_gen"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "wave"
  Proving monotonicity ...
Proofs for inductive predicate(s) "hindrance_by"
  Proving monotonicity ...
Proofs for inductive predicate(s) "hindrance"
  Proving monotonicity ...
Proofs for inductive predicate(s) "hindered"
  Proving monotonicity ...
Proofs for inductive predicate(s) "hindered_by"
  Proving monotonicity ...
Proofs for inductive predicate(s) "loose"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
  Proving monotonicity ...
Proofs for inductive predicate(s) "orthogonal_current"
  Proving monotonicity ...
Proofs for inductive predicate(s) "linkage"
  Proving monotonicity ...
Proofs for inductive predicate(s) "trimming"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 1252 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Fields.inverse_class.inverse_divide"
###         ("\<^const>SPMF.restrict_spmf" ("_position" g)
###           ("_position" \<Gamma>))
###         ("_position" f))
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" g)
###           ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###         ("_applC" ("_position" indicator)
###           ("_cargs"
###             ("\<^const>Groups.uminus_class.uminus"
###               ("_applC"
###                 ("\<^const>MFMC_Web.roofed_circ_indexed" ("_indexdefault"))
###                 ("_applC"
###                   ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###                   ("_position" f))))
###             ("_position" x))))
###       ("_applC" ("_position" indicator)
###         ("_cargs"
###           ("\<^const>Groups.uminus_class.uminus"
###             ("_applC" ("\<^const>MFMC_Web.roofed_indexed" ("_indexdefault"))
###               ("_applC"
###                 ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###                 ("_position" f))))
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###         ("_position" \<Gamma>) ("_position" f))
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" g)
###           ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###         ("_applC" ("_position" indicator)
###           ("_cargs"
###             ("\<^const>Groups.uminus_class.uminus"
###               ("_applC"
###                 ("\<^const>MFMC_Web.roofed_circ_indexed" ("_indexdefault"))
###                 ("_applC"
###                   ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###                   ("_position" f))))
###             ("_position" x))))
###       ("_applC" ("_position" indicator)
###         ("_cargs"
###           ("\<^const>Groups.uminus_class.uminus"
###             ("_applC" ("\<^const>MFMC_Web.roofed_indexed" ("_indexdefault"))
###               ("_applC"
###                 ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###                 ("_position" f))))
###           ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1256 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("\<^const>MFMC_Web.roofed_circ_indexed" ("_indexdefault"))
###         ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###           ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" d_OUT)
###         ("_cargs"
###           ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###             ("_position" \<Gamma>) ("_position" f))
###           ("_position" x)))
###       ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("\<^const>MFMC_Web.roofed_circ_indexed" ("_indexdefault"))
###         ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###           ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" d_OUT)
###         ("_cargs"
###           ("\<^const>Fields.inverse_class.inverse_divide"
###             ("\<^const>SPMF.restrict_spmf" ("_position" g)
###               ("_position" \<Gamma>))
###             ("_position" f))
###           ("_position" x)))
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale countable_network
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "countable_network \<Delta>"
### Ambiguous input (line 1260 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("\<^const>MFMC_Web.roofed_indexed" ("_indexdefault"))
###         ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###           ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" d_IN)
###         ("_cargs"
###           ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###             ("_position" \<Gamma>) ("_position" f))
###           ("_position" x)))
###       ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("\<^const>MFMC_Web.roofed_indexed" ("_indexdefault"))
###         ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###           ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" d_IN)
###         ("_cargs"
###           ("\<^const>Fields.inverse_class.inverse_divide"
###             ("\<^const>SPMF.restrict_spmf" ("_position" g)
###               ("_position" \<Gamma>))
###             ("_position" f))
###           ("_position" x)))
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1263 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC"
###       ("\<^const>Fields.inverse_class.inverse_divide"
###         ("\<^const>SPMF.restrict_spmf" ("_position" g)
###           ("_position" \<Gamma>))
###         ("_position" f))
###       ("_position" e))
###     ("_applC" ("_position" g) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC"
###       ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###         ("_position" \<Gamma>) ("_position" f))
###       ("_position" e))
###     ("_applC" ("_position" g) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1266 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC" ("_position" d_OUT)
###       ("_cargs"
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f))
###         ("_position" x)))
###     ("_applC" ("_position" d_OUT)
###       ("_cargs" ("_position" g) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC" ("_position" d_OUT)
###       ("_cargs"
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f))
###         ("_position" x)))
###     ("_applC" ("_position" d_OUT)
###       ("_cargs" ("_position" g) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1269 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC" ("_position" d_IN)
###       ("_cargs"
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f))
###         ("_position" x)))
###     ("_applC" ("_position" d_IN)
###       ("_cargs" ("_position" g) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC" ("_position" d_IN)
###       ("_cargs"
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f))
###         ("_position" x)))
###     ("_applC" ("_position" d_IN)
###       ("_cargs" ("_position" g) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1276 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" d_IN)
###       ("_cargs"
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f))
###         ("_position" x)))
###     ("_applC" ("_position" d_IN)
###       ("_cargs" ("_position" g) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" d_IN)
###       ("_cargs"
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f))
###         ("_position" x)))
###     ("_applC" ("_position" d_IN)
###       ("_cargs" ("_position" g) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1299 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" a)
###       ("_applC" ("_position" A)
###         ("_applC" ("_position" quotient_web)
###           ("_cargs" ("_position" \<Gamma>) ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" d_IN)
###         ("_cargs"
###           ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###             ("_position" \<Gamma>) ("_position" f))
###           ("_position" a)))
###       ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" a)
###       ("_applC" ("_position" A)
###         ("_applC" ("_position" quotient_web)
###           ("_cargs" ("_position" \<Gamma>) ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" d_IN)
###         ("_cargs"
###           ("\<^const>Fields.inverse_class.inverse_divide"
###             ("\<^const>SPMF.restrict_spmf" ("_position" g)
###               ("_position" \<Gamma>))
###             ("_position" f))
###           ("_position" a)))
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1302 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Groups.zero_class.zero")
###       ("_applC" ("_position" g) ("_position" e))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Groups.zero_class.zero")
###       ("_applC"
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f))
###         ("_position" e)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Groups.zero_class.zero")
###       ("_applC" ("_position" g) ("_position" e))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Groups.zero_class.zero")
###       ("_applC"
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f))
###         ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1305 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" SINK) ("_position" g))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" SINK)
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" SINK) ("_position" g))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" SINK)
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "wf_residual_network"
### Ambiguous input (line 1313 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" SAT)
###       ("_cargs"
###         ("_applC" ("_position" quotient_web)
###           ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f))))
###     ("\<^const>Set.union"
###       ("_applC" ("\<^const>MFMC_Web.roofed_indexed" ("_indexdefault"))
###         ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###           ("_position" f)))
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" SAT)
###           ("_cargs" ("_position" \<Gamma>) ("_position" g)))
###         ("_applC" ("_position" A) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" SAT)
###       ("_cargs"
###         ("_applC" ("_position" quotient_web)
###           ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f))))
###     ("\<^const>Set.union"
###       ("_applC" ("\<^const>MFMC_Web.roofed_indexed" ("_indexdefault"))
###         ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###           ("_position" f)))
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" SAT)
###           ("_cargs" ("_position" \<Gamma>) ("_position" g)))
###         ("_applC" ("_position" A) ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 1331 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" current)
###     ("_cargs"
###       ("_applC" ("_position" quotient_web)
###         ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###       ("\<^const>Fields.inverse_class.inverse_divide"
###         ("\<^const>SPMF.restrict_spmf" ("_position" g)
###           ("_position" \<Gamma>))
###         ("_position" f)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" current)
###     ("_cargs"
###       ("_applC" ("_position" quotient_web)
###         ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###       ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###         ("_position" \<Gamma>) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1376 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###       ("_position" g))
###     ("_applC"
###       ("\<^const>MFMC_Web.terminal_indexed"
###         ("_index"
###           ("_applC" ("_position" quotient_web)
###             ("_cargs" ("_position" \<Gamma>) ("_position" f)))))
###       ("\<^const>Fields.inverse_class.inverse_divide"
###         ("\<^const>SPMF.restrict_spmf" ("_position" g)
###           ("_position" \<Gamma>))
###         ("_position" f)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###       ("_position" g))
###     ("_applC"
###       ("\<^const>MFMC_Web.terminal_indexed"
###         ("_index"
###           ("_applC" ("_position" quotient_web)
###             ("_cargs" ("_position" \<Gamma>) ("_position" f)))))
###       ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###         ("_position" \<Gamma>) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1393 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wave)
###     ("_cargs"
###       ("_applC" ("_position" quotient_web)
###         ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###       ("\<^const>Fields.inverse_class.inverse_divide"
###         ("\<^const>SPMF.restrict_spmf" ("_position" g)
###           ("_position" \<Gamma>))
###         ("_position" f)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wave)
###     ("_cargs"
###       ("_applC" ("_position" quotient_web)
###         ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###       ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###         ("_position" \<Gamma>) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale antiparallel_edges
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "antiparallel_edges \<Delta>"
locale flow_attainability
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "flow_attainability \<Delta>"
locale web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "web \<Gamma>"
locale countable_network
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "countable_network \<Delta>"
locale flow_attainability
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "flow_attainability \<Delta>"
locale countable_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_web \<Gamma>"
locale countable_bipartite_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_bipartite_web \<Gamma>"
### theory "Draft.MFMC_Web"
### 1.703s elapsed time, 3.808s cpu time, 1.001s GC time
Loading theory "Draft.MFMC_Reduction" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates" via "Draft.Rel_PMF_Characterisation_MFMC" via "Draft.MFMC_Bounded")
locale web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "web \<Gamma>"
locale countable_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_web \<Gamma>"
locale web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "web \<Gamma>"
locale countable_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_web \<Gamma>"
locale antiparallel_edges
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "antiparallel_edges \<Delta>"
locale countable_network
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "countable_network \<Delta>"
### theory "Draft.MFMC_Reduction"
### 0.540s elapsed time, 1.136s cpu time, 0.156s GC time
Loading theory "Draft.MFMC_Bounded" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates" via "Draft.Rel_PMF_Characterisation_MFMC")
Proofs for inductive predicate(s) "edge'"
  Proving monotonicity ...
Found termination order: "{}"
locale countable_bipartite_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_bipartite_web \<Gamma>"
locale bounded_countable_bipartite_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "bounded_countable_bipartite_web \<Gamma>"
locale bounded_countable_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "bounded_countable_web \<Gamma>"
locale bounded_countable_network
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "bounded_countable_network \<Delta>"
locale antiparallel_edges
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "antiparallel_edges \<Delta>"
locale bounded_countable_network
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "bounded_countable_network \<Delta>"
Found termination order: "{}"
### theory "Draft.MFMC_Bounded"
### 0.555s elapsed time, 1.147s cpu time, 0.061s GC time
### theory "Draft.MFMC_Flow_Attainability"
### 2.861s elapsed time, 6.224s cpu time, 1.291s GC time
Loading theory "Draft.MFMC_Unbounded" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates" via "Draft.Rel_PMF_Characterisation_MFMC")
### Ambiguous input (line 17 of "$AFP/MFMC_Countable/MFMC_Unbounded.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" plus_web)
###     ("_cargs" ("_position" \<Gamma>)
###       ("_cargs" ("_position" f) ("_position" g))))
###   ("_applC" ("_position" plus_current)
###     ("_cargs" ("_position" f)
###       ("\<^const>Fields.inverse_class.inverse_divide"
###         ("\<^const>SPMF.restrict_spmf" ("_position" g)
###           ("_position" \<Gamma>))
###         ("_position" f)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" plus_web)
###     ("_cargs" ("_position" \<Gamma>)
###       ("_cargs" ("_position" f) ("_position" g))))
###   ("_applC" ("_position" plus_current)
###     ("_cargs" ("_position" f)
###       ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###         ("_position" \<Gamma>) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/MFMC_Countable/MFMC_Unbounded.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" d_OUT)
###       ("_cargs"
###         ("\<^const>MFMC_Unbounded.plus_web_indexed" ("_position" f)
###           ("_indexdefault") ("_position" g))
###         ("_position" x)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" d_OUT)
###         ("_cargs" ("_position" f) ("_position" x)))
###       ("_applC" ("_position" d_OUT)
###         ("_cargs"
###           ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###             ("_position" \<Gamma>) ("_position" f))
###           ("_position" x))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" d_OUT)
###       ("_cargs"
###         ("\<^const>MFMC_Unbounded.plus_web_indexed" ("_position" f)
###           ("_indexdefault") ("_position" g))
###         ("_position" x)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" d_OUT)
###         ("_cargs" ("_position" f) ("_position" x)))
###       ("_applC" ("_position" d_OUT)
###         ("_cargs"
###           ("\<^const>Fields.inverse_class.inverse_divide"
###             ("\<^const>SPMF.restrict_spmf" ("_position" g)
###               ("_position" \<Gamma>))
###             ("_position" f))
###           ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 31 of "$AFP/MFMC_Countable/MFMC_Unbounded.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" d_IN)
###       ("_cargs"
###         ("\<^const>MFMC_Unbounded.plus_web_indexed" ("_position" f)
###           ("_indexdefault") ("_position" g))
###         ("_position" y)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" d_IN)
###         ("_cargs" ("_position" f) ("_position" y)))
###       ("_applC" ("_position" d_IN)
###         ("_cargs"
###           ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###             ("_position" \<Gamma>) ("_position" f))
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" d_IN)
###       ("_cargs"
###         ("\<^const>MFMC_Unbounded.plus_web_indexed" ("_position" f)
###           ("_indexdefault") ("_position" g))
###         ("_position" y)))
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" d_IN)
###         ("_cargs" ("_position" f) ("_position" y)))
###       ("_applC" ("_position" d_IN)
###         ("_cargs"
###           ("\<^const>Fields.inverse_class.inverse_divide"
###             ("\<^const>SPMF.restrict_spmf" ("_position" g)
###               ("_position" \<Gamma>))
###             ("_position" f))
###           ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 95 of "$AFP/MFMC_Countable/MFMC_Unbounded.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("_applC" ("_position" SINK)
###       ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###         ("_position" \<Gamma>) ("_position" f)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("_applC" ("_position" SINK)
###       ("\<^const>Fields.inverse_class.inverse_divide"
###         ("\<^const>SPMF.restrict_spmf" ("_position" g)
###           ("_position" \<Gamma>))
###         ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 154 of "$AFP/MFMC_Countable/MFMC_Unbounded.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" wave)
###       ("_cargs"
###         ("_applC" ("_position" quotient_web)
###           ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" wave)
###       ("_cargs" ("_position" \<Gamma>)
###         ("\<^const>MFMC_Unbounded.plus_web_indexed" ("_position" f)
###           ("_indexdefault") ("_position" g))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" wave)
###       ("_cargs"
###         ("_applC" ("_position" quotient_web)
###           ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" wave)
###       ("_cargs" ("_position" \<Gamma>)
###         ("\<^const>MFMC_Unbounded.plus_web_indexed" ("_position" f)
###           ("_indexdefault") ("_position" g))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale countable_bipartite_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_bipartite_web \<Gamma>"
locale countable_bipartite_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_bipartite_web \<Gamma>"
locale countable_bipartite_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_bipartite_web \<Gamma>"
locale countable_bipartite_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_bipartite_web \<Gamma>"
locale countable_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_web \<Gamma>"
locale countable_network
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "countable_network \<Delta>"
### theory "Draft.MFMC_Unbounded"
### 1.554s elapsed time, 1.742s cpu time, 0.275s GC time
Loading theory "Draft.Rel_PMF_Characterisation_MFMC" (required by "Draft.Rel_PMF_Characterisation_MFMCTemplates")
Proofs for inductive predicate(s) "edge'"
  Proving monotonicity ...
### theory "Draft.Rel_PMF_Characterisation_MFMC"
### 1.653s elapsed time, 1.777s cpu time, 0.183s GC time
Loading theory "Draft.Rel_PMF_Characterisation_MFMCTemplates"
val templateLemmas =
   [("Rel_PMF_Characterisation_MFMC.inj_Left",
     "inj_on ??.Rel_PMF_Characterisation_MFMC.vertex.Left ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Rel_PMF_Characterisation_MFMC.inj_Right",
     "inj_on ??.Rel_PMF_Characterisation_MFMC.vertex.Right ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Rel_PMF_Characterisation_MFMC.\<Delta>_sel",
     "sink (??.Rel_PMF_Characterisation_MFMC.\<Delta> ?p ?q ?R) =
      ??.Rel_PMF_Characterisation_MFMC.vertex.Sink",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Rel_PMF_Characterisation_MFMC.\<Delta>_sel",
     "source (??.Rel_PMF_Characterisation_MFMC.\<Delta> ?p ?q ?R) =
      ??.Rel_PMF_Characterisation_MFMC.vertex.Source",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Rel_PMF_Characterisation_MFMC.edge'_simps",
     "??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R
       ??.Rel_PMF_Characterisation_MFMC.vertex.Sink ?yv =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_hole 1),
         template_var 0),
       template_hole 0)),
    ("Rel_PMF_Characterisation_MFMC.edge'_simps",
     "??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R
       ??.Rel_PMF_Characterisation_MFMC.vertex.Source
       ??.Rel_PMF_Characterisation_MFMC.vertex.Sink =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 2),
         template_hole 1),
       template_hole 0)),
    ("Rel_PMF_Characterisation_MFMC.edge'_simps",
     "??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R ?xv
       ??.Rel_PMF_Characterisation_MFMC.vertex.Source =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_hole 1),
       template_hole 0)),
    ("Rel_PMF_Characterisation_MFMC.OUT_cap_Source",
     "d_OUT (??.Rel_PMF_Characterisation_MFMC.cap ?p ?q ?R)
       ??.Rel_PMF_Characterisation_MFMC.vertex.Source =
      1",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Rel_PMF_Characterisation_MFMC.edge'_simps",
     "??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R
       ??.Rel_PMF_Characterisation_MFMC.vertex.Source
       (??.Rel_PMF_Characterisation_MFMC.vertex.Right ?y) =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Rel_PMF_Characterisation_MFMC.edge'_simps",
     "??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R
       (??.Rel_PMF_Characterisation_MFMC.vertex.Left ?x)
       ??.Rel_PMF_Characterisation_MFMC.vertex.Sink =
      False",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Rel_PMF_Characterisation_MFMC.\<Delta>_sel",
     "capacity (??.Rel_PMF_Characterisation_MFMC.\<Delta> ?p ?q ?R) =
      ??.Rel_PMF_Characterisation_MFMC.cap ?p ?q ?R",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Rel_PMF_Characterisation_MFMC.\<Delta>_sel",
     "edge (??.Rel_PMF_Characterisation_MFMC.\<Delta> ?p ?q ?R) =
      ??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Rel_PMF_Characterisation_MFMC.rel_pmf_distr_mono",
     "rel_pmf ?R OO rel_pmf ?S <= rel_pmf (?R OO ?S)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Rel_PMF_Characterisation_MFMC.IN_cap_Left",
     "d_IN (??.Rel_PMF_Characterisation_MFMC.cap ?p ?q ?R)
       (??.Rel_PMF_Characterisation_MFMC.vertex.Left ?x) =
      ennreal (pmf ?p ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Rel_PMF_Characterisation_MFMC.OUT_cap_Right",
     "d_OUT (??.Rel_PMF_Characterisation_MFMC.cap ?p ?q ?R)
       (??.Rel_PMF_Characterisation_MFMC.vertex.Right ?y) =
      ennreal (pmf ?q ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Rel_PMF_Characterisation_MFMC.admissible_rel_spmf",
     "ccpo.admissible (prod_lub lub_spmf lub_spmf)
       (rel_prod (ord_spmf (=)) (ord_spmf (=))) (%(x, y). rel_spmf ?R x y)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_hole 11),
                 template_hole 10)),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6))),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))
         )),
    ("Rel_PMF_Characterisation_MFMC.edge'_simps",
     "??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R ?xv
       (??.Rel_PMF_Characterisation_MFMC.vertex.Left ?x) =
      (?xv = ??.Rel_PMF_Characterisation_MFMC.vertex.Source &
       ?x : set_pmf ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 4)))
           ))),
    ("Rel_PMF_Characterisation_MFMC.edge'_simps",
     "??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R
       (??.Rel_PMF_Characterisation_MFMC.vertex.Right ?y) ?yv =
      (?yv = ??.Rel_PMF_Characterisation_MFMC.vertex.Sink &
       ?y : set_pmf ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_app (template_hole 5, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 3)))
           ))),
    ("Rel_PMF_Characterisation_MFMC.IN_Left",
     "\<^bold>I\<^bold>N\<^bsub>??.Rel_PMF_Characterisation_MFMC.\<Delta> ?p ?q ?R\<^esub>
       (??.Rel_PMF_Characterisation_MFMC.vertex.Left ?x) =
      (if ?x : set_pmf ?p
       then {??.Rel_PMF_Characterisation_MFMC.vertex.Source} else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_var 3))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_hole 0))),
    ("Rel_PMF_Characterisation_MFMC.OUT_Right",
     "\<^bold>O\<^bold>U\<^bold>T\<^bsub>??.Rel_PMF_Characterisation_MFMC.\<Delta> ?p ?q ?R\<^esub>
       (??.Rel_PMF_Characterisation_MFMC.vertex.Right ?y) =
      (if ?y : set_pmf ?q
       then {??.Rel_PMF_Characterisation_MFMC.vertex.Sink} else {})",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 3, template_var 2))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_hole 0))),
    ("Rel_PMF_Characterisation_MFMC.edge'_simps",
     "??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R
       (??.Rel_PMF_Characterisation_MFMC.vertex.Left ?x)
       (??.Rel_PMF_Characterisation_MFMC.vertex.Right ?y) =
      (?R ?x ?y & ?x : set_pmf ?p & ?y : set_pmf ?q)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_var 2),
           template_app (template_hole 6, template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_var 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 4))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 3)))))),
    ("Rel_PMF_Characterisation_MFMC.rel_pmf_measureI_bounded",
     "(!!A. measure_pmf.prob ?p A
            <= measure_pmf.prob ?q {y. EX x:A. ?R x y}) ==>
      rel_pmf ?R ?p ?q",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Rel_PMF_Characterisation_MFMC.rel_pmf_measureI",
     "(!!A. measure_pmf.prob ?p A
            <= measure_pmf.prob ?q {y. EX x:A. ?R x y}) ==>
      rel_pmf ?R ?p ?q",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Rel_PMF_Characterisation_MFMC.edge'_SourceE",
     "[| ??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R
          ??.Rel_PMF_Characterisation_MFMC.vertex.Source ?yv;
         !!x. [| ?yv = ??.Rel_PMF_Characterisation_MFMC.vertex.Left x;
                 x : set_pmf ?p |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_hole 5),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Rel_PMF_Characterisation_MFMC.edge'_SinkE",
     "[| ??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R ?xv
          ??.Rel_PMF_Characterisation_MFMC.vertex.Sink;
         !!y. [| ?xv = ??.Rel_PMF_Characterisation_MFMC.vertex.Right y;
                 y : set_pmf ?q |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 6, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 1),
              template_hole 5)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Rel_PMF_Characterisation_MFMC.admissible_rel_spmf_mcont",
     "[| mcont ?lub ?ord lub_spmf (ord_spmf (=)) ?f;
         mcont ?lub ?ord lub_spmf (ord_spmf (=)) ?g |]
      ==> ccpo.admissible ?lub ?ord (%x. rel_spmf ?R (?f x) (?g x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 12, template_var 4),
                    template_var 3),
                  template_hole 11),
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_hole 8))),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3),
                  template_hole 6),
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             t_empty)
           ))),
    ("Rel_PMF_Characterisation_MFMC.edge'_RightE",
     "[| ??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R ?xv
          (??.Rel_PMF_Characterisation_MFMC.vertex.Right ?y);
         !!x. [| ?xv = ??.Rel_PMF_Characterisation_MFMC.vertex.Left x;
                 ?R x ?y; x : set_pmf ?p; ?y : set_pmf ?q |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Rel_PMF_Characterisation_MFMC.edge'_LeftE",
     "[| ??.Rel_PMF_Characterisation_MFMC.edge' ?p ?q ?R
          (??.Rel_PMF_Characterisation_MFMC.vertex.Left ?x) ?yv;
         !!y. [| ?yv = ??.Rel_PMF_Characterisation_MFMC.vertex.Right y;
                 ?R ?x y; ?x : set_pmf ?p; y : set_pmf ?q |]
              ==> ?P |]
      ==> ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 5),
                    template_var 4),
                  template_var 3),
                template_app (template_hole 7, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("Rel_PMF_Characterisation_MFMC.rel_spmf_measureI",
     "[| !!A. Sigma_Algebra.measure (measure_spmf ?p) A
              <= Sigma_Algebra.measure (measure_spmf ?q)
                  {y. EX x:A. ?R x y};
         weight_spmf ?q <= weight_spmf ?p |]
      ==> rel_spmf ?R ?p ?q",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1)),
            template_app
             (template_hole 3,
              template_app (template_hole 6, template_var 1))),
          template_app
           (template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 2)),
            template_app
             (template_hole 2,
              template_app (template_hole 8, template_var 2))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 2),
             template_var 1)
           ))),
    ("Rel_PMF_Characterisation_MFMC.fixp_spmf_parametric'",
     "[| !!x. monotone (ord_spmf (=)) (ord_spmf (=)) ?F;
         !!x. monotone (ord_spmf (=)) (ord_spmf (=)) ?G;
         rel_fun (rel_spmf ?R) (rel_spmf ?R) ?F ?G |]
      ==> rel_spmf ?R (ccpo.fixp lub_spmf (ord_spmf (=)) ?F)
           (ccpo.fixp lub_spmf (ord_spmf (=)) ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_var 0))),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 0))),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_hole 14,
                     template_app (template_hole 13, template_hole 12))),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_hole 7))),
               template_var 1))
           ))),
    ("Rel_PMF_Characterisation_MFMC.rel_pmf_measureI_aux",
     "[| EX f S.
            flow (??.Rel_PMF_Characterisation_MFMC.\<Delta> ?p ?q ?R) f &
            MFMC_Network.cut
             (??.Rel_PMF_Characterisation_MFMC.\<Delta> ?p ?q ?R) S &
            orthogonal (??.Rel_PMF_Characterisation_MFMC.\<Delta> ?p ?q ?R)
             f S;
         !!A. measure_pmf.prob ?p A
              <= measure_pmf.prob ?q {y. EX x:A. ?R x y} |]
      ==> rel_pmf ?R ?p ?q",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Rel_PMF_Characterisation_MFMC.fixp_spmf_parametric",
     "[| !!x. spmf.mono_body (%f. ?F f x); !!x. spmf.mono_body (%f. ?G f x);
         rel_fun (rel_fun ?A (rel_spmf ?R)) (rel_fun ?A (rel_spmf ?R)) ?F
          ?G |]
      ==> rel_fun ?A (rel_spmf ?R) (spmf.fixp_fun ?F) (spmf.fixp_fun ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 1),
                      template_app
                       (template_hole 7,
                        template_app (template_hole 6, template_var 0)))),
                  template_app
                   (template_app (template_hole 8, template_var 1),
                    template_app
                     (template_hole 7,
                      template_app (template_hole 6, template_var 0)))),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 1),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 0))),
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)),
                   template_app
                    (template_hole 19,
                     template_app
                      (template_hole 18,
                       template_app (template_hole 17, template_hole 16)))),
                 template_var 3)),
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_hole 0)),
                 template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app (template_hole 11, template_hole 10)))),
               template_var 2))
           )))]:
   (string * thm * template) list
### theory "Draft.Rel_PMF_Characterisation_MFMCTemplates"
### 1.729s elapsed time, 2.772s cpu time, 1.211s GC time
val it = (): unit
