Loading theory "Draft.MFMC_Misc" (required by "Draft.MFMC_MiscTemplates")
Loading theory "Draft.Templates" (required by "Draft.MFMC_MiscTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MFMC_MiscTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.079s elapsed time, 0.270s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.341s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MFMC_MiscTemplates" via "Draft.ExtrEqs")
### theory "Draft.MFMC_Misc"
### 0.624s elapsed time, 1.394s cpu time, 0.099s GC time
### theory "HOL-Library.BigO"
### 0.609s elapsed time, 1.147s cpu time, 0.099s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MFMC_MiscTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.451s elapsed time, 0.498s cpu time, 0.069s GC time
Loading theory "Draft.MFMC_MiscTemplates"
val templateLemmas =
   [("MFMC_Misc.inj_on_Pair2", "inj_on (Pair ?x) ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("MFMC_Misc.inj_on_Pair1", "inj_on (%x. (x, ?y)) ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)
         )),
    ("MFMC_Misc.countable_converse", "countable (?A^-1) = countable ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("MFMC_Misc.countable_converseI", "countable ?A ==> countable (?A^-1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("MFMC_Misc.rtrancl_path_simps", "rtrancl_path ?R ?x [] ?y = (?y = ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_var 1))),
    ("MFMC_Misc.Field_restrict_rel_subset",
     "Field (restrict_rel ?A ?R) <= ?A Int Field ?R",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("MFMC_Misc.incseq_chain_range",
     "incseq ?f ==> Complete_Partial_Order.chain (<=) (range ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("MFMC_Misc.in_set_tlD", "?x : set (tl ?xs) ==> ?x : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0))
           ))),
    ("MFMC_Misc.not_range_Inl", "(?x ~: range Inl) = (?x : range Inr)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3))),
       template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("MFMC_Misc.not_range_Inr", "(?x ~: range Inr) = (?x : range Inl)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3))),
       template_app
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("MFMC_Misc.Chains_restrict_relD",
     "?M : Chains (restrict_rel ?A ?leq) ==> ?M : Chains ?leq",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("MFMC_Misc.card_eq_1_iff", "(card ?A = Suc 0) = (EX x. ?A = {x})",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app (template_hole 5, template_hole 4)),
       template_app (template_hole 3, t_empty))),
    ("MFMC_Misc.Partial_order_restrict_rel",
     "Partial_order ?R ==> Partial_order (restrict_rel ?A ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("MFMC_Misc.Field_restrict_rel",
     "Refl ?R ==> Field (restrict_rel ?A ?R) = ?A Int Field ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 3, template_var 1))))),
    ("MFMC_Misc.Chains_into_chain",
     "?M : Chains {(x, y). ?R x y} ==> Complete_Partial_Order.chain ?R ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, t_empty))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("MFMC_Misc.inj_map_prod'",
     "[| inj ?f; inj ?g |] ==> inj_on (map_prod ?f ?g) ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)
           ))),
    ("MFMC_Misc.rtrancl_path_simps",
     "rtrancl_path ?R ?x (?a # ?bs) ?y =
      (?R ?x ?a & rtrancl_path ?R ?a ?bs ?y)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 4, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("MFMC_Misc.nth_rotate1",
     "?n < length ?xs ==> rotate1 ?xs ! ?n = ?xs ! (Suc ?n mod length ?xs)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 5, template_var 0)))))),
    ("MFMC_Misc.disjE", "[| ?P | ?Q; ?P ==> ?R; ?Q ==> ?R |] ==> ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_predicate (template_var 2)],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("MFMC_Misc.rotate1_append",
     "rotate1 (?xs @ ?ys) =
      (if ?xs = [] then rotate1 ?ys else tl ?xs @ ?ys @ [hd ?xs])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_hole 3)),
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 1)),
                   template_hole 3))))
           ))),
    ("MFMC_Misc.in_restrict_rel_iff",
     "((?x, ?y) : restrict_rel ?A ?R) =
      ((?x, ?y) : ?R & ?x : ?A & ?y : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1))))),
    ("MFMC_Misc.nn_integral_count_space_reindex",
     "inj_on ?f ?A ==>
      integral\<^sup>N (count_space (?f ` ?A)) ?g =
      (\<Sum>\<^sup>+ x\<in>?A. ?g (?f x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1))),
           t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           t_empty)))),
    ("MFMC_Misc.set_zip_rightI",
     "[| ?x : set ?ys; length ?ys <= length ?xs |]
      ==> EX z. (z, ?x) : set (zip ?xs ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("MFMC_Misc.Cauchy_real_Suc_diff",
     "[| !!n. \<bar>?f (Suc n) - ?f n\<bar> <= ?c / ?x ^ n; 1 < ?x |]
      ==> Cauchy ?f",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation (less_than, template_hole 1, template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("MFMC_Misc.restrict_relI",
     "[| (?x, ?y) : ?R; ?x : ?A; ?y : ?A |]
      ==> (?x, ?y) : restrict_rel ?A ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("MFMC_Misc.map_eq_append_conv",
     "(map ?f ?xs = ?ys @ ?zs) =
      (EX ys' zs'. ?xs = ys' @ zs' & ?ys = map ?f ys' & ?zs = map ?f zs')",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("MFMC_Misc.restrict_relE",
     "[| (?x, ?y) : restrict_rel ?A ?R;
         [| (?x, ?y) : ?R; ?x : ?A; ?y : ?A |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 4),
                     template_var 3)),
                 template_var 1)
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)
                 )],
            template_implication
             ([template_predicate
                (
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2)
                   )],
              template_predicate (template_var 0))))],
       template_predicate (template_var 0))),
    ("MFMC_Misc.bourbaki_witt_fixpoint_restrict_rel",
     "[| Partial_order ?leq;
         !!M. [| M : Chains (restrict_rel ?A ?leq); M ~= {} |]
              ==> ?lub M : ?A;
         !!M z.
            [| M : Chains ?leq; M ~= {}; !!x. x : M ==> (x, z) : ?leq |]
            ==> (?lub M, z) : ?leq;
         !!M z. [| M : Chains ?leq; z : M |] ==> (z, ?lub M) : ?leq;
         !!x. [| x : ?A; x : Field ?leq |]
              ==> (x, ?f x) : ?leq & ?f x : ?A |]
      ==> bourbaki_witt_fixpoint ?lub (restrict_rel ?A ?leq) ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 3)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 3)),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.MFMC_MiscTemplates"
### 1.150s elapsed time, 1.438s cpu time, 0.168s GC time
val it = (): unit
