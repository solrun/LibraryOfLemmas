Loading theory "Draft.MFMC_Finite" (required by "Draft.MFMC_BoundedTemplates" via "Draft.MFMC_Bounded" via "Draft.Matrix_For_Marginals")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MFMC_BoundedTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.MFMC_BoundedTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.MFMC_Misc" (required by "Draft.MFMC_BoundedTemplates" via "Draft.MFMC_Bounded" via "Draft.Matrix_For_Marginals")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.335s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.156s elapsed time, 0.570s cpu time, 0.033s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MFMC_BoundedTemplates" via "Draft.ExtrEqs")
locale Graph
  fixes c :: "nat * nat => 'capacity"
locale NFlow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NFlow c s t f"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
### theory "Draft.MFMC_Finite"
### 0.291s elapsed time, 0.987s cpu time, 0.033s GC time
### theory "Draft.MFMC_Misc"
### 0.702s elapsed time, 1.826s cpu time, 0.087s GC time
Loading theory "Draft.MFMC_Network" (required by "Draft.MFMC_BoundedTemplates" via "Draft.MFMC_Bounded" via "Draft.MFMC_Reduction" via "Draft.MFMC_Web")
Loading theory "Draft.Matrix_For_Marginals" (required by "Draft.MFMC_BoundedTemplates" via "Draft.MFMC_Bounded")
### theory "HOL-Library.BigO"
### 0.717s elapsed time, 1.770s cpu time, 0.133s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MFMC_BoundedTemplates")
Proofs for inductive predicate(s) "cycle"
  Proving monotonicity ...
### theory "Draft.Matrix_For_Marginals"
### 0.464s elapsed time, 1.392s cpu time, 0.153s GC time
Proofs for inductive predicate(s) "support_flowp"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.573s elapsed time, 1.479s cpu time, 0.154s GC time
Proofs for inductive predicate(s) "SINKp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "flow"
  Proving monotonicity ...
Proofs for inductive predicate(s) "cut"
  Proving monotonicity ...
Proofs for inductive predicate(s) "orthogonal"
  Proving monotonicity ...
locale countable_network
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "countable_network \<Delta>"
locale antiparallel_edges
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "antiparallel_edges \<Delta>"
Proofs for inductive predicate(s) "edg"
  Proving monotonicity ...
Found termination order: "{}"
### theory "Draft.MFMC_Network"
### 1.846s elapsed time, 3.472s cpu time, 0.726s GC time
Loading theory "Draft.MFMC_Web" (required by "Draft.MFMC_BoundedTemplates" via "Draft.MFMC_Bounded" via "Draft.MFMC_Reduction")
Proofs for inductive predicate(s) "current"
  Proving monotonicity ...
Proofs for inductive predicate(s) "web_flow"
  Proving monotonicity ...
Proofs for inductive predicate(s) "SATp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "separating_gen"
  Proving monotonicity ...
Proofs for inductive predicate(s) "wave"
  Proving monotonicity ...
Proofs for inductive predicate(s) "hindrance_by"
  Proving monotonicity ...
Proofs for inductive predicate(s) "hindrance"
  Proving monotonicity ...
Proofs for inductive predicate(s) "hindered"
  Proving monotonicity ...
Proofs for inductive predicate(s) "hindered_by"
  Proving monotonicity ...
Proofs for inductive predicate(s) "loose"
  Proving monotonicity ...
Proofs for inductive predicate(s) "orthogonal_current"
  Proving monotonicity ...
Proofs for inductive predicate(s) "linkage"
  Proving monotonicity ...
Proofs for inductive predicate(s) "trimming"
  Proving monotonicity ...
### Ambiguous input (line 1252 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>Fields.inverse_class.inverse_divide"
###         ("\<^const>SPMF.restrict_spmf" ("_position" g)
###           ("_position" \<Gamma>))
###         ("_position" f))
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" g)
###           ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###         ("_applC" ("_position" indicator)
###           ("_cargs"
###             ("\<^const>Groups.uminus_class.uminus"
###               ("_applC"
###                 ("\<^const>MFMC_Web.roofed_circ_indexed" ("_indexdefault"))
###                 ("_applC"
###                   ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###                   ("_position" f))))
###             ("_position" x))))
###       ("_applC" ("_position" indicator)
###         ("_cargs"
###           ("\<^const>Groups.uminus_class.uminus"
###             ("_applC" ("\<^const>MFMC_Web.roofed_indexed" ("_indexdefault"))
###               ("_applC"
###                 ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###                 ("_position" f))))
###           ("_position" y))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###         ("_position" \<Gamma>) ("_position" f))
###       ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###     ("\<^const>Groups.times_class.times"
###       ("\<^const>Groups.times_class.times"
###         ("_applC" ("_position" g)
###           ("_tuple" ("_position" x) ("_tuple_arg" ("_position" y))))
###         ("_applC" ("_position" indicator)
###           ("_cargs"
###             ("\<^const>Groups.uminus_class.uminus"
###               ("_applC"
###                 ("\<^const>MFMC_Web.roofed_circ_indexed" ("_indexdefault"))
###                 ("_applC"
###                   ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###                   ("_position" f))))
###             ("_position" x))))
###       ("_applC" ("_position" indicator)
###         ("_cargs"
###           ("\<^const>Groups.uminus_class.uminus"
###             ("_applC" ("\<^const>MFMC_Web.roofed_indexed" ("_indexdefault"))
###               ("_applC"
###                 ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###                 ("_position" f))))
###           ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1256 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("\<^const>MFMC_Web.roofed_circ_indexed" ("_indexdefault"))
###         ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###           ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" d_OUT)
###         ("_cargs"
###           ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###             ("_position" \<Gamma>) ("_position" f))
###           ("_position" x)))
###       ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("\<^const>MFMC_Web.roofed_circ_indexed" ("_indexdefault"))
###         ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###           ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" d_OUT)
###         ("_cargs"
###           ("\<^const>Fields.inverse_class.inverse_divide"
###             ("\<^const>SPMF.restrict_spmf" ("_position" g)
###               ("_position" \<Gamma>))
###             ("_position" f))
###           ("_position" x)))
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1260 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("\<^const>MFMC_Web.roofed_indexed" ("_indexdefault"))
###         ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###           ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" d_IN)
###         ("_cargs"
###           ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###             ("_position" \<Gamma>) ("_position" f))
###           ("_position" x)))
###       ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("\<^const>MFMC_Web.roofed_indexed" ("_indexdefault"))
###         ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###           ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" d_IN)
###         ("_cargs"
###           ("\<^const>Fields.inverse_class.inverse_divide"
###             ("\<^const>SPMF.restrict_spmf" ("_position" g)
###               ("_position" \<Gamma>))
###             ("_position" f))
###           ("_position" x)))
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1263 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC"
###       ("\<^const>Fields.inverse_class.inverse_divide"
###         ("\<^const>SPMF.restrict_spmf" ("_position" g)
###           ("_position" \<Gamma>))
###         ("_position" f))
###       ("_position" e))
###     ("_applC" ("_position" g) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC"
###       ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###         ("_position" \<Gamma>) ("_position" f))
###       ("_position" e))
###     ("_applC" ("_position" g) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1266 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC" ("_position" d_OUT)
###       ("_cargs"
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f))
###         ("_position" x)))
###     ("_applC" ("_position" d_OUT)
###       ("_cargs" ("_position" g) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC" ("_position" d_OUT)
###       ("_cargs"
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f))
###         ("_position" x)))
###     ("_applC" ("_position" d_OUT)
###       ("_cargs" ("_position" g) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1269 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC" ("_position" d_IN)
###       ("_cargs"
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f))
###         ("_position" x)))
###     ("_applC" ("_position" d_IN)
###       ("_cargs" ("_position" g) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less_eq"
###     ("_applC" ("_position" d_IN)
###       ("_cargs"
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f))
###         ("_position" x)))
###     ("_applC" ("_position" d_IN)
###       ("_cargs" ("_position" g) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1276 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" d_IN)
###       ("_cargs"
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f))
###         ("_position" x)))
###     ("_applC" ("_position" d_IN)
###       ("_cargs" ("_position" g) ("_position" x)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" d_IN)
###       ("_cargs"
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f))
###         ("_position" x)))
###     ("_applC" ("_position" d_IN)
###       ("_cargs" ("_position" g) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1299 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" a)
###       ("_applC" ("_position" A)
###         ("_applC" ("_position" quotient_web)
###           ("_cargs" ("_position" \<Gamma>) ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" d_IN)
###         ("_cargs"
###           ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###             ("_position" \<Gamma>) ("_position" f))
###           ("_position" a)))
###       ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" a)
###       ("_applC" ("_position" A)
###         ("_applC" ("_position" quotient_web)
###           ("_cargs" ("_position" \<Gamma>) ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" d_IN)
###         ("_cargs"
###           ("\<^const>Fields.inverse_class.inverse_divide"
###             ("\<^const>SPMF.restrict_spmf" ("_position" g)
###               ("_position" \<Gamma>))
###             ("_position" f))
###           ("_position" a)))
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1302 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Groups.zero_class.zero")
###       ("_applC" ("_position" g) ("_position" e))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Groups.zero_class.zero")
###       ("_applC"
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f))
###         ("_position" e)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Groups.zero_class.zero")
###       ("_applC" ("_position" g) ("_position" e))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Groups.zero_class.zero")
###       ("_applC"
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f))
###         ("_position" e)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1305 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" SINK) ("_position" g))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" SINK)
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" SINK) ("_position" g))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" x)
###       ("_applC" ("_position" SINK)
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1313 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" SAT)
###       ("_cargs"
###         ("_applC" ("_position" quotient_web)
###           ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###         ("\<^const>Fields.inverse_class.inverse_divide"
###           ("\<^const>SPMF.restrict_spmf" ("_position" g)
###             ("_position" \<Gamma>))
###           ("_position" f))))
###     ("\<^const>Set.union"
###       ("_applC" ("\<^const>MFMC_Web.roofed_indexed" ("_indexdefault"))
###         ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###           ("_position" f)))
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" SAT)
###           ("_cargs" ("_position" \<Gamma>) ("_position" g)))
###         ("_applC" ("_position" A) ("_position" \<Gamma>))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" SAT)
###       ("_cargs"
###         ("_applC" ("_position" quotient_web)
###           ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###         ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###           ("_position" \<Gamma>) ("_position" f))))
###     ("\<^const>Set.union"
###       ("_applC" ("\<^const>MFMC_Web.roofed_indexed" ("_indexdefault"))
###         ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###           ("_position" f)))
###       ("\<^const>Groups.minus_class.minus"
###         ("_applC" ("_position" SAT)
###           ("_cargs" ("_position" \<Gamma>) ("_position" g)))
###         ("_applC" ("_position" A) ("_position" \<Gamma>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1331 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" current)
###     ("_cargs"
###       ("_applC" ("_position" quotient_web)
###         ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###       ("\<^const>Fields.inverse_class.inverse_divide"
###         ("\<^const>SPMF.restrict_spmf" ("_position" g)
###           ("_position" \<Gamma>))
###         ("_position" f)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" current)
###     ("_cargs"
###       ("_applC" ("_position" quotient_web)
###         ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###       ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###         ("_position" \<Gamma>) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1376 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###       ("_position" g))
###     ("_applC"
###       ("\<^const>MFMC_Web.terminal_indexed"
###         ("_index"
###           ("_applC" ("_position" quotient_web)
###             ("_cargs" ("_position" \<Gamma>) ("_position" f)))))
###       ("\<^const>Fields.inverse_class.inverse_divide"
###         ("\<^const>SPMF.restrict_spmf" ("_position" g)
###           ("_position" \<Gamma>))
###         ("_position" f)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.subset_eq"
###     ("_applC" ("\<^const>MFMC_Web.terminal_indexed" ("_indexdefault"))
###       ("_position" g))
###     ("_applC"
###       ("\<^const>MFMC_Web.terminal_indexed"
###         ("_index"
###           ("_applC" ("_position" quotient_web)
###             ("_cargs" ("_position" \<Gamma>) ("_position" f)))))
###       ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###         ("_position" \<Gamma>) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1393 of "$AFP/MFMC_Countable/MFMC_Web.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wave)
###     ("_cargs"
###       ("_applC" ("_position" quotient_web)
###         ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###       ("\<^const>Fields.inverse_class.inverse_divide"
###         ("\<^const>SPMF.restrict_spmf" ("_position" g)
###           ("_position" \<Gamma>))
###         ("_position" f)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" wave)
###     ("_cargs"
###       ("_applC" ("_position" quotient_web)
###         ("_cargs" ("_position" \<Gamma>) ("_position" f)))
###       ("\<^const>MFMC_Web.restrict_curr" ("_position" g)
###         ("_position" \<Gamma>) ("_position" f)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "web \<Gamma>"
locale countable_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_web \<Gamma>"
locale countable_bipartite_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_bipartite_web \<Gamma>"
### theory "Draft.MFMC_Web"
### 1.291s elapsed time, 1.414s cpu time, 0.184s GC time
Loading theory "Draft.MFMC_Reduction" (required by "Draft.MFMC_BoundedTemplates" via "Draft.MFMC_Bounded")
locale web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "web \<Gamma>"
locale countable_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_web \<Gamma>"
locale web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "web \<Gamma>"
locale countable_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_web \<Gamma>"
locale antiparallel_edges
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "antiparallel_edges \<Delta>"
locale countable_network
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "countable_network \<Delta>"
### theory "Draft.MFMC_Reduction"
### 0.454s elapsed time, 0.499s cpu time, 0.065s GC time
Loading theory "Draft.MFMC_Bounded" (required by "Draft.MFMC_BoundedTemplates")
locale countable_bipartite_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "countable_bipartite_web \<Gamma>"
locale bounded_countable_bipartite_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "bounded_countable_bipartite_web \<Gamma>"
locale bounded_countable_web
  fixes \<Gamma> :: "('v, 'more) web_scheme"  (structure)
  assumes "bounded_countable_web \<Gamma>"
locale bounded_countable_network
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "bounded_countable_network \<Delta>"
locale antiparallel_edges
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "antiparallel_edges \<Delta>"
locale bounded_countable_network
  fixes \<Delta> :: "('v, 'more) network_scheme"  (structure)
  assumes "bounded_countable_network \<Delta>"
### theory "Draft.MFMC_Bounded"
### 0.715s elapsed time, 1.202s cpu time, 0.682s GC time
Loading theory "Draft.MFMC_BoundedTemplates"
val templateLemmas =
   [("MFMC_Bounded.One_le_of_nat_ennreal", "(1 <= of_nat ?x) = (1 <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("MFMC_Bounded.nn_integral_count_space_top_approx",
     "[| integral\<^sup>N (count_space UNIV) ?f = \<top>; ?b < \<top>;
         !!n. ?b < sum ?f {..<n} ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app (template_hole 6, template_hole 5)),
            template_var 2),
          template_hole 4),
        template_inequation (less_than, template_var 1, template_hole 4),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.MFMC_BoundedTemplates"
### 1.415s elapsed time, 1.793s cpu time, 0.260s GC time
val it = (): unit
