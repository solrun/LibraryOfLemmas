   [("MFMC_Network.cycle_Nil", "MFMC_Network.cycle ?G [] = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("MFMC_Network.d_IN_0", "d_IN (%_. 0) ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_hole 0)),
    ("MFMC_Network.d_OUT_0", "d_OUT (%_. 0) ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_hole 0)),
    ("MFMC_Network.SINKp_SINK_eq", "SINKp ?f = (%x. x : SINK ?f)",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("MFMC_Network.support_flowp_support_flow_eq",
     "support_flowp ?f = (%x. x : support_flow ?f)",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("MFMC_Network.d_OUT_ge_point", "?f (?x, ?y) <= d_OUT ?f ?x",
     template_inequation
      (less_equals,
       template_app
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 1))),
    ("MFMC_Network.d_IN_ge_point", "?f (?y, ?x) <= d_IN ?f ?x",
     template_inequation
      (less_equals,
       template_app
        (template_var 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 0))),
    ("MFMC_Network.distinct_cycle_edges",
     "MFMC_Network.cycle ?G ?p ==> distinct (cycle_edges ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("MFMC_Network.support_flow_conv", "support_flow ?f = {e. 0 < ?f e}",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("MFMC_Network.vertexI1",
     "edge ?\<Gamma> ?x ?y ==> vertex ?\<Gamma> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("MFMC_Network.vertexI2",
     "edge ?\<Gamma> ?x ?y ==> vertex ?\<Gamma> ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("MFMC_Network.support_flow_Sup",
     "support_flow (\<Squnion> ?Y) = \<Union> (support_flow ` ?Y)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("MFMC_Network.cycle_edges_not_Nil",
     "MFMC_Network.cycle ?G ?p ==> cycle_edges ?p ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("MFMC_Network.SINK_mono'", "?f <= ?g ==> SINK ?g <= SINK ?f",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("MFMC_Network.countable_cycles",
     "countable \<^bold>V\<^bsub>?G\<^esub> ==> countable (cycles ?G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("MFMC_Network.flowD_capacity",
     "flow ?\<Delta> ?f ==> ?f ?e <= capacity ?\<Delta> ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_var 1, template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("MFMC_Network.not_in_support_flowD",
     "?x ~: support_flow ?f ==> ?f ?x = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_equation
        (template_app (template_var 0, template_var 1), template_hole 0))),
    ("MFMC_Network.d_IN_cmult", "d_IN (%e. ?c * ?f e) ?x = ?c * d_IN ?f ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("MFMC_Network.d_OUT_cmult",
     "d_OUT (%e. ?c * ?f e) ?x = ?c * d_OUT ?f ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("MFMC_Network.flowD_capacity_IN",
     "flow ?\<Delta> ?f ==> d_IN ?f ?x <= d_IN (capacity ?\<Delta>) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("MFMC_Network.flowD_capacity_OUT",
     "flow ?\<Delta> ?f ==> d_OUT ?f ?x <= d_OUT (capacity ?\<Delta>) ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("MFMC_Network.SINK_mono", "(!!e. ?f e <= ?g e) ==> SINK ?g <= SINK ?f",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("MFMC_Network.d_IN_add",
     "d_IN (%e. ?f e + ?g e) ?x = d_IN ?f ?x + d_IN ?g ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("MFMC_Network.d_OUT_add",
     "d_OUT (%e. ?f e + ?g e) ?x = d_OUT ?f ?x + d_OUT ?g ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, t_empty), template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("MFMC_Network.cycle_edges_edges",
     "MFMC_Network.cycle ?G ?p ==>
      set (cycle_edges ?p) <= \<^bold>E\<^bsub>?G\<^esub>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))))),
    ("MFMC_Network.d_IN_mono",
     "(!!x. ?f (x, ?y) <= ?g (x, ?y)) ==> d_IN ?f ?y <= d_IN ?g ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("MFMC_Network.d_OUT_mono",
     "(!!y. ?f (?x, y) <= ?g (?x, y)) ==> d_OUT ?f ?x <= d_OUT ?g ?x",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("MFMC_Network.cycle_leave_ex_enter",
     "[| MFMC_Network.cycle ?G ?p; (?x, ?y) : set (cycle_edges ?p) |]
      ==> EX z. (z, ?x) : set (cycle_edges ?p)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("MFMC_Network.flowD_KIR",
     "[| flow ?\<Delta> ?f; ?x ~= source ?\<Delta>; ?x ~= sink ?\<Delta> |]
      ==> KIR ?f ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 4, template_var 2))
            ),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("MFMC_Network.SINK_Sup",
     "[| Complete_Partial_Order.chain (<=) ?Y; ?Y ~= {};
         countable (support_flow (\<Squnion> ?Y)) |]
      ==> SINK (\<Squnion> ?Y) = \<Inter> (SINK ` ?Y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))))),
    ("MFMC_Network.cycle_enter_leave_same",
     "MFMC_Network.cycle ?G ?p ==>
      card (set (filter (%(x', y). x' = ?x) (cycle_edges ?p))) =
      card (set (filter (%(x', y). y = ?x) (cycle_edges ?p)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_app (template_hole 0, template_var 1)))),
         template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_app (template_hole 0, template_var 1))))))),
    ("MFMC_Network.d_IN_monotone_convergence_SUP",
     "incseq (%n x. ?f n (x, ?y)) ==>
      d_IN (%e. \<Squnion>n. ?f n e) ?y = (\<Squnion>n. d_IN (?f n) ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty), template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0))))),
    ("MFMC_Network.d_OUT_monotone_convergence_SUP",
     "incseq (%n y. ?f n (?x, y)) ==>
      d_OUT (%e. \<Squnion>n. ?f n e) ?x = (\<Squnion>n. d_OUT (?f n) ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, t_empty), template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0))))),
    ("MFMC_Network.d_IN_Sup",
     "[| Complete_Partial_Order.chain (<=) ?Y; ?Y ~= {};
         countable (support_flow (\<Squnion> ?Y)) |]
      ==> d_IN (\<Squnion> ?Y) ?y = (\<Squnion>f\<in>?Y. d_IN f ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("MFMC_Network.d_OUT_Sup",
     "[| Complete_Partial_Order.chain (<=) ?Y; ?Y ~= {};
         countable (support_flow (\<Squnion> ?Y)) |]
      ==> d_OUT (\<Squnion> ?Y) ?x = (\<Squnion>f\<in>?Y. d_OUT f ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_var 1)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("MFMC_Network.orthogonalD_in",
     "[| orthogonal ?\<Delta> ?f ?S; edge ?\<Delta> ?x ?y; ?x ~: ?S;
         ?y : ?S |]
      ==> ?f (?x, ?y) = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("MFMC_Network.orthogonalD_out",
     "[| orthogonal ?\<Delta> ?f ?S; edge ?\<Delta> ?x ?y; ?x : ?S;
         ?y ~: ?S |]
      ==> ?f (?x, ?y) = capacity ?\<Delta> (?x, ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_var 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 4),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("MFMC_Network.d_IN_diff",
     "[| !!x. ?g (x, ?y) <= ?f (x, ?y); d_IN ?g ?y ~= \<top> |]
      ==> d_IN (%e. ?f e - ?g e) ?y = d_IN ?f ?y - d_IN ?g ?y",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1))))),
    ("MFMC_Network.d_OUT_diff",
     "[| !!y. ?g (?x, y) <= ?f (?x, y); d_OUT ?g ?x ~= \<top> |]
      ==> d_OUT (%e. ?f e - ?g e) ?x = d_OUT ?f ?x - d_OUT ?g ?x",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1))))),
    ("MFMC_Network.d_IN_Inf",
     "[| Complete_Partial_Order.chain (<=) ?Y; ?Y ~= {};
         countable (support_flow ?f); !!g e. g : ?Y ==> g e <= ?f e;
         d_IN ?f ?x ~= \<top> |]
      ==> d_IN (\<Sqinter> ?Y) ?x = (\<Sqinter>g\<in>?Y. d_IN g ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 12)),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 1))
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 2, template_var 2)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("MFMC_Network.d_OUT_Inf",
     "[| Complete_Partial_Order.chain (<=) ?Y; ?Y ~= {};
         countable (support_flow ?f); !!g e. g : ?Y ==> g e <= ?f e;
         d_OUT ?f ?x ~= \<top> |]
      ==> d_OUT (\<Sqinter> ?Y) ?x = (\<Sqinter>g\<in>?Y. d_OUT g ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 2, template_hole 12)),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 1))
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 2, template_var 2)),
           template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2)))))]
