Loading theory "Draft.MFMC_Finite" (required by "Draft.Matrix_For_MarginalsTemplates" via "Draft.Matrix_For_Marginals")
Loading theory "Draft.MFMC_Misc" (required by "Draft.Matrix_For_MarginalsTemplates" via "Draft.Matrix_For_Marginals")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Matrix_For_MarginalsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Matrix_For_MarginalsTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.093s elapsed time, 0.410s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.512s cpu time, 0.035s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Matrix_For_MarginalsTemplates" via "Draft.ExtrEqs")
locale Graph
  fixes c :: "nat * nat => 'capacity"
locale NFlow
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
    and f :: "nat * nat => 'capacity"
  assumes "NFlow c s t f"
locale Network
  fixes c :: "nat * nat => 'capacity"
    and s :: "nat"
    and t :: "nat"
  assumes "Network c s t"
### theory "Draft.MFMC_Finite"
### 0.275s elapsed time, 0.955s cpu time, 0.035s GC time
### theory "Draft.MFMC_Misc"
### 0.639s elapsed time, 1.695s cpu time, 0.078s GC time
Loading theory "Draft.Matrix_For_Marginals" (required by "Draft.Matrix_For_MarginalsTemplates")
### theory "HOL-Library.BigO"
### 0.602s elapsed time, 1.361s cpu time, 0.043s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Matrix_For_MarginalsTemplates")
### theory "Draft.Matrix_For_Marginals"
### 0.381s elapsed time, 0.787s cpu time, 0.077s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.525s elapsed time, 0.910s cpu time, 0.173s GC time
Loading theory "Draft.Matrix_For_MarginalsTemplates"
val templateLemmas =
   [("Matrix_For_Marginals.sum_lessThan_conv_atMost_nat",
     "sum ?f {..<?n} = sum ?f {..?n} - ?f ?n",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 0, template_var 0))),
         template_app (template_var 1, template_var 0)))),
    ("Matrix_For_Marginals.summable_zero_on",
     "[| summable ?f; finite ?X |] ==> summable (zero_on ?f ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1), t_empty),
               template_var 0))
           ))),
    ("Matrix_For_Marginals.zero_on_ennreal",
     "zero_on (%x. ennreal (?f x)) ?A = (%x. ennreal (zero_on ?f ?A x))",
     template_equation
      (template_app
        (template_app (template_app (template_hole 4, t_empty), t_empty),
         template_var 0),
       t_empty)),
    ("Matrix_For_Marginals.Collect_disjoint_atLeast",
     "(Collect ?P Int {?x..} = {}) = (ALL y>=?x. ~ ?P y)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 1)),
             template_app (template_hole 5, template_var 0))),
         template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("Matrix_For_Marginals.zero_on_nonneg",
     "((0::?'b) <= zero_on ?f ?X ?x) = (?x ~: ?X --> (0::?'b) <= ?f ?x)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 2), t_empty),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_app (template_var 2, template_var 0))))),
    ("Matrix_For_Marginals.zero_on_le",
     "(zero_on ?f ?X ?x <= ?f ?x) = (?x : ?X --> (0::?'b) <= ?f ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_var 2), t_empty),
               template_var 1),
             template_var 0)),
         template_app (template_var 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_hole 2),
           template_app (template_var 2, template_var 0))))),
    ("Matrix_For_Marginals.summable_zero_on_nonneg",
     "[| summable ?f; !!x. (0::?'a) <= ?f x |]
      ==> summable (zero_on ?f ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1), t_empty),
               template_var 0))
           ))),
    ("Matrix_For_Marginals.sums_zero_on",
     "[| ?f sums ?s; finite ?X |] ==> zero_on ?f ?X sums (?s - sum ?f ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 2), t_empty),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Matrix_For_Marginals.suminf_zero_on",
     "[| summable ?f; finite ?X |]
      ==> suminf (zero_on ?f ?X) = suminf ?f - sum ?f ?X",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1), t_empty),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Matrix_For_Marginals.convergent_bounded_family_nat",
     "[| !!x. bounded (range (%n. ?f n x));
         !!k. [| strict_mono k; !!x. convergent (%n. ?f (k n) x) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Matrix_For_Marginals.convergent_bounded_family",
     "[| !!x. x : ?A ==> bounded (range (%n. ?f n x)); countable ?A;
         !!k. [| strict_mono k;
                 !!x. x : ?A ==> convergent (%n. ?f (k n) x) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Matrix_For_Marginals.bounded_matrix_for_marginals_nat",
     "[| ?f sums ?s; ?g sums ?s; !!x. 0 <= ?f x; !!y. 0 <= ?g y;
         !!X. suminf (zero_on ?f (- X)) <= suminf (zero_on ?g (- ?R `` X));
         !!h. [| !!x y. 0 <= h x y; !!x y. 0 < h x y ==> (x, y) : ?R;
                 !!x. h x sums ?f x; !!y. (%x. h x y) sums ?g y |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Matrix_For_Marginals.bounded_matrix_for_marginals_ennreal",
     "[| integral\<^sup>N (count_space ?A) ?f =
         integral\<^sup>N (count_space ?B) ?g;
         integral\<^sup>N (count_space ?B) ?g ~= \<top>;
         !!X. X <= ?A ==>
              integral\<^sup>N (count_space X) ?f
              <= integral\<^sup>N (count_space (?R `` X)) ?g;
         countable ?A; countable ?B; ?R <= ?A \<times> ?B;
         !!h. [| !!x y. 0 < h x y ==> (x, y) : ?R; !!x y. h x y ~= \<top>;
                 !!x. x : ?A ==>
                      integral\<^sup>N (count_space ?B) (h x) = ?f x;
                 !!y. y : ?B ==> (\<Sum>\<^sup>+ x\<in>?A. h x y) = ?g y |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 22,
              template_app (template_hole 21, template_var 5)),
            t_empty),
          template_app
           (template_app
             (template_hole 20,
              template_app (template_hole 19, template_var 3)),
            t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 20,
                  template_app (template_hole 19, template_var 3)),
                t_empty),
              template_hole 17)
            ),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (template_app (template_hole 12, template_var 5)),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app (template_hole 9, template_var 5), t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Matrix_For_Marginals.bounded_matrix_for_marginals_finite",
     "[| sum ?f {..?n} = sum ?g {..?n};
         !!X. X <= {..?n} ==> sum ?f X <= sum ?g (?R `` X); !!x. 0 <= ?f x;
         !!y. 0 <= ?g y; ?R <= {..?n} \<times> {..?n};
         !!h. [| !!x y. [| x <= ?n; y <= ?n |] ==> 0 <= h x y;
                 !!x y. [| 0 < h x y; x <= ?n; y <= ?n |] ==> (x, y) : ?R;
                 !!x. x <= ?n ==> ?f x = sum (h x) {..?n};
                 !!y. y <= ?n ==> ?g y = (SUM x<=?n. h x y) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 14, template_var 4),
            template_app (template_hole 13, template_var 3)),
          template_app
           (template_app (template_hole 14, template_var 2),
            template_app (template_hole 13, template_var 3))),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 5,
              template_app (template_hole 13, template_var 3)),
            t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Matrix_For_MarginalsTemplates"
### 1.398s elapsed time, 2.050s cpu time, 0.680s GC time
val it = (): unit
