Loading theory "HOL-Library.Infinite_Set" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices" via "HOL-Library.Countable_Set")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "Transition_Systems_and_Automata.Sequence" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.106s elapsed time, 0.443s cpu time, 0.037s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "Transition_Systems_and_Automata.Sequence")
### theory "HOL-Library.Function_Algebras"
### 0.118s elapsed time, 0.491s cpu time, 0.037s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Countable")
### theory "HOL-Library.Monad_Syntax"
### 0.031s elapsed time, 0.119s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.300s elapsed time, 1.202s cpu time, 0.108s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams")
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.358s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.820s cpu time, 0.070s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.382s elapsed time, 1.503s cpu time, 0.157s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat")
consts
  prefixes :: "'a list => 'a list list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### Additional type variable(s) in locale specification "countable": 'a
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Proofs for inductive predicate(s) "list_emb"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
  Proving monotonicity ...
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.101s elapsed time, 4.139s cpu time, 0.953s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.402s elapsed time, 5.325s cpu time, 1.121s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity" via "HOL-Library.Countable_Complete_Lattices")
consts
  sublists :: "'a list => 'a list list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.720s elapsed time, 6.578s cpu time, 1.207s GC time
Loading theory "Transition_Systems_and_Automata.Basic" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "Transition_Systems_and_Automata.Sequence")
### theory "Transition_Systems_and_Automata.Basic"
### 0.069s elapsed time, 0.264s cpu time, 0.082s GC time
Loading theory "Transition_Systems_and_Automata.Sequence" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.BigO"
### 0.918s elapsed time, 3.607s cpu time, 0.443s GC time
[| inj_on ?f ?A; ?B <= ?A |] ==> inj_on ?f ?B
[| inj_on ?f ?B; ?A <= ?B |] ==> inj_on ?f ?A
### theory "HOL-Library.Countable_Set"
### 0.532s elapsed time, 2.091s cpu time, 0.265s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.294s elapsed time, 8.676s cpu time, 1.545s GC time
Loading theory "Draft.Templates" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.086s elapsed time, 0.280s cpu time, 0.068s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FSM_ProductMoreTemplates")
consts
  scan :: "('a => 'b => 'b) => 'a list => 'b => 'b list"
consts
  sscan :: "('a => 'b => 'b) => 'a stream => 'b => 'b stream"
consts
  stranspose :: "'a stream list => 'a list stream"
Proofs for coinductive predicate(s) "sdistinct"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "sascending"
  Proving monotonicity ...
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
Proofs for coinductive predicate(s) "sdescending"
  Proving monotonicity ...
### theory "Transition_Systems_and_Automata.Sequence"
### 0.946s elapsed time, 3.212s cpu time, 0.389s GC time
Loading theory "Transition_Systems_and_Automata.Transition_System" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM")
locale transition_system_universal
  fixes execute :: "'transition => 'state => 'state"
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "run"
  Proving monotonicity ...
Proofs for inductive predicate(s) "reachablep"
  Proving monotonicity ...
locale transition_system_initial
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
    and initial :: "'state => bool"
Proofs for inductive predicate(s) "nodesp"
  Proving monotonicity ...
### theory "Transition_Systems_and_Automata.Transition_System"
### 0.291s elapsed time, 0.882s cpu time, 0.063s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.689s elapsed time, 2.045s cpu time, 0.171s GC time
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Library.Countable_Complete_Lattices"
### 1.845s elapsed time, 3.859s cpu time, 0.361s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 0.397s elapsed time, 0.446s cpu time, 0.042s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL" via "HOL-Library.Linear_Temporal_Logic_on_Streams")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.472s elapsed time, 0.505s cpu time, 0.046s GC time
Loading theory "HOL-Library.Linear_Temporal_Logic_on_Streams" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip" via "Transition_Systems_and_Automata.Sequence_LTL")
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "ev"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "alw"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "UNTIL"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ev_at"
  Proving monotonicity ...
Proofs for inductive predicate(s) "suntil"
  Proving monotonicity ...
### theory "HOL-Library.Linear_Temporal_Logic_on_Streams"
### 0.825s elapsed time, 0.939s cpu time, 0.157s GC time
Loading theory "Transition_Systems_and_Automata.Sequence_LTL" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM" via "Transition_Systems_and_Automata.Sequence_Zip")
### theory "Transition_Systems_and_Automata.Sequence_LTL"
### 0.769s elapsed time, 1.557s cpu time, 1.099s GC time
Loading theory "Transition_Systems_and_Automata.Sequence_Zip" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM")
Loading theory "Transition_Systems_and_Automata.Transition_System_Construction" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM")
Loading theory "Transition_Systems_and_Automata.Transition_System_Extra" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product" via "Draft.FSM")
### theory "Transition_Systems_and_Automata.Sequence_Zip"
### 0.174s elapsed time, 0.524s cpu time, 0.026s GC time
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
locale transition_system
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
### theory "Transition_Systems_and_Automata.Transition_System_Construction"
### 0.297s elapsed time, 0.772s cpu time, 0.026s GC time
locale transition_system_initial
  fixes execute :: "'transition => 'state => 'state"
    and enabled :: "'transition => 'state => bool"
    and initial :: "'state => bool"
### theory "Transition_Systems_and_Automata.Transition_System_Extra"
### 0.326s elapsed time, 0.835s cpu time, 0.070s GC time
Loading theory "Draft.FSM" (required by "Draft.FSM_ProductMoreTemplates" via "Draft.FSM_Product")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.FSM"
### 1.953s elapsed time, 2.152s cpu time, 0.276s GC time
Loading theory "Draft.FSM_Product" (required by "Draft.FSM_ProductMoreTemplates")
Found termination order: "{}"
### theory "Draft.FSM_Product"
### 0.499s elapsed time, 0.578s cpu time, 0.109s GC time
Loading theory "Draft.FSM_ProductMoreTemplates"
val templateLemmas =
   [("FSM_Product.productF_simps",
     "productF ?A ?B ?FAIL ?AB ==> inputs ?AB = inputs ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 3)))),
    ("FSM_Product.no_transition_after_FAIL",
     "productF ?A ?B ?FAIL ?AB ==> succ ?AB ?io ?FAIL = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_hole 0))),
    ("FSM_Product.productF_simps",
     "productF ?A ?B ?FAIL ?AB ==> outputs ?AB = outputs ?A Un outputs ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3)),
           template_app (template_hole 0, template_var 2))))),
    ("FSM_Product.productF_simps",
     "productF ?A ?B ?FAIL ?AB ==> initial ?AB = (initial ?A, initial ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3)),
           template_app (template_hole 0, template_var 2))))),
    ("FSM_Product.butlast_zip",
     "length ?xs = length ?ys ==>
      butlast (?xs || ?ys) = butlast ?xs || butlast ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("FSM_Product.observable_productF",
     "[| observable ?M1.0; observable ?M2.0;
         productF ?M2.0 ?M1.0 ?FAIL ?PM |]
      ==> observable ?PM",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("FSM_Product.well_formed_productF",
     "[| well_formed ?M1.0; well_formed ?M2.0;
         productF ?M2.0 ?M1.0 ?FAIL ?PM |]
      ==> well_formed ?PM",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("FSM_Product.fail_next_productF",
     "[| well_formed ?M1.0; well_formed ?M2.0;
         productF ?M2.0 ?M1.0 ?FAIL ?PM |]
      ==> succ ?PM ?a ?FAIL = {}",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 4),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_hole 0))),
    ("FSM_Product.zip_last",
     "[| 0 < length ?r1.0; length ?r1.0 = length ?r2.0 |]
      ==> last (?r1.0 || ?r2.0) = (last ?r1.0, last ?r2.0)",
     template_implication
      ([template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 1)),
        template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("FSM_Product.nodes_productF",
     "[| well_formed ?M1.0; well_formed ?M2.0;
         productF ?M2.0 ?M1.0 ?FAIL ?PM |]
      ==> nodes ?PM <= insert ?FAIL (nodes ?M2.0 \<times> nodes ?M1.0)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             t_empty))))),
    ("FSM_Product.fail_reachable",
     "[| ~ ?M1.0 \<preceq> ?M2.0; well_formed ?M1.0; well_formed ?M2.0;
         productF ?M2.0 ?M1.0 ?FAIL ?PM |]
      ==> ?FAIL : reachable ?PM (initial ?PM)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)
                )
            ),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("FSM_Product.butlast_zip_cons",
     "[| length ?ws = length ?r1s; ?ws ~= [] |]
      ==> butlast (?w # ?ws || ?r1.0 # ?r1s) =
          (?w, ?r1.0) # butlast (?ws || ?r1s)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 3),
          template_app (template_hole 10, template_var 2)),
        template_negation
         (template_equation (template_var 3, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 3)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)))))),
    ("FSM_Product.fail_reachable_iff",
     "[| well_formed ?M1.0; well_formed ?M2.0;
         productF ?M2.0 ?M1.0 ?FAIL ?PM; observable ?M2.0 |]
      ==> (?FAIL : reachable ?PM (initial ?PM)) =
          (~ ?M1.0 \<preceq> ?M2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2))))),
    ("FSM_Product.no_prefix_targets_FAIL",
     "[| productF ?M2.0 ?M1.0 ?FAIL ?PM; path ?PM ?p ?q; ?k < length ?p |]
      ==> target (take ?k ?p) ?q ~= ?FAIL",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 2))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app (template_hole 2, t_empty),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1),
             template_var 4)
           ))),
    ("FSM_Product.fail_reachable_reverse",
     "[| well_formed ?M1.0; well_formed ?M2.0;
         productF ?M2.0 ?M1.0 ?FAIL ?PM;
         ?FAIL : reachable ?PM (initial ?PM); observable ?M2.0 |]
      ==> ~ ?M1.0 \<preceq> ?M2.0",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 3),
                template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_app (template_hole 3, template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)
               )
           ))),
    ("FSM_Product.productF_path_unzip",
     "[| productF ?A ?B ?FAIL ?AB; path ?AB (?w || ?tr) ?q;
         length ?tr = length ?w |]
      ==> path ?AB (?w || map fst ?tr || map snd ?tr) ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 1)))),
             template_var 0)
           ))),
    ("FSM_Product.productF_language",
     "[| productF ?A ?B ?FAIL ?AB; well_formed ?A; well_formed ?B;
         ?io : L ?A Int L ?B |]
      ==> ?io : L ?AB",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 9, template_var 4)),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_app (template_hole 4, template_var 4))),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 3))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("FSM_Product.path_last_succ",
     "[| path ?A (?ws || ?r1s) ?p1.0; length ?r1s = length ?ws;
         0 < length ?ws |]
      ==> last ?r1s
          : succ ?A (last ?ws) (target (butlast (?ws || ?r1s)) ?p1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 3),
                template_app
                 (template_app (template_hole 12, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 9, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 4, template_var 3),
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 2, t_empty),
                   template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 12, template_var 2),
                       template_var 1))),
                 template_var 0)))
           ))),
    ("FSM_Product.sequence_to_failure_reaches_FAIL",
     "[| sequence_to_failure ?M1.0 ?M2.0 ?io; OFSM ?M1.0; OFSM ?M2.0;
         productF ?M2.0 ?M1.0 ?FAIL ?PM |]
      ==> ?FAIL : io_targets ?PM (initial ?PM) ?io",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 4)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 5, template_var 4)),
                template_app (template_hole 4, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 5, template_var 3)),
                template_app (template_hole 4, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 0)),
               template_var 2))
           ))),
    ("FSM_Product.sequence_to_failure_reaches_FAIL_ob",
     "[| sequence_to_failure ?M1.0 ?M2.0 ?io; OFSM ?M1.0; OFSM ?M2.0;
         productF ?M2.0 ?M1.0 ?FAIL ?PM |]
      ==> io_targets ?PM (initial ?PM) ?io = {?FAIL}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 4)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 7, template_var 4)),
                template_app (template_hole 6, template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 3)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 7, template_var 3)),
                template_app (template_hole 6, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 4),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 2, template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("FSM_Product.fail_reachable_ob",
     "[| ~ ?M1.0 \<preceq> ?M2.0; well_formed ?M1.0; well_formed ?M2.0;
         observable ?M2.0; productF ?M2.0 ?M1.0 ?FAIL ?PM;
         !!p. [| path ?PM p (initial ?PM); target p (initial ?PM) = ?FAIL |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)
                )
            ),
        template_predicate (template_app (template_hole 8, template_var 4)),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_predicate (template_app (template_hole 7, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 4),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0))),
    ("FSM_Product.fail_reachable_by_sequence_to_failure",
     "[| sequence_to_failure ?M1.0 ?M2.0 ?io; well_formed ?M1.0;
         well_formed ?M2.0; productF ?M2.0 ?M1.0 ?FAIL ?PM;
         !!p. path ?PM (?io || p) (initial ?PM) &
              length p = length ?io &
              target (?io || p) (initial ?PM) = ?FAIL ==>
              ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 5)),
        template_predicate
         (template_app (template_hole 12, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 4),
                  template_var 5),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_var 0))),
    ("FSM_Product.reaching_path_fail_length",
     "[| productF ?A ?B ?FAIL ?AB; well_formed ?A; well_formed ?B;
         ?q2.0 : reachable ?AB ?q1.0; ?q1.0 : nodes ?AB |]
      ==> EX p. path ?AB p ?q1.0 &
                target p ?q1.0 = ?q2.0 & length p <= |?A| * |?B|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 17, template_var 5)),
        template_predicate
         (template_app (template_hole 16, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app
               (template_app (template_hole 14, template_var 2),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_app (template_hole 13, template_var 2))
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("FSM_Product.reaching_path_length",
     "[| productF ?A ?B ?FAIL ?AB; well_formed ?A; well_formed ?B;
         ?q2.0 : reachable ?AB ?q1.0; ?q2.0 ~= ?FAIL; ?q1.0 : nodes ?AB |]
      ==> EX p. path ?AB p ?q1.0 &
                target p ?q1.0 = ?q2.0 & length p < |?A| * |?B|",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 19, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 18, template_var 5)),
        template_predicate
         (template_app (template_hole 17, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_app
               (template_app (template_hole 15, template_var 2),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 0),
              template_app (template_hole 12, template_var 2))
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("FSM_Product.productF_path_inclusion",
     "[| length ?w = length ?r1.0; length ?r1.0 = length ?r2.0;
         productF ?A ?B ?FAIL ?AB; well_formed ?A; well_formed ?B;
         path ?A (?w || ?r1.0) ?p1.0 & path ?B (?w || ?r2.0) ?p2.0;
         ?p1.0 : nodes ?A; ?p2.0 : nodes ?B |]
      ==> path ?AB (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0)",
     template_implication
      ([template_equation
         (template_app (template_hole 18, template_var 8),
          template_app (template_hole 17, template_var 7)),
        template_equation
         (template_app (template_hole 17, template_var 7),
          template_app (template_hole 16, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 5)),
        template_predicate
         (template_app (template_hole 13, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 5),
                    template_app
                     (template_app (template_hole 10, template_var 8),
                      template_var 7)),
                  template_var 1)),
              template_app
               (template_app
                 (template_app (template_hole 9, template_var 4),
                  template_app
                   (template_app (template_hole 8, template_var 8),
                    template_var 6)),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_var 8),
                 template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 6))),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FSM_Product.productF_simps",
     "productF ?A ?B ?FAIL ?AB ==>
      succ ?AB ?a (?p1.0, ?p2.0) =
      (if ?p1.0 : nodes ?A &
          ?p2.0 : nodes ?B &
          fst ?a : inputs ?A & snd ?a : outputs ?A Un outputs ?B
       then if succ ?A ?a ?p1.0 = {} & succ ?B ?a ?p2.0 ~= {} then {?FAIL}
            else succ ?A ?a ?p1.0 \<times> succ ?B ?a ?p2.0
       else {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 27, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 25, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 24, template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 23,
                   template_app
                    (template_app
                      (template_hole 22,
                       template_app
                        (template_app (template_hole 21, template_var 1),
                         template_app (template_hole 20, template_var 6))),
                     template_app
                      (template_app
                        (template_hole 22,
                         template_app
                          (template_app (template_hole 19, template_var 0),
                           template_app
                            (template_hole 18, template_var 5))),
                       template_app
                        (template_app
                          (template_hole 22,
                           template_app
                            (template_app
                              (template_hole 17,
                               template_app
                                (template_hole 16, template_var 2)),
                             template_app
                              (template_hole 15, template_var 6))),
                         template_app
                          (template_app
                            (template_hole 14,
                             template_app
                              (template_hole 13, template_var 2)),
                           template_app
                            (template_app
                              (template_hole 12,
                               template_app
                                (template_hole 11, template_var 6)),
                             template_app
                              (template_hole 10, template_var 5))))))),
                 template_app
                  (template_app
                    (template_app
                      (template_hole 23,
                       template_app
                        (template_app
                          (template_hole 22,
                           template_app
                            (template_app
                              (template_hole 9,
                               template_app
                                (template_app
                                  (template_app
                                    (template_hole 8, template_var 6),
                                   template_var 2),
                                 template_var 1)),
                             template_hole 7)),
                         template_app
                          (template_hole 6,
                           template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_app
                                  (template_app
                                    (template_hole 4, template_var 5),
                                   template_var 2),
                                 template_var 0)),
                             template_hole 3)))),
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_hole 1)),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app
                        (template_app
                          (template_app (template_hole 8, template_var 6),
                           template_var 2),
                         template_var 1)),
                     t_empty))),
               template_hole 1)
             )))),
    ("FSM_Product.productF_path_io_targets",
     "[| productF ?A ?B ?FAIL ?AB;
         io_targets ?AB (?qA, ?qB) ?w = {(?pA, ?pB)}; ?w : LS ?A ?qA;
         ?w : LS ?B ?qB; observable ?A; observable ?B; well_formed ?A;
         well_formed ?B; ?qA : nodes ?A; ?qB : nodes ?B |]
      ==> ?pA : io_targets ?A ?qA ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 17, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 15, template_var 5),
              template_app
               (template_app (template_hole 14, template_var 4),
                template_var 3)),
            template_var 2),
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 14, template_var 1),
                template_var 0)),
            template_hole 12)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 8),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 9, template_var 7),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 8, template_var 8)),
        template_predicate (template_app (template_hole 7, template_var 7)),
        template_predicate (template_app (template_hole 6, template_var 8)),
        template_predicate (template_app (template_hole 5, template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app (template_hole 3, template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 1, template_var 7))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 8),
                 template_var 4),
               template_var 2))
           ))),
    ("FSM_Product.productF_path_io_targets",
     "[| productF ?A ?B ?FAIL ?AB;
         io_targets ?AB (?qA, ?qB) ?w = {(?pA, ?pB)}; ?w : LS ?A ?qA;
         ?w : LS ?B ?qB; observable ?A; observable ?B; well_formed ?A;
         well_formed ?B; ?qA : nodes ?A; ?qB : nodes ?B |]
      ==> ?pB : io_targets ?B ?qB ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 17, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 15, template_var 5),
              template_app
               (template_app (template_hole 14, template_var 4),
                template_var 3)),
            template_var 2),
          template_app
           (template_app
             (template_hole 13,
              template_app
               (template_app (template_hole 14, template_var 1),
                template_var 0)),
            template_hole 12)),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 8),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 9, template_var 7),
                template_var 3))
            ),
        template_predicate (template_app (template_hole 8, template_var 8)),
        template_predicate (template_app (template_hole 7, template_var 7)),
        template_predicate (template_app (template_hole 6, template_var 8)),
        template_predicate (template_app (template_hole 5, template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app (template_hole 3, template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app (template_hole 1, template_var 7))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 7),
                 template_var 3),
               template_var 2))
           ))),
    ("FSM_Product.productF_path_reverse_ob",
     "[| length ?w = length ?r1.0; length ?r1.0 = length ?r2.0;
         productF ?A ?B ?FAIL ?AB; well_formed ?A; well_formed ?B;
         path ?AB (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0); ?p1.0 : nodes ?A;
         ?p2.0 : nodes ?B;
         !!r2'.
            path ?B (?w || r2') ?p2.0 & length ?w = length r2' ==>
            ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app (template_hole 17, template_var 9),
          template_app (template_hole 16, template_var 8)),
        template_equation
         (template_app (template_hole 16, template_var 8),
          template_app (template_hole 15, template_var 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (template_app (template_hole 13, template_var 6)),
        template_predicate
         (template_app (template_hole 12, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 3),
                template_app
                 (template_app (template_hole 10, template_var 9),
                  template_app
                   (template_app (template_hole 9, template_var 8),
                    template_var 7))),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 5))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("FSM_Product.productF_succ_fail_imp",
     "[| productF ?A ?B ?FAIL ?AB; ?FAIL : succ ?AB ?w (?p1.0, ?p2.0);
         well_formed ?A; well_formed ?B |]
      ==> ?p1.0 : nodes ?A &
          ?p2.0 : nodes ?B &
          fst ?w : inputs ?A &
          snd ?w : outputs ?A Un outputs ?B &
          succ ?AB ?w (?p1.0, ?p2.0) = {?FAIL} &
          succ ?A ?w ?p1.0 = {} & succ ?B ?w ?p2.0 ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 28, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 26, template_var 3),
                  template_var 2),
                template_app
                 (template_app (template_hole 25, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (template_app (template_hole 24, template_var 6)),
        template_predicate
         (template_app (template_hole 23, template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 22,
               template_app
                (template_app (template_hole 21, template_var 1),
                 template_app (template_hole 20, template_var 6))),
             template_app
              (template_app
                (template_hole 22,
                 template_app
                  (template_app (template_hole 19, template_var 0),
                   template_app (template_hole 18, template_var 5))),
               template_app
                (template_app
                  (template_hole 22,
                   template_app
                    (template_app
                      (template_hole 17,
                       template_app (template_hole 16, template_var 2)),
                     template_app (template_hole 15, template_var 6))),
                 template_app
                  (template_app
                    (template_hole 22,
                     template_app
                      (template_app
                        (template_hole 14,
                         template_app (template_hole 13, template_var 2)),
                       template_app
                        (template_app
                          (template_hole 12,
                           template_app (template_hole 11, template_var 6)),
                         template_app (template_hole 10, template_var 5)))),
                   template_app
                    (template_app
                      (template_hole 22,
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 26, template_var 3),
                               template_var 2),
                             template_app
                              (template_app
                                (template_hole 25, template_var 1),
                               template_var 0))),
                         template_app
                          (template_app (template_hole 8, template_var 4),
                           template_hole 7))),
                     template_app
                      (template_app
                        (template_hole 22,
                         template_app
                          (template_app
                            (template_hole 6,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 5, template_var 6),
                                 template_var 2),
                               template_var 1)),
                           template_hole 4)),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_app
                            (template_hole 2,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 1, template_var 5),
                                 template_var 2),
                               template_var 0)),
                           template_hole 0))))))))
           ))),
    ("FSM_Product.productF_path_reverse_ob_2",
     "[| length ?w = length ?r1.0; length ?r1.0 = length ?r2.0;
         productF ?A ?B ?FAIL ?AB; well_formed ?A; well_formed ?B;
         path ?AB (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0); ?p1.0 : nodes ?A;
         ?p2.0 : nodes ?B; ?w : LS ?A ?p1.0; observable ?A |]
      ==> path ?A (?w || ?r1.0) ?p1.0 & length ?w = length ?r1.0",
     template_implication
      ([template_equation
         (template_app (template_hole 19, template_var 8),
          template_app (template_hole 18, template_var 7)),
        template_equation
         (template_app (template_hole 18, template_var 7),
          template_app (template_hole 17, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 15, template_var 5)),
        template_predicate
         (template_app (template_hole 14, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_app
                 (template_app (template_hole 12, template_var 8),
                  template_app
                   (template_app (template_hole 11, template_var 7),
                    template_var 6))),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 8),
              template_app
               (template_app (template_hole 4, template_var 5),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 8),
                     template_var 7)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 20,
                 template_app (template_hole 19, template_var 8)),
               template_app (template_hole 18, template_var 7)))
           ))),
    ("FSM_Product.productF_path_reverse_ob_2",
     "[| length ?w = length ?r1.0; length ?r1.0 = length ?r2.0;
         productF ?A ?B ?FAIL ?AB; well_formed ?A; well_formed ?B;
         path ?AB (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0); ?p1.0 : nodes ?A;
         ?p2.0 : nodes ?B; ?w : LS ?A ?p1.0; observable ?A |]
      ==> path ?B (?w || ?r2.0) ?p2.0 & length ?w = length ?r2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 19, template_var 8),
          template_app (template_hole 18, template_var 7)),
        template_equation
         (template_app (template_hole 18, template_var 7),
          template_app (template_hole 17, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 16, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 15, template_var 5)),
        template_predicate
         (template_app (template_hole 14, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 2),
                template_app
                 (template_app (template_hole 12, template_var 8),
                  template_app
                   (template_app (template_hole 11, template_var 7),
                    template_var 6))),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 8),
              template_app
               (template_app (template_hole 4, template_var 5),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app
                    (template_app (template_hole 0, template_var 8),
                     template_var 6)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 20,
                 template_app (template_hole 19, template_var 8)),
               template_app (template_hole 17, template_var 6)))
           ))),
    ("FSM_Product.productF_path_io_targets_reverse",
     "[| productF ?A ?B ?FAIL ?AB; ?pA : io_targets ?A ?qA ?w;
         ?pB : io_targets ?B ?qB ?w; ?w : LS ?A ?qA; ?w : LS ?B ?qB;
         observable ?A; observable ?B; well_formed ?A; well_formed ?B;
         ?qA : nodes ?A; ?qB : nodes ?B |]
      ==> io_targets ?AB (?qA, ?qB) ?w = {(?pA, ?pB)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 4),
              template_app
               (template_app
                 (template_app (template_hole 16, template_var 8),
                  template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 14, template_var 7),
                  template_var 0),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 12, template_var 8),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_app
               (template_app (template_hole 11, template_var 7),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 10, template_var 8)),
        template_predicate (template_app (template_hole 9, template_var 7)),
        template_predicate (template_app (template_hole 8, template_var 8)),
        template_predicate (template_app (template_hole 7, template_var 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 3),
              template_app (template_hole 6, template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 0),
              template_app (template_hole 5, template_var 7))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 4),
               template_var 1)),
           template_hole 0)))),
    ("FSM_Product.productF_language_state_intermediate",
     "[| ?vs @ ?xs : L ?M2.0 Int L ?M1.0; productF ?M2.0 ?M1.0 ?FAIL ?PM;
         observable ?M2.0; well_formed ?M2.0; observable ?M1.0;
         well_formed ?M1.0;
         !!q2 q1 tr.
            [| io_targets ?PM (initial ?PM) ?vs = {(q2, q1)};
               path ?PM (?xs || tr) (q2, q1); length ?xs = length tr |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app (template_hole 24, template_var 6),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 23,
                  template_app
                   (template_app (template_hole 22, template_var 4),
                    template_app (template_hole 21, template_var 4))),
                template_app
                 (template_app (template_hole 20, template_var 3),
                  template_app (template_hole 19, template_var 3))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 18, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 17, template_var 4)),
        template_predicate
         (template_app (template_hole 16, template_var 4)),
        template_predicate
         (template_app (template_hole 15, template_var 3)),
        template_predicate
         (template_app (template_hole 14, template_var 3)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_var 0))),
    ("FSM_Product.productF_path_reverse_ob_2",
     "[| length ?w = length ?r1.0; length ?r1.0 = length ?r2.0;
         productF ?A ?B ?FAIL ?AB; well_formed ?A; well_formed ?B;
         path ?AB (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0); ?p1.0 : nodes ?A;
         ?p2.0 : nodes ?B; ?w : LS ?A ?p1.0; observable ?A |]
      ==> target (?w || ?r1.0) ?p1.0 =
          fst (target (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0))",
     template_implication
      ([template_equation
         (template_app (template_hole 23, template_var 8),
          template_app (template_hole 22, template_var 7)),
        template_equation
         (template_app (template_hole 22, template_var 7),
          template_app (template_hole 21, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 20, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 19, template_var 5)),
        template_predicate
         (template_app (template_hole 18, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 2),
                template_app
                 (template_app (template_hole 16, template_var 8),
                  template_app
                   (template_app (template_hole 15, template_var 7),
                    template_var 6))),
              template_app
               (template_app (template_hole 14, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app (template_hole 12, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 8),
              template_app
               (template_app (template_hole 8, template_var 5),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 7, template_var 5))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app (template_hole 3, template_var 8),
               template_var 7)),
           template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_app (template_hole 16, template_var 8),
                 template_app
                  (template_app (template_hole 15, template_var 7),
                   template_var 6))),
             template_app
              (template_app (template_hole 14, template_var 1),
               template_var 0)))))),
    ("FSM_Product.productF_path_reverse_ob_2",
     "[| length ?w = length ?r1.0; length ?r1.0 = length ?r2.0;
         productF ?A ?B ?FAIL ?AB; well_formed ?A; well_formed ?B;
         path ?AB (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0); ?p1.0 : nodes ?A;
         ?p2.0 : nodes ?B; ?w : LS ?A ?p1.0; observable ?A |]
      ==> target (?w || ?r2.0) ?p2.0 =
          snd (target (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0))",
     template_implication
      ([template_equation
         (template_app (template_hole 23, template_var 8),
          template_app (template_hole 22, template_var 7)),
        template_equation
         (template_app (template_hole 22, template_var 7),
          template_app (template_hole 21, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 20, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 19, template_var 5)),
        template_predicate
         (template_app (template_hole 18, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 17, template_var 2),
                template_app
                 (template_app (template_hole 16, template_var 8),
                  template_app
                   (template_app (template_hole 15, template_var 7),
                    template_var 6))),
              template_app
               (template_app (template_hole 14, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app (template_hole 12, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app (template_hole 10, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 8),
              template_app
               (template_app (template_hole 8, template_var 5),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 7, template_var 5))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app (template_hole 3, template_var 8),
               template_var 6)),
           template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_app (template_hole 16, template_var 8),
                 template_app
                  (template_app (template_hole 15, template_var 7),
                   template_var 6))),
             template_app
              (template_app (template_hole 14, template_var 1),
               template_var 0)))))),
    ("FSM_Product.productF_path",
     "[| length ?w = length ?r1.0; length ?r1.0 = length ?r2.0;
         productF ?A ?B ?FAIL ?AB; well_formed ?A; well_formed ?B;
         ?p1.0 : nodes ?A; ?p2.0 : nodes ?B |]
      ==> path ?AB (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0) =
          (path ?A (?w || ?r1.0) ?p1.0 & path ?B (?w || ?r2.0) ?p2.0 |
           target (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0) = ?FAIL &
           0 < length ?w &
           path ?A (butlast (?w || ?r1.0)) ?p1.0 &
           path ?B (butlast (?w || ?r2.0)) ?p2.0 &
           succ ?A (last ?w) (target (butlast (?w || ?r1.0)) ?p1.0) = {} &
           succ ?B (last ?w) (target (butlast (?w || ?r2.0)) ?p2.0) ~= {})",
     template_implication
      ([template_equation
         (template_app (template_hole 39, template_var 8),
          template_app (template_hole 38, template_var 7)),
        template_equation
         (template_app (template_hole 38, template_var 7),
          template_app (template_hole 37, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 36, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 35, template_var 5)),
        template_predicate
         (template_app (template_hole 34, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 33, template_var 1),
              template_app (template_hole 32, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 31, template_var 0),
              template_app (template_hole 30, template_var 4))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 28, template_var 2),
                  template_app
                   (template_app (template_hole 27, template_var 8),
                    template_app
                     (template_app (template_hole 26, template_var 7),
                      template_var 6))),
                template_app
                 (template_app (template_hole 25, template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 24,
                 template_app
                  (template_app
                    (template_hole 23,
                     template_app
                      (template_app
                        (template_app (template_hole 22, template_var 5),
                         template_app
                          (template_app (template_hole 21, template_var 8),
                           template_var 7)),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_app (template_hole 20, template_var 4),
                       template_app
                        (template_app (template_hole 19, template_var 8),
                         template_var 6)),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 23,
                   template_app
                    (template_app
                      (template_hole 18,
                       template_app
                        (template_app
                          (template_app (template_hole 17, t_empty),
                           template_app
                            (template_app
                              (template_hole 27, template_var 8),
                             template_app
                              (template_app
                                (template_hole 26, template_var 7),
                               template_var 6))),
                         template_app
                          (template_app (template_hole 25, template_var 1),
                           template_var 0))),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 23,
                     template_app
                      (template_app (template_hole 15, template_hole 14),
                       template_app (template_hole 39, template_var 8))),
                   template_app
                    (template_app
                      (template_hole 23,
                       template_app
                        (template_app
                          (template_app (template_hole 22, template_var 5),
                           template_app
                            (template_hole 13,
                             template_app
                              (template_app
                                (template_hole 21, template_var 8),
                               template_var 7))),
                         template_var 1)),
                     template_app
                      (template_app
                        (template_hole 23,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 20, template_var 4),
                             template_app
                              (template_hole 12,
                               template_app
                                (template_app
                                  (template_hole 19, template_var 8),
                                 template_var 6))),
                           template_var 0)),
                       template_app
                        (template_app
                          (template_hole 23,
                           template_app
                            (template_app
                              (template_hole 11,
                               template_app
                                (template_app
                                  (template_app
                                    (template_hole 10, template_var 5),
                                   template_app
                                    (template_hole 9, template_var 8)),
                                 template_app
                                  (template_app
                                    (template_app
(template_hole 8, t_empty),
                                     template_app
(template_hole 13,
 template_app
  (template_app (template_hole 21, template_var 8), template_var 7))),
                                   template_var 1))),
                             template_hole 6)),
                         template_app
                          (template_hole 5,
                           template_app
                            (template_app
                              (template_hole 4,
                               template_app
                                (template_app
                                  (template_app
                                    (template_hole 3, template_var 4),
                                   template_app
                                    (template_hole 9, template_var 8)),
                                 template_app
                                  (template_app
                                    (template_app
(template_hole 2, t_empty),
                                     template_app
(template_hole 12,
 template_app
  (template_app (template_hole 19, template_var 8), template_var 6))),
                                   template_var 0))),
                             template_hole 0))))))))
             )))),
    ("FSM_Product.productF_path_reverse",
     "[| length ?w = length ?r1.0; length ?r1.0 = length ?r2.0;
         productF ?A ?B ?FAIL ?AB; well_formed ?A; well_formed ?B;
         path ?AB (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0); ?p1.0 : nodes ?A;
         ?p2.0 : nodes ?B |]
      ==> path ?A (?w || ?r1.0) ?p1.0 & path ?B (?w || ?r2.0) ?p2.0 |
          target (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0) = ?FAIL &
          0 < length ?w &
          path ?A (butlast (?w || ?r1.0)) ?p1.0 &
          path ?B (butlast (?w || ?r2.0)) ?p2.0 &
          succ ?A (last ?w) (target (butlast (?w || ?r1.0)) ?p1.0) = {} &
          succ ?B (last ?w) (target (butlast (?w || ?r2.0)) ?p2.0) ~= {}",
     template_implication
      ([template_equation
         (template_app (template_hole 38, template_var 8),
          template_app (template_hole 37, template_var 7)),
        template_equation
         (template_app (template_hole 37, template_var 7),
          template_app (template_hole 36, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 35, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 34, template_var 5)),
        template_predicate
         (template_app (template_hole 33, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 32, template_var 2),
                template_app
                 (template_app (template_hole 31, template_var 8),
                  template_app
                   (template_app (template_hole 30, template_var 7),
                    template_var 6))),
              template_app
               (template_app (template_hole 29, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 28, template_var 1),
              template_app (template_hole 27, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 26, template_var 0),
              template_app (template_hole 25, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 24,
               template_app
                (template_app
                  (template_hole 23,
                   template_app
                    (template_app
                      (template_app (template_hole 22, template_var 5),
                       template_app
                        (template_app (template_hole 21, template_var 8),
                         template_var 7)),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_app (template_hole 20, template_var 4),
                     template_app
                      (template_app (template_hole 19, template_var 8),
                       template_var 6)),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 23,
                 template_app
                  (template_app
                    (template_hole 18,
                     template_app
                      (template_app
                        (template_app (template_hole 17, t_empty),
                         template_app
                          (template_app (template_hole 31, template_var 8),
                           template_app
                            (template_app
                              (template_hole 30, template_var 7),
                             template_var 6))),
                       template_app
                        (template_app (template_hole 29, template_var 1),
                         template_var 0))),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 23,
                   template_app
                    (template_app (template_hole 15, template_hole 14),
                     template_app (template_hole 38, template_var 8))),
                 template_app
                  (template_app
                    (template_hole 23,
                     template_app
                      (template_app
                        (template_app (template_hole 22, template_var 5),
                         template_app
                          (template_hole 13,
                           template_app
                            (template_app
                              (template_hole 21, template_var 8),
                             template_var 7))),
                       template_var 1)),
                   template_app
                    (template_app
                      (template_hole 23,
                       template_app
                        (template_app
                          (template_app (template_hole 20, template_var 4),
                           template_app
                            (template_hole 12,
                             template_app
                              (template_app
                                (template_hole 19, template_var 8),
                               template_var 6))),
                         template_var 0)),
                     template_app
                      (template_app
                        (template_hole 23,
                         template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 10, template_var 5),
                                 template_app
                                  (template_hole 9, template_var 8)),
                               template_app
                                (template_app
                                  (template_app (template_hole 8, t_empty),
                                   template_app
                                    (template_hole 13,
                                     template_app
(template_app (template_hole 21, template_var 8), template_var 7))),
                                 template_var 1))),
                           template_hole 6)),
                       template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 4,
                             template_app
                              (template_app
                                (template_app
                                  (template_hole 3, template_var 4),
                                 template_app
                                  (template_hole 9, template_var 8)),
                               template_app
                                (template_app
                                  (template_app (template_hole 2, t_empty),
                                   template_app
                                    (template_hole 12,
                                     template_app
(template_app (template_hole 19, template_var 8), template_var 6))),
                                 template_var 0))),
                           template_hole 0))))))))
           ))),
    ("FSM_Product.productF_path_forward",
     "[| length ?w = length ?r1.0; length ?r1.0 = length ?r2.0;
         productF ?A ?B ?FAIL ?AB; well_formed ?A; well_formed ?B;
         path ?A (?w || ?r1.0) ?p1.0 & path ?B (?w || ?r2.0) ?p2.0 |
         target (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0) = ?FAIL &
         0 < length ?w &
         path ?A (butlast (?w || ?r1.0)) ?p1.0 &
         path ?B (butlast (?w || ?r2.0)) ?p2.0 &
         succ ?A (last ?w) (target (butlast (?w || ?r1.0)) ?p1.0) = {} &
         succ ?B (last ?w) (target (butlast (?w || ?r2.0)) ?p2.0) ~= {};
         ?p1.0 : nodes ?A; ?p2.0 : nodes ?B |]
      ==> path ?AB (?w || ?r1.0 || ?r2.0) (?p1.0, ?p2.0)",
     template_implication
      ([template_equation
         (template_app (template_hole 38, template_var 8),
          template_app (template_hole 37, template_var 7)),
        template_equation
         (template_app (template_hole 37, template_var 7),
          template_app (template_hole 36, template_var 6)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 35, template_var 5),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 34, template_var 5)),
        template_predicate
         (template_app (template_hole 33, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 32,
                template_app
                 (template_app
                   (template_hole 31,
                    template_app
                     (template_app
                       (template_app (template_hole 30, template_var 5),
                        template_app
                         (template_app (template_hole 29, template_var 8),
                          template_var 7)),
                      template_var 1)),
                  template_app
                   (template_app
                     (template_app (template_hole 28, template_var 4),
                      template_app
                       (template_app (template_hole 27, template_var 8),
                        template_var 6)),
                    template_var 0))),
              template_app
               (template_app
                 (template_hole 31,
                  template_app
                   (template_app
                     (template_hole 26,
                      template_app
                       (template_app
                         (template_app (template_hole 25, t_empty),
                          template_app
                           (template_app (template_hole 23, template_var 8),
                            template_app
                             (template_app
                               (template_hole 22, template_var 7),
                              template_var 6))),
                        template_app
                         (template_app (template_hole 21, template_var 1),
                          template_var 0))),
                    template_var 3)),
                template_app
                 (template_app
                   (template_hole 31,
                    template_app
                     (template_app (template_hole 20, template_hole 19),
                      template_app (template_hole 38, template_var 8))),
                  template_app
                   (template_app
                     (template_hole 31,
                      template_app
                       (template_app
                         (template_app (template_hole 30, template_var 5),
                          template_app
                           (template_hole 18,
                            template_app
                             (template_app
                               (template_hole 29, template_var 8),
                              template_var 7))),
                        template_var 1)),
                    template_app
                     (template_app
                       (template_hole 31,
                        template_app
                         (template_app
                           (template_app (template_hole 28, template_var 4),
                            template_app
                             (template_hole 17,
                              template_app
                               (template_app
                                 (template_hole 27, template_var 8),
                                template_var 6))),
                          template_var 0)),
                      template_app
                       (template_app
                         (template_hole 31,
                          template_app
                           (template_app
                             (template_hole 16,
                              template_app
                               (template_app
                                 (template_app
                                   (template_hole 15, template_var 5),
                                  template_app
                                   (template_hole 14, template_var 8)),
                                template_app
                                 (template_app
                                   (template_app
                                     (template_hole 13, t_empty),
                                    template_app
                                     (template_hole 18,
template_app
 (template_app (template_hole 29, template_var 8), template_var 7))),
                                  template_var 1))),
                            template_hole 11)),
                        template_app
                         (template_hole 10,
                          template_app
                           (template_app
                             (template_hole 9,
                              template_app
                               (template_app
                                 (template_app
                                   (template_hole 8, template_var 4),
                                  template_app
                                   (template_hole 14, template_var 8)),
                                template_app
                                 (template_app
                                   (template_app (template_hole 7, t_empty),
                                    template_app
                                     (template_hole 17,
template_app
 (template_app (template_hole 27, template_var 8), template_var 6))),
                                  template_var 0))),
                            template_hole 5))))))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app (template_hole 23, template_var 8),
                 template_app
                  (template_app (template_hole 22, template_var 7),
                   template_var 6))),
             template_app
              (template_app (template_hole 21, template_var 1),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.FSM_ProductMoreTemplates"
### 0.926s elapsed time, 2.102s cpu time, 1.412s GC time
val it = (): unit
