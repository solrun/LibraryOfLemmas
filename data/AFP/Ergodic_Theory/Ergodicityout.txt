Loading theory "Draft.SG_Library_Complement" (required by "Draft.ErgodicityTemplates" via "Draft.Ergodicity" via "Draft.Invariants" via "Draft.Recurrence" via "Draft.Measure_Preserving_Transformations")
Loading theory "Draft.Templates" (required by "Draft.ErgodicityTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ErgodicityTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.073s elapsed time, 0.250s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.128s elapsed time, 0.374s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ErgodicityTemplates" via "Draft.ExtrEqs")
### Ignoring duplicate rewrite rule:
### ?x1 + \<top> == \<top>
locale finite_borel_measure'
  fixes M :: "'a measure"
  assumes "finite_borel_measure' M"
### theory "Draft.SG_Library_Complement"
### 0.477s elapsed time, 1.078s cpu time, 0.133s GC time
Loading theory "Draft.Measure_Preserving_Transformations" (required by "Draft.ErgodicityTemplates" via "Draft.Ergodicity" via "Draft.Invariants" via "Draft.Recurrence")
locale qmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "qmpt M T"
locale mpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "mpt M T"
locale fmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "fmpt M T"
locale pmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "pmpt M T"
### theory "HOL-Library.BigO"
### 0.632s elapsed time, 1.330s cpu time, 0.157s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ErgodicityTemplates")
locale qmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "qmpt M T"
locale mpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "mpt M T"
locale qmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "qmpt M T"
locale qmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "qmpt M T"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.521s elapsed time, 1.082s cpu time, 0.130s GC time
locale polish_pmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "polish_pmpt M T"
### theory "Draft.Measure_Preserving_Transformations"
### 0.875s elapsed time, 1.741s cpu time, 0.206s GC time
Loading theory "Draft.Recurrence" (required by "Draft.ErgodicityTemplates" via "Draft.Ergodicity" via "Draft.Invariants")
locale conservative
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "conservative M T"
locale conservative_mpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "conservative_mpt M T"
locale qmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "qmpt M T"
locale conservative_mpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "conservative_mpt M T"
### theory "Draft.Recurrence"
### 0.844s elapsed time, 1.222s cpu time, 0.545s GC time
Loading theory "Draft.Invariants" (required by "Draft.ErgodicityTemplates" via "Draft.Ergodicity")
locale qmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "qmpt M T"
locale fmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "fmpt M T"
locale fmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "fmpt M T"
### theory "Draft.Invariants"
### 0.378s elapsed time, 0.439s cpu time, 0.087s GC time
Loading theory "Draft.Ergodicity" (required by "Draft.ErgodicityTemplates")
locale ergodic_qmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "ergodic_qmpt M T"
locale ergodic_mpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "ergodic_mpt M T"
locale ergodic_fmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "ergodic_fmpt M T"
locale ergodic_pmpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "ergodic_pmpt M T"
locale ergodic_conservative
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "ergodic_conservative M T"
locale ergodic_conservative_mpt
  fixes M :: "'a measure"
    and T :: "'a => 'a"
  assumes "ergodic_conservative_mpt M T"
### theory "Draft.Ergodicity"
### 0.595s elapsed time, 0.668s cpu time, 0.103s GC time
Loading theory "Draft.ErgodicityTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ErgodicityTemplates"
### 1.373s elapsed time, 2.191s cpu time, 0.888s GC time
val it = (): unit
