   [("Recurrence.conservativeI3",
     "[| qmpt ?M ?T;
         !!A. [| A : sets ?M; ALL n>0. (?T ^^ n) -` A Int A = {} |]
              ==> A : null_sets ?M |]
      ==> conservative ?M ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Recurrence.conservative_mptI",
     "[| mpt ?M ?T;
         !!A. [| A : sets ?M; 0 < emeasure ?M A |]
              ==> EX n>0. (?T ^^ n) -` A Int A ~= {} |]
      ==> conservative_mpt ?M ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Recurrence.conservativeI2",
     "[| qmpt ?M ?T;
         !!A. [| A : sets ?M; 0 < emeasure ?M A |]
              ==> EX n>0. (?T ^^ n) -` A Int A ~= {} |]
      ==> conservative ?M ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Recurrence.conservativeI",
     "[| qmpt ?M ?T;
         !!A. [| A : sets ?M; 0 < emeasure ?M A |]
              ==> EX n>0. 0 < emeasure ?M ((?T ^^ n) -` A Int A) |]
      ==> conservative ?M ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]
