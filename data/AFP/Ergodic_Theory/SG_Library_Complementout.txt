Loading theory "Draft.SG_Library_Complement" (required by "Draft.SG_Library_ComplementTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SG_Library_ComplementTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.SG_Library_ComplementTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.246s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.406s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SG_Library_ComplementTemplates" via "Draft.ExtrEqs")
### Ignoring duplicate rewrite rule:
### ?x1 + \<top> == \<top>
locale finite_borel_measure'
  fixes M :: "'a measure"
  assumes "finite_borel_measure' M"
### theory "Draft.SG_Library_Complement"
### 0.493s elapsed time, 1.101s cpu time, 0.131s GC time
### theory "HOL-Library.BigO"
### 0.603s elapsed time, 0.998s cpu time, 0.081s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SG_Library_ComplementTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.487s elapsed time, 0.536s cpu time, 0.072s GC time
Loading theory "Draft.SG_Library_ComplementTemplates"
val templateLemmas =
   [("SG_Library_Complement.subalgebra_M_M", "subalgebra ?M ?M",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("SG_Library_Complement.x_plus_top_ennreal", "?x + \<top> = \<top>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("SG_Library_Complement.compl_compl_eq_id", "UNIV - (UNIV - ?s) = ?s",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("SG_Library_Complement.open_less_abs", "open {x. ?C < \<bar>x\<bar>}",
     template_predicate
      (
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))
         )),
    ("SG_Library_Complement.closed_le_abs",
     "closed {x. ?C <= \<bar>x\<bar>}",
     template_predicate
      (
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))
         )),
    ("SG_Library_Complement.measurable_infdist",
     "(%x. infdist x ?S) : borel_measurable borel",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))
         )),
    ("SG_Library_Complement.ennreal_ge_nat_imp_PInf",
     "(!!N. of_nat N <= ?x) ==> ?x = \<infinity>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("SG_Library_Complement.continuous_abs_powr",
     "0 < ?p ==> continuous_on UNIV (%x. \<bar>x\<bar> powr ?p)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2), t_empty)
           ))),
    ("SG_Library_Complement.convex_abs_powr",
     "1 <= ?p ==> convex_on UNIV (%x. \<bar>x\<bar> powr ?p)",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2), t_empty)
           ))),
    ("SG_Library_Complement.convex_powr",
     "1 <= ?p ==> convex_on {0..} (%x. x powr ?p)",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)),
             t_empty)
           ))),
    ("SG_Library_Complement.continuous_on_const_minus_ennreal",
     "continuous_on ?A ?f ==> continuous_on ?A (%x. ?a - ?f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), t_empty)
           ))),
    ("SG_Library_Complement.ennreal_archimedean",
     "?x ~= \<infinity> ==> EX x. ?x <= of_nat x",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("SG_Library_Complement.e2ennreal_eq_infty",
     "0 <= ?x ==> (e2ennreal ?x = \<top>) = (?x = \<infinity>)",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 0)],
       template_bimplication
        (template_equation
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_equation (template_var 0, template_hole 0)))),
    ("SG_Library_Complement.funpow_add'",
     "(?f ^^ (?m + ?n)) ?x = (?f ^^ ?m) ((?f ^^ ?n) ?x)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("SG_Library_Complement.disjoint_family_indicator_le_1",
     "disjoint_family_on ?A ?I ==>
      (SUM i:?I. indicator (?A i) ?x) <= (1::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, t_empty), template_var 1),
         template_hole 0))),
    ("SG_Library_Complement.e2ennreal_mult",
     "0 <= ?a ==> e2ennreal (?a * ?b) = e2ennreal ?a * e2ennreal ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("SG_Library_Complement.e2ennreal_mult'",
     "0 <= ?b ==> e2ennreal (?a * ?b) = e2ennreal ?a * e2ennreal ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("SG_Library_Complement.algebra_intersection",
     "[| algebra ?\<Omega> ?A; algebra ?\<Omega> ?B |]
      ==> algebra ?\<Omega> (?A Int ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SG_Library_Complement.sigma_algebra_intersection",
     "[| sigma_algebra ?\<Omega> ?A; sigma_algebra ?\<Omega> ?B |]
      ==> sigma_algebra ?\<Omega> (?A Int ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("SG_Library_Complement.weak_conv_m_subseq",
     "[| weak_conv_m ?M_seq ?M; strict_mono ?r |]
      ==> weak_conv_m (%n. ?M_seq (?r n)) ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)
           ))),
    ("SG_Library_Complement.union_insert_0",
     "\<Union> (range ?A) = ?A 0 Un \<Union> (?A ` {1..})",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, t_empty), template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_var 0, template_hole 2)),
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 1, template_hole 0)))))),
    ("SG_Library_Complement.e2ennreal_Liminf",
     "?F ~= \<bottom> ==>
      e2ennreal (Liminf ?F ?f) = Liminf ?F (%n. e2ennreal (?f n))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("SG_Library_Complement.filterlim_weak_subseq",
     "(%x. ereal (real (?u x))) \<longlonglongrightarrow> \<infinity> ==>
      filterlim ?u sequentially sequentially",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, t_empty),
                template_app (template_hole 3, template_hole 2)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, t_empty), template_hole 1),
             template_hole 1)
           ))),
    ("SG_Library_Complement.frontier_indist_le",
     "?x : frontier {y. infdist y ?S <= ?r} ==> infdist ?x ?S = ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4, template_app (template_hole 3, t_empty)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0))),
    ("SG_Library_Complement.equiv_neg",
     "[| ?P ==> ?Q; ~ ?P ==> ~ ?Q |] ==> ?P = ?Q",
     template_implication
      ([template_implication
         ([template_predicate (template_var 1)],
          template_predicate (template_var 0)),
        template_implication
         ([template_negation (template_predicate (template_var 1))],
          template_negation (template_predicate (template_var 0)))],
       template_equation (template_var 1, template_var 0))),
    ("SG_Library_Complement.convex_powr'",
     "[| 0 < ?p; ?p <= 1 |] ==> convex_on {0..} (%x. - (x powr ?p))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0),
        template_inequation (less_equals, template_var 0, template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 6)),
             t_empty)
           ))),
    ("SG_Library_Complement.const_minus_Liminf_ennreal",
     "?F ~= \<bottom> ==> ?a - Liminf ?F ?f = Limsup ?F (%x. ?a - ?f x)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("SG_Library_Complement.disjoint_family_Suc2",
     "(!!n. ?A (Suc n) <= ?A n) ==>
      disjoint_family (%i. ?A i - ?A (Suc i))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0)
           ))),
    ("SG_Library_Complement.abs_Max_sum",
     "[| finite ?A; ?A ~= {} |] ==> \<bar>Max ?A\<bar> <= sum abs ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("SG_Library_Complement.continuous_mult_sgn",
     "[| continuous_on UNIV ?f; ?f 0 = 0 |]
      ==> continuous_on UNIV (%x. sgn x * ?f x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            ),
        template_equation
         (template_app (template_var 0, template_hole 2), template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_hole 4), t_empty)
           ))),
    ("SG_Library_Complement.convex_on_closure",
     "[| convex ?C; convex_on ?C ?f; continuous_on (closure ?C) ?f |]
      ==> convex_on (closure ?C) ?f",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("SG_Library_Complement.nat_mod_cong",
     "[| ?a = ?b + ?c; ?a mod ?n = ?b mod ?n |] ==> ?c mod ?n = 0",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 0),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("SG_Library_Complement.abs_Max_sum2",
     "[| finite ?A; ?A ~= {} |]
      ==> \<bar>Max (?f ` ?A)\<bar> <= (SUM a:?A. \<bar>?f a\<bar>)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("SG_Library_Complement.eventually_weak_subseq",
     "[| (%x. ereal (real (?u x))) \<longlonglongrightarrow> \<infinity>;
         eventually ?P sequentially |]
      ==> \<forall>\<^sub>F n in sequentially. ?P (?u n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, t_empty),
                template_app (template_hole 3, template_hole 2)),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, t_empty), template_hole 1)
           ))),
    ("SG_Library_Complement.mono_cInf",
     "[| mono ?f; ?A ~= {}; bdd_below ?A |]
      ==> ?f (\<Sqinter> ?A) <= \<Sqinter> (?f ` ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_var 1, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SG_Library_Complement.sum_arith_progression",
     "(SUM r<?N. SUM i<?a. ?f (i * ?N + r)) = sum ?f {..<?a * ?N}",
     template_equation
      (template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 1)),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("SG_Library_Complement.UN_le_eq_Un0_strict",
     "\<Union> (?M ` {..<?n + 1}) = \<Union> (?M ` {1..<?n + 1}) Un ?M 0",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_app (template_hole 1, template_hole 3),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3))))),
         template_app (template_var 1, template_hole 0)))),
    ("SG_Library_Complement.sym_diff_inc",
     "?A \<Delta> ?C <= ?A \<Delta> ?B Un ?B \<Delta> ?C",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 2)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SG_Library_Complement.sum_indicator_eq_card2",
     "finite ?I ==>
      (SUM i:?I. indicator (?P i) ?x) = card {i: ?I. ?x : ?P i}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 6, t_empty), template_var 2),
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("SG_Library_Complement.measurable_Inf",
     "(!!n. Measurable.pred ?M (?P n)) ==>
      (%x. \<Sqinter> {n. ?P n x})
      : ?M \<rightarrow>\<^sub>M count_space UNIV",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("SG_Library_Complement.tendsto_shift_1_over_n'",
     "(%n. ?f n / real n) \<longlonglongrightarrow> ?l ==>
      (%n. ?f (n - ?k) / real n) \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty),
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 2, template_var 1)),
             template_hole 1)
           ))),
    ("SG_Library_Complement.tendsto_shift_1_over_n",
     "(%n. ?f n / real n) \<longlonglongrightarrow> ?l ==>
      (%n. ?f (n + ?k) / real n) \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty),
                template_app (template_hole 2, template_var 1)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty),
               template_app (template_hole 2, template_var 1)),
             template_hole 1)
           ))),
    ("SG_Library_Complement.sym_diff_vimage",
     "?f -` (?A \<Delta> ?B) = ?f -` ?A \<Delta> ?f -` ?B",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1))))),
    ("SG_Library_Complement.DERIV_abs_powr",
     "1 < ?p ==>
      ((%x. \<bar>x\<bar> powr ?p) has_real_derivative
       ?p * sgn ?x * \<bar>?x\<bar> powr (?p - 1))
       (at ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 7, t_empty),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_app (template_hole 3, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0)),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 8)))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("SG_Library_Complement.measurable_T_iter",
     "[| ?T : ?M \<rightarrow>\<^sub>M ?M;
         ?f : ?M \<rightarrow>\<^sub>M count_space UNIV |]
      ==> (%x. (?T ^^ ?f x) x) : ?M \<rightarrow>\<^sub>M ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_hole 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, t_empty),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 1))
           ))),
    ("SG_Library_Complement.null_sets_density",
     "[| ?h : borel_measurable ?M; AE x in ?M. ?h x ~= 0 |]
      ==> null_sets (density ?M ?h) = null_sets ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app
               (template_app (template_hole 9, template_var 0),
                template_hole 8))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, t_empty),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("SG_Library_Complement.limit_along_weak_subseq",
     "[| (%x. ereal (real (?u x))) \<longlonglongrightarrow> \<infinity>;
         ?v \<longlonglongrightarrow> ?l |]
      ==> (%n. ?v (?u n)) \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, t_empty),
                template_app (template_hole 4, template_hole 3)),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_app (template_hole 0, template_var 0)),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0)),
             template_hole 2)
           ))),
    ("SG_Library_Complement.SUP_real_ennreal",
     "[| ?A ~= {}; bdd_above (?f ` ?A) |]
      ==> (\<Squnion>a\<in>?A. ennreal (?f a)) =
          ennreal (\<Squnion> (?f ` ?A))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, t_empty),
               template_var 1)))))),
    ("SG_Library_Complement.tends_to_real_e",
     "[| ?u \<longlonglongrightarrow> ?l; 0 < ?e |]
      ==> EX N. ALL n>N. \<bar>?u n - ?l\<bar> < ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_app (template_hole 9, template_var 1)),
              template_hole 8)
            ),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("SG_Library_Complement.ind_from_1",
     "[| 0 < ?n; ?P 1; !!n. [| 0 < n; ?P n |] ==> ?P (Suc n) |] ==> ?P ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1),
        template_predicate (template_app (template_var 0, template_hole 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("SG_Library_Complement.ennreal_Inf_cmult",
     "0 < ?c ==>
      \<Sqinter> {ennreal ?c * x |x. ?P x} =
      ennreal ?c * \<Sqinter> {x. ?P x}",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty)))))),
    ("SG_Library_Complement.tendsto_cmult_ennreal",
     "[| ~ (?c = \<infinity> & ?l = 0); (?f \<longlongrightarrow> ?l) ?F |]
      ==> ((%x. ?c * ?f x) \<longlongrightarrow> ?c * ?l) ?F",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_hole 4)),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_hole 3))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2))),
             template_var 0)
           ))),
    ("SG_Library_Complement.Delta_null_of_null_is_null",
     "[| ?B : sets ?M; ?A \<Delta> ?B : null_sets ?M; ?A : null_sets ?M |]
      ==> ?B : null_sets ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 1, template_var 0),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 0))),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SG_Library_Complement.mono_bij_cInf",
     "[| mono ?f; bij ?f; ?A ~= {}; bdd_below ?A |]
      ==> ?f (\<Sqinter> ?A) = \<Sqinter> (?f ` ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 1),
                template_hole 9),
              template_hole 8)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_var 1, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SG_Library_Complement.emeasure_pos_unionE",
     "[| !!N. ?A N : sets ?M; 0 < emeasure ?M (\<Union> (range ?A)) |]
      ==> EX N. 0 < emeasure ?M (?A N)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_inequation
         (less_than, template_hole 5,
          template_app
           (template_app (template_hole 4, template_var 0),
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, t_empty),
                template_hole 1))))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("SG_Library_Complement.AE_upper_bound_inf_ereal",
     "(!!e. 0 < e ==> AE x in ?M. ?F x <= ?G x + ereal e) ==>
      AE x in ?M. ?F x <= ?G x",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SG_Library_Complement.nn_integral_densityR",
     "[| ?f : borel_measurable ?F; ?g : borel_measurable ?F |]
      ==> \<integral>\<^sup>+ x. ?f x * ?g x \<partial>?F =
          integral\<^sup>N (density ?F ?g) ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           t_empty)))),
    ("SG_Library_Complement.continuous_on_closure_sequentially'",
     "[| continuous_on (closure ?C) ?f; !!n. ?u n : ?C;
         ?u \<longlonglongrightarrow> ?l |]
      ==> (%n. ?f (?u n)) \<longlonglongrightarrow> ?f ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_var 2, template_var 0))),
             template_hole 2)
           ))),
    ("SG_Library_Complement.Delta_null_same_emeasure",
     "[| ?A \<Delta> ?B : null_sets ?M; ?A : sets ?M; ?B : sets ?M |]
      ==> emeasure ?M ?A = emeasure ?M ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 2))),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("SG_Library_Complement.AE_equal_sum",
     "(!!i. AE x in ?M. ?f i x = ?g i x) ==>
      AE x in ?M. (SUM i:?I. ?f i x) = (SUM i:?I. ?g i x)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, t_empty),
             template_app (template_hole 1, template_var 1))
           ))),
    ("SG_Library_Complement.convex_fx_plus_fy_ineq",
     "[| convex_on {0..} ?f; 0 <= ?x; 0 <= ?y; ?f 0 = 0 |]
      ==> ?f ?x + ?f ?y <= ?f (?x + ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_hole 3)),
              template_var 2)
            ),
        template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_hole 3, template_var 0),
        template_equation
         (template_app (template_var 2, template_hole 3), template_hole 3)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("SG_Library_Complement.convex_on_mean_ineq",
     "[| convex_on ?A ?f; ?x : ?A; ?y : ?A |]
      ==> ?f ((?x + ?y) / 2) <= (?f ?x + ?f ?y) / 2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 3)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_var 2,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_var 2, template_var 1)),
               template_app (template_var 2, template_var 0))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("SG_Library_Complement.x_plus_y_p_le_xp_plus_yp",
     "[| 0 < ?p; ?p <= 1; 0 <= ?x; 0 <= ?y |]
      ==> (?x + ?y) powr ?p <= ?x powr ?p + ?y powr ?p",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_equals, template_var 2, template_hole 2),
        template_inequation (less_equals, template_hole 4, template_var 1),
        template_inequation (less_equals, template_hole 4, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("SG_Library_Complement.integrable_small_integral_on_small_sets",
     "[| integrable ?M ?h; 0 < ?delta |]
      ==> EX epsilon>0.
             ALL U:sets ?M.
                emeasure ?M U < ennreal epsilon -->
                \<bar>set_lebesgue_integral ?M U ?h\<bar> < ?delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 10, template_var 0)],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("SG_Library_Complement.open_set_weak_conv_lsc",
     "[| !!n. real_distribution (?\<mu> n); real_distribution ?M;
         weak_conv_m ?\<mu> ?M; open ?S; ?l < Sigma_Algebra.measure ?M ?S |]
      ==> \<forall>\<^sub>F n in sequentially.
             ?l < Sigma_Algebra.measure (?\<mu> n) ?S",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0)
           ))),
    ("SG_Library_Complement.closed_set_weak_conv_usc",
     "[| !!n. real_distribution (?\<mu> n); real_distribution ?M;
         weak_conv_m ?\<mu> ?M; closed ?S;
         Sigma_Algebra.measure ?M ?S < ?l |]
      ==> \<forall>\<^sub>F n in sequentially.
             Sigma_Algebra.measure (?\<mu> n) ?S < ?l",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty), template_hole 0)
           ))),
    ("SG_Library_Complement.not_AE_zero_int_ennreal_E",
     "[| 0 < integral\<^sup>N ?M ?f; ?f : borel_measurable ?M |]
      ==> EX A:sets ?M.
             EX e>0. 0 < emeasure ?M A & (ALL x:A. ennreal e <= ?f x)",
     template_implication
      ([template_inequation
         (less_than, template_hole 14,
          template_app
           (template_app (template_hole 13, template_var 1), t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_app
               (template_app (template_hole 11, template_var 1),
                template_hole 10))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 1)),
             t_empty)
           ))),
    ("SG_Library_Complement.null_sym_diff_transitive",
     "[| ?A \<Delta> ?B : null_sets ?M; ?B \<Delta> ?C : null_sets ?M;
         ?A : sets ?M; ?C : sets ?M |]
      ==> ?A \<Delta> ?C : null_sets ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 3))),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 0)),
                  template_app
                   (template_app (template_hole 2, template_var 0),
                    template_var 2))),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 0, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 0, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 3))),
             template_app (template_hole 1, template_var 1))
           ))),
    ("SG_Library_Complement.small_nn_integral_on_small_sets",
     "[| ?h : borel_measurable ?M; 0 < ?delta;
         integral\<^sup>N ?M ?h ~= \<infinity> |]
      ==> EX epsilon>0.
             ALL U:sets ?M.
                emeasure ?M U < ennreal epsilon -->
                set_nn_integral ?M U ?h < ennreal ?delta",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 2),
              template_app
               (template_app (template_hole 17, template_var 1),
                template_hole 16))
            ),
        template_inequation (less_than, template_hole 14, template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 11, template_var 1), t_empty),
              template_hole 10)
            )],
       template_predicate (template_app (template_hole 9, t_empty))))]:
   (string * thm * template) list
### theory "Draft.SG_Library_ComplementTemplates"
### 1.385s elapsed time, 1.936s cpu time, 0.579s GC time
val it = (): unit
