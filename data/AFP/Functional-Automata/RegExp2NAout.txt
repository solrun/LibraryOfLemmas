Loading theory "Draft.AutoProj" (required by "Draft.RegExp2NAMoreTemplates" via "Draft.RegExp2NA" via "Draft.NA")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RegExp2NAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RegExp2NAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RegExp2NAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.AutoProj"
### 0.046s elapsed time, 0.213s cpu time, 0.000s GC time
Loading theory "Draft.NA" (required by "Draft.RegExp2NAMoreTemplates" via "Draft.RegExp2NA")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  delta ::
    "'s * ('a => 's => 's set) * ('s => bool) => 'a list => 's => 's set"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  steps ::
    "'s * ('a => 's => 's set) * ('s => bool) => 'a list => ('s * 's) set"
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.514s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RegExp2NAMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.NA"
### 0.089s elapsed time, 0.345s cpu time, 0.039s GC time
Loading theory "Regular-Sets.Regular_Set" (required by "Draft.RegExp2NAMoreTemplates" via "Draft.RegExp2NA" via "Regular-Sets.Regular_Exp")
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.844s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RegExp2NAMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.320s elapsed time, 1.285s cpu time, 0.114s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RegExp2NAMoreTemplates" via "Draft.ExtrEqs")
### theory "Regular-Sets.Regular_Set"
### 0.225s elapsed time, 0.885s cpu time, 0.074s GC time
Loading theory "Regular-Sets.Regular_Exp" (required by "Draft.RegExp2NAMoreTemplates" via "Draft.RegExp2NA")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.902s elapsed time, 3.410s cpu time, 0.825s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.947s elapsed time, 3.466s cpu time, 0.835s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  lang :: "'a rexp => 'a list set"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.825s elapsed time, 5.875s cpu time, 1.057s GC time
Loading theory "Draft.Templates" (required by "Draft.RegExp2NAMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RegExp2NAMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Regular-Sets.Regular_Exp"
### 2.055s elapsed time, 5.953s cpu time, 1.074s GC time
Loading theory "Draft.RegExp2NA" (required by "Draft.RegExp2NAMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.534s elapsed time, 1.110s cpu time, 0.091s GC time
consts
  rexp2na ::
    "'a rexp
     => bool list *
        ('a => bool list => bool list set) * (bool list => bool)"
### theory "Draft.RegExp2NA"
### 0.345s elapsed time, 0.516s cpu time, 0.054s GC time
Loading theory "Draft.RegExp2NAMoreTemplates"
val templateLemmas =
   [("RegExp2NA.step_epsilon", "step epsilon ?a = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("RegExp2NA.fin_plus", "fin (RegExp2NA.plus ?A) = fin ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("RegExp2NA.start_plus", "start (RegExp2NA.plus ?A) = start ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("RegExp2NA.accepts_epsilon", "accepts epsilon ?w = (?w = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("RegExp2NA.start_atom", "start (atom ?a) = [True]",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("RegExp2NA.accepts_rexp2na",
     "accepts (rexp2na ?r) ?w = (?w : lang ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("RegExp2NA.start_conc",
     "start (RegExp2NA.conc ?L ?R) = True # start ?L",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 3, template_var 1)))),
    ("RegExp2NA.fin_atom", "fin (atom ?a) ?q = (?q = [False])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("RegExp2NA.accepts_atom", "accepts (atom ?a) ?w = (?w = [?a])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("RegExp2NA.fin_conc_False",
     "fin (RegExp2NA.conc ?L ?R) (False # ?p) = fin ?R ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("RegExp2NA.fin_or_False",
     "fin (RegExp2NA.or ?L ?R) (False # ?p) = fin ?R ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("RegExp2NA.fin_or_True",
     "fin (RegExp2NA.or ?L ?R) (True # ?p) = fin ?L ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2), template_var 0))),
    ("RegExp2NA.accepts_or",
     "accepts (RegExp2NA.or ?L ?R) ?w = (accepts ?L ?w | accepts ?R ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("RegExp2NA.steps_epsilon",
     "((?p, ?q) : steps epsilon ?w) = (?w = [] & ?p = ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("RegExp2NA.fin_conc_True",
     "fin (RegExp2NA.conc ?L ?R) (True # ?p) =
      (fin ?L ?p & fin ?R (start ?R))",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app (template_hole 0, template_var 1))))),
    ("RegExp2NA.False_False_in_steps_atom",
     "(([False], [False]) : steps (atom ?a) ?w) = (?w = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_hole 4)),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_hole 4))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("RegExp2NA.step_plusI",
     "(?p, ?q) : step ?A ?a ==> (?p, ?q) : step (RegExp2NA.plus ?A) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("RegExp2NA.steps_plusI",
     "(?p, ?q) : steps ?A ?w ==> (?p, ?q) : steps (RegExp2NA.plus ?A) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("RegExp2NA.fin_start_or",
     "fin (RegExp2NA.or ?L ?R) (start (RegExp2NA.or ?L ?R)) =
      (fin ?L (start ?L) | fin ?R (start ?R))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 1, template_var 0))))),
    ("RegExp2NA.start_fin_in_steps_atom",
     "((start (atom ?a), [False]) : steps (atom ?a) ?w) = (?w = [?a])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_var 1))),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_hole 4))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 7, template_var 1)),
                template_var 0))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("RegExp2NA.accepts_star",
     "accepts (RegExp2NA.star ?A) ?w =
      (EX us. (ALL u:set us. accepts ?A u) & ?w = concat us)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app (template_hole 5, t_empty))),
    ("RegExp2NA.True_True_steps_concI",
     "(?p, ?q) : steps ?L ?w ==>
      (True # ?p, True # ?q) : steps (RegExp2NA.conc ?L ?R) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1))
           ))),
    ("RegExp2NA.accepts_conc",
     "accepts (RegExp2NA.conc ?L ?R) ?w =
      (EX u v. ?w = u @ v & accepts ?L u & accepts ?R v)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("RegExp2NA.accepts_plus",
     "accepts (RegExp2NA.plus ?A) ?w =
      (EX us. us ~= [] & ?w = concat us & (ALL u:set us. accepts ?A u))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_var 0),
       template_app (template_hole 8, t_empty))),
    ("RegExp2NA.in_step_atom_Some",
     "((?p, ?q) : step (atom ?a) ?b) =
      (?p = [True] & ?q = [False] & ?b = ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_hole 1),
                     template_hole 2))),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("RegExp2NA.steps_star_cycle",
     "[| ?us ~= []; !!x. x : set ?us ==> accepts ?A x |]
      ==> accepts (RegExp2NA.plus ?A) (concat ?us)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("RegExp2NA.True_False_step_conc",
     "((True # ?p, False # ?q) : step (RegExp2NA.conc ?L ?R) ?a) =
      (fin ?L ?p & (start ?R, ?q) : step ?R ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 4)),
             template_app
              (template_app (template_hole 7, template_hole 5),
               template_var 3))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 4)),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 0, template_var 1)),
               template_var 3)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("RegExp2NA.False_step_conc",
     "((False # ?p, ?q) : step (RegExp2NA.conc ?L ?R) ?a) =
      (EX r. ?q = False # r & (?p, r) : step ?R ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NA.False_in_step_or",
     "((False # ?p, ?q) : step (RegExp2NA.or ?L ?R) ?a) =
      (EX r. ?q = False # r & (?p, r) : step ?R ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NA.False_steps_conc",
     "((False # ?p, ?q) : steps (RegExp2NA.conc ?L ?R) ?w) =
      (EX r. ?q = False # r & (?p, r) : steps ?R ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NA.lift_False_over_steps_or",
     "((False # ?p, ?q) : steps (RegExp2NA.or ?L ?R) ?w) =
      (EX r. ?q = False # r & (?p, r) : steps ?R ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NA.True_in_step_or",
     "((True # ?p, ?q) : step (RegExp2NA.or ?L ?R) ?a) =
      (EX r. ?q = True # r & (?p, r) : step ?L ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NA.lift_True_over_steps_or",
     "((True # ?p, ?q) : steps (RegExp2NA.or ?L ?R) ?w) =
      (EX r. ?q = True # r & (?p, r) : steps ?L ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NA.step_plus_conv",
     "((?p, ?r) : step (RegExp2NA.plus ?A) ?a) =
      ((?p, ?r) : step ?A ?a | fin ?A ?p & (start ?A, ?r) : step ?A ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 0, template_var 1)),
                 template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)))))),
    ("RegExp2NA.fin_steps_plusI",
     "[| (start ?A, ?q) : steps ?A ?u; ?u ~= []; fin ?A ?p |]
      ==> (?p, ?q) : steps (RegExp2NA.plus ?A) ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 1))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 3)),
               template_var 1))
           ))),
    ("RegExp2NA.final_conc",
     "fin (RegExp2NA.conc ?L ?R) ?p =
      (fin ?R (start ?R) & (EX s. ?p = True # s & fin ?L s) |
       (EX s. ?p = False # s & fin ?R s))",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 9, template_var 1),
                 template_app (template_hole 5, template_var 1))),
             template_app (template_hole 4, t_empty))),
         template_app (template_hole 4, t_empty)))),
    ("RegExp2NA.start_steps_plusD",
     "(start ?A, ?r) : steps (RegExp2NA.plus ?A) ?w ==>
      EX us v.
         ?w = concat us @ v &
         Ball (set us) (accepts ?A) & (start ?A, ?r) : steps ?A v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 2)),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 2)),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("RegExp2NA.start_step_or",
     "((start (RegExp2NA.or ?L ?R), ?q) : step (RegExp2NA.or ?L ?R) ?a) =
      (EX p. ?q = True # p & (start ?L, p) : step ?L ?a |
             ?q = False # p & (start ?R, p) : step ?R ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 3),
                   template_var 2))),
             template_var 1)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 8, template_var 3),
               template_var 2)),
           template_var 0)),
       template_app (template_hole 6, t_empty))),
    ("RegExp2NA.True_step_conc",
     "((True # ?p, ?q) : step (RegExp2NA.conc ?L ?R) ?a) =
      ((EX r. ?q = True # r & (?p, r) : step ?L ?a) |
       fin ?L ?p & (EX r. ?q = False # r & (start ?R, r) : step ?R ?a))",
     template_equation
      (template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_hole 9),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 4)),
           template_app (template_hole 5, t_empty))))),
    ("RegExp2NA.steps_or",
     "((start (RegExp2NA.or ?L ?R), ?q) : steps (RegExp2NA.or ?L ?R) ?w) =
      (?w = [] & ?q = start (RegExp2NA.or ?L ?R) |
       ?w ~= [] &
       (EX p. ?q = True # p & (start ?L, p) : steps ?L ?w |
              ?q = False # p & (start ?R, p) : steps ?R ?w))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_app (template_hole 11, template_var 3),
                        template_var 2))),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 11, template_var 3),
                    template_var 2)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 6)),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_hole 12,
                     template_app
                      (template_app (template_hole 11, template_var 3),
                       template_var 2))))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 6))),
               template_app (template_hole 3, t_empty)))
           ))),
    ("RegExp2NA.True_steps_conc",
     "((True # ?p, ?q) : steps (RegExp2NA.conc ?L ?R) ?w) =
      ((EX r. (?p, r) : steps ?L ?w & ?q = True # r) |
       (EX u a v.
           ?w = u @ a # v &
           (EX r. (?p, r) : steps ?L u &
                  fin ?L r &
                  (EX s. (start ?R, s) : step ?R a &
                         (EX t. (s, t) : steps ?R v & ?q = False # t)))))",
     template_equation
      (template_app
        (template_app
          (template_hole 18,
           template_app
            (template_app
              (template_hole 17,
               template_app
                (template_app (template_hole 16, template_hole 15),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app (template_hole 13, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 12, template_app (template_hole 11, t_empty)),
         template_app (template_hole 8, t_empty)))),
    ("RegExp2NA.True_steps_concD",
     "(True # ?p, ?q) : steps (RegExp2NA.conc ?L ?R) ?w ==>
      (EX r. (?p, r) : steps ?L ?w & ?q = True # r) |
      (EX u a v.
          ?w = u @ a # v &
          (EX r. (?p, r) : steps ?L u &
                 fin ?L r &
                 (EX s. (start ?R, s) : step ?R a &
                        (EX t. (s, t) : steps ?R v & ?q = False # t))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app
                     (template_app (template_hole 16, template_hole 15),
                      template_var 4)),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12, template_app (template_hole 11, t_empty)),
             template_app (template_hole 8, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.RegExp2NAMoreTemplates"
### 0.340s elapsed time, 0.483s cpu time, 0.056s GC time
val it = (): unit
