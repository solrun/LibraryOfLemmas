   [("MaxChop.is_maxsplitter_reducing",
     "is_maxsplitter ?P ?splitf ==> reducing ?splitf",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("MaxChop.reducing_maxsplit",
     "reducing (%qs. maxsplit ?P ([], qs) [] qs)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("MaxChop.is_maxchopper_chop",
     "is_maxsplitter ?P ?splitf ==> is_maxchopper ?P (chop ?splitf)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("MaxChop.chop_concat",
     "[| is_maxsplitter ?P ?splitf; chop ?splitf ?xs = (?yss, ?zs) |]
      ==> ?xs = concat ?yss @ ?zs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("MaxChop.chop_nonempty",
     "is_maxsplitter ?P ?splitf ==>
      ALL yss zs.
         chop ?splitf ?xs = (yss, zs) --> (ALL ys:set yss. ys ~= [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("MaxChop.chop_rule",
     "reducing ?splitf ==>
      chop ?splitf ?xs =
      (let (pre, post) = ?splitf ?xs
       in if pre = [] then ([], ?xs)
          else let (xss, zs) = chop ?splitf post in (pre # xss, zs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 10, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app (template_var 1, template_var 0)),
           template_app (template_hole 8, t_empty)))))]
