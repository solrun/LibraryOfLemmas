Loading theory "Draft.AutoProj" (required by "Draft.RegExp2NAeMoreTemplates" via "Draft.RegExp2NAe" via "Draft.NAe" via "Draft.NA")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RegExp2NAeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RegExp2NAeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RegExp2NAeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.AutoProj"
### 0.043s elapsed time, 0.209s cpu time, 0.000s GC time
Loading theory "Draft.NA" (required by "Draft.RegExp2NAeMoreTemplates" via "Draft.RegExp2NAe" via "Draft.NAe")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
consts
  delta ::
    "'s * ('a => 's => 's set) * ('s => bool) => 'a list => 's => 's set"
consts
  steps ::
    "'s * ('a => 's => 's set) * ('s => bool) => 'a list => ('s * 's) set"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.543s cpu time, 0.040s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RegExp2NAeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.NA"
### 0.108s elapsed time, 0.416s cpu time, 0.040s GC time
Loading theory "Draft.NAe" (required by "Draft.RegExp2NAeMoreTemplates" via "Draft.RegExp2NAe")
consts
  steps ::
    "'s * ('a option => 's => 's set) * ('s => bool)
     => 'a list => ('s * 's) set"
### theory "HOL-Library.Set_Algebras"
### 0.194s elapsed time, 0.797s cpu time, 0.040s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RegExp2NAeMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.NAe"
### 0.086s elapsed time, 0.345s cpu time, 0.000s GC time
Loading theory "Regular-Sets.Regular_Set" (required by "Draft.RegExp2NAeMoreTemplates" via "Draft.RegExp2NAe" via "Regular-Sets.Regular_Exp")
Found termination order: "size_list size <*mlex*> {}"
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
### theory "HOL-Library.Nat_Bijection"
### 0.372s elapsed time, 1.496s cpu time, 0.120s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RegExp2NAeMoreTemplates" via "Draft.ExtrEqs")
### theory "Regular-Sets.Regular_Set"
### 0.252s elapsed time, 0.983s cpu time, 0.165s GC time
Loading theory "Regular-Sets.Regular_Exp" (required by "Draft.RegExp2NAeMoreTemplates" via "Draft.RegExp2NAe")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.858s elapsed time, 3.254s cpu time, 0.748s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.937s elapsed time, 3.351s cpu time, 0.788s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  lang :: "'a rexp => 'a list set"
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.790s elapsed time, 5.593s cpu time, 0.968s GC time
Loading theory "Draft.Templates" (required by "Draft.RegExp2NAeMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.084s elapsed time, 0.318s cpu time, 0.052s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RegExp2NAeMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Regular-Sets.Regular_Exp"
### 2.013s elapsed time, 5.577s cpu time, 0.919s GC time
Loading theory "Draft.RegExp2NAe" (required by "Draft.RegExp2NAeMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.529s elapsed time, 1.135s cpu time, 0.063s GC time
consts
  rexp2nae ::
    "'a rexp
     => bool list *
        ('a option => bool list => bool list set) * (bool list => bool)"
### theory "Draft.RegExp2NAe"
### 0.413s elapsed time, 0.486s cpu time, 0.050s GC time
Loading theory "Draft.RegExp2NAeMoreTemplates"
val templateLemmas =
   [("RegExp2NAe.step_epsilon", "step epsilon ?a = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("RegExp2NAe.fin_star_start",
     "fin (RegExp2NAe.star ?A) (start (RegExp2NAe.star ?A))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))
         )),
    ("RegExp2NAe.eps_atom", "eps (atom ?a) = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("RegExp2NAe.accepts_epsilon", "NAe.accepts epsilon ?w = (?w = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 0))),
    ("RegExp2NAe.start_atom", "start (atom ?a) = [True]",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("RegExp2NAe.start_or_not_final",
     "~ fin (RegExp2NAe.or ?L ?R) (start (RegExp2NAe.or ?L ?R))",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)))
             )
         )),
    ("RegExp2NAe.unfold_rtrancl2", "?R^* = Id Un ?R O ?R^*",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 3, template_var 0))))),
    ("RegExp2NAe.accepts_rexp2nae",
     "NAe.accepts (rexp2nae ?r) ?w = (?w : lang ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("RegExp2NAe.in_conc_True",
     "fin (RegExp2NAe.conc ?L ?R) (True # ?p) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("RegExp2NAe.start_conc",
     "start (RegExp2NAe.conc ?L ?R) = True # start ?L",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 3, template_var 1)))),
    ("RegExp2NAe.fin_atom", "fin (atom ?a) ?q = (?q = [False])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("RegExp2NAe.accepts_atom", "NAe.accepts (atom ?a) ?w = (?w = [?a])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("RegExp2NAe.fin_star_True",
     "fin (RegExp2NAe.star ?A) (True # ?p) = fin ?A ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("RegExp2NAe.fin_conc_False",
     "fin (RegExp2NAe.conc ?L ?R) (False # ?p) = fin ?R ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("RegExp2NAe.fin_or_False",
     "fin (RegExp2NAe.or ?L ?R) (False # ?p) = fin ?R ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0))),
    ("RegExp2NAe.fin_or_True",
     "fin (RegExp2NAe.or ?L ?R) (True # ?p) = fin ?L ?p",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2), template_var 0))),
    ("RegExp2NAe.accepts_or",
     "NAe.accepts (RegExp2NAe.or ?L ?R) ?w =
      (NAe.accepts ?L ?w | NAe.accepts ?R ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("RegExp2NAe.not_start_step_or_Some",
     "(start (RegExp2NAe.or ?L ?R), ?q)
      ~: step (RegExp2NAe.or ?L ?R) (Some ?a)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 2))),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_app (template_hole 0, template_var 0)))
             )
         )),
    ("RegExp2NAe.steps_epsilon",
     "((?p, ?q) : NAe.steps epsilon ?w) = (?w = [] & ?p = ?q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("RegExp2NAe.False_False_in_steps_atom",
     "(([False], [False]) : NAe.steps (atom ?a) ?w) = (?w = [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_hole 5),
                      template_hole 4)),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_hole 4))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_var 0))
            )],
       template_equation (template_var 0, template_hole 0))),
    ("RegExp2NAe.final_conc",
     "fin (RegExp2NAe.conc ?L ?R) ?p = (EX s. ?p = False # s & fin ?R s)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("RegExp2NAe.start_fin_in_steps_atom",
     "((start (atom ?a), [False]) : NAe.steps (atom ?a) ?w) = (?w = [?a])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_var 1))),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_hole 4))),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 7, template_var 1)),
                template_var 0))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("RegExp2NAe.True_start_eps_starI",
     "fin ?A ?p ==>
      (True # ?p, True # start ?A) : eps (RegExp2NAe.star ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app (template_hole 3, template_var 1)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_hole 0))
           ))),
    ("RegExp2NAe.accepts_star",
     "NAe.accepts (RegExp2NAe.star ?A) ?w =
      (EX us. (ALL u:set us. NAe.accepts ?A u) & ?w = concat us)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app (template_hole 5, t_empty))),
    ("RegExp2NAe.True_False_eps_concI",
     "fin ?L ?p ==>
      (True # ?p, False # start ?R) : eps (RegExp2NAe.conc ?L ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 6, template_hole 4),
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_hole 0))
           ))),
    ("RegExp2NAe.start_step_star",
     "((start (RegExp2NAe.star ?A), ?r) : step (RegExp2NAe.star ?A) ?a) =
      (?a = None & ?r = True # start ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app (template_hole 7, template_var 2))),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 7, template_var 2)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_app (template_hole 8, template_var 2))))
           ))),
    ("RegExp2NAe.True_True_step_starI",
     "(?p, ?q) : step ?A ?a ==>
      (True # ?p, True # ?q) : step (RegExp2NAe.star ?A) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("RegExp2NAe.True_True_steps_starI",
     "(?p, ?q) : NAe.steps ?A ?w ==>
      (True # ?p, True # ?q) : NAe.steps (RegExp2NAe.star ?A) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("RegExp2NAe.lem",
     "(?p, ?q) : eps ?R ==>
      (False # ?p, False # ?q) : eps (RegExp2NAe.conc ?L ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_hole 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_hole 3))
           ))),
    ("RegExp2NAe.True_True_steps_concI",
     "(?p, ?q) : NAe.steps ?L ?w ==>
      (True # ?p, True # ?q) : NAe.steps (RegExp2NAe.conc ?L ?R) ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 4)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0)),
               template_var 1))
           ))),
    ("RegExp2NAe.accepts_conc",
     "NAe.accepts (RegExp2NAe.conc ?L ?R) ?w =
      (EX u v. ?w = u @ v & NAe.accepts ?L u & NAe.accepts ?R v)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 3, t_empty))),
    ("RegExp2NAe.True_True_eps_starI",
     "(?p, ?r) : (eps ?A)^* ==>
      (True # ?p, True # ?r) : (eps (RegExp2NAe.star ?A))^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 0, template_var 0)),
                 template_hole 3)))
           ))),
    ("RegExp2NAe.steps_star_cycle",
     "ALL u:set ?us. NAe.accepts ?A u ==>
      (True # start ?A, True # start ?A)
      : NAe.steps (RegExp2NAe.star ?A) (concat ?us)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app (template_hole 3, template_var 0))),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 0, template_var 1)))
           ))),
    ("RegExp2NAe.lemma2a'",
     "(?p, ?q) : (eps ?L)^* ==>
      (True # ?p, True # ?q) : (eps (RegExp2NAe.conc ?L ?R))^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_hole 3)))
           ))),
    ("RegExp2NAe.lemma2a",
     "(?p, ?q) : (eps ?L)^* ==>
      (True # ?p, True # ?q) : (eps (RegExp2NAe.or ?L ?R))^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_hole 3)))
           ))),
    ("RegExp2NAe.lemma2b'",
     "(?p, ?q) : (eps ?R)^* ==>
      (False # ?p, False # ?q) : (eps (RegExp2NAe.conc ?L ?R))^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)),
                 template_hole 3)))
           ))),
    ("RegExp2NAe.lemma2b",
     "(?p, ?q) : (eps ?R)^* ==>
      (False # ?p, False # ?q) : (eps (RegExp2NAe.or ?L ?R))^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_hole 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 2))),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)),
                 template_hole 3)))
           ))),
    ("RegExp2NAe.in_unfold_rtrancl2",
     "((?p, ?q) : ?R^*) =
      (?q = ?p | (EX r. (?p, r) : ?R & (r, ?q) : ?R^*))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2)),
             template_app (template_hole 1, t_empty))
           ))),
    ("RegExp2NAe.in_step_atom_Some",
     "((?p, ?q) : step (atom ?a) (Some ?b)) =
      (?p = [True] & ?q = [False] & ?b = ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 1)),
                template_app (template_hole 7, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_hole 2))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 4, template_hole 1),
                     template_hole 2))),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("RegExp2NAe.start_eps_or",
     "((start (RegExp2NAe.or ?L ?R), ?q) : eps (RegExp2NAe.or ?L ?R)) =
      (?q = True # start ?L | ?q = False # start ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 8,
                      template_app
                       (template_app (template_hole 7, template_var 2),
                        template_var 1))),
                  template_var 0)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1)),
                template_hole 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 8, template_var 2)))),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_hole 0),
                 template_app (template_hole 8, template_var 1))))
           ))),
    ("RegExp2NAe.False_step_conc",
     "((False # ?p, ?q) : step (RegExp2NAe.conc ?L ?R) ?a) =
      (EX r. ?q = False # r & (?p, r) : step ?R ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NAe.False_in_step_or",
     "((False # ?p, ?q) : step (RegExp2NAe.or ?L ?R) ?a) =
      (EX r. ?q = False # r & (?p, r) : step ?R ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NAe.False_steps_conc",
     "((False # ?p, ?q) : NAe.steps (RegExp2NAe.conc ?L ?R) ?w) =
      (EX r. ?q = False # r & (?p, r) : NAe.steps ?R ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NAe.lift_False_over_steps_or",
     "((False # ?p, ?q) : NAe.steps (RegExp2NAe.or ?L ?R) ?w) =
      (EX r. ?q = False # r & (?p, r) : NAe.steps ?R ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NAe.True_in_step_or",
     "((True # ?p, ?q) : step (RegExp2NAe.or ?L ?R) ?a) =
      (EX r. ?q = True # r & (?p, r) : step ?L ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NAe.lift_True_over_steps_or",
     "((True # ?p, ?q) : NAe.steps (RegExp2NAe.or ?L ?R) ?w) =
      (EX r. ?q = True # r & (?p, r) : NAe.steps ?L ?w)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NAe.True_step_star",
     "((True # ?p, ?r) : step (RegExp2NAe.star ?A) (Some ?a)) =
      (EX q. (?p, q) : step ?A (Some ?a) & ?r = True # q)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 3, template_var 0))),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NAe.False_epsclosure_conc",
     "((False # ?p, ?q) : (eps (RegExp2NAe.conc ?L ?R))^*) =
      (EX r. ?q = False # r & (?p, r) : (eps ?R)^*)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_hole 3))),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NAe.False_epsclosure_or",
     "((False # ?p, ?q) : (eps (RegExp2NAe.or ?L ?R))^*) =
      (EX r. ?q = False # r & (?p, r) : (eps ?R)^*)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_hole 3))),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NAe.True_epsclosure_or",
     "((True # ?p, ?q) : (eps (RegExp2NAe.or ?L ?R))^*) =
      (EX r. ?q = True # r & (?p, r) : (eps ?L)^*)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_hole 3))),
       template_app (template_hole 2, t_empty))),
    ("RegExp2NAe.epsclosure_start_step_star",
     "((start (RegExp2NAe.star ?A), ?q) : ?R^*) =
      (?q = start (RegExp2NAe.star ?A) |
       (EX r. (start (RegExp2NAe.star ?A), r) : ?R & (r, ?q) : ?R^*))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_var 2))),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 2)))),
             template_app (template_hole 1, t_empty))
           ))),
    ("RegExp2NAe.start_steps_star",
     "((start (RegExp2NAe.star ?A), ?r)
       : NAe.steps (RegExp2NAe.star ?A) ?w) =
      (?w = [] & ?r = start (RegExp2NAe.star ?A) |
       (True # start ?A, ?r) : NAe.steps (RegExp2NAe.star ?A) ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_var 2))),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 8, template_var 2)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 2))))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_app (template_hole 9, template_var 2))),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 8, template_var 2)),
                 template_var 0)))
           ))),
    ("RegExp2NAe.lemma1b'",
     "[| (?tp, ?tq) : (eps (RegExp2NAe.conc ?L ?R))^*; ?tp = False # ?p |]
      ==> EX q. (?p, q) : (eps ?R)^* & ?tq = False # q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)),
                  template_hole 5)))
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("RegExp2NAe.lemma1b",
     "[| (?tp, ?tq) : (eps (RegExp2NAe.or ?L ?R))^*; ?tp = False # ?p |]
      ==> EX q. (?p, q) : (eps ?R)^* & ?tq = False # q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)),
                  template_hole 5)))
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("RegExp2NAe.lemma1a",
     "[| (?tp, ?tq) : (eps (RegExp2NAe.or ?L ?R))^*; ?tp = True # ?p |]
      ==> EX q. (?p, q) : (eps ?L)^* & ?tq = True # q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 4),
                  template_var 3)),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_var 1)),
                  template_hole 5)))
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("RegExp2NAe.True_in_eps_star",
     "((True # ?p, ?q) : eps (RegExp2NAe.star ?A)) =
      ((EX r. ?q = True # r & (?p, r) : eps ?A) |
       fin ?A ?p & ?q = True # start ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_hole 9),
                      template_var 2)),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 0)),
                template_hole 6))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("RegExp2NAe.True_step_conc",
     "((True # ?p, ?q) : step (RegExp2NAe.conc ?L ?R) ?a) =
      ((EX r. ?q = True # r & (?p, r) : step ?L ?a) |
       fin ?L ?p & ?a = None & ?q = False # start ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_app (template_hole 12, template_hole 11),
                      template_var 4)),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 4)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_hole 2)),
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_app
                    (template_app (template_hole 12, template_hole 1),
                     template_app (template_hole 0, template_var 1))))))
           ))),
    ("RegExp2NAe.True_start_steps_starD",
     "(True # start ?A, ?rr) : NAe.steps (RegExp2NAe.star ?A) ?w ==>
      EX us v.
         ?w = concat us @ v &
         Ball (set us) (NAe.accepts ?A) &
         (EX r. (start ?A, r) : NAe.steps ?A v & ?rr = True # r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_hole 16,
                    template_app
                     (template_app (template_hole 15, template_hole 14),
                      template_app (template_hole 13, template_var 2))),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 2)),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("RegExp2NAe.True_start_steps_star",
     "((True # start ?A, ?rr) : NAe.steps (RegExp2NAe.star ?A) ?w) =
      (EX us v.
          ?w = concat us @ v &
          (ALL u:set us. NAe.accepts ?A u) &
          (EX r. (start ?A, r) : NAe.steps ?A v & ?rr = True # r))",
     template_equation
      (template_app
        (template_app
          (template_hole 17,
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app (template_hole 15, template_hole 14),
                 template_app (template_hole 13, template_var 2))),
             template_var 1)),
         template_app
          (template_app
            (template_hole 12,
             template_app (template_hole 11, template_var 2)),
           template_var 0)),
       template_app (template_hole 10, t_empty))),
    ("RegExp2NAe.True_eps_star",
     "((True # ?p, ?s) : (eps (RegExp2NAe.star ?A))^*) =
      (EX r. ((?p, r) : (eps ?A)^* |
              (EX q. (?p, q) : (eps ?A)^* &
                     fin ?A q & (start ?A, r) : (eps ?A)^*)) &
             ?s = True # r)",
     template_equation
      (template_app
        (template_app
          (template_hole 13,
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, template_hole 10),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 0)),
             template_hole 6))),
       template_app (template_hole 5, t_empty))),
    ("RegExp2NAe.steps_or",
     "((start (RegExp2NAe.or ?L ?R), ?q)
       : NAe.steps (RegExp2NAe.or ?L ?R) ?w) =
      (?w = [] & ?q = start (RegExp2NAe.or ?L ?R) |
       (EX p. ?q = True # p & (start ?L, p) : NAe.steps ?L ?w |
              ?q = False # p & (start ?R, p) : NAe.steps ?R ?w))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 10, template_var 3),
                        template_var 2))),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 10, template_var 3),
                    template_var 2)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_hole 5)),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 3),
                       template_var 2))))),
             template_app (template_hole 3, t_empty))
           ))),
    ("RegExp2NAe.lem'",
     "(?tp, ?s) : (eps (RegExp2NAe.star ?A))^* ==>
      ALL p.
         ?tp = True # p -->
         (EX r. ((p, r) : (eps ?A)^* |
                 (EX q. (p, q) : (eps ?A)^* &
                        fin ?A q & (start ?A, r) : (eps ?A)^*)) &
                ?s = True # r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_var 1)),
              template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app (template_hole 11, template_var 0)),
                  template_hole 10)))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("RegExp2NAe.True_epsclosure_conc",
     "((True # ?p, ?q) : (eps (RegExp2NAe.conc ?L ?R))^*) =
      ((EX r. (?p, r) : (eps ?L)^* & ?q = True # r) |
       (EX r. (?p, r) : (eps ?L)^* &
              fin ?L r &
              (EX s. (start ?R, s) : (eps ?R)^* & ?q = False # s)))",
     template_equation
      (template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app (template_hole 12, template_hole 11),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_var 0)),
             template_hole 7))),
       template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, t_empty)),
         template_app (template_hole 5, t_empty)))),
    ("RegExp2NAe.True_steps_conc",
     "((True # ?p, ?q) : NAe.steps (RegExp2NAe.conc ?L ?R) ?w) =
      ((EX r. (?p, r) : NAe.steps ?L ?w & ?q = True # r) |
       (EX u v.
           ?w = u @ v &
           (EX r. (?p, r) : NAe.steps ?L u &
                  fin ?L r &
                  (EX s. (start ?R, s) : NAe.steps ?R v &
                         ?q = False # s))))",
     template_equation
      (template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_hole 12),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, t_empty)),
         template_app (template_hole 5, t_empty)))),
    ("RegExp2NAe.lemma1a'",
     "[| (?tp, ?tq) : (eps (RegExp2NAe.conc ?L ?R))^*; ?tp = True # ?p |]
      ==> (EX q. ?tq = True # q & (?p, q) : (eps ?L)^*) |
          (EX q r.
              ?tq = False # q &
              (?p, r) : (eps ?L)^* &
              fin ?L r & (start ?R, q) : (eps ?R)^*)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 4),
                  template_var 3)),
              template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 2),
                      template_var 1)),
                  template_hole 9)))
            ),
        template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5, template_app (template_hole 4, t_empty)),
             template_app (template_hole 4, t_empty))
           ))),
    ("RegExp2NAe.True_steps_concD",
     "(True # ?p, ?q) : NAe.steps (RegExp2NAe.conc ?L ?R) ?w ==>
      (EX r. (?p, r) : NAe.steps ?L ?w & ?q = True # r) |
      (EX u v.
          ?w = u @ v &
          (EX r. (?p, r) : NAe.steps ?L u &
                 fin ?L r &
                 (EX s. (start ?R, s) : NAe.steps ?R v & ?q = False # s)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app
                     (template_app (template_hole 13, template_hole 12),
                      template_var 4)),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9, template_app (template_hole 8, t_empty)),
             template_app (template_hole 5, t_empty))
           )))]:
   (string * thm * template) list
### theory "Draft.RegExp2NAeMoreTemplates"
### 0.344s elapsed time, 0.472s cpu time, 0.046s GC time
val it = (): unit
