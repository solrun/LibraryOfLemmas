Loading theory "Draft.AutoProj" (required by "Draft.RegSet_of_nat_DAMoreTemplates" via "Draft.RegSet_of_nat_DA" via "Draft.DA")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RegSet_of_nat_DAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RegSet_of_nat_DAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RegSet_of_nat_DAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.AutoProj"
### 0.055s elapsed time, 0.248s cpu time, 0.000s GC time
Loading theory "Draft.DA" (required by "Draft.RegSet_of_nat_DAMoreTemplates" via "Draft.RegSet_of_nat_DA")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.DA"
### 0.069s elapsed time, 0.261s cpu time, 0.036s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RegSet_of_nat_DAMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.621s cpu time, 0.036s GC time
Loading theory "Regular-Sets.Regular_Set" (required by "Draft.RegSet_of_nat_DAMoreTemplates" via "Draft.RegSet_of_nat_DA")
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.265s elapsed time, 1.070s cpu time, 0.036s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RegSet_of_nat_DAMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.345s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RegSet_of_nat_DAMoreTemplates" via "Draft.ExtrEqs")
### theory "Regular-Sets.Regular_Set"
### 0.250s elapsed time, 0.979s cpu time, 0.095s GC time
Loading theory "Draft.RegSet_of_nat_DA" (required by "Draft.RegSet_of_nat_DAMoreTemplates")
consts
  trace :: "('a => nat => nat) => nat => 'a list => nat list"
consts
  regset :: "('a => nat => nat) => nat => nat => nat => 'a list set"
### Ignoring duplicate rewrite rule:
### [| ?b1 = ?f1 ?x1; ?x1 : ?A1 |] ==> ?b1 : ?f1 ` ?A1 == True
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.RegSet_of_nat_DA"
### 0.207s elapsed time, 0.810s cpu time, 0.092s GC time
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.667s elapsed time, 2.339s cpu time, 0.307s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.893s elapsed time, 2.865s cpu time, 0.710s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.661s elapsed time, 4.344s cpu time, 0.875s GC time
Loading theory "Draft.Templates" (required by "Draft.RegSet_of_nat_DAMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.051s elapsed time, 0.073s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RegSet_of_nat_DAMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.446s elapsed time, 0.500s cpu time, 0.067s GC time
Loading theory "Draft.RegSet_of_nat_DAMoreTemplates"
val templateLemmas =
   [("RegSet_of_nat_DA.length_trace",
     "length (trace ?d ?i ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("RegSet_of_nat_DA.trace_is_Nil", "(trace ?d ?i ?xs = []) = (?xs = [])",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("RegSet_of_nat_DA.butlast_empty",
     "(butlast ?xs = []) = (case ?xs of [] => True | y # ys => ys = [])",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), t_empty),
         template_var 0))),
    ("RegSet_of_nat_DA.deltas_append",
     "deltas ?d (?xs @ ?ys) ?i = deltas ?d ?ys (deltas ?d ?xs ?i)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("RegSet_of_nat_DA.lem", "[| ?n < Suc ?k; ?n ~= ?k |] ==> ?n < ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 2, template_var 0)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation (less_than, template_var 1, template_var 0))),
    ("RegSet_of_nat_DA.deltas_below",
     "[| bounded ?d ?k; ?i < ?k |] ==> deltas ?d ?w ?i < ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1),
         template_var 2))),
    ("RegSet_of_nat_DA.trace_append",
     "trace ?d ?i (?xs @ ?ys) =
      trace ?d ?i ?xs @ trace ?d (deltas ?d ?xs ?i) ?ys",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 2)),
           template_var 0)))),
    ("RegSet_of_nat_DA.deltas_concat",
     "ALL mid:set ?mids. deltas ?d mid ?k = ?k ==>
      deltas ?d (concat ?mids) ?k = ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2)),
           template_var 0),
         template_var 0))),
    ("RegSet_of_nat_DA.in_set_butlast_concatI",
     "[| ?x : set (butlast ?xs); ?xs : set ?xss |]
      ==> ?x : set (butlast (concat ?xss))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("RegSet_of_nat_DA.trace_below",
     "bounded ?d ?k ==> ALL i<?k. ALL n:set (trace ?d i ?xs). n < ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("RegSet_of_nat_DA.set_trace_conv",
     "set (trace ?d ?i ?xs) =
      (if ?xs = [] then {}
       else insert (deltas ?d ?xs ?i) (set (butlast (trace ?d ?i ?xs))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4)),
               template_hole 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0),
                   template_var 1)),
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_app (template_hole 7, template_var 2),
                       template_var 1),
                     template_var 0)))))
           ))),
    ("RegSet_of_nat_DA.trace_concat",
     "ALL xs:set ?xss. deltas ?d xs ?i = ?i ==>
      trace ?d ?i (concat ?xss) = concat (map (trace ?d ?i) ?xss)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("RegSet_of_nat_DA.regset_spec",
     "(?xs : regset ?d ?i ?j ?k) =
      ((ALL n:set (butlast (trace ?d ?i ?xs)). n < ?k) &
       deltas ?d ?xs ?i = ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app
                          (template_app (template_hole 3, template_var 3),
                           template_var 2),
                         template_var 4)))),
                 t_empty)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 4),
                   template_var 2)),
               template_var 1))
           ))),
    ("RegSet_of_nat_DA.trace_is_Cons_conv",
     "(trace ?d ?i ?xs = ?n # ?ns) =
      (case ?xs of [] => False
       | y # ys => ?n = ?d y ?i & ?ns = trace ?d ?n ys)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2), t_empty),
         template_var 2))),
    ("RegSet_of_nat_DA.regset_DA_equiv",
     "[| bounded (next ?A) ?k; start ?A < ?k; ?j < ?k |]
      ==> (?w : regset_of_DA ?A ?k) = accepts ?A ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)),
              template_var 2)
            ),
        template_inequation
         (less_than, template_app (template_hole 4, template_var 3),
          template_var 2),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("RegSet_of_nat_DA.regset_below",
     "[| bounded ?d ?k; ?i < ?k; ?j < ?k |]
      ==> regset ?d ?i ?j ?k = {xs. deltas ?d xs ?i = ?j}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_inequation (less_than, template_var 1, template_var 2),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1),
             template_var 0),
           template_var 2),
         template_app (template_hole 2, t_empty)))),
    ("RegSet_of_nat_DA.decompose",
     "?k : set (trace ?d ?i ?xs) ==>
      EX pref mids suf.
         ?xs = pref @ concat mids @ suf &
         deltas ?d pref ?i = ?k &
         (ALL n:set (butlast (trace ?d ?i pref)). n ~= ?k) &
         (ALL mid:set mids.
             deltas ?d mid ?k = ?k &
             (ALL n:set (butlast (trace ?d ?k mid)). n ~= ?k)) &
         (ALL n:set (butlast (trace ?d ?k suf)). n ~= ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 3),
              template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_app (template_hole 13, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 12, t_empty))))]:
   (string * thm * template) list
### theory "Draft.RegSet_of_nat_DAMoreTemplates"
### 0.312s elapsed time, 0.452s cpu time, 0.066s GC time
val it = (): unit
