Loading theory "Draft.AutoProj" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata" via "Draft.AutoRegExp" via "Draft.Automata" via "Draft.DA")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.AutoProj"
### 0.054s elapsed time, 0.243s cpu time, 0.000s GC time
Loading theory "Draft.DA" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata" via "Draft.AutoRegExp" via "Draft.Automata")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.DA"
### 0.062s elapsed time, 0.227s cpu time, 0.038s GC time
Loading theory "Draft.NA" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata" via "Draft.AutoRegExp" via "Draft.Automata" via "Draft.NAe")
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.522s cpu time, 0.038s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata" via "Draft.AutoMaxChop" via "Draft.MaxChop" via "Draft.MaxPrefix")
consts
  delta ::
    "'s * ('a => 's => 's set) * ('s => bool) => 'a list => 's => 's set"
consts
  steps ::
    "'s * ('a => 's => 's set) * ('s => bool) => 'a list => ('s * 's) set"
### theory "Draft.NA"
### 0.059s elapsed time, 0.234s cpu time, 0.000s GC time
Loading theory "Draft.NAe" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata" via "Draft.AutoRegExp" via "Draft.Automata")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.820s cpu time, 0.038s GC time
consts
  steps ::
    "'s * ('a option => 's => 's set) * ('s => bool)
     => 'a list => ('s * 's) set"
Loading theory "HOL-Library.Tree" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.NAe"
### 0.071s elapsed time, 0.286s cpu time, 0.000s GC time
Loading theory "Draft.Automata" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata" via "Draft.AutoRegExp")
### theory "HOL-Library.Nat_Bijection"
### 0.319s elapsed time, 1.260s cpu time, 0.118s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Automata"
### 0.149s elapsed time, 0.575s cpu time, 0.080s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.ExtrEqs")
consts
  prefixes :: "'a list => 'a list list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
consts
  left :: "'a tree => 'a tree"
  Proving monotonicity ...
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  suffixes :: "'a list => 'a list list"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "list_emb"
consts
  cycle :: "'a list => 'a stream"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.887s elapsed time, 3.378s cpu time, 0.748s GC time
Loading theory "Regular-Sets.Regular_Set" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata" via "Draft.AutoRegExp" via "Draft.RegExp2NA" via "Regular-Sets.Regular_Exp")
Found termination order: "size <*mlex*> {}"
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
### theory "HOL-Library.BigO"
### 0.851s elapsed time, 3.248s cpu time, 0.748s GC time
consts
  lang_pow :: "nat => 'a list set => 'a list set"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Regular-Sets.Regular_Set"
### 0.210s elapsed time, 0.685s cpu time, 0.057s GC time
Loading theory "Draft.RegSet_of_nat_DA" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata")
Loading theory "Regular-Sets.Regular_Exp" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata" via "Draft.AutoRegExp" via "Draft.RegExp2NA")
Found termination order: "size <*mlex*> {}"
consts
  sublists :: "'a list => 'a list list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  trace :: "('a => nat => nat) => nat => 'a list => nat list"
consts
  regset :: "('a => nat => nat) => nat => nat => nat => 'a list set"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Sublist"
### 1.425s elapsed time, 5.358s cpu time, 0.949s GC time
Loading theory "Draft.MaxPrefix" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata" via "Draft.AutoMaxChop" via "Draft.MaxChop")
### Ignoring duplicate rewrite rule:
### [| ?b1 = ?f1 ?x1; ?x1 : ?A1 |] ==> ?b1 : ?f1 ` ?A1 == True
### theory "Draft.RegSet_of_nat_DA"
### 0.216s elapsed time, 0.899s cpu time, 0.128s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
### theory "Draft.MaxPrefix"
### 0.155s elapsed time, 0.622s cpu time, 0.063s GC time
Loading theory "Draft.MaxChop" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata" via "Draft.AutoMaxChop")
### Rewrite rule not in simpset:
### Wellfounded.accp chop_rel (?splitf1, ?xs1) ==>
### chop ?splitf1 ?xs1 ==
### if reducing ?splitf1
### then let pp = ?splitf1 ?xs1
###      in if fst pp = [] then ([], ?xs1)
###         else let qq = chop ?splitf1 (snd pp) in (fst pp # fst qq, snd qq)
### else undefined
### theory "Draft.MaxChop"
### 0.145s elapsed time, 0.448s cpu time, 0.089s GC time
Loading theory "Draft.AutoMaxChop" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata")
Found termination order: "size <*mlex*> {}"
consts
  auto_split ::
    "'s * ('a => 's => 's) * ('s => bool)
     => 's => 'a list * 'a list => 'a list => 'a list => 'a list * 'a list"
### theory "HOL-Library.Tree"
### 2.036s elapsed time, 7.397s cpu time, 1.873s GC time
Loading theory "Draft.Templates" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.AutoMaxChop"
### 0.376s elapsed time, 1.226s cpu time, 0.771s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.146s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Functional_AutomataMoreTemplates")
consts
  lang :: "'a rexp => 'a list set"
consts
  nullable :: "'a rexp => bool"
consts
  rexp_empty :: "'a rexp => bool"
instantiation
  rexp :: (order) order
  less_eq_rexp == less_eq :: 'a rexp => 'a rexp => bool
  less_rexp == less :: 'a rexp => 'a rexp => bool
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.501s elapsed time, 1.068s cpu time, 0.130s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  rexp :: (linorder) linorder
### theory "Regular-Sets.Regular_Exp"
### 1.914s elapsed time, 4.809s cpu time, 1.200s GC time
Loading theory "Draft.RegExp2NA" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata" via "Draft.AutoRegExp")
Loading theory "Draft.RegExp2NAe" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata" via "Draft.AutoRegExp")
consts
  rexp2nae ::
    "'a rexp
     => bool list *
        ('a option => bool list => bool list set) * (bool list => bool)"
consts
  rexp2na ::
    "'a rexp
     => bool list *
        ('a => bool list => bool list set) * (bool list => bool)"
### theory "Draft.RegExp2NA"
### 0.328s elapsed time, 0.692s cpu time, 0.068s GC time
### theory "Draft.RegExp2NAe"
### 0.432s elapsed time, 0.847s cpu time, 0.139s GC time
Loading theory "Draft.AutoRegExp" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata")
### theory "Draft.AutoRegExp"
### 0.192s elapsed time, 0.193s cpu time, 0.000s GC time
Loading theory "Draft.Execute" (required by "Draft.Functional_AutomataMoreTemplates" via "Draft.Functional_Automata")
### theory "Draft.Execute"
### 0.024s elapsed time, 0.024s cpu time, 0.000s GC time
Loading theory "Draft.Functional_Automata" (required by "Draft.Functional_AutomataMoreTemplates")
"True"
  :: "bool"
"True"
  :: "bool"
### theory "Draft.Functional_Automata"
### 0.515s elapsed time, 1.539s cpu time, 0.930s GC time
Loading theory "Draft.Functional_AutomataMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Functional_AutomataMoreTemplates"
### 0.375s elapsed time, 0.547s cpu time, 0.029s GC time
val it = (): unit
