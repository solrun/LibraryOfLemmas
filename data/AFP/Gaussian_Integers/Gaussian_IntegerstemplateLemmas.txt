   [("Gaussian_Integers.is_nth_power_upto_unit_1_left",
     "is_nth_power_upto_unit 1 ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Gaussian_Integers.gauss_i_neq_of_nat", "gauss_i ~= of_nat ?n",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Gaussian_Integers.gauss_i_neq_numeral", "gauss_i ~= numeral ?m",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Gaussian_Integers.gauss_i_neq_of_nat", "of_nat ?n ~= gauss_i",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Gaussian_Integers.gauss_i_neq_numeral", "numeral ?m ~= gauss_i",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Gaussian_Integers.ImZ_of_int", "ImZ (of_int ?n) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Gaussian_Integers.ImZ_of_nat", "ImZ (of_nat ?n) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Gaussian_Integers.ImZ_numeral", "ImZ (numeral ?n) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Gaussian_Integers.ReZ_of_int", "ReZ (of_int ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Gaussian_Integers.multiplicity_0_left",
     "multiplicity (0::?'a) ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Gaussian_Integers.gauss_cnj_cnj", "gauss_cnj (gauss_cnj ?z) = ?z",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Gaussian_Integers.gauss_i_neq_of_int", "gauss_i ~= of_int (int ?n)",
     template_negation
      (
         template_equation
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Gaussian_Integers.gauss_i_neq_of_int", "of_int (int ?n) ~= gauss_i",
     template_negation
      (
         template_equation
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Gaussian_Integers.ReZ_of_nat", "ReZ (of_nat ?n) = int ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gaussian_Integers.ReZ_numeral", "ReZ (numeral ?n) = numeral ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gaussian_Integers.gauss_int_norm_cnj",
     "gauss_int_norm (gauss_cnj ?z) = gauss_int_norm ?z",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Gaussian_Integers.gauss_int_norm_uminus",
     "gauss_int_norm (- ?z) = gauss_int_norm ?z",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Gaussian_Integers.gauss_int_norm_normalize",
     "gauss_int_norm (normalize ?x) = gauss_int_norm ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Gaussian_Integers.prime_factors_gauss_int_correct",
     "prime_factors ?z = prime_factors_gauss_int ?z",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gaussian_Integers.prime_elem_gauss_cnj_iff",
     "prime_elem (gauss_cnj ?z) = prime_elem ?z",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Gaussian_Integers.gauss2complex_of_nat",
     "gauss2complex (of_nat ?n) = of_nat ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gaussian_Integers.gauss_cnj_of_int",
     "gauss_cnj (of_int ?n2.0) = of_int ?n2.0",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gaussian_Integers.gauss_cnj_of_nat",
     "gauss_cnj (of_nat ?n1.0) = of_nat ?n1.0",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gaussian_Integers.gauss_cnj_numeral",
     "gauss_cnj (numeral ?n3.0) = numeral ?n3.0",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gaussian_Integers.normalize_gauss_int_of_nat",
     "normalize (of_nat ?n) = of_nat ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gaussian_Integers.normalize_gauss_int_of_numeral",
     "normalize (numeral ?n') = numeral ?n'",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gaussian_Integers.gauss_int_norm_of_numeral",
     "gauss_int_norm (numeral ?n') = numeral (Num.sqr ?n')",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.prime_factors_gauss_int_of_nat_correct",
     "prime_factors_gauss_int_of_nat ?n = prime_factors (of_nat ?n)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Gaussian_Integers.is_nth_power_upto_unit_0_left",
     "is_nth_power_upto_unit 0 ?x = is_unit ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Gaussian_Integers.gauss2complex_cnj",
     "gauss2complex (gauss_cnj ?x) = cnj (gauss2complex ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Gaussian_Integers.gauss2complex_uminus",
     "gauss2complex (- ?x) = - gauss2complex ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Gaussian_Integers.gauss_cnj_uminus",
     "gauss_cnj (- ?a) = - gauss_cnj ?a",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Gaussian_Integers.normalize_gauss_int_of_int",
     "normalize (of_int ?m) = of_int \<bar>?m\<bar>",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int (numeral ?b) 0 = numeral ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Gaussian_Integers.prime_elem_gauss_cnj",
     "prime_elem ?z ==> prime_elem (gauss_cnj ?z)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gaussian_Integers.prime_gauss_int_norm_imp_prime_elem",
     "prime (gauss_int_norm ?q) ==> prime_elem ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.of_nat_prod_mset",
     "of_nat (\<Prod>\<^sub># ?A) = \<Prod>\<^sub># (image_mset of_nat ?A)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_hole 3),
           template_var 0)))),
    ("Gaussian_Integers.is_singleton_conv_Ex1",
     "is_singleton ?A = (EX! x. x : ?A)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Gaussian_Integers.is_unit_gauss_int_iff'",
     "is_unit ?x = (gauss_int_norm ?x = 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Gaussian_Integers.gauss_int_norm_eq_0_iff",
     "(gauss_int_norm ?z = 0) = (?z = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Gaussian_Integers.one_eq_gauss2complex_iff",
     "(1 = gauss2complex ?x) = (?x = 1)",
     template_bimplication
      (template_equation
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Gaussian_Integers.zero_eq_gauss2complex_iff",
     "(0 = gauss2complex ?x) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_equation (template_var 0, template_hole 0))),
    ("Gaussian_Integers.gauss2complex_eq_1_iff",
     "(gauss2complex ?x = 1) = (?x = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Gaussian_Integers.gauss2complex_eq_0_iff",
     "(gauss2complex ?x = 0) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Gaussian_Integers.gauss_cnj_eq_0_iff",
     "(gauss_cnj ?z = 0) = (?z = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_equation (template_var 0, template_hole 0))),
    ("Gaussian_Integers.is_unit_gauss_cnj_iff",
     "is_unit (gauss_cnj ?z) = is_unit ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Gaussian_Integers.self_mult_gauss_cnj",
     "?z * gauss_cnj ?z = of_nat (gauss_int_norm ?z)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.gauss_cnj_mult_self",
     "gauss_cnj ?z * ?z = of_nat (gauss_int_norm ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.gauss_i_times_gauss_i_times",
     "gauss_i * (gauss_i * ?x) = - ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gaussian_Integers.the_elemI", "is_singleton ?A ==> the_elem ?A : ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Gaussian_Integers.is_nth_power_upto_unit_base",
     "is_nth_power ?n ?x ==> is_nth_power_upto_unit ?n ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Gaussian_Integers.is_nth_power_upto_unit_unit",
     "is_unit ?x ==> is_nth_power_upto_unit ?n ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Gaussian_Integers.gauss_int_norm_of_nat",
     "gauss_int_norm (of_nat ?n) = ?n\<^sup>2",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Gaussian_Integers.multiplicity_gauss_cnj",
     "multiplicity (gauss_cnj ?a) (gauss_cnj ?b) = multiplicity ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Gaussian_Integers.multiplicity_gauss_int_of_nat",
     "multiplicity (of_nat ?a) (of_nat ?b) = multiplicity ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Gaussian_Integers.gauss_int_norm_pos_iff",
     "(0 < gauss_int_norm ?z) = (?z ~= 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Gaussian_Integers.gauss_cnj_dvd_right_iff",
     "(?a dvd gauss_cnj ?b) = (gauss_cnj ?a dvd ?b)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Gaussian_Integers.gauss_cnj_dvd_left_iff",
     "(gauss_cnj ?a dvd ?b) = (?a dvd gauss_cnj ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.gauss_int_norm_eq_Suc_0_iff",
     "(gauss_int_norm ?x = Suc 0) = is_unit ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, template_hole 2)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Gaussian_Integers.gauss2complex_eq_iff",
     "(gauss2complex ?z = gauss2complex ?u) = (?z = ?u)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Gaussian_Integers.coprime_of_int_gauss_int",
     "coprime (of_int ?a) (of_int ?b) = coprime ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Gaussian_Integers.coprime_of_nat_gauss_int",
     "coprime (of_nat ?a) (of_nat ?b) = coprime ?a ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Gaussian_Integers.gauss_cnj_dvd_iff",
     "(gauss_cnj ?a dvd gauss_cnj ?b) = (?a dvd ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Gaussian_Integers.of_int_dvd_of_int_gauss_int_iff",
     "(of_int ?m dvd of_int ?n) = (?m dvd ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Gaussian_Integers.of_nat_dvd_of_nat_gauss_int_iff",
     "(of_nat ?m dvd of_nat ?n) = (?m dvd ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Gaussian_Integers.gauss_cnj_power",
     "gauss_cnj (?a ^ ?n) = gauss_cnj ?a ^ ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int 0 (numeral ?b) = numeral ?b * gauss_i",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int (numeral ?b) 1 = numeral ?b + gauss_i",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int (- numeral ?b) 0 = - numeral ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.is_unit_gauss_cnj",
     "is_unit ?z ==> is_unit (gauss_cnj ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Gaussian_Integers.gauss_int_norm_of_int",
     "gauss_int_norm (of_int ?m) = nat (?m\<^sup>2)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Gaussian_Integers.gauss_int_norm_mult",
     "gauss_int_norm (?z * ?u) = gauss_int_norm ?z * gauss_int_norm ?u",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Gaussian_Integers.gauss2complex_diff",
     "gauss2complex (?x - ?y) = gauss2complex ?x - gauss2complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Gaussian_Integers.gauss2complex_add",
     "gauss2complex (?x + ?y) = gauss2complex ?x + gauss2complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Gaussian_Integers.gauss2complex_mult",
     "gauss2complex (?x * ?y) = gauss2complex ?x * gauss2complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Gaussian_Integers.gauss_cnj_diff",
     "gauss_cnj (?a - ?b) = gauss_cnj ?a - gauss_cnj ?b",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Gaussian_Integers.gauss_cnj_add",
     "gauss_cnj (?a + ?b) = gauss_cnj ?a + gauss_cnj ?b",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Gaussian_Integers.gauss_cnj_mult",
     "gauss_cnj (?a * ?b) = gauss_cnj ?a * gauss_cnj ?b",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Gaussian_Integers.gcd_of_int_gauss_int",
     "gcd (of_int ?a) (of_int ?b) = of_int (gcd ?a ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Gaussian_Integers.gcd_of_nat_gauss_int",
     "gcd (of_nat ?a) (of_nat ?b) = of_nat (gcd ?a ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int (numeral ?b) (- 1) = numeral ?b - gauss_i",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_app (template_hole 4, template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Gaussian_Integers.is_unit_power", "is_unit ?x ==> is_unit (?x ^ ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Gaussian_Integers.of_nat_dvd_of_nat",
     "?a dvd ?b ==> of_nat ?a dvd of_nat ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gaussian_Integers.gauss_int_norm_dvd_mono",
     "?a dvd ?b ==> gauss_int_norm ?a dvd gauss_int_norm ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gaussian_Integers.gauss_cnj_dvd",
     "?a dvd ?b ==> gauss_cnj ?a dvd gauss_cnj ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gaussian_Integers.normalized_gauss_int",
     "normalize ?z = ?z ==> 0 <= ImZ ?z",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.normalized_gauss_int",
     "normalize ?z = ?z ==> 0 <= ReZ ?z",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.gauss_int_norm_not_3_mod_4",
     "[gauss_int_norm ?z \<noteq> 3] (mod 4)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 0,
                   template_app (template_hole 0, template_hole 1))))
             )
         )),
    ("Gaussian_Integers.real_gauss_int_norm",
     "real (gauss_int_norm ?z) = (cmod (gauss2complex ?z))\<^sup>2",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Gaussian_Integers.gauss_cnj_sum",
     "gauss_cnj (sum ?f ?A) = (SUM x:?A. gauss_cnj (?f x))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Gaussian_Integers.gauss_cnj_prod",
     "gauss_cnj (prod ?f ?A) = (PROD x:?A. gauss_cnj (?f x))",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int 1 (numeral ?b) = 1 + numeral ?b * gauss_i",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int 0 (- numeral ?b) = - numeral ?b * gauss_i",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int (- numeral ?b) 1 = - numeral ?b + gauss_i",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0))),
         template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Gaussian_Integers.of_int_dvd_imp_dvd_gauss_cnj",
     "of_int ?n dvd ?z ==> of_int ?n dvd gauss_cnj ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gaussian_Integers.of_nat_dvd_imp_dvd_gauss_cnj",
     "of_nat ?n dvd ?z ==> of_nat ?n dvd gauss_cnj ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gaussian_Integers.gauss_cnj_eq_self",
     "Im (gauss2complex ?z) = 0 ==> gauss_cnj ?z = ?z",
     template_implication
      ([template_equation
         (template_app
           (template_hole 4,
            template_app (template_hole 3, template_var 0)),
          template_hole 2)],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Gaussian_Integers.multiplicity_prime_1_plus_i",
     "multiplicity (1 + gauss_i) ?z = multiplicity 2 (gauss_int_norm ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_hole 5)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.self_plus_gauss_cnj",
     "?z + gauss_cnj ?z = of_int (2 * ReZ ?z)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0))))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int 1 (- numeral ?b) = 1 - numeral ?b * gauss_i",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int (- numeral ?b) (- 1) = - numeral ?b - gauss_i",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0))),
         template_app (template_hole 6, template_hole 4)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("Gaussian_Integers.factor_gauss_int_prime_nat_correct",
     "prime ?p ==>
      set (factor_gauss_int_prime_nat ?p) = prime_factors (of_nat ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Gaussian_Integers.gauss_cnj_eq_minus_self",
     "Re (gauss2complex ?z) = 0 ==> gauss_cnj ?z = - ?z",
     template_implication
      ([template_equation
         (template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 0)),
          template_hole 3)],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.is_nth_power_upto_unitI",
     "normalize (?x ^ ?n) = normalize ?y ==> is_nth_power_upto_unit ?n ?y",
     template_implication
      ([template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int (- 1) (numeral ?b) = - 1 + numeral ?b * gauss_i",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app (template_hole 8, template_hole 7)),
         template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int (numeral ?a) (numeral ?b) =
      numeral ?a + numeral ?b * gauss_i",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 0)),
           template_hole 0)))),
    ("Gaussian_Integers.gauss_int_norm_mod_less",
     "?b ~= 0 ==> gauss_int_norm (?a mod ?b) < gauss_int_norm ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("Gaussian_Integers.gauss_int_norm_dvd_imp_le",
     "?b ~= 0 ==> gauss_int_norm ?a <= gauss_int_norm (?a * ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Gaussian_Integers.self_minus_gauss_cnj",
     "?z - gauss_cnj ?z = of_int (2 * ImZ ?z) * gauss_i",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 0),
         template_app (template_hole 8, template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app (template_hole 1, template_var 0)))),
         template_hole 0))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int (- 1) (- numeral ?b) = - 1 - numeral ?b * gauss_i",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app (template_hole 8, template_hole 7)),
         template_app
          (template_hole 8,
           template_app (template_hole 6, template_var 0))),
       template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int (numeral ?a) (- numeral ?b) =
      numeral ?a - numeral ?b * gauss_i",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app
          (template_hole 4,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 0)),
           template_hole 0)))),
    ("Gaussian_Integers.dist_round_complex_le",
     "dist ?z (gauss2complex (round_complex ?z)) <= sqrt 2 / 2",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Gaussian_Integers.gauss_int_eq_iff",
     "(?x = ?y) = (ReZ ?x = ReZ ?y & ImZ ?x = ImZ ?y)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 1)),
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int (- numeral ?a) (numeral ?b) =
      - numeral ?a + numeral ?b * gauss_i",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 0)),
           template_hole 0)))),
    ("Gaussian_Integers.is_nth_power_upto_unit_mult_coprimeD1",
     "[| coprime ?x ?y; is_nth_power_upto_unit ?n (?x * ?y) |]
      ==> is_nth_power_upto_unit ?n ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 2)
           ))),
    ("Gaussian_Integers.is_nth_power_upto_unit_mult_coprimeD2",
     "[| coprime ?x ?y; is_nth_power_upto_unit ?n (?x * ?y) |]
      ==> is_nth_power_upto_unit ?n ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Gaussian_Integers.multiplicity_prime_1_plus_i_aux",
     "multiplicity (1 + gauss_i) (of_nat ?c) = 2 * multiplicity 2 ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_hole 6)),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_var 0)))),
    ("Gaussian_Integers.gauss_int_code_post",
     "Gauss_Int (- numeral ?a) (- numeral ?b) =
      - numeral ?a - numeral ?b * gauss_i",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 0)),
           template_hole 0)))),
    ("Gaussian_Integers.norm_round_complex_le",
     "(cmod (?z - gauss2complex (round_complex ?z)))\<^sup>2 <= 1 / 2",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 0),
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 0))))),
         template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3))),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_hole 0,
           template_app (template_hole 4, template_hole 3))))),
    ("Gaussian_Integers.multiplicity_power_power",
     "0 < ?n ==> multiplicity (?p ^ ?n) (?x ^ ?n) = multiplicity ?p ?x",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Gaussian_Integers.normalized_gauss_int'",
     "[| normalize ?z = ?z; ?z ~= 0 |] ==> 0 < ReZ ?z",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_var 0),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.normalized_gauss_int'",
     "[| normalize ?z = ?z; ?z ~= 0 |] ==> 0 <= ImZ ?z",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0), template_var 0),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.is_unit_gauss_int_iff",
     "is_unit ?x = (?x : {1, - 1, gauss_i, - gauss_i})",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0), template_hole 5),
       template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 5),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 5)),
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1)),
                 template_hole 0))))))),
    ("Gaussian_Integers.gauss_int_norm_mod_less_aux",
     "?b ~= 0 ==> 2 * gauss_int_norm (?a mod ?b) <= gauss_int_norm ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app (template_hole 1, template_var 1)))),
    ("Gaussian_Integers.gauss_int_dvd_same_norm_imp_associated",
     "[| ?z1.0 dvd ?z2.0; gauss_int_norm ?z1.0 = gauss_int_norm ?z2.0 |]
      ==> normalize ?z1.0 = normalize ?z2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.normalized_gauss_int_iff",
     "(normalize ?z = ?z) = (?z = 0 | 0 < ReZ ?z & 0 <= ImZ ?z)",
     template_bimplication
      (template_equation
        (template_app (template_hole 8, template_var 0), template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_hole 6)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app (template_hole 2, template_var 0))),
               template_app
                (template_app (template_hole 1, template_hole 3),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("Gaussian_Integers.multiplicity_prime_cong_3_mod_4",
     "prime (of_nat ?q) ==>
      multiplicity ?q (gauss_int_norm ?z) =
      2 * multiplicity (of_nat ?q) ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1),
           template_app (template_hole 5, template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 8, template_var 1)),
             template_var 0))))),
    ("Gaussian_Integers.even_square_cong_4_int",
     "even ?x ==> [?x\<^sup>2 = 0] (mod 4)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_hole 4))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 5, template_hole 4)))),
               template_hole 0),
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 5, template_hole 4))))
           ))),
    ("Gaussian_Integers.even_square_cong_4_nat",
     "even ?x ==> [?x\<^sup>2 = 0] (mod 4)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)))),
               template_hole 0),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 4, template_hole 3))))
           ))),
    ("Gaussian_Integers.sum_of_squares_nat_bound",
     "?x\<^sup>2 + ?y\<^sup>2 = ?n ==> ?x <= ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_hole 1)))),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1)))),
          template_var 0)],
       template_inequation (less_equals, template_var 2, template_var 0))),
    ("Gaussian_Integers.sum_of_squares_nat_bound'",
     "?x\<^sup>2 + ?y\<^sup>2 = ?n ==> ?y <= ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_hole 1)))),
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1)))),
          template_var 0)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Gaussian_Integers.product_dvd_irreducibleD",
     "[| irreducible ?x; ?a * ?b dvd ?x |] ==> is_unit ?a | is_unit ?b",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 0))
           ))),
    ("Gaussian_Integers.prime_elem_gauss_int_of_nat",
     "[| prime ?n; [?n = 3] (mod 4) |] ==> prime_elem (of_nat ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 2,
                  template_app (template_hole 2, template_hole 3))))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gaussian_Integers.prime_gauss_int_of_nat",
     "[| prime ?n; [?n = 3] (mod 4) |] ==> prime (of_nat ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_hole 3))),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 2,
                  template_app (template_hole 2, template_hole 3))))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gaussian_Integers.is_nth_power_upto_unit_conv_multiplicity",
     "0 < ?n ==>
      is_nth_power_upto_unit ?n ?x =
      (ALL p. prime p --> ?n dvd multiplicity p ?x)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app (template_hole 4, t_empty)))),
    ("Gaussian_Integers.odd_square_cong_4_int",
     "odd ?x ==> [?x\<^sup>2 = 1] (mod 4)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4))),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_hole 1,
                     template_app (template_hole 5, template_hole 4)))),
               template_hole 0),
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 5, template_hole 4))))
           ))),
    ("Gaussian_Integers.odd_square_cong_4_nat",
     "odd ?x ==> [?x\<^sup>2 = 1] (mod 4)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3))),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3)))),
               template_hole 0),
             template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 4, template_hole 3))))
           ))),
    ("Gaussian_Integers.coprime_self_gauss_cnj",
     "[| coprime (ReZ ?z) (ImZ ?z); odd (gauss_int_norm ?z) |]
      ==> coprime ?z (gauss_cnj ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 0)),
              template_app (template_hole 8, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3))),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gaussian_Integers.prime_gauss_int_norm_squareD",
     "[| prime ?z; gauss_int_norm ?z = ?p\<^sup>2 |]
      ==> prime ?p & ?z = of_nat ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_equation
         (template_app (template_hole 8, template_var 1),
          template_app
           (template_app (template_hole 7, template_var 0),
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 4))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Gaussian_Integers.self_dvd_gauss_cnj_iff",
     "(?z dvd gauss_cnj ?z) =
      (ReZ ?z = 0 | ImZ ?z = 0 | \<bar>ReZ ?z\<bar> = \<bar>ImZ ?z\<bar>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 1, template_var 0)),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 0))),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 1, template_var 0)))))
           ))),
    ("Gaussian_Integers.gauss_cnj_dvd_self_iff",
     "(gauss_cnj ?z dvd ?z) =
      (ReZ ?z = 0 | ImZ ?z = 0 | \<bar>ReZ ?z\<bar> = \<bar>ImZ ?z\<bar>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_hole 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 1, template_var 0)),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 0))),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 1, template_var 0)))))
           ))),
    ("Gaussian_Integers.two_sum_of_squares_nat_iff",
     "(?x\<^sup>2 + ?y\<^sup>2 = 2) = (?x = 1 & ?y = 1)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)))),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)))),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_hole 0))
           ))),
    ("Gaussian_Integers.coprime_iff_prime_factors_disjoint",
     "[| ?x ~= (0::?'a); ?y ~= (0::?'a) |]
      ==> coprime ?x ?y = (prime_factors ?x Int prime_factors ?y = {})",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0)
              )],
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("Gaussian_Integers.prime_elem_mult_dvdI",
     "[| prime_elem ?p; ?p dvd ?c; ?b dvd ?c; ~ ?p dvd ?b |]
      ==> ?p * ?b dvd ?c",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Gaussian_Integers.prime_square_sum_nat_decomp_correct",
     "[| prime ?p; ?p = 2 | [?p = 1] (mod 4) |]
      ==> fst (prime_square_sum_nat_decomp ?p)
          <= snd (prime_square_sum_nat_decomp ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 0),
                  template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 6)))),
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4),
                template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app (template_hole 7, template_hole 6)))))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Gaussian_Integers.prime_mod_4_cases",
     "prime ?p ==> ?p = 2 | [?p = 1] (mod 4) | [?p = 3] (mod 4)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 4, template_hole 3))))),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 0, template_hole 3))),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 4, template_hole 3))))))
           ))),
    ("Gaussian_Integers.gauss_int_norm_eq_prime_squareD",
     "[| prime ?p; [?p = 3] (mod 4); gauss_int_norm ?z = ?p\<^sup>2 |]
      ==> prime_elem ?z",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5))),
              template_app
               (template_hole 7,
                template_app
                 (template_hole 4,
                  template_app (template_hole 4, template_hole 5))))
            ),
        template_equation
         (template_app (template_hole 2, template_var 0),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_hole 7,
              template_app (template_hole 4, template_hole 5))))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Gaussian_Integers.prime_cong_1_mod_4_gauss_int_norm_exists",
     "[| prime ?p; [?p = 1] (mod 4) |]
      ==> EX z. gauss_int_norm z = ?p & 0 < ReZ z & 0 < ImZ z",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 0),
                template_hole 11),
              template_app
               (template_hole 10,
                template_app
                 (template_hole 9,
                  template_app (template_hole 9, template_hole 8))))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Gaussian_Integers.prime_elem_power_mult_dvdI",
     "[| prime_elem ?p; ?p ^ ?n dvd ?c; ?b dvd ?c; ~ ?p dvd ?b |]
      ==> ?p ^ ?n * ?b dvd ?c",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 0)
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2)),
                 template_var 0)),
             template_var 1)
           ))),
    ("Gaussian_Integers.prime_elem_gauss_int_iff",
     "prime_elem ?z =
      (prime (gauss_int_norm ?z) |
       (EX p. gauss_int_norm ?z = p\<^sup>2 & prime p & [p = 3] (mod 4)))",
     template_equation
      (template_app (template_hole 12, template_var 0),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_hole 10,
             template_app (template_hole 9, template_var 0))),
         template_app (template_hole 8, t_empty)))),
    ("Gaussian_Integers.gauss_int_norm_eq_prime_squareD",
     "[| prime ?p; [?p = 3] (mod 4); gauss_int_norm ?z = ?p\<^sup>2 |]
      ==> normalize ?z = of_nat ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 1),
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_hole 7))),
              template_app
               (template_hole 9,
                template_app
                 (template_hole 6,
                  template_app (template_hole 6, template_hole 7))))
            ),
        template_equation
         (template_app (template_hole 4, template_var 0),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_hole 9,
              template_app (template_hole 6, template_hole 7))))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Gaussian_Integers.prime_square_sum_nat_decomp_eqI",
     "[| prime ?p; ?x\<^sup>2 + ?y\<^sup>2 = ?p; ?x <= ?y |]
      ==> prime_square_sum_nat_decomp ?p = (?x, ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_app
                 (template_hole 6,
                  template_app (template_hole 5, template_hole 4)))),
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4)))),
          template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Gaussian_Integers.multiplicity_prime_cong_1_mod_4_aux",
     "[| prime_elem ?p; 0 < ReZ ?p; 0 < ImZ ?p; ImZ ?p ~= ReZ ?p |]
      ==> multiplicity ?p (of_nat ?c) =
          multiplicity (gauss_int_norm ?p) ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_than, template_hole 9,
          template_app (template_hole 7, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 8, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Gaussian_Integers.prime_1_mod_4_sum_of_squares_unique",
     "[| prime ?p; [?p = 1] (mod 4) |]
      ==> EX! (x, y). x <= y & x\<^sup>2 + y\<^sup>2 = ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 0),
                template_hole 10),
              template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_hole 8, template_hole 7))))
            )],
       template_predicate
        (
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))
           ))),
    ("Gaussian_Integers.prime_square_sum_nat_decomp_correct",
     "[| prime ?p; ?p = 2 | [?p = 1] (mod 4) |]
      ==> (fst (prime_square_sum_nat_decomp ?p))\<^sup>2 +
          (snd (prime_square_sum_nat_decomp ?p))\<^sup>2 =
          ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 0),
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_hole 7)))),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 0),
                  template_hole 5),
                template_app
                 (template_hole 9,
                  template_app
                   (template_hole 8,
                    template_app (template_hole 8, template_hole 7)))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0))),
               template_app
                (template_hole 9,
                 template_app (template_hole 8, template_hole 7)))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 0))),
             template_app
              (template_hole 9,
               template_app (template_hole 8, template_hole 7)))),
         template_var 0))),
    ("Gaussian_Integers.multiplicity_prime_cong_1_mod_4",
     "[| prime_elem ?p; 0 < ReZ ?p; 0 < ImZ ?p; ImZ ?p ~= ReZ ?p |]
      ==> multiplicity (gauss_int_norm ?p) (gauss_int_norm ?z) =
          multiplicity ?p ?z + multiplicity (gauss_cnj ?p) ?z",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 9, template_var 1)),
        template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 8, template_var 1)),
        template_negation
         (
            template_equation
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0))))),
    ("Gaussian_Integers.prime_sum_of_squares_unique",
     "[| prime ?p; ?p = 2 | [?p = 1] (mod 4) |]
      ==> EX! (x, y). x <= y & x\<^sup>2 + y\<^sup>2 = ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 0),
                  template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_hole 8)))),
              template_app
               (template_app
                 (template_app (template_hole 7, template_var 0),
                  template_hole 6),
                template_app
                 (template_hole 10,
                  template_app
                   (template_hole 9,
                    template_app (template_hole 9, template_hole 8)))))
            )],
       template_predicate
        (
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))
           ))),
    ("Gaussian_Integers.prime_1_mod_4_sum_of_squares_unique_aux",
     "[| prime ?p; [?p = 1] (mod 4); ?x\<^sup>2 + ?y\<^sup>2 = ?p |]
      ==> 0 < ?x & 0 < ?y & ?x ~= ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_hole 10),
              template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_hole 8, template_hole 7))))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_hole 7)))),
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7)))),
          template_var 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0)),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0))))
           ))),
    ("Gaussian_Integers.prime_square_sum_nat_decomp_code_aux",
     "[| prime ?p; ?p = 2 | [?p = 1] (mod 4) |]
      ==> prime_square_sum_nat_decomp ?p =
          the_elem
           (Set.filter (%(x, y). x\<^sup>2 + y\<^sup>2 = ?p)
             (SIGMA x:{0..?p}. {x..?p}))",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 0),
                  template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_hole 12)))),
              template_app
               (template_app
                 (template_app (template_hole 11, template_var 0),
                  template_hole 10),
                template_app
                 (template_hole 14,
                  template_app
                   (template_hole 13,
                    template_app (template_hole 13, template_hole 12)))))
            )],
       template_equation
        (template_app (template_hole 8, template_var 0),
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6, template_app (template_hole 5, t_empty)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0)),
               t_empty)))))),
    ("Gaussian_Integers.prime_square_sum_nat_decomp_code",
     "prime_square_sum_nat_decomp ?p =
      (if prime ?p & (?p = 2 | [?p = 1] (mod 4))
       then the_elem
             (Set.filter (%(x, y). x\<^sup>2 + y\<^sup>2 = ?p)
               (SIGMA x:{0..?p}. {x..?p}))
       else (0, 0))",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 18,
                 template_app
                  (template_app
                    (template_hole 17,
                     template_app (template_hole 16, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_app (template_hole 14, template_var 0),
                         template_app
                          (template_hole 13,
                           template_app
                            (template_hole 12, template_hole 11)))),
                     template_app
                      (template_app
                        (template_app (template_hole 10, template_var 0),
                         template_hole 9),
                       template_app
                        (template_hole 13,
                         template_app
                          (template_hole 12,
                           template_app
                            (template_hole 12, template_hole 11))))))),
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 6, t_empty)),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_var 0)),
                     t_empty)))),
             template_app
              (template_app (template_hole 0, template_hole 1),
               template_hole 1))
           ))),
    ("Gaussian_Integers.minimal_QuadRes_neg1",
     "[| QuadRes (int ?n) (- 1); 1 < ?n; odd ?n;
         !!x. [| x <= (?n - 1) div 2; [x\<^sup>2 + 1 = 0] (mod ?n) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1)),
              template_app (template_hole 16, template_hole 15))
            ),
        template_inequation (less_than, template_hole 13, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_hole 10,
                      template_app (template_hole 9, template_hole 8))),
                  template_var 1)
                )
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Gaussian_Integers.gauss_int_prime_classification",
     "[| prime ?x; ?x = 1 + gauss_i ==> ?thesis;
         !!p. [| ?x = of_nat p; prime p; [p = 3] (mod 4) |] ==> ?thesis;
         [| prime (gauss_int_norm ?x); [gauss_int_norm ?x = 1] (mod 4);
            0 < ReZ ?x; 0 < ImZ ?x; ReZ ?x ~= ImZ ?x |]
         ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 1)),
        template_implication
         ([template_equation
            (template_var 1,
             template_app
              (template_app (template_hole 18, template_hole 17),
               template_hole 16))],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_hole 13,
                 template_app (template_hole 7, template_var 1))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_hole 12,
                       template_app (template_hole 7, template_var 1)),
                     template_hole 6),
                   template_app
                    (template_hole 11,
                     template_app
                      (template_hole 8,
                       template_app (template_hole 8, template_hole 9))))
                 )],
            template_implication
             ([template_inequation
                (less_than, template_hole 4,
                 template_app (template_hole 3, template_var 1))],
              template_implication
               ([template_inequation
                  (less_than, template_hole 4,
                   template_app (template_hole 2, template_var 1))],
                template_implication
                 ([template_negation
                    (
                       template_equation
                        (template_app (template_hole 3, template_var 1),
                         template_app (template_hole 2, template_var 1))
                       )],
                  template_predicate (template_var 0))))))],
       template_predicate (template_var 0)))]
