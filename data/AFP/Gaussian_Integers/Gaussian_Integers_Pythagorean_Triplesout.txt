Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
  Proving monotonicity ...
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.FuncSet"
### 0.555s elapsed time, 2.204s cpu time, 0.141s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.578s elapsed time, 2.304s cpu time, 0.141s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.597s elapsed time, 2.387s cpu time, 0.141s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Function_Algebras"
### 0.205s elapsed time, 0.802s cpu time, 0.123s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.298s elapsed time, 4.986s cpu time, 0.801s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
### theory "HOL-Library.Infinite_Set"
### 0.639s elapsed time, 2.366s cpu time, 0.628s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Algebra.Congruence"
### 1.016s elapsed time, 3.841s cpu time, 0.827s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
### theory "HOL-Library.More_List"
### 0.278s elapsed time, 1.088s cpu time, 0.166s GC time
Loading theory "HOL-Library.Power_By_Squaring" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Mod_Exp")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size_list size <*mlex*> {}"
class monoid_mult = semigroup_mult + power +
  assumes "mult_1_left": "!!a. (1::'a) * a = a"
    and "mult_1_right": "!!a. a * (1::'a) = a"
### theory "HOL-Library.Power_By_Squaring"
### 0.202s elapsed time, 0.783s cpu time, 0.091s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
### theory "HOL-Library.Nat_Bijection"
### 0.510s elapsed time, 2.010s cpu time, 0.167s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.238s elapsed time, 0.933s cpu time, 0.097s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
consts
  shift :: "'a list => 'a stream => 'a stream"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 1.283s elapsed time, 4.861s cpu time, 1.310s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  mset :: "'a list => 'a multiset"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.374s elapsed time, 5.228s cpu time, 1.350s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
Found termination order: "size <*mlex*> {}"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
Found termination order: "size <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
Found termination order: "size <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.291s elapsed time, 4.861s cpu time, 1.536s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.501s elapsed time, 5.688s cpu time, 1.700s GC time
Loading theory "HOL-Number_Theory.Fib" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Algebra.Complete_Lattice"
### 0.820s elapsed time, 3.228s cpu time, 0.520s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 3.098s elapsed time, 11.798s cpu time, 3.178s GC time
Loading theory "Draft.Templates" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Number_Theory.Fib"
### 0.291s elapsed time, 1.146s cpu time, 0.128s GC time
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.115s elapsed time, 0.413s cpu time, 0.156s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates")
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 5.238s elapsed time, 19.459s cpu time, 4.476s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.706s elapsed time, 2.216s cpu time, 0.250s GC time
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
### theory "HOL-Algebra.Group"
### 2.204s elapsed time, 6.425s cpu time, 2.330s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.506s elapsed time, 1.552s cpu time, 0.210s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module")
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### theory "HOL-Algebra.Coset"
### 1.319s elapsed time, 4.042s cpu time, 0.505s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### theory "HOL-Algebra.Generated_Groups"
### 0.718s elapsed time, 2.209s cpu time, 0.284s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "HOL-Algebra.Elementary_Groups"
### 0.507s elapsed time, 1.537s cpu time, 0.086s GC time
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Ring"
### 2.774s elapsed time, 7.789s cpu time, 0.823s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
Loading theory "HOL-Algebra.Module" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.428s elapsed time, 4.341s cpu time, 0.329s GC time
### theory "HOL-Algebra.AbelCoset"
### 2.498s elapsed time, 6.537s cpu time, 0.463s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom")
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 7.182s elapsed time, 19.590s cpu time, 3.527s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
### theory "HOL-Algebra.Ideal"
### 2.055s elapsed time, 6.321s cpu time, 0.504s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
### theory "HOL-Algebra.RingHom"
### 0.878s elapsed time, 2.700s cpu time, 0.349s GC time
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Polynomial"
### 6.078s elapsed time, 18.671s cpu time, 1.861s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra")
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.289s elapsed time, 0.900s cpu time, 0.147s GC time
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 9.084s elapsed time, 25.356s cpu time, 2.567s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Nth_Powers")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Computational_Algebra.Primes"
### 0.425s elapsed time, 1.691s cpu time, 0.193s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra")
locale fract_as_normalized_quot
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
### theory "HOL-Computational_Algebra.Nth_Powers"
### 0.250s elapsed time, 0.989s cpu time, 0.184s GC time
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.731s elapsed time, 2.906s cpu time, 0.376s GC time
Loading theory "HOL-Number_Theory.Cong" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
### theory "HOL-Computational_Algebra.Squarefree"
### 0.222s elapsed time, 0.870s cpu time, 0.200s GC time
Loading theory "HOL-Number_Theory.Eratosthenes" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory")
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
class unique_euclidean_semiring = euclidean_semiring_cancel +
  fixes division_segment :: "'a => 'a"
  assumes
    "euclidean_size_mult":
      "!!a b. euclidean_size (a * b) = euclidean_size a * euclidean_size b"
  assumes "is_unit_division_segment": "!!a. is_unit (division_segment a)"
    and
    "division_segment_mult":
      "!!a b.
          [| a ~= (0::'a); b ~= (0::'a) |]
          ==> division_segment (a * b) =
              division_segment a * division_segment b"
    and
    "division_segment_mod":
      "!!b a.
          [| b ~= (0::'a); ~ b dvd a |]
          ==> division_segment (a mod b) = division_segment b"
  assumes
    "div_bounded":
      "!!b r q.
          [| b ~= (0::'a); division_segment r = division_segment b;
             euclidean_size r < euclidean_size b |]
          ==> (q * b + r) div b = q"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
### theory "HOL-Number_Theory.Eratosthenes"
### 0.276s elapsed time, 1.086s cpu time, 0.171s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
### Cannot skip proof of schematic goal statement
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "HOL-Number_Theory.Cong"
### 1.094s elapsed time, 4.315s cpu time, 0.640s GC time
Loading theory "HOL-Number_Theory.Mod_Exp" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory")
class euclidean_semiring_cancel = euclidean_semiring +
  assumes
    "div_mult_self1":
      "!!b a c. b ~= (0::'a) ==> (a + c * b) div b = c + a div b"
    and
    "div_mult_mult1":
      "!!c a b. c ~= (0::'a) ==> c * a div (c * b) = a div b"
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
### theory "HOL-Number_Theory.Mod_Exp"
### 1.838s elapsed time, 6.834s cpu time, 4.922s GC time
Loading theory "HOL-Number_Theory.Prime_Powers" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 2.621s elapsed time, 9.924s cpu time, 5.270s GC time
Loading theory "HOL-Number_Theory.Totient" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  totient_naive :: "nat => nat => nat => nat"
### theory "HOL-Algebra.UnivPoly"
### 10.685s elapsed time, 33.765s cpu time, 7.898s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
### theory "HOL-Number_Theory.Prime_Powers"
### 0.900s elapsed time, 3.533s cpu time, 0.442s GC time
### theory "HOL-Number_Theory.Totient"
### 0.773s elapsed time, 3.043s cpu time, 0.363s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 5.441s elapsed time, 19.853s cpu time, 6.781s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.525s elapsed time, 1.090s cpu time, 0.093s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 2.693s elapsed time, 6.362s cpu time, 1.076s GC time
Loading theory "HOL-Number_Theory.Residues" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory")
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 1.936s elapsed time, 4.227s cpu time, 0.608s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers")
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
### theory "HOL-Number_Theory.Residues"
### 1.593s elapsed time, 3.428s cpu time, 0.366s GC time
Loading theory "HOL-Number_Theory.Euler_Criterion" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity" via "HOL-Number_Theory.Gauss")
Loading theory "HOL-Number_Theory.Pocklington" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Number_Theory.Euler_Criterion"
### 0.140s elapsed time, 0.421s cpu time, 0.000s GC time
Loading theory "HOL-Number_Theory.Gauss" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity")
locale GAUSS
  fixes p :: "nat"
    and a :: "int"
  assumes "GAUSS p a"
### theory "HOL-Number_Theory.Pocklington"
### 0.332s elapsed time, 1.032s cpu time, 0.183s GC time
Loading theory "HOL-Number_Theory.Residue_Primitive_Roots" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Number_Theory.Gauss"
### 0.241s elapsed time, 0.755s cpu time, 0.183s GC time
Loading theory "HOL-Number_Theory.Quadratic_Reciprocity" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers" via "HOL-Number_Theory.Number_Theory")
Proofs for inductive predicate(s) "residue_primroot"
  Proving monotonicity ...
locale QR
  fixes p :: "nat"
    and q :: "nat"
  assumes "QR p q"
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 1.314s elapsed time, 3.280s cpu time, 0.327s GC time
### theory "HOL-Number_Theory.Residue_Primitive_Roots"
### 0.313s elapsed time, 0.888s cpu time, 0.169s GC time
### theory "HOL-Number_Theory.Quadratic_Reciprocity"
### 0.374s elapsed time, 0.892s cpu time, 0.169s GC time
Loading theory "HOL-Number_Theory.Number_Theory" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples" via "Draft.Gaussian_Integers")
### theory "HOL-Number_Theory.Number_Theory"
### 1.176s elapsed time, 1.248s cpu time, 0.094s GC time
Loading theory "Draft.Gaussian_Integers" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates" via "Draft.Gaussian_Integers_Pythagorean_Triples")
### Ignoring duplicate rewrite rule:
### multiplicity (0::?'a1) ?x1 == 0
consts
  gauss_i :: "gauss_int"
bundle gauss_int_notation
bundle no_gauss_int_notation
bundle gauss_int_output_notation
consts
  gauss2complex :: "gauss_int => complex"
consts
  gauss_cnj :: "gauss_int => gauss_int"
instantiation
  gauss_int :: comm_ring_1
  uminus_gauss_int == uminus :: gauss_int => gauss_int
  one_gauss_int == one_class.one :: gauss_int
  times_gauss_int == times :: gauss_int => gauss_int => gauss_int
  zero_gauss_int == zero_class.zero :: gauss_int
  minus_gauss_int == minus :: gauss_int => gauss_int => gauss_int
  plus_gauss_int == plus :: gauss_int => gauss_int => gauss_int
consts
  zero_gauss_int :: "gauss_int"
consts
  one_gauss_int :: "gauss_int"
consts
  uminus_gauss_int :: "gauss_int => gauss_int"
consts
  plus_gauss_int :: "gauss_int => gauss_int => gauss_int"
consts
  minus_gauss_int :: "gauss_int => gauss_int => gauss_int"
consts
  times_gauss_int :: "gauss_int => gauss_int => gauss_int"
consts
  round_complex :: "complex => gauss_int"
instantiation
  gauss_int :: algebraic_semidom
  divide_gauss_int == divide :: gauss_int => gauss_int => gauss_int
instantiation
  gauss_int :: semidom_divide_unit_factor
  unit_factor_gauss_int == unit_factor :: gauss_int => gauss_int
instantiation
  gauss_int :: normalization_semidom
  normalize_gauss_int == normalize :: gauss_int => gauss_int
instantiation
  gauss_int :: idom_modulo
  modulo_gauss_int == modulo :: gauss_int => gauss_int => gauss_int
instantiation
  gauss_int :: euclidean_ring
  euclidean_size_gauss_int == euclidean_size :: gauss_int => nat
instantiation
  gauss_int :: euclidean_ring_gcd
  Gcd_gauss_int == Gcd :: gauss_int set => gauss_int
  Lcm_gauss_int == Lcm :: gauss_int set => gauss_int
  gcd_gauss_int == gcd :: gauss_int => gauss_int => gauss_int
  lcm_gauss_int == lcm :: gauss_int => gauss_int => gauss_int
"- \<i>\<^sub>\<int>"
  :: "gauss_int"
"6 + 2 * \<i>\<^sub>\<int>"
  :: "gauss_int"
"5"
  :: "gauss_int"
locale noninert_gauss_int_prime
  fixes p :: "nat"
  assumes "noninert_gauss_int_prime p"
### theory "Draft.Gaussian_Integers"
### 1.615s elapsed time, 2.574s cpu time, 0.353s GC time
Loading theory "Draft.Gaussian_Integers_Pythagorean_Triples" (required by "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates")
### theory "Draft.Gaussian_Integers_Pythagorean_Triples"
### 0.098s elapsed time, 0.099s cpu time, 0.000s GC time
Loading theory "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates"
val templateLemmas =
   [("Gaussian_Integers_Pythagorean_Triples.prim_pyth_triple_commute",
     "prim_pyth_triple ?x ?y ?z = prim_pyth_triple ?y ?x ?z",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 2),
         template_var 0))),
    ("Gaussian_Integers_Pythagorean_Triples.prim_pyth_triple_aux",
     "?v <= ?u ==>
      (2 * ?u * ?v)\<^sup>2 + (?u\<^sup>2 - ?v\<^sup>2)\<^sup>2 =
      (?u\<^sup>2 + ?v\<^sup>2)\<^sup>2",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 1))),
                       template_var 0)),
                   template_var 1)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1)))),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1)))),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)))))),
    ("Gaussian_Integers_Pythagorean_Triples.prim_pyth_tripleI1",
     "[| 0 < ?v; ?v < ?u; coprime ?u ?v; ~ (odd ?u & odd ?v) |]
      ==> prim_pyth_triple (2 * ?u * ?v) (?u\<^sup>2 - ?v\<^sup>2)
           (?u\<^sup>2 + ?v\<^sup>2)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app
                           (template_hole 7,
                            template_app
                             (template_hole 6, template_hole 5))),
                        template_var 0))),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_hole 5))),
                      template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6, template_hole 5))),
                       template_var 0)),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5)))),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5)))),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5)))))
           ))),
    ("Gaussian_Integers_Pythagorean_Triples.prim_pyth_tripleI2",
     "[| 0 < ?v; ?v < ?u; coprime ?u ?v; ~ (odd ?u & odd ?v) |]
      ==> prim_pyth_triple (?u\<^sup>2 - ?v\<^sup>2) (2 * ?u * ?v)
           (?u\<^sup>2 + ?v\<^sup>2)",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 1),
        template_inequation (less_than, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_hole 10,
                      template_app
                       (template_app
                         (template_hole 8,
                          template_app
                           (template_hole 7,
                            template_app
                             (template_hole 6, template_hole 5))),
                        template_var 0))),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_hole 7,
                          template_app (template_hole 6, template_hole 5))),
                      template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_hole 5)))),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_hole 5))),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5)))),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5)))))
           ))),
    ("Gaussian_Integers_Pythagorean_Triples.prim_pyth_triple_iff",
     "prim_pyth_triple ?x ?y ?z =
      (EX u v.
          0 < v &
          v < u &
          coprime u v &
          ~ (odd u & odd v) &
          (?x = 2 * u * v & ?y = u\<^sup>2 - v\<^sup>2 |
           ?x = u\<^sup>2 - v\<^sup>2 & ?y = 2 * u * v) &
          ?z = u\<^sup>2 + v\<^sup>2)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 16, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 15, t_empty))),
    ("Gaussian_Integers_Pythagorean_Triples.primitive_pythagorean_tripleE_int",
     "[| ?z\<^sup>2 = ?x\<^sup>2 + ?y\<^sup>2; coprime ?x ?y;
         !!u v.
            [| coprime u v; ~ (odd u & odd v);
               ?x = 2 * u * v & ?y = u\<^sup>2 - v\<^sup>2 |
               ?x = u\<^sup>2 - v\<^sup>2 & ?y = 2 * u * v |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 13, template_var 3),
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_hole 10))),
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 13, template_var 2),
                template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_hole 10)))),
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_hole 12,
                template_app (template_hole 11, template_hole 10))))),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("Gaussian_Integers_Pythagorean_Triples.prim_pyth_tripleE",
     "[| prim_pyth_triple ?x ?y ?z;
         !!u v.
            [| 0 < v; v < u; coprime u v; ~ (odd u & odd v);
               ?z = u\<^sup>2 + v\<^sup>2;
               ?x = 2 * u * v & ?y = u\<^sup>2 - v\<^sup>2 |
               ?x = u\<^sup>2 - v\<^sup>2 & ?y = 2 * u * v |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Gaussian_Integers_Pythagorean_TriplesMoreTemplates"
### 0.906s elapsed time, 1.305s cpu time, 0.196s GC time
val it = (): unit
