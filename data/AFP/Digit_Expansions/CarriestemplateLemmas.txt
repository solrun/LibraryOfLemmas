   [("Carries.carry_bounded", "bin_carry ?a ?b ?k <= 1",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_hole 0)),
    ("Carries.bin_narry_equiv", "bin_narry ?a ?b ?c = bin_narry2 ?a ?b ?c",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Carries.bin_carry_bounded",
     "bin_carry ?a ?b ?k = bin_carry ?a ?b ?k mod 2",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Carries.no_carry_mult_equiv",
     "(ALL k. ?a \<exclamdown> k * ?b \<exclamdown> k = 0) =
      (ALL k. bin_carry ?a ?b k = 0)",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app (template_hole 5, t_empty))),
    ("Carries.sum_digit_formula",
     "(?a + ?b) \<exclamdown> ?k =
      (?a \<exclamdown> ?k + ?b \<exclamdown> ?k + bin_carry ?a ?b ?k) mod
      2",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Carries.sum_carry_formula",
     "bin_carry ?a ?b (?k + 1) =
      (?a \<exclamdown> ?k + ?b \<exclamdown> ?k + bin_carry ?a ?b ?k) div
      2",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Carries.dif_digit_formula",
     "?b <= ?a -->
      (?a - ?b) \<exclamdown> ?k =
      (?a \<exclamdown> ?k + ?b \<exclamdown> ?k + bin_narry ?a ?b ?k) mod
      2",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_var 2)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 7, template_var 1),
                           template_var 0)),
                       template_app
                        (template_app (template_hole 7, template_var 2),
                         template_var 0))),
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 2),
                     template_var 0))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))
         )),
    ("Carries.dif_narry_formula",
     "?b <= ?a -->
      bin_narry ?a ?b (?k + 1) =
      (if ?a \<exclamdown> ?k < ?b \<exclamdown> ?k + bin_narry ?a ?b ?k
       then 1 else 0)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 2),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4))),
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 0)),
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app (template_hole 1, template_var 2),
                           template_var 0)),
                       template_app
                        (template_app
                          (template_app (template_hole 6, template_var 1),
                           template_var 2),
                         template_var 0)))),
                 template_hole 4),
               template_hole 0)))
         )),
    ("Carries.carry_digit_impl",
     "bin_carry ?a ?b ?k ~= 0 ==>
      EX r<?k. ?a \<exclamdown> r + ?b \<exclamdown> r = 2",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 8)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Carries.rev_induct",
     "[| ?i <= ?k; ?P ?k; !!i. [| i <= ?k; ?P i |] ==> ?P (i - 1) |]
      ==> ?P ?i",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate (template_app (template_var 0, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Carries.div_sub",
     "(?a - ?b) div ?c =
      (if ?a mod ?c < ?b mod ?c then ?a div ?c - ?b div ?c - 1
       else ?a div ?c - ?b div ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 5, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 0))),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))))),
    ("Carries.no_carry",
     "ALL r<?n. ?a \<exclamdown> r + ?b \<exclamdown> r <= 1 ==>
      (?a + ?b) \<exclamdown> ?n =
      (?a \<exclamdown> ?n + ?b \<exclamdown> ?n) mod 2",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 2)),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 2))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0))))))]
