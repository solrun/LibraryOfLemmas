Loading theory "Draft.Bits_Digits" (required by "Draft.Bits_DigitsMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Bits_DigitsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Bits_DigitsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Bits_DigitsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.499s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Bits_DigitsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Bits_Digits"
### 0.164s elapsed time, 0.673s cpu time, 0.050s GC time
### theory "HOL-Library.Set_Algebras"
### 0.220s elapsed time, 0.851s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Bits_DigitsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.353s elapsed time, 1.260s cpu time, 0.152s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Bits_DigitsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.704s elapsed time, 2.163s cpu time, 0.294s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.901s elapsed time, 2.601s cpu time, 0.727s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.808s elapsed time, 4.115s cpu time, 0.911s GC time
Loading theory "Draft.Templates" (required by "Draft.Bits_DigitsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Bits_DigitsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.482s elapsed time, 0.539s cpu time, 0.070s GC time
Loading theory "Draft.Bits_DigitsMoreTemplates"
val templateLemmas =
   [("Bits_Digits.nth_bit_bounded", "?a \<exclamdown> ?k <= 1",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_hole 0)),
    ("Bits_Digits.nth_digit_base2_equiv",
     "?a \<exclamdown> ?k = nth_digit ?a ?k 2",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Bits_Digits.aux1_digit_wise_equiv",
     "(ALL k. ?a \<exclamdown> k = 0) = (?a = 0)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Bits_Digits.aux0_digit_wise_equiv",
     "0 < ?a ==> EX k. ?a \<exclamdown> k = 1",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Bits_Digits.digit_wise_equiv",
     "(?a = ?b) = (ALL k. ?a \<exclamdown> k = ?b \<exclamdown> k)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Bits_Digits.nth_digit_bounded",
     "1 < ?b ==> nth_digit ?a ?k ?b <= ?b - 1",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_hole 3)))),
    ("Bits_Digits.digit_sum_repr_variant",
     "?n = (SUM k<?n. ?n \<exclamdown> k * 2 ^ k)",
     template_equation
      (template_var 0,
       template_app
        (template_app (template_hole 7, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Bits_Digits.digit_shift_preserves_digits",
     "1 < ?b ==> nth_digit (?b * ?y) (Suc ?t) ?b = nth_digit ?y ?t ?b",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_var 2)))),
    ("Bits_Digits.aux1_digit_wise_gen_equiv",
     "1 < ?b ==> (ALL k. nth_digit ?a k ?b = 0) = (?a = 0)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1)],
       template_implication
        ([template_predicate (template_app (template_hole 3, t_empty))],
         template_equation (template_var 0, template_hole 0)))),
    ("Bits_Digits.digit_gen_sum_repr_variant",
     "1 < ?b ==> ?n = (SUM k<?n. nth_digit ?n k ?b * ?b ^ k)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Bits_Digits.aux0_digit_wise_gen_equiv",
     "[| 1 < ?b; 0 < ?a |] ==> EX k. nth_digit ?a k ?b ~= 0",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 1),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Bits_Digits.aux2_digit_wise_gen_equiv",
     "(ALL r<?k. nth_digit ?a r ?b = 0) --> ?a mod ?b ^ ?k = 0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))),
             template_hole 2))
         )),
    ("Bits_Digits.digit_wise_gen_equiv",
     "1 < ?b ==>
      (?x = ?y) = (ALL k. nth_digit ?x k ?b = nth_digit ?y k ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app (template_hole 1, t_empty)))),
    ("Bits_Digits.general_digit_base",
     "[| ?t2.0 < ?t1.0; 1 < ?b |]
      ==> nth_digit (?a * ?b ^ ?t1.0) ?t2.0 ?b = 0",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2))),
             template_var 3),
           template_var 1),
         template_hole 0))),
    ("Bits_Digits.aux2_digit_wise_equiv",
     "(ALL r<?k. ?a \<exclamdown> r = 0) --> ?a mod 2 ^ ?k = 0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10, template_app (template_hole 9, t_empty)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0))),
                   template_var 1))),
             template_hole 5))
         )),
    ("Bits_Digits.obtain_smallest",
     "?P ?n ==> EX k<=?n. ?P k & (ALL a<k. ~ ?P a)",
     template_implication
      ([template_predicate (template_app (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Bits_Digits.digit_gen_pow2_reduct",
     "?k < ?c ==>
      nth_digit ?a ?t (2 ^ ?c) \<exclamdown> ?k =
      ?a \<exclamdown> (?c * ?t + ?k)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))),
                 template_var 2))),
           template_var 3),
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 3))))),
    ("Bits_Digits.digit_sum_repr",
     "?n < 2 ^ ?c ==> ?n = (SUM k<?c. ?n \<exclamdown> k * 2 ^ k)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Bits_Digits.aux_even_pow2_factor",
     "0 < ?a ==> EX k b. ?a = 2 ^ k * b & odd b",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 0)],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Bits_Digits.digit_shift_inserts_zero_least_siginificant_digit",
     "[| 0 < ?t; 1 < ?b |]
      ==> nth_digit (1 + ?b * ?y) ?t ?b = nth_digit (?b * ?y) ?t ?b",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 4),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2),
           template_var 1)))),
    ("Bits_Digits.digit_gen_sum_repr",
     "[| ?n < ?b ^ ?c; 1 < ?b |]
      ==> ?n = (SUM k<?c. nth_digit ?n k ?b * ?b ^ k)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_hole 5, template_var 1)],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Bits_Digits.aux2_digit_gen_sum_repr",
     "[| ?n < ?b ^ ?c; ?r < ?c |]
      ==> nth_digit (?a * ?b ^ ?c + ?n) ?r ?b = nth_digit ?n ?r ?b",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app
           (template_app (template_hole 4, template_var 3),
            template_var 2)),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_var 2))),
                 template_var 4)),
             template_var 1),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 1),
           template_var 3)))),
    ("Bits_Digits.aux_gen_b_factor",
     "[| 0 < ?a; 1 < ?b |] ==> EX k c. ?a = ?b ^ k * c & c mod ?b ~= 0",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 1),
        template_inequation (less_than, template_hole 7, template_var 0)],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Bits_Digits.aux2_digit_sum_repr",
     "[| ?n < 2 ^ ?c; ?r < ?c |]
      ==> (?a * 2 ^ ?c + ?n) \<exclamdown> ?r = ?n \<exclamdown> ?r",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 2)),
        template_inequation (less_than, template_var 1, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_hole 4))),
                     template_var 2))),
               template_var 3)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 1)))),
    ("Bits_Digits.aux3_digit_sum_repr",
     "?b < 2 ^ ?r ==>
      (?a * 2 ^ ?r + ?b) \<exclamdown> ?r = (?a * 2 ^ ?r) \<exclamdown> ?r",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_hole 4))),
                     template_var 1))),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_var 1))),
           template_var 1)))),
    ("Bits_Digits.digit_sum_index_variant",
     "?n < ?r -->
      (SUM k<?n. ?n \<exclamdown> k * 2 ^ k) =
      (SUM k<?r. ?n \<exclamdown> k * 2 ^ k)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, t_empty),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app (template_hole 7, t_empty),
               template_app (template_hole 0, template_var 0))))
         )),
    ("Bits_Digits.aux3_digit_gen_sum_repr",
     "[| ?d < ?b ^ ?r; 1 < ?b |]
      ==> nth_digit (?a * ?b ^ ?r + ?d) ?r ?b =
          nth_digit (?a * ?b ^ ?r) ?r ?b",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 5, template_var 2),
            template_var 1)),
        template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1))),
                 template_var 3)),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1))),
             template_var 1),
           template_var 2)))),
    ("Bits_Digits.aux1_digit_sum_repr",
     "[| ?n < 2 ^ ?c; ?r < ?c |]
      ==> (SUM k<?c. ?n \<exclamdown> k * 2 ^ k) \<exclamdown> ?r =
          ?n \<exclamdown> ?r",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 1)),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app (template_hole 0, template_var 1))),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Bits_Digits.digit_gen_sum_index_variant",
     "[| 1 < ?b; ?n < ?r |]
      ==> (SUM k<?n. nth_digit ?n k ?b * ?b ^ k) =
          (SUM k<?r. nth_digit ?n k ?b * ?b ^ k)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Bits_Digits.aux1_digit_gen_sum_repr",
     "[| ?n < ?b ^ ?c; ?r < ?c; 1 < ?b |]
      ==> nth_digit (SUM k<?c. nth_digit ?n k ?b * ?b ^ k) ?r ?b =
          nth_digit ?n ?r ?b",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 6, template_var 2),
            template_var 1)),
        template_inequation (less_than, template_var 0, template_var 1),
        template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty),
                 template_app (template_hole 0, template_var 1))),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 3),
             template_var 0),
           template_var 2)))),
    ("Bits_Digits.digit_gen_equiv",
     "1 < ?b ==>
      (?d = nth_digit ?a ?k ?b) =
      (EX x y.
          ?a = x * ?b ^ (?k + 1) + ?d * ?b ^ ?k + y &
          ?d < ?b & y < ?b ^ ?k)",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 3)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0),
             template_var 3)),
         template_app (template_hole 4, t_empty)))),
    ("Bits_Digits.nth_digit_gen_power_series",
     "ALL k. ?f k < 2 ^ Suc ?c ==>
      nth_digit (SUM k = 0..?q. ?f k * (2 ^ Suc ?c) ^ k) ?t (2 ^ Suc ?c) =
      (if ?t <= ?q then ?f ?t else 0)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, t_empty),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 1))),
             template_var 0),
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_hole 11,
                 template_app (template_hole 10, template_hole 9))),
             template_app (template_hole 8, template_var 2))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_app (template_var 3, template_var 0)),
           template_hole 2))))]:
   (string * thm * template) list
### theory "Draft.Bits_DigitsMoreTemplates"
### 0.300s elapsed time, 0.388s cpu time, 0.000s GC time
val it = (): unit
