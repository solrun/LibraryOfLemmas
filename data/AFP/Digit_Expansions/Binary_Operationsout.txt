Loading theory "Draft.Bits_Digits" (required by "Draft.Binary_OperationsMoreTemplates" via "Draft.Binary_Operations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Binary_OperationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Binary_OperationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Binary_OperationsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.554s cpu time, 0.055s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Binary_OperationsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Bits_Digits"
### 0.172s elapsed time, 0.704s cpu time, 0.055s GC time
Loading theory "Draft.Carries" (required by "Draft.Binary_OperationsMoreTemplates" via "Draft.Binary_Operations")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.239s elapsed time, 0.971s cpu time, 0.055s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Binary_OperationsMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Carries"
### 0.116s elapsed time, 0.448s cpu time, 0.111s GC time
Loading theory "Draft.Binary_Operations" (required by "Draft.Binary_OperationsMoreTemplates")
### theory "HOL-Library.Nat_Bijection"
### 0.348s elapsed time, 1.392s cpu time, 0.165s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Binary_OperationsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Binary_Operations"
### 0.316s elapsed time, 1.245s cpu time, 0.137s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.923s elapsed time, 3.122s cpu time, 0.742s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.017s elapsed time, 3.188s cpu time, 0.782s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.853s elapsed time, 4.752s cpu time, 1.000s GC time
Loading theory "Draft.Templates" (required by "Draft.Binary_OperationsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.063s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Binary_OperationsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.433s elapsed time, 0.438s cpu time, 0.000s GC time
Loading theory "Draft.Binary_OperationsMoreTemplates"
val templateLemmas =
   [("Binary_Operations.bitAND_commutes", "?m && ?n = ?n && ?m",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Binary_Operations.masks_leq", "?a \<preceq> ?b --> ?a <= ?b",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Binary_Operations.bitAND_1", "?a && 1 = ?a mod 2",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Binary_Operations.aux1_lm0241_pow2_up_bound", "EX p. ?a < 2 ^ Suc p",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Binary_Operations.bitAND_zero", "?n = 0 ==> ?m && ?n = 0",
     template_implication
      ([template_equation (template_var 1, template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_hole 1))),
    ("Binary_Operations.nth_digit_0", "?x <= 1 ==> ?x \<exclamdown> 0 = ?x",
     template_implication
      ([template_inequation (less_equals, template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 0))),
    ("Binary_Operations.masks_digit_leq",
     "?a \<preceq> ?b ==> ?a \<exclamdown> ?k <= ?b \<exclamdown> ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Binary_Operations.bitAND_digit_mult",
     "(?a && ?b) \<exclamdown> ?k =
      ?a \<exclamdown> ?k * ?b \<exclamdown> ?k",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Binary_Operations.masks_leq_equiv",
     "(?a \<preceq> ?b) =
      (ALL k. ?a \<exclamdown> k <= ?b \<exclamdown> k)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Binary_Operations.bitwise_leq",
     "(ALL k. ?a \<exclamdown> k <= ?b \<exclamdown> k) --> ?a <= ?b",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))
         )),
    ("Binary_Operations.aux_digit_shift",
     "(?a * 2 ^ ?t) \<exclamdown> (?l + ?t) = ?a \<exclamdown> ?l",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app (template_hole 6, template_var 2), template_var 0))),
    ("Binary_Operations.ortho_mult_equiv",
     "(?a \<bottom> ?b) =
      (ALL k. ?a \<exclamdown> k * ?b \<exclamdown> k = 0)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Binary_Operations.bitAND_zeroone",
     "[| ?a <= 1; ?b <= 1 |] ==> ?a && ?b <= 1",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Binary_Operations.aux3_lm0241_binom_bounds",
     "[| ?m <= 1; ?n <= 1 |] ==> ?m choose ?n <= 1",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Binary_Operations.bitAND_single_bit_mult_equiv",
     "[| ?a <= 1; ?b <= 1 |] ==> ?a * ?b = ?a && ?b",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 3),
        template_inequation (less_equals, template_var 0, template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Binary_Operations.bitAND_mult_equiv",
     "(ALL k.
          ?c \<exclamdown> k = ?a \<exclamdown> k * ?b \<exclamdown> k) =
      (?c = ?a && ?b)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_var 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Binary_Operations.masks_substr",
     "?a \<preceq> ?b ==> ?a div 2 ^ ?k \<preceq> ?b div 2 ^ ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0))),
                   template_var 0))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))),
                 template_var 0)))
           ))),
    ("Binary_Operations.digitwise_leq",
     "[| 1 < ?b; ALL t. nth_digit ?x t ?b <= nth_digit ?y t ?b |]
      ==> ?x <= ?y",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Binary_Operations.aux5_lm0241",
     "(ALL i. (?a + ?b) \<exclamdown> i choose ?b \<exclamdown> i = 1) -->
      ~ (?a \<exclamdown> ?i = 1 & ?b \<exclamdown> ?i = 1)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8, template_app (template_hole 7, t_empty)),
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 0)),
                   template_hole 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 0)),
                 template_hole 2))))
         )),
    ("Binary_Operations.aux2_lm0241_single_digit_binom",
     "[| ?a <= 1; ?b <= 1 |]
      ==> (~ (?a = 1 & ?b = 1)) = (?a + ?b choose ?b = 1)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 6),
        template_inequation (less_equals, template_var 0, template_hole 6)],
       template_bimplication
        (template_negation
          (
             template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_hole 6)),
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 6))
                 )
             ),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 0),
           template_hole 6)))),
    ("Binary_Operations.aux1_1_digit_lt_linear",
     "[| ?b < 2 ^ ?r; ?r <= ?k |] ==> bin_carry (?a * 2 ^ ?r) ?b ?k = 0",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 2)),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_var 2))),
             template_var 3),
           template_var 1),
         template_hole 0))),
    ("Binary_Operations.aux4_lm0241_prod_one",
     "ALL x. ?f x <= 1 ==> prod ?f {..?n} = 1 --> (ALL k<=?n. ?f k = 1)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, t_empty),
                     template_app (template_hole 0, template_var 0))),
                 template_hole 4)),
             template_app (template_hole 6, t_empty))
           ))),
    ("Binary_Operations.aux3_digit_lt_linear",
     "EX l. ?a \<exclamdown> l <= ?c \<exclamdown> l -->
            (?a * 2 ^ ?t) \<exclamdown> ?k
            <= (?c * 2 ^ ?t) \<exclamdown> ?k",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("Binary_Operations.aux2_digit_lt_linear",
     "EX k. (?a * 2 ^ ?t) \<exclamdown> k
            <= (?c * 2 ^ ?t) \<exclamdown> k -->
            ?a \<exclamdown> ?l <= ?c \<exclamdown> ?l",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("Binary_Operations.bitAND_rec",
     "?m && ?n = 2 * (?m div 2 && ?n div 2) + ?m mod 2 * (?n mod 2)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2)))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2)))))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))))))),
    ("Binary_Operations.aux1_bitAND_digit_mult",
     "0 < ?k & ?a mod 2 = 0 & ?b <= 1 ==>
      (?a + ?b) div 2 ^ ?k = ?a div 2 ^ ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 1),
                        template_app
                         (template_hole 7,
                          template_app
                           (template_hole 6, template_hole 5)))),
                    template_hole 10)),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_hole 5))),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_hole 5))),
             template_var 2))))),
    ("Binary_Operations.aux1_digit_lt_linear",
     "[| ?b < 2 ^ ?r; ?r <= ?k |]
      ==> (?a * 2 ^ ?r + ?b) \<exclamdown> ?k =
          (?a * 2 ^ ?r) \<exclamdown> ?k",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 2)),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_hole 5))),
                     template_var 2))),
               template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))),
                 template_var 2))),
           template_var 1)))),
    ("Binary_Operations.mask_linear",
     "[| ?b < 2 ^ ?t; ?d < 2 ^ ?t |]
      ==> (?a * 2 ^ ?t + ?b \<preceq> ?c * 2 ^ ?t + ?d) =
          (?a \<preceq> ?c & ?b \<preceq> ?d)",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 3)),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_hole 5))),
                     template_var 3))),
               template_var 4)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_hole 5))),
                   template_var 3))),
             template_var 2)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 4),
             template_var 2))))),
    ("Binary_Operations.bitAND_linear",
     "?b < 2 ^ ?k & ?d < 2 ^ ?k ==>
      ?a * 2 ^ ?k + ?b && ?c * 2 ^ ?k + ?d =
      (?a && ?c) * 2 ^ ?k + (?b && ?d)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, template_hole 4))),
                    template_var 3))),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4))),
                  template_var 3)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_hole 4))),
                     template_var 3))),
               template_var 4)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_hole 4))),
                   template_var 3))),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))),
                 template_var 3))),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 2))))),
    ("Binary_Operations.digit_lt_linear",
     "[| ?b < 2 ^ ?t; ?d < 2 ^ ?t |]
      ==> (ALL k.
              (?a * 2 ^ ?t + ?b) \<exclamdown> k
              <= (?c * 2 ^ ?t + ?d) \<exclamdown> k) =
          (ALL l.
              ?a \<exclamdown> l <= ?c \<exclamdown> l &
              ?b \<exclamdown> l <= ?d \<exclamdown> l)",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_var 3)),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_hole 9,
                template_app (template_hole 8, template_hole 7))),
            template_var 3))],
       template_equation
        (template_app (template_hole 5, t_empty),
         template_app (template_hole 5, t_empty)))),
    ("Binary_Operations.aux_digit_lt_linear",
     "[| ?b < 2 ^ ?t; ?d < 2 ^ ?t |]
      ==> ((?a * 2 ^ ?t + ?b) \<exclamdown> ?k
           <= (?c * 2 ^ ?t + ?d) \<exclamdown> ?k) =
          ((?a * 2 ^ ?t) \<exclamdown> ?k
           <= (?c * 2 ^ ?t) \<exclamdown> ?k &
           ?b \<exclamdown> ?k <= ?d \<exclamdown> ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_var 4)),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app (template_hole 7, template_hole 6))),
            template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7, template_hole 6))),
                         template_var 4))),
                   template_var 5)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 7, template_hole 6))),
                       template_var 4))),
                 template_var 3)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_app
                        (template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 7, template_hole 6))),
                         template_var 4))),
                   template_var 1)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 7, template_hole 6))),
                       template_var 4))),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 1))))))]:
   (string * thm * template) list
### theory "Draft.Binary_OperationsMoreTemplates"
### 0.310s elapsed time, 0.438s cpu time, 0.051s GC time
val it = (): unit
