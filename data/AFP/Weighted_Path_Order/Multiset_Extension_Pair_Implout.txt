Loading theory "Draft.Relations" (required by "Draft.Multiset_Extension_Pair_ImplTemplates" via "Draft.Multiset_Extension_Pair_Impl" via "Draft.Multiset_Extension_Pair")
Loading theory "Draft.Templates" (required by "Draft.Multiset_Extension_Pair_ImplTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.160s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Multiset_Extension_Pair_ImplTemplates")
### theory "Draft.Relations"
### 0.327s elapsed time, 0.701s cpu time, 0.036s GC time
Loading theory "Draft.Multiset_Extension_Pair" (required by "Draft.Multiset_Extension_Pair_ImplTemplates" via "Draft.Multiset_Extension_Pair_Impl")
Proofs for inductive predicate(s) "multpwp"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.589s elapsed time, 1.220s cpu time, 0.109s GC time
[| (?X, ?Y) : mult2_alt_ns ?ns ?s;
   !!X1 X2 Y1 Y2.
      [| ?X = X1 + X2; ?Y = Y1 + Y2; (X1, Y1) : multpw ?ns;
         ALL x. x :# X2 --> (EX y. y :# Y2 & (x, y) : ?s) |]
      ==> ?thesis |]
==> ?thesis
### theory "Draft.Multiset_Extension_Pair"
### 0.453s elapsed time, 0.799s cpu time, 0.072s GC time
Loading theory "Draft.Multiset_Extension_Pair_Impl" (required by "Draft.Multiset_Extension_Pair_ImplTemplates")
Found termination order:
  "case_sum (%p. length (fst p)) (%p. length (fst (snd p))) <*mlex*>
   case_sum (%p. size (snd p)) (%p. length (fst (snd (snd p)))) <*mlex*>
   case_sum (%x. 0) (%x. Suc 0) <*mlex*> {}"
Found termination order:
  "case_sum (%p. length (fst p)) (%p. length (fst (snd p))) <*mlex*>
   case_sum size (%p. length (fst (snd (snd p)))) <*mlex*>
   case_sum (%x. 0) (%x. Suc 0) <*mlex*> {}"
### theory "Draft.Multiset_Extension_Pair_Impl"
### 1.398s elapsed time, 1.747s cpu time, 0.473s GC time
Loading theory "Draft.Multiset_Extension_Pair_ImplTemplates"
val templateLemmas =
   [("Multiset_Extension_Pair_Impl.mem_multiset_diff",
     "[| ?x :# ?A; ?x ~= ?y |] ==> ?x :# ?A - {#?y#}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))))
           ))),
    ("Multiset_Extension_Pair_Impl.subset_mult2_alt",
     "[| ?X <=# ?Y; (?Y, ?Z) : mult2_alt ?b ?ns ?s; ?b ==> ?b' |]
      ==> (?X, ?Z) : mult2_alt ?b' ?ns ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 3),
                  template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate (template_var 3)],
          template_predicate (template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("Multiset_Extension_Pair_Impl.mult2_impl0_sound",
     "mult2_impl0 ?nss ?xs ?ys ?b =
      ((mset ?xs, mset ?ys)
       : mult2_alt ?b {(x, y). ?nss x y True} {(x, y). ?nss x y False})",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 2)),
             template_app (template_hole 5, template_var 1))),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 0),
             template_app
              (template_hole 3, template_app (template_hole 2, t_empty))),
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty)))))),
    ("Multiset_Extension_Pair_Impl.mult2_impl_sound0",
     "mult2_impl ?sns ?xs ?ys =
      (mult2_impl0 (%x y b. if b then snd (?sns x y) else fst (?sns x y))
        ?xs ?ys False,
       mult2_impl0 (%x y b. if b then snd (?sns x y) else fst (?sns x y))
        ?xs ?ys True)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 7, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, t_empty), template_var 1),
               template_var 0),
             template_hole 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Multiset_Extension_Pair_Impl.mult2_impl_sound0",
     "mult2_ex_dom ?sns ?x ?xs ?ys ?ys' =
      (mult2_ex_dom0 (%x y b. if b then snd (?sns x y) else fst (?sns x y))
        ?x ?xs ?ys ?ys' False,
       mult2_ex_dom0 (%x y b. if b then snd (?sns x y) else fst (?sns x y))
        ?x ?xs ?ys ?ys' True)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, t_empty),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0),
             template_hole 1)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, t_empty), template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)))),
    ("Multiset_Extension_Pair_Impl.mult2_impl_sound",
     "mult2_impl ?sns ?xs ?ys =
      ((mset ?xs, mset ?ys)
       : mult2_alt_s {(x, y). snd (?sns x y)} {(x, y). fst (?sns x y)},
       (mset ?xs, mset ?ys)
       : mult2_alt_ns {(x, y). snd (?sns x y)} {(x, y). fst (?sns x y)})",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 1)),
                 template_app (template_hole 7, template_var 0))),
             template_app
              (template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, t_empty))),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, t_empty))))),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 1)),
               template_app (template_hole 7, template_var 0))),
           template_app
            (template_app
              (template_app (template_hole 6, template_hole 0),
               template_app
                (template_hole 4, template_app (template_hole 3, t_empty))),
             template_app
              (template_hole 4,
               template_app (template_hole 3, t_empty))))))),
    ("Multiset_Extension_Pair_Impl.mult2_alt_addL",
     "((add_mset ?x ?X, ?Y) : mult2_alt ?b ?ns ?s) =
      ((EX y. y :# ?Y &
              (?x, y) : ?s &
              ({#x :# ?X. (x, y) ~: ?s#}, ?Y - {#y#})
              : mult2_alt_ns ?ns ?s) |
       (EX y. y :# ?Y &
              (?x, y) : ?ns &
              (?x, y) ~: ?s & (?X, ?Y - {#y#}) : mult2_alt ?b ?ns ?s))",
     template_equation
      (template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app (template_hole 13, template_var 5),
                 template_var 4)),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 12, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 11, template_app (template_hole 10, t_empty)),
         template_app (template_hole 10, t_empty)))),
    ("Multiset_Extension_Pair_Impl.mult2_impl0_sound",
     "mult2_ex_dom0 ?nss ?x ?xs ?ys ?ys' ?b =
      ((EX y. y :# mset ?ys &
              (?x, y) : {(x, y). ?nss x y False} &
              (mset (filter (%x. (x, y) ~: {(x, y). ?nss x y False}) ?xs),
               mset (?ys @ ?ys') - {#y#})
              : mult2_alt_ns {(x, y). ?nss x y True}
                 {(x, y). ?nss x y False}) |
       (EX y. y :# mset ?ys &
              (?x, y) : {(x, y). ?nss x y True} &
              (?x, y) ~: {(x, y). ?nss x y False} &
              (mset ?xs, mset (?ys @ ?ys') - {#y#})
              : mult2_alt ?b {(x, y). ?nss x y True}
                 {(x, y). ?nss x y False}))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 21, template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 20, template_app (template_hole 19, t_empty)),
         template_app (template_hole 19, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Multiset_Extension_Pair_ImplTemplates"
### 0.433s elapsed time, 0.548s cpu time, 0.040s GC time
val it = (): unit
