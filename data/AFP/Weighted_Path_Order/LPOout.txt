Loading theory "Draft.Status" (required by "Draft.LPOTemplates" via "Draft.LPO" via "Draft.WPO")
Loading theory "Draft.List_Order" (required by "Draft.LPOTemplates" via "Draft.LPO" via "Draft.WPO" via "Draft.Multiset_Extension2")
Loading theory "Draft.Precedence" (required by "Draft.LPOTemplates" via "Draft.LPO" via "Draft.WPO")
Loading theory "Draft.Templates" (required by "Draft.LPOTemplates" via "Draft.ExtrEqs")
locale list_order_extension
  fixes
    s_list :: "('a * 'a) set => ('a * 'a) set => ('a list * 'a list) set"
    and
    ns_list :: "('a * 'a) set => ('a * 'a) set => ('a list * 'a list) set"
  assumes "list_order_extension s_list ns_list"
locale precedence
  fixes prc :: "'f => 'f => bool * bool"
    and prl :: "'f => bool"
  assumes "precedence prc prl"
### theory "Draft.Precedence"
### 0.059s elapsed time, 0.271s cpu time, 0.000s GC time
Loading theory "Draft.Relations" (required by "Draft.LPOTemplates" via "Draft.LPO" via "Draft.WPO" via "Draft.Multiset_Extension2" via "Draft.Multiset_Extension_Pair")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.105s elapsed time, 0.433s cpu time, 0.024s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LPOTemplates")
locale list_order_extension_impl
  fixes
    s_list :: "('a * 'a) set => ('a * 'a) set => ('a list * 'a list) set"
    and
    ns_list :: "('a * 'a) set => ('a * 'a) set => ('a list * 'a list) set"
    and
    list_ext ::
      "('a => 'a => bool * bool) => 'a list => 'a list => bool * bool"
  assumes "list_order_extension_impl s_list ns_list list_ext"
### theory "Draft.List_Order"
### 0.113s elapsed time, 0.458s cpu time, 0.024s GC time
### theory "Draft.Status"
### 0.149s elapsed time, 0.567s cpu time, 0.024s GC time
### theory "Draft.Relations"
### 0.396s elapsed time, 0.916s cpu time, 0.024s GC time
Loading theory "Draft.Multiset_Extension_Pair" (required by "Draft.LPOTemplates" via "Draft.LPO" via "Draft.WPO" via "Draft.Multiset_Extension2")
Proofs for inductive predicate(s) "multpwp"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.590s elapsed time, 1.270s cpu time, 0.084s GC time
[| (?X, ?Y) : mult2_alt_ns ?ns ?s;
   !!X1 X2 Y1 Y2.
      [| ?X = X1 + X2; ?Y = Y1 + Y2; (X1, Y1) : multpw ?ns;
         ALL x. x :# X2 --> (EX y. y :# Y2 & (x, y) : ?s) |]
      ==> ?thesis |]
==> ?thesis
### theory "Draft.Multiset_Extension_Pair"
### 0.400s elapsed time, 0.655s cpu time, 0.069s GC time
Loading theory "Draft.Multiset_Extension2" (required by "Draft.LPOTemplates" via "Draft.LPO" via "Draft.WPO")
### theory "Draft.Multiset_Extension2"
### 0.430s elapsed time, 0.484s cpu time, 0.077s GC time
Loading theory "Draft.WPO" (required by "Draft.LPOTemplates" via "Draft.LPO")
locale wpo
  fixes n :: "nat"
    and S :: "(('f, 'v) Term.term * ('f, 'v) Term.term) set"
    and NS :: "(('f, 'v) Term.term * ('f, 'v) Term.term) set"
    and prc :: "'f * nat => 'f * nat => bool * bool"
    and prl :: "'f * nat => bool"
    and \<sigma>\<sigma> :: "'f status"
    and c :: "'f * nat => order_tag"
    and ssimple :: "bool"
    and large :: "'f * nat => bool"
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
locale wpo_with_assms
  fixes n :: "nat"
    and S :: "(('f, 'v) Term.term * ('f, 'v) Term.term) set"
    and NS :: "(('f, 'v) Term.term * ('f, 'v) Term.term) set"
    and prc :: "'f * nat => 'f * nat => bool * bool"
    and prl :: "'f * nat => bool"
    and \<sigma>\<sigma> :: "'f status"
    and c :: "'f * nat => order_tag"
    and ssimple :: "bool"
    and large :: "'f * nat => bool"
  assumes "wpo_with_assms S NS prc prl \<sigma>\<sigma> ssimple large"
### theory "Draft.WPO"
### 1.855s elapsed time, 2.212s cpu time, 0.526s GC time
Loading theory "Draft.LPO" (required by "Draft.LPOTemplates")
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
locale lpo_with_assms
  fixes prc :: "'f * nat => 'f * nat => bool * bool"
    and prl :: "'f * nat => bool"
    and n :: "nat"
  assumes "lpo_with_assms prc prl"
### theory "Draft.LPO"
### 0.446s elapsed time, 0.493s cpu time, 0.053s GC time
Loading theory "Draft.LPOTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.LPOTemplates"
### 0.464s elapsed time, 0.660s cpu time, 0.077s GC time
val it = (): unit
