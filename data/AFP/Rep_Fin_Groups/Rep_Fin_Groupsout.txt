Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.Rep_Fin_Groups" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.More_List" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.Rep_Fin_Groups" via "HOL-Computational_Algebra.Polynomial")
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.Rep_Fin_Groups" via "HOL-Computational_Algebra.Polynomial")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.487s cpu time, 0.041s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.More_List"
### 0.166s elapsed time, 0.686s cpu time, 0.041s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Infinite_Set"
### 0.294s elapsed time, 1.181s cpu time, 0.114s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Set_Algebras"
### 0.202s elapsed time, 0.792s cpu time, 0.073s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.429s elapsed time, 1.719s cpu time, 0.172s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.Rep_Fin_Groups" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Library.Nat_Bijection"
### 0.316s elapsed time, 1.242s cpu time, 0.131s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.ExtrEqs")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.890s elapsed time, 3.370s cpu time, 0.746s GC time
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.929s elapsed time, 3.462s cpu time, 0.766s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Tree"
### 2.002s elapsed time, 6.245s cpu time, 1.742s GC time
Loading theory "Draft.Templates" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Rep_Fin_GroupsMoreTemplates")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.567s elapsed time, 1.186s cpu time, 0.128s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.173s elapsed time, 7.722s cpu time, 1.926s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.Rep_Fin_Groups" via "HOL-Computational_Algebra.Polynomial")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.792s elapsed time, 5.789s cpu time, 1.337s GC time
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Rep_Fin_GroupsMoreTemplates" via "Draft.Rep_Fin_Groups")
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.063s elapsed time, 4.677s cpu time, 0.703s GC time
Loading theory "Draft.Rep_Fin_Groups" (required by "Draft.Rep_Fin_GroupsMoreTemplates")
instantiation
  aezfun :: (zero, type) zero
  zero_aezfun == zero_class.zero :: ('a, 'b) aezfun
instantiation
  aezfun :: (monoid_add, type) plus
  plus_aezfun == plus ::
    ('a, 'b) aezfun => ('a, 'b) aezfun => ('a, 'b) aezfun
instantiation
  aezfun :: (group_add, type) minus
  minus_aezfun == minus ::
    ('a, 'b) aezfun => ('a, 'b) aezfun => ('a, 'b) aezfun
instantiation
  aezfun :: (group_add, type) uminus
  uminus_aezfun == uminus :: ('a, 'b) aezfun => ('a, 'b) aezfun
instantiation
  aezfun :: ({one,zero}, zero) one
  one_aezfun == one_class.one :: ('a, 'b) aezfun
instantiation
  aezfun :: ({comm_monoid_add,times}, group_add) times
  times_aezfun == times ::
    ('a, 'b) aezfun => ('a, 'b) aezfun => ('a, 'b) aezfun
consts
  add_independentS :: "'a set list => bool"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale FinGroup
  fixes G :: "'g set"
  assumes "FinGroup G"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale AbGroup
  fixes G :: "'g set"
  assumes "AbGroup G"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale GroupHom
  fixes G :: "'g set"
    and T :: "'g => 'h"
  assumes "GroupHom G T"
locale GroupEnd
  fixes G :: "'g set"
    and T :: "'g => 'g"
  assumes "GroupEnd G T"
locale GroupIso
  fixes G :: "'g set"
    and T :: "'g => 'h"
    and H :: "'h set"
  assumes "GroupIso G T H"
locale GroupHom
  fixes G :: "'g set"
    and T :: "'g => 'h"
  assumes "GroupHom G T"
locale GroupEnd
  fixes G :: "'g set"
    and T :: "'g => 'g"
  assumes "GroupEnd G T"
locale GroupIso
  fixes G :: "'g set"
    and T :: "'g => 'h"
    and H :: "'h set"
  assumes "GroupIso G T H"
locale Ring1
  fixes R :: "'r set"
  assumes "Ring1 R"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
locale scalar_mult
  fixes smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
locale R_scalar_mult
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
  assumes "R_scalar_mult R"
locale RModule
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
  assumes "RModule R (\<cdot>) M"
locale Module
  fixes smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
  assumes "Module (\<cdot>) M"
locale RModule
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
  assumes "RModule R (\<cdot>) M"
locale Module
  fixes smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
  assumes "Module (\<cdot>) M"
locale RModule
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
  assumes "RModule R (\<cdot>) M"
locale scalar_mult
  fixes smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
locale RModule
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
  assumes "RModule R (\<cdot>) M"
locale R_scalar_mult
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
  assumes "R_scalar_mult R"
consts
  RSpan :: "'m list => 'm set"
locale scalar_mult
  fixes smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
locale RModule
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
  assumes "RModule R (\<cdot>) M"
locale Module
  fixes smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
  assumes "Module (\<cdot>) M"
locale R_scalar_mult
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
  assumes "R_scalar_mult R"
locale R_scalar_mult
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
  assumes "R_scalar_mult R"
consts
  R_lin_independent :: "'m list => bool"
locale RModule
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
  assumes "RModule R (\<cdot>) M"
locale scalar_mult
  fixes smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
locale Module
  fixes smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
  assumes "Module (\<cdot>) M"
locale R_scalar_mult
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
  assumes "R_scalar_mult R"
locale scalar_mult
  fixes smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
locale RModuleHom
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
    and smult' :: "'r => 'n => 'n"  (infixr \<open>\<star>\<close> 70)
    and T :: "'m => 'n"
  assumes "RModuleHom R (\<cdot>) M (\<star>) T"
locale RModuleEnd
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
    and T :: "'m => 'm"
  assumes "RModuleEnd R (\<cdot>) M T"
locale ModuleHom
  fixes smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
    and smult' :: "'r => 'n => 'n"  (infixr \<open>\<star>\<close> 70)
    and T :: "'m => 'n"
  assumes "ModuleHom (\<cdot>) M (\<star>) T"
locale ModuleEnd
  fixes smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
    and T :: "'m => 'm"
  assumes "ModuleEnd (\<cdot>) M T"
locale RModuleIso
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
    and smult' :: "'r => 'n => 'n"  (infixr \<open>\<star>\<close> 70)
    and T :: "'m => 'n"
    and N :: "'n set"
  assumes "RModuleIso R (\<cdot>) M (\<star>) T N"
locale RModuleHom
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
    and smult' :: "'r => 'n => 'n"  (infixr \<open>\<star>\<close> 70)
    and T :: "'m => 'n"
  assumes "RModuleHom R (\<cdot>) M (\<star>) T"
locale RModuleIso
  fixes R :: "'r set"
    and smult :: "'r => 'm => 'm"  (infixr \<open>\<cdot>\<close> 70)
    and M :: "'m set"
    and smult' :: "'r => 'n => 'n"  (infixr \<open>\<star>\<close> 70)
    and T :: "'m => 'n"
    and N :: "'n set"
  assumes "RModuleIso R (\<cdot>) M (\<star>) T N"
locale fscalar_mult
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
locale VectorSpace
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "VectorSpace (\<cdot>) V"
locale FinDimVectorSpace
  fixes smult :: "'a => 'b => 'b"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'b set"
  assumes "FinDimVectorSpace (\<cdot>) V"
locale VectorSpace
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "VectorSpace (\<cdot>) V"
locale VectorSpace
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "VectorSpace (\<cdot>) V"
locale VectorSpace
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "VectorSpace (\<cdot>) V"
locale VectorSpace
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "VectorSpace (\<cdot>) V"
locale FinDimVectorSpace
  fixes smult :: "'a => 'b => 'b"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'b set"
  assumes "FinDimVectorSpace (\<cdot>) V"
locale VectorSpaceHom
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and smult' :: "'f => 'w => 'w"  (infixr \<open>\<star>\<close> 70)
    and T :: "'v => 'w"
  assumes "VectorSpaceHom (\<cdot>) V (\<star>) T"
locale VectorSpaceEnd
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and T :: "'v => 'v"
  assumes "VectorSpaceEnd (\<cdot>) V T"
locale VectorSpaceIso
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and smult' :: "'f => 'w => 'w"  (infixr \<open>\<star>\<close> 70)
    and T :: "'v => 'w"
    and W :: "'w set"
  assumes "VectorSpaceIso (\<cdot>) V (\<star>) T W"
locale VectorSpaceHom
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and smult' :: "'f => 'w => 'w"  (infixr \<open>\<star>\<close> 70)
    and T :: "'v => 'w"
  assumes "VectorSpaceHom (\<cdot>) V (\<star>) T"
locale VectorSpace
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "VectorSpace (\<cdot>) V"
locale VectorSpace
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "VectorSpace (\<cdot>) V"
locale VectorSpaceEnd
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and T :: "'v => 'v"
  assumes "VEnd T"
locale VectorSpaceEnd
  fixes smult :: "'f => 'v => 'v"  (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and T :: "'v => 'v"
  assumes "VEnd T"
consts
  endpow :: "nat => 'v => 'v"
locale aezfun_scalar_mult
  fixes
    smult :: "('r, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
locale FGModule
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "FGModule G (\<cdot>) V"
locale FGModule
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "FGModule G (\<cdot>) V"
locale FGModule
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "FGModule G (\<cdot>) V"
locale FGModuleHom
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    smult' :: "('f, 'g) aezfun => 'w => 'w"
      (infixr \<open>\<star>\<close> 70)
    and T :: "'v => 'w"
  assumes "FGModuleHom G (\<cdot>) V (\<star>) T"
locale FGModuleEnd
  fixes G :: "'g set"
    and FG :: "('f, 'g) aezfun set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and T :: "'v => 'v"
  assumes "FGModuleEnd G (\<cdot>) V T"
locale FGModuleIso
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    smult' :: "('f, 'g) aezfun => 'w => 'w"
      (infixr \<open>\<star>\<close> 70)
    and T :: "'v => 'w"
    and W :: "'w set"
  assumes "FGModuleIso G (\<cdot>) V (\<star>) T W"
locale FGModule
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "FGModule G (\<cdot>) V"
locale FGModuleHom
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    smult' :: "('f, 'g) aezfun => 'w => 'w"
      (infixr \<open>\<star>\<close> 70)
    and T :: "'v => 'w"
  assumes "FGModuleHom G (\<cdot>) V (\<star>) T"
locale FGModuleEnd
  fixes G :: "'g set"
    and FG :: "('f, 'g) aezfun set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and T :: "'v => 'v"
  assumes "FGModuleEnd G (\<cdot>) V T"
locale FGModuleIso
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    smult' :: "('f, 'g) aezfun => 'w => 'w"
      (infixr \<open>\<star>\<close> 70)
    and T :: "'v => 'w"
    and W :: "'w set"
  assumes "FGModuleIso G (\<cdot>) V (\<star>) T W"
locale FGModule
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "FGModule G (\<cdot>) V"
locale FGModule
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "FGModule G (\<cdot>) V"
locale aezfun_scalar_mult
  fixes
    smult :: "('r, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
locale aezfun_scalar_mult
  fixes
    smult :: "('r, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
locale FGModule
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixr \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "FGModule G (\<cdot>) V"
locale Ring1
  fixes R :: "'r set"
  assumes "Ring1 R"
locale InducedFHModule
  fixes H :: "'g set"
    and G :: "'g set"
    and FG :: "('f, 'g) aezfun set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    rrsmult ::
      "('f, 'g) aezfun => (('f, 'g) aezfun => 'v) => ('f, 'g) aezfun => 'v"
      (infixl \<open>\<currency>\<close> 70)
    and FH :: "('f, 'g) aezfun set"
    and indV :: "(('f, 'g) aezfun => 'v) set"
  assumes "InducedFHModule H G (\<cdot>) V (\<currency>)"
  defines "FH == Supgroup.group_ring"
    and "indV == BaseFGMod.indspace G FH V"
locale FinGroupRepresentation
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "FinGroupRepresentation G (\<cdot>) V"
locale FinGroupRepresentation
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "FinGroupRepresentation G (\<cdot>) V"
locale IrrFinGroupRepresentation
  fixes G :: "'a set"
    and
    smult :: "('b, 'a) aezfun => 'c => 'c"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'c set"
  assumes "IrrFinGroupRepresentation G (\<cdot>) V"
locale FinGroupRepresentation
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "FinGroupRepresentation G (\<cdot>) V"
locale FinGroupRepresentation
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "FinGroupRepresentation G (\<cdot>) V"
locale FinGroupRepresentation
  fixes G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
  assumes "FinGroupRepresentation G (\<cdot>) V"
locale Group
  fixes G :: "'g set"
  assumes "Group G"
consts
  remisodups :: "('f, 'g) aezfun set list => ('f, 'g) aezfun set list"
locale InducedFinGroupRepresentation
  fixes H :: "'g set"
    and G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    rrsmult ::
      "('f, 'g) aezfun => (('f, 'g) aezfun => 'v) => ('f, 'g) aezfun => 'v"
      (infixl \<open>\<currency>\<close> 70)
    and FH :: "('f, 'g) aezfun set"
    and indV :: "(('f, 'g) aezfun => 'v) set"
  assumes "InducedFinGroupRepresentation H G (\<cdot>) V (\<currency>)"
  defines "FH == Supgroup.group_ring"
    and "indV == BaseRep.indspace G FH V"
locale InducedFinGroupRepresentation
  fixes H :: "'g set"
    and G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    rrsmult ::
      "('f, 'g) aezfun => (('f, 'g) aezfun => 'v) => ('f, 'g) aezfun => 'v"
      (infixl \<open>\<currency>\<close> 70)
    and FH :: "('f, 'g) aezfun set"
    and indV :: "(('f, 'g) aezfun => 'v) set"
  assumes "InducedFinGroupRepresentation H G (\<cdot>) V (\<currency>)"
  defines "FH == Supgroup.group_ring"
    and "indV == BaseRep.indspace G FH V"
locale InducedFinGroupRepresentation
  fixes H :: "'g set"
    and G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    rrsmult ::
      "('f, 'g) aezfun => (('f, 'g) aezfun => 'v) => ('f, 'g) aezfun => 'v"
      (infixl \<open>\<currency>\<close> 70)
    and FH :: "('f, 'g) aezfun set"
    and indV :: "(('f, 'g) aezfun => 'v) set"
  assumes "InducedFinGroupRepresentation H G (\<cdot>) V (\<currency>)"
  defines "FH == Supgroup.group_ring"
    and "indV == BaseRep.indspace G FH V"
locale InducedFinGroupRepresentation
  fixes H :: "'g set"
    and G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    rrsmult ::
      "('f, 'g) aezfun => (('f, 'g) aezfun => 'v) => ('f, 'g) aezfun => 'v"
      (infixl \<open>\<currency>\<close> 70)
    and FH :: "('f, 'g) aezfun set"
    and indV :: "(('f, 'g) aezfun => 'v) set"
  assumes "InducedFinGroupRepresentation H G (\<cdot>) V (\<currency>)"
  defines "FH == Supgroup.group_ring"
    and "indV == BaseRep.indspace G FH V"
locale FrobeniusReciprocity
  fixes FH :: "('f, 'g) aezfun set"
    and indV :: "(('f, 'g) aezfun => 'v) set"
    and H :: "'g set"
    and G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    rrsmult ::
      "('f, 'g) aezfun => (('f, 'g) aezfun => 'v) => ('f, 'g) aezfun => 'v"
      (infixl \<open>\<currency>\<close> 70)
    and
    smult' :: "('f, 'g) aezfun => 'w => 'w"
      (infixr \<open>\<star>\<close> 70)
    and W :: "'w set"
  assumes "FrobeniusReciprocity H G (\<cdot>) V (\<currency>) (\<star>) W"
  defines "FH == HRep.FG"
    and "indV == BaseRep.indspace G FH V"
locale FrobeniusReciprocity
  fixes FH :: "('f, 'g) aezfun set"
    and indV :: "(('f, 'g) aezfun => 'v) set"
    and H :: "'g set"
    and G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    rrsmult ::
      "('f, 'g) aezfun => (('f, 'g) aezfun => 'v) => ('f, 'g) aezfun => 'v"
      (infixl \<open>\<currency>\<close> 70)
    and
    smult' :: "('f, 'g) aezfun => 'w => 'w"
      (infixr \<open>\<star>\<close> 70)
    and W :: "'w set"
  assumes "FrobeniusReciprocity H G (\<cdot>) V (\<currency>) (\<star>) W"
  defines "FH == HRep.FG"
    and "indV == BaseRep.indspace G FH V"
locale FrobeniusReciprocity
  fixes FH :: "('f, 'g) aezfun set"
    and indV :: "(('f, 'g) aezfun => 'v) set"
    and H :: "'g set"
    and G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    rrsmult ::
      "('f, 'g) aezfun => (('f, 'g) aezfun => 'v) => ('f, 'g) aezfun => 'v"
      (infixl \<open>\<currency>\<close> 70)
    and
    smult' :: "('f, 'g) aezfun => 'w => 'w"
      (infixr \<open>\<star>\<close> 70)
    and W :: "'w set"
  assumes "FrobeniusReciprocity H G (\<cdot>) V (\<currency>) (\<star>) W"
  defines "FH == HRep.FG"
    and "indV == BaseRep.indspace G FH V"
locale FrobeniusReciprocity
  fixes FH :: "('f, 'g) aezfun set"
    and indV :: "(('f, 'g) aezfun => 'v) set"
    and H :: "'g set"
    and G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    rrsmult ::
      "('f, 'g) aezfun => (('f, 'g) aezfun => 'v) => ('f, 'g) aezfun => 'v"
      (infixl \<open>\<currency>\<close> 70)
    and
    smult' :: "('f, 'g) aezfun => 'w => 'w"
      (infixr \<open>\<star>\<close> 70)
    and W :: "'w set"
  assumes "FrobeniusReciprocity H G (\<cdot>) V (\<currency>) (\<star>) W"
  defines "FH == HRep.FG"
    and "indV == BaseRep.indspace G FH V"
locale FrobeniusReciprocity
  fixes FH :: "('f, 'g) aezfun set"
    and indV :: "(('f, 'g) aezfun => 'v) set"
    and H :: "'g set"
    and G :: "'g set"
    and
    smult :: "('f, 'g) aezfun => 'v => 'v"
      (infixl \<open>\<cdot>\<close> 70)
    and V :: "'v set"
    and
    rrsmult ::
      "('f, 'g) aezfun => (('f, 'g) aezfun => 'v) => ('f, 'g) aezfun => 'v"
      (infixl \<open>\<currency>\<close> 70)
    and
    smult' :: "('f, 'g) aezfun => 'w => 'w"
      (infixr \<open>\<star>\<close> 70)
    and W :: "'w set"
  assumes "FrobeniusReciprocity H G (\<cdot>) V (\<currency>) (\<star>) W"
  defines "FH == HRep.FG"
    and "indV == BaseRep.indspace G FH V"
### theory "Draft.Rep_Fin_Groups"
### 7.212s elapsed time, 8.173s cpu time, 1.305s GC time
Loading theory "Draft.Rep_Fin_GroupsMoreTemplates"
val templateLemmas =
   [("Rep_Fin_Groups.aezfun_finite_supp", "finite (supp (aezfun ?a))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Rep_Fin_Groups.supp_zerofun_subset_any", "supp 0 <= ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_hole 0),
       template_var 0)),
    ("Rep_Fin_Groups.zero_aezfun_apply", "aezfun 0 ?x = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Rep_Fin_Groups.deltafun0", "(0::?'b) \<delta> ?a = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Rep_Fin_Groups.addfunset0", "addfunset ?A 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Rep_Fin_Groups.aezfun_setspan_proj_zero",
     "aezfun_setspan_proj ?A 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Rep_Fin_Groups.deltafun_is_aezfun", "?b \<delta> ?a : aezfun_set",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)
         )),
    ("Rep_Fin_Groups.deltafun_apply_eq", "(?b \<delta> ?a) ?a = ?b",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0),
       template_var 1)),
    ("Rep_Fin_Groups.sum_list_replicate0",
     "sum_list (replicate ?n (0::?'a)) = (0::?'a)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_hole 0)),
    ("Rep_Fin_Groups.supp_neg_eq_supp", "supp (- ?f) = supp ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Rep_Fin_Groups.supp_delta0fun", "supp ((0::?'b) \<delta> ?a) = {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Rep_Fin_Groups.aezfun_left_minus", "- ?a + ?a = 0",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Rep_Fin_Groups.aezfun_setspan_proj_in_setspan",
     "aezfun_setspan_proj ?A ?x : aezfun_setspan ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 1))
         )),
    ("Rep_Fin_Groups.one_aezfun_apply",
     "aezfun 1 ?x = ((1::?'a) \<delta> (0::?'b)) ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0))),
    ("Rep_Fin_Groups.inner_dirsum_double_left0", "0 \<oplus> ?A = ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))),
       template_var 0)),
    ("Rep_Fin_Groups.aezfun_diff_minus", "?a - ?b = ?a + - ?b",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Rep_Fin_Groups.Group_addfunset",
     "Group ?M ==> Group (addfunset ?R ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Rep_Fin_Groups.aezfun_setI", "finite (supp ?f) ==> ?f : aezfun_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Rep_Fin_Groups.aezfun_setD", "?f : aezfun_set ==> finite (supp ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Rep_Fin_Groups.add_independentS_append_reduce_right",
     "add_independentS (?As @ ?Bs) ==> add_independentS ?Bs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Rep_Fin_Groups.uminus_aezfun_apply",
     "aezfun (- ?a) ?x = - aezfun ?a ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Rep_Fin_Groups.sum_list_sets_single", "(SUM X<-[?A]. X) = ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_var 0)),
    ("Rep_Fin_Groups.aezdeltafun",
     "aezfun (?b \<delta>\<delta> ?a) = ?b \<delta> ?a",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Rep_Fin_Groups.inner_dirsum_singleD",
     "(\<Oplus>N\<leftarrow>[?M]. N) = ?M",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_var 0)),
    ("Rep_Fin_Groups.neg_of_aezfun_is_aezfun",
     "?f : aezfun_set ==> - ?f : aezfun_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Rep_Fin_Groups.zip_truncate_right",
     "zip ?xs ?ys = zip ?xs (take (length ?xs) ?ys)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Rep_Fin_Groups.zip_truncate_left",
     "zip ?xs ?ys = zip (take (length ?ys) ?xs) ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)),
         template_var 0))),
    ("Rep_Fin_Groups.supp_diff_subset_union_supp",
     "supp (?f - ?g) <= supp ?f Un supp ?g",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Rep_Fin_Groups.supp_sum_subset_union_supp",
     "supp (?f + ?g) <= supp ?f Un supp ?g",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Rep_Fin_Groups.supp_convolution_subset_sum_supp",
     "supp (convolution ?f ?g) <= supp ?f + supp ?g",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Rep_Fin_Groups.kerI", "?f ?a = (0::?'a) ==> ?a : ker ?f",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_var 0), template_hole 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Rep_Fin_Groups.ModuleEnd_over_field_is_VectorSpaceEnd",
     "ModuleEnd ?smult ?V ?T ==> VectorSpaceEnd ?smult ?V ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Rep_Fin_Groups.kerD", "?a : ker ?f ==> ?f ?a = (0::?'b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_var 0, template_var 1), template_hole 0))),
    ("Rep_Fin_Groups.aezfun_transfer", "aezfun ?a = aezfun ?b ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Rep_Fin_Groups.GroupHomSetD_GroupHom",
     "?T : GroupHomSet ?G ?H ==> GroupHom ?G ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 2)
           ))),
    ("Rep_Fin_Groups.good_card_imp_finite",
     "of_nat (card ?A) ~= (0::?'a) ==> finite ?A",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Rep_Fin_Groups.supp_restrict0", "supp (?f \<down> ?A) <= ?A",
     template_inequation
      (less_equals, template_app (template_hole 3, t_empty),
       template_var 1)),
    ("Rep_Fin_Groups.aezfun_restrict_and_extend0",
     "aezfun ?x \<down> ?A : aezfun_set",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, t_empty), template_hole 0)
         )),
    ("Rep_Fin_Groups.one_aezfun_apply_neq",
     "?x ~= (0::?'a) ==> aezfun 1 ?x = (0::?'b)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("Rep_Fin_Groups.suppD_contra", "?f ?x = (0::?'a) ==> ?x ~: supp ?f",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_var 0), template_hole 3)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 0, template_var 1))
               )
           ))),
    ("Rep_Fin_Groups.suppD", "?x : supp ?f ==> ?f ?x ~= (0::?'b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app (template_var 0, template_var 1), template_hole 0)
           ))),
    ("Rep_Fin_Groups.listset_length",
     "?xs : listset ?Xs ==> length ?xs = length ?Xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Rep_Fin_Groups.aezfun_setspanD",
     "?x : aezfun_setspan ?A ==> supp (aezfun ?x) <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Rep_Fin_Groups.suppI", "?f ?x ~= (0::?'a) ==> ?x : supp ?f",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_var 1, template_var 0),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Rep_Fin_Groups.suppI_contra", "?x ~: supp ?f ==> ?f ?x = (0::?'b)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_equation
        (template_app (template_var 0, template_var 1), template_hole 0))),
    ("Rep_Fin_Groups.aezfun_setspanI",
     "supp (aezfun ?x) <= ?A ==> ?x : aezfun_setspan ?A",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 1)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Rep_Fin_Groups.RModuleEnd_over_UNIV_is_ModuleEnd",
     "RModuleEnd UNIV ?rsmult ?M ?T ==> ModuleEnd ?rsmult ?M ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Rep_Fin_Groups.addfunsetD_supp",
     "?f : addfunset ?A ?M ==> supp ?f <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_var 1))),
    ("Rep_Fin_Groups.addfunsetD_range'",
     "?f : addfunset ?A ?M ==> ?f ?x : ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 3, template_var 0)),
             template_var 1)
           ))),
    ("Rep_Fin_Groups.sum_list_aezfun_apply",
     "aezfun (sum_list ?as) ?x = (SUM a<-?as. aezfun a ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Rep_Fin_Groups.inner_dirsumD2",
     "~ add_independentS ?Ms ==> (\<Oplus>M\<leftarrow>?Ms. M) = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_hole 0))),
    ("Rep_Fin_Groups.deltafun_apply_neq",
     "?x ~= ?a ==> (?b \<delta> ?a) ?x = (0::?'b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_var 2),
         template_hole 0))),
    ("Rep_Fin_Groups.GroupHomSetD_Im",
     "?T : GroupHomSet ?G ?H ==> ?T ` ?G <= ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Rep_Fin_Groups.addfunsetD_range",
     "?f : addfunset ?A ?M ==> range ?f <= ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_hole 0),
         template_var 0))),
    ("Rep_Fin_Groups.AbGroup_set_plus",
     "[| AbGroup ?H; AbGroup ?G |] ==> AbGroup (?H + ?G)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Rep_Fin_Groups.minus_aezfun_apply",
     "aezfun (?a - ?b) ?x = aezfun ?a ?x - aezfun ?b ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Rep_Fin_Groups.plus_aezfun_apply",
     "aezfun (?a + ?b) ?x = aezfun ?a ?x + aezfun ?b ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Rep_Fin_Groups.sum_list_sets_double",
     "(SUM X<-[?A, ?B]. X) = ?A + ?B",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Rep_Fin_Groups.distrib_comp_sum_right",
     "?T + ?T' o ?S = (?T o ?S) + (?T' o ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Rep_Fin_Groups.deltafun_plus",
     "(?b + ?c) \<delta> ?a = ?b \<delta> ?a + ?c \<delta> ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Rep_Fin_Groups.convolution_delta_right",
     "convolution ?f (?b \<delta> ?a) = (%x. ?f (x - ?a) * ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       t_empty)),
    ("Rep_Fin_Groups.aezfun_setspan_proj_add",
     "aezfun_setspan_proj ?A (?x + ?y) =
      aezfun_setspan_proj ?A ?x + aezfun_setspan_proj ?A ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Rep_Fin_Groups.aezdelta0fun_commutes",
     "?c * (?b \<delta>\<delta> (0::?'a)) =
      ?b \<delta>\<delta> (0::?'a) * ?c",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_var 1))),
    ("Rep_Fin_Groups.supp_aezfun_diff",
     "supp (aezfun (?x - ?y)) <= supp (aezfun ?x) Un supp (aezfun ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Rep_Fin_Groups.supp_aezfun_times",
     "supp (aezfun (?x * ?y)) <= supp (aezfun ?x) + supp (aezfun ?y)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))))),
    ("Rep_Fin_Groups.aezfun_setspan_projD2",
     "?a ~: ?A ==> aezfun (aezfun_setspan_proj ?A ?x) ?a = (0::?'b)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_hole 0))),
    ("Rep_Fin_Groups.ModuleI",
     "[| Group ?M; RModule_axioms UNIV ?smult ?M |] ==> Module ?smult ?M",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Rep_Fin_Groups.VectorSpaceI",
     "[| Group ?V; RModule_axioms UNIV ?smult ?V |]
      ==> VectorSpace ?smult ?V",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Rep_Fin_Groups.convolution_delta_left",
     "convolution (?b \<delta> ?a) ?f = (%x. ?b * ?f (- ?a + x))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       t_empty)),
    ("Rep_Fin_Groups.aezdeltafun_decomp'",
     "?b \<delta>\<delta> ?a =
      (1::?'b) \<delta>\<delta> ?a * (?b \<delta>\<delta> (0::?'a))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_var 0))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_hole 0))))),
    ("Rep_Fin_Groups.aezdeltafun_decomp",
     "?b \<delta>\<delta> ?a =
      ?b \<delta>\<delta> (0::?'a) * ((1::?'b) \<delta>\<delta> ?a)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_hole 1))),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 0),
             template_var 0))))),
    ("Rep_Fin_Groups.aezfun_setspan_projD1",
     "?a : ?A ==> aezfun (aezfun_setspan_proj ?A ?x) ?a = aezfun ?x ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Rep_Fin_Groups.supp_deltafun",
     "?b ~= (0::?'a) ==> supp (?b \<delta> ?a) = {?a}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Rep_Fin_Groups.sum_list_listset",
     "?as : listset ?As ==> sum_list ?as : (SUM A<-?As. A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 0)))
           ))),
    ("Rep_Fin_Groups.AbGroup_sum_list",
     "ALL G:set ?Gs. AbGroup G ==> AbGroup (SUM G<-?Gs. G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 0)))
           ))),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum",
     "ALL G:set ?Gs. AbGroup G ==> AbGroup (\<Oplus>G\<leftarrow>?Gs. G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 0)))
           ))),
    ("Rep_Fin_Groups.convolution_zero",
     "?f = 0 | ?g = 0 ==> convolution ?f ?g = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_hole 1)),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Rep_Fin_Groups.VectorSpaceHomSetD_VectorSpaceHom",
     "?T : VectorSpaceHomSet ?fsmult ?V ?fsmult' ?N ==>
      VectorSpaceHom ?fsmult ?V ?fsmult' ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 4)
           ))),
    ("Rep_Fin_Groups.VectorSpaceHomSetD_Im",
     "?T : VectorSpaceHomSet ?fsmult ?V ?fsmult' ?W ==> ?T ` ?V <= ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 4), template_var 2),
         template_var 0))),
    ("Rep_Fin_Groups.sum_list_fun_apply",
     "sum_list (map ?f ?xs) ?y = (SUM x<-?xs. ?f x ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Rep_Fin_Groups.sum_list_map_aezfun",
     "aezfun (sum_list (map ?f ?as)) = (SUM a<-?as. aezfun (?f a))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Rep_Fin_Groups.convolution_delta_delta",
     "convolution (?b1.0 \<delta> ?a1.0) (?b2.0 \<delta> ?a2.0) =
      (?b1.0 * ?b2.0) \<delta> (?a1.0 + ?a2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Rep_Fin_Groups.ker_im_iff",
     "(?A ~= {} & ?A <= ker ?f) = (?f ` ?A = 0)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_hole 5))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app (template_hole 3, template_var 0)))
           ),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Rep_Fin_Groups.inner_dirsumD",
     "add_independentS ?Ms ==>
      (\<Oplus>M\<leftarrow>?Ms. M) = (SUM M<-?Ms. M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, t_empty), template_var 0))))),
    ("Rep_Fin_Groups.restrict_and_extend0_aezfun_is_aezfun",
     "?f : aezfun_set ==> ?f \<down> ?A : aezfun_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, t_empty), template_hole 3)
           ))),
    ("Rep_Fin_Groups.FGModuleHomSetD_Im",
     "?T : FGModuleHomSet ?G ?fgsmult ?V ?fgsmult' ?W ==> ?T ` ?V <= ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 5), template_var 2),
         template_var 0))),
    ("Rep_Fin_Groups.diff_of_aezfun_is_aezfun",
     "[| ?f : aezfun_set; ?g : aezfun_set |] ==> ?f - ?g : aezfun_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Rep_Fin_Groups.sum_of_aezfun_is_aezfun",
     "[| ?f : aezfun_set; ?g : aezfun_set |] ==> ?f + ?g : aezfun_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Rep_Fin_Groups.convolution_of_aezfun_is_aezfun",
     "[| ?f : aezfun_set; ?g : aezfun_set |]
      ==> convolution ?f ?g : aezfun_set",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Rep_Fin_Groups.zip_append_right",
     "zip ?xs (?ys @ ?zs) = zip ?xs ?ys @ zip (drop (length ?ys) ?xs) ?zs",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 2)),
           template_var 0)))),
    ("Rep_Fin_Groups.zip_append_left",
     "zip (?xs @ ?ys) ?zs = zip ?xs ?zs @ zip ?ys (drop (length ?xs) ?zs)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Rep_Fin_Groups.aezfun_setspan_proj_aezdeltafun",
     "aezfun_setspan_proj ?A (?b \<delta>\<delta> ?a) =
      ((\<delta>\<delta>) ?b \<down> ?A) ?a",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_hole 0))),
    ("Rep_Fin_Groups.aezdeltafun_plus",
     "(?b + ?c) \<delta>\<delta> ?a =
      ?b \<delta>\<delta> ?a + ?c \<delta>\<delta> ?a",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Rep_Fin_Groups.FGModuleHomSetD_FGModuleHom",
     "?T : FGModuleHomSet ?G ?fgsmult ?V ?fgsmult' ?W ==>
      FGModuleHom ?G ?fgsmult ?V ?fgsmult' ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 5),
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 5)
           ))),
    ("Rep_Fin_Groups.sum_list_map_aezfun_apply",
     "aezfun (sum_list (map ?f ?as)) ?x = (SUM a<-?as. aezfun (?f a) ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty), template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Rep_Fin_Groups.length_concat_map_split_zip",
     "length (map2 ?f ?xs ?ys) = min (length ?xs) (length ?ys)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Rep_Fin_Groups.concat_map_split_eq_map_split_zip",
     "map2 ?f ?xs ?ys = map2 ?f ?xs ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Rep_Fin_Groups.aezfun_setspan_proj_sum_list",
     "aezfun_setspan_proj ?A (sum_list (map ?f ?xs)) =
      (SUM x<-?xs. aezfun_setspan_proj ?A (?f x))",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Rep_Fin_Groups.sum_fun_apply",
     "finite ?A ==> sum ?f ?A ?x = (SUM a:?A. ?f a ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 2),
           template_var 0),
         template_app
          (template_app (template_hole 0, t_empty), template_var 2)))),
    ("Rep_Fin_Groups.sum_aezfun_apply",
     "finite ?A ==> aezfun (\<Sum> ?A) ?x = (SUM a:?A. aezfun a ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Rep_Fin_Groups.bij_betw_restrict0",
     "bij_betw ?f ?A ?B ==> bij_betw (?f \<down> ?A) ?A ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_var 1),
             template_var 0)
           ))),
    ("Rep_Fin_Groups.RModuleEnd_over_group_ring_is_FGModuleEnd",
     "[| Group ?G; RModuleEnd (aezfun_setspan ?G) ?smult ?V ?T |]
      ==> FGModuleEnd ?G ?smult ?V ?T",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 3)),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Rep_Fin_Groups.GroupHomSetI",
     "[| GroupHom ?G ?T; ?T ` ?G <= ?H |] ==> ?T : GroupHomSet ?G ?H",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 1), template_var 2),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Rep_Fin_Groups.add_independentS_append_reduce_left",
     "[| add_independentS (?As @ ?Bs); (0::?'a) : (SUM X<-?Bs. X) |]
      ==> add_independentS ?As",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, t_empty), template_var 0)))
            )],
       template_predicate
        (template_app (template_hole 5, template_var 1)))),
    ("Rep_Fin_Groups.add_independentS_Cons_conv_sum_right",
     "add_independentS (?A # ?As) =
      (add_independentS [?A, SUM B<-?As. B] & add_independentS ?As)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, t_empty),
                       template_var 0))),
                 template_hole 0)))),
         template_app (template_hole 5, template_var 0)))),
    ("Rep_Fin_Groups.add_independentS_Cons_conv_dirsum_right",
     "add_independentS (?A # ?As) =
      (add_independentS [?A, \<Oplus>B\<leftarrow>?As. B] &
       add_independentS ?As)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, t_empty),
                       template_var 0))),
                 template_hole 0)))),
         template_app (template_hole 5, template_var 0)))),
    ("Rep_Fin_Groups.times_aezdeltafun_aezdeltafun",
     "?b1.0 \<delta>\<delta> ?a1.0 * (?b2.0 \<delta>\<delta> ?a2.0) =
      (?b1.0 * ?b2.0) \<delta>\<delta> (?a1.0 + ?a2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Rep_Fin_Groups.inner_dirsum_doubleD",
     "add_independentS [?M, ?N] ==> ?M \<oplus> ?N = ?M + ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 3))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Rep_Fin_Groups.empty_set_diff_single",
     "?A - {?x} = {} ==> ?A = {} | ?A = {?x}",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1),
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_hole 1)))
           ))),
    ("Rep_Fin_Groups.listset_ConsD",
     "?x # ?xs : listset (?A # ?As) ==> ?x : ?A & ?xs : listset ?As",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_app (template_hole 3, template_var 0)))
           ))),
    ("Rep_Fin_Groups.trivial_RModule",
     "[| Ring1 ?R; ALL r:?R. ?smult r (0::?'m) = (0::?'m) |]
      ==> RModule ?R ?smult 0",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Rep_Fin_Groups.sum_list_listset_dirsum",
     "[| add_independentS ?As; ?as : listset ?As |]
      ==> sum_list ?as : (\<Oplus>A\<leftarrow>?As. A)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, t_empty), template_var 1)))
           ))),
    ("Rep_Fin_Groups.nonzero_coeffs_nonzero_poly",
     "[| ?as ~= []; set ?as ~= 0 |] ==> Poly ?as ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 0),
             template_hole 0)
           ))),
    ("Rep_Fin_Groups.const_poly_nonzero_coeff",
     "[| degree ?p = 0; ?p ~= 0 |] ==> coeff ?p 0 ~= (0::?'a)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0), template_hole 6),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 6),
             template_hole 0)
           ))),
    ("Rep_Fin_Groups.VectorSpaceEndI",
     "[| VectorSpaceHom ?smult ?V ?smult ?T; ?T ` ?V <= ?V |]
      ==> VectorSpaceEnd ?smult ?V ?T",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 2),
              template_var 0)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Rep_Fin_Groups.RModuleI",
     "[| Ring1 ?R; Group ?M; RModule_axioms ?R ?smult ?M |]
      ==> RModule ?R ?smult ?M",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Rep_Fin_Groups.aezdelta0fun_commutes'",
     "?b1.0 \<delta>\<delta> ?a * (?b2.0 \<delta>\<delta> (0::?'a)) =
      ?b2.0 \<delta>\<delta> (0::?'a) * (?b1.0 \<delta>\<delta> ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Rep_Fin_Groups.const_sum_list",
     "ALL x:set ?xs. ?f x = ?a ==> sum_list (map ?f ?xs) = ?a * length ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 2))))),
    ("Rep_Fin_Groups.listset_ConsI",
     "[| ?x : ?X; ?xs : listset ?Xs |] ==> ?x # ?xs : listset (?X # ?Xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Rep_Fin_Groups.set_listset_el_subset",
     "[| ?xs : listset ?Xs; ALL X:set ?Xs. X <= ?A |] ==> set ?xs <= ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)),
              t_empty)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_var 0))),
    ("Rep_Fin_Groups.sum_list_update",
     "?n < length ?xs ==>
      sum_list (?xs[?n := ?y]) = sum_list ?xs - ?xs ! ?n + ?y",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))),
           template_var 0)))),
    ("Rep_Fin_Groups.add_independentS_append_conv_double_sum",
     "add_independentS (?As @ ?Bs) ==>
      add_independentS [SUM X<-?As. X, SUM X<-?Bs. X]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, t_empty),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, t_empty),
                       template_var 0))),
                 template_hole 0)))
           ))),
    ("Rep_Fin_Groups.listsetD_nth",
     "?xs : listset ?Xs ==> ALL n<length ?xs. ?xs ! n : ?Xs ! n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Rep_Fin_Groups.set_sum_list_element",
     "?x : (SUM A<-?As. A) ==> EX as:listset ?As. ?x = (SUM a<-as. a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, t_empty), template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             t_empty)
           ))),
    ("Rep_Fin_Groups.zeroset_eqI",
     "[| (0::?'a) : ?A; !!a. a : ?A ==> a = (0::?'a) |] ==> ?A = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Rep_Fin_Groups.convolution_transfer",
     "[| ?f : aezfun_set; ?g : aezfun_set |]
      ==> Abs_aezfun (convolution ?f ?g) = Abs_aezfun ?f * Abs_aezfun ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Rep_Fin_Groups.strip_while_0_nnil",
     "[| ?as ~= []; set ?as ~= 0 |]
      ==> strip_while ((=) (0::?'a)) ?as ~= []",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)),
               template_var 0),
             template_hole 6)
           ))),
    ("Rep_Fin_Groups.inner_dirsumI",
     "[| ?M = (SUM N<-?Ns. N); add_independentS ?Ns |]
      ==> ?M = (\<Oplus>N\<leftarrow>?Ns. N)",
     template_implication
      ([template_equation
         (template_var 1,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, t_empty), template_var 0))),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, t_empty), template_var 0))))),
    ("Rep_Fin_Groups.sum_list_prod_fun_apply",
     "(SUM (x, y)<-?xys. ?f x y) ?z = (SUM (x, y)<-?xys. ?f x y ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_var 1)),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_var 1)))),
    ("Rep_Fin_Groups.sum_list_prod_map_aezfun",
     "aezfun (SUM (x, y)<-?xys. ?f x y) =
      (SUM (x, y)<-?xys. aezfun (?f x y))",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4, template_app (template_hole 3, t_empty)),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_var 0)))),
    ("Rep_Fin_Groups.convolution_eq_sum_over_supp_right",
     "?g : aezfun_set ==>
      convolution ?f ?g = (%x. SUM y:supp ?g. ?f (x - y) * ?g y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         t_empty))),
    ("Rep_Fin_Groups.convolution_assoc",
     "[| ?f : aezfun_set; ?h : aezfun_set |]
      ==> convolution (convolution ?f ?g) ?h =
          convolution ?f (convolution ?g ?h)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_hole 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Rep_Fin_Groups.VectorSpaceHomSetI",
     "[| VectorSpaceHom ?fsmult ?V ?fsmult' ?T; ?T ` ?V <= ?W |]
      ==> ?T : VectorSpaceHomSet ?fsmult ?V ?fsmult' ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 1), template_var 3),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("Rep_Fin_Groups.AbGroup_subset_sum_list",
     "[| ALL G:set ?Gs. AbGroup G; ?H : set ?Gs |]
      ==> ?H <= (SUM G<-?Gs. G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum_pairwise_int0_double",
     "[| AbGroup ?G; AbGroup ?G'; add_independentS [?G, ?G'] |]
      ==> ?G Int ?G' = 0",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 4, template_var 0),
                  template_hole 3)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Rep_Fin_Groups.add_independentS_double_iff",
     "add_independentS [?A, ?B] =
      (ALL b:?B. ALL a:?A. a + b = (0::?'a) --> a = (0::?'a))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_hole 5))),
       template_app
        (template_app (template_hole 4, template_var 0), t_empty))),
    ("Rep_Fin_Groups.convolution_symm_eq_sum_over_supp_left",
     "?f : aezfun_set ==>
      convolution ?f ?g = (%x. SUM y:supp ?f. ?f y * ?g (- y + x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         t_empty))),
    ("Rep_Fin_Groups.concat_eq",
     "[| list_all2 (%xs ys. length xs = length ys) ?xss ?yss;
         concat ?xss = concat ?yss |]
      ==> ?xss = ?yss",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty), template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Rep_Fin_Groups.aezfun_decomp_aezdeltafun",
     "EX ras.
         set (map snd ras) = supp (aezfun ?c) &
         ?c = (SUM (r, a)<-ras. r \<delta>\<delta> a)",
     template_predicate (template_app (template_hole 13, t_empty))),
    ("Rep_Fin_Groups.sum_list_prod_map_aezfun_apply",
     "aezfun (SUM (x, y)<-?xys. ?f x y) ?a =
      (SUM (x, y)<-?xys. aezfun (?f x y) ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4, template_app (template_hole 3, t_empty)),
               template_var 1))),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_var 1)))),
    ("Rep_Fin_Groups.sum_list_const_mult_prod",
     "?r * (SUM (x, y)<-?xys. ?f x y) = (SUM (x, y)<-?xys. ?r * ?f x y)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_var 0)))),
    ("Rep_Fin_Groups.sum_list_mult_const_prod",
     "(SUM (x, y)<-?xys. ?f x y) * ?r = (SUM (x, y)<-?xys. ?f x y * ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1, template_app (template_hole 0, t_empty)),
               template_var 1))),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_var 1)))),
    ("Rep_Fin_Groups.aezfun_setspan_proj_sum_list_prod",
     "aezfun_setspan_proj ?A (SUM (x, y)<-?xys. ?f x y) =
      (SUM (x, y)<-?xys. aezfun_setspan_proj ?A (?f x y))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_var 0)))),
    ("Rep_Fin_Groups.convolution_distrib_right",
     "[| ?f : aezfun_set; ?g : aezfun_set |]
      ==> convolution (?f + ?g) ?h = convolution ?f ?h + convolution ?g ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Rep_Fin_Groups.convolution_distrib_left",
     "[| ?g : aezfun_set; ?h : aezfun_set |]
      ==> convolution ?f (?g + ?h) = convolution ?f ?g + convolution ?f ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("Rep_Fin_Groups.inner_dirsum_doubleI",
     "[| ?M = ?A + ?B; add_independentS [?A, ?B] |]
      ==> ?M = ?A \<oplus> ?B",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 1),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)))))),
    ("Rep_Fin_Groups.FGModuleHomSetI",
     "[| FGModuleHom ?G ?fgsmult ?V ?fgsmult' ?T; ?T ` ?V <= ?W |]
      ==> ?T : FGModuleHomSet ?G ?fgsmult ?V ?fgsmult' ?W",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 1), template_var 3),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 0))
           ))),
    ("Rep_Fin_Groups.inner_dirsum_double_leftfull_imp_right0",
     "[| Group ?A; ?B ~= {}; ?A = ?A \<oplus> ?B |] ==> ?B = 0",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_equation
         (template_var 1,
          template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))))],
       template_equation (template_var 0, template_hole 0))),
    ("Rep_Fin_Groups.inner_dirsum_Cons",
     "add_independentS (?A # ?As) ==>
      (\<Oplus>X\<leftarrow>?A # ?As. X) =
      ?A \<oplus> (\<Oplus>X\<leftarrow>?As. X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, t_empty),
                     template_var 0))),
               template_hole 0)))))),
    ("Rep_Fin_Groups.prod_ballI",
     "(!!a b. (a, b) : ?AxB ==> ?P a b) ==> ALL (a, b):?AxB. ?P a b",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, t_empty))
           ))),
    ("Rep_Fin_Groups.AbGroup_subset_inner_dirsum",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs; ?H : set ?Gs |]
      ==> ?H <= (\<Oplus>G\<leftarrow>?Gs. G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Rep_Fin_Groups.match_concat",
     "ALL as.
         length as = length (concat ?bss) -->
         (EX css.
             as = concat css &
             list_all2 (%xs ys. length xs = length ys) css ?bss)",
     template_predicate (template_app (template_hole 10, t_empty))),
    ("Rep_Fin_Groups.sum_list_prod_map2",
     "sum_list (map2 ?g ?as (map ?f ?bs)) =
      sum_list (map2 (%a b. ?g a (?f b)) ?as ?bs)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Rep_Fin_Groups.listset_Cons_conv",
     "?xs : listset (?A # ?As) ==>
      EX y ys. y : ?A & ys : listset ?As & ?xs = y # ys",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Rep_Fin_Groups.aezfun_setspan_el_decomp_aezdeltafun",
     "?c : aezfun_setspan ?A ==>
      EX ras.
         set (map snd ras) <= ?A &
         ?c = (SUM (r, a)<-ras. r \<delta>\<delta> a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app (template_hole 12, template_var 0))
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Rep_Fin_Groups.set_zip_map2",
     "(?a, ?z) : set (zip ?xs (map ?f ?ys)) ==>
      EX b. (?a, b) : set (zip ?xs ?ys) & ?z = ?f b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_var 3)),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Rep_Fin_Groups.listsetI_nth",
     "[| length ?xs = length ?Xs; ALL n<length ?xs. ?xs ! n : ?Xs ! n |]
      ==> ?xs : listset ?Xs",
     template_implication
      ([template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Rep_Fin_Groups.seteqI",
     "[| !!a. a : ?A ==> a : ?B; !!b. b : ?B ==> b : ?A |] ==> ?A = ?B",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Rep_Fin_Groups.addfunsetD_add",
     "[| ?f : addfunset ?A ?M; ?x : ?A; ?y : ?A |]
      ==> ?f (?x + ?y) = ?f ?x + ?f ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_var 4,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 4, template_var 1)),
           template_app (template_var 4, template_var 0))))),
    ("Rep_Fin_Groups.AbGroup_nth_subset_inner_dirsum",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs; ?n < length ?Gs |]
      ==> ?Gs ! ?n <= (\<Oplus>G\<leftarrow>?Gs. G)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 1))))),
    ("Rep_Fin_Groups.AbGroup_length_inner_dirsum_el_decomp",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs;
         ?x : (\<Oplus>G\<leftarrow>?Gs. G) |]
      ==> length (\<Oplus>?Gs\<leftarrow> ?x) = length ?Gs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty), template_var 1)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Rep_Fin_Groups.add_independentS_doubleD",
     "[| add_independentS [?A, ?B]; ?b : ?B; ?a : ?A; ?a + ?b = (0::?'a) |]
      ==> ?a = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 0), template_var 1),
          template_hole 0)],
       template_equation (template_var 0, template_hole 0))),
    ("Rep_Fin_Groups.convolution_symm",
     "convolution ?f ?g =
      (%x. SUM y | y : supp ?f & - y + x : supp ?g. ?f y * ?g (- y + x))",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       t_empty)),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum_el_decomp_ex1",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs |]
      ==> ALL x:\<Oplus>G\<leftarrow>?Gs. G.
             EX! gs. gs : listset ?Gs & x = sum_list gs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 0)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, t_empty),
                   template_var 0))),
             t_empty)
           ))),
    ("Rep_Fin_Groups.add_independentS_doubleI",
     "(!!b a. [| b : ?B; a : ?A; a + b = (0::?'a) |] ==> a = (0::?'a)) ==>
      add_independentS [?A, ?B]",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)))
           ))),
    ("Rep_Fin_Groups.set_sum_list_element_Cons",
     "?x : (SUM X<-?A # ?As. X) ==>
      EX a as. a : ?A & as : listset ?As & ?x = a + (SUM b<-as. b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, t_empty),
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Rep_Fin_Groups.sum_single_nonzero",
     "[| finite ?A;
         ALL x:?A. ALL y:?A. ?f x y = (if y = x then ?g x else (0::?'b)) |]
      ==> ALL x:?A. sum (?f x) ?A = ?g x",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 2), t_empty)
           ))),
    ("Rep_Fin_Groups.listset_Group_plus_closed",
     "[| ALL G:set ?Gs. Group G; ?as : listset ?Gs; ?bs : listset ?Gs |]
      ==> map2 (+) ?as ?bs : listset ?Gs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, t_empty)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app (template_hole 4, template_var 2))
           ))),
    ("Rep_Fin_Groups.sum_list_prod_cong",
     "ALL (x, y):set ?xys. ?f x y = ?g x y ==>
      (SUM (x, y)<-?xys. ?f x y) = (SUM (x, y)<-?xys. ?g x y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 2)),
              template_app (template_hole 4, t_empty))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_var 2)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1, template_app (template_hole 0, t_empty)),
             template_var 2))))),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum_el_decompI",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs;
         ?x : (\<Oplus>G\<leftarrow>?Gs. G) |]
      ==> \<Oplus>?Gs\<leftarrow> ?x : listset ?Gs &
          ?x = sum_list (\<Oplus>?Gs\<leftarrow> ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, t_empty), template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_app (template_hole 2, template_var 1))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0))))
           ))),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum_pairwise_int0",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs; ?G : set ?Gs;
         ?G' : set ?Gs; ?G ~= ?G' |]
      ==> ?G Int ?G' = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 7, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Rep_Fin_Groups.FinGroupRepresentation_reducible'",
     "FinGroupRepresentation ?G ?fgsmult ?V &
      ?n =
      R_scalar_mult.dim_R UNIV (aezfun_scalar_mult.fsmult ?fgsmult) ?V ==>
      EX Us.
         Ball (set Us) (IrrFinGroupRepresentation ?G ?fgsmult) &
         0 ~: set Us & ?V = (\<Oplus>U\<leftarrow>Us. U)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_app (template_hole 14, template_var 3),
                    template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 13, template_var 0),
                template_app
                 (template_app
                   (template_app (template_hole 12, template_hole 11),
                    template_app (template_hole 10, template_var 2)),
                  template_var 1)))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Rep_Fin_Groups.addfunsetI",
     "[| supp ?f <= ?A; range ?f <= ?M;
         ALL x:?A. ALL y:?A. ?f (x + y) = ?f x + ?f y |]
      ==> ?f : addfunset ?A ?M",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 2),
          template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 2),
            template_hole 6),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum_el_decomp_in_nth",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs; ?n < length ?Gs;
         ?x : ?Gs ! ?n |]
      ==> \<Oplus>?Gs\<leftarrow> ?x = (replicate (length ?Gs) (0::?'a))
          [?n := ?x]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 7, template_var 2)),
                 template_hole 0)),
             template_var 1),
           template_var 0)))),
    ("Rep_Fin_Groups.inner_dirsum_append",
     "[| add_independentS (?As @ ?Bs); (0::?'a) : (SUM X<-?Bs. X) |]
      ==> (\<Oplus>X\<leftarrow>?As @ ?Bs. X) =
          (\<Oplus>X\<leftarrow>?As. X) \<oplus>
          (\<Oplus>X\<leftarrow>?Bs. X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty), template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 0))),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 4, t_empty),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 4, t_empty),
                     template_var 0))),
               template_hole 0)))))),
    ("Rep_Fin_Groups.conjcases",
     "[| ?P & ?Q ==> ?R; ?P & ~ ?Q ==> ?R; ~ ?P & ?Q ==> ?R;
         ~ ?P & ~ ?Q ==> ?R |]
      ==> ?R",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_app (template_hole 0, template_var 1))
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1)
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_app (template_hole 0, template_var 1))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Rep_Fin_Groups.add_independentS_double_sum_conv_append",
     "[| ALL X:set ?As. (0::?'a) : X; add_independentS ?As;
         add_independentS ?Bs;
         add_independentS [SUM X<-?As. X, SUM X<-?Bs. X] |]
      ==> add_independentS (?As @ ?Bs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, t_empty),
                      template_var 1))),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, t_empty),
                        template_var 0))),
                  template_hole 1)))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Rep_Fin_Groups.add_independentS_ConsI",
     "[| add_independentS ?As;
         !!x a.
            [| x : (SUM X<-?As. X); a : ?A; a + x = (0::?'a) |]
            ==> a = (0::?'a) |]
      ==> add_independentS (?A # ?As)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum_el_decomp_eq",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs;
         ?x : (\<Oplus>G\<leftarrow>?Gs. G); ?gs : listset ?Gs;
         ?x = sum_list ?gs |]
      ==> \<Oplus>?Gs\<leftarrow> ?x = ?gs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, t_empty), template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 2))
            ),
        template_equation
         (template_var 1, template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Rep_Fin_Groups.GroupEnd_inner_dirsum_el_decomp_nth",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs; ?n < length ?Gs |]
      ==> GroupEnd (\<Oplus>G\<leftarrow>?Gs. G)
           (%a. if a : (\<Oplus>G\<leftarrow>?Gs. G)
                then \<Oplus>?Gs\<leftarrow> a ! ?n else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, t_empty),
                   template_var 1))),
             t_empty)
           ))),
    ("Rep_Fin_Groups.aezfun_common_supp_spanning_set",
     "finite ?A ==>
      EX as.
         distinct as &
         set as = ?A &
         (ALL x:aezfun_setspan ?A.
             EX bs.
                length bs = length as &
                x = sum_list (map2 (\<delta>\<delta>) bs as))",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 0))],
       template_predicate (template_app (template_hole 17, t_empty)))),
    ("Rep_Fin_Groups.GSubspace_eigenspace",
     "FGModuleHom ?G ?smult ?V ?smult ?T ==>
      RModule (aezfun_setspan ?G) ?smult
       {v: ?V. ?T v = aezfun_scalar_mult.fsmult ?smult ?e v} &
      {v: ?V. ?T v = aezfun_scalar_mult.fsmult ?smult ?e v} <= ?V",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 4)),
                   template_var 3),
                 template_app (template_hole 4, t_empty))),
             template_app
              (template_app
                (template_hole 0, template_app (template_hole 4, t_empty)),
               template_var 2))
           ))),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum_el_decomp_nth_id_on_nth",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs; ?n < length ?Gs;
         ?x : ?Gs ! ?n |]
      ==> (if ?x : (\<Oplus>G\<leftarrow>?Gs. G)
           then \<Oplus>?Gs\<leftarrow> ?x ! ?n else (0::?'a)) =
          ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 2)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, t_empty),
                     template_var 2)))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_var 1)),
           template_hole 0),
         template_var 0))),
    ("Rep_Fin_Groups.aezfun_common_supp_spanning_set'",
     "finite ?A ==>
      EX as.
         distinct as &
         set as = ?A &
         (ALL f.
             supp f <= ?A -->
             (EX bs.
                 length bs = length as &
                 f = sum_list (map2 (\<delta>) bs as)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 0))],
       template_predicate (template_app (template_hole 18, t_empty)))),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum_el_decomp_nth_onto_nth",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs; ?n < length ?Gs |]
      ==> (%a. if a : (\<Oplus>G\<leftarrow>?Gs. G)
               then \<Oplus>?Gs\<leftarrow> a ! ?n else (0::?'a)) `
          (\<Oplus>G\<leftarrow>?Gs. G) =
          ?Gs ! ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 1)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 10, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 8, t_empty),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, t_empty), template_var 1))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Rep_Fin_Groups.aezfun_common_supp_spanning_set_decomp",
     "finite ?G ==>
      EX gs.
         distinct gs &
         set gs = ?G &
         (ALL x:aezfun_setspan ?G.
             EX rs.
                length rs = length gs &
                x =
                sum_list
                 (map2
                   (%r g. r \<delta>\<delta> (0::?'g) *
                          ((1::?'r) \<delta>\<delta> g))
                   rs gs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 0))],
       template_predicate (template_app (template_hole 20, t_empty)))),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum_el_decomp_ex1_double",
     "[| AbGroup ?G; AbGroup ?H; add_independentS [?G, ?H];
         ?x : ?G \<oplus> ?H |]
      ==> EX! gh. fst gh : ?G & snd gh : ?H & ?x = fst gh + snd gh",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_hole 8)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_app (template_hole 9, template_var 1),
                    template_hole 8))))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum_el_decomp_plus",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs;
         ?x : (\<Oplus>G\<leftarrow>?Gs. G);
         ?y : (\<Oplus>G\<leftarrow>?Gs. G) |]
      ==> \<Oplus>?Gs\<leftarrow> (?x + ?y) =
          map2 (+) (\<Oplus>?Gs\<leftarrow> ?x)
           (\<Oplus>?Gs\<leftarrow> ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app (template_hole 11, template_var 2)),
              t_empty)
            ),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, t_empty), template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, t_empty), template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 0)))))),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum_el_decomp_nth_in_nth",
     "[| ALL G:set ?Gs. AbGroup G; add_independentS ?Gs; ?k < length ?Gs;
         ?n < length ?Gs; ?x : ?Gs ! ?n |]
      ==> (if ?x : (\<Oplus>G\<leftarrow>?Gs. G)
           then \<Oplus>?Gs\<leftarrow> ?x ! ?k else (0::?'a)) =
          (if ?k = ?n then ?x else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app (template_hole 14, template_var 3)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 12, template_var 3)),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 10, template_var 3)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 10, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app (template_hole 8, template_var 3),
                template_var 1))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 9, template_var 0),
                      template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 4, t_empty),
                          template_var 3)))),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 3),
                        template_var 0)),
                    template_var 2)),
                template_hole 1)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 0),
               template_hole 1)
             )))),
    ("Rep_Fin_Groups.AbGroup_inner_dirsum_subset_proj_eq_0",
     "[| ?Gs ~= []; ALL G:set ?Gs. AbGroup G; add_independentS ?Gs;
         ?X <= (\<Oplus>G\<leftarrow>?Gs. G);
         ALL i<length ?Gs.
            (%a. if a : (\<Oplus>G\<leftarrow>?Gs. G)
                 then \<Oplus>?Gs\<leftarrow> a ! i else (0::?'a)) `
            ?X =
            0 |]
      ==> ?X = 0",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 19)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 1)),
              t_empty)
            ),
        template_predicate
         (template_app (template_hole 15, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 13,
            template_app
             (template_app (template_hole 12, t_empty), template_var 1))),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Rep_Fin_Groups.RSubmodule_eigenspace",
     "[| RModuleHom ?R ?smult ?M ?smult ?T; ?r : ?R;
         !!s m.
            [| s : ?R; m : ?M |]
            ==> ?smult s (?smult ?r m) = ?smult ?r (?smult s m) |]
      ==> RModule ?R ?smult {m: ?M. ?T m = ?smult ?r m} &
          {m: ?M. ?T m = ?smult ?r m} <= ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3),
                  template_var 2),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_app (template_hole 1, t_empty))),
             template_app
              (template_app
                (template_hole 0, template_app (template_hole 1, t_empty)),
               template_var 2))
           ))),
    ("Rep_Fin_Groups.pCons_induct2",
     "[| ?P 0 0; !!a p. a ~= (0::?'a) | p ~= 0 ==> ?P (pCons a p) 0;
         !!b q. b ~= (0::?'b) | q ~= 0 ==> ?P 0 (pCons b q);
         !!a p b q.
            [| a ~= (0::?'a) | p ~= 0; b ~= (0::?'b) | q ~= 0; ?P p q |]
            ==> ?P (pCons a p) (pCons b q) |]
      ==> ?P ?p ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_var 2, template_hole 15),
              template_hole 14)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Rep_Fin_GroupsMoreTemplates"
### 0.502s elapsed time, 0.644s cpu time, 0.000s GC time
val it = (): unit
