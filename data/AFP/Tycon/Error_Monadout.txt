Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOL-Library.Countable")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.550s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.205s elapsed time, 0.835s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.410s elapsed time, 1.641s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.505s elapsed time, 2.009s cpu time, 0.185s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.769s elapsed time, 3.036s cpu time, 0.275s GC time
Loading theory "HOLCF.Porder" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun" via "HOLCF.Cpodef" via "HOLCF.Adm" via "HOLCF.Cont" via "HOLCF.Pcpo")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class below = type +
  fixes below :: "'a => 'a => bool"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class po = below +
  assumes "below_refl": "!!x. x << x"
  assumes "below_trans": "!!x y z. [| x << y; y << z |] ==> x << z"
  assumes "below_antisym": "!!x y. [| x << y; y << x |] ==> x = y"
class po = below +
  assumes "below_refl": "!!x. x << x"
  assumes "below_trans": "!!x y z. [| x << y; y << z |] ==> x << z"
  assumes "below_antisym": "!!x y. [| x << y; y << x |] ==> x = y"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class po = below +
  assumes "below_refl": "!!x. x << x"
  assumes "below_trans": "!!x y z. [| x << y; y << z |] ==> x << z"
  assumes "below_antisym": "!!x y. [| x << y; y << x |] ==> x = y"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.106s elapsed time, 4.206s cpu time, 0.875s GC time
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
### theory "HOLCF.Porder"
### 0.541s elapsed time, 1.977s cpu time, 0.677s GC time
Loading theory "HOLCF.Pcpo" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun" via "HOLCF.Cpodef" via "HOLCF.Adm" via "HOLCF.Cont")
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
class cpo = po +
  assumes "cpo": "!!S. chain S ==> EX x. range S <<| x"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class pcpo = cpo +
  assumes "least": "EX x. ALL y. x << y"
class chfin = po +
  assumes "chfin": "!!Y. chain Y ==> EX n. max_in_chain n Y"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.315s elapsed time, 4.777s cpu time, 0.866s GC time
class flat = pcpo +
  assumes "ax_flat": "!!x y. x << y ==> x = \<bottom> | x = y"
Found termination order: "size <*mlex*> {}"
class discrete_cpo = below +
  assumes "discrete_cpo": "!!x y. (x << y) = (x = y)"
### theory "HOL-Library.Tree"
### 2.036s elapsed time, 6.969s cpu time, 1.063s GC time
Loading theory "Draft.Templates" (required by "Draft.Error_MonadMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.180s cpu time, 0.052s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Error_MonadMoreTemplates")
### theory "HOLCF.Pcpo"
### 0.863s elapsed time, 2.100s cpu time, 0.163s GC time
Loading theory "HOLCF.Cont" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun" via "HOLCF.Cpodef" via "HOLCF.Adm")
### theory "HOLCF.Cont"
### 0.141s elapsed time, 0.281s cpu time, 0.000s GC time
Loading theory "HOLCF.Adm" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun" via "HOLCF.Cpodef")
Loading theory "HOLCF.Discrete" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Ssum" via "HOLCF.Tr" via "HOLCF.Lift")
### theory "HOLCF.Adm"
### 0.102s elapsed time, 0.315s cpu time, 0.061s GC time
Loading theory "HOLCF.Cpodef" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun")
Loading theory "HOLCF.Fun_Cpo" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun")
instantiation
  fun :: (type, below) below
  below_fun == below :: ('a => 'b) => ('a => 'b) => bool
### theory "HOLCF.Fun_Cpo"
### 0.092s elapsed time, 0.366s cpu time, 0.000s GC time
Loading theory "HOLCF.Product_Cpo" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation" via "HOLCF.Cfun")
instantiation
  unit :: discrete_cpo
  below_unit == below :: unit => unit => bool
instantiation
  prod :: (below, below) below
  below_prod == below :: 'a * 'b => 'a * 'b => bool
### ML warning (line 143 of "~~/src/HOL/HOLCF/Tools/cpodef.ML"):
### Value identifier (name) has not been referenced.
signature CPODEF =
  sig
    val add_cpodef:
       binding * (string * sort) list * mixfix ->
         term ->
           Typedef.bindings option ->
             (Proof.context -> tactic) * (Proof.context -> tactic) ->
               theory -> (Typedef.info * cpo_info) * theory
    val add_pcpodef:
       binding * (string * sort) list * mixfix ->
         term ->
           Typedef.bindings option ->
             (Proof.context -> tactic) * (Proof.context -> tactic) ->
               theory -> (Typedef.info * cpo_info * pcpo_info) * theory
    val add_podef:
       binding * (string * sort) list * mixfix ->
         term ->
           Typedef.bindings option ->
             (Proof.context -> tactic) ->
               theory -> (Typedef.info * thm) * theory
    type cpo_info =
       {adm: thm,
        below_def: thm,
        compact: thm, cont_Abs: thm, cont_Rep: thm, lub: thm}
    val cpodef_proof:
       (binding * (string * sort) list * mixfix) * term *
       Typedef.bindings option
         -> theory -> Proof.state
    val cpodef_proof_cmd:
       (binding * (string * string option) list * mixfix) * string *
       Typedef.bindings option
         -> theory -> Proof.state
    type pcpo_info =
       {Abs_bottom_iff: thm,
        Abs_strict: thm, Rep_bottom_iff: thm, Rep_strict: thm}
    val pcpodef_proof:
       (binding * (string * sort) list * mixfix) * term *
       Typedef.bindings option
         -> theory -> Proof.state
    val pcpodef_proof_cmd:
       (binding * (string * string option) list * mixfix) * string *
       Typedef.bindings option
         -> theory -> Proof.state
  end
structure Cpodef: CPODEF
### theory "HOLCF.Cpodef"
### 0.187s elapsed time, 0.730s cpu time, 0.067s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.613s elapsed time, 1.739s cpu time, 0.128s GC time
instantiation
  discr :: (type) discrete_cpo
  below_discr == below :: 'a discr => 'a discr => bool
### theory "HOLCF.Discrete"
### 0.361s elapsed time, 1.244s cpu time, 0.128s GC time
### theory "HOLCF.Product_Cpo"
### 0.167s elapsed time, 0.550s cpu time, 0.067s GC time
Loading theory "HOLCF.Cfun" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Deflation")
### theory "HOLCF.Cfun"
### 0.369s elapsed time, 0.399s cpu time, 0.042s GC time
Loading theory "HOLCF.Completion" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal")
Loading theory "HOLCF.Cprod" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite")
Loading theory "HOLCF.Deflation" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions")
Loading theory "HOLCF.Fix" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Domain_Aux" via "HOLCF.Fixrec")
locale deflation
  fixes d :: "'a -> 'a"
  assumes "deflation d"
consts
  iterate :: "nat => ('a -> 'a) -> 'a -> 'a"
locale Completion.preorder
  fixes r :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
  assumes "preorder (\<preceq>)"
### theory "HOLCF.Cprod"
### 0.038s elapsed time, 0.149s cpu time, 0.000s GC time
Loading theory "HOLCF.Sfun" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions")
locale finite_deflation
  fixes d :: "'a -> 'a"
  assumes "finite_deflation d"
locale ep_pair
  fixes e :: "'a -> 'b"
    and p :: "'b -> 'a"
  assumes "ep_pair e p"
locale ideal_completion
  fixes r :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
    and principal :: "'a => 'b"
    and rep :: "'b => 'a set"
  assumes "ideal_completion (\<preceq>) principal rep"
### theory "HOLCF.Fix"
### 0.112s elapsed time, 0.439s cpu time, 0.061s GC time
Loading theory "HOLCF.Sprod" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions")
locale pcpo_ep_pair
  fixes e :: "'a -> 'b"
    and p :: "'b -> 'a"
  assumes "pcpo_ep_pair e p"
### theory "HOLCF.Sfun"
### 0.091s elapsed time, 0.355s cpu time, 0.061s GC time
Loading theory "HOLCF.Up" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Ssum" via "HOLCF.Tr" via "HOLCF.Lift")
### theory "HOLCF.Deflation"
### 0.128s elapsed time, 0.502s cpu time, 0.061s GC time
### theory "HOLCF.Completion"
### 0.158s elapsed time, 0.596s cpu time, 0.061s GC time
### theory "HOLCF.Sprod"
### 0.167s elapsed time, 0.431s cpu time, 0.063s GC time
consts
  Ifup :: "('a -> 'b) => 'a\<^sub>\<bottom> => 'b"
instantiation
  u :: (cpo) below
  below_u == below :: 'a\<^sub>\<bottom> => 'a\<^sub>\<bottom> => bool
### theory "HOLCF.Up"
### 0.373s elapsed time, 0.593s cpu time, 0.063s GC time
Loading theory "HOLCF.Lift" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Ssum" via "HOLCF.Tr")
Proofs for inductive predicate(s) "rec_set_lift"
### theory "HOLCF.Lift"
### 0.262s elapsed time, 0.305s cpu time, 0.056s GC time
Loading theory "HOLCF.One" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Domain_Aux" via "HOLCF.Fixrec")
Loading theory "HOLCF.Tr" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions" via "HOLCF.Ssum")
### theory "HOLCF.One"
### 0.038s elapsed time, 0.076s cpu time, 0.000s GC time
val split_If_tac = fn: Proof.context -> int -> tactic
### theory "HOLCF.Tr"
### 0.083s elapsed time, 0.122s cpu time, 0.000s GC time
Loading theory "HOLCF.Ssum" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite" via "HOLCF.Map_Functions")
### theory "HOLCF.Ssum"
### 0.119s elapsed time, 0.119s cpu time, 0.000s GC time
Loading theory "HOLCF.Fixrec" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Domain_Aux")
Loading theory "HOLCF.Map_Functions" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal" via "HOLCF.Bifinite")
### theory "HOLCF.Map_Functions"
### 0.493s elapsed time, 1.022s cpu time, 0.088s GC time
Loading theory "HOLCF.Bifinite" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic" via "HOLCF.Universal")
### ML warning (file "~~/src/HOL/HOLCF/Tools/holcf_library.ML"):
### Pattern is not exhaustive.
structure HOLCF_Library:
  sig
    val -->> : typ list * typ -> typ
    val ->> : typ * typ -> typ
    val ` : term * term -> term
    val below_const: typ -> term
    val big_lambda: term -> term -> term
    val big_lambdas: term list -> term -> term
    val cabs_const: typ * typ -> term
    val capply_const: typ * typ -> term
    val dest_cfunT: typ -> typ * typ
    val dest_matchT: typ -> typ
    val dest_sprodT: typ -> typ * typ
    val dest_ssumT: typ -> typ * typ
    val dest_upT: typ -> typ
    val from_sinl: typ * typ -> term
    val from_sinr: typ * typ -> term
    val from_up: typ -> term
    val fup_const: typ * typ -> term
    val iterate_const: typ -> term
    val lambda_tuple: term list -> term -> term
    val lambdas: term list -> term -> term
    val list_ccomb: term * term list -> term
    val mk_ID: typ -> term
    val mk_adm: term -> term
    val mk_all: term * term -> term
    val mk_below: term * term -> term
    val mk_bottom: typ -> term
    val mk_cabs: term -> term
    val mk_capply: term * term -> term
    val mk_cfcomp: term * term -> term
    val mk_cfunT: typ * typ -> typ
    val mk_chain: term -> term
    val mk_compact: term -> term
    val mk_conj: term * term -> term
    val mk_cont: term -> term
    val mk_defined: term -> term
    val mk_disj: term * term -> term
    val mk_eq: term * term -> term
    val mk_equals: term * term -> term
    val mk_ex: term * term -> term
    val mk_fail: typ -> term
    val mk_fix: term -> term
    val mk_fst: term -> term
    val mk_fup: term -> term
    val mk_imp: term * term -> term
    val mk_iterate: term * term -> term
    val mk_lub: term -> term
    val mk_matchT: typ -> typ
    val mk_not: term -> term
    val mk_one_case: term -> term
    val mk_prodT: typ * typ -> typ
    val mk_sinjects: term list -> term list
    val mk_snd: term -> term
    val mk_spair: term * term -> term
    val mk_sprodT: typ * typ -> typ
    val mk_sscase: term * term -> term
    val mk_ssplit: term -> term
    val mk_ssumT: typ * typ -> typ
    val mk_strict: term -> term
    val mk_strictify: term -> term
    val mk_stuple: term list -> term
    val mk_succeed: term -> term
    val mk_trp: term -> term
    val mk_tuple: term list -> term
    val mk_tupleT: typ list -> typ
    val mk_undef: term -> term
    val mk_up: term -> term
    val mk_upT: typ -> typ
    val oneT: typ
    val one_case_const: typ -> term
    val sfst_const: typ * typ -> term
    val sinl_const: typ * typ -> term
    val sinr_const: typ * typ -> term
    val spair_const: typ * typ -> term
    val sscase_const: typ * typ * typ -> term
    val ssnd_const: typ * typ -> term
    val ssplit_const: typ * typ * typ -> term
    val succeed_const: typ -> term
    val trT: typ
    val up_const: typ -> term
  end
signature FIXREC =
  sig
    val add_fixrec:
       (binding * typ option * mixfix) list ->
         (bool * (Attrib.binding * term)) list ->
           local_theory -> local_theory
    val add_fixrec_cmd:
       (binding * string option * mixfix) list ->
         (bool * (Attrib.binding * string)) list ->
           local_theory -> local_theory
    val add_matchers: (string * string) list -> theory -> theory
    val fixrec_simp_tac: Proof.context -> int -> tactic
  end
structure Fixrec: FIXREC
### theory "HOLCF.Fixrec"
### 0.701s elapsed time, 1.461s cpu time, 0.145s GC time
Loading theory "HOLCF.Domain_Aux" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain")
locale approx_chain
  fixes approx :: "nat => 'a -> 'a"
  assumes "approx_chain approx"
locale iso
  fixes abs :: "'a -> 'b"
    and rep :: "'b -> 'a"
  assumes "Domain_Aux.iso abs rep"
class bifinite = pcpo +
  assumes "bifinite": "EX a. approx_chain a"
class profinite = cpo +
  assumes "profinite": "EX a. approx_chain a"
### theory "HOLCF.Bifinite"
### 0.639s elapsed time, 1.332s cpu time, 0.133s GC time
Loading theory "HOLCF.Universal" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable" via "HOLCF.Algebraic")
signature DOMAIN_TAKE_PROOFS =
  sig
    val add_deflation_thm: thm -> theory -> theory
    val add_lub_take_theorems:
       (binding * iso_info) list ->
         take_info -> thm list -> theory -> take_induct_info * theory
    val add_rec_type: string * bool list -> theory -> theory
    val define_take_functions:
       (binding * iso_info) list -> theory -> take_info * theory
    val get_deflation_thms: theory -> thm list
    val get_map_ID_thms: theory -> thm list
    val get_rec_tab: theory -> bool list Symtab.table
    type iso_info =
       {absT: typ,
        abs_const: term,
        abs_inverse: thm, repT: typ, rep_const: term, rep_inverse: thm}
    val map_ID_add: attribute
    val map_of_typ: theory -> (typ * term) list -> typ -> term
    type take_induct_info =
       {chain_take_thms: thm list,
        deflation_take_thms: thm list,
        finite_consts: term list,
        finite_defs: thm list,
        is_finite: bool,
        lub_take_thms: thm list,
        reach_thms: thm list,
        take_0_thms: thm list,
        take_Suc_thms: thm list,
        take_consts: term list,
        take_defs: thm list,
        take_induct_thms: thm list,
        take_lemma_thms: thm list, take_strict_thms: thm list}
    type take_info =
       {chain_take_thms: thm list,
        deflation_take_thms: thm list,
        finite_consts: term list,
        finite_defs: thm list,
        take_0_thms: thm list,
        take_Suc_thms: thm list,
        take_consts: term list,
        take_defs: thm list, take_strict_thms: thm list}
  end
structure Domain_Take_Proofs: DOMAIN_TAKE_PROOFS
signature CONT_CONSTS =
  sig
    val add_consts: (binding * typ * mixfix) list -> theory -> theory
    val add_consts_cmd: (binding * string * mixfix) list -> theory -> theory
  end
structure Cont_Consts: CONT_CONSTS
signature CONT_PROC =
  sig
    val all_cont_thms: term -> thm list
    val cont_proc: simproc
    val cont_tac: Proof.context -> int -> tactic
    val cont_thms: term -> thm list
    val is_lcf_term: term -> bool
    val setup: theory -> theory
  end
structure ContProc: CONT_PROC
Proofs for inductive predicate(s) "ubasis_le"
  Proving monotonicity ...
signature DOMAIN_CONSTRUCTORS =
  sig
    val add_domain_constructors:
       binding ->
         (binding * (bool * binding option * typ) list * mixfix) list ->
           Domain_Take_Proofs.iso_info -> theory -> constr_info * theory
    type constr_info =
       {cases: thm list,
        compacts: thm list,
        con_betas: thm list,
        con_rews: thm list,
        con_specs: (term * (bool * typ) list) list,
        dis_rews: thm list,
        dist_eqs: thm list,
        dist_les: thm list,
        exhaust: thm,
        injects: thm list,
        inverts: thm list,
        iso_info: Domain_Take_Proofs.iso_info,
        match_rews: thm list, nchotomy: thm, sel_rews: thm list}
  end
structure Domain_Constructors: DOMAIN_CONSTRUCTORS
signature DOMAIN_INDUCTION =
  sig
    val comp_theorems:
       binding list ->
         Domain_Take_Proofs.take_induct_info ->
           Domain_Constructors.constr_info list ->
             theory -> thm list * theory
    val quiet_mode: bool ref
    val trace_domain: bool ref
  end
structure Domain_Induction: DOMAIN_INDUCTION
### theory "HOLCF.Domain_Aux"
### 0.789s elapsed time, 1.632s cpu time, 0.137s GC time
instantiation
  udom :: below
  below_udom == below :: udom => udom => bool
instantiation
  compact_basis :: (pcpo) below
  below_compact_basis == below ::
    'a compact_basis => 'a compact_basis => bool
locale bifinite_approx_chain
  fixes approx :: "nat => 'a -> 'a"
  assumes "bifinite_approx_chain approx"
consts
  cb_take :: "nat => 'a compact_basis => 'a compact_basis"
locale bifinite_approx_chain
  fixes approx :: "nat => 'a -> 'a"
  assumes "bifinite_approx_chain approx"
### theory "HOLCF.Universal"
### 0.719s elapsed time, 1.116s cpu time, 0.094s GC time
Loading theory "HOLCF.Algebraic" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain" via "HOLCF.Representable")
Loading theory "HOLCF.Compact_Basis" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Powerdomains" via "HOLCF.ConvexPD" via "HOLCF.UpperPD")
instantiation
  fin_defl :: (bifinite) below
  below_fin_defl == below :: 'a fin_defl => 'a fin_defl => bool
### theory "HOLCF.Compact_Basis"
### 0.091s elapsed time, 0.208s cpu time, 0.047s GC time
Loading theory "HOLCF.LowerPD" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Powerdomains" via "HOLCF.ConvexPD")
Loading theory "HOLCF.UpperPD" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Powerdomains" via "HOLCF.ConvexPD")
instantiation
  defl :: (bifinite) below
  below_defl == below :: 'a defl => 'a defl => bool
instantiation
  upper_pd :: (bifinite) below
  below_upper_pd == below :: ('a)\<sharp> => ('a)\<sharp> => bool
instantiation
  lower_pd :: (bifinite) below
  below_lower_pd == below :: ('a)\<flat> => ('a)\<flat> => bool
### theory "HOLCF.Algebraic"
### 0.168s elapsed time, 0.437s cpu time, 0.047s GC time
Loading theory "HOLCF.Representable" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Domain")
class predomain_syn = cpo +
  fixes liftemb :: "'a\<^sub>\<bottom> -> udom\<^sub>\<bottom>"
    and liftprj :: "udom\<^sub>\<bottom> -> 'a\<^sub>\<bottom>"
    and liftdefl :: "'a itself => (udom\<^sub>\<bottom>) defl"
class predomain = predomain_syn +
  assumes "predomain_ep": "ep_pair liftemb liftprj"
  assumes "cast_liftdefl": "cast$(liftdefl TYPE('a)) = liftemb oo liftprj"
### theory "HOLCF.UpperPD"
### 0.275s elapsed time, 0.843s cpu time, 0.105s GC time
### theory "HOLCF.LowerPD"
### 0.275s elapsed time, 0.846s cpu time, 0.105s GC time
Loading theory "HOLCF.ConvexPD" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF" via "HOLCF.Powerdomains")
class domain = pcpo + predomain_syn +
  fixes emb :: "'a -> udom"
    and prj :: "udom -> 'a"
    and defl :: "'a itself => udom defl"
  assumes "ep_pair_emb_prj": "ep_pair emb prj"
  assumes "cast_DEFL": "cast$(defl TYPE('a)) = emb oo prj"
  assumes "liftemb_eq": "liftemb = u_map$emb"
  assumes "liftprj_eq": "liftprj = u_map$prj"
  assumes "liftdefl_eq": "LIFTDEFL('a) = liftdefl_of$(defl TYPE('a))"
instantiation
  convex_pd :: (bifinite) below
  below_convex_pd == below :: ('a)\<natural> => ('a)\<natural> => bool
### theory "HOLCF.ConvexPD"
### 0.433s elapsed time, 0.903s cpu time, 0.082s GC time
instantiation
  udom :: domain
  emb_udom == emb :: udom -> udom
  prj_udom == prj :: udom -> udom
  defl_udom == defl :: udom itself => udom defl
  liftemb_udom == liftemb :: udom\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_udom == liftprj :: udom\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftdefl_udom == liftdefl :: udom itself => (udom\<^sub>\<bottom>) defl
instantiation
  u :: (predomain) domain
  emb_u == emb :: 'a\<^sub>\<bottom> -> udom
  prj_u == prj :: udom -> 'a\<^sub>\<bottom>
  defl_u == defl :: ('a\<^sub>\<bottom>) itself => udom defl
  liftemb_u == liftemb ::
    ('a\<^sub>\<bottom>)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_u == liftprj ::
    udom\<^sub>\<bottom> -> ('a\<^sub>\<bottom>)\<^sub>\<bottom>
  liftdefl_u == liftdefl ::
    ('a\<^sub>\<bottom>) itself => (udom\<^sub>\<bottom>) defl
instantiation
  sfun :: (domain, domain) domain
  emb_sfun == emb :: ('a ->! 'b) -> udom
  prj_sfun == prj :: udom -> 'a ->! 'b
  defl_sfun == defl :: ('a ->! 'b) itself => udom defl
  liftemb_sfun == liftemb ::
    ('a ->! 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_sfun == liftprj ::
    udom\<^sub>\<bottom> -> ('a ->! 'b)\<^sub>\<bottom>
  liftdefl_sfun == liftdefl ::
    ('a ->! 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  cfun :: (predomain, domain) domain
  emb_cfun == emb :: ('a -> 'b) -> udom
  prj_cfun == prj :: udom -> 'a -> 'b
  defl_cfun == defl :: ('a -> 'b) itself => udom defl
  liftemb_cfun == liftemb ::
    ('a -> 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_cfun == liftprj ::
    udom\<^sub>\<bottom> -> ('a -> 'b)\<^sub>\<bottom>
  liftdefl_cfun == liftdefl ::
    ('a -> 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  sprod :: (domain, domain) domain
  emb_sprod == emb :: 'a ** 'b -> udom
  prj_sprod == prj :: udom -> 'a ** 'b
  defl_sprod == defl :: ('a ** 'b) itself => udom defl
  liftemb_sprod == liftemb ::
    ('a ** 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_sprod == liftprj ::
    udom\<^sub>\<bottom> -> ('a ** 'b)\<^sub>\<bottom>
  liftdefl_sprod == liftdefl ::
    ('a ** 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  prod :: (predomain, predomain) predomain
  liftemb_prod == liftemb ::
    ('a * 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_prod == liftprj ::
    udom\<^sub>\<bottom> -> ('a * 'b)\<^sub>\<bottom>
  liftdefl_prod == liftdefl ::
    ('a * 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  prod :: (domain, domain) domain
  emb_prod == emb :: 'a * 'b -> udom
  prj_prod == prj :: udom -> 'a * 'b
  defl_prod == defl :: ('a * 'b) itself => udom defl
instantiation
  unit :: domain
  emb_unit == emb :: unit -> udom
  prj_unit == prj :: udom -> unit
  defl_unit == defl :: unit itself => udom defl
  liftemb_unit == liftemb :: unit\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_unit == liftprj :: udom\<^sub>\<bottom> -> unit\<^sub>\<bottom>
  liftdefl_unit == liftdefl :: unit itself => (udom\<^sub>\<bottom>) defl
instantiation
  discr :: (countable) predomain
  liftemb_discr == liftemb ::
    'a discr\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_discr == liftprj ::
    udom\<^sub>\<bottom> -> 'a discr\<^sub>\<bottom>
  liftdefl_discr == liftdefl ::
    'a discr itself => (udom\<^sub>\<bottom>) defl
instantiation
  ssum :: (domain, domain) domain
  emb_ssum == emb :: 'a ++ 'b -> udom
  prj_ssum == prj :: udom -> 'a ++ 'b
  defl_ssum == defl :: ('a ++ 'b) itself => udom defl
  liftemb_ssum == liftemb ::
    ('a ++ 'b)\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_ssum == liftprj ::
    udom\<^sub>\<bottom> -> ('a ++ 'b)\<^sub>\<bottom>
  liftdefl_ssum == liftdefl ::
    ('a ++ 'b) itself => (udom\<^sub>\<bottom>) defl
instantiation
  lift :: (countable) domain
  emb_lift == emb :: 'a lift -> udom
  prj_lift == prj :: udom -> 'a lift
  defl_lift == defl :: 'a lift itself => udom defl
  liftemb_lift == liftemb :: 'a lift\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_lift == liftprj :: udom\<^sub>\<bottom> -> 'a lift\<^sub>\<bottom>
  liftdefl_lift == liftdefl :: 'a lift itself => (udom\<^sub>\<bottom>) defl
### theory "HOLCF.Representable"
### 1.378s elapsed time, 2.296s cpu time, 0.216s GC time
Loading theory "HOLCF.Domain" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF")
signature DOMAINDEF =
  sig
    val add_domaindef:
       binding * (string * sort) list * mixfix ->
         term ->
           Typedef.bindings option ->
             theory ->
               (Typedef.info * Cpodef.cpo_info * Cpodef.pcpo_info *
                rep_info)
               *
               theory
    val domaindef_cmd:
       (binding * (string * string option) list * mixfix) * string *
       Typedef.bindings option
         -> theory -> theory
    type rep_info =
       {DEFL: thm,
        defl_def: thm,
        emb_def: thm,
        liftdefl_def: thm, liftemb_def: thm, liftprj_def: thm, prj_def: thm}
  end
structure Domaindef: DOMAINDEF
### ML warning (line 52 of "~~/src/HOL/HOLCF/Tools/Domain/domain_isomorphism.ML"):
### Value identifier (udomT) has not been referenced.
signature DOMAIN_ISOMORPHISM =
  sig
    val define_map_functions:
       (binding * Domain_Take_Proofs.iso_info) list ->
         theory ->
           {deflation_map_thms: thm list,
            map_apply_thms: thm list,
            map_consts: term list,
            map_cont_thm: thm, map_unfold_thms: thm list}
           *
           theory
    val domain_isomorphism:
       (string list * binding * mixfix * typ * (binding * binding) option)
       list
         ->
         theory ->
           (Domain_Take_Proofs.iso_info list *
            Domain_Take_Proofs.take_induct_info)
           *
           theory
    val domain_isomorphism_cmd:
       (string list * binding * mixfix * string * (binding * binding) option
       )
       list
         -> theory -> theory
  end
structure Domain_Isomorphism: DOMAIN_ISOMORPHISM
signature DOMAIN_AXIOMS =
  sig
    val add_axioms:
       (binding * mixfix * (typ * typ)) list ->
         theory ->
           (Domain_Take_Proofs.iso_info list *
            Domain_Take_Proofs.take_induct_info)
           *
           theory
    val axiomatize_isomorphism:
       binding * (typ * typ) ->
         theory -> Domain_Take_Proofs.iso_info * theory
    val axiomatize_lub_take: binding * term -> theory -> thm * theory
  end
structure Domain_Axioms: DOMAIN_AXIOMS
signature DOMAIN =
  sig
    val add_domain:
       ((string * sort) list * binding * mixfix *
        (binding * (bool * binding option * typ) list * mixfix) list
       )
       list
         -> theory -> theory
    val add_domain_cmd:
       ((string * string option) list * binding * mixfix *
        (binding * (bool * binding option * string) list * mixfix) list
       )
       list
         -> theory -> theory
    val add_new_domain:
       ((string * sort) list * binding * mixfix *
        (binding * (bool * binding option * typ) list * mixfix) list
       )
       list
         -> theory -> theory
    val add_new_domain_cmd:
       ((string * string option) list * binding * mixfix *
        (binding * (bool * binding option * string) list * mixfix) list
       )
       list
         -> theory -> theory
  end
structure Domain: DOMAIN
### theory "HOLCF.Domain"
### 0.687s elapsed time, 0.740s cpu time, 0.068s GC time
Loading theory "HOLCF.Powerdomains" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp" via "HOLCF")
instantiation
  upper_pd :: (domain) domain
  emb_upper_pd == emb :: ('a)\<sharp> -> udom
  prj_upper_pd == prj :: udom -> ('a)\<sharp>
  defl_upper_pd == defl :: ('a)\<sharp> itself => udom defl
  liftemb_upper_pd == liftemb ::
    ('a)\<sharp>\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_upper_pd == liftprj ::
    udom\<^sub>\<bottom> -> ('a)\<sharp>\<^sub>\<bottom>
  liftdefl_upper_pd == liftdefl ::
    ('a)\<sharp> itself => (udom\<^sub>\<bottom>) defl
instantiation
  lower_pd :: (domain) domain
  emb_lower_pd == emb :: ('a)\<flat> -> udom
  prj_lower_pd == prj :: udom -> ('a)\<flat>
  defl_lower_pd == defl :: ('a)\<flat> itself => udom defl
  liftemb_lower_pd == liftemb ::
    ('a)\<flat>\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_lower_pd == liftprj ::
    udom\<^sub>\<bottom> -> ('a)\<flat>\<^sub>\<bottom>
  liftdefl_lower_pd == liftdefl ::
    ('a)\<flat> itself => (udom\<^sub>\<bottom>) defl
instantiation
  convex_pd :: (domain) domain
  emb_convex_pd == emb :: ('a)\<natural> -> udom
  prj_convex_pd == prj :: udom -> ('a)\<natural>
  defl_convex_pd == defl :: ('a)\<natural> itself => udom defl
  liftemb_convex_pd == liftemb ::
    ('a)\<natural>\<^sub>\<bottom> -> udom\<^sub>\<bottom>
  liftprj_convex_pd == liftprj ::
    udom\<^sub>\<bottom> -> ('a)\<natural>\<^sub>\<bottom>
  liftdefl_convex_pd == liftdefl ::
    ('a)\<natural> itself => (udom\<^sub>\<bottom>) defl
### theory "HOLCF.Powerdomains"
### 0.449s elapsed time, 0.468s cpu time, 0.028s GC time
Loading theory "HOLCF" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor" via "Draft.TypeApp")
### theory "HOLCF"
### 0.023s elapsed time, 0.023s cpu time, 0.000s GC time
Loading theory "Draft.Coerce" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor")
Loading theory "Draft.TypeApp" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad" via "Draft.Functor")
class tycon = type +
  fixes tc :: "'a itself => udom defl -> udom defl"
### theory "Draft.TypeApp"
### 0.167s elapsed time, 0.347s cpu time, 0.036s GC time
### theory "Draft.Coerce"
### 0.168s elapsed time, 0.349s cpu time, 0.036s GC time
Loading theory "Draft.Functor" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus" via "Draft.Monad")
class prefunctor = tycon +
  fixes fmapU :: "(udom -> udom) -> udom\<cdot>'a -> udom\<cdot>'a"
  assumes "isodefl_fmapU": "!!t. isodefl (fmapU$(cast$t)) (TC('a)$t)"
class functor = prefunctor +
  assumes
    "fmapU_fmapU":
      "!!f g xs. fmapU$f$(fmapU$g$xs) = fmapU$(LAM x. f$(g$x))$xs"
### ML warning (line 86 of "$AFP/Tycon/tycondef.ML"):
### Value identifier (T) has not been referenced.
### ML warning (line 785 of "$AFP/Tycon/tycondef.ML"):
### Value identifier (fmap_defs) has not been referenced.
### ML warning (line 814 of "$AFP/Tycon/tycondef.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 821 of "$AFP/Tycon/tycondef.ML"):
### Value identifier (a) has not been referenced.
### ML warning (line 889 of "$AFP/Tycon/tycondef.ML"):
### Value identifier (check_rec) has not been referenced.
signature TYCON =
  sig
    val add_tycon:
       (string * (string * sort) list * binding * mixfix *
        (binding * (bool * binding option * typ) list * mixfix) list
       )
       list
         -> theory -> theory
    val add_tycon_cmd:
       (string * (string * string option) list * binding * mixfix *
        (binding * (bool * binding option * string) list * mixfix) list
       )
       list
         -> theory -> theory
  end
structure Tycon: TYCON
### theory "Draft.Functor"
### 0.524s elapsed time, 0.576s cpu time, 0.073s GC time
Loading theory "Draft.Monad" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad" via "Draft.Monad_Plus")
class monad = prefunctor +
  fixes returnU :: "udom -> udom\<cdot>'a"
    and bindU :: "udom\<cdot>'a -> (udom -> udom\<cdot>'a) -> udom\<cdot>'a"
  assumes
    "fmapU_eq_bindU": "!!f xs. fmapU$f$xs = bindU$xs$(LAM x. returnU$(f$x))"
  assumes "bindU_returnU": "!!f x. bindU$(returnU$x)$f = f$x"
  assumes
    "bindU_bindU":
      "!!xs f g. bindU$(bindU$xs$f)$g = bindU$xs$(LAM x. bindU$(f$x)$g)"
### theory "Draft.Monad"
### 0.552s elapsed time, 1.339s cpu time, 1.090s GC time
Loading theory "Draft.Monad_Plus" (required by "Draft.Error_MonadMoreTemplates" via "Draft.Error_Monad")
class plusU = tycon +
  fixes plusU :: "udom\<cdot>'a -> udom\<cdot>'a -> udom\<cdot>'a"
class functor_plus = functor + plusU +
  assumes
    "fmapU_plusU":
      "!!f a b. fmapU$f$(plusU$a$b) = plusU$(fmapU$f$a)$(fmapU$f$b)"
  assumes
    "plusU_assoc": "!!a b c. plusU$(plusU$a$b)$c = plusU$a$(plusU$b$c)"
class monad_plus = monad + plusU +
  assumes
    "bindU_plusU":
      "!!xs ys k. bindU$(plusU$xs$ys)$k = plusU$(bindU$xs$k)$(bindU$ys$k)"
  assumes
    "plusU_assoc'": "!!a b c. plusU$(plusU$a$b)$c = plusU$a$(plusU$b$c)"
### theory "Draft.Monad_Plus"
### 0.394s elapsed time, 0.402s cpu time, 0.011s GC time
Loading theory "Draft.Error_Monad" (required by "Draft.Error_MonadMoreTemplates")
Defining type "error"
Proving isomorphism properties of domain error ...
Proving induction properties of domain error ...
Proving finiteness rule for domain error ...
instantiation
  error :: (domain) {monad,functor_plus}
  plusU_error == plusU ::
    udom\<cdot>'a error -> udom\<cdot>'a error -> udom\<cdot>'a error
  returnU_error == returnU :: udom -> udom\<cdot>'a error
  bindU_error == bindU ::
    udom\<cdot>'a error ->
    (udom -> udom\<cdot>'a error) -> udom\<cdot>'a error
### theory "Draft.Error_Monad"
### 0.325s elapsed time, 0.327s cpu time, 0.000s GC time
Loading theory "Draft.Error_MonadMoreTemplates"
val templateLemmas =
   [("Error_Monad.fplus_error_simps", "fplus$\<bottom>$?r = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_hole 0)),
    ("Error_Monad.bind_error_simps", "\<bottom> \<bind> ?f = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_var 0),
       template_hole 0)),
    ("Error_Monad.fmap_error_simps", "fmap$?f$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Error_Monad.join_error_simps", "join$(Ok$?x) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Error_Monad.bindU_error_strict", "bindU$\<bottom>$?k = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_hole 0)),
    ("Error_Monad.fmapU_error_simps", "fmapU$?f$\<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Error_Monad.fplus_error_simps", "fplus$(Err$?e)$?r = ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1))),
         template_var 0),
       template_var 0)),
    ("Error_Monad.join_error_simps", "join$(Err$?e) = Err$?e",
     template_equation
      (template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Error_Monad.coerce_Ok",
     "COERCE(?'c\<cdot>?'d error, ?'a\<cdot>?'b error)$(Ok$?m) =
      Ok$(COERCE(?'c, ?'a)$?m)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Error_Monad.coerce_Err",
     "COERCE(?'c\<cdot>?'d error, ?'a\<cdot>?'b error)$(Err$?x) =
      Err$(COERCE(?'d, ?'b)$?x)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Error_Monad.coerce_error_abs",
     "COERCE(?'c\<cdot>?'d error, ?'a\<cdot>?'b error)$(error_abs$?x) =
      error_abs$
      (COERCE
        (?'d\<^sub>\<bottom> ++ ?'c\<^sub>\<bottom>,
         ?'b\<^sub>\<bottom> ++ ?'a\<^sub>\<bottom>)$
       ?x)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Error_Monad.fplus_error_simps", "fplus$(Ok$?x)$?r = Ok$?x",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 1))),
    ("Error_Monad.bind_error_simps", "Ok$?x \<bind> ?f = ?f$?x",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Error_Monad.bind_error_simps", "Err$?e \<bind> ?f = Err$?e",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 1))),
    ("Error_Monad.fmap_error_simps", "fmap$?f$(Err$?e) = Err$?e",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Error_Monad.fmapU_error_simps", "fmapU$?f$(Err$?e) = Err$?e",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Error_Monad.fmap_error_simps", "fmap$?f$(Ok$?x) = Ok$(?f$?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_var 1)),
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Error_Monad.fmapU_error_simps", "fmapU$?f$(Ok$?x) = Ok$(?f$?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Error_Monad.deflation_error_map",
     "[| deflation ?e; deflation ?a |] ==> deflation (error_map$?e$?a)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)),
               template_var 0))
           ))),
    ("Error_Monad.isodefl_error",
     "[| isodefl ?fe ?de; isodefl ?fa ?da |]
      ==> isodefl (error_map$?fe$?fa) (error_defl$?de$?da)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_var 3)),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_var 0))
           ))),
    ("Error_Monad.error_map_unfold",
     "error_map$?e$?a =
      error_abs oo ssum_map$(u_map$?e)$(u_map$?a) oo error_rep",
     template_equation
      (template_app
        (template_app
          (template_hole 17,
           template_app
            (template_app (template_hole 16, template_hole 15),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_hole 12),
             template_hole 11)),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0)))),
           template_hole 0))))]:
   (string * thm * template) list
### theory "Draft.Error_MonadMoreTemplates"
### 0.433s elapsed time, 0.612s cpu time, 0.072s GC time
val it = (): unit
