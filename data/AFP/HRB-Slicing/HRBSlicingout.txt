Loading theory "Draft.AuxLemmas" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.CFGExit_wf" via "Draft.CFGExit" via "Draft.CFG" via "Draft.BasicDefs")
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "HOL-Library.Code_Target_Numeral")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.AuxLemmas"
### 0.037s elapsed time, 0.175s cpu time, 0.000s GC time
Loading theory "Draft.BasicDefs" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.CFGExit_wf" via "Draft.CFGExit" via "Draft.CFG")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
### theory "HOL-Library.Code_Abstract_Nat"
### 0.077s elapsed time, 0.330s cpu time, 0.000s GC time
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.501s cpu time, 0.031s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### theory "HOL-Library.Code_Target_Int"
### 0.154s elapsed time, 0.620s cpu time, 0.031s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Ambiguous input (line 69 of "$AFP/HRB-Slicing/StaticInter/BasicDefs.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>BasicDefs.fun_upds"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###             ("_position" ys))
###           ("_position" V))
###         ("_position" f'))
###       ("_position" xs) ("_position" ys))
###     ("_position" V)))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###       ("_position" ys))
###     ("_cargs"
###       ("\<^const>BasicDefs.fun_upds"
###         ("\<^const>HOL.eq" ("_position" V) ("_position" f'))
###         ("_position" xs) ("_position" ys))
###       ("_position" V))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###         ("_position" ys))
###       ("_position" V))
###     ("_applC"
###       ("\<^const>BasicDefs.fun_upds" ("_position" f') ("_position" xs)
###         ("_position" ys))
###       ("_position" V))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
### theory "HOL-Library.Code_Target_Nat"
### 0.184s elapsed time, 0.715s cpu time, 0.031s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample")
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.788s cpu time, 0.066s GC time
Loading theory "HOL-Library.Transitive_Closure_Table" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses" via "Jinja.Exceptions" via "Jinja.Objects" via "Jinja.TypeRel")
Found termination order: "size_list size <*mlex*> {}"
Proofs for inductive predicate(s) "rtrancl_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rtrancl_tab"
  Proving monotonicity ...
### theory "HOL-Library.Code_Target_Numeral"
### 0.161s elapsed time, 0.624s cpu time, 0.066s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.403s elapsed time, 1.589s cpu time, 0.138s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Transitive_Closure_Table"
### 0.290s elapsed time, 1.145s cpu time, 0.150s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType" via "Jinja.Semilattices" via "Jinja.Err" via "Jinja.Semilat")
Found termination order: "{}"
Found termination order: "{}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.While_Combinator"
### 0.595s elapsed time, 2.192s cpu time, 0.603s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.ExtrEqs")
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
### Ambiguous input (line 141 of "$AFP/HRB-Slicing/StaticInter/BasicDefs.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" et)
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" et)
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_position" p) ("_position" f))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" et)
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_position" p) ("_position" f))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" et)
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BasicDefs"
### 1.268s elapsed time, 4.824s cpu time, 0.850s GC time
Loading theory "Draft.CFG" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.CFGExit_wf" via "Draft.CFGExit")
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 22 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("\<^fixed>Entry"))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("\<^fixed>Entry"))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" Main) ("_position" f))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" Main) ("_position" f)))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" Main) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" Main) ("_position" f')))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" ins) ("_position" outs))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_arg" ("_position" outs))))
###         ("_applC" ("_position" set) ("_position" procs))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" ins) ("_position" outs))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_arg" ("_position" outs))))
###         ("_applC" ("_position" set) ("_position" procs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_proc)
###         ("_applC" ("_position" targetnode) ("_position" a)))
###       ("_position" p))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_proc)
###         ("_applC" ("_position" targetnode) ("_position" a)))
###       ("_position" p))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_proc)
###         ("_applC" ("_position" sourcenode) ("_position" a)))
###       ("_position" p))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_proc)
###         ("_applC" ("_position" sourcenode) ("_position" a)))
###       ("_position" p))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx)
###             ("_idts" ("_position" rx) ("_position" fsx)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Qx)
###               ("_position" rx) ("_position" p) ("_position" fsx))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx)
###             ("_idts" ("_position" rx) ("_position" fsx)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Qx)
###               ("_position" rx) ("_position" p) ("_position" fsx))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Qx)
###               ("_idts" ("_position" rx) ("_position" fsx)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx)))
###           ("_position" rx) ("_position" p) ("_position" fsx))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Qx)
###               ("_idts" ("_position" rx) ("_position" fsx)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx)))
###           ("_position" rx) ("_position" p) ("_position" fsx))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx)
###             ("_idts" ("_position" rx) ("_position" fsx)))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx))
###             ("_position" rx) ("_position" p) ("_position" fsx)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx)
###             ("_idts" ("_position" rx) ("_position" fsx)))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx))
###             ("_position" rx) ("_position" p) ("_position" fsx)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Ambiguous input (line 39 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx) ("_position" fx))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Qx)
###               ("_position" p) ("_position" fx))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx) ("_position" fx))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Qx)
###               ("_position" p) ("_position" fx))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Qx) ("_position" fx))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx)))
###           ("_position" p) ("_position" fx))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Qx) ("_position" fx))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx)))
###           ("_position" p) ("_position" fx))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx) ("_position" fx))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx))
###             ("_position" p) ("_position" fx)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx) ("_position" fx))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx))
###             ("_position" p) ("_position" fx)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" get_return_edges) ("_position" a))
###       ("\<^const>Set.empty"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" get_return_edges) ("_position" a))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" a')
###           ("_applC" ("_position" get_return_edges) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("_position" Q)))
###       ("_position" r) ("_position" p) ("_position" fs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" a')
###           ("_applC" ("_position" get_return_edges) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("_position" Q))
###         ("_position" r) ("_position" p) ("_position" fs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" a')
###           ("_applC" ("_position" get_return_edges) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###         ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###           ("_position" r) ("_position" p) ("_position" fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q')))
###       ("_position" p) ("_position" f'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q')))
###       ("_position" p) ("_position" f'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q'))
###         ("_position" p) ("_position" f')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q'))
###         ("_position" p) ("_position" f')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###           ("_position" p) ("_position" f'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###           ("_position" p) ("_position" f'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r) ("_position" fs)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r) ("_position" fs)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r) ("_position" fs)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r) ("_position" fs)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r) ("_position" fs)))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r) ("_position" fs)))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a)))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a)))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 65 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a)))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a)))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q\<^sub>1)
###               ("_position" r\<^sub>1) ("_position" p)
###               ("_position" fs\<^sub>1))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge"
###                 ("_position" Q\<^sub>2) ("_position" r\<^sub>2)
###                 ("_position" p) ("_position" fs\<^sub>2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" targetnode) ("_position" a))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q\<^sub>1))
###             ("_position" r\<^sub>1) ("_position" p)
###             ("_position" fs\<^sub>1)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge"
###                 ("_position" Q\<^sub>2) ("_position" r\<^sub>2)
###                 ("_position" p) ("_position" fs\<^sub>2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" targetnode) ("_position" a))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q\<^sub>1)
###               ("_position" r\<^sub>1) ("_position" p)
###               ("_position" fs\<^sub>1))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q\<^sub>2))
###               ("_position" r\<^sub>2) ("_position" p)
###               ("_position" fs\<^sub>2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" targetnode) ("_position" a))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q\<^sub>1))
###             ("_position" r\<^sub>1) ("_position" p)
###             ("_position" fs\<^sub>1)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q\<^sub>2))
###               ("_position" r\<^sub>2) ("_position" p)
###               ("_position" fs\<^sub>2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" targetnode) ("_position" a))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
  assumes
    "CFG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main"
### Ambiguous input (line 89 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" ins)
###         ("\<^const>HOL.Ex_binder" ("_position" outs)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))
###       ("_position" ins))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" ins)
###         ("\<^const>HOL.Ex_binder" ("_position" outs)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))
###       ("_position" ins))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Ambiguous input (line 112 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" outs)
###         ("\<^const>HOL.Ex_binder" ("_position" ins)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))
###       ("_position" outs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" outs)
###         ("\<^const>HOL.Ex_binder" ("_position" ins)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))
###       ("_position" outs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.140s elapsed time, 4.325s cpu time, 0.885s GC time
Loading theory "Draft.Com" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.ProcSDG" via "Draft.ValidPaths" via "Draft.WellFormed" via "Draft.Interpretation" via "Draft.WellFormProgs" via "Draft.PCFG" via "Draft.ProcState")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.130s elapsed time, 4.277s cpu time, 1.130s GC time
Loading theory "Jinja.Auxiliary" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses" via "Jinja.Decl" via "Jinja.Type")
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe elimination (elim!)
### [| ?x # ?xs = map ?f ?ys;
###    EX z zs. ?ys = z # zs & ?x = ?f z & ?xs = map ?f zs ==> PROP ?W |]
### ==> PROP ?W
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Jinja.Auxiliary"
### 0.095s elapsed time, 0.369s cpu time, 0.035s GC time
Loading theory "Jinja.Type" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses" via "Jinja.Decl")
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
### Ambiguous input (line 206 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 209 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" valid_edge) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.Type"
### 0.452s elapsed time, 1.781s cpu time, 0.205s GC time
Loading theory "Jinja.Decl" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses")
### theory "HOL-Library.Tree"
### 2.533s elapsed time, 9.637s cpu time, 2.122s GC time
Loading theory "Draft.Templates" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 414 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" intra_kind)
###               ("_applC" ("_position" kind) ("_position" a)))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>intra_path" ("_position" n) ("_position" as) ("_position" n'))
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path"
###     ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###     ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>intra_path" ("_position" n) ("_position" as) ("_position" n'))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n'))
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))))
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path"
###       ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###         ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###       ("_position" as) ("_position" n'))
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.Decl"
### 0.057s elapsed time, 0.227s cpu time, 0.000s GC time
Loading theory "Jinja.TypeRel" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses" via "Jinja.Exceptions" via "Jinja.Objects")
### Ambiguous input (line 470 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" valid_path_aux)
###                   ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" a)
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" c')))
###                     ("_applC" ("_position" valid_path_aux)
###                       ("_cargs" ("_position" cs') ("_position" as)))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" valid_path_aux)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" valid_path_aux)
###                   ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" a)
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" c')))
###                 ("_applC" ("_position" valid_path_aux)
###                   ("_cargs" ("_position" cs') ("_position" as)))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" valid_path_aux)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil")
###                   ("_applC" ("_position" valid_path_aux)
###                     ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" a)
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" c')))
###                     ("_applC" ("_position" valid_path_aux)
###                       ("_cargs" ("_position" cs') ("_position" as))))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.299s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.HRBSlicingMoreTemplates")
Proofs for inductive predicate(s) "subcls1p"
  Proving monotonicity ...
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "widen"
  Proving monotonicity ...
### Ambiguous input (line 483 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 485 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs) ("\<^const>List.list.Nil")))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs) ("\<^const>List.list.Nil")))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 487 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" c') ("_position" cs'))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" a)
###                 ("_applC" ("_position" get_return_edges) ("_position" c'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" c') ("_position" cs'))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" a)
###                 ("_applC" ("_position" get_return_edges) ("_position" c'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 544 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" upd_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" upd_cs)
###                   ("_cargs" ("_position" cs) ("_position" as))))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("_applC" ("_position" upd_cs)
###                     ("_cargs" ("_position" cs') ("_position" as))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" upd_cs)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" upd_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" upd_cs)
###                   ("_cargs" ("_position" cs) ("_position" as))))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("_applC" ("_position" upd_cs)
###                 ("_cargs" ("_position" cs') ("_position" as))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" upd_cs)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" upd_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil")
###                   ("_applC" ("_position" upd_cs)
###                     ("_cargs" ("_position" cs) ("_position" as))))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("_applC" ("_position" upd_cs)
###                     ("_cargs" ("_position" cs') ("_position" as)))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" upd_cs)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Methods"
  Proving monotonicity ...
Proofs for inductive predicate(s) "Fields"
  Proving monotonicity ...
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Ambiguous input (line 647 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 690 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 898 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 950 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("_applC" ("_position" valid_path) ("_position" as)))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>valid_path'" ("_position" n) ("_position" as) ("_position" n'))
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_applC" ("_position" valid_path) ("_position" as)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path"
###     ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###     ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_applC" ("_position" valid_path) ("_position" as)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("_applC" ("_position" valid_path) ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>valid_path'" ("_position" n) ("_position" as) ("_position" n'))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n'))
###     ("_applC" ("_position" valid_path) ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))))
###     ("_applC" ("_position" valid_path) ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path"
###       ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###         ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###       ("_position" as) ("_position" n'))
###     ("_applC" ("_position" valid_path) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Introduced fixed type variable(s): 'a in "y"
### Introduced fixed type variable(s): 'a in "z"
### Ambiguous input (line 1030 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" valid_path_rev_aux)
###                   ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" c')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a)))
###                     ("_applC" ("_position" valid_path_rev_aux)
###                       ("_cargs" ("_position" cs') ("_position" as)))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" valid_path_rev_aux)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" valid_path_rev_aux)
###                   ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" c')
###                   ("_applC" ("_position" get_return_edges) ("_position" a)))
###                 ("_applC" ("_position" valid_path_rev_aux)
###                   ("_cargs" ("_position" cs') ("_position" as)))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" valid_path_rev_aux)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil")
###                   ("_applC" ("_position" valid_path_rev_aux)
###                     ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" c')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a)))
###                     ("_applC" ("_position" valid_path_rev_aux)
###                       ("_cargs" ("_position" cs') ("_position" as))))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.076s elapsed time, 4.064s cpu time, 1.452s GC time
Loading theory "Jinja.Semilat" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType" via "Jinja.Semilattices" via "Jinja.Err")
### Ambiguous input (line 1047 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Semilat
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
  assumes "Semilat A r f"
### Ambiguous input (line 1049 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs) ("\<^const>List.list.Nil")))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs) ("\<^const>List.list.Nil")))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1051 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" c') ("_position" cs')))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" c')
###                 ("_applC" ("_position" get_return_edges) ("_position" a))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" c') ("_position" cs')))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" c')
###                 ("_applC" ("_position" get_return_edges) ("_position" a))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1103 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_rev_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" upd_rev_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" upd_rev_cs)
###                   ("_cargs" ("_position" cs) ("_position" as))))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("_applC" ("_position" upd_rev_cs)
###                     ("_cargs" ("_position" cs') ("_position" as))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" upd_rev_cs)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_rev_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" upd_rev_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" upd_rev_cs)
###                   ("_cargs" ("_position" cs) ("_position" as))))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("_applC" ("_position" upd_rev_cs)
###                 ("_cargs" ("_position" cs') ("_position" as))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" upd_rev_cs)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_rev_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" upd_rev_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil")
###                   ("_applC" ("_position" upd_rev_cs)
###                     ("_cargs" ("_position" cs) ("_position" as))))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("_applC" ("_position" upd_rev_cs)
###                     ("_cargs" ("_position" cs') ("_position" as)))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" upd_rev_cs)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.Semilat"
### 0.324s elapsed time, 1.283s cpu time, 0.065s GC time
Loading theory "Jinja.Err" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType" via "Jinja.Semilattices")
### Ambiguous input (line 53 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>num_inner_nodes" ("_position" Skip))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq" ("_position" Skip)
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 55 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###     ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 14 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>HOL.eq"
###           ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###             ("_position" c\<^sub>2))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>2)
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###         ("\<^fixed>num_inner_nodes" ("_position" c))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c)
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets)))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets))))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1311 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1397 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.TypeRel"
### 1.531s elapsed time, 5.868s cpu time, 1.589s GC time
Loading theory "Jinja.Value" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses" via "Jinja.Exceptions" via "Jinja.Objects")
### Ambiguous input (line 1441 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1485 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1531 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_call_list)
###     ("_cargs" ("_position" cs) ("_position" n)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" cs') ("_idts" ("_position" c) ("_position" cs'')))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" cs)
###         ("\<^const>List.append" ("_position" cs')
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs''))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" c))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" c))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs)))
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" get_proc)
###                 ("_case_syntax" ("_position" cs')
###                   ("_case2"
###                     ("_case1" ("\<^const>List.list.Nil") ("_position" n))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_applC" ("_position" last)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" cs'))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_call_list)
###     ("_cargs" ("_position" cs) ("_position" n)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" cs') ("_idts" ("_position" c) ("_position" cs'')))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" cs)
###         ("\<^const>List.append" ("_position" cs')
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs''))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" c))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.conj"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" c))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" get_proc)
###                 ("_case_syntax" ("_position" cs')
###                   ("_case2"
###                     ("_case1" ("\<^const>List.list.Nil") ("_position" n))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_applC" ("_position" last)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" cs'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1536 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_return_list)
###     ("_cargs" ("_position" cs) ("_position" n)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" cs') ("_idts" ("_position" c) ("_position" cs'')))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" cs)
###         ("\<^const>List.append" ("_position" cs')
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs''))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" c))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" c))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" get_proc)
###                 ("_case_syntax" ("_position" cs')
###                   ("_case2"
###                     ("_case1" ("\<^const>List.list.Nil") ("_position" n))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_applC" ("_position" last)
###                         ("_applC" ("_position" targetnodes)
###                           ("_position" cs'))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_return_list)
###     ("_cargs" ("_position" cs) ("_position" n)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" cs') ("_idts" ("_position" c) ("_position" cs'')))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" cs)
###         ("\<^const>List.append" ("_position" cs')
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs''))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" c))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>HOL.conj"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" c))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" get_proc)
###                 ("_case_syntax" ("_position" cs')
###                   ("_case2"
###                     ("_case1" ("\<^const>List.list.Nil") ("_position" n))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_applC" ("_position" last)
###                         ("_applC" ("_position" targetnodes)
###                           ("_position" cs'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 61 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.greater"
###     ("\<^const>Com.num_inner_nodes" ("_position" c))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.num_inner_nodes"
###     ("\<^const>Orderings.ord_class.greater" ("_position" c)
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>Com.num_inner_nodes" ("_position" c))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Com"
### 2.932s elapsed time, 11.232s cpu time, 2.755s GC time
Loading theory "Draft.Labels" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.ProcSDG" via "Draft.ValidPaths" via "Draft.WellFormed")
### Ambiguous input (line 1914 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_path_rev_aux)
###           ("_cargs" ("\<^const>List.list.Nil") ("_position" as)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" valid_path_rev_aux)
###       ("_cargs" ("\<^const>List.list.Nil") ("_position" as)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1926 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil") ("_position" False))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" a)
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" c')))
###                     ("_applC" ("_position" same_level_path_aux)
###                       ("_cargs" ("_position" cs') ("_position" as)))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" same_level_path_aux)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil") ("_position" False))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" a)
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" c')))
###                 ("_applC" ("_position" same_level_path_aux)
###                   ("_cargs" ("_position" cs') ("_position" as)))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" same_level_path_aux)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil") ("_position" False))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" a)
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" c')))
###                     ("_applC" ("_position" same_level_path_aux)
###                       ("_cargs" ("_position" cs') ("_position" as))))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" same_level_path_aux)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/HRB-Slicing/Proc/Labels.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs" ("_position" c\<^sub>2)
###         ("_cargs" ("_position" l) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###             ("\<^const>Groups.one_class.one"))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs" ("_position" c\<^sub>2)
###         ("_cargs" ("_position" l) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "labels"
  Proving monotonicity ...
### theory "Draft.Labels"
### 0.129s elapsed time, 0.516s cpu time, 0.088s GC time
Loading theory "Draft.ProcState" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.ProcSDG" via "Draft.ValidPaths" via "Draft.WellFormed" via "Draft.Interpretation" via "Draft.WellFormProgs" via "Draft.PCFG")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 1940 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 16 of "$AFP/HRB-Slicing/Proc/ProcState.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" update)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" V) ("_position" e))))
###   ("_Update" ("_position" cf)
###     ("_updbind" ("_position" V)
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" e) ("_position" cf))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" update)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" V) ("_position" e))))
###   ("_applC" ("_position" cf)
###     ("\<^const>Com.cmd.LAss" ("_position" V)
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" e) ("_position" cf))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1942 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" c') ("_position" cs'))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" same_level_path_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" a)
###                 ("_applC" ("_position" get_return_edges) ("_position" c'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" c') ("_position" cs'))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" same_level_path_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" a)
###                 ("_applC" ("_position" get_return_edges) ("_position" c'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ProcState"
### 0.164s elapsed time, 0.648s cpu time, 0.110s GC time
Loading theory "Draft.PCFG" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.ProcSDG" via "Draft.ValidPaths" via "Draft.WellFormed" via "Draft.Interpretation" via "Draft.WellFormProgs")
### Ambiguous input (line 1956 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### No equation for constructor "Err"
consts
  ok_val :: "'a err => 'a"
### Ambiguous input (line 2248 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  strict :: "('a => 'b err) => 'a err => 'b err"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Addr"
consts
  the_Intg :: "val => int"
### No equation for constructor "Unit"
### No equation for constructor "Null"
### No equation for constructor "Bool"
### No equation for constructor "Intg"
consts
  the_Addr :: "val => nat"
consts
  default_val :: "ty => val"
### theory "Jinja.Value"
### 0.489s elapsed time, 1.935s cpu time, 0.198s GC time
Loading theory "Jinja.Objects" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses" via "Jinja.Exceptions")
### Ambiguous input (line 2527 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2715 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2746 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("_applC" ("_position" same_level_path) ("_position" as)))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###     ("_position" n'))
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_applC" ("_position" same_level_path) ("_position" as)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path"
###     ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###     ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_applC" ("_position" same_level_path) ("_position" as)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("_applC" ("_position" same_level_path) ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###     ("_position" n'))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n'))
###     ("_applC" ("_position" same_level_path) ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))))
###     ("_applC" ("_position" same_level_path) ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path"
###       ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###         ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###       ("_position" as) ("_position" n'))
###     ("_applC" ("_position" same_level_path) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2748 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.valid_path'"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" as) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  typeof_h ::
    "(nat => (char list * (char list * char list => val option)) option)
     => val => ty option"
### Ambiguous input (line 2752 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.same_level_path'"
###     ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" as) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2772 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" get_proc) ("_position" n))
###           ("_applC" ("_position" get_proc) ("_position" n')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" get_proc) ("_position" n))
###       ("_applC" ("_position" get_proc) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" get_proc) ("_position" n)))))
###     ("_applC" ("_position" get_proc) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.Err"
### 0.718s elapsed time, 2.844s cpu time, 0.364s GC time
Loading theory "Jinja.Listn" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType" via "Jinja.Semilattices")
### Ambiguous input (line 2894 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.Objects"
### 0.179s elapsed time, 0.705s cpu time, 0.093s GC time
Loading theory "Jinja.Exceptions" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.SystemClasses")
### Ambiguous input (line 2933 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil") ("_position" False))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" c')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a)))
###                     ("_applC" ("_position" same_level_path_rev_aux)
###                       ("_cargs" ("_position" cs') ("_position" as)))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" same_level_path_rev_aux)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil") ("_position" False))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" c')
###                   ("_applC" ("_position" get_return_edges) ("_position" a)))
###                 ("_applC" ("_position" same_level_path_rev_aux)
###                   ("_cargs" ("_position" cs') ("_position" as)))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" same_level_path_rev_aux)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil") ("_position" False))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" c')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a)))
###                     ("_applC" ("_position" same_level_path_rev_aux)
###                       ("_cargs" ("_position" cs') ("_position" as))))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" same_level_path_rev_aux)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  coalesce :: "'a err list => 'a list err"
### Ambiguous input (line 15 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("_applC" ("_position" Label) ("_position" l))
###       ("_position" i))
###     ("_applC" ("_position" Label)
###       ("\<^const>Groups.plus_class.plus" ("_position" l) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("_applC" ("_position" Label) ("_position" l))
###     ("\<^const>HOL.eq" ("_position" i)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 16 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("_position" Entry) ("_position" i))
###     ("_position" Entry)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("_position" Entry)
###     ("\<^const>HOL.eq" ("_position" i) ("_position" Entry))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("_position" Exit) ("_position" i))
###     ("_position" Exit)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("_position" Exit)
###     ("\<^const>HOL.eq" ("_position" i) ("_position" Exit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.Exceptions"
### 0.123s elapsed time, 0.485s cpu time, 0.088s GC time
Loading theory "Jinja.Conform" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform")
Found termination order: "{}"
### Ambiguous input (line 20 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" Exit) ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Exit))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" Exit)
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Exit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("_position" Exit)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Exit))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i) ("_position" Exit))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Exit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" Entry) ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" Entry)
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("_position" Entry)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i) ("_position" Entry))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/Jinja/Common/Conform.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("_tuple"
###       ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###             ("_applC" ("_position" Some) ("_position" obj)))
###           ("_position" P)))
###       ("_tuple_arg" ("\<^fixed>hconf" ("_position" h) ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### ("\<^const>Pure.eq" ("\<^fixed>hconf" ("_position" P) ("_position" h))
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" a) ("_position" obj))
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" a))
###           ("_applC" ("_position" Some) ("_position" obj)))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###           ("_position" obj))))
###     ("_applC" ("_position" preallocated) ("_position" h))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" c))
###         ("_position" n'))
###       ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" c) ("_position" n')))
###       ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" n'))
###         ("_position" c))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" c))
###       ("\<^const>PCFG.label_incr" ("_position" n') ("_position" c))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>PCFG.label_incr" ("_position" n') ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###         ("_position" m))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m)))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m))
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("\<^const>PCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("_position" j))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###         ("_position" m))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m)))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m))
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("\<^const>PCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("_position" j))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i)))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n)))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n))
###         ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i)))
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i)))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n)))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n))
###         ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i)))
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l))
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("_applC" ("_position" Label) ("_position" l))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("_applC" ("_position" Label) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater_eq" ("_position" l)
###       ("_position" i))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l))
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater_eq" ("_position" l)
###       ("_position" i))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 55 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###           ("_position" n))
###         ("_position" i)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 59 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i)
###           ("_applC" ("_position" Label)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2949 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2951 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" c') ("_position" cs')))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" same_level_path_rev_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" c')
###                 ("_applC" ("_position" get_return_edges) ("_position" a))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" c') ("_position" cs')))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" same_level_path_rev_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" c')
###                 ("_applC" ("_position" get_return_edges) ("_position" a))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3155 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3173 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_rev_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_return_list)
###             ("_cargs" ("_position" cs) ("_position" n'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_rev_aux)
###                         ("_cargs" ("_position" cs) ("_position" ys))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_rev_cs)
###                         ("_cargs" ("_position" cs) ("_position" ys)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" Q) ("_position" f)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))))
###       ("_applC" ("_position" get_proc) ("_position" n)) ("_position" f))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_rev_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_return_list)
###             ("_cargs" ("_position" cs) ("_position" n'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_rev_aux)
###                         ("_cargs" ("_position" cs) ("_position" ys))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_rev_cs)
###                         ("_cargs" ("_position" cs) ("_position" ys)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" Q) ("_position" f)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q)))
###         ("_applC" ("_position" get_proc) ("_position" n))
###         ("_position" f)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_rev_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_return_list)
###             ("_cargs" ("_position" cs) ("_position" n'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_rev_aux)
###                         ("_cargs" ("_position" cs) ("_position" ys))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_rev_cs)
###                         ("_cargs" ("_position" cs) ("_position" ys)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" Q) ("_position" f)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_applC" ("_position" get_proc) ("_position" n))
###           ("_position" f))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_rev_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_return_list)
###             ("_cargs" ("_position" cs) ("_position" n'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_rev_aux)
###                         ("_cargs" ("_position" cs) ("_position" ys))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_rev_cs)
###                         ("_cargs" ("_position" cs) ("_position" ys)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" Q) ("_position" f)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_applC" ("_position" get_proc) ("_position" n))
###             ("_position" f)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.Conform"
### 0.198s elapsed time, 0.784s cpu time, 0.097s GC time
Loading theory "Jinja.SystemClasses" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample")
### Ambiguous input (line 3307 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as')
###               ("_list" ("_position" a'))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a')
###             ("_idts" ("_position" as')
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.append" ("_position" as')
###                 ("_list" ("_position" a'))))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q))))
###         ("_position" r) ("_position" p) ("_position" fs))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.append" ("_position" as')
###                 ("_list" ("_position" a'))))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q)))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.conj" ("_list" ("_position" a'))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a'))
###                   ("_position" Q)))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as')
###               ("_list" ("_position" a'))))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.conj"
###               ("\<^const>List.append" ("_position" as')
###                 ("_list" ("_position" a')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3373 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs)))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("_position" Q)))
###         ("_position" r) ("_position" p) ("_position" fs)))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CFG"
### 4.176s elapsed time, 16.129s cpu time, 3.305s GC time
Loading theory "Draft.CFGExit" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.CFGExit_wf")
### theory "Jinja.SystemClasses"
### 0.062s elapsed time, 0.242s cpu time, 0.000s GC time
Loading theory "Draft.CFG_wf" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.CFGExit_wf")
### theory "Jinja.Listn"
### 0.424s elapsed time, 1.676s cpu time, 0.185s GC time
Loading theory "Draft.Distance" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.FundamentalProperty" via "Draft.WeakSimulation" via "Draft.Slice")
### Ambiguous input (line 17 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a))
###             ("\<^fixed>Exit"))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a))
###             ("\<^fixed>Exit"))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 19 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_applC" ("_position" ParamUses)
###           ("_applC" ("_position" sourcenode) ("_position" a))))
###       ("_applC" ("_position" length) ("_position" ins)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_applC" ("_position" ParamUses)
###           ("_applC" ("_position" sourcenode) ("_position" a))))
###       ("_applC" ("_position" length) ("_position" ins)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_applC" ("_position" ParamDefs)
###           ("_applC" ("_position" targetnode) ("_position" a))))
###       ("_applC" ("_position" length) ("_position" outs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_applC" ("_position" ParamDefs)
###           ("_applC" ("_position" targetnode) ("_position" a))))
###       ("_applC" ("_position" length) ("_position" outs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 28 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" set) ("_position" ins))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("_position" Def)
###         ("_applC" ("_position" targetnode) ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" set) ("_position" ins))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("_position" Def)
###         ("_applC" ("_position" targetnode) ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 31 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Def)
###         ("_applC" ("_position" sourcenode) ("_position" a)))
###       ("\<^const>Set.empty"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Def)
###         ("_applC" ("_position" sourcenode) ("_position" a)))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" set) ("_position" outs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("_position" Use)
###         ("_applC" ("_position" sourcenode) ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" set) ("_position" outs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("_position" Use)
###         ("_applC" ("_position" sourcenode) ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" fs))
###       ("_applC" ("_position" length) ("_position" ins)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" fs))
###       ("_applC" ("_position" length) ("_position" ins)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q')
###                 ("_position" r') ("_position" p') ("_position" fs'))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sourcenode) ("_position" a))
###                 ("_applC" ("_position" sourcenode) ("_position" a'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" pred)
###                   ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" pred)
###                     ("_cargs" ("_applC" ("_position" kind) ("_position" a'))
###                       ("_position" s)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" a'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q')
###                 ("_position" r') ("_position" p') ("_position" fs'))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sourcenode) ("_position" a))
###                 ("_applC" ("_position" sourcenode) ("_position" a'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" pred)
###                   ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" pred)
###                     ("_cargs" ("_applC" ("_position" kind) ("_position" a'))
###                       ("_position" s)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" a'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q'))
###               ("_position" r') ("_position" p') ("_position" fs')))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sourcenode) ("_position" a))
###                 ("_applC" ("_position" sourcenode) ("_position" a'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" pred)
###                   ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" pred)
###                     ("_cargs" ("_applC" ("_position" kind) ("_position" a'))
###                       ("_position" s)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" a'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a')))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q'))
###               ("_position" r') ("_position" p') ("_position" fs')))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" sourcenode) ("_position" a))
###                 ("_applC" ("_position" sourcenode) ("_position" a'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" pred)
###                   ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" s))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" pred)
###                     ("_cargs" ("_applC" ("_position" kind) ("_position" a'))
###                       ("_position" s)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" a) ("_position" a'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG" ("_position" prog) ("_position" Entry)
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" s) ("_position" True))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG" ("_position" prog) ("_position" Entry)
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" s) ("_position" True))))
###       ("_position" Label))
###     ("\<^const>Groups.zero_class.zero")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" ins))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" pred)
###                 ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                   ("_position" s))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" pred)
###                   ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" s'))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_Ball" ("_position" V)
###                     ("\<^const>List.nth"
###                       ("_applC" ("_position" ParamUses)
###                         ("_applC" ("_position" sourcenode) ("_position" a)))
###                       ("_position" i))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s) ("_position" V)))
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s')
###                           ("_position" V)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.nth"
###         ("_applC" ("_position" params)
###           ("_cargs" ("_position" fs)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" hd) ("_position" s)))))
###         ("_position" i))
###       ("\<^const>List.nth"
###         ("_applC" ("_position" params)
###           ("_cargs" ("_position" fs)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" hd) ("_position" s')))))
###         ("_position" i)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" ins))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" pred)
###                 ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                   ("_position" s))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" pred)
###                   ("_cargs" ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" s'))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("_Ball" ("_position" V)
###                     ("\<^const>List.nth"
###                       ("_applC" ("_position" ParamUses)
###                         ("_applC" ("_position" sourcenode) ("_position" a)))
###                       ("_position" i))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s) ("_position" V)))
###                       ("_applC" ("_position" state_val)
###                         ("_cargs" ("_position" s')
###                           ("_position" V)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.nth"
###         ("_applC" ("_position" params)
###           ("_cargs" ("_position" fs)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" hd) ("_position" s)))))
###         ("_position" i))
###       ("\<^const>List.nth"
###         ("_applC" ("_position" params)
###           ("_cargs" ("_position" fs)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" hd) ("_position" s')))))
###         ("_position" i)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 88 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" e)
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" update)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" V) ("_position" e)))))))
###         ("_position" Label))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" update)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" V) ("_position" e)))))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>Proc_CFG" ("_position" e)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" update)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" V) ("_position" e)))))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" update)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" V) ("_position" e)))))))
###       ("_position" Label))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###     ("_position" Exit)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>Proc_CFG" ("_position" e)
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###       ("_position" Exit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 94 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 97 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("_applC"
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###           ("_position" et) ("_position" Label))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et)
###       ("_applC" ("_position" Label)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et)
###         ("_applC" ("_position" Label)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_position" n) ("_position" et) ("_position" Label))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" f')
###         ("_cargs" ("_position" vmap) ("_position" vmap')))
###       ("\<^const>BasicDefs.fun_upds" ("_position" vmap')
###         ("_applC" ("_position" ParamDefs)
###           ("_applC" ("_position" targetnode) ("_position" a)))
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" vmap) ("_position" outs)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" f')
###         ("_cargs" ("_position" vmap) ("_position" vmap')))
###       ("\<^const>BasicDefs.fun_upds" ("_position" vmap')
###         ("_applC" ("_position" ParamDefs)
###           ("_applC" ("_position" targetnode) ("_position" a)))
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" vmap) ("_position" outs)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f')
###       ("_cargs" ("_position" vmap)
###         ("\<^const>BasicDefs.fun_upds"
###           ("\<^const>HOL.eq" ("_position" vmap') ("_position" vmap'))
###           ("_applC" ("_position" ParamDefs)
###             ("_applC" ("_position" targetnode) ("_position" a)))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" vmap) ("_position" outs))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f')
###       ("_cargs" ("_position" vmap)
###         ("\<^const>BasicDefs.fun_upds"
###           ("\<^const>HOL.eq" ("_position" vmap') ("_position" vmap'))
###           ("_applC" ("_position" ParamDefs)
###             ("_applC" ("_position" targetnode) ("_position" a)))
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" vmap) ("_position" outs))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f')
###       ("\<^const>BasicDefs.fun_upds"
###         ("\<^const>HOL.eq" ("_applC" ("_position" vmap) ("_position" vmap'))
###           ("_position" vmap'))
###         ("_applC" ("_position" ParamDefs)
###           ("_applC" ("_position" targetnode) ("_position" a)))
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" vmap) ("_position" outs)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" f')
###       ("\<^const>BasicDefs.fun_upds"
###         ("\<^const>HOL.eq" ("_applC" ("_position" vmap) ("_position" vmap'))
###           ("_position" vmap'))
###         ("_applC" ("_position" ParamDefs)
###           ("_applC" ("_position" targetnode) ("_position" a)))
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" vmap) ("_position" outs)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.fun_upds"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f')
###           ("_cargs" ("_position" vmap) ("_position" vmap')))
###         ("_position" vmap'))
###       ("_applC" ("_position" ParamDefs)
###         ("_applC" ("_position" targetnode) ("_position" a)))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" vmap) ("_position" outs))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.fun_upds"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" f')
###           ("_cargs" ("_position" vmap) ("_position" vmap')))
###         ("_position" vmap'))
###       ("_applC" ("_position" ParamDefs)
###         ("_applC" ("_position" targetnode) ("_position" a)))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" vmap) ("_position" outs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" true))))))))
###         ("_position" Label))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" true))))))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" true))))))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" true))))))))
###       ("_position" Label))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" false))))))))
###         ("_position" Label))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" false))))))))
###     ("_applC" ("_position" Label)
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_applC" ("_position" Label)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_position" Label))
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" false))))))))
###         ("_position" Label))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" false))))))))
###     ("_applC" ("_position" Label)
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_position" Label))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.one_class.one"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.one_class.one"))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.one_class.one"))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 114 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 118 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" true))))))))
###       ("_position" Label))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c')
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" true))))))))
###         ("_position" Label))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>Proc_CFG" ("_position" c')
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" true))))))))
###       ("_applC" ("_position" Label)
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" true))))))))
###     ("_applC" ("_position" Label)
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_position" Label))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c')
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" false))))))))
###         ("_position" Label))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>Proc_CFG" ("_position" c')
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" false))))))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 124 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>Proc_CFG" ("_position" c')
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###       ("_position" Exit))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###     ("_position" Exit)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>Proc_CFG" ("_position" c')
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.While" ("_position" b)
###         ("\<^fixed>Proc_CFG" ("_position" c')
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_position" et) ("_position" n')))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et) ("_position" n'))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et) ("_position" Label))
###       ("\<^const>Groups.zero_class.zero"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("_applC"
###         ("\<^fixed>Proc_CFG" ("_position" c')
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_position" et) ("_position" Label))
###         ("\<^const>Groups.zero_class.zero")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>Proc_CFG" ("_position" c')
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("_applC" ("_position" Label)
###           ("\<^const>Groups.zero_class.zero"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("_cargs" ("_position" es)
###         ("_cargs"
###           ("\<^fixed>Proc_CFG" ("_position" rets)
###             ("_applC" ("_position" Label)
###               ("\<^const>Groups.zero_class.zero"))
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" es)
###                   ("_tuple_arg" ("_position" rets)))))
###             ("_position" Label))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("_cargs"
###         ("\<^fixed>Proc_CFG" ("_applC" ("_position" es) ("_position" rets))
###           ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_position" Label))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs"
###       ("\<^fixed>Proc_CFG"
###         ("_applC" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets)))
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_position" Label))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("_applC" ("_position" Call)
###       ("_cargs" ("_position" p)
###         ("_cargs" ("_position" es) ("_position" rets))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" CEdge)
###       ("_tuple" ("_position" p)
###         ("_tuple_args" ("_position" es) ("_tuple_arg" ("_position" rets)))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("\<^fixed>Proc_CFG"
###       ("_applC" ("_position" p)
###         ("_cargs" ("_position" es) ("_position" rets)))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("\<^fixed>Proc_CFG" ("_applC" ("_position" es) ("_position" rets))
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("_cargs" ("_position" es)
###         ("\<^fixed>Proc_CFG" ("_position" rets)
###           ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_applC" ("_position" Label)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" Label))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("_applC" ("_position" Call)
###       ("_cargs" ("_position" p)
###         ("_cargs" ("_position" es) ("_position" rets))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###     ("_position" Exit)))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("\<^fixed>Proc_CFG"
###       ("_applC" ("_position" p)
###         ("_cargs" ("_position" es) ("_position" rets)))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###       ("_position" Exit))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("\<^fixed>Proc_CFG" ("_applC" ("_position" es) ("_position" rets))
###         ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###         ("_position" Exit)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("_cargs" ("_position" es)
###         ("\<^fixed>Proc_CFG" ("_position" rets)
###           ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###           ("_applC" ("_position" IEdge)
###             ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###           ("_position" Exit))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Proc_CFG"
  Proving monotonicity ...
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
  assumes
    "CFG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main"
### Ambiguous input (line 9 of "$AFP/HRB-Slicing/StaticInter/Distance.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" as))
###           ("_position" x)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" as')
###             ("\<^const>HOL.implies"
###               ("\<^const>local.intra_path" ("_position" n) ("_position" as')
###                 ("_position" n'))
###               ("\<^const>Orderings.ord_class.less_eq" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" as')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distance)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" n') ("_position" x))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" as))
###           ("_position" x)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" as')
###             ("\<^const>local.intra_path" ("_position" n) ("_position" as')
###               ("\<^const>HOL.implies" ("_position" n')
###                 ("\<^const>Orderings.ord_class.less_eq" ("_position" x)
###                   ("_applC" ("_position" length) ("_position" as'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distance)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" n') ("_position" x))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" as))
###           ("_position" x)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder" ("_position" as')
###             ("\<^const>Orderings.ord_class.less_eq"
###               ("\<^const>local.intra_path" ("_position" n) ("_position" as')
###                 ("\<^const>HOL.implies" ("_position" n') ("_position" x)))
###               ("_applC" ("_position" length) ("_position" as'))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" distance)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" n') ("_position" x))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "distance"
  Proving monotonicity ...
### Ambiguous input (line 211 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_position" et) ("_applC" ("_position" Label) ("_position" l))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" Label))
###       ("_position" l)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 298 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_position" Label))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Distance"
### 0.400s elapsed time, 1.589s cpu time, 0.073s GC time
Loading theory "Draft.ReturnAndCallNodes" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.FundamentalProperty" via "Draft.WeakSimulation" via "Draft.Slice" via "Draft.SCDObservable" via "Draft.Observable")
locale CFGExit
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "CFGExit sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_)"
### Ambiguous input (line 54 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 6 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" sourcenode) ("_position" a)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" sourcenode) ("_position" a)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" p) ("_position" f)))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" sourcenode) ("_position" a)))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" a))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q)))))
###       ("_position" p) ("_position" f))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" sourcenode) ("_position" a)))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" a))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))))
###         ("_position" p) ("_position" f)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" sourcenode) ("_position" a)))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" a))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q)))
###           ("_position" p) ("_position" f))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_edge) ("_position" a))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))))
###           ("_position" p) ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 59 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" method_exit) ("_position" n)))
###     ("_asms"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit")))
###         ("\<^const>HOL.Trueprop" ("_position" P)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" f) ("_position" p))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" sourcenode) ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" valid_edge) ("_position" a)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" kind) ("_position" a))
###                         ("_position" Q))
###                       ("_position" p) ("_position" f))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" method_exit) ("_position" n)))
###     ("_asms"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit")))
###         ("\<^const>HOL.Trueprop" ("_position" P)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" f) ("_position" p))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" sourcenode) ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" valid_edge) ("_position" a)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" kind) ("_position" a))
###                       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                         ("_position" Q) ("_position" p)
###                         ("_position" f)))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 142 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n') ("\<^fixed>Exit"))
###             ("_position" as)))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n') ("\<^fixed>Exit"))
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" n') ("\<^fixed>Exit"))
###       ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n') ("\<^fixed>Exit")))))
###     ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop" ("_position" n'))))
###       ("\<^fixed>Exit"))
###     ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 161 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_aux)
###                         ("_cargs" ("_position" cs) ("_position" xs))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_cs)
###                         ("_cargs" ("_position" cs) ("_position" xs)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r) ("_position" fs))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))))
###       ("_position" r) ("_applC" ("_position" get_proc) ("_position" n'))
###       ("_position" fs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_aux)
###                         ("_cargs" ("_position" cs) ("_position" xs))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_cs)
###                         ("_cargs" ("_position" cs) ("_position" xs)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r) ("_position" fs))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q)))
###         ("_position" r) ("_applC" ("_position" get_proc) ("_position" n'))
###         ("_position" fs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_aux)
###                         ("_cargs" ("_position" cs) ("_position" xs))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_cs)
###                         ("_cargs" ("_position" cs) ("_position" xs)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r) ("_position" fs))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_applC" ("_position" get_proc) ("_position" n'))
###           ("_position" fs))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_aux)
###                         ("_cargs" ("_position" cs) ("_position" xs))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_cs)
###                         ("_cargs" ("_position" cs) ("_position" xs)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r) ("_position" fs))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r)
###             ("_applC" ("_position" get_proc) ("_position" n'))
###             ("_position" fs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 293 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a')
###             ("_idts" ("_position" as')
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.list.Cons" ("_position" a')
###                 ("_position" as')))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q))))
###         ("_position" p) ("_position" f))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.list.Cons" ("_position" a')
###                 ("_position" as')))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q)))
###           ("_position" p) ("_position" f)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a')
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.conj" ("_position" as')
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a'))
###                   ("_position" Q)))
###               ("_position" p) ("_position" f)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q))
###             ("_position" p) ("_position" f))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.conj"
###               ("\<^const>List.list.Cons" ("_position" a') ("_position" as'))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 353 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q) ("_idts" ("_position" f) ("_position" p)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" f) ("_position" p)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("_position" Q)))
###         ("_position" p) ("_position" f)))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q) ("_idts" ("_position" f) ("_position" p)))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("_position" Q))
###           ("_position" p) ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CFGExit"
### 0.652s elapsed time, 2.585s cpu time, 0.167s GC time
Loading theory "Draft.Postdomination" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.FundamentalProperty" via "Draft.WeakSimulation" via "Draft.Slice" via "Draft.SCDObservable" via "Draft.HRBSlice" via "Draft.SDG")
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
  assumes
    "CFG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main"
locale CFG_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "CFG_wf sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main Def Use ParamDefs ParamUses"
### Ambiguous input (line 73 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 74 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###       ("_position" Q'))
###     ("_position" r') ("_position" p') ("_position" fs')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q')
###       ("_position" r') ("_position" p') ("_position" fs'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ReturnAndCallNodes"
### 0.367s elapsed time, 1.444s cpu time, 0.211s GC time
Loading theory "Draft.Observable" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.FundamentalProperty" via "Draft.WeakSimulation" via "Draft.Slice" via "Draft.SCDObservable")
### Ambiguous input (line 137 of "$AFP/HRB-Slicing/StaticInter/CFG_wf.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CFG_wf"
### 0.835s elapsed time, 3.293s cpu time, 0.284s GC time
Loading theory "Draft.CFGExit_wf" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing")
### Ambiguous input (line 1207 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###     ("_applC" ("_position" Label) ("_position" l))
###     ("_applC" ("_position" CEdge)
###       ("_tuple" ("_position" p)
###         ("_tuple_args" ("_position" es) ("_tuple_arg" ("_position" rets)))))
###     ("_applC" ("_position" Label) ("_position" l'))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###       ("_applC" ("_position" Label) ("_position" l))
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" Label))
###     ("_position" l')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 1255 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PCFG.Proc_CFG" ("_position" c)
###             ("_applC" ("_position" Label) ("_position" l))
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" Label))
###           ("_position" l')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("_lambda" ("_position" s) ("_position" True))
###         ("_tuple" ("_position" p)
###           ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l'))))
###         ("_position" p')
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_pttrns" ("_position" e) ("_position" cf))
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" e) ("_position" cf))))
###             ("_position" es'))))
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Entry))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PCFG.Proc_CFG" ("_position" c)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_applC" ("_position" Label) ("_position" l'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("_lambda" ("_position" s) ("_position" True))
###         ("_tuple" ("_position" p)
###           ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l'))))
###         ("_position" p')
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_pttrns" ("_position" e) ("_position" cf))
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" e) ("_position" cf))))
###             ("_position" es'))))
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Entry))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1261 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_position" Label))
###         ("_position" l')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" ins)
###               ("_tuple_args" ("_position" outs)
###                 ("_tuple_arg" ("_position" c)))))
###           ("_applC" ("_position" set) ("_position" procs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" Main)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p)
###         ("\<^const>BasicDefs.fun_upds"
###           ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###             ("_position" cf'))
###           ("_position" rets)
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" cf) ("_position" outs)))))
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("_applC" ("_position" Label) ("_position" l))
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_applC" ("_position" Label) ("_position" l'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" ins)
###               ("_tuple_args" ("_position" outs)
###                 ("_tuple_arg" ("_position" c)))))
###           ("_applC" ("_position" set) ("_position" procs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" Main)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p)
###         ("\<^const>BasicDefs.fun_upds"
###           ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###             ("_position" cf'))
###           ("_position" rets)
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" cf) ("_position" outs)))))
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_position" Label))
###         ("_position" l')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" ins)
###               ("_tuple_args" ("_position" outs)
###                 ("_tuple_arg" ("_position" c)))))
###           ("_applC" ("_position" set) ("_position" procs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" Main)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###             ("_position" rets)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" cf) ("_position" outs))))))
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("_applC" ("_position" Label) ("_position" l))
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_applC" ("_position" Label) ("_position" l'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" ins)
###               ("_tuple_args" ("_position" outs)
###                 ("_tuple_arg" ("_position" c)))))
###           ("_applC" ("_position" set) ("_position" procs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" Main)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###             ("_position" rets)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" cf) ("_position" outs))))))
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1266 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PCFG.Proc_CFG" ("_position" c)
###             ("_applC" ("_position" Label) ("_position" l))
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" Label))
###           ("_position" l')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" p)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p')
###         ("\<^const>BasicDefs.fun_upds"
###           ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###             ("_position" cf'))
###           ("_position" rets')
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" cf) ("_position" outs')))))
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PCFG.Proc_CFG" ("_position" c)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_applC" ("_position" Label) ("_position" l'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" p)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p')
###         ("\<^const>BasicDefs.fun_upds"
###           ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###             ("_position" cf'))
###           ("_position" rets')
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" cf) ("_position" outs')))))
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PCFG.Proc_CFG" ("_position" c)
###             ("_applC" ("_position" Label) ("_position" l))
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" Label))
###           ("_position" l')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" p)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p')
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###             ("_position" rets')
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" cf) ("_position" outs'))))))
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PCFG.Proc_CFG" ("_position" c)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_applC" ("_position" Label) ("_position" l'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" p)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p')
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###             ("_position" rets')
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" cf) ("_position" outs'))))))
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "PCFG"
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
  assumes
    "CFG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main"
Proofs for inductive predicate(s) "obs_intrap"
  Proving monotonicity ...
  Proving monotonicity ...
### theory "Draft.PCFG"
### 1.812s elapsed time, 7.174s cpu time, 0.634s GC time
Loading theory "Draft.SemanticsCFG" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing")
locale Postdomination
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "Postdomination sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_)"
### Ambiguous input (line 70 of "$AFP/HRB-Slicing/StaticInter/Postdomination.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" pex))
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("\<^const>local.intra_path" ("_position" n)
###                   ("_position" as) ("_position" pex))
###                 ("_applC" ("_position" method_exit) ("_position" pex)))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" as) ("_position" pex))
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj"
###             ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###               ("_position" pex))
###             ("_applC" ("_position" method_exit) ("_position" pex)))
###           ("\<^const>Set.member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>postdominate" ("_position" n')
###     ("\<^const>Pure.eq" ("_position" n)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_node) ("_position" n))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_node) ("_position" n'))
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" as) ("_position" pex))
###             ("\<^const>HOL.implies"
###               ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###                 ("\<^const>HOL.conj" ("_position" pex)
###                   ("_applC" ("_position" method_exit) ("_position" pex))))
###               ("\<^const>Set.member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("_position" as)))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>postdominate" ("_position" n') ("_position" n))
###   ("\<^const>HOL.conj" ("_applC" ("_position" valid_node) ("_position" n))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_node) ("_position" n'))
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" as) ("_position" pex))
###         ("\<^const>HOL.implies"
###           ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" pex)
###               ("_applC" ("_position" method_exit) ("_position" pex))))
###           ("\<^const>Set.member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 132 of "$AFP/HRB-Slicing/StaticInter/Postdomination.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" as)
###     ("\<^const>Set.member"
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("\<^const>HOL.implies" ("\<^fixed>Exit") ("_position" n')))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" sourcenodes) ("_position" as))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" as)
###     ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###       ("\<^const>HOL.implies" ("\<^fixed>Exit")
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" as)
###     ("\<^const>HOL.implies"
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("\<^fixed>Exit"))
###       ("\<^const>Set.member" ("_position" n')
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" sourcenodes) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 362 of "$AFP/HRB-Slicing/StaticInter/Postdomination.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Not"
###     ("_applC"
###       ("\<^const>local.postdominate" ("_position" n)
###         ("_position" targetnode))
###       ("_position" ax))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Not"
###     ("\<^const>local.postdominate" ("_position" n)
###       ("_applC" ("_position" targetnode) ("_position" ax)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/HRB-Slicing/StaticInter/SemanticsCFG.thy") produces 33 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>identifies"
###           ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" n') ("_position" n')))
###           ("\<^const>HOL.conj" ("_position" c')
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_list"
###                     ("_tuple" ("_position" cf)
###                       ("_tuple_arg" ("_position" undefined))))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" transfers)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_list"
###                       ("_tuple" ("_position" cf)
###                         ("_tuple_arg" ("_position" undefined))))))
###                 ("_position" cfs')))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" fst) ("_position" cfs')))
###           ("_position" s'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("\<^const>HOL.conj"
###             ("\<^fixed>identifies" ("_position" n')
###               ("\<^const>HOL.conj" ("_position" c')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" preds)
###                     ("_cargs"
###                       ("_applC" ("_position" kinds) ("_position" as))
###                       ("_list"
###                         ("_tuple" ("_position" cf)
###                           ("_tuple_arg" ("_position" undefined))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" transfers)
###                       ("_cargs"
###                         ("_applC" ("_position" kinds) ("_position" as))
###                         ("_list"
###                           ("_tuple" ("_position" cf)
###                             ("_tuple_arg" ("_position" undefined))))))
###                     ("_position" cfs')))))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" fst) ("_position" cfs')))
###               ("_position" s'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^fixed>identifies" ("_position" n')
###             ("\<^const>HOL.conj" ("_position" c')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" preds)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_list"
###                       ("_tuple" ("_position" cf)
###                         ("_tuple_arg" ("_position" undefined))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" transfers)
###                     ("_cargs"
###                       ("_applC" ("_position" kinds) ("_position" as))
###                       ("_list"
###                         ("_tuple" ("_position" cf)
###                           ("_tuple_arg" ("_position" undefined))))))
###                   ("_position" cfs')))))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" fst) ("_position" cfs')))
###             ("_position" s')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^fixed>identifies" ("_position" n')
###               ("\<^const>HOL.conj" ("_position" c')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" preds)
###                     ("_cargs"
###                       ("_applC" ("_position" kinds) ("_position" as))
###                       ("_list"
###                         ("_tuple" ("_position" cf)
###                           ("_tuple_arg" ("_position" undefined))))))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" transfers)
###                       ("_cargs"
###                         ("_applC" ("_position" kinds) ("_position" as))
###                         ("_list"
###                           ("_tuple" ("_position" cf)
###                             ("_tuple_arg" ("_position" undefined))))))
###                     ("_position" cfs')))))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" fst) ("_position" cfs')))
###           ("_position" s'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n')
###             ("\<^const>HOL.conj"
###               ("\<^fixed>identifies" ("_position" n') ("_position" c'))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" preds)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_list"
###                       ("_tuple" ("_position" cf)
###                         ("_tuple_arg" ("_position" undefined))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" transfers)
###                     ("_cargs"
###                       ("_applC" ("_position" kinds) ("_position" as))
###                       ("_list"
###                         ("_tuple" ("_position" cf)
###                           ("_tuple_arg" ("_position" undefined))))))
###                   ("_position" cfs'))))))
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" fst) ("_position" cfs')))
###           ("_position" s'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^fixed>identifies"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" n') ("_position" n')))
###         ("\<^const>HOL.conj" ("_position" c')
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" preds)
###               ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                 ("_list"
###                   ("_tuple" ("_position" cf)
###                     ("_tuple_arg" ("_position" undefined))))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" transfers)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_list"
###                       ("_tuple" ("_position" cf)
###                         ("_tuple_arg" ("_position" undefined))))))
###                 ("_position" cfs'))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" map)
###                   ("_cargs" ("_position" fst) ("_position" cfs')))
###                 ("_position" s')))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("\<^fixed>identifies" ("_position" n')
###             ("\<^const>HOL.conj" ("_position" c')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" preds)
###                   ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                     ("_list"
###                       ("_tuple" ("_position" cf)
###                         ("_tuple_arg" ("_position" undefined))))))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" transfers)
###                       ("_cargs"
###                         ("_applC" ("_position" kinds) ("_position" as))
###                         ("_list"
###                           ("_tuple" ("_position" cf)
###                             ("_tuple_arg" ("_position" undefined))))))
###                     ("_position" cfs'))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" map)
###                       ("_cargs" ("_position" fst) ("_position" cfs')))
###                     ("_position" s')))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("\<^fixed>identifies" ("_position" n')
###           ("\<^const>HOL.conj" ("_position" c')
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_list"
###                     ("_tuple" ("_position" cf)
###                       ("_tuple_arg" ("_position" undefined))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" transfers)
###                     ("_cargs"
###                       ("_applC" ("_position" kinds) ("_position" as))
###                       ("_list"
###                         ("_tuple" ("_position" cf)
###                           ("_tuple_arg" ("_position" undefined))))))
###                   ("_position" cfs'))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" map)
###                     ("_cargs" ("_position" fst) ("_position" cfs')))
###                   ("_position" s'))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>HOL.conj"
###         ("\<^fixed>identifies"
###           ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" n') ("_position" n')))
###           ("_position" c'))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" preds)
###             ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###               ("_list"
###                 ("_tuple" ("_position" cf)
###                   ("_tuple_arg" ("_position" undefined))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" transfers)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_list"
###                     ("_tuple" ("_position" cf)
###                       ("_tuple_arg" ("_position" undefined))))))
###               ("_position" cfs'))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map)
###                 ("_cargs" ("_position" fst) ("_position" cfs')))
###               ("_position" s'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>identifies" ("_position" n) ("_position" c)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>sem" ("_position" c) ("_list" ("_position" cf))
###           ("_position" c') ("_position" s')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" n') ("_position" as))
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("\<^const>HOL.conj"
###             ("\<^fixed>identifies" ("_position" n') ("_position" c'))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" preds)
###                 ("_cargs" ("_applC" ("_position" kinds) ("_position" as))
###                   ("_list"
###                     ("_tuple" ("_position" cf)
###                       ("_tuple_arg" ("_position" undefined))))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" transfers)
###                     ("_cargs"
###                       ("_applC" ("_position" kinds) ("_position" as))
###                       ("_list"
###                         ("_tuple" ("_position" cf)
###                           ("_tuple_arg" ("_position" undefined))))))
###                   ("_position" cfs'))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" map)
###                     ("_cargs" ("_position" fst) ("_position" cfs')))
###                   ("_position" s'))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Postdomination"
### 0.640s elapsed time, 2.527s cpu time, 0.244s GC time
Loading theory "Draft.WellFormProgs" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.ProcSDG" via "Draft.ValidPaths" via "Draft.WellFormed" via "Draft.Interpretation")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.Observable"
### 0.594s elapsed time, 2.365s cpu time, 0.127s GC time
Loading theory "Jinja.JVMState" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.JVMExec" via "Jinja.JVMExecInstr" via "Jinja.JVMInstructions")
### theory "Jinja.JVMState"
### 0.029s elapsed time, 0.113s cpu time, 0.000s GC time
Loading theory "Jinja.JVMInstructions" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.JVMExec" via "Jinja.JVMExecInstr")
### Ambiguous input (line 278 of "$AFP/HRB-Slicing/Proc/WellFormProgs.thy") produces 22 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" c')
###                 ("_idts" ("_position" n)
###                   ("_idts" ("_position" n')
###                     ("_idts" ("_position" es) ("_position" rets)))))
###               ("_applC"
###                 ("\<^const>PCFG.Proc_CFG" ("_position" c') ("_position" n)
###                   ("_applC" ("_position" CEdge)
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" es)
###                         ("_tuple_arg" ("_position" rets)))))
###                   ("\<^const>HOL.implies" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" distinct) ("_position" rets))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" rets))
###                           ("_applC" ("_position" length)
###                             ("_position" outs)))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" es))
###                           ("_position" length))))))
###                 ("_position" ins)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("_applC"
###               ("\<^const>PCFG.Proc_CFG"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" c')
###                     ("_idts" ("_position" n)
###                       ("_idts" ("_position" n')
###                         ("_idts" ("_position" es) ("_position" rets)))))
###                   ("_position" c'))
###                 ("_position" n)
###                 ("_applC" ("_position" CEdge)
###                   ("_tuple" ("_position" p)
###                     ("_tuple_args" ("_position" es)
###                       ("_tuple_arg" ("_position" rets)))))
###                 ("\<^const>HOL.implies" ("_position" n')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" distinct) ("_position" rets))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" rets))
###                         ("_applC" ("_position" length) ("_position" outs)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" es))
###                         ("_position" length))))))
###               ("_position" ins))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.eq"
###               ("\<^const>PCFG.Proc_CFG"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" c')
###                     ("_idts" ("_position" n)
###                       ("_idts" ("_position" n')
###                         ("_idts" ("_position" es) ("_position" rets)))))
###                   ("_position" c'))
###                 ("_position" n)
###                 ("_applC" ("_position" CEdge)
###                   ("_tuple" ("_position" p)
###                     ("_tuple_args" ("_position" es)
###                       ("_tuple_arg" ("_position" rets)))))
###                 ("\<^const>HOL.implies" ("_position" n')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" distinct) ("_position" rets))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" rets))
###                         ("_applC" ("_position" length) ("_position" outs)))
###                       ("_applC" ("_position" length) ("_position" es))))))
###               ("_applC" ("_position" length) ("_position" ins)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" c')
###                 ("_idts" ("_position" n)
###                   ("_idts" ("_position" n')
###                     ("_idts" ("_position" es) ("_position" rets)))))
###               ("\<^const>HOL.eq"
###                 ("\<^const>PCFG.Proc_CFG" ("_position" c') ("_position" n)
###                   ("_applC" ("_position" CEdge)
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" es)
###                         ("_tuple_arg" ("_position" rets)))))
###                   ("\<^const>HOL.implies" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" distinct) ("_position" rets))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" rets))
###                           ("_applC" ("_position" length)
###                             ("_position" outs)))
###                         ("_applC" ("_position" length) ("_position" es))))))
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" c')
###                 ("_idts" ("_position" n)
###                   ("_idts" ("_position" n')
###                     ("_idts" ("_position" es) ("_position" rets)))))
###               ("\<^const>HOL.conj"
###                 ("_applC"
###                   ("\<^const>PCFG.Proc_CFG" ("_position" c') ("_position" n)
###                     ("_applC" ("_position" CEdge)
###                       ("_tuple" ("_position" p)
###                         ("_tuple_args" ("_position" es)
###                           ("_tuple_arg" ("_position" rets)))))
###                     ("\<^const>HOL.implies" ("_position" n')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" distinct) ("_position" rets))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" rets))
###                           ("_position" length)))))
###                   ("_position" outs))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" es))
###                   ("_applC" ("_position" length) ("_position" ins)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.conj"
###               ("_applC"
###                 ("\<^const>PCFG.Proc_CFG"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" c')
###                       ("_idts" ("_position" n)
###                         ("_idts" ("_position" n')
###                           ("_idts" ("_position" es) ("_position" rets)))))
###                     ("_position" c'))
###                   ("_position" n)
###                   ("_applC" ("_position" CEdge)
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" es)
###                         ("_tuple_arg" ("_position" rets)))))
###                   ("\<^const>HOL.implies" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" distinct) ("_position" rets))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" rets))
###                         ("_position" length)))))
###                 ("_position" outs))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" length) ("_position" es))
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>PCFG.Proc_CFG"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" c')
###                       ("_idts" ("_position" n)
###                         ("_idts" ("_position" n')
###                           ("_idts" ("_position" es) ("_position" rets)))))
###                     ("_position" c'))
###                   ("_position" n)
###                   ("_applC" ("_position" CEdge)
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" es)
###                         ("_tuple_arg" ("_position" rets)))))
###                   ("\<^const>HOL.implies" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" distinct) ("_position" rets))
###                       ("_applC" ("_position" length) ("_position" rets)))))
###                 ("_applC" ("_position" length) ("_position" outs)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" length) ("_position" es))
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" c')
###                 ("_idts" ("_position" n)
###                   ("_idts" ("_position" n')
###                     ("_idts" ("_position" es) ("_position" rets)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>PCFG.Proc_CFG" ("_position" c') ("_position" n)
###                     ("_applC" ("_position" CEdge)
###                       ("_tuple" ("_position" p)
###                         ("_tuple_args" ("_position" es)
###                           ("_tuple_arg" ("_position" rets)))))
###                     ("\<^const>HOL.implies" ("_position" n')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" distinct) ("_position" rets))
###                         ("_applC" ("_position" length)
###                           ("_position" rets)))))
###                   ("_applC" ("_position" length) ("_position" outs)))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" es))
###                   ("_applC" ("_position" length) ("_position" ins)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.conj"
###               ("\<^const>PCFG.Proc_CFG"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" c')
###                     ("_idts" ("_position" n)
###                       ("_idts" ("_position" n')
###                         ("_idts" ("_position" es) ("_position" rets)))))
###                   ("_position" c'))
###                 ("_position" n)
###                 ("_applC" ("_position" CEdge)
###                   ("_tuple" ("_position" p)
###                     ("_tuple_args" ("_position" es)
###                       ("_tuple_arg" ("_position" rets)))))
###                 ("\<^const>HOL.implies" ("_position" n')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" distinct) ("_position" rets))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" length) ("_position" rets))
###                       ("_applC" ("_position" length) ("_position" outs))))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" length) ("_position" es))
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" c')
###                 ("_idts" ("_position" n)
###                   ("_idts" ("_position" n')
###                     ("_idts" ("_position" es) ("_position" rets)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>PCFG.Proc_CFG" ("_position" c') ("_position" n)
###                   ("_applC" ("_position" CEdge)
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" es)
###                         ("_tuple_arg" ("_position" rets)))))
###                   ("\<^const>HOL.implies" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" distinct) ("_position" rets))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" rets))
###                         ("_applC" ("_position" length)
###                           ("_position" outs))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" es))
###                   ("_applC" ("_position" length) ("_position" ins)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale CFGExit_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "CFGExit_wf sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
### theory "Draft.CFGExit_wf"
### 0.632s elapsed time, 2.502s cpu time, 0.203s GC time
Loading theory "Draft.SDG" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.FundamentalProperty" via "Draft.WeakSimulation" via "Draft.Slice" via "Draft.SCDObservable" via "Draft.HRBSlice")
### theory "Draft.WellFormProgs"
### 0.243s elapsed time, 0.966s cpu time, 0.076s GC time
Loading theory "Draft.Interpretation" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.ProcSDG" via "Draft.ValidPaths" via "Draft.WellFormed")
locale CFG_semantics_wf
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and
    sem ::
      "'com
       => ('var => 'val option) list
          => 'com => ('var => 'val option) list => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
  assumes
    "CFG_semantics_wf sourcenode targetnode kind valid_edge (_Entry_)
      get_proc get_return_edges procs Main sem identifies"
### theory "Draft.SemanticsCFG"
### 0.528s elapsed time, 2.094s cpu time, 0.132s GC time
Loading theory "Jinja.WellForm" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType")
### Ambiguous input (line 23 of "$AFP/HRB-Slicing/Proc/Interpretation.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" get_return_edges)
###     ("_cargs" ("_position" wfp) ("_position" a)))
###   ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###     ("_case2"
###       ("_case1"
###         ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###           ("_position" r) ("_position" p) ("_position" fs))
###         ("_Coll" ("_position" a')
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge)
###               ("_cargs" ("_position" wfp) ("_position" a')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" Q') ("_position" f'))
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a'))
###                     ("_position" Q'))
###                   ("_position" p) ("_position" f')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" targetnode) ("_position" a'))
###                 ("_position" r))))))
###       ("_case1" ("\<^const>Pure.dummy_pattern") ("\<^const>Set.empty")))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" get_return_edges)
###     ("_cargs" ("_position" wfp) ("_position" a)))
###   ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###     ("_case2"
###       ("_case1"
###         ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###           ("_position" r) ("_position" p) ("_position" fs))
###         ("_Coll" ("_position" a')
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge)
###               ("_cargs" ("_position" wfp) ("_position" a')))
###             ("\<^const>HOL.conj"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" Q') ("_position" f'))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a'))
###                     ("_position" Q')))
###                 ("_position" p) ("_position" f'))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" targetnode) ("_position" a'))
###                 ("_position" r))))))
###       ("_case1" ("\<^const>Pure.dummy_pattern") ("\<^const>Set.empty")))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" get_return_edges)
###     ("_cargs" ("_position" wfp) ("_position" a)))
###   ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###     ("_case2"
###       ("_case1"
###         ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###           ("_position" r) ("_position" p) ("_position" fs))
###         ("_Coll" ("_position" a')
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge)
###               ("_cargs" ("_position" wfp) ("_position" a')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" Q') ("_position" f'))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a'))
###                   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                     ("_position" Q') ("_position" p) ("_position" f'))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" targetnode) ("_position" a'))
###                 ("_position" r))))))
###       ("_case1" ("\<^const>Pure.dummy_pattern") ("\<^const>Set.empty")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/HRB-Slicing/Proc/Interpretation.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" kind) ("_position" a)) ("_position" Q)))
###       ("_position" r) ("_position" p) ("_position" fs)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_return_edges)
###         ("_cargs" ("_position" wfp) ("_position" a)))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" kind) ("_position" a)) ("_position" Q))
###         ("_position" r) ("_position" p) ("_position" fs))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_return_edges)
###         ("_cargs" ("_position" wfp) ("_position" a)))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.not_equal"
###         ("_applC" ("_position" kind) ("_position" a))
###         ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_return_edges)
###         ("_cargs" ("_position" wfp) ("_position" a)))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/HRB-Slicing/Proc/Interpretation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/HRB-Slicing/Proc/Interpretation.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("_position" Q')))
###     ("_position" p) ("_position" f')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("_position" Q'))
###       ("_position" p) ("_position" f'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###         ("_position" p) ("_position" f')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/HRB-Slicing/Proc/Interpretation.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" get_return_edges)
###         ("_cargs" ("_position" wfp) ("_position" a)))
###       ("\<^const>Set.empty"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" get_return_edges)
###         ("_cargs" ("_position" wfp) ("_position" a)))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/HRB-Slicing/Proc/Interpretation.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges)
###               ("_cargs" ("_position" wfp) ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q')))
###       ("_position" p) ("_position" f'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges)
###               ("_cargs" ("_position" wfp) ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q')))
###       ("_position" p) ("_position" f'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges)
###               ("_cargs" ("_position" wfp) ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q'))
###         ("_position" p) ("_position" f')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges)
###               ("_cargs" ("_position" wfp) ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q'))
###         ("_position" p) ("_position" f')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges)
###               ("_cargs" ("_position" wfp) ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###           ("_position" p) ("_position" f'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges)
###               ("_cargs" ("_position" wfp) ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###           ("_position" p) ("_position" f'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.WellForm"
### 0.297s elapsed time, 1.176s cpu time, 0.149s GC time
Loading theory "Jinja.Opt" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType" via "Jinja.Semilattices")
### theory "Jinja.Opt"
### 0.140s elapsed time, 0.549s cpu time, 0.131s GC time
Loading theory "Jinja.Product" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType" via "Jinja.Semilattices")
### theory "Jinja.Product"
### 0.703s elapsed time, 2.481s cpu time, 2.029s GC time
Loading theory "Jinja.Semilattices" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType" via "Jinja.SemiType")
### theory "Jinja.Semilattices"
### 0.342s elapsed time, 1.368s cpu time, 0.106s GC time
Loading theory "Jinja.SemiType" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect" via "Jinja.JVM_SemiType")
Found termination order: "{}"
### No equation for constructor "Void"
### No equation for constructor "Boolean"
### No equation for constructor "Integer"
### No equation for constructor "NT"
consts
  the_Class :: "ty => char list"
### theory "Jinja.SemiType"
### 0.360s elapsed time, 1.427s cpu time, 0.308s GC time
Loading theory "Jinja.JVM_SemiType" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec" via "Jinja.Effect")
### theory "Jinja.JVMInstructions"
### 2.133s elapsed time, 8.147s cpu time, 2.799s GC time
Loading theory "Jinja.JVMExceptions" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.JVMExec")
consts
  match_ex_table ::
    "(char list *
      char list *
      (char list * ty) list * (char list * ty list * ty * 'm) list) list
     => char list
        => nat
           => (nat * nat * char list * nat * nat) list
              => (nat * nat) option"
consts
  find_handler ::
    "(char list *
      char list *
      (char list * ty) list *
      (char list *
       ty list *
       ty *
       nat *
       nat *
       instr list * (nat * nat * char list * nat * nat) list) list) list
     => nat
        => (nat
            => (char list * (char list * char list => val option)) option)
           => (val list * val list * char list * char list * nat) list
              => nat option *
                 (nat
                  => (char list *
                      (char list * char list => val option)) option) *
                 (val list * val list * char list * char list * nat) list"
### theory "Jinja.JVMExceptions"
### 0.235s elapsed time, 0.937s cpu time, 0.150s GC time
Loading theory "Jinja.JVMExecInstr" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample" via "Jinja.JVMExec")
### theory "Jinja.JVM_SemiType"
### 0.274s elapsed time, 1.096s cpu time, 0.150s GC time
Loading theory "Jinja.Effect" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform" via "Jinja.BVSpec")
locale SDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "SDG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
### Ambiguous input (line 41 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Formal_in)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" ins) ("_position" outs)))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Formal_in)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" ins) ("_position" outs)))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Formal_out)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" ins) ("_position" outs))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" p) ("_position" f))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sourcenode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Formal_out)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" ins) ("_position" outs))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sourcenode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Actual_in)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" ins) ("_position" outs)))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sourcenode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Actual_in)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" ins) ("_position" outs)))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" sourcenode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 50 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Actual_out)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" ins) ("_position" outs))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" p) ("_position" f))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_SDG_node)
###       ("_applC" ("_position" Actual_out)
###         ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x)))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" ins) ("_position" outs))))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_position" m))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p)
###                   ("_tuple_args" ("_position" ins)
###                     ("_tuple_arg" ("_position" outs))))
###                 ("_applC" ("_position" set) ("_position" procs)))
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale prog
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
locale jvm_method
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and mxl :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
consts
  succs :: "instr => ty list * ty err list => nat => nat list"
### Missing patterns in function definition:
### the_class Void = undefined
### the_class Boolean = undefined
### the_class Integer = undefined
### (1 more)
Found termination order: "{}"
### Missing patterns in function definition:
### !!vb v ve. eff\<^sub>i (Store vb, v, [], ve) = undefined
### !!vb vc v vf. eff\<^sub>i (Getfield vb vc, v, [], vf) = undefined
### !!vb vc v vf. eff\<^sub>i (Putfield vb vc, v, [], vf) = undefined
### (10 more)
consts
  exec_instr ::
    "instr
     => (char list *
         char list *
         (char list * ty) list *
         (char list *
          ty list *
          ty *
          nat *
          nat *
          instr list * (nat * nat * char list * nat * nat) list) list) list
        => (nat
            => (char list * (char list * char list => val option)) option)
           => val list
              => val list
                 => char list
                    => char list
                       => nat
                          => (val list *
                              val list * char list * char list * nat) list
                             => nat option *
                                (nat
                                 => (char list *
                                     (char list * char list
=> val option)) option) *
                                (val list *
                                 val list *
                                 char list * char list * nat) list"
Found termination order: "{}"
### theory "Draft.Interpretation"
### 2.689s elapsed time, 10.369s cpu time, 2.985s GC time
Loading theory "Draft.WellFormed" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.ProcSDG" via "Draft.ValidPaths")
### theory "Jinja.JVMExecInstr"
### 1.148s elapsed time, 4.281s cpu time, 2.400s GC time
Loading theory "Jinja.JVMExec" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.JVMListExample")
### Ambiguous input (line 177 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SDG_Use"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_node) ("_position" m)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" Use) ("_position" m))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" CFG_node) ("_position" m)))))))
###       ("\<^const>HOL.Trueprop" ("_position" V)))
###     ("_position" n)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_node) ("_position" m)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" V)
###           ("_applC" ("_position" Use) ("_position" m))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node) ("_position" m)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SDG_Use" ("_position" V) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 179 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SDG_Use"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Actual_in)
###                 ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" V)
###                 ("\<^const>List.nth"
###                   ("_applC" ("_position" ParamUses) ("_position" m))
###                   ("_position" x)))))))
###       ("\<^const>HOL.Trueprop" ("_position" V)))
###     ("_position" n)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" Actual_in)
###             ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" V)
###             ("\<^const>List.nth"
###               ("_applC" ("_position" ParamUses) ("_position" m))
###               ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SDG_Use" ("_position" V) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 181 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SDG_Use"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Formal_out)
###                 ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" get_proc) ("_position" m))
###                 ("_position" p)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" p)
###                     ("_tuple_args" ("_position" ins)
###                       ("_tuple_arg" ("_position" outs))))
###                   ("_applC" ("_position" set) ("_position" procs))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" V)
###                     ("\<^const>List.nth" ("_position" outs)
###                       ("_position" x)))))))))
###       ("\<^const>HOL.Trueprop" ("_position" V)))
###     ("_position" n)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" Formal_out)
###             ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_proc) ("_position" m))
###             ("_position" p)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" V)
###                 ("\<^const>List.nth" ("_position" outs)
###                   ("_position" x)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SDG_Use" ("_position" V) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SDG_Use"
  Proving monotonicity ...
### Ambiguous input (line 186 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>notin_SDG_Use" ("_position" V) ("_position" n))
###   ("\<^const>HOL.Not"
###     ("\<^const>local.SDG_Use" ("_position" V) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>notin_SDG_Use" ("_position" V)
###     ("\<^const>local.SDG_Use"
###       ("\<^const>Pure.eq" ("_position" n)
###         ("\<^const>HOL.Not" ("_position" V)))
###       ("_position" n))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>notin_SDG_Use" ("_position" V) ("_position" n))
###   ("\<^const>local.SDG_Use" ("\<^const>HOL.Not" ("_position" V))
###     ("_position" n)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.SDG_Use"
###     ("\<^const>Pure.eq"
###       ("\<^fixed>notin_SDG_Use" ("_position" V) ("_position" n))
###       ("\<^const>HOL.Not" ("_position" V)))
###     ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 233 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SDG_Def"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_node) ("_position" m)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" V)
###               ("_applC" ("_position" Def) ("_position" m))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" CFG_node) ("_position" m)))))))
###       ("\<^const>HOL.Trueprop" ("_position" V)))
###     ("_position" n)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_node) ("_position" m)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" V)
###           ("_applC" ("_position" Def) ("_position" m))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node) ("_position" m)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SDG_Def" ("_position" V) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 235 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SDG_Def"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Formal_in)
###                 ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" get_proc) ("_position" m))
###                 ("_position" p)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" p)
###                     ("_tuple_args" ("_position" ins)
###                       ("_tuple_arg" ("_position" outs))))
###                   ("_applC" ("_position" set) ("_position" procs))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" V)
###                     ("\<^const>List.nth" ("_position" ins)
###                       ("_position" x)))))))))
###       ("\<^const>HOL.Trueprop" ("_position" V)))
###     ("_position" n)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" Formal_in)
###             ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" get_proc) ("_position" m))
###             ("_position" p)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" V)
###                 ("\<^const>List.nth" ("_position" ins)
###                   ("_position" x)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SDG_Def" ("_position" V) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 238 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>SDG_Def"
###     ("_bigimpl"
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" Actual_out)
###                 ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" V)
###                 ("\<^const>List.nth"
###                   ("_applC" ("_position" ParamDefs) ("_position" m))
###                   ("_position" x)))))))
###       ("\<^const>HOL.Trueprop" ("_position" V)))
###     ("_position" n)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" Actual_out)
###             ("_tuple" ("_position" m) ("_tuple_arg" ("_position" x))))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" V)
###             ("\<^const>List.nth"
###               ("_applC" ("_position" ParamDefs) ("_position" m))
###               ("_position" x)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>SDG_Def" ("_position" V) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SDG_Def"
  Proving monotonicity ...
### Ambiguous input (line 241 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 4 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>notin_SDG_Def" ("_position" V) ("_position" n))
###   ("\<^const>HOL.Not"
###     ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>notin_SDG_Def" ("_position" V)
###     ("\<^const>local.SDG_Def"
###       ("\<^const>Pure.eq" ("_position" n)
###         ("\<^const>HOL.Not" ("_position" V)))
###       ("_position" n))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>notin_SDG_Def" ("_position" V) ("_position" n))
###   ("\<^const>local.SDG_Def" ("\<^const>HOL.Not" ("_position" V))
###     ("_position" n)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.SDG_Def"
###     ("\<^const>Pure.eq"
###       ("\<^fixed>notin_SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.Not" ("_position" V)))
###     ("_position" n)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 286 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 8 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" parent_node) ("_position" n''))
###                 ("\<^const>local.notin_SDG_Def"
###                   ("\<^const>HOL.implies"
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_applC" ("_position" tl) ("_position" as))))
###                     ("_position" V))
###                   ("_position" n''))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###               ("\<^const>local.notin_SDG_Def"
###                 ("\<^const>HOL.implies"
###                   ("\<^const>Set.member"
###                     ("_applC" ("_position" parent_node) ("_position" n''))
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_applC" ("_position" tl) ("_position" as)))))
###                   ("_position" V))
###                 ("_position" n'')))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>local.notin_SDG_Def"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                   ("\<^const>Set.member"
###                     ("_applC" ("_position" parent_node) ("_position" n''))
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_applC" ("_position" tl) ("_position" as))))))
###                 ("_position" V)))
###             ("_position" n'')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("\<^const>local.notin_SDG_Def"
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                   ("\<^const>Set.member"
###                     ("_applC" ("_position" parent_node) ("_position" n''))
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_applC" ("_position" tl) ("_position" as))))))
###                 ("_position" V))
###               ("_position" n''))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("_applC" ("_position" valid_SDG_node)
###               ("\<^const>local.notin_SDG_Def"
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj" ("_position" n'')
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" parent_node) ("_position" n''))
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_applC" ("_position" tl) ("_position" as))))))
###                   ("_position" V))
###                 ("_position" n'')))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###               ("_applC" ("_position" parent_node)
###                 ("\<^const>local.notin_SDG_Def"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member" ("_position" n'')
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_applC" ("_position" tl) ("_position" as)))))
###                     ("_position" V))
###                   ("_position" n''))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###               ("\<^const>Set.member"
###                 ("_applC" ("_position" parent_node) ("_position" n''))
###                 ("_applC" ("_position" set)
###                   ("\<^const>local.notin_SDG_Def"
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" sourcenodes)
###                         ("_applC" ("_position" tl) ("_position" as)))
###                       ("_position" V))
###                     ("_position" n'')))))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>data_dependence" ("_position" n) ("_position" V)
###     ("_position" n'))
###   ("\<^const>HOL.Ex_binder" ("_position" as)
###     ("\<^const>HOL.conj"
###       ("\<^const>local.SDG_Def" ("_position" V) ("_position" n))
###       ("\<^const>HOL.conj"
###         ("\<^const>local.SDG_Use" ("_position" V) ("_position" n'))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.intra_path"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_position" as)
###             ("_applC" ("_position" parent_node) ("_position" n')))
###           ("\<^const>HOL.All_binder" ("_position" n'')
###             ("\<^const>HOL.implies"
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" parent_node) ("_position" n''))
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("_applC" ("_position" tl) ("_position" as))))))
###               ("\<^const>local.notin_SDG_Def" ("_position" V)
###                 ("_position" n'')))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 12 of "$AFP/HRB-Slicing/Proc/WellFormed.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" labels)
###         ("_cargs" ("_position" prog)
###           ("_cargs" ("_position" l') ("_position" c)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" es)
###                   ("_tuple_arg" ("_position" rets)))))
###             ("_position" Label))
###           ("_position" l')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" fst_cmd) ("_position" c))
###       ("_position" Skip))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" labels)
###         ("_cargs" ("_position" prog)
###           ("_cargs" ("_position" l') ("_position" c)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_applC" ("_position" Label) ("_position" l'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" fst_cmd) ("_position" c))
###       ("_position" Skip))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 143 of "$AFP/HRB-Slicing/Proc/WellFormed.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" rets')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" p')
###             ("_idts" ("_position" es') ("_position" n)))
###           ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" n'))))
###       ("_position" rets))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.Proc_CFG"
###         ("_The" ("_position" rets')
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" p')
###               ("_idts" ("_position" es') ("_position" n)))
###             ("_position" prog)))
###         ("_position" n)
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p')
###             ("_tuple_args" ("_position" es')
###               ("_tuple_arg" ("_position" rets')))))
###         ("_position" n'))
###       ("_position" rets))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" rets')
###         ("\<^const>PCFG.Proc_CFG"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" p')
###               ("_idts" ("_position" es') ("_position" n)))
###             ("_position" prog))
###           ("_position" n)
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_position" n')))
###       ("_position" rets))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 149 of "$AFP/HRB-Slicing/Proc/WellFormed.thy") produces 6 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ParamDefs_proc)
###     ("_cargs" ("_position" c) ("_position" n)))
###   ("\<^const>HOL.If"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" n')
###           ("_idts" ("_position" p')
###             ("_idts" ("_position" es') ("_position" rets'))))
###         ("_position" c))
###       ("_position" n')
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p')
###           ("_tuple_args" ("_position" es')
###             ("_tuple_arg" ("_position" rets')))))
###       ("_position" n))
###     ("_The" ("_position" rets')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" p')
###           ("_idts" ("_position" es') ("_position" n')))
###         ("\<^const>PCFG.Proc_CFG" ("_position" c) ("_position" n')
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_position" n))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ParamDefs_proc)
###     ("_cargs" ("_position" c) ("_position" n)))
###   ("\<^const>HOL.If"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" n')
###         ("_idts" ("_position" p')
###           ("_idts" ("_position" es') ("_position" rets'))))
###       ("\<^const>PCFG.Proc_CFG" ("_position" c) ("_position" n')
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p')
###             ("_tuple_args" ("_position" es')
###               ("_tuple_arg" ("_position" rets')))))
###         ("_position" n)))
###     ("_The" ("_position" rets')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" p')
###           ("_idts" ("_position" es') ("_position" n')))
###         ("\<^const>PCFG.Proc_CFG" ("_position" c) ("_position" n')
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_position" n))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ParamDefs_proc)
###     ("_cargs" ("_position" c) ("_position" n)))
###   ("\<^const>HOL.If"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" n')
###           ("_idts" ("_position" p')
###             ("_idts" ("_position" es') ("_position" rets'))))
###         ("_position" c))
###       ("_position" n')
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p')
###           ("_tuple_args" ("_position" es')
###             ("_tuple_arg" ("_position" rets')))))
###       ("_position" n))
###     ("\<^const>PCFG.Proc_CFG"
###       ("_The" ("_position" rets')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" p')
###             ("_idts" ("_position" es') ("_position" n')))
###           ("_position" c)))
###       ("_position" n')
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p')
###           ("_tuple_args" ("_position" es')
###             ("_tuple_arg" ("_position" rets')))))
###       ("_position" n))
###     ("\<^const>List.list.Nil")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ParamDefs_proc)
###     ("_cargs" ("_position" c) ("_position" n)))
###   ("\<^const>HOL.If"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" n')
###         ("_idts" ("_position" p')
###           ("_idts" ("_position" es') ("_position" rets'))))
###       ("\<^const>PCFG.Proc_CFG" ("_position" c) ("_position" n')
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p')
###             ("_tuple_args" ("_position" es')
###               ("_tuple_arg" ("_position" rets')))))
###         ("_position" n)))
###     ("\<^const>PCFG.Proc_CFG"
###       ("_The" ("_position" rets')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" p')
###             ("_idts" ("_position" es') ("_position" n')))
###           ("_position" c)))
###       ("_position" n')
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p')
###           ("_tuple_args" ("_position" es')
###             ("_tuple_arg" ("_position" rets')))))
###       ("_position" n))
###     ("\<^const>List.list.Nil")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ParamDefs_proc)
###     ("_cargs" ("_position" c) ("_position" n)))
###   ("\<^const>HOL.If"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" n')
###           ("_idts" ("_position" p')
###             ("_idts" ("_position" es') ("_position" rets'))))
###         ("_position" c))
###       ("_position" n')
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p')
###           ("_tuple_args" ("_position" es')
###             ("_tuple_arg" ("_position" rets')))))
###       ("_position" n))
###     ("_The" ("_position" rets')
###       ("\<^const>PCFG.Proc_CFG"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" p')
###             ("_idts" ("_position" es') ("_position" n')))
###           ("_position" c))
###         ("_position" n')
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p')
###             ("_tuple_args" ("_position" es')
###               ("_tuple_arg" ("_position" rets')))))
###         ("_position" n)))
###     ("\<^const>List.list.Nil")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ParamDefs_proc)
###     ("_cargs" ("_position" c) ("_position" n)))
###   ("\<^const>HOL.If"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" n')
###         ("_idts" ("_position" p')
###           ("_idts" ("_position" es') ("_position" rets'))))
###       ("\<^const>PCFG.Proc_CFG" ("_position" c) ("_position" n')
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p')
###             ("_tuple_args" ("_position" es')
###               ("_tuple_arg" ("_position" rets')))))
###         ("_position" n)))
###     ("_The" ("_position" rets')
###       ("\<^const>PCFG.Proc_CFG"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" p')
###             ("_idts" ("_position" es') ("_position" n')))
###           ("_position" c))
###         ("_position" n')
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p')
###             ("_tuple_args" ("_position" es')
###               ("_tuple_arg" ("_position" rets')))))
###         ("_position" n)))
###     ("\<^const>List.list.Nil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 237 of "$AFP/HRB-Slicing/Proc/WellFormed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q'))
###     ("_position" p) ("_position" f')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###       ("_position" p) ("_position" f'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 241 of "$AFP/HRB-Slicing/Proc/WellFormed.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" f')
###       ("_cargs" ("_position" cf) ("_position" cf')))
###     ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###       ("_applC" ("_position" ParamDefs)
###         ("_cargs" ("_position" wfp)
###           ("_applC" ("_position" targetnode) ("_position" a))))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" cf) ("_position" outs))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" f')
###     ("_cargs" ("_position" cf)
###       ("\<^const>BasicDefs.fun_upds"
###         ("\<^const>HOL.eq" ("_position" cf') ("_position" cf'))
###         ("_applC" ("_position" ParamDefs)
###           ("_cargs" ("_position" wfp)
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("_applC" ("_position" map)
###           ("_cargs" ("_position" cf) ("_position" outs)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" f')
###     ("\<^const>BasicDefs.fun_upds"
###       ("\<^const>HOL.eq" ("_applC" ("_position" cf) ("_position" cf'))
###         ("_position" cf'))
###       ("_applC" ("_position" ParamDefs)
###         ("_cargs" ("_position" wfp)
###           ("_applC" ("_position" targetnode) ("_position" a))))
###       ("_applC" ("_position" map)
###         ("_cargs" ("_position" cf) ("_position" outs))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.fun_upds"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" f')
###         ("_cargs" ("_position" cf) ("_position" cf')))
###       ("_position" cf'))
###     ("_applC" ("_position" ParamDefs)
###       ("_cargs" ("_position" wfp)
###         ("_applC" ("_position" targetnode) ("_position" a))))
###     ("_applC" ("_position" map)
###       ("_cargs" ("_position" cf) ("_position" outs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Ambiguous input (line 366 of "$AFP/HRB-Slicing/Proc/WellFormed.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" es')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" p')
###             ("_idts" ("_position" rets') ("_position" n')))
###           ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" n'))))
###       ("_position" es))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.Proc_CFG"
###         ("_The" ("_position" es')
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" p')
###               ("_idts" ("_position" rets') ("_position" n')))
###             ("_position" prog)))
###         ("_position" n)
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p')
###             ("_tuple_args" ("_position" es')
###               ("_tuple_arg" ("_position" rets')))))
###         ("_position" n'))
###       ("_position" es))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" es')
###         ("\<^const>PCFG.Proc_CFG"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" p')
###               ("_idts" ("_position" rets') ("_position" n')))
###             ("_position" prog))
###           ("_position" n)
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_position" n')))
###       ("_position" es))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 372 of "$AFP/HRB-Slicing/Proc/WellFormed.thy") produces 6 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ParamUses_proc)
###     ("_cargs" ("_position" c) ("_position" n)))
###   ("\<^const>HOL.If"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" n')
###           ("_idts" ("_position" p')
###             ("_idts" ("_position" es') ("_position" rets'))))
###         ("_position" c))
###       ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p')
###           ("_tuple_args" ("_position" es')
###             ("_tuple_arg" ("_position" rets')))))
###       ("_position" n'))
###     ("_applC" ("_position" map)
###       ("_cargs" ("_position" fv)
###         ("_The" ("_position" es')
###           ("\<^const>PCFG.Proc_CFG"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" p')
###                 ("_idts" ("_position" rets') ("_position" n')))
###               ("_position" c))
###             ("_position" n)
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" n')))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ParamUses_proc)
###     ("_cargs" ("_position" c) ("_position" n)))
###   ("\<^const>HOL.If"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" n')
###         ("_idts" ("_position" p')
###           ("_idts" ("_position" es') ("_position" rets'))))
###       ("\<^const>PCFG.Proc_CFG" ("_position" c) ("_position" n)
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p')
###             ("_tuple_args" ("_position" es')
###               ("_tuple_arg" ("_position" rets')))))
###         ("_position" n')))
###     ("_applC" ("_position" map)
###       ("_cargs" ("_position" fv)
###         ("_The" ("_position" es')
###           ("\<^const>PCFG.Proc_CFG"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" p')
###                 ("_idts" ("_position" rets') ("_position" n')))
###               ("_position" c))
###             ("_position" n)
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" n')))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ParamUses_proc)
###     ("_cargs" ("_position" c) ("_position" n)))
###   ("\<^const>HOL.If"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" n')
###           ("_idts" ("_position" p')
###             ("_idts" ("_position" es') ("_position" rets'))))
###         ("_position" c))
###       ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p')
###           ("_tuple_args" ("_position" es')
###             ("_tuple_arg" ("_position" rets')))))
###       ("_position" n'))
###     ("_applC" ("_position" map)
###       ("_cargs" ("_position" fv)
###         ("\<^const>PCFG.Proc_CFG"
###           ("_The" ("_position" es')
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" p')
###                 ("_idts" ("_position" rets') ("_position" n')))
###               ("_position" c)))
###           ("_position" n)
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_position" n'))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ParamUses_proc)
###     ("_cargs" ("_position" c) ("_position" n)))
###   ("\<^const>HOL.If"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" n')
###         ("_idts" ("_position" p')
###           ("_idts" ("_position" es') ("_position" rets'))))
###       ("\<^const>PCFG.Proc_CFG" ("_position" c) ("_position" n)
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p')
###             ("_tuple_args" ("_position" es')
###               ("_tuple_arg" ("_position" rets')))))
###         ("_position" n')))
###     ("_applC" ("_position" map)
###       ("_cargs" ("_position" fv)
###         ("\<^const>PCFG.Proc_CFG"
###           ("_The" ("_position" es')
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" p')
###                 ("_idts" ("_position" rets') ("_position" n')))
###               ("_position" c)))
###           ("_position" n)
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_position" n'))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ParamUses_proc)
###     ("_cargs" ("_position" c) ("_position" n)))
###   ("\<^const>HOL.If"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" n')
###           ("_idts" ("_position" p')
###             ("_idts" ("_position" es') ("_position" rets'))))
###         ("_position" c))
###       ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p')
###           ("_tuple_args" ("_position" es')
###             ("_tuple_arg" ("_position" rets')))))
###       ("_position" n'))
###     ("_applC" ("_position" map)
###       ("_cargs" ("_position" fv)
###         ("_The" ("_position" es')
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" p')
###               ("_idts" ("_position" rets') ("_position" n')))
###             ("\<^const>PCFG.Proc_CFG" ("_position" c) ("_position" n)
###               ("_applC" ("_position" CEdge)
###                 ("_tuple" ("_position" p')
###                   ("_tuple_args" ("_position" es')
###                     ("_tuple_arg" ("_position" rets')))))
###               ("_position" n'))))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ParamUses_proc)
###     ("_cargs" ("_position" c) ("_position" n)))
###   ("\<^const>HOL.If"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" n')
###         ("_idts" ("_position" p')
###           ("_idts" ("_position" es') ("_position" rets'))))
###       ("\<^const>PCFG.Proc_CFG" ("_position" c) ("_position" n)
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p')
###             ("_tuple_args" ("_position" es')
###               ("_tuple_arg" ("_position" rets')))))
###         ("_position" n')))
###     ("_applC" ("_position" map)
###       ("_cargs" ("_position" fv)
###         ("_The" ("_position" es')
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" p')
###               ("_idts" ("_position" rets') ("_position" n')))
###             ("\<^const>PCFG.Proc_CFG" ("_position" c) ("_position" n)
###               ("_applC" ("_position" CEdge)
###                 ("_tuple" ("_position" p')
###                   ("_tuple_args" ("_position" es')
###                     ("_tuple_arg" ("_position" rets')))))
###               ("_position" n'))))))
###     ("\<^const>List.list.Nil")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "exec_1p"
  Proving monotonicity ...
### Ambiguous input (line 460 of "$AFP/HRB-Slicing/Proc/WellFormed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" lhs)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("_Finset" ("_position" V))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lhs)
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_Finset" ("_position" V))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Jinja.JVMExec"
### 0.781s elapsed time, 3.085s cpu time, 0.268s GC time
Loading theory "Jinja.JVMListExample" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample")
### Ambiguous input (line 530 of "$AFP/HRB-Slicing/Proc/WellFormed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_Update" ("_position" rhs)
###       ("_updbind" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" fv) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rhs)
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_applC" ("_position" fv) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 539 of "$AFP/HRB-Slicing/Proc/WellFormed.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###     ("_applC" ("_position" CEdge)
###       ("_tuple" ("_position" p)
###         ("_tuple_args" ("_position" es) ("_tuple_arg" ("_position" rets)))))
###     ("_applC" ("_position" Label) ("_position" l'))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" Label))
###     ("_position" l')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellFormed"
### 1.156s elapsed time, 4.574s cpu time, 0.424s GC time
Loading theory "Draft.ValidPaths" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.ProcSDG")
### theory "Jinja.JVMListExample"
### 0.394s elapsed time, 1.574s cpu time, 0.156s GC time
Loading theory "Jinja.Typing_Framework_1" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err" via "Jinja.SemilatAlg")
### theory "Jinja.Typing_Framework_1"
### 0.046s elapsed time, 0.190s cpu time, 0.000s GC time
Loading theory "Jinja.SemilatAlg" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV" via "Jinja.Typing_Framework_err")
consts
  pluslussub :: "'a list => ('a => 'a => 'a) => 'a => 'a"
### Ambiguous input (line 23 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 8 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###       ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###       ("_applC" ("_position" Label) ("_position" l'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" prog)
###       ("_applC"
###         ("\<^const>PCFG.Proc_CFG" ("_position" c\<^sub>2)
###           ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###           ("_position" Label))
###         ("_position" l')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###         ("_position" Label))
###       ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" prog)
###       ("_applC"
###         ("\<^const>PCFG.Proc_CFG" ("_position" c\<^sub>2)
###           ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###           ("_position" Label))
###         ("_position" l')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###       ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###       ("_applC" ("_position" Label) ("_position" l'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" prog) ("_position" c\<^sub>2))
###       ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###       ("_applC" ("_position" Label) ("_position" l')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###         ("_position" Label))
###       ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" prog) ("_position" c\<^sub>2))
###       ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###       ("_applC" ("_position" Label) ("_position" l')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###       ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###       ("_applC" ("_position" Label) ("_position" l'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" prog)
###       ("\<^const>PCFG.Proc_CFG" ("_position" c\<^sub>2)
###         ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###         ("_applC" ("_position" Label) ("_position" l'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###         ("_position" Label))
###       ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" prog)
###       ("\<^const>PCFG.Proc_CFG" ("_position" c\<^sub>2)
###         ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###         ("_applC" ("_position" Label) ("_position" l'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###       ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###       ("_applC" ("_position" Label) ("_position" l'))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" prog) ("_position" c\<^sub>2))
###         ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###         ("_position" Label))
###       ("_position" l'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###         ("_position" Label))
###       ("_position" l')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" prog) ("_position" c\<^sub>2))
###         ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###         ("_position" Label))
###       ("_position" l'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PCFG.Proc_CFG"
###     ("\<^const>Com.cmd.Seq" ("_position" prog) ("_position" c\<^sub>2))
###     ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###     ("_position" nx)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Seq" ("_position" prog)
###     ("\<^const>PCFG.Proc_CFG" ("_position" c\<^sub>2)
###       ("_applC" ("_position" Label) ("_position" l)) ("_position" et)
###       ("_position" nx))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 126 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l'))
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" prog)
###       ("_applC"
###         ("\<^const>PCFG.Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###           ("_position" et) ("_position" Label))
###         ("_position" l')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l'))
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" prog) ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et)
###       ("_applC" ("_position" Label) ("_position" l')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l'))
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" prog)
###       ("\<^const>PCFG.Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_applC" ("_position" Label) ("_position" l'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l'))
###           ("_position" n')))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" prog) ("_position" c\<^sub>2))
###         ("_position" n) ("_position" et) ("_position" Label))
###       ("_position" l'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.SemilatAlg"
### 0.168s elapsed time, 0.665s cpu time, 0.120s GC time
Loading theory "Jinja.Kildall_1" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV" via "Jinja.Kildall_2")
### Ambiguous input (line 142 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PCFG.PCFG"
###     ("\<^const>Com.cmd.Seq" ("_position" prog) ("_position" c\<^sub>2))
###     ("_position" procs)
###     ("_tuple" ("_position" p)
###       ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l))))
###     ("_position" et)
###     ("_tuple" ("_position" p') ("_tuple_arg" ("_position" nx)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Seq" ("_position" prog)
###     ("\<^const>PCFG.PCFG" ("_position" c\<^sub>2) ("_position" procs)
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l))))
###       ("_position" et)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" nx))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 187 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" n)))
###       ("_position" et)
###       ("_tuple" ("_position" p')
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.PCFG"
###       ("\<^const>Com.cmd.Seq" ("_position" prog) ("_position" c\<^sub>2))
###       ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" n)))
###       ("_position" et)
###       ("_tuple" ("_position" p')
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" n)))
###       ("_position" et)
###       ("_tuple" ("_position" p')
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" prog)
###       ("\<^const>PCFG.PCFG" ("_position" c\<^sub>2) ("_position" procs)
###         ("_tuple" ("_position" p) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p')
###           ("_tuple_arg"
###             ("_applC" ("_position" Label) ("_position" l'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  merges :: "('s => 's => 's) => (nat * 's) list => 's list => 's list"
### Ambiguous input (line 273 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.Proc_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1) ("_position" prog))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1) ("_position" prog))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 296 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 837 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member"
###               ("\<^const>local.intra_path" ("_position" n)
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###                 ("\<^const>HOL.conj" ("_position" n') ("_position" n')))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("\<^const>List.list.Cons" ("_position" a)
###                     ("_position" as)))))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" intra_kind)
###                 ("_applC" ("_position" kind) ("_position" a)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC"
###                     ("\<^const>local.postdominate" ("_position" n')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" valid_edge)
###                             ("_position" a'))
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" intra_kind)
###                               ("_applC" ("_position" kind)
###                                 ("_position" a')))
###                             ("_position" sourcenode)))))
###                     ("_position" a'))
###                   ("_position" n))
###                 ("\<^const>HOL.Not" ("_position" n'))))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^const>local.intra_path"
###       ("\<^fixed>control_dependence" ("_position" n)
###         ("\<^const>Pure.eq" ("_position" n')
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" a)
###               ("_idts" ("_position" a') ("_position" as)))
###             ("_position" n))))
###       ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###       ("\<^const>HOL.conj" ("_position" n')
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.not_member" ("_position" n')
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes)
###                 ("\<^const>List.list.Cons" ("_position" a)
###                   ("_position" as)))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" intra_kind)
###               ("_applC" ("_position" kind) ("_position" a)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC"
###                   ("\<^const>local.postdominate" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" valid_edge) ("_position" a'))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" intra_kind)
###                             ("_applC" ("_position" kind) ("_position" a')))
###                           ("_position" sourcenode)))))
###                   ("_position" a'))
###                 ("_position" n))
###               ("\<^const>HOL.Not" ("_position" n')))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>control_dependence" ("_position" n)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" a') ("_position" as)))
###         ("\<^const>local.postdominate"
###           ("\<^const>local.intra_path" ("_position" n)
###             ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###             ("\<^const>HOL.conj" ("_position" n')
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.not_member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("\<^const>List.list.Cons" ("_position" a)
###                         ("_position" as)))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" intra_kind)
###                     ("_applC" ("_position" kind) ("_position" a)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC"
###                         ("\<^const>local.postdominate" ("_position" n')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" targetnode)
###                               ("_position" a))
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" valid_edge)
###                                 ("_position" a'))
###                               ("\<^const>HOL.conj"
###                                 ("_applC" ("_position" intra_kind)
###                                   ("_applC" ("_position" kind)
###                                     ("_position" a')))
###                                 ("_position" sourcenode)))))
###                         ("_position" a'))
###                       ("_position" n))
###                     ("\<^const>HOL.Not" ("_position" n')))))))
###           ("_applC" ("_position" targetnode) ("_position" a')))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>control_dependence" ("_position" n) ("_position" n'))
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" a) ("_idts" ("_position" a') ("_position" as)))
###     ("\<^const>local.postdominate"
###       ("\<^const>local.intra_path" ("_position" n)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###         ("\<^const>HOL.conj" ("_position" n')
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.not_member" ("_position" n')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes)
###                   ("\<^const>List.list.Cons" ("_position" a)
###                     ("_position" as)))))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" intra_kind)
###                 ("_applC" ("_position" kind) ("_position" a)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC"
###                     ("\<^const>local.postdominate" ("_position" n')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" valid_edge)
###                             ("_position" a'))
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" intra_kind)
###                               ("_applC" ("_position" kind)
###                                 ("_position" a')))
###                             ("_position" sourcenode)))))
###                     ("_position" a'))
###                   ("_position" n))
###                 ("\<^const>HOL.Not" ("_position" n')))))))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>local.intra_path" ("_position" n)
###             ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###             ("\<^const>HOL.conj" ("_position" n')
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.not_member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("\<^const>List.list.Cons" ("_position" a)
###                         ("_position" as)))))
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" intra_kind)
###                     ("_applC" ("_position" kind) ("_position" a)))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>HOL.eq"
###                       ("_applC"
###                         ("\<^const>local.postdominate" ("_position" n')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" targetnode)
###                               ("_position" a))
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" valid_edge)
###                                 ("_position" a'))
###                               ("\<^const>HOL.conj"
###                                 ("_applC" ("_position" intra_kind)
###                                   ("_applC" ("_position" kind)
###                                     ("_position" a')))
###                                 ("_position" sourcenode)))))
###                         ("_position" a'))
###                       ("_position" n))
###                     ("\<^const>HOL.Not" ("_position" n'))))))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.intra_path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###               ("_position" n'))
###             ("\<^const>HOL.conj"
###               ("\<^const>Set.not_member" ("_position" n')
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" sourcenodes)
###                     ("\<^const>List.list.Cons" ("_position" a)
###                       ("_position" as)))))
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" intra_kind)
###                   ("_applC" ("_position" kind) ("_position" a)))
###                 ("\<^const>HOL.conj"
###                   ("\<^const>HOL.eq"
###                     ("_applC"
###                       ("\<^const>local.postdominate" ("_position" n')
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" valid_edge)
###                               ("_position" a'))
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" intra_kind)
###                                 ("_applC" ("_position" kind)
###                                   ("_position" a')))
###                               ("_position" sourcenode)))))
###                       ("_position" a'))
###                     ("_position" n))
###                   ("\<^const>HOL.Not" ("_position" n')))))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.intra_path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###               ("\<^const>HOL.conj" ("_position" n')
###                 ("\<^const>Set.not_member" ("_position" n')
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" sourcenodes)
###                       ("\<^const>List.list.Cons" ("_position" a)
###                         ("_position" as)))))))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" intra_kind)
###                 ("_applC" ("_position" kind) ("_position" a)))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("_applC"
###                     ("\<^const>local.postdominate" ("_position" n')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" valid_edge)
###                             ("_position" a'))
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" intra_kind)
###                               ("_applC" ("_position" kind)
###                                 ("_position" a')))
###                             ("_position" sourcenode)))))
###                     ("_position" a'))
###                   ("_position" n))
###                 ("\<^const>HOL.Not" ("_position" n'))))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.intra_path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###               ("\<^const>HOL.conj" ("_position" n')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" n')
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("\<^const>List.list.Cons" ("_position" a)
###                           ("_position" as)))))
###                   ("_applC" ("_position" intra_kind)
###                     ("_applC" ("_position" kind) ("_position" a))))))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("_applC"
###                   ("\<^const>local.postdominate" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" valid_edge) ("_position" a'))
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" intra_kind)
###                             ("_applC" ("_position" kind) ("_position" a')))
###                           ("_position" sourcenode)))))
###                   ("_position" a'))
###                 ("_position" n))
###               ("\<^const>HOL.Not" ("_position" n')))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>HOL.conj"
###             ("\<^const>local.intra_path" ("_position" n)
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###               ("\<^const>HOL.conj" ("_position" n')
###                 ("\<^const>HOL.conj"
###                   ("\<^const>Set.not_member" ("_position" n')
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("\<^const>List.list.Cons" ("_position" a)
###                           ("_position" as)))))
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" intra_kind)
###                       ("_applC" ("_position" kind) ("_position" a)))
###                     ("\<^const>HOL.eq"
###                       ("_applC"
###                         ("\<^const>local.postdominate" ("_position" n')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" targetnode)
###                               ("_position" a))
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" valid_edge)
###                                 ("_position" a'))
###                               ("\<^const>HOL.conj"
###                                 ("_applC" ("_position" intra_kind)
###                                   ("_applC" ("_position" kind)
###                                     ("_position" a')))
###                                 ("_position" sourcenode)))))
###                         ("_position" a'))
###                       ("_position" n))))))
###             ("\<^const>HOL.Not" ("_position" n'))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.postdominate"
###     ("\<^fixed>control_dependence" ("_position" n)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" a') ("_position" as)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("\<^const>local.intra_path" ("_position" n)
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" as))
###                 ("\<^const>HOL.conj" ("_position" n')
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.not_member" ("_position" n')
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("\<^const>List.list.Cons" ("_position" a)
###                             ("_position" as)))))
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" intra_kind)
###                         ("_applC" ("_position" kind) ("_position" a)))
###                       ("_applC"
###                         ("\<^const>local.postdominate" ("_position" n')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" targetnode)
###                               ("_position" a))
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" valid_edge)
###                                 ("_position" a'))
###                               ("\<^const>HOL.conj"
###                                 ("_applC" ("_position" intra_kind)
###                                   ("_applC" ("_position" kind)
###                                     ("_position" a')))
###                                 ("_position" sourcenode)))))
###                         ("_position" a'))))))
###               ("_position" n))
###             ("\<^const>HOL.Not" ("_position" n'))))))
###     ("_applC" ("_position" targetnode) ("_position" a'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 278 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" intra_kind) ("_position" et)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" well_formed) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.PCFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1) ("_position" prog))
###       ("_position" procs)
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
###       ("_position" et)
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" intra_kind) ("_position" et)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" well_formed) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main)
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n)
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
###         ("_position" et)
###         ("_tuple" ("_position" p')
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n')
###               ("\<^const>Com.num_inner_nodes"
###                 ("_position" c\<^sub>1)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 335 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" ax) ("_position" ax'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" ax)
###           ("_applC" ("_position" set) ("_position" as')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" ax))
###             ("_applC" ("_position" sourcenode) ("_position" ax')))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" ax'))
###             ("_applC" ("_position" intra_kind)
###               ("_applC" ("_position" kind) ("_position" ax'))))))
###       ("_applC"
###         ("\<^const>local.postdominate" ("_position" n)
###           ("_position" targetnode))
###         ("_position" ax')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" ax) ("_position" ax'))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" ax)
###           ("_applC" ("_position" set) ("_position" as')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" ax))
###             ("_applC" ("_position" sourcenode) ("_position" ax')))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" ax'))
###             ("_applC" ("_position" intra_kind)
###               ("_applC" ("_position" kind) ("_position" ax'))))))
###       ("\<^const>local.postdominate" ("_position" n)
###         ("_applC" ("_position" targetnode) ("_position" ax'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 481 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" prog)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.one_class.one"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" prog)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.one_class.one"))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" prog)
###       ("\<^const>PCFG.Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" prog)
###         ("\<^const>PCFG.Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.one_class.one"))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.Kildall_1"
### 0.088s elapsed time, 0.352s cpu time, 0.000s GC time
Loading theory "Jinja.Kildall_2" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV")
### Ambiguous input (line 486 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" intra_kind) ("_position" et)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" well_formed) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.PCFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" prog)
###         ("_position" c\<^sub>2))
###       ("_position" procs)
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" intra_kind) ("_position" et)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" well_formed) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" prog)
###       ("\<^const>PCFG.PCFG" ("_position" c\<^sub>2) ("_position" procs)
###         ("_tuple" ("_position" Main)
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et)
###         ("_tuple" ("_position" p')
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n')
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 510 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" targetnode) ("_position" a)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" a')
###               ("_applC" ("_position" get_return_edges) ("_position" a))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n')
###                 ("_applC" ("_position" CFG_node)
###                   ("_applC" ("_position" sourcenode)
###                     ("_position" a'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>cdep_edge" ("_position" n) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" targetnode) ("_position" a)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" a')
###               ("_applC" ("_position" get_return_edges) ("_position" a))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n')
###                 ("_applC" ("_position" CFG_node)
###                   ("_applC" ("_position" sourcenode)
###                     ("_position" a'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>cdep_edge" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 517 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>call_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>call_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 520 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>return_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>return_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  propa ::
    "('s => 's => 's)
     => (nat * 's) list => 's list => nat set => 's list * nat set"
### Ambiguous input (line 523 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" ins) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Actual_in)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Formal_in)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>param_in_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" ins) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Actual_in)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Formal_in)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>param_in_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 527 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" outs) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Formal_out)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Actual_out)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>param_out_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" outs) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Formal_out)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Actual_out)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>param_out_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 693 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" prog))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" prog))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" prog))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 699 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" intra_kind) ("_position" et)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" well_formed) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.PCFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("_position" procs)
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))))
###       ("_position" et)
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" intra_kind) ("_position" et)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" well_formed) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main)
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n)
###               ("\<^const>Groups.plus_class.plus"
###                 ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###                 ("\<^const>Groups.one_class.one")))))
###         ("_position" et)
###         ("_tuple" ("_position" p')
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n')
###               ("\<^const>Groups.plus_class.plus"
###                 ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" intra_kind) ("_position" et)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" well_formed) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.PCFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("_position" procs)
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))))
###       ("_position" et)
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" intra_kind) ("_position" et)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" well_formed) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main)
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n)
###               ("\<^const>Com.num_inner_nodes"
###                 ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                   ("\<^const>Groups.one_class.one"))))))
###         ("_position" et)
###         ("_tuple" ("_position" p')
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n')
###               ("\<^const>Groups.plus_class.plus"
###                 ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" intra_kind) ("_position" et)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" well_formed) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.PCFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("_position" procs)
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))))
###       ("_position" et)
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" intra_kind) ("_position" et)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" well_formed) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main)
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n)
###               ("\<^const>Groups.plus_class.plus"
###                 ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###                 ("\<^const>Groups.one_class.one")))))
###         ("_position" et)
###         ("_tuple" ("_position" p')
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n')
###               ("\<^const>Com.num_inner_nodes"
###                 ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" intra_kind) ("_position" et)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" well_formed) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.PCFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" prog))
###       ("_position" procs)
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))))
###       ("_position" et)
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" intra_kind) ("_position" et)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" well_formed) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main)
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n)
###               ("\<^const>Com.num_inner_nodes"
###                 ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                   ("\<^const>Groups.one_class.one"))))))
###         ("_position" et)
###         ("_tuple" ("_position" p')
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n')
###               ("\<^const>Com.num_inner_nodes"
###                 ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                   ("\<^const>Groups.one_class.one"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 718 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" CFG.valid_node)
###     ("_cargs" ("_position" sourcenode)
###       ("_cargs" ("_position" targetnode)
###         ("_cargs" ("_applC" ("_position" valid_edge) ("_position" wfp'))
###           ("_tuple" ("_position" Main)
###             ("_tuple_arg"
###               ("\<^const>PCFG.label_incr" ("_position" n)
###                 ("\<^const>Groups.plus_class.plus"
###                   ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###                   ("\<^const>Groups.one_class.one"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" CFG.valid_node)
###     ("_cargs" ("_position" sourcenode)
###       ("_cargs" ("_position" targetnode)
###         ("_cargs" ("_applC" ("_position" valid_edge) ("_position" wfp'))
###           ("_tuple" ("_position" Main)
###             ("_tuple_arg"
###               ("\<^const>PCFG.label_incr" ("_position" n)
###                 ("\<^const>Com.num_inner_nodes"
###                   ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                     ("\<^const>Groups.one_class.one")))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "SDG_edge"
  Proving monotonicity ...
### Ambiguous input (line 868 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 8 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValidPaths.path" ("_position" wfp)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" as)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValidPaths.path" ("_position" wfp')
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))))
###       ("\<^const>ValidPaths.label_incrs" ("_position" as)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValidPaths.path" ("_position" wfp)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" as)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValidPaths.path" ("_position" wfp')
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))))
###       ("\<^const>ValidPaths.label_incrs" ("_position" as)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValidPaths.path" ("_position" wfp)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" as)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValidPaths.path" ("_position" wfp')
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))))
###       ("\<^const>ValidPaths.label_incrs" ("_position" as)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValidPaths.path" ("_position" wfp)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" as)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValidPaths.path" ("_position" wfp')
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))))
###       ("\<^const>ValidPaths.label_incrs" ("_position" as)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValidPaths.path" ("_position" wfp)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" as)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValidPaths.path" ("_position" wfp')
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))))
###       ("\<^const>ValidPaths.label_incrs" ("_position" as)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValidPaths.path" ("_position" wfp)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" as)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValidPaths.path" ("_position" wfp')
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))))
###       ("\<^const>ValidPaths.label_incrs" ("_position" as)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValidPaths.path" ("_position" wfp)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" as)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValidPaths.path" ("_position" wfp')
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))))
###       ("\<^const>ValidPaths.label_incrs" ("_position" as)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one")))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>ValidPaths.path" ("_position" wfp)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" as)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>ValidPaths.path" ("_position" wfp')
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))))
###       ("\<^const>ValidPaths.label_incrs" ("_position" as)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one")))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 911 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" prog))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.While" ("_position" b)
###         ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_position" et) ("_position" n')))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.Proc_CFG"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" prog))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et) ("_position" n'))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 917 of "$AFP/HRB-Slicing/Proc/ValidPaths.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" intra_kind) ("_position" et)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" well_formed) ("_position" procs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main)
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n)
###               ("_Numeral" ("_constify" ("_position" 2))))))
###         ("_position" et)
###         ("_tuple" ("_position" p')
###           ("_tuple_arg"
###             ("\<^const>PCFG.label_incr" ("_position" n')
###               ("_Numeral" ("_constify" ("_position" 2))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.PCFG" ("_position" prog) ("_position" procs)
###         ("_tuple" ("_position" Main) ("_tuple_arg" ("_position" n)))
###         ("_position" et)
###         ("_tuple" ("_position" p') ("_tuple_arg" ("_position" n')))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" intra_kind) ("_position" et)))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" well_formed) ("_position" procs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.PCFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" prog))
###       ("_position" procs)
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("_Numeral" ("_constify" ("_position" 2))))))
###       ("_position" et)
###       ("_tuple" ("_position" p')
###         ("_tuple_arg"
###           ("\<^const>PCFG.label_incr" ("_position" n')
###             ("_Numeral" ("_constify" ("_position" 2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.Kildall_2"
### 0.174s elapsed time, 0.691s cpu time, 0.101s GC time
Loading theory "Jinja.LBVSpec" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV" via "Jinja.LBVCorrect")
consts
  merge ::
    "'s list
     => ('s => 's => 's)
        => ('s => 's => bool) => 's => nat => (nat * 's) list => 's => 's"
consts
  wtl_inst_list ::
    "'a list
     => 's list
        => ('s => 's => 's)
           => ('s => 's => bool)
              => 's => 's => (nat => 's => (nat * 's) list)
                             => nat => 's => 's"
### Ambiguous input (line 534 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.cdep_edge" ("_position" n) ("_position" n')))
###     ("_asms"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.control_dependence"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_applC" ("_position" parent_node) ("_position" n'))))
###         ("\<^const>HOL.Trueprop" ("_position" P)))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" fs) ("_position" a'))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>BasicDefs.edge_kind.CallEdge"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" kind) ("_position" a))
###                       ("_position" Q))
###                     ("_position" r) ("_position" p) ("_position" fs)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" parent_node) ("_position" n))
###                         ("_applC" ("_position" targetnode)
###                           ("_position" a))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n'))
###                           ("_applC" ("_position" sourcenode)
###                             ("_position" a')))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" m)
###             ("_bigimpl"
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" CFG_node) ("_position" m))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" m)
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n'))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" n)
###                         ("_position" n'))))))
###               ("\<^const>HOL.Trueprop" ("_position" P))))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.cdep_edge" ("_position" n) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.control_dependence"
###           ("_applC" ("_position" parent_node) ("_position" n))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" fs) ("_position" a'))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>BasicDefs.edge_kind.CallEdge"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" kind) ("_position" a))
###                       ("_position" Q))
###                     ("_position" r) ("_position" p) ("_position" fs)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" parent_node) ("_position" n))
###                         ("_applC" ("_position" targetnode)
###                           ("_position" a))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n'))
###                           ("_applC" ("_position" sourcenode)
###                             ("_position" a')))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" m)
###             ("_bigimpl"
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" CFG_node) ("_position" m))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" m)
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n'))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" n)
###                         ("_position" n'))))))
###               ("\<^const>HOL.Trueprop" ("_position" P))))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.cdep_edge" ("_position" n) ("_position" n')))
###     ("_asms"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.control_dependence"
###             ("_applC" ("_position" parent_node) ("_position" n))
###             ("_applC" ("_position" parent_node) ("_position" n'))))
###         ("\<^const>HOL.Trueprop" ("_position" P)))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" fs) ("_position" a'))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a))
###                     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                       ("_position" r) ("_position" p) ("_position" fs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" parent_node) ("_position" n))
###                         ("_applC" ("_position" targetnode)
###                           ("_position" a))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n'))
###                           ("_applC" ("_position" sourcenode)
###                             ("_position" a')))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" m)
###             ("_bigimpl"
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" CFG_node) ("_position" m))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" m)
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n'))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" n)
###                         ("_position" n'))))))
###               ("\<^const>HOL.Trueprop" ("_position" P))))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.cdep_edge" ("_position" n) ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.control_dependence"
###           ("_applC" ("_position" parent_node) ("_position" n))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))
###       ("_asms"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" fs) ("_position" a'))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a))
###                     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                       ("_position" r) ("_position" p) ("_position" fs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" parent_node) ("_position" n))
###                         ("_applC" ("_position" targetnode)
###                           ("_position" a))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n'))
###                           ("_applC" ("_position" sourcenode)
###                             ("_position" a')))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P))))
###         ("_asm"
###           ("\<^const>Pure.all_binder" ("_position" m)
###             ("_bigimpl"
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n)
###                     ("_applC" ("_position" CFG_node) ("_position" m))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" m)
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n'))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" n)
###                         ("_position" n'))))))
###               ("\<^const>HOL.Trueprop" ("_position" P))))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 613 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SDG_edge)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" Vopt)
###           ("_cargs"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" True))))
###             ("_position" n'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("_applC" ("_position" parent_node) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r) ("_position" fs)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                   ("_position" r) ("_position" p) ("_position" fs))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SDG_edge)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" Vopt)
###           ("_cargs"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" True))))
###             ("_position" n'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("_applC" ("_position" parent_node) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" Q)
###                   ("_idts" ("_position" r) ("_position" fs)))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a))
###                   ("_position" Q)))
###               ("_position" r) ("_position" p) ("_position" fs))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SDG_edge)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" Vopt)
###           ("_cargs"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" True))))
###             ("_position" n'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("_applC" ("_position" parent_node) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r) ("_position" fs)))
###               ("\<^const>BasicDefs.edge_kind.CallEdge"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a))
###                   ("_position" Q))
###                 ("_position" r) ("_position" p) ("_position" fs)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale lbv
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and T :: "'a"  (\<open>\<top>\<close>)
    and B :: "'a"  (\<open>\<bottom>\<close>)
    and step :: "nat => 'a => (nat * 'a) list"
    and merge :: "'a list => nat => (nat * 'a) list => 'a => 'a"
    and wti :: "'a list => nat => 'a => 'a"
    and wtc :: "'a list => nat => 'a => 'a"
    and wtl :: "'b list => 'a list => nat => 'a => 'a"
  assumes "lbv A r f \<top> \<bottom>"
  defines "!!cert. merge cert == merge cert f r \<top>"
    and "!!cert. wti cert == wtl_inst cert f r \<top> step"
    and "!!cert. wtc cert == wtl_cert cert f r \<top> \<bottom> step"
    and
    "!!ins cert.
        wtl ins cert == wtl_inst_list ins cert f r \<top> \<bottom> step"
### Ambiguous input (line 647 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SDG_edge)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" Vopt)
###           ("_cargs"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" False))))
###             ("_position" n'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("_applC" ("_position" parent_node) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q) ("_position" f))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_position" p) ("_position" f))))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SDG_edge)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" Vopt)
###           ("_cargs"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" False))))
###             ("_position" n'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("_applC" ("_position" parent_node) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" Q) ("_position" f))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a))
###                   ("_position" Q)))
###               ("_position" p) ("_position" f))))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" SDG_edge)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" Vopt)
###           ("_cargs"
###             ("_applC" ("_position" Some)
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" False))))
###             ("_position" n'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a)
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("_applC" ("_position" parent_node) ("_position" n)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" targetnode) ("_position" a))
###               ("_applC" ("_position" parent_node) ("_position" n')))
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q) ("_position" f))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a))
###                   ("_position" Q))
###                 ("_position" p) ("_position" f)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
Proofs for inductive predicate(s) "intra_SDG_path"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "{}"
Proofs for inductive predicate(s) "cdep_SDG_path"
  Proving monotonicity ...
### Ambiguous input (line 1000 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "call_cdep_SDG_path"
  Proving monotonicity ...
### theory "Draft.ValidPaths"
### 0.914s elapsed time, 3.622s cpu time, 0.389s GC time
Loading theory "Jinja.Typing_Framework_err" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV")
### theory "Jinja.LBVSpec"
### 0.432s elapsed time, 1.729s cpu time, 0.169s GC time
Loading theory "Jinja.LBVComplete" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV")
### Ambiguous input (line 1684 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" matched)
###         ("_cargs" ("_position" n\<^sub>0)
###           ("_cargs" ("_position" ns) ("_position" n\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###           ("_position" n\<^sub>2)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" matched)
###             ("_cargs" ("_position" n\<^sub>2)
###               ("_cargs" ("_position" ns') ("_position" n\<^sub>3)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.return_edge" ("_position" n\<^sub>3)
###               ("_position" p)
###               ("\<^const>HOL.disj" ("_position" n\<^sub>4)
###                 ("\<^const>local.param_out_edge" ("_position" n\<^sub>3)
###                   ("_position" p) ("_position" V)
###                   ("_position" n\<^sub>4)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" sourcenode) ("_position" a))
###                     ("_applC" ("_position" parent_node)
###                       ("_position" n\<^sub>1))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n\<^sub>2))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" sourcenode) ("_position" a'))
###                         ("_applC" ("_position" parent_node)
###                           ("_position" n\<^sub>3))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n\<^sub>4))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" matched)
###       ("_cargs" ("_position" n\<^sub>0)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" ns)
###             ("\<^const>List.list.Cons" ("_position" n\<^sub>1)
###               ("\<^const>List.append" ("_position" ns')
###                 ("_list" ("_position" n\<^sub>3)))))
###           ("_position" n\<^sub>4))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" matched)
###         ("_cargs" ("_position" n\<^sub>0)
###           ("_cargs" ("_position" ns) ("_position" n\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###           ("_position" n\<^sub>2)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" matched)
###             ("_cargs" ("_position" n\<^sub>2)
###               ("_cargs" ("_position" ns') ("_position" n\<^sub>3)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.disj"
###               ("\<^const>local.return_edge" ("_position" n\<^sub>3)
###                 ("_position" p) ("_position" n\<^sub>4))
###               ("\<^const>local.param_out_edge" ("_position" n\<^sub>3)
###                 ("_position" p) ("_position" V) ("_position" n\<^sub>4))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" sourcenode) ("_position" a))
###                     ("_applC" ("_position" parent_node)
###                       ("_position" n\<^sub>1))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n\<^sub>2))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" sourcenode) ("_position" a'))
###                         ("_applC" ("_position" parent_node)
###                           ("_position" n\<^sub>3))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n\<^sub>4))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" matched)
###       ("_cargs" ("_position" n\<^sub>0)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" ns)
###             ("\<^const>List.list.Cons" ("_position" n\<^sub>1)
###               ("\<^const>List.append" ("_position" ns')
###                 ("_list" ("_position" n\<^sub>3)))))
###           ("_position" n\<^sub>4))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" matched)
###         ("_cargs" ("_position" n\<^sub>0)
###           ("_cargs" ("_position" ns) ("_position" n\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###           ("_position" n\<^sub>2)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" matched)
###             ("_cargs" ("_position" n\<^sub>2)
###               ("_cargs" ("_position" ns') ("_position" n\<^sub>3)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.param_out_edge"
###               ("\<^const>local.return_edge" ("_position" n\<^sub>3)
###                 ("_position" p)
###                 ("\<^const>HOL.disj" ("_position" n\<^sub>4)
###                   ("_position" n\<^sub>3)))
###               ("_position" p) ("_position" V) ("_position" n\<^sub>4)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" sourcenode) ("_position" a))
###                     ("_applC" ("_position" parent_node)
###                       ("_position" n\<^sub>1))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" targetnode) ("_position" a))
###                       ("_applC" ("_position" parent_node)
###                         ("_position" n\<^sub>2))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" sourcenode) ("_position" a'))
###                         ("_applC" ("_position" parent_node)
###                           ("_position" n\<^sub>3))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))
###                           ("_applC" ("_position" parent_node)
###                             ("_position" n\<^sub>4))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" matched)
###       ("_cargs" ("_position" n\<^sub>0)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" ns)
###             ("\<^const>List.list.Cons" ("_position" n\<^sub>1)
###               ("\<^const>List.append" ("_position" ns')
###                 ("_list" ("_position" n\<^sub>3)))))
###           ("_position" n\<^sub>4))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "matched"
locale lbvc
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and T :: "'a"  (\<open>\<top>\<close>)
    and B :: "'a"  (\<open>\<bottom>\<close>)
    and step :: "nat => 'a => (nat * 'a) list"
    and merge :: "'a list => nat => (nat * 'a) list => 'a => 'a"
    and wti :: "'a list => nat => 'a => 'a"
    and wtc :: "'a list => nat => 'a => 'a"
    and wtl :: "'b list => 'a list => nat => 'a => 'a"
    and \<tau>s :: "'a list"
    and c :: "'a list"
  assumes "lbvc A r f \<top> \<bottom> step \<tau>s"
  defines "!!cert. merge cert == merge cert f r \<top>"
    and "!!cert. wti cert == wtl_inst cert f r \<top> step"
    and "!!cert. wtc cert == wtl_cert cert f r \<top> \<bottom> step"
    and
    "!!ins cert.
        wtl ins cert == wtl_inst_list ins cert f r \<top> \<bottom> step"
    and "c == make_cert step \<tau>s \<bottom>"
  Proving monotonicity ...
### theory "Jinja.Typing_Framework_err"
### 0.174s elapsed time, 0.678s cpu time, 0.146s GC time
Loading theory "Jinja.LBVCorrect" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.Abstract_BV")
Found termination order: "{}"
locale lbvs
  fixes A :: "'a set"
    and r :: "'a => 'a => bool"
    and f :: "'a => 'a => 'a"
    and T :: "'a"  (\<open>\<top>\<close>)
    and B :: "'a"  (\<open>\<bottom>\<close>)
    and step :: "nat => 'a => (nat * 'a) list"
    and merge :: "'a list => nat => (nat * 'a) list => 'a => 'a"
    and wti :: "'a list => nat => 'a => 'a"
    and wtc :: "'a list => nat => 'a => 'a"
    and wtl :: "'b list => 'a list => nat => 'a => 'a"
    and s\<^sub>0 :: "'a"
    and c :: "'a list"
    and ins :: "'b list"
    and \<tau>s :: "'a list"
  assumes "lbvs A r f \<top> \<bottom> step c ins"
  defines "!!cert. merge cert == merge cert f r \<top>"
    and "!!cert. wti cert == wtl_inst cert f r \<top> step"
    and "!!cert. wtc cert == wtl_cert cert f r \<top> \<bottom> step"
    and
    "!!ins cert.
        wtl ins cert == wtl_inst_list ins cert f r \<top> \<bottom> step"
    and
    "\<tau>s ==
     map (%pc. if c ! pc = \<bottom> then wtl (take pc ins) c 0 s\<^sub>0
               else c ! pc)
      [0..<length ins]"
### Ambiguous input (line 1718 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1899 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" realizable)
###         ("_cargs" ("_position" n\<^sub>0)
###           ("_cargs" ("_position" ns) ("_position" n\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.param_in_edge"
###           ("\<^const>local.call_edge" ("_position" n\<^sub>1)
###             ("_position" p)
###             ("\<^const>HOL.disj" ("_position" n\<^sub>2)
###               ("_position" n\<^sub>1)))
###           ("_position" p) ("_position" V) ("_position" n\<^sub>2)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" matched)
###             ("_cargs" ("_position" n\<^sub>2)
###               ("_cargs" ("_position" ns') ("_position" n\<^sub>3))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" realizable)
###       ("_cargs" ("_position" n\<^sub>0)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" ns)
###             ("\<^const>List.list.Cons" ("_position" n\<^sub>1)
###               ("_position" ns')))
###           ("_position" n\<^sub>3))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" realizable)
###         ("_cargs" ("_position" n\<^sub>0)
###           ("_cargs" ("_position" ns) ("_position" n\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###           ("\<^const>HOL.disj" ("_position" n\<^sub>2)
###             ("\<^const>local.param_in_edge" ("_position" n\<^sub>1)
###               ("_position" p) ("_position" V) ("_position" n\<^sub>2)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" matched)
###             ("_cargs" ("_position" n\<^sub>2)
###               ("_cargs" ("_position" ns') ("_position" n\<^sub>3))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" realizable)
###       ("_cargs" ("_position" n\<^sub>0)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" ns)
###             ("\<^const>List.list.Cons" ("_position" n\<^sub>1)
###               ("_position" ns')))
###           ("_position" n\<^sub>3))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" realizable)
###         ("_cargs" ("_position" n\<^sub>0)
###           ("_cargs" ("_position" ns) ("_position" n\<^sub>1)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.disj"
###           ("\<^const>local.call_edge" ("_position" n\<^sub>1)
###             ("_position" p) ("_position" n\<^sub>2))
###           ("\<^const>local.param_in_edge" ("_position" n\<^sub>1)
###             ("_position" p) ("_position" V) ("_position" n\<^sub>2))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" matched)
###             ("_cargs" ("_position" n\<^sub>2)
###               ("_cargs" ("_position" ns') ("_position" n\<^sub>3))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" realizable)
###       ("_cargs" ("_position" n\<^sub>0)
###         ("_cargs"
###           ("\<^const>List.append" ("_position" ns)
###             ("\<^const>List.list.Cons" ("_position" n\<^sub>1)
###               ("_position" ns')))
###           ("_position" n\<^sub>3))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "realizable"
  Proving monotonicity ...
### theory "Jinja.LBVComplete"
### 0.317s elapsed time, 1.251s cpu time, 0.146s GC time
Loading theory "Jinja.Typing_Framework_2" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec")
### theory "Jinja.LBVCorrect"
### 0.179s elapsed time, 0.717s cpu time, 0.000s GC time
Loading theory "Jinja.Abstract_BV" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec")
### theory "Jinja.Typing_Framework_2"
### 0.039s elapsed time, 0.159s cpu time, 0.000s GC time
### Ambiguous input (line 2027 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_call_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_call_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2030 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_return_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" sourcenode) ("_position" a)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n')
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" targetnode) ("_position" a)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_return_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2020 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" targetnode) ("_position" a)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" a')
###               ("_applC" ("_position" get_return_edges) ("_position" a))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n')
###                 ("_applC" ("_position" CFG_node)
###                   ("_applC" ("_position" sourcenode)
###                     ("_position" a'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_cdep_edge" ("_position" n) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" CFG_node)
###               ("_applC" ("_position" targetnode) ("_position" a)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member" ("_position" a')
###               ("_applC" ("_position" get_return_edges) ("_position" a))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n')
###                 ("_applC" ("_position" CFG_node)
###                   ("_applC" ("_position" sourcenode)
###                     ("_position" a'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_cdep_edge" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2033 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" ins) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Actual_in)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Formal_in)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_param_in_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" ins) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" ins))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Actual_in)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Formal_in)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_param_in_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2037 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" outs) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Formal_out)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Actual_out)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_param_out_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" V)
###               ("\<^const>List.nth" ("_position" outs) ("_position" x))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Orderings.ord_class.less" ("_position" x)
###                 ("_applC" ("_position" length) ("_position" outs))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" Formal_out)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a))
###                       ("_tuple_arg" ("_position" x))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" n')
###                     ("_applC" ("_position" Actual_out)
###                       ("_tuple"
###                         ("_applC" ("_position" targetnode) ("_position" a))
###                         ("_tuple_arg" ("_position" x)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_param_out_edge" ("_position" n) ("_position" p)
###       ("_position" V) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2042 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" sourcenode) ("_position" a)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n')
###                 ("_applC" ("_position" CFG_node)
###                   ("_applC" ("_position" targetnode)
###                     ("_position" a'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_summary_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" CFG_node)
###                 ("_applC" ("_position" sourcenode) ("_position" a)))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n')
###                 ("_applC" ("_position" CFG_node)
###                   ("_applC" ("_position" targetnode)
###                     ("_position" a'))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_summary_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2046 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" matched)
###               ("_cargs"
###                 ("_applC" ("_position" Formal_in)
###                   ("_tuple"
###                     ("_applC" ("_position" targetnode) ("_position" a))
###                     ("_tuple_arg" ("_position" x))))
###                 ("_cargs" ("_position" ns)
###                   ("_applC" ("_position" Formal_out)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a'))
###                       ("_tuple_arg" ("_position" x'))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Actual_in)
###                   ("_tuple"
###                     ("_applC" ("_position" sourcenode) ("_position" a))
###                     ("_tuple_arg" ("_position" x))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n')
###                   ("_applC" ("_position" Actual_out)
###                     ("_tuple"
###                       ("_applC" ("_position" targetnode) ("_position" a'))
###                       ("_tuple_arg" ("_position" x'))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" ins)
###                         ("_tuple_arg" ("_position" outs))))
###                     ("_applC" ("_position" set) ("_position" procs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Orderings.ord_class.less" ("_position" x)
###                       ("_applC" ("_position" length) ("_position" ins))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Orderings.ord_class.less" ("_position" x')
###                         ("_applC" ("_position" length)
###                           ("_position" outs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_summary_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" matched)
###               ("_cargs"
###                 ("_applC" ("_position" Formal_in)
###                   ("_tuple"
###                     ("_applC" ("_position" targetnode) ("_position" a))
###                     ("_tuple_arg" ("_position" x))))
###                 ("_cargs" ("_position" ns)
###                   ("_applC" ("_position" Formal_out)
###                     ("_tuple"
###                       ("_applC" ("_position" sourcenode) ("_position" a'))
###                       ("_tuple_arg" ("_position" x'))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" n)
###                 ("_applC" ("_position" Actual_in)
###                   ("_tuple"
###                     ("_applC" ("_position" sourcenode) ("_position" a))
###                     ("_tuple_arg" ("_position" x))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n')
###                   ("_applC" ("_position" Actual_out)
###                     ("_tuple"
###                       ("_applC" ("_position" targetnode) ("_position" a'))
###                       ("_tuple_arg" ("_position" x'))))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" ins)
###                         ("_tuple_arg" ("_position" outs))))
###                     ("_applC" ("_position" set) ("_position" procs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Orderings.ord_class.less" ("_position" x)
###                       ("_applC" ("_position" length) ("_position" ins))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>Orderings.ord_class.less" ("_position" x')
###                         ("_applC" ("_position" length)
###                           ("_position" outs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>sum_summary_edge" ("_position" n) ("_position" p)
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "sum_SDG_edge"
*** Undefined fact: "semilat" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")768semilat_DeffactSemilat.semilat_Defsemilat_deffactSemilat.semilat_defsemilat_errIfactErr.semilat_errIsemilat_le_err_Err_plusfactErr.semilat_le_err_Err_plussemilat_le_err_OK1factErr.semilat_le_err_OK1semilat_le_err_OK2factErr.semilat_le_err_OK2semilat_le_err_plus_ErrfactErr.semilat_le_err_plus_Errsemilat_optfactOpt.semilat_optsemilattice_axioms_deffactLattices.semilattice_axioms_defsemilattice_deffactLattices.semilattice_defsemilattice_inf_axiomsfactLattices.semilattice_inf_class.semilattice_inf_axiomssemilattice_inf_class_deffactLattices.semilattice_inf_class_defsemilattice_map2factList.semilattice_map2semilattice_neutr_deffactLattices.semilattice_neutr_defsemilattice_neutr_order_deffactLattices.semilattice_neutr_order_defsemilattice_neutr_set_deffactLattices_Big.semilattice_neutr_set_defsemilattice_order_axioms_deffactLattices.semilattice_order_axioms_defsemilattice_order_deffactLattices.semilattice_order_defsemilattice_order_neutr_set_deffactLattices_Big.semilattice_order_neutr_set_defsemilattice_order_set_deffactLattices_Big.semilattice_order_set_defsemilattice_set_deffactLattices_Big.semilattice_set_defsemilattice_sup_axiomsfactLattices.semilattice_sup_class.semilattice_sup_axiomssemilattice_sup_class_deffactLattices.semilattice_sup_class_defsemilattice.axiomsfactLattices.semilattice.axiomssemilattice.idemfactLattices.semilattice.idemsemilattice.introfactLattices.semilattice.introsemilattice.left_idemfactLattices.semilattice.left_idemsemilattice.right_idemfactLattices.semilattice.right_idemsemilattice_axioms.introfactLattices.semilattice_axioms.introsemilattice_inf.Inf_fin_deffactLattices_Big.semilattice_inf.Inf_fin_defsemilattice_inf.comp_fun_idem_inffactFinite_Set.semilattice_inf.comp_fun_idem_infsemilattice_inf.inf_absorb1factLattices.semilattice_inf.inf_absorb1semilattice_inf.inf_absorb2factLattices.semilattice_inf.inf_absorb2semilattice_inf.inf_acifactLattices.semilattice_inf.inf_acisemilattice_inf.inf_assocfactLattices.semilattice_inf.inf_assocsemilattice_inf.inf_commutefactLattices.semilattice_inf.inf_commutesemilattice_inf.inf_greatestfactLattices.semilattice_inf.inf_greatestsemilattice_inf.inf_idemfactLattices.semilattice_inf.inf_idemsemilattice_inf.inf_le1factLattices.semilattice_inf.inf_le1semilattice_inf.inf_le2factLattices.semilattice_inf.inf_le2
*** At command "thm" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")
  Proving monotonicity ...
### theory "Jinja.Abstract_BV"
### 0.368s elapsed time, 1.503s cpu time, 0.154s GC time
semilat (?A, ?r, ?f) =
(order ?r ?A &
 closed ?A ?f &
 (ALL x:?A. ALL y:?A. x <=_?r x +_?f y) &
 (ALL x:?A. ALL y:?A. y <=_?r x +_?f y) &
 (ALL x:?A. ALL y:?A. ALL z:?A. x <=_?r z & y <=_?r z --> x +_?f y <=_?r z))
semilat (?A, ?r, ?f) ==> Semilat ?A ?r ?f
### Ambiguous input (line 2055 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.sum_summary_edge" ("_position" n) ("_position" p)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" fs) ("_position" a')))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BasicDefs.edge_kind.CallEdge"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" Q))
###                   ("_position" r) ("_position" p) ("_position" fs)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" a')
###                     ("_applC" ("_position" get_return_edges)
###                       ("_position" a))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" CFG_node)
###                         ("_applC" ("_position" sourcenode)
###                           ("_position" a)))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" n')
###                         ("_applC" ("_position" CFG_node)
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" fs)
###                     ("_idts" ("_position" a')
###                       ("_idts" ("_position" ns)
###                         ("_idts" ("_position" x)
###                           ("_idts" ("_position" x')
###                             ("_idts" ("_position" ins)
###                               ("_position" outs)))))))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>BasicDefs.edge_kind.CallEdge"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" kind) ("_position" a))
###                       ("_position" Q))
###                     ("_position" r) ("_position" p) ("_position" fs)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" matched)
###                         ("_cargs"
###                           ("_applC" ("_position" Formal_in)
###                             ("_tuple"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))
###                           ("_cargs" ("_position" ns)
###                             ("_applC" ("_position" Formal_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" sourcenode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" n)
###                           ("_applC" ("_position" Actual_in)
###                             ("_tuple"
###                               ("_applC" ("_position" sourcenode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" n')
###                             ("_applC" ("_position" Actual_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" p)
###                                 ("_tuple_args" ("_position" ins)
###                                   ("_tuple_arg" ("_position" outs))))
###                               ("_applC" ("_position" set)
###                                 ("_position" procs))))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Orderings.ord_class.less"
###                                 ("_position" x)
###                                 ("_applC" ("_position" length)
###                                   ("_position" ins))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Orderings.ord_class.less"
###                                   ("_position" x')
###                                   ("_applC" ("_position" length)
###                                     ("_position" outs)))))))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.sum_summary_edge" ("_position" n) ("_position" p)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" fs) ("_position" a')))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a))
###                   ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                     ("_position" r) ("_position" p) ("_position" fs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" a')
###                     ("_applC" ("_position" get_return_edges)
###                       ("_position" a))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" CFG_node)
###                         ("_applC" ("_position" sourcenode)
###                           ("_position" a)))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" n')
###                         ("_applC" ("_position" CFG_node)
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" fs)
###                     ("_idts" ("_position" a')
###                       ("_idts" ("_position" ns)
###                         ("_idts" ("_position" x)
###                           ("_idts" ("_position" x')
###                             ("_idts" ("_position" ins)
###                               ("_position" outs)))))))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>BasicDefs.edge_kind.CallEdge"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" kind) ("_position" a))
###                       ("_position" Q))
###                     ("_position" r) ("_position" p) ("_position" fs)))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" matched)
###                         ("_cargs"
###                           ("_applC" ("_position" Formal_in)
###                             ("_tuple"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))
###                           ("_cargs" ("_position" ns)
###                             ("_applC" ("_position" Formal_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" sourcenode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" n)
###                           ("_applC" ("_position" Actual_in)
###                             ("_tuple"
###                               ("_applC" ("_position" sourcenode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" n')
###                             ("_applC" ("_position" Actual_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" p)
###                                 ("_tuple_args" ("_position" ins)
###                                   ("_tuple_arg" ("_position" outs))))
###                               ("_applC" ("_position" set)
###                                 ("_position" procs))))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Orderings.ord_class.less"
###                                 ("_position" x)
###                                 ("_applC" ("_position" length)
###                                   ("_position" ins))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Orderings.ord_class.less"
###                                   ("_position" x')
###                                   ("_applC" ("_position" length)
###                                     ("_position" outs)))))))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.sum_summary_edge" ("_position" n) ("_position" p)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" fs) ("_position" a')))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BasicDefs.edge_kind.CallEdge"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a))
###                     ("_position" Q))
###                   ("_position" r) ("_position" p) ("_position" fs)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" a')
###                     ("_applC" ("_position" get_return_edges)
###                       ("_position" a))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" CFG_node)
###                         ("_applC" ("_position" sourcenode)
###                           ("_position" a)))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" n')
###                         ("_applC" ("_position" CFG_node)
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" fs)
###                     ("_idts" ("_position" a')
###                       ("_idts" ("_position" ns)
###                         ("_idts" ("_position" x)
###                           ("_idts" ("_position" x')
###                             ("_idts" ("_position" ins)
###                               ("_position" outs)))))))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a))
###                     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                       ("_position" r) ("_position" p) ("_position" fs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" matched)
###                         ("_cargs"
###                           ("_applC" ("_position" Formal_in)
###                             ("_tuple"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))
###                           ("_cargs" ("_position" ns)
###                             ("_applC" ("_position" Formal_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" sourcenode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" n)
###                           ("_applC" ("_position" Actual_in)
###                             ("_tuple"
###                               ("_applC" ("_position" sourcenode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" n')
###                             ("_applC" ("_position" Actual_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" p)
###                                 ("_tuple_args" ("_position" ins)
###                                   ("_tuple_arg" ("_position" outs))))
###                               ("_applC" ("_position" set)
###                                 ("_position" procs))))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Orderings.ord_class.less"
###                                 ("_position" x)
###                                 ("_applC" ("_position" length)
###                                   ("_position" ins))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Orderings.ord_class.less"
###                                   ("_position" x')
###                                   ("_applC" ("_position" length)
###                                     ("_position" outs)))))))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.sum_summary_edge" ("_position" n) ("_position" p)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" fs) ("_position" a')))))
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a)))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a))
###                   ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                     ("_position" r) ("_position" p) ("_position" fs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>Set.member" ("_position" a')
###                     ("_applC" ("_position" get_return_edges)
###                       ("_position" a))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" n)
###                       ("_applC" ("_position" CFG_node)
###                         ("_applC" ("_position" sourcenode)
###                           ("_position" a)))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" n')
###                         ("_applC" ("_position" CFG_node)
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a'))))))))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" fs)
###                     ("_idts" ("_position" a')
###                       ("_idts" ("_position" ns)
###                         ("_idts" ("_position" x)
###                           ("_idts" ("_position" x')
###                             ("_idts" ("_position" ins)
###                               ("_position" outs)))))))))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" valid_edge) ("_position" a)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a))
###                     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                       ("_position" r) ("_position" p) ("_position" fs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member" ("_position" a')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_applC" ("_position" matched)
###                         ("_cargs"
###                           ("_applC" ("_position" Formal_in)
###                             ("_tuple"
###                               ("_applC" ("_position" targetnode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))
###                           ("_cargs" ("_position" ns)
###                             ("_applC" ("_position" Formal_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" sourcenode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq" ("_position" n)
###                           ("_applC" ("_position" Actual_in)
###                             ("_tuple"
###                               ("_applC" ("_position" sourcenode)
###                                 ("_position" a))
###                               ("_tuple_arg" ("_position" x))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" n')
###                             ("_applC" ("_position" Actual_out)
###                               ("_tuple"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a'))
###                                 ("_tuple_arg" ("_position" x'))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>Set.member"
###                               ("_tuple" ("_position" p)
###                                 ("_tuple_args" ("_position" ins)
###                                   ("_tuple_arg" ("_position" outs))))
###                               ("_applC" ("_position" set)
###                                 ("_position" procs))))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("\<^const>Orderings.ord_class.less"
###                                 ("_position" x)
###                                 ("_applC" ("_position" length)
###                                   ("_position" ins))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>Orderings.ord_class.less"
###                                   ("_position" x')
###                                   ("_applC" ("_position" length)
###                                     ("_position" outs)))))))))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2252 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2254 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###       ("_position" Q'))
###     ("_position" r') ("_position" p) ("_position" fs')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q')
###       ("_position" r') ("_position" p) ("_position" fs'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "intra_sum_SDG_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intra_call_sum_SDG_path"
  Proving monotonicity ...
Proofs for inductive predicate(s) "intra_return_sum_SDG_path"
  Proving monotonicity ...
### Ambiguous input (line 3215 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>local.sum_return_edge" ("_position" nx) ("_position" p)
###       ("_position" nx'))
###     ("\<^const>HOL.Ex_binder" ("_position" V)
###       ("\<^const>local.sum_param_out_edge" ("_position" nx) ("_position" p)
###         ("_position" V) ("_position" nx')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.sum_return_edge" ("_position" nx) ("_position" p)
###     ("\<^const>HOL.disj" ("_position" nx')
###       ("\<^const>HOL.Ex_binder" ("_position" V)
###         ("\<^const>local.sum_param_out_edge" ("_position" nx)
###           ("_position" p) ("_position" V) ("_position" nx'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3349 of "$AFP/HRB-Slicing/StaticInter/SDG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>local.sum_return_edge" ("_position" n'') ("_position" p)
###       ("_position" n'))
###     ("\<^const>local.sum_param_out_edge" ("_position" n'') ("_position" p)
###       ("_position" V) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.sum_return_edge" ("_position" n'') ("_position" p)
###     ("\<^const>HOL.disj" ("_position" n')
###       ("\<^const>local.sum_param_out_edge" ("_position" n'') ("_position" p)
###         ("_position" V) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.sum_param_out_edge"
###     ("\<^const>local.sum_return_edge" ("_position" n'') ("_position" p)
###       ("\<^const>HOL.disj" ("_position" n') ("_position" n'')))
###     ("_position" p) ("_position" V) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SDG"
### 6.825s elapsed time, 25.969s cpu time, 6.567s GC time
Loading theory "Draft.HRBSlice" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.FundamentalProperty" via "Draft.WeakSimulation" via "Draft.Slice" via "Draft.SCDObservable")
Loading theory "Draft.ProcSDG" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing")
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Null, Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 1))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 2))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 3))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Intg (Int_of_integer 1), Addr (Nat 3)],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 4))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 5))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 3), Unit, Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 6))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 7))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 8))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Intg (Int_of_integer 2), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 9))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 10))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5)],
        ([Addr (Nat 3), Addr (Nat 4), Unit],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 11))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 12))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 13))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Intg (Int_of_integer 3), Addr (Nat 5)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 14))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 15))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 16))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 0)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 1)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 2)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3), Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 3)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 4)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Null, Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 5)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Bool true, Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 6)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 7)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 8)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 9)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 10)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 11)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 3), Addr (Nat 4)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 12)))),
       ([Addr (Nat 4), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 17))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 18))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 19))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 20))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 0)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 1)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 2)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 3), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 3)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 4)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Addr (Nat 4), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 5)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Bool false, Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 6)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 13)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 0)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 1)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 2)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4), Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 3)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 4)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null, Null, Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 5)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Bool true, Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 6)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Null],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 7)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 8)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 4)],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 9)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 10)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 11)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 12)))),
       ([Addr (Nat 5), Addr (Nat 4)],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 14)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, ...),
            Chara (true, true, false, false, true, ...),
            Chara (false, false, true, false, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 3), Addr (Nat 5)],
         ([Chara (false, false, true, true, false, true, true, false),
           Chara (true, false, false, true, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, false, false, false, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (false, false, false, false, true, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, true, true, true, false, true, true, false),
            Chara (false, false, true, false, false, true, true, false)],
           Nat 15)))),
       ([Addr (Nat 5), Addr (Nat 3)],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, ...),
            Chara (false, false, true, false, true, ...)],
           Nat 21))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it =
   SOME
    (NONE,
     (fn,
      [([Unit],
        ([Addr (Nat 3), Addr (Nat 4), Addr (Nat 5)],
         ([Chara (false, false, true, false, true, true, true, false),
           Chara (true, false, true, false, false, true, true, false),
           Chara (true, true, false, false, true, true, true, false),
           Chara (false, false, true, false, true, true, true, false)],
          ([Chara (true, false, true, true, false, true, true, false),
            Chara (true, false, false, false, false, true, true, false),
            Chara (true, true, false, true, false, true, true, false),
            Chara (true, false, true, false, false, true, true, false),
            Chara (false, false, true, true, false, true, true, false),
            Chara (true, false, false, true, false, true, true, false),
            Chara (true, true, false, false, true, true, true, false),
            Chara (false, false, true, false, true, true, ...)],
           Nat 22))))])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val it = SOME (NONE, (fn, [])):
   (Isabelle5835550.Generated_Code.nat option *
    ((Isabelle5835550.Generated_Code.nat ->
        (Isabelle5835550.Generated_Code.char list *
         (Isabelle5835550.Generated_Code.char list *
          Isabelle5835550.Generated_Code.char list
            -> Isabelle5835550.Generated_Code.vala option)
        )
        option)
     *
     (Isabelle5835550.Generated_Code.vala list *
      (Isabelle5835550.Generated_Code.vala list *
       (Isabelle5835550.Generated_Code.char list *
        (Isabelle5835550.Generated_Code.char list *
         Isabelle5835550.Generated_Code.nat)))
     )
     list)
   )
   option
val h = fn:
   Isabelle5835550.Generated_Code.nat ->
     (Isabelle5835550.Generated_Code.char list *
      (Isabelle5835550.Generated_Code.char list *
       Isabelle5835550.Generated_Code.char list
         -> Isabelle5835550.Generated_Code.vala option)
     )
     option
val it = (): unit
val it = (): unit
val it = (): unit
val it = (): unit
val it = (): unit
val it = (): unit
locale SDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "SDG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
Proofs for inductive predicate(s) "sum_SDG_slice1p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "sum_SDG_slice2p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "combine_SDG_slicesp"
  Proving monotonicity ...
### Ambiguous input (line 305 of "$AFP/HRB-Slicing/StaticInter/HRBSlice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 306 of "$AFP/HRB-Slicing/StaticInter/HRBSlice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###       ("_position" Q'))
###     ("_position" r') ("_position" p) ("_position" fs')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q')
###       ("_position" r') ("_position" p) ("_position" fs'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.HRBSlice"
### 1.391s elapsed time, 5.313s cpu time, 0.509s GC time
Loading theory "Draft.SCDObservable" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.FundamentalProperty" via "Draft.WeakSimulation" via "Draft.Slice")
### theory "Draft.ProcSDG"
### 1.511s elapsed time, 5.793s cpu time, 0.509s GC time
locale SDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "SDG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
### Ambiguous input (line 8 of "$AFP/HRB-Slicing/StaticInter/SCDObservable.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###       ("_position" n\<^sub>2))
###     ("\<^const>local.param_in_edge" ("_position" n\<^sub>1) ("_position" p)
###       ("_position" V') ("_position" n\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###     ("\<^const>HOL.disj" ("_position" n\<^sub>2)
###       ("\<^const>local.param_in_edge" ("_position" n\<^sub>1)
###         ("_position" p) ("_position" V') ("_position" n\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.param_in_edge"
###     ("\<^const>local.call_edge" ("_position" n\<^sub>1) ("_position" p)
###       ("\<^const>HOL.disj" ("_position" n\<^sub>2) ("_position" n\<^sub>1)))
###     ("_position" p) ("_position" V') ("_position" n\<^sub>2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 9 of "$AFP/HRB-Slicing/StaticInter/SCDObservable.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>local.return_edge" ("_position" n\<^sub>3) ("_position" p)
###       ("_position" n\<^sub>4))
###     ("\<^const>local.param_out_edge" ("_position" n\<^sub>3) ("_position" p)
###       ("_position" V) ("_position" n\<^sub>4))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.return_edge" ("_position" n\<^sub>3) ("_position" p)
###     ("\<^const>HOL.disj" ("_position" n\<^sub>4)
###       ("\<^const>local.param_out_edge" ("_position" n\<^sub>3)
###         ("_position" p) ("_position" V) ("_position" n\<^sub>4)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.param_out_edge"
###     ("\<^const>local.return_edge" ("_position" n\<^sub>3) ("_position" p)
###       ("\<^const>HOL.disj" ("_position" n\<^sub>4) ("_position" n\<^sub>3)))
###     ("_position" p) ("_position" V) ("_position" n\<^sub>4)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SCDObservable"
### 0.745s elapsed time, 1.830s cpu time, 0.081s GC time
Loading theory "Draft.Slice" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.FundamentalProperty" via "Draft.WeakSimulation")
locale SDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "SDG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
### Ambiguous input (line 93 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" slice_kind_aux)
###       ("_cargs" ("_position" m)
###         ("_cargs" ("_position" m')
###           ("_cargs" ("_position" S)
###             ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" f))))))
###     ("\<^const>HOL.If"
###       ("\<^const>Set.member" ("_position" m)
###         ("\<^const>local.SDG_to_CFG_set" ("_position" S)))
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" f))
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" slice_kind_aux)
###     ("_cargs" ("_position" m)
###       ("_cargs" ("_position" m')
###         ("_cargs" ("_position" S)
###           ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###             ("\<^const>HOL.eq" ("_position" f)
###               ("\<^const>HOL.If"
###                 ("\<^const>Set.member" ("_position" m)
###                   ("\<^const>local.SDG_to_CFG_set" ("_position" S)))
###                 ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" f))
###                 ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###                   ("_position" id))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  slice_kind_aux ::
    "'node
     => 'node
        => 'node SDG_node set
           => ('var, 'val, 'ret, 'pname) edge_kind
              => ('var, 'val, 'ret, 'pname) edge_kind"
Found termination order: "{}"
### Ambiguous input (line 369 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_lambda" ("_position" cf) ("_position" False)))
###       ("_position" r) ("_position" p) ("_position" fs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_lambda" ("_position" cf) ("_position" False)))
###       ("_position" r) ("_position" p) ("_position" fs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("_lambda" ("_position" cf) ("_position" False)) ("_position" r)
###         ("_position" p) ("_position" fs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("_lambda" ("_position" cf) ("_position" False)) ("_position" r)
###         ("_position" p) ("_position" fs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 375 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_position" Q))
###       ("_position" r) ("_position" p)
###       ("_applC" ("_position" cspp)
###         ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###           ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###             ("_position" fs)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_position" Q))
###       ("_position" r) ("_position" p)
###       ("_applC" ("_position" cspp)
###         ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###           ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###             ("_position" fs)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###         ("_position" r) ("_position" p)
###         ("_applC" ("_position" cspp)
###           ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###             ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###               ("_position" fs))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###         ("_position" r) ("_position" p)
###         ("_applC" ("_position" cspp)
###           ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###             ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###               ("_position" fs))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 381 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 383 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("_position" Q))
###     ("_position" r) ("_position" p)
###     ("_applC" ("_position" replicate)
###       ("_cargs" ("_applC" ("_position" length) ("_position" fs))
###         ("_position" Map.empty)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" slice_kind)
###       ("_cargs" ("_position" S) ("_position" a)))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p)
###       ("_applC" ("_position" replicate)
###         ("_cargs" ("_applC" ("_position" length) ("_position" fs))
###           ("_position" Map.empty))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 397 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 399 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" slice_kind)
###       ("_cargs" ("_position" S) ("_position" a)))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 414 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 520 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_lambda" ("_position" cf) ("_position" True)))
###       ("_position" p)
###       ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###         ("_position" cf')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_lambda" ("_position" cf) ("_position" True)))
###       ("_position" p)
###       ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###         ("_position" cf')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf) ("_position" True)) ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("_position" cf'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.not_member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf) ("_position" True)) ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("_position" cf'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 526 of "$AFP/HRB-Slicing/StaticInter/Slice.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_position" Q))
###       ("_position" p)
###       ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###         ("_applC" ("_position" rspp)
###           ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###             ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###               ("_cargs" ("_position" outs)
###                 ("_cargs" ("_position" cf') ("_position" cf))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" p) ("_position" f)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" slice_kind)
###           ("_cargs" ("_position" S) ("_position" a)))
###         ("_position" Q))
###       ("_position" p)
###       ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###         ("_applC" ("_position" rspp)
###           ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###             ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###               ("_cargs" ("_position" outs)
###                 ("_cargs" ("_position" cf') ("_position" cf))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###         ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("_applC" ("_position" rspp)
###             ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###               ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###                 ("_cargs" ("_position" outs)
###                   ("_cargs" ("_position" cf') ("_position" cf)))))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" sourcenode) ("_position" a))
###         ("\<^const>local.SDG_to_CFG_set"
###           ("_applC" ("_position" HRB_slice) ("_position" S)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" p) ("_position" f)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_arg" ("_position" outs))))
###               ("_applC" ("_position" set) ("_position" procs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" slice_kind)
###         ("_cargs" ("_position" S) ("_position" a)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###         ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("_applC" ("_position" rspp)
###             ("_cargs" ("_applC" ("_position" targetnode) ("_position" a))
###               ("_cargs" ("_applC" ("_position" HRB_slice) ("_position" S))
###                 ("_cargs" ("_position" outs)
###                   ("_cargs" ("_position" cf') ("_position" cf)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Slice"
### 1.134s elapsed time, 2.371s cpu time, 0.226s GC time
Loading theory "Draft.WeakSimulation" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.FundamentalProperty")
locale eff
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list * ty list * ty * 'a) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and Ts :: "ty list"
    and T\<^sub>r :: "ty"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and mxl :: "nat"
    and
    eff\<^sub>i :: "instr => ty list * ty err list => ty list * ty err list"
    and app\<^sub>i :: "instr => nat => ty list * ty err list => bool"
    and
    eff ::
      "instr
       => nat
          => (ty list * ty err list) option
             => (nat * (ty list * ty err list) option) list"
    and app :: "instr => nat => (ty list * ty err list) option => bool"
    and
    norm_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and xcpt_app :: "instr => nat => ty list * ty err list => bool"
    and
    xcpt_eff ::
      "instr
       => nat
          => ty list * ty err list
             => (nat * (ty list * ty err list) option) list"
    and mpc :: "nat"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "mpc == length is"
    and "!!i \<tau>. eff\<^sub>i i \<tau> == eff\<^sub>i (i, P, \<tau>)"
    and
    "!!i pc \<tau>.
        app\<^sub>i i pc \<tau> ==
        app\<^sub>i (i, P, pc, mxs, T\<^sub>r, \<tau>)"
    and "!!i pc \<tau>. xcpt_eff i pc \<tau> == xcpt_eff i P pc \<tau> xt"
    and "!!i pc \<tau>. norm_eff i pc \<tau> == norm_eff i P pc \<tau>"
    and "!!i pc. eff i pc == eff i P pc xt"
    and
    "!!i pc \<tau>. xcpt_app i pc \<tau> == xcpt_app i P pc mxs xt \<tau>"
    and "!!i pc. app i pc == app i P mxs T\<^sub>r pc mpc xt"
### theory "Jinja.Effect"
### 8.014s elapsed time, 27.157s cpu time, 4.510s GC time
Loading theory "Jinja.BVSpec" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe" via "Jinja.BVConform")
Loading theory "Jinja.EffectMono" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec" via "Jinja.TF_JVM")
### theory "Jinja.EffectMono"
### 0.088s elapsed time, 0.277s cpu time, 0.078s GC time
### theory "Jinja.BVSpec"
### 0.110s elapsed time, 0.321s cpu time, 0.078s GC time
Loading theory "Jinja.BVConform" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVSpecTypeSafe")
Loading theory "Jinja.TF_JVM" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample" via "Jinja.BVExec")
locale SDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "SDG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
consts
  conf_fs ::
    "(char list *
      char list *
      (char list * ty) list *
      (char list *
       ty list *
       ty *
       nat *
       nat *
       instr list * (nat * nat * char list * nat * nat) list) list) list
     => (nat => (char list * (char list * char list => val option)) option)
        => (char list => char list => (ty list * ty err list) option list)
           => char list
              => nat
                 => ty => (val list *
                           val list * char list * char list * nat) list
                          => bool"
locale JVM_sl
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and n :: "nat"
    and Ts :: "ty list"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and T\<^sub>r :: "ty"
    and mxl :: "nat"
    and A :: "(ty list * ty err list) option err set"
    and
    r :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err => bool"
    and
    f :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err
             => (ty list * ty err list) option err"
    and app :: "nat => (ty list * ty err list) option => bool"
    and
    eff ::
      "nat
       => (ty list * ty err list) option
          => (nat * (ty list * ty err list) option) list"
    and
    step ::
      "nat
       => (ty list * ty err list) option err
          => (nat * (ty list * ty err list) option err) list"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "A == states P mxs mxl"
    and "r == JVM_SemiType.le P mxs mxl"
    and "f == JVM_SemiType.sup P mxs mxl"
    and "app == %pc. app (is ! pc) P mxs T\<^sub>r pc (length is) xt"
    and "eff == %pc. eff (is ! pc) P pc xt"
    and "step == err_step (length is) app eff"
    and "n == length is"
### Ambiguous input (line 225 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.disj"
###                     ("_Bex" ("_position" m)
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" tl) ("_position" ms)))
###                       ("\<^const>HOL.Ex_binder" ("_position" m')
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" call_of_return_node)
###                             ("_cargs" ("_position" m) ("_position" m')))
###                           ("\<^const>Set.not_member" ("_position" m')
###                             ("\<^const>local.SDG_to_CFG_set"
###                               ("_applC" ("_position" HRB_slice)
###                                 ("_position" S)))))))
###                     ("\<^const>Set.not_member"
###                       ("_applC" ("_position" hd) ("_position" ms))
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Ball" ("_position" m)
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" tl) ("_position" ms)))
###                       ("_applC" ("_position" return_node) ("_position" m))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" ms))
###                         ("_applC" ("_position" length) ("_position" s))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" s'))
###                           ("_applC" ("_position" Suc)
###                             ("_applC" ("_position" length)
###                               ("_position" s)))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" hd) ("_position" ms))
###                             ("_applC" ("_position" sourcenode)
###                               ("_position" a))))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq" ("_position" ms')
###                               ("\<^const>List.list.Cons"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a))
###                                 ("\<^const>List.list.Cons"
###                                   ("_applC" ("_position" targetnode)
###                                     ("_position" a'))
###                                   ("_applC" ("_position" tl)
###                                     ("_position" ms))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>silent_move" ("_position" S) ("_position" f) ("_position" ms)
###       ("_position" s) ("_position" a) ("_position" ms') ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.disj"
###                     ("_Bex" ("_position" m)
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" tl) ("_position" ms)))
###                       ("\<^const>HOL.Ex_binder" ("_position" m')
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" call_of_return_node)
###                             ("_cargs" ("_position" m) ("_position" m')))
###                           ("\<^const>Set.not_member" ("_position" m')
###                             ("\<^const>local.SDG_to_CFG_set"
###                               ("_applC" ("_position" HRB_slice)
###                                 ("_position" S)))))))
###                     ("\<^const>Set.not_member"
###                       ("_applC" ("_position" hd) ("_position" ms))
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Ball" ("_position" m)
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" tl) ("_position" ms)))
###                       ("_applC" ("_position" return_node) ("_position" m))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" ms))
###                         ("_applC" ("_position" length) ("_position" s))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" s'))
###                           ("_applC" ("_position" Suc)
###                             ("_applC" ("_position" length)
###                               ("_position" s)))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" hd) ("_position" ms))
###                             ("_applC" ("_position" sourcenode)
###                               ("_position" a))))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq" ("_position" ms')
###                               ("\<^const>List.list.Cons"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a))
###                                 ("\<^const>List.list.Cons"
###                                   ("_applC" ("_position" targetnode)
###                                     ("_position" a'))
###                                   ("_applC" ("_position" tl)
###                                     ("_position" ms))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>silent_move" ("_position" S) ("_position" f) ("_position" ms)
###       ("_position" s) ("_position" a) ("_position" ms') ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale start_context
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and n :: "nat"
    and Ts :: "ty list"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and T\<^sub>r :: "ty"
    and mxl :: "nat"
    and A :: "(ty list * ty err list) option err set"
    and
    r :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err => bool"
    and
    f :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err
             => (ty list * ty err list) option err"
    and app :: "nat => (ty list * ty err list) option => bool"
    and
    eff ::
      "nat
       => (ty list * ty err list) option
          => (nat * (ty list * ty err list) option) list"
    and
    step ::
      "nat
       => (ty list * ty err list) option err
          => (nat * (ty list * ty err list) option err) list"
    and
    p :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list
          => char list
             => char list *
                ty list *
                ty *
                nat *
                nat * instr list * (nat * nat * char list * nat * nat) list
                => bool"
    and C :: "char list"
    and first :: "(ty list * ty err list) option"
    and start :: "(ty list * ty err list) option err list"
  assumes "start_context P Ts p C"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "A == states P mxs mxl"
    and "r == JVM_SemiType.le P mxs mxl"
    and "f == JVM_SemiType.sup P mxs mxl"
    and "app == %pc. app (is ! pc) P mxs T\<^sub>r pc (length is) xt"
    and "eff == %pc. eff (is ! pc) P pc xt"
    and "step == err_step (length is) app eff"
    and "n == length is"
    and
    "first ==
     \<lfloor>([],
               OK (Class C) #
               map OK Ts @ replicate mxl\<^sub>0 Err)\<rfloor>"
    and "start == OK first # replicate (length is - 1) (OK None)"
### Ambiguous input (line 234 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f'))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_Bex" ("_position" m)
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" tl) ("_position" ms)))
###                 ("\<^const>HOL.Ex_binder" ("_position" m')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" call_of_return_node)
###                       ("_cargs" ("_position" m) ("_position" m')))
###                     ("\<^const>Set.not_member" ("_position" m')
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_Ball" ("_position" m)
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" tl) ("_position" ms)))
###                   ("_applC" ("_position" return_node) ("_position" m))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" length) ("_position" ms))
###                     ("_applC" ("_position" length) ("_position" s))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" length) ("_position" s))
###                       ("_applC" ("_position" Suc)
###                         ("_applC" ("_position" length) ("_position" s')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" s')
###                         ("\<^const>List.list.Nil")))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" hd) ("_position" ms))
###                           ("_applC" ("_position" sourcenode)
###                             ("_position" a))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" hd)
###                               ("_applC" ("_position" tl) ("_position" ms)))
###                             ("_applC" ("_position" targetnode)
###                               ("_position" a))))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq" ("_position" ms')
###                               ("_applC" ("_position" tl)
###                                 ("_position" ms))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>silent_move" ("_position" S) ("_position" f) ("_position" ms)
###       ("_position" s) ("_position" a) ("_position" ms') ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f')))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_Bex" ("_position" m)
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" tl) ("_position" ms)))
###                 ("\<^const>HOL.Ex_binder" ("_position" m')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" call_of_return_node)
###                       ("_cargs" ("_position" m) ("_position" m')))
###                     ("\<^const>Set.not_member" ("_position" m')
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_Ball" ("_position" m)
###                   ("_applC" ("_position" set)
###                     ("_applC" ("_position" tl) ("_position" ms)))
###                   ("_applC" ("_position" return_node) ("_position" m))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" length) ("_position" ms))
###                     ("_applC" ("_position" length) ("_position" s))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" length) ("_position" s))
###                       ("_applC" ("_position" Suc)
###                         ("_applC" ("_position" length) ("_position" s')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.not_equal" ("_position" s')
###                         ("\<^const>List.list.Nil")))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" hd) ("_position" ms))
###                           ("_applC" ("_position" sourcenode)
###                             ("_position" a))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" hd)
###                               ("_applC" ("_position" tl) ("_position" ms)))
###                             ("_applC" ("_position" targetnode)
###                               ("_position" a))))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq" ("_position" ms')
###                               ("_applC" ("_position" tl)
###                                 ("_position" ms))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>silent_move" ("_position" S) ("_position" f) ("_position" ms)
###       ("_position" s) ("_position" a) ("_position" ms') ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.BVConform"
### 0.418s elapsed time, 1.270s cpu time, 0.087s GC time
Loading theory "Jinja.BVSpecTypeSafe" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample")
Proofs for inductive predicate(s) "silent_move"
  Proving monotonicity ...
### Rewrite rule not in simpset:
### is_relevant_entry ?P1 ?i1 ?pc1 ?e1 ==
### let (f, t, C, h, d) = ?e1 in is_relevant_class ?i1 ?P1 C & ?pc1 : {f..<t}
"find_handler"
  :: "(char list *
       char list *
       (char list * ty) list *
       (char list *
        ty list *
        ty *
        nat *
        nat *
        instr list * (nat * nat * char list * nat * nat) list) list) list
      => nat
         => (nat
             => (char list * (char list * char list => val option)) option)
            => (val list * val list * char list * char list * nat) list
               => nat option *
                  (nat
                   => (char list *
                       (char list * char list => val option)) option) *
                  (val list * val list * char list * char list * nat) list"
### Ambiguous input (line 54 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### ("\<^const>Pure.all_binder" ("_position" f)
###   ("\<^const>Pure.imp"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_tuple" ("_position" None)
###           ("_tuple_args" ("_position" h)
###             ("_tuple_arg"
###               ("\<^const>List.list.Cons" ("_position" f)
###                 ("_position" frs)))))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_applC" ("_position" find_handler)
###           ("_cargs" ("_position" P)
###             ("_cargs" ("_position" xcp)
###               ("_cargs" ("_position" h) ("_position" frs)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 152 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" Cl)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_position" frs)))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_arg"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_arg" ("_position" pc))))))
###                     ("_position" frs))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" exec_instr)
###             ("_cargs"
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_cargs" ("_position" P)
###                 ("_cargs" ("_position" h)
###                   ("_cargs" ("_position" stk)
###                     ("_cargs" ("_position" vars)
###                       ("_cargs" ("_position" Cl)
###                         ("_cargs" ("_position" M)
###                           ("_cargs" ("_position" pc)
###                             ("_position" frs)))))))))))
###         ("_applC" ("_position" Some) ("_position" xcp))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###           ("_position" mxs) ("_applC" ("_position" size) ("_position" ins))
###           ("_position" xt)
###           ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###           ("_position" pc)
###           ("_applC" ("_position" \<Phi>)
###             ("_cargs" ("_position" C) ("_position" M)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>)
###             ("_tuple" ("_position" None)
###               ("_tuple_args" ("_position" h)
###                 ("_tuple_arg"
###                   ("\<^const>List.list.Cons"
###                     ("_tuple" ("_position" stk)
###                       ("_tuple_args" ("_position" loc)
###                         ("_tuple_args" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_arg" ("_position" pc))))))
###                     ("_position" frs))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" obj)
###       ("\<^const>HOL.eq" ("_applC" ("_position" h) ("_position" xcp))
###         ("_applC" ("_position" Some) ("_position" obj))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.TF_JVM"
### 0.497s elapsed time, 1.505s cpu time, 0.087s GC time
Loading theory "Jinja.BVExec" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG" via "Jinja.BVExample")
### Ambiguous input (line 195 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 196 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 353 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 355 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 477 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 479 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "silent_moves"
### Ambiguous input (line 568 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Load) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 580 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Store) ("_position" idx))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 597 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Push) ("_position" v))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 632 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Checkcast) ("_position" D))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" fst)
###                       ("_applC" ("_position" exec_instr)
###                         ("_cargs"
###                           ("\<^const>List.nth" ("_position" ins)
###                             ("_position" pc))
###                           ("_cargs" ("_position" P)
###                             ("_cargs" ("_position" h)
###                               ("_cargs" ("_position" stk)
###                                 ("_cargs" ("_position" loc)
###                                   ("_cargs" ("_position" C)
###                                     ("_cargs" ("_position" M)
### ("_cargs" ("_position" pc) ("_position" frs)))))))))))
###                     ("_position" None))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate safe introduction (intro!)
### EX z zs. ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
### ?P \<turnstile> (?x # ?xs) [\<le>] ?ys
### Ignoring duplicate safe elimination (elim!)
### [| ?P \<turnstile> (?x # ?xs) [\<le>] ?ys;
###    EX z zs.
###       ?ys = z # zs & subtype ?P ?x z & ?P \<turnstile> ?xs [\<le>] zs ==>
###    PROP ?W |]
### ==> PROP ?W
### Ignoring duplicate rewrite rule:
### ?P1 \<turnstile> (?x1 # ?xs1) [\<le>] ?ys1 ==
### EX z zs.
###    ?ys1 = z # zs & subtype ?P1 ?x1 z & ?P1 \<turnstile> ?xs1 [\<le>] zs
### Ambiguous input (line 658 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 661 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 724 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 727 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 801 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" is_class)
###         ("_cargs" ("_position" P) ("_position" C))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" wf_prog)
###           ("_cargs" ("_position" wt) ("_position" P))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" h)
###       ("_applC" ("_position" blank)
###         ("_cargs" ("_position" P) ("_position" C))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1177 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_Ball" ("_position" m)
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" tl) ("_position" ms)))
###                     ("\<^const>HOL.Ex_binder" ("_position" m')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" call_of_return_node)
###                           ("_cargs" ("_position" m) ("_position" m')))
###                         ("\<^const>Set.member" ("_position" m')
###                           ("\<^const>local.SDG_to_CFG_set"
###                             ("_applC" ("_position" HRB_slice)
###                               ("_position" S))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" hd) ("_position" ms))
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S)))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" ms))
###                         ("_applC" ("_position" length) ("_position" s))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" s'))
###                           ("_applC" ("_position" Suc)
###                             ("_applC" ("_position" length)
###                               ("_position" s)))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" hd) ("_position" ms))
###                             ("_applC" ("_position" sourcenode)
###                               ("_position" a))))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq" ("_position" ms')
###                               ("\<^const>List.list.Cons"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a))
###                                 ("\<^const>List.list.Cons"
###                                   ("_applC" ("_position" targetnode)
###                                     ("_position" a'))
###                                   ("_applC" ("_position" tl)
###                                     ("_position" ms))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>observable_move" ("_position" S) ("_position" f)
###       ("_position" ms) ("_position" s) ("_position" a) ("_position" ms')
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_edge) ("_position" a')))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Set.member" ("_position" a')
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_Ball" ("_position" m)
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" tl) ("_position" ms)))
###                     ("\<^const>HOL.Ex_binder" ("_position" m')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" call_of_return_node)
###                           ("_cargs" ("_position" m) ("_position" m')))
###                         ("\<^const>Set.member" ("_position" m')
###                           ("\<^const>local.SDG_to_CFG_set"
###                             ("_applC" ("_position" HRB_slice)
###                               ("_position" S))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" hd) ("_position" ms))
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S)))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" ms))
###                         ("_applC" ("_position" length) ("_position" s))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" s'))
###                           ("_applC" ("_position" Suc)
###                             ("_applC" ("_position" length)
###                               ("_position" s)))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq"
###                             ("_applC" ("_position" hd) ("_position" ms))
###                             ("_applC" ("_position" sourcenode)
###                               ("_position" a))))
###                         ("_asm"
###                           ("\<^const>HOL.Trueprop"
###                             ("\<^const>HOL.eq" ("_position" ms')
###                               ("\<^const>List.list.Cons"
###                                 ("_applC" ("_position" targetnode)
###                                   ("_position" a))
###                                 ("\<^const>List.list.Cons"
###                                   ("_applC" ("_position" targetnode)
###                                     ("_position" a'))
###                                   ("_applC" ("_position" tl)
###                                     ("_position" ms))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>observable_move" ("_position" S) ("_position" f)
###       ("_position" ms) ("_position" s) ("_position" a) ("_position" ms')
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 817 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_tuple" ("_position" None)
###       ("_tuple_args" ("_position" h)
###         ("_tuple_arg"
###           ("\<^const>List.list.Cons"
###             ("_tuple" ("_position" stk)
###               ("_tuple_args" ("_position" loc)
###                 ("_tuple_args" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_position" frs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 819 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###     ("_position" \<sigma>')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1185 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f'))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" m)
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" tl) ("_position" ms)))
###                 ("\<^const>HOL.Ex_binder" ("_position" m')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" call_of_return_node)
###                       ("_cargs" ("_position" m) ("_position" m')))
###                     ("\<^const>Set.member" ("_position" m')
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" ms))
###                   ("_applC" ("_position" length) ("_position" s))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" length) ("_position" s))
###                     ("_applC" ("_position" Suc)
###                       ("_applC" ("_position" length) ("_position" s')))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.not_equal" ("_position" s')
###                       ("\<^const>List.list.Nil")))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" hd) ("_position" ms))
###                         ("_applC" ("_position" sourcenode)
###                           ("_position" a))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" hd)
###                             ("_applC" ("_position" tl) ("_position" ms)))
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" ms')
###                             ("_applC" ("_position" tl)
###                               ("_position" ms)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>observable_move" ("_position" S) ("_position" f)
###       ("_position" ms) ("_position" s) ("_position" a) ("_position" ms')
###       ("_position" s'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" pred)
###         ("_cargs" ("_applC" ("_position" f) ("_position" a))
###           ("_position" s))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" transfer)
###             ("_cargs" ("_applC" ("_position" f) ("_position" a))
###               ("_position" s)))
###           ("_position" s')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_edge) ("_position" a)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f')))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_Ball" ("_position" m)
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" tl) ("_position" ms)))
###                 ("\<^const>HOL.Ex_binder" ("_position" m')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" call_of_return_node)
###                       ("_cargs" ("_position" m) ("_position" m')))
###                     ("\<^const>Set.member" ("_position" m')
###                       ("\<^const>local.SDG_to_CFG_set"
###                         ("_applC" ("_position" HRB_slice)
###                           ("_position" S))))))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" ms))
###                   ("_applC" ("_position" length) ("_position" s))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" length) ("_position" s))
###                     ("_applC" ("_position" Suc)
###                       ("_applC" ("_position" length) ("_position" s')))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.not_equal" ("_position" s')
###                       ("\<^const>List.list.Nil")))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" hd) ("_position" ms))
###                         ("_applC" ("_position" sourcenode)
###                           ("_position" a))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" hd)
###                             ("_applC" ("_position" tl) ("_position" ms)))
###                           ("_applC" ("_position" targetnode)
###                             ("_position" a))))
###                       ("_asm"
###                         ("\<^const>HOL.Trueprop"
###                           ("\<^const>HOL.eq" ("_position" ms')
###                             ("_applC" ("_position" tl)
###                               ("_position" ms)))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>observable_move" ("_position" S) ("_position" f)
###       ("_position" ms) ("_position" s) ("_position" a) ("_position" ms')
###       ("_position" s'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale start_context
  fixes
    P :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list"
    and mxs :: "nat"
    and mxl\<^sub>0 :: "nat"
    and n :: "nat"
    and Ts :: "ty list"
    and "is" :: "instr list"
    and xt :: "(nat * nat * char list * nat * nat) list"
    and T\<^sub>r :: "ty"
    and mxl :: "nat"
    and A :: "(ty list * ty err list) option err set"
    and
    r :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err => bool"
    and
    f :: "(ty list * ty err list) option err
          => (ty list * ty err list) option err
             => (ty list * ty err list) option err"
    and app :: "nat => (ty list * ty err list) option => bool"
    and
    eff ::
      "nat
       => (ty list * ty err list) option
          => (nat * (ty list * ty err list) option) list"
    and
    step ::
      "nat
       => (ty list * ty err list) option err
          => (nat * (ty list * ty err list) option err) list"
    and
    p :: "(char list *
           char list *
           (char list * ty) list *
           (char list *
            ty list *
            ty *
            nat *
            nat *
            instr list *
            (nat * nat * char list * nat * nat) list) list) list
          => char list
             => char list *
                ty list *
                ty *
                nat *
                nat * instr list * (nat * nat * char list * nat * nat) list
                => bool"
    and C :: "char list"
    and first :: "(ty list * ty err list) option"
    and start :: "(ty list * ty err list) option err list"
  assumes "start_context P Ts p C"
  defines "mxl == 1 + length Ts + mxl\<^sub>0"
    and "A == states P mxs mxl"
    and "r == JVM_SemiType.le P mxs mxl"
    and "f == JVM_SemiType.sup P mxs mxl"
    and "app == %pc. app (is ! pc) P mxs T\<^sub>r pc (length is) xt"
    and "eff == %pc. eff (is ! pc) P pc xt"
    and "step == err_step (length is) app eff"
    and "n == length is"
    and
    "first ==
     \<lfloor>([],
               OK (Class C) #
               map OK Ts @ replicate mxl\<^sub>0 Err)\<rfloor>"
    and "start == OK first # replicate (length is - 1) (OK None)"
Proofs for inductive predicate(s) "observable_move"
### Ambiguous input (line 865 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" Goto) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 881 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_applC" ("_position" IfFalse) ("_position" branch))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 896 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" CmpEq)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.BVExec"
### 0.495s elapsed time, 1.509s cpu time, 0.158s GC time
### Ambiguous input (line 911 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Pop)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "observable_moves"
### Ambiguous input (line 927 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>Conform.oconf" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" IAdd)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVSpec.wt_instr" ("_position" P) ("_position" T)
###               ("_position" mxs)
###               ("_applC" ("_position" size) ("_position" ins))
###               ("_position" xt)
###               ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###               ("_position" pc)
###               ("_applC" ("_position" \<Phi>)
###                 ("_cargs" ("_position" C) ("_position" M)))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" Some) ("_position" \<sigma>'))
###                 ("_applC" ("_position" exec)
###                   ("_tuple" ("_position" P)
###                     ("_tuple_args" ("_position" None)
###                       ("_tuple_args" ("_position" h)
###                         ("_tuple_arg"
###                           ("\<^const>List.list.Cons"
###                             ("_tuple" ("_position" stk)
###                               ("_tuple_args" ("_position" loc)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_args" ("_position" M)
###                                     ("_tuple_arg" ("_position" pc))))))
###                             ("_position" frs)))))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>BVConform.correct_state" ("_position" P)
###                   ("_position" \<Phi>)
###                   ("_tuple" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 943 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BVConform.correct_state" ("_position" P)
###                 ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" wf_prog)
###         ("_cargs" ("_position" wt) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth" ("_position" ins) ("_position" pc))
###             ("_position" Throw)))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" Some) ("_position" \<sigma>'))
###               ("_applC" ("_position" exec)
###                 ("_tuple" ("_position" P)
###                   ("_tuple_args" ("_position" None)
###                     ("_tuple_args" ("_position" h)
###                       ("_tuple_arg"
###                         ("\<^const>List.list.Cons"
###                           ("_tuple" ("_position" stk)
###                             ("_tuple_args" ("_position" loc)
###                               ("_tuple_args" ("_position" C)
###                                 ("_tuple_args" ("_position" M)
###                                   ("_tuple_arg" ("_position" pc))))))
###                           ("_position" frs)))))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BVConform.correct_state" ("_position" P)
###                 ("_position" \<Phi>)
###                 ("_tuple" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" exec_instr)
###                       ("_cargs"
###                         ("\<^const>List.nth" ("_position" ins)
###                           ("_position" pc))
###                         ("_cargs" ("_position" P)
###                           ("_cargs" ("_position" h)
###                             ("_cargs" ("_position" stk)
###                               ("_cargs" ("_position" loc)
###                                 ("_cargs" ("_position" C)
###                                   ("_cargs" ("_position" M)
###                                     ("_cargs" ("_position" pc)
### ("_position" frs)))))))))))
###                   ("_position" None)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 961 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVConform.correct_state" ("_position" P)
###               ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("_position" Ts) ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" C)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" Some) ("_position" \<sigma>'))
###             ("_applC" ("_position" exec)
###               ("_tuple" ("_position" P)
###                 ("_tuple_args" ("_position" None)
###                   ("_tuple_args" ("_position" h)
###                     ("_tuple_arg"
###                       ("\<^const>List.list.Cons"
###                         ("_tuple" ("_position" stk)
###                           ("_tuple_args" ("_position" loc)
###                             ("_tuple_args" ("_position" C)
###                               ("_tuple_args" ("_position" M)
###                                 ("_tuple_arg" ("_position" pc))))))
###                         ("_position" frs)))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BVConform.correct_state" ("_position" P)
###               ("_position" \<Phi>)
###               ("_tuple" ("_position" None)
###                 ("_tuple_args" ("_position" h)
###                   ("_tuple_arg"
###                     ("\<^const>List.list.Cons"
###                       ("_tuple" ("_position" stk)
###                         ("_tuple_args" ("_position" loc)
###                           ("_tuple_args" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))))
###                       ("_position" frs)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 999 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_arg" ("_position" pc))))))
###               ("_position" frs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" m) ("_idts" ("_position" Ts) ("_position" T)))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" Ts) ("_position" T) ("_position" m)
###         ("_position" C)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_tuple" ("_position" None)
###         ("_tuple_args" ("_position" h)
###           ("_tuple_arg"
###             ("\<^const>List.list.Cons"
###               ("_tuple" ("_position" stk)
###                 ("_tuple_args" ("_position" loc)
###                   ("_tuple_args" ("_position" C)
###                     ("_tuple_args" ("_position" M)
###                       ("_tuple_arg" ("_position" pc))))))
###               ("_position" frs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" m) ("_idts" ("_position" Ts) ("_position" T)))
###       ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###         ("_position" M) ("_position" Ts) ("_position" T) ("_position" m)
###         ("_position" C)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1004 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###             ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("\<^const>Pure.all_binder" ("_position" \<sigma>)
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###           ("_position" P)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BVConform.correct_state" ("_position" P)
###             ("_position" \<Phi>) ("_position" \<sigma>)))))
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.implies"
###         ("\<^const>JVMExec.exec_1'" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1031 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>) ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BVConform.correct_state" ("_position" P)
###           ("_position" \<Phi>)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" xp) ("_position" None)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" frs)
###               ("\<^const>List.list.Nil")))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" \<sigma>')
###       ("\<^const>HOL.conj"
###         ("\<^const>JVMExec.exec_1'" ("_position" P)
###           ("_tuple" ("_position" xp)
###             ("_tuple_args" ("_position" h)
###               ("_tuple_arg" ("_position" frs))))
###           ("_position" \<sigma>'))
###         ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###           ("_position" \<sigma>'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1041 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>BVConform.correct_state" ("_position" P)
###         ("_position" \<Phi>) ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>JVMExec.exec_all" ("_position" P) ("_position" \<sigma>)
###           ("_position" \<sigma>')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.implies"
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>))
###       ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###         ("_position" \<sigma>')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1340 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" parent_node) ("_position" n''))
###                   ("\<^const>local.notin_SDG_Def"
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as)))
###                       ("_position" V))
###                     ("_position" n''))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("\<^const>local.notin_SDG_Def"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" parent_node) ("_position" n''))
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as))))
###                     ("_position" V))
###                   ("_position" n'')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>local.notin_SDG_Def"
###               ("\<^const>HOL.All_binder" ("_position" n'')
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" valid_SDG_node)
###                       ("_position" n''))
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" parent_node) ("_position" n''))
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as)))))
###                   ("_position" V)))
###               ("_position" n'')))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>local.notin_SDG_Def"
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" valid_SDG_node)
###                       ("_position" n''))
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" parent_node) ("_position" n''))
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as)))))
###                   ("_position" V))
###                 ("_position" n''))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("_applC" ("_position" valid_SDG_node)
###                 ("\<^const>local.notin_SDG_Def"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>HOL.conj" ("_position" n'')
###                       ("\<^const>Set.member"
###                         ("_applC" ("_position" parent_node)
###                           ("_position" n''))
###                         ("_applC" ("_position" set)
###                           ("_applC" ("_position" sourcenodes)
###                             ("_position" as)))))
###                     ("_position" V))
###                   ("_position" n'')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("_applC" ("_position" parent_node)
###                   ("\<^const>local.notin_SDG_Def"
###                     ("\<^const>HOL.implies"
###                       ("\<^const>Set.member" ("_position" n'')
###                         ("_applC" ("_position" set)
###                           ("_applC" ("_position" sourcenodes)
###                             ("_position" as))))
###                       ("_position" V))
###                     ("_position" n''))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" parent_node) ("_position" n''))
###                   ("_applC" ("_position" set)
###                     ("\<^const>local.notin_SDG_Def"
###                       ("\<^const>HOL.implies"
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as))
###                         ("_position" V))
###                       ("_position" n'')))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.implies"
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                   ("\<^const>Set.member"
###                     ("_applC" ("_position" parent_node) ("_position" n''))
###                     ("_applC" ("_position" set)
###                       ("_applC" ("_position" sourcenodes)
###                         ("_position" as)))))
###                 ("\<^const>local.notin_SDG_Def" ("_position" V)
###                   ("_position" n'')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("_applC" ("\<^fixed>relevant_vars" ("_position" S))
###         ("_position" n)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("\<^const>Set.member"
###                   ("_applC" ("_position" parent_node) ("_position" n''))
###                   ("\<^const>local.notin_SDG_Def"
###                     ("\<^const>HOL.implies"
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as)))
###                       ("_position" V))
###                     ("_position" n''))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("\<^fixed>relevant_vars"
###         ("_applC" ("_position" S) ("_position" n))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.intra_path"
###         ("_applC" ("_position" parent_node) ("_position" n))
###         ("_position" as)
###         ("_applC" ("_position" parent_node) ("_position" n'))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" n')
###           ("_applC" ("_position" HRB_slice) ("_position" S))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>local.SDG_Use" ("_position" V) ("_position" n')))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.All_binder" ("_position" n'')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###                 ("\<^const>local.notin_SDG_Def"
###                   ("\<^const>HOL.implies"
###                     ("\<^const>Set.member"
###                       ("_applC" ("_position" parent_node) ("_position" n''))
###                       ("_applC" ("_position" set)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" as))))
###                     ("_position" V))
###                   ("_position" n'')))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" V)
###       ("\<^fixed>relevant_vars"
###         ("_applC" ("_position" S) ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "relevant_varsp"
### Ambiguous input (line 1066 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("\<^const>List.list.Nil") ("_position" T)
###           ("_position" m) ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("\<^const>BVSpec.wf_jvm_prog_phi" ("_position" \<Phi>))
###         ("_position" P)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method" ("_position" P) ("_position" C)
###           ("_position" M) ("\<^const>List.list.Nil") ("_position" T)
###           ("_position" m) ("_position" C)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 1086 of "$AFP/Jinja/BV/BVSpecTypeSafe.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all" ("_position" P)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BVConform.correct_state" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>JVMExec.exec_all" ("_position" P)
###       ("_applC" ("_position" start_state)
###         ("_cargs" ("_position" P)
###           ("_cargs" ("_position" C) ("_position" M))))
###       ("_position" \<sigma>)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Conform.oconf" ("_position" P) ("_position" \<Phi>)
###       ("_position" \<sigma>))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Jinja.BVSpecTypeSafe"
### 0.796s elapsed time, 2.231s cpu time, 0.244s GC time
Loading theory "Jinja.BVExample" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation" via "Draft.JVMCFG")
### Ambiguous input (line 1347 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1350 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###         ("\<^const>Set.member"
###           ("_applC" ("_position" parent_node) ("_position" n''))
###           ("_applC" ("_position" set)
###             ("_applC" ("_position" sourcenodes) ("_position" as)))))
###       ("\<^const>local.notin_SDG_Def" ("_position" V) ("_position" n'')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###       ("\<^const>Set.member"
###         ("_applC" ("_position" parent_node) ("_position" n''))
###         ("_applC" ("_position" set)
###           ("\<^const>local.notin_SDG_Def"
###             ("\<^const>HOL.implies"
###               ("_applC" ("_position" sourcenodes) ("_position" as))
###               ("_position" V))
###             ("_position" n'')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###       ("_applC" ("_position" parent_node)
###         ("\<^const>local.notin_SDG_Def"
###           ("\<^const>HOL.implies"
###             ("\<^const>Set.member" ("_position" n'')
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as))))
###             ("_position" V))
###           ("_position" n''))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("_applC" ("_position" valid_SDG_node)
###       ("\<^const>local.notin_SDG_Def"
###         ("\<^const>HOL.implies"
###           ("\<^const>HOL.conj" ("_position" n'')
###             ("\<^const>Set.member"
###               ("_applC" ("_position" parent_node) ("_position" n''))
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" sourcenodes) ("_position" as)))))
###           ("_position" V))
###         ("_position" n'')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("\<^const>local.notin_SDG_Def"
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###           ("\<^const>Set.member"
###             ("_applC" ("_position" parent_node) ("_position" n''))
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))
###         ("_position" V))
###       ("_position" n''))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.notin_SDG_Def"
###     ("\<^const>HOL.All_binder" ("_position" n'')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###           ("\<^const>Set.member"
###             ("_applC" ("_position" parent_node) ("_position" n''))
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))))
###         ("_position" V)))
###     ("_position" n'')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###       ("\<^const>local.notin_SDG_Def"
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("_applC" ("_position" parent_node) ("_position" n''))
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as))))
###           ("_position" V))
###         ("_position" n'')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder" ("_position" n'')
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" valid_SDG_node) ("_position" n''))
###       ("\<^const>Set.member"
###         ("_applC" ("_position" parent_node) ("_position" n''))
###         ("\<^const>local.notin_SDG_Def"
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" set)
###               ("_applC" ("_position" sourcenodes) ("_position" as)))
###             ("_position" V))
###           ("_position" n''))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1357 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 7 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>local.relevant_vars"
###         ("\<^const>HOL.eq"
###           ("_applC"
###             ("_constrain" ("_position" S)
###               ("_tapp"
###                 ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###                 ("_type_name" set)))
###             ("_position" n))
###           ("\<^const>local.relevant_vars" ("_position" S))))
###       ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.relevant_vars"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("_constrain" ("_position" S)
###             ("_tapp"
###               ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###               ("_type_name" set)))
###           ("_position" n))
###         ("\<^const>local.relevant_vars"
###           ("_applC" ("_position" S) ("_position" n')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>local.relevant_vars"
###         ("_applC"
###           ("_constrain" ("_position" S)
###             ("_tapp"
###               ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###               ("_type_name" set)))
###           ("_position" n)))
###       ("\<^const>local.relevant_vars"
###         ("_applC" ("_position" S) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC"
###         ("\<^const>local.relevant_vars"
###           ("_constrain" ("_position" S)
###             ("_tapp"
###               ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###               ("_type_name" set))))
###         ("_position" n))
###       ("\<^const>local.relevant_vars"
###         ("_applC" ("_position" S) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.relevant_vars"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("_constrain" ("_position" S)
###             ("_tapp"
###               ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###               ("_type_name" set)))
###           ("_position" n))
###         ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>local.relevant_vars"
###         ("_applC"
###           ("_constrain" ("_position" S)
###             ("_tapp"
###               ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###               ("_type_name" set)))
###           ("_position" n)))
###       ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###         ("_position" n')))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" parent_node) ("_position" n))
###       ("_applC" ("_position" parent_node) ("_position" n'))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC"
###         ("\<^const>local.relevant_vars"
###           ("_constrain" ("_position" S)
###             ("_tapp"
###               ("_tapp" ("_position_sort" 'node) ("_type_name" SDG_node))
###               ("_type_name" set))))
###         ("_position" n))
###       ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###         ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1362 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m)))
###       ("\<^const>Set.empty"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m))))
###     ("\<^const>Set.empty")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("_position" m)))
###     ("\<^const>Set.empty")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1380 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1380 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" x)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1532 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>local.relevant_vars"
###       ("\<^const>HOL.eq" ("_applC" ("_position" S) ("_position" n))
###         ("\<^const>local.relevant_vars" ("_position" S))))
###     ("_position" n')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq" ("_applC" ("_position" S) ("_position" n))
###       ("\<^const>local.relevant_vars"
###         ("_applC" ("_position" S) ("_position" n'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq" ("_applC" ("_position" S) ("_position" n))
###       ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###         ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S) ("_position" n)))
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n))
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1552 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>local.relevant_vars"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" S)
###           ("_applC" ("_position" CFG_node) ("_position" m)))
###         ("\<^const>local.relevant_vars" ("_position" S))))
###     ("_applC" ("_position" CFG_node) ("_position" m'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m)))
###       ("\<^const>local.relevant_vars"
###         ("_applC" ("_position" S)
###           ("_applC" ("_position" CFG_node) ("_position" m')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m))))
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("_position" m)))
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.relevant_vars"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m)))
###       ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###         ("_applC" ("_position" CFG_node) ("_position" m'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node) ("_position" m))))
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("_position" m')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("_position" m)))
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node) ("_position" m')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1577 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node)
###         ("_applC" ("_position" sourcenode) ("_position" a))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node)
###           ("_applC" ("_position" sourcenode) ("_position" a)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1645 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node)
###         ("_applC" ("_position" sourcenode) ("_position" a))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node)
###           ("_applC" ("_position" sourcenode) ("_position" a)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s) ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs" ("_position" s') ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1647 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("_applC" ("\<^const>local.relevant_vars" ("_position" S))
###       ("_applC" ("_position" CFG_node)
###         ("_applC" ("_position" targetnode) ("_position" a))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s)))
###           ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s')))
###           ("_position" V))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" V)
###     ("\<^const>local.relevant_vars"
###       ("_applC" ("_position" S)
###         ("_applC" ("_position" CFG_node)
###           ("_applC" ("_position" targetnode) ("_position" a)))))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s)))
###           ("_position" V)))
###       ("_applC" ("_position" state_val)
###         ("_cargs"
###           ("_applC" ("_position" transfer)
###             ("_cargs"
###               ("_applC" ("_position" slice_kind)
###                 ("_cargs" ("_position" S) ("_position" a)))
###               ("_position" s')))
###           ("_position" V))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1796 of "$AFP/HRB-Slicing/StaticInter/WeakSimulation.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" m) ("_applC" ("_position" set) ("_position" ms))
###         ("_applC" ("_position" valid_node) ("_position" m))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" m')
###           ("_applC" ("_position" set) ("_position" ms'))
###           ("_applC" ("_position" valid_node) ("_position" m'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" length) ("_position" ms))
###             ("_applC" ("_position" length) ("_position" s))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" length) ("_position" ms'))
###               ("_applC" ("_position" length) ("_position" s'))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" s)
###                 ("\<^const>List.list.Nil")))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" s')
###                   ("\<^const>List.list.Nil")))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" ms)
###                     ("\<^const>List.append" ("_position" msx)
###                       ("\<^const>List.list.Cons" ("_position" mx)
###                         ("_applC" ("_position" tl) ("_position" ms'))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" get_proc) ("_position" mx))
###                       ("_applC" ("_position" get_proc)
###                         ("_applC" ("_position" hd) ("_position" ms')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_Ball" ("_position" m)
###                         ("_applC" ("_position" set)
###                           ("_applC" ("_position" tl) ("_position" ms')))
###                         ("\<^const>HOL.Ex_binder" ("_position" m')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" call_of_return_node)
###                               ("_cargs" ("_position" m) ("_position" m')))
###                             ("\<^const>Set.member" ("_position" m')
###                               ("\<^const>local.SDG_to_CFG_set"
###                                 ("_applC" ("_position" HRB_slice)
###                                   ("_position" S))))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" msx)
###                             ("\<^const>List.list.Nil"))
###                           ("\<^const>HOL.Ex_binder" ("_position" mx')
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" call_of_return_node)
###                                 ("_cargs" ("_position" mx)
###                                   ("_position" mx')))
###                               ("\<^const>Set.not_member" ("_position" mx')
###                                 ("\<^const>local.SDG_to_CFG_set"
###                                   ("_applC" ("_position" HRB_slice)
###                                     ("_position" S))))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("_All_less" ("_position" i)
###                             ("_applC" ("_position" length)
###                               ("_position" ms'))
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" snd)
###                                 ("\<^const>List.nth" ("_position" s)
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" length)
### ("_position" msx))
###                                     ("_position" i))))
###                               ("_applC" ("_position" snd)
###                                 ("\<^const>List.nth" ("_position" s')
###                                   ("_position" i))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("_Ball" ("_position" m)
###                               ("_applC" ("_position" set)
###                                 ("_applC" ("_position" tl)
###                                   ("_position" ms)))
###                               ("_applC" ("_position" return_node)
###                                 ("_position" m))))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("_All_less" ("_position" i)
###                                 ("_applC" ("_position" length)
###                                   ("_position" ms'))
###                                 ("_Ball" ("_position" V)
###                                   ("\<^const>local.relevant_vars"
###                                     ("_applC" ("_position" S)
### ("_applC" ("_position" CFG_node)
###   ("\<^const>List.nth"
###     ("\<^const>List.list.Cons" ("_position" mx)
###       ("_applC" ("_position" tl) ("_position" ms')))
###     ("_position" i)))))
###                                   ("\<^const>HOL.eq"
###                                     ("_applC"
### ("_applC" ("_position" fst)
###   ("\<^const>List.nth" ("_position" s)
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" length) ("_position" msx)) ("_position" i))))
### ("_position" V))
###                                     ("_applC"
### ("_applC" ("_position" fst)
###   ("\<^const>List.nth" ("_position" s') ("_position" i)))
### ("_position" V))))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" obs)
###                                     ("_cargs" ("_position" ms)
### ("\<^const>local.SDG_to_CFG_set"
###   ("_applC" ("_position" HRB_slice) ("_position" S)))))
###                                   ("_applC" ("_position" obs)
###                                     ("_cargs" ("_position" ms')
### ("\<^const>local.SDG_to_CFG_set"
###   ("_applC" ("_position" HRB_slice) ("_position" S)))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_tuple" ("_position" ms) ("_tuple_arg" ("_position" s)))
###         ("_tuple_arg"
###           ("_tuple" ("_position" ms') ("_tuple_arg" ("_position" s')))))
###       ("_applC" ("_position" WS) ("_position" S)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_Ball" ("_position" m) ("_applC" ("_position" set) ("_position" ms))
###         ("_applC" ("_position" valid_node) ("_position" m))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" m')
###           ("_applC" ("_position" set) ("_position" ms'))
###           ("_applC" ("_position" valid_node) ("_position" m'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" length) ("_position" ms))
###             ("_applC" ("_position" length) ("_position" s))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" length) ("_position" ms'))
###               ("_applC" ("_position" length) ("_position" s'))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.not_equal" ("_position" s)
###                 ("\<^const>List.list.Nil")))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.not_equal" ("_position" s')
###                   ("\<^const>List.list.Nil")))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" ms)
###                     ("\<^const>List.append" ("_position" msx)
###                       ("\<^const>List.list.Cons" ("_position" mx)
###                         ("_applC" ("_position" tl) ("_position" ms'))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" get_proc) ("_position" mx))
###                       ("_applC" ("_position" get_proc)
###                         ("_applC" ("_position" hd) ("_position" ms')))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("_Ball" ("_position" m)
###                         ("_applC" ("_position" set)
###                           ("_applC" ("_position" tl) ("_position" ms')))
###                         ("\<^const>HOL.Ex_binder" ("_position" m')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" call_of_return_node)
###                               ("_cargs" ("_position" m) ("_position" m')))
###                             ("\<^const>Set.member" ("_position" m')
###                               ("\<^const>local.SDG_to_CFG_set"
###                                 ("_applC" ("_position" HRB_slice)
###                                   ("_position" S))))))))
###                     ("_asms"
###                       ("\<^const>HOL.Trueprop"
###                         ("\<^const>HOL.implies"
###                           ("\<^const>HOL.not_equal" ("_position" msx)
###                             ("\<^const>List.list.Nil"))
###                           ("\<^const>HOL.Ex_binder" ("_position" mx')
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" call_of_return_node)
###                                 ("_cargs" ("_position" mx)
###                                   ("_position" mx')))
###                               ("\<^const>Set.not_member" ("_position" mx')
###                                 ("\<^const>local.SDG_to_CFG_set"
###                                   ("_applC" ("_position" HRB_slice)
###                                     ("_position" S))))))))
###                       ("_asms"
###                         ("\<^const>HOL.Trueprop"
###                           ("_All_less" ("_position" i)
###                             ("_applC" ("_position" length)
###                               ("_position" ms'))
###                             ("\<^const>HOL.eq"
###                               ("_applC" ("_position" snd)
###                                 ("\<^const>List.nth" ("_position" s)
###                                   ("\<^const>Groups.plus_class.plus"
###                                     ("_applC" ("_position" length)
### ("_position" msx))
###                                     ("_position" i))))
###                               ("_applC" ("_position" snd)
###                                 ("\<^const>List.nth" ("_position" s')
###                                   ("_position" i))))))
###                         ("_asms"
###                           ("\<^const>HOL.Trueprop"
###                             ("_Ball" ("_position" m)
###                               ("_applC" ("_position" set)
###                                 ("_applC" ("_position" tl)
###                                   ("_position" ms)))
###                               ("_applC" ("_position" return_node)
###                                 ("_position" m))))
###                           ("_asms"
###                             ("\<^const>HOL.Trueprop"
###                               ("_All_less" ("_position" i)
###                                 ("_applC" ("_position" length)
###                                   ("_position" ms'))
###                                 ("_Ball" ("_position" V)
###                                   ("_applC"
###                                     ("\<^const>local.relevant_vars"
### ("_position" S))
###                                     ("_applC" ("_position" CFG_node)
### ("\<^const>List.nth"
###   ("\<^const>List.list.Cons" ("_position" mx)
###     ("_applC" ("_position" tl) ("_position" ms')))
###   ("_position" i))))
###                                   ("\<^const>HOL.eq"
###                                     ("_applC"
### ("_applC" ("_position" fst)
###   ("\<^const>List.nth" ("_position" s)
###     ("\<^const>Groups.plus_class.plus"
###       ("_applC" ("_position" length) ("_position" msx)) ("_position" i))))
### ("_position" V))
###                                     ("_applC"
### ("_applC" ("_position" fst)
###   ("\<^const>List.nth" ("_position" s') ("_position" i)))
### ("_position" V))))))
###                             ("_asm"
###                               ("\<^const>HOL.Trueprop"
###                                 ("\<^const>HOL.eq"
###                                   ("_applC" ("_position" obs)
###                                     ("_cargs" ("_position" ms)
### ("\<^const>local.SDG_to_CFG_set"
###   ("_applC" ("_position" HRB_slice) ("_position" S)))))
###                                   ("_applC" ("_position" obs)
###                                     ("_cargs" ("_position" ms')
### ("\<^const>local.SDG_to_CFG_set"
###   ("_applC" ("_position" HRB_slice) ("_position" S)))))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple" ("_tuple" ("_position" ms) ("_tuple_arg" ("_position" s)))
###         ("_tuple_arg"
###           ("_tuple" ("_position" ms') ("_tuple_arg" ("_position" s')))))
###       ("_applC" ("_position" WS) ("_position" S)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "WSp"
  Proving monotonicity ...
### Ignoring duplicate rewrite rule:
### eff ?i1 ?P1 ?pc1 ?et1 ?t1 ==
### case ?t1 of None => []
### | \<lfloor>\<tau>\<rfloor> =>
###     norm_eff ?i1 ?P1 ?pc1 \<tau> @ xcpt_eff ?i1 ?P1 ?pc1 \<tau> ?et1
### Ignoring duplicate rewrite rule:
### norm_eff ?i1 ?P1 ?pc1 ?\<tau>1 ==
### map (%pc'. (pc', \<lfloor>eff\<^sub>i (?i1, ?P1, ?\<tau>1)\<rfloor>))
###  (succs ?i1 ?\<tau>1 ?pc1)
### Ambiguous input (line 458 of "$AFP/Jinja/BV/BVExample.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BVConform.correct_state" ("_position" E)
###     ("\<^const>BVExample.Phi")
###     ("_applC" ("_position" start_state)
###       ("_cargs" ("_position" E)
###         ("_cargs" ("_position" test_name) ("_position" makelist_name))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Conform.oconf" ("_position" E) ("\<^const>BVExample.Phi")
###     ("_applC" ("_position" start_state)
###       ("_cargs" ("_position" E)
###         ("_cargs" ("_position" test_name) ("_position" makelist_name))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Code generator: dropping subsumed code equation
### app\<^sub>i (Getfield ?F ?C, ?P, ?pc, ?mxs, ?T\<^sub>r, ?T # ?ST, ?LT) ==
### EX T\<^sub>f.
###    ?P \<turnstile> ?C sees ?F:T\<^sub>f in ?C & subtype ?P ?T (Class ?C)
### theory "Draft.WeakSimulation"
### 2.073s elapsed time, 5.376s cpu time, 0.519s GC time
Loading theory "Draft.FundamentalProperty" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing")
### Code generator: dropping subsumed code equation
### app\<^sub>i
###  (Putfield ?F ?C, ?P, ?pc, ?mxs, ?T\<^sub>r, ?T\<^sub>1 # ?T\<^sub>2 # ?ST,
###   ?LT) ==
### EX T\<^sub>f.
###    ?P \<turnstile> ?C sees ?F:T\<^sub>f in ?C &
###    subtype ?P ?T\<^sub>2 (Class ?C) & subtype ?P ?T\<^sub>1 T\<^sub>f
### Code generator: dropping subsumed code equation
### app\<^sub>i (Invoke ?M ?n, ?P, ?pc, ?mxs, ?T\<^sub>r, ?ST, ?LT) ==
### ?n < length ?ST &
### (?ST ! ?n ~= NT -->
###  (EX C D Ts T m.
###      ?ST ! ?n = Class C &
###      ?P \<turnstile> C sees ?M: Ts\<rightarrow>T = m in D &
###      ?P \<turnstile> rev (take ?n ?ST) [\<le>] Ts))
### Code generator: dropping subsumed code equation
### SemiType.sup ?P ?T\<^sub>1 ?T\<^sub>2 ==
### if is_refT ?T\<^sub>1 & is_refT ?T\<^sub>2
### then OK (if ?T\<^sub>1 = NT then ?T\<^sub>2
###          else if ?T\<^sub>2 = NT then ?T\<^sub>1
###               else Class
###                     (while (%z. (the_Class ?T\<^sub>1, z) ~: (subcls1 ?P)^*)
###                       (super ?P) (the_Class ?T\<^sub>2)))
### else if ?T\<^sub>1 = ?T\<^sub>2 then OK ?T\<^sub>1 else Err
### theory "Jinja.BVExample"
### 0.647s elapsed time, 1.372s cpu time, 0.185s GC time
Loading theory "Draft.JVMCFG" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf" via "Draft.JVMInterpretation")
locale SDG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
  assumes
    "SDG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_) Def Use ParamDefs ParamUses"
### Ambiguous input (line 463 of "$AFP/HRB-Slicing/StaticInter/FundamentalProperty.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.silent_moves" ("_position" S) ("_position" f)
###         ("\<^const>List.list.Cons" ("_position" m)
###           ("\<^const>List.append" ("_position" ms'') ("_position" ms)))
###         ("_position" s) ("_position" as)
###         ("\<^const>List.list.Cons" ("_position" m') ("_position" ms'))
###         ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_node) ("_position" m)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" m))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_All_less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" rs))
###               ("\<^const>Set.member"
###                 ("\<^const>List.nth" ("_position" rs) ("_position" i))
###                 ("_applC" ("_position" get_return_edges)
###                   ("\<^const>List.nth" ("_position" cs) ("_position" i))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_return_list)
###                 ("_cargs" ("_position" rs) ("_position" m))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" rs))
###                   ("_applC" ("_position" length) ("_position" cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" ms'')
###                     ("_applC" ("_position" targetnodes) ("_position" rs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Ball" ("_position" mx)
###                       ("_applC" ("_position" set) ("_position" ms))
###                       ("\<^const>HOL.Ex_binder" ("_position" mx')
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" call_of_return_node)
###                             ("_cargs" ("_position" mx) ("_position" mx')))
###                           ("\<^const>Set.member" ("_position" mx')
###                             ("\<^const>local.SDG_to_CFG_set"
###                               ("_applC" ("_position" HRB_slice)
###                                 ("_position" S))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" ms'')
###                           ("\<^const>List.list.Nil"))
###                         ("\<^const>HOL.Ex_binder" ("_position" mx')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" call_of_return_node)
###                               ("_cargs"
###                                 ("_applC" ("_position" last)
###                                   ("_position" ms''))
###                                 ("_position" mx')))
###                             ("\<^const>Set.not_member" ("_position" mx')
###                               ("\<^const>local.SDG_to_CFG_set"
###                                 ("_applC" ("_position" HRB_slice)
###                                   ("_position" S))))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("_Ball" ("_position" mx)
###                           ("_applC" ("_position" set) ("_position" ms'))
###                           ("\<^const>HOL.Ex_binder" ("_position" mx')
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" call_of_return_node)
###                                 ("_cargs" ("_position" mx)
###                                   ("_position" mx')))
###                               ("\<^const>Set.member" ("_position" mx')
###                                 ("\<^const>local.SDG_to_CFG_set"
###                                   ("_applC" ("_position" HRB_slice)
###                                     ("_position" S))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil"))
###         ("\<^const>HOL.eq"
###           ("\<^const>local.path" ("_position" m) ("_position" as)
###             ("\<^const>HOL.conj" ("_position" m') ("_position" ms)))
###           ("_position" ms'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.silent_moves" ("_position" S) ("_position" f)
###         ("\<^const>List.list.Cons" ("_position" m)
###           ("\<^const>List.append" ("_position" ms'') ("_position" ms)))
###         ("_position" s) ("_position" as)
###         ("\<^const>List.list.Cons" ("_position" m') ("_position" ms'))
###         ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_node) ("_position" m)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" m))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_All_less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" rs))
###               ("\<^const>Set.member"
###                 ("\<^const>List.nth" ("_position" rs) ("_position" i))
###                 ("_applC" ("_position" get_return_edges)
###                   ("\<^const>List.nth" ("_position" cs) ("_position" i))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_return_list)
###                 ("_cargs" ("_position" rs) ("_position" m))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" rs))
###                   ("_applC" ("_position" length) ("_position" cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" ms'')
###                     ("_applC" ("_position" targetnodes) ("_position" rs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Ball" ("_position" mx)
###                       ("_applC" ("_position" set) ("_position" ms))
###                       ("\<^const>HOL.Ex_binder" ("_position" mx')
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" call_of_return_node)
###                             ("_cargs" ("_position" mx) ("_position" mx')))
###                           ("\<^const>Set.member" ("_position" mx')
###                             ("\<^const>local.SDG_to_CFG_set"
###                               ("_applC" ("_position" HRB_slice)
###                                 ("_position" S))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" ms'')
###                           ("\<^const>List.list.Nil"))
###                         ("\<^const>HOL.Ex_binder" ("_position" mx')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" call_of_return_node)
###                               ("_cargs"
###                                 ("_applC" ("_position" last)
###                                   ("_position" ms''))
###                                 ("_position" mx')))
###                             ("\<^const>Set.not_member" ("_position" mx')
###                               ("\<^const>local.SDG_to_CFG_set"
###                                 ("_applC" ("_position" HRB_slice)
###                                   ("_position" S))))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("_Ball" ("_position" mx)
###                           ("_applC" ("_position" set) ("_position" ms'))
###                           ("\<^const>HOL.Ex_binder" ("_position" mx')
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" call_of_return_node)
###                                 ("_cargs" ("_position" mx)
###                                   ("_position" mx')))
###                               ("\<^const>Set.member" ("_position" mx')
###                                 ("\<^const>local.SDG_to_CFG_set"
###                                   ("_applC" ("_position" HRB_slice)
###                                     ("_position" S))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil"))
###         ("\<^const>local.path" ("_position" m) ("_position" as)
###           ("\<^const>HOL.conj" ("_position" m')
###             ("\<^const>HOL.eq" ("_position" ms) ("_position" ms'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.silent_moves" ("_position" S) ("_position" f)
###         ("\<^const>List.list.Cons" ("_position" m)
###           ("\<^const>List.append" ("_position" ms'') ("_position" ms)))
###         ("_position" s) ("_position" as)
###         ("\<^const>List.list.Cons" ("_position" m') ("_position" ms'))
###         ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_node) ("_position" m)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" m))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_All_less" ("_position" i)
###               ("_applC" ("_position" length) ("_position" rs))
###               ("\<^const>Set.member"
###                 ("\<^const>List.nth" ("_position" rs) ("_position" i))
###                 ("_applC" ("_position" get_return_edges)
###                   ("\<^const>List.nth" ("_position" cs) ("_position" i))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" valid_return_list)
###                 ("_cargs" ("_position" rs) ("_position" m))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" rs))
###                   ("_applC" ("_position" length) ("_position" cs))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" ms'')
###                     ("_applC" ("_position" targetnodes) ("_position" rs))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("_Ball" ("_position" mx)
###                       ("_applC" ("_position" set) ("_position" ms))
###                       ("\<^const>HOL.Ex_binder" ("_position" mx')
###                         ("\<^const>HOL.conj"
###                           ("_applC" ("_position" call_of_return_node)
###                             ("_cargs" ("_position" mx) ("_position" mx')))
###                           ("\<^const>Set.member" ("_position" mx')
###                             ("\<^const>local.SDG_to_CFG_set"
###                               ("_applC" ("_position" HRB_slice)
###                                 ("_position" S))))))))
###                   ("_asms"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.implies"
###                         ("\<^const>HOL.not_equal" ("_position" ms'')
###                           ("\<^const>List.list.Nil"))
###                         ("\<^const>HOL.Ex_binder" ("_position" mx')
###                           ("\<^const>HOL.conj"
###                             ("_applC" ("_position" call_of_return_node)
###                               ("_cargs"
###                                 ("_applC" ("_position" last)
###                                   ("_position" ms''))
###                                 ("_position" mx')))
###                             ("\<^const>Set.not_member" ("_position" mx')
###                               ("\<^const>local.SDG_to_CFG_set"
###                                 ("_applC" ("_position" HRB_slice)
###                                   ("_position" S))))))))
###                     ("_asm"
###                       ("\<^const>HOL.Trueprop"
###                         ("_Ball" ("_position" mx)
###                           ("_applC" ("_position" set) ("_position" ms'))
###                           ("\<^const>HOL.Ex_binder" ("_position" mx')
###                             ("\<^const>HOL.conj"
###                               ("_applC" ("_position" call_of_return_node)
###                                 ("_cargs" ("_position" mx)
###                                   ("_position" mx')))
###                               ("\<^const>Set.member" ("_position" mx')
###                                 ("\<^const>local.SDG_to_CFG_set"
###                                   ("_applC" ("_position" HRB_slice)
###                                     ("_position" S))))))))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil"))
###         ("\<^const>HOL.conj"
###           ("\<^const>local.path" ("_position" m) ("_position" as)
###             ("_position" m'))
###           ("\<^const>HOL.eq" ("_position" ms) ("_position" ms')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 721 of "$AFP/HRB-Slicing/StaticInter/FundamentalProperty.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.silent_moves" ("_position" S) ("_position" f)
###         ("\<^const>List.list.Cons" ("_position" m) ("_position" ms))
###         ("_position" s) ("_position" as)
###         ("\<^const>List.list.Cons" ("_position" m') ("_position" ms'))
###         ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_node) ("_position" m)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" mx)
###             ("_applC" ("_position" set) ("_position" ms))
###             ("\<^const>HOL.Ex_binder" ("_position" mx')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" call_of_return_node)
###                   ("_cargs" ("_position" mx) ("_position" mx')))
###                 ("\<^const>Set.member" ("_position" mx')
###                   ("\<^const>local.SDG_to_CFG_set"
###                     ("_applC" ("_position" HRB_slice) ("_position" S))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" mx)
###               ("_applC" ("_position" set) ("_position" ms'))
###               ("\<^const>HOL.Ex_binder" ("_position" mx')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" call_of_return_node)
###                     ("_cargs" ("_position" mx) ("_position" mx')))
###                   ("\<^const>Set.member" ("_position" mx')
###                     ("\<^const>local.SDG_to_CFG_set"
###                       ("_applC" ("_position" HRB_slice)
###                         ("_position" S))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>local.same_level_path'" ("_position" m) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" m') ("_position" ms)))
###       ("_position" ms'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.silent_moves" ("_position" S) ("_position" f)
###         ("\<^const>List.list.Cons" ("_position" m) ("_position" ms))
###         ("_position" s) ("_position" as)
###         ("\<^const>List.list.Cons" ("_position" m') ("_position" ms'))
###         ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_node) ("_position" m)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" mx)
###             ("_applC" ("_position" set) ("_position" ms))
###             ("\<^const>HOL.Ex_binder" ("_position" mx')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" call_of_return_node)
###                   ("_cargs" ("_position" mx) ("_position" mx')))
###                 ("\<^const>Set.member" ("_position" mx')
###                   ("\<^const>local.SDG_to_CFG_set"
###                     ("_applC" ("_position" HRB_slice) ("_position" S))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" mx)
###               ("_applC" ("_position" set) ("_position" ms'))
###               ("\<^const>HOL.Ex_binder" ("_position" mx')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" call_of_return_node)
###                     ("_cargs" ("_position" mx) ("_position" mx')))
###                   ("\<^const>Set.member" ("_position" mx')
###                     ("\<^const>local.SDG_to_CFG_set"
###                       ("_applC" ("_position" HRB_slice)
###                         ("_position" S))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.same_level_path'" ("_position" m) ("_position" as)
###       ("\<^const>HOL.conj" ("_position" m')
###         ("\<^const>HOL.eq" ("_position" ms) ("_position" ms'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.silent_moves" ("_position" S) ("_position" f)
###         ("\<^const>List.list.Cons" ("_position" m) ("_position" ms))
###         ("_position" s) ("_position" as)
###         ("\<^const>List.list.Cons" ("_position" m') ("_position" ms'))
###         ("_position" s')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_node) ("_position" m)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" mx)
###             ("_applC" ("_position" set) ("_position" ms))
###             ("\<^const>HOL.Ex_binder" ("_position" mx')
###               ("\<^const>HOL.conj"
###                 ("_applC" ("_position" call_of_return_node)
###                   ("_cargs" ("_position" mx) ("_position" mx')))
###                 ("\<^const>Set.member" ("_position" mx')
###                   ("\<^const>local.SDG_to_CFG_set"
###                     ("_applC" ("_position" HRB_slice) ("_position" S))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" mx)
###               ("_applC" ("_position" set) ("_position" ms'))
###               ("\<^const>HOL.Ex_binder" ("_position" mx')
###                 ("\<^const>HOL.conj"
###                   ("_applC" ("_position" call_of_return_node)
###                     ("_cargs" ("_position" mx) ("_position" mx')))
###                   ("\<^const>Set.member" ("_position" mx')
###                     ("\<^const>local.SDG_to_CFG_set"
###                       ("_applC" ("_position" HRB_slice)
###                         ("_position" S))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>local.same_level_path'" ("_position" m) ("_position" as)
###         ("_position" m'))
###       ("\<^const>HOL.eq" ("_position" ms) ("_position" ms')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 915 of "$AFP/HRB-Slicing/StaticInter/FundamentalProperty.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###         ("_position" Q)))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" r) ("_idts" ("_position" p) ("_position" fs))))
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###         ("_position" Q))
###       ("_position" r) ("_position" p) ("_position" fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" r) ("_idts" ("_position" p) ("_position" fs))))
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###         ("_position" r) ("_position" p) ("_position" fs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1173 of "$AFP/HRB-Slicing/StaticInter/FundamentalProperty.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###         ("_position" Q)))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" r) ("_idts" ("_position" p) ("_position" fs))))
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###         ("_position" Q))
###       ("_position" r) ("_position" p) ("_position" fs))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder"
###     ("_idts" ("_position" Q)
###       ("_idts" ("_position" r) ("_idts" ("_position" p) ("_position" fs))))
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###         ("_position" r) ("_position" p) ("_position" fs)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!v. the_Heap (Value v) = undefined
Found termination order: "{}"
### Missing patterns in function definition:
### !!v. the_Value (Hp v) = undefined
Found termination order: "{}"
val it = (): unit
val it = (): unit
Proofs for inductive predicate(s) "trans_observable_moves"
  Proving monotonicity ...
### Ambiguous input (line 197 of "$AFP/HRB-Slicing/JinjaVM_Inter/JVMCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reachable"
###         ("_tuple" ("_position" P)
###           ("_tuple_args" ("_position" C0)
###             ("_tuple_arg" ("_position" Main))))
###         ("_tuple" ("_applC" ("_position" ClassMain) ("_position" P))
###           ("_tuple_args" ("_applC" ("_position" MethodMain) ("_position" P))
###             ("_tuple_args"
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Groups.zero_class.zero"))
###               ("_tuple_arg" ("_position" Normal)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method"
###           ("_applC" ("_position" PROG) ("_position" P)) ("_position" C0)
###           ("_position" Main) ("\<^const>List.list.Nil") ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" is)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" initParams)
###             ("_list"
###               ("_args"
###                 ("_lambda" ("_position" s)
###                   ("_applC" ("_position" s) ("_position" Heap)))
###                 ("_lambda" ("_position" s)
###                   ("\<^const>Option.option.Some"
###                     ("_applC" ("_position" Value) ("_position" Null))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" ek)
###               ("\<^const>BasicDefs.edge_kind.CallEdge"
###                 ("_lambda" ("_pattern" ("_position" s) ("_position" ret))
###                   ("_position" True))
###                 ("_tuple" ("_applC" ("_position" ClassMain) ("_position" P))
###                   ("_tuple_args"
###                     ("_applC" ("_position" MethodMain) ("_position" P))
###                     ("_tuple_arg" ("\<^const>Groups.zero_class.zero"))))
###                 ("_tuple" ("_position" D) ("_tuple_arg" ("_position" Main)))
###                 ("_position" initParams))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>JVMCFG"
###       ("_tuple" ("_position" P)
###         ("_tuple_args" ("_position" C0) ("_tuple_arg" ("_position" Main))))
###       ("_tuple" ("_applC" ("_position" ClassMain) ("_position" P))
###         ("_tuple_args" ("_applC" ("_position" MethodMain) ("_position" P))
###           ("_tuple_args"
###             ("\<^const>Option.option.Some"
###               ("\<^const>Groups.zero_class.zero"))
###             ("_tuple_arg" ("_position" Normal)))))
###       ("_position" ek)
###       ("_tuple" ("_position" D)
###         ("_tuple_args" ("_position" Main)
###           ("_tuple_args" ("_position" None)
###             ("_tuple_arg" ("_position" Enter))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reachable"
###         ("_tuple" ("_position" P)
###           ("_tuple_args" ("_position" C0)
###             ("_tuple_arg" ("_position" Main))))
###         ("_tuple" ("_applC" ("_position" ClassMain) ("_position" P))
###           ("_tuple_args" ("_applC" ("_position" MethodMain) ("_position" P))
###             ("_tuple_args"
###               ("\<^const>Option.option.Some"
###                 ("\<^const>Groups.zero_class.zero"))
###               ("_tuple_arg" ("_position" Normal)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>TypeRel.Method"
###           ("_applC" ("_position" PROG) ("_position" P)) ("_position" C0)
###           ("_position" Main) ("\<^const>List.list.Nil") ("_position" T)
###           ("_tuple" ("_position" mxs)
###             ("_tuple_args" ("_position" mxl\<^sub>0)
###               ("_tuple_args" ("_position" is)
###                 ("_tuple_arg" ("_position" xt)))))
###           ("_position" D)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" initParams)
###             ("_list"
###               ("_args"
###                 ("_lambda" ("_position" s)
###                   ("_applC" ("_position" s) ("_position" Heap)))
###                 ("_lambda" ("_position" s)
###                   ("\<^const>Option.option.Some"
###                     ("_applC" ("_position" Value) ("_position" Null))))))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq" ("_position" ek)
###                 ("_lambda" ("_pattern" ("_position" s) ("_position" ret))
###                   ("_position" True)))
###               ("_tuple" ("_applC" ("_position" ClassMain) ("_position" P))
###                 ("_tuple_args"
###                   ("_applC" ("_position" MethodMain) ("_position" P))
###                   ("_tuple_arg" ("\<^const>Groups.zero_class.zero"))))
###               ("_tuple" ("_position" D) ("_tuple_arg" ("_position" Main)))
###               ("_position" initParams)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>JVMCFG"
###       ("_tuple" ("_position" P)
###         ("_tuple_args" ("_position" C0) ("_tuple_arg" ("_position" Main))))
###       ("_tuple" ("_applC" ("_position" ClassMain) ("_position" P))
###         ("_tuple_args" ("_applC" ("_position" MethodMain) ("_position" P))
###           ("_tuple_args"
###             ("\<^const>Option.option.Some"
###               ("\<^const>Groups.zero_class.zero"))
###             ("_tuple_arg" ("_position" Normal)))))
###       ("_position" ek)
###       ("_tuple" ("_position" D)
###         ("_tuple_args" ("_position" Main)
###           ("_tuple_args" ("_position" None)
###             ("_tuple_arg" ("_position" Enter))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 384 of "$AFP/HRB-Slicing/JinjaVM_Inter/JVMCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" C)
###         ("_applC" ("_position" ClassMain) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>reachable"
###           ("_tuple" ("_position" P)
###             ("_tuple_args" ("_position" C0)
###               ("_tuple_arg" ("_position" Main))))
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" M)
###               ("_tuple_args"
###                 ("\<^const>Option.option.Some" ("_position" pc))
###                 ("_tuple_arg" ("_position" Normal)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth"
###               ("_applC" ("_position" instrs_of)
###                 ("_cargs" ("_applC" ("_position" PROG) ("_position" P))
###                   ("_cargs" ("_position" C) ("_position" M))))
###               ("_position" pc))
###             ("_applC" ("_position" Invoke)
###               ("_cargs" ("_position" M') ("_position" n)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" TYPING)
###                   ("_cargs" ("_position" P)
###                     ("_cargs" ("_position" C) ("_position" M))))
###                 ("_position" pc))
###               ("\<^const>Option.option.Some"
###                 ("_tuple" ("_position" ST)
###                   ("_tuple_arg" ("_position" LT))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>List.nth" ("_position" ST) ("_position" n))
###                 ("_applC" ("_position" Class) ("_position" D'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>TypeRel.Method"
###                   ("_applC" ("_position" PROG) ("_position" P))
###                   ("_position" D') ("_position" M') ("_position" Ts)
###                   ("_position" T)
###                   ("_tuple" ("_position" mxs)
###                     ("_tuple_args" ("_position" mxl\<^sub>0)
###                       ("_tuple_args" ("_position" is)
###                         ("_tuple_arg" ("_position" xt)))))
###                   ("_position" D)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" Q)
###                     ("_lambda"
###                       ("_pattern" ("_position" s) ("_position" ret))
###                       ("_Let"
###                         ("_binds"
###                           ("_bind" ("_position" r)
###                             ("_applC" ("_position" stkAt)
###                               ("_cargs" ("_position" s)
###                                 ("\<^const>Groups.minus_class.minus"
###                                   ("_applC" ("_position" stkLength)
###                                     ("_cargs"
### ("_tuple" ("_position" P)
###   ("_tuple_args" ("_position" C) ("_tuple_arg" ("_position" M))))
### ("_position" pc)))
###                                   ("_applC" ("_position" Suc)
###                                     ("_position" n))))))
###                           ("_bind" ("_position" C')
###                             ("_applC" ("_position" fst)
###                               ("_applC" ("_position" the)
###                                 ("_applC" ("_position" heap_of)
###                                   ("_cargs" ("_position" s)
###                                     ("_applC" ("_position" the_Addr)
### ("_position" r))))))))
###                         ("\<^const>HOL.eq" ("_position" D)
###                           ("_applC" ("_position" fst)
###                             ("_applC" ("_position" method)
###                               ("_cargs"
###                                 ("_applC" ("_position" PROG)
###                                   ("_position" P))
###                                 ("_cargs" ("_position" C')
###                                   ("_position" M'))))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" paramDefs)
###                       ("\<^const>List.list.Cons"
###                         ("_lambda" ("_position" s)
###                           ("_applC" ("_position" s) ("_position" Heap)))
###                         ("\<^const>List.list.Cons"
###                           ("_lambda" ("_position" s)
###                             ("_applC" ("_position" s)
###                               ("_applC" ("_position" Stack)
###                                 ("\<^const>Groups.minus_class.minus"
###                                   ("_applC" ("_position" stkLength)
###                                     ("_cargs"
### ("_tuple" ("_position" P)
###   ("_tuple_args" ("_position" C) ("_tuple_arg" ("_position" M))))
### ("_position" pc)))
###                                   ("_applC" ("_position" Suc)
###                                     ("_position" n))))))
###                           ("_applC" ("_position" rev)
###                             ("_applC" ("_position" map)
###                               ("_cargs"
###                                 ("_lambda" ("_position" i)
###                                   ("_lambda" ("_position" s)
###                                     ("_applC" ("_position" s)
### ("_applC" ("_position" Stack)
###   ("\<^const>Groups.minus_class.minus"
###     ("_applC" ("_position" stkLength)
###       ("_cargs"
###         ("_tuple" ("_position" P)
###           ("_tuple_args" ("_position" C) ("_tuple_arg" ("_position" M))))
###         ("_position" pc)))
###     ("_applC" ("_position" Suc) ("_position" i)))))))
###                                 ("\<^const>List.upt"
###                                   ("\<^const>Groups.zero_class.zero")
###                                   ("_position" n)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>HOL.eq" ("_position" ek)
###                         ("\<^const>BasicDefs.edge_kind.CallEdge"
###                           ("_position" Q)
###                           ("_tuple" ("_position" C)
###                             ("_tuple_args" ("_position" M)
###                               ("_tuple_arg" ("_position" pc))))
###                           ("_tuple" ("_position" D)
###                             ("_tuple_arg" ("_position" M')))
###                           ("_position" paramDefs)))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>JVMCFG"
###       ("_tuple" ("_position" P)
###         ("_tuple_args" ("_position" C0) ("_tuple_arg" ("_position" Main))))
###       ("_tuple" ("_position" C)
###         ("_tuple_args" ("_position" M)
###           ("_tuple_args" ("\<^const>Option.option.Some" ("_position" pc))
###             ("_tuple_arg" ("_position" Normal)))))
###       ("_position" ek)
###       ("_tuple" ("_position" D)
###         ("_tuple_args" ("_position" M')
###           ("_tuple_args" ("_position" None)
###             ("_tuple_arg" ("_position" Enter))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.not_equal" ("_position" C)
###         ("_applC" ("_position" ClassMain) ("_position" P))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>reachable"
###           ("_tuple" ("_position" P)
###             ("_tuple_args" ("_position" C0)
###               ("_tuple_arg" ("_position" Main))))
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" M)
###               ("_tuple_args"
###                 ("\<^const>Option.option.Some" ("_position" pc))
###                 ("_tuple_arg" ("_position" Normal)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>List.nth"
###               ("_applC" ("_position" instrs_of)
###                 ("_cargs" ("_applC" ("_position" PROG) ("_position" P))
###                   ("_cargs" ("_position" C) ("_position" M))))
###               ("_position" pc))
###             ("_applC" ("_position" Invoke)
###               ("_cargs" ("_position" M') ("_position" n)))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("\<^const>List.nth"
###                 ("_applC" ("_position" TYPING)
###                   ("_cargs" ("_position" P)
###                     ("_cargs" ("_position" C) ("_position" M))))
###                 ("_position" pc))
###               ("\<^const>Option.option.Some"
###                 ("_tuple" ("_position" ST)
###                   ("_tuple_arg" ("_position" LT))))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq"
###                 ("\<^const>List.nth" ("_position" ST) ("_position" n))
###                 ("_applC" ("_position" Class) ("_position" D'))))
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>TypeRel.Method"
###                   ("_applC" ("_position" PROG) ("_position" P))
###                   ("_position" D') ("_position" M') ("_position" Ts)
###                   ("_position" T)
###                   ("_tuple" ("_position" mxs)
###                     ("_tuple_args" ("_position" mxl\<^sub>0)
###                       ("_tuple_args" ("_position" is)
###                         ("_tuple_arg" ("_position" xt)))))
###                   ("_position" D)))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.eq" ("_position" Q)
###                     ("_lambda"
###                       ("_pattern" ("_position" s) ("_position" ret))
###                       ("_Let"
###                         ("_binds"
###                           ("_bind" ("_position" r)
###                             ("_applC" ("_position" stkAt)
###                               ("_cargs" ("_position" s)
###                                 ("\<^const>Groups.minus_class.minus"
###                                   ("_applC" ("_position" stkLength)
###                                     ("_cargs"
### ("_tuple" ("_position" P)
###   ("_tuple_args" ("_position" C) ("_tuple_arg" ("_position" M))))
### ("_position" pc)))
###                                   ("_applC" ("_position" Suc)
###                                     ("_position" n))))))
###                           ("_bind" ("_position" C')
###                             ("_applC" ("_position" fst)
###                               ("_applC" ("_position" the)
###                                 ("_applC" ("_position" heap_of)
###                                   ("_cargs" ("_position" s)
###                                     ("_applC" ("_position" the_Addr)
### ("_position" r))))))))
###                         ("\<^const>HOL.eq" ("_position" D)
###                           ("_applC" ("_position" fst)
###                             ("_applC" ("_position" method)
###                               ("_cargs"
###                                 ("_applC" ("_position" PROG)
###                                   ("_position" P))
###                                 ("_cargs" ("_position" C')
###                                   ("_position" M'))))))))))
###                 ("_asms"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq" ("_position" paramDefs)
###                       ("\<^const>List.list.Cons"
###                         ("_lambda" ("_position" s)
###                           ("_applC" ("_position" s) ("_position" Heap)))
###                         ("\<^const>List.list.Cons"
###                           ("_lambda" ("_position" s)
###                             ("_applC" ("_position" s)
###                               ("_applC" ("_position" Stack)
###                                 ("\<^const>Groups.minus_class.minus"
###                                   ("_applC" ("_position" stkLength)
###                                     ("_cargs"
### ("_tuple" ("_position" P)
###   ("_tuple_args" ("_position" C) ("_tuple_arg" ("_position" M))))
### ("_position" pc)))
###                                   ("_applC" ("_position" Suc)
###                                     ("_position" n))))))
###                           ("_applC" ("_position" rev)
###                             ("_applC" ("_position" map)
###                               ("_cargs"
###                                 ("_lambda" ("_position" i)
###                                   ("_lambda" ("_position" s)
###                                     ("_applC" ("_position" s)
### ("_applC" ("_position" Stack)
###   ("\<^const>Groups.minus_class.minus"
###     ("_applC" ("_position" stkLength)
###       ("_cargs"
###         ("_tuple" ("_position" P)
###           ("_tuple_args" ("_position" C) ("_tuple_arg" ("_position" M))))
###         ("_position" pc)))
###     ("_applC" ("_position" Suc) ("_position" i)))))))
###                                 ("\<^const>List.upt"
###                                   ("\<^const>Groups.zero_class.zero")
###                                   ("_position" n)))))))))
###                   ("_asm"
###                     ("\<^const>HOL.Trueprop"
###                       ("\<^const>BasicDefs.edge_kind.CallEdge"
###                         ("\<^const>HOL.eq" ("_position" ek) ("_position" Q))
###                         ("_tuple" ("_position" C)
###                           ("_tuple_args" ("_position" M)
###                             ("_tuple_arg" ("_position" pc))))
###                         ("_tuple" ("_position" D)
###                           ("_tuple_arg" ("_position" M')))
###                         ("_position" paramDefs))))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>JVMCFG"
###       ("_tuple" ("_position" P)
###         ("_tuple_args" ("_position" C0) ("_tuple_arg" ("_position" Main))))
###       ("_tuple" ("_position" C)
###         ("_tuple_args" ("_position" M)
###           ("_tuple_args" ("\<^const>Option.option.Some" ("_position" pc))
###             ("_tuple_arg" ("_position" Normal)))))
###       ("_position" ek)
###       ("_tuple" ("_position" D)
###         ("_tuple_args" ("_position" M')
###           ("_tuple_args" ("_position" None)
###             ("_tuple_arg" ("_position" Enter))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 434 of "$AFP/HRB-Slicing/JinjaVM_Inter/JVMCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reachable"
###         ("_tuple" ("_position" P)
###           ("_tuple_args" ("_position" C0)
###             ("_tuple_arg" ("_position" Main))))
###         ("_tuple" ("_position" C)
###           ("_tuple_args" ("_position" M)
###             ("_tuple_args" ("_position" None)
###               ("_tuple_arg" ("_position" Return)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>JVMCFG"
###           ("_tuple" ("_position" P)
###             ("_tuple_args" ("_position" C0)
###               ("_tuple_arg" ("_position" Main))))
###           ("_tuple" ("_position" C')
###             ("_tuple_args" ("_position" M')
###               ("_tuple_args"
###                 ("\<^const>Option.option.Some" ("_position" pc'))
###                 ("_tuple_arg" ("_position" Normal)))))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q')
###             ("_tuple" ("_position" C')
###               ("_tuple_args" ("_position" M')
###                 ("_tuple_arg" ("_position" pc'))))
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" M)))
###             ("_position" ps))
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" M)
###               ("_tuple_args" ("_position" None)
###                 ("_tuple_arg" ("_position" Enter)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" Q)
###             ("_lambda" ("_pattern" ("_position" s) ("_position" ret))
###               ("\<^const>HOL.eq" ("_position" ret)
###                 ("_tuple" ("_position" C')
###                   ("_tuple_args" ("_position" M')
###                     ("_tuple_arg" ("_position" pc'))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" stateUpdate)
###               ("_lambda" ("_pttrns" ("_position" s) ("_position" s'))
###                 ("_Update" ("_position" s')
###                   ("_updbinds"
###                     ("_updbind" ("_position" Heap)
###                       ("_applC" ("_position" s) ("_position" Heap)))
###                     ("_updbinds"
###                       ("_updbind" ("_position" Exception)
###                         ("_applC" ("_position" s) ("_position" Exception)))
###                       ("_updbind"
###                         ("_applC" ("_position" Stack)
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_applC" ("_position" stkLength)
###                               ("_cargs"
###                                 ("_tuple" ("_position" P)
###                                   ("_tuple_args" ("_position" C')
###                                     ("_tuple_arg" ("_position" M'))))
###                                 ("_applC" ("_position" Suc)
###                                   ("_position" pc'))))
###                             ("\<^const>Groups.one_class.one")))
###                         ("_applC" ("_position" s)
###                           ("_applC" ("_position" Stack)
###                             ("\<^const>Groups.zero_class.zero"))))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" ek)
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_tuple" ("_position" C) ("_tuple_arg" ("_position" M)))
###                   ("_position" stateUpdate)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>JVMCFG"
###       ("_tuple" ("_position" P)
###         ("_tuple_args" ("_position" C0) ("_tuple_arg" ("_position" Main))))
###       ("_tuple" ("_position" C)
###         ("_tuple_args" ("_position" M)
###           ("_tuple_args" ("_position" None)
###             ("_tuple_arg" ("_position" Return)))))
###       ("_position" ek)
###       ("_tuple" ("_position" C')
###         ("_tuple_args" ("_position" M')
###           ("_tuple_args" ("\<^const>Option.option.Some" ("_position" pc'))
###             ("_tuple_arg" ("_position" Return))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>reachable"
###         ("_tuple" ("_position" P)
###           ("_tuple_args" ("_position" C0)
###             ("_tuple_arg" ("_position" Main))))
###         ("_tuple" ("_position" C)
###           ("_tuple_args" ("_position" M)
###             ("_tuple_args" ("_position" None)
###               ("_tuple_arg" ("_position" Return)))))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^fixed>JVMCFG"
###           ("_tuple" ("_position" P)
###             ("_tuple_args" ("_position" C0)
###               ("_tuple_arg" ("_position" Main))))
###           ("_tuple" ("_position" C')
###             ("_tuple_args" ("_position" M')
###               ("_tuple_args"
###                 ("\<^const>Option.option.Some" ("_position" pc'))
###                 ("_tuple_arg" ("_position" Normal)))))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q')
###             ("_tuple" ("_position" C')
###               ("_tuple_args" ("_position" M')
###                 ("_tuple_arg" ("_position" pc'))))
###             ("_tuple" ("_position" C) ("_tuple_arg" ("_position" M)))
###             ("_position" ps))
###           ("_tuple" ("_position" C)
###             ("_tuple_args" ("_position" M)
###               ("_tuple_args" ("_position" None)
###                 ("_tuple_arg" ("_position" Enter)))))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" Q)
###             ("_lambda" ("_pattern" ("_position" s) ("_position" ret))
###               ("\<^const>HOL.eq" ("_position" ret)
###                 ("_tuple" ("_position" C')
###                   ("_tuple_args" ("_position" M')
###                     ("_tuple_arg" ("_position" pc'))))))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" stateUpdate)
###               ("_lambda" ("_pttrns" ("_position" s) ("_position" s'))
###                 ("_Update" ("_position" s')
###                   ("_updbinds"
###                     ("_updbind" ("_position" Heap)
###                       ("_applC" ("_position" s) ("_position" Heap)))
###                     ("_updbinds"
###                       ("_updbind" ("_position" Exception)
###                         ("_applC" ("_position" s) ("_position" Exception)))
###                       ("_updbind"
###                         ("_applC" ("_position" Stack)
###                           ("\<^const>Groups.minus_class.minus"
###                             ("_applC" ("_position" stkLength)
###                               ("_cargs"
###                                 ("_tuple" ("_position" P)
###                                   ("_tuple_args" ("_position" C')
###                                     ("_tuple_arg" ("_position" M'))))
###                                 ("_applC" ("_position" Suc)
###                                   ("_position" pc'))))
###                             ("\<^const>Groups.one_class.one")))
###                         ("_applC" ("_position" s)
###                           ("_applC" ("_position" Stack)
###                             ("\<^const>Groups.zero_class.zero"))))))))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq" ("_position" ek) ("_position" Q))
###                 ("_tuple" ("_position" C) ("_tuple_arg" ("_position" M)))
###                 ("_position" stateUpdate))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>JVMCFG"
###       ("_tuple" ("_position" P)
###         ("_tuple_args" ("_position" C0) ("_tuple_arg" ("_position" Main))))
###       ("_tuple" ("_position" C)
###         ("_tuple_args" ("_position" M)
###           ("_tuple_args" ("_position" None)
###             ("_tuple_arg" ("_position" Return)))))
###       ("_position" ek)
###       ("_tuple" ("_position" C')
###         ("_tuple_args" ("_position" M')
###           ("_tuple_args" ("\<^const>Option.option.Some" ("_position" pc'))
###             ("_tuple_arg" ("_position" Return))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "JVMCFG", "reachable"
  Proving monotonicity ...
locale SemanticsProperty
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
    and Def :: "'node => 'var set"
    and Use :: "'node => 'var set"
    and ParamDefs :: "'node => 'var list"
    and ParamUses :: "'node => 'var set list"
    and
    sem ::
      "'com
       => ('var => 'val option) list
          => 'com => ('var => 'val option) list => bool"
      (\<open>((1\<langle>_,/_\<rangle>) \<Rightarrow>/ (1\<langle>_,/_\<rangle>))\<close>
        [0, 0, 0, 0] 81)
    and
    identifies :: "'node => 'com => bool"
      (\<open>_ \<triangleq> _\<close> [51, 0] 80)
  assumes
    "SemanticsProperty sourcenode targetnode kind valid_edge (_Entry_)
      get_proc get_return_edges procs Main (_Exit_) Def Use ParamDefs
      ParamUses sem identifies"
### theory "Draft.FundamentalProperty"
### 2.738s elapsed time, 6.969s cpu time, 0.569s GC time
### theory "Draft.JVMCFG"
### 3.641s elapsed time, 8.214s cpu time, 0.763s GC time
Loading theory "Draft.JVMInterpretation" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG" via "Draft.JVMCFG_wf")
Found termination order:
  "(%p. size_list
         (%p. size_list (%p. size (snd (snd (snd (snd p)))))
               (snd (snd (snd (snd (snd (snd p)))))))
         (snd p)) <*mlex*>
   {}"
Found termination order:
  "size_list
    (%p. size_list
          (%p. size_list (%p. size (snd (snd (snd (snd p)))))
                (snd (snd (snd (snd (snd (snd p)))))))
          (snd (snd (snd p)))) <*mlex*>
   {}"
### Ambiguous input (line 111 of "$AFP/HRB-Slicing/JinjaVM_Inter/JVMInterpretation.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###         ("_position" Q))
###       ("_tuple" ("_position" C)
###         ("_tuple_args" ("_position" M) ("_tuple_arg" ("_position" pc))))
###       ("_tuple" ("_position" D) ("_tuple_arg" ("_position" M')))
###       ("_position" paramDefs)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("_tuple" ("_position" D)
###           ("_tuple_args" ("_position" M')
###             ("_tuple_args" ("_position" None)
###               ("_tuple_arg" ("_position" Return)))))
###         ("_tuple_args"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("_lambda" ("_pattern" ("_position" s) ("_position" ret))
###               ("\<^const>HOL.eq" ("_position" ret)
###                 ("_tuple" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" M')))
###             ("_lambda" ("_pttrns" ("_position" s) ("_position" s'))
###               ("_Update" ("_position" s')
###                 ("_updbinds"
###                   ("_updbind" ("_position" Heap)
###                     ("_applC" ("_position" s) ("_position" Heap)))
###                   ("_updbinds"
###                     ("_updbind" ("_position" Exception)
###                       ("_applC" ("_position" s) ("_position" Exception)))
###                     ("_updbind"
###                       ("_applC" ("_position" Stack)
###                         ("\<^const>Groups.minus_class.minus"
###                           ("_applC" ("_position" stkLength)
###                             ("_cargs"
###                               ("_tuple" ("_position" P)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_arg" ("_position" M))))
###                               ("_applC" ("_position" Suc)
###                                 ("_position" pc))))
###                           ("\<^const>Groups.one_class.one")))
###                       ("_applC" ("_position" s)
###                         ("_applC" ("_position" Stack)
###                           ("\<^const>Groups.zero_class.zero")))))))))
###           ("_tuple_arg"
###             ("_tuple" ("_position" C)
###               ("_tuple_args" ("_position" M)
###                 ("_tuple_args"
###                   ("\<^const>Option.option.Some" ("_position" pc))
###                   ("_tuple_arg" ("_position" Return))))))))
###       ("_applC" ("_position" get_return_edges)
###         ("_cargs" ("_position" P) ("_position" a))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###         ("_tuple" ("_position" C)
###           ("_tuple_args" ("_position" M) ("_tuple_arg" ("_position" pc))))
###         ("_tuple" ("_position" D) ("_tuple_arg" ("_position" M')))
###         ("_position" paramDefs))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("_tuple" ("_position" D)
###           ("_tuple_args" ("_position" M')
###             ("_tuple_args" ("_position" None)
###               ("_tuple_arg" ("_position" Return)))))
###         ("_tuple_args"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("_lambda" ("_pattern" ("_position" s) ("_position" ret))
###               ("\<^const>HOL.eq" ("_position" ret)
###                 ("_tuple" ("_position" C)
###                   ("_tuple_args" ("_position" M)
###                     ("_tuple_arg" ("_position" pc))))))
###             ("_tuple" ("_position" D) ("_tuple_arg" ("_position" M')))
###             ("_lambda" ("_pttrns" ("_position" s) ("_position" s'))
###               ("_Update" ("_position" s')
###                 ("_updbinds"
###                   ("_updbind" ("_position" Heap)
###                     ("_applC" ("_position" s) ("_position" Heap)))
###                   ("_updbinds"
###                     ("_updbind" ("_position" Exception)
###                       ("_applC" ("_position" s) ("_position" Exception)))
###                     ("_updbind"
###                       ("_applC" ("_position" Stack)
###                         ("\<^const>Groups.minus_class.minus"
###                           ("_applC" ("_position" stkLength)
###                             ("_cargs"
###                               ("_tuple" ("_position" P)
###                                 ("_tuple_args" ("_position" C)
###                                   ("_tuple_arg" ("_position" M))))
###                               ("_applC" ("_position" Suc)
###                                 ("_position" pc))))
###                           ("\<^const>Groups.one_class.one")))
###                       ("_applC" ("_position" s)
###                         ("_applC" ("_position" Stack)
###                           ("\<^const>Groups.zero_class.zero")))))))))
###           ("_tuple_arg"
###             ("_tuple" ("_position" C)
###               ("_tuple_args" ("_position" M)
###                 ("_tuple_args"
###                   ("\<^const>Option.option.Some" ("_position" pc))
###                   ("_tuple_arg" ("_position" Return))))))))
###       ("_applC" ("_position" get_return_edges)
###         ("_cargs" ("_position" P) ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "get_return_edgesp"
  Proving monotonicity ...
### Ambiguous input (line 120 of "$AFP/HRB-Slicing/JinjaVM_Inter/JVMInterpretation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###       ("_position" Q))
###     ("_tuple" ("_position" C)
###       ("_tuple_args" ("_position" M) ("_tuple_arg" ("_position" pc))))
###     ("_tuple" ("_position" D) ("_tuple_arg" ("_position" M')))
###     ("_position" paramDefs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###       ("_tuple" ("_position" C)
###         ("_tuple_args" ("_position" M) ("_tuple_arg" ("_position" pc))))
###       ("_tuple" ("_position" D) ("_tuple_arg" ("_position" M')))
###       ("_position" paramDefs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.JVMInterpretation"
### 2.131s elapsed time, 2.443s cpu time, 0.431s GC time
Loading theory "Draft.JVMCFG_wf" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG")
Loading theory "Draft.JVMPostdomination" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing" via "Draft.JVMSDG")
Proofs for inductive predicate(s) "Defp"
  Proving monotonicity ...
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
  assumes
    "CFG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main"
### Ambiguous input (line 6 of "$AFP/HRB-Slicing/JinjaVM_Inter/JVMPostdomination.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n') ("_list" ("_position" a))
###           ("_position" n'')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p)
###                 ("_idts" ("_position" ret) ("_position" fs))))
###             ("\<^const>HOL.not_equal"
###               ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" ret))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.valid_path'" ("_position" n)
###       ("\<^const>List.append" ("_position" as) ("_list" ("_position" a)))
###       ("_position" n''))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n') ("_list" ("_position" a))
###           ("_position" n'')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.All_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p)
###                 ("_idts" ("_position" ret) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.not_equal"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" ret)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.valid_path'" ("_position" n)
###       ("\<^const>List.append" ("_position" as) ("_list" ("_position" a)))
###       ("_position" n''))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n') ("_list" ("_position" a))
###           ("_position" n'')))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p)
###                   ("_idts" ("_position" ret) ("_position" fs))))
###               ("\<^const>HOL.not_equal"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" ret))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.valid_path'" ("_position" n)
###       ("\<^const>List.append" ("_position" as) ("_list" ("_position" a)))
###       ("_position" n''))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Usep"
  Proving monotonicity ...
Found termination order: "{}"
### theory "Draft.JVMCFG_wf"
### 1.771s elapsed time, 3.966s cpu time, 0.780s GC time
### theory "Draft.JVMPostdomination"
### 4.114s elapsed time, 9.759s cpu time, 5.498s GC time
Loading theory "Draft.JVMSDG" (required by "Draft.HRBSlicingMoreTemplates" via "Draft.HRBSlicing")
### theory "Draft.JVMSDG"
### 21.000s elapsed time, 61.904s cpu time, 59.999s GC time
Loading theory "Draft.HRBSlicing" (required by "Draft.HRBSlicingMoreTemplates")
### theory "Draft.HRBSlicing"
### 0.411s elapsed time, 0.484s cpu time, 0.000s GC time
Loading theory "Draft.HRBSlicingMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.HRBSlicingMoreTemplates"
### 0.770s elapsed time, 1.120s cpu time, 0.178s GC time
*** Undefined fact: "semilat" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")768semilat_DeffactSemilat.semilat_Defsemilat_deffactSemilat.semilat_defsemilat_errIfactErr.semilat_errIsemilat_le_err_Err_plusfactErr.semilat_le_err_Err_plussemilat_le_err_OK1factErr.semilat_le_err_OK1semilat_le_err_OK2factErr.semilat_le_err_OK2semilat_le_err_plus_ErrfactErr.semilat_le_err_plus_Errsemilat_optfactOpt.semilat_optsemilattice_axioms_deffactLattices.semilattice_axioms_defsemilattice_deffactLattices.semilattice_defsemilattice_inf_axiomsfactLattices.semilattice_inf_class.semilattice_inf_axiomssemilattice_inf_class_deffactLattices.semilattice_inf_class_defsemilattice_map2factList.semilattice_map2semilattice_neutr_deffactLattices.semilattice_neutr_defsemilattice_neutr_order_deffactLattices.semilattice_neutr_order_defsemilattice_neutr_set_deffactLattices_Big.semilattice_neutr_set_defsemilattice_order_axioms_deffactLattices.semilattice_order_axioms_defsemilattice_order_deffactLattices.semilattice_order_defsemilattice_order_neutr_set_deffactLattices_Big.semilattice_order_neutr_set_defsemilattice_order_set_deffactLattices_Big.semilattice_order_set_defsemilattice_set_deffactLattices_Big.semilattice_set_defsemilattice_sup_axiomsfactLattices.semilattice_sup_class.semilattice_sup_axiomssemilattice_sup_class_deffactLattices.semilattice_sup_class_defsemilattice.axiomsfactLattices.semilattice.axiomssemilattice.idemfactLattices.semilattice.idemsemilattice.introfactLattices.semilattice.introsemilattice.left_idemfactLattices.semilattice.left_idemsemilattice.right_idemfactLattices.semilattice.right_idemsemilattice_axioms.introfactLattices.semilattice_axioms.introsemilattice_inf.Inf_fin_deffactLattices_Big.semilattice_inf.Inf_fin_defsemilattice_inf.comp_fun_idem_inffactFinite_Set.semilattice_inf.comp_fun_idem_infsemilattice_inf.inf_absorb1factLattices.semilattice_inf.inf_absorb1semilattice_inf.inf_absorb2factLattices.semilattice_inf.inf_absorb2semilattice_inf.inf_acifactLattices.semilattice_inf.inf_acisemilattice_inf.inf_assocfactLattices.semilattice_inf.inf_assocsemilattice_inf.inf_commutefactLattices.semilattice_inf.inf_commutesemilattice_inf.inf_greatestfactLattices.semilattice_inf.inf_greatestsemilattice_inf.inf_idemfactLattices.semilattice_inf.inf_idemsemilattice_inf.inf_le1factLattices.semilattice_inf.inf_le1semilattice_inf.inf_le2factLattices.semilattice_inf.inf_le2
*** At command "thm" (line 104 of "$AFP/Jinja/DFA/SemilatAlg.thy")
Exception- TOPLEVEL_ERROR raised
