Loading theory "Draft.AuxLemmas" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation" via "Draft.WellFormProgs" via "Draft.PCFG" via "Draft.ProcState" via "Draft.Com" via "Draft.BasicDefs")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Draft.AuxLemmas"
### 0.049s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "Draft.BasicDefs" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation" via "Draft.WellFormProgs" via "Draft.PCFG" via "Draft.ProcState" via "Draft.Com")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.573s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### Ambiguous input (line 69 of "$AFP/HRB-Slicing/StaticInter/BasicDefs.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>BasicDefs.fun_upds"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###             ("_position" ys))
###           ("_position" V))
###         ("_position" f'))
###       ("_position" xs) ("_position" ys))
###     ("_position" V)))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###       ("_position" ys))
###     ("_cargs"
###       ("\<^const>BasicDefs.fun_upds"
###         ("\<^const>HOL.eq" ("_position" V) ("_position" f'))
###         ("_position" xs) ("_position" ys))
###       ("_position" V))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###         ("_position" ys))
###       ("_position" V))
###     ("_applC"
###       ("\<^const>BasicDefs.fun_upds" ("_position" f') ("_position" xs)
###         ("_position" ys))
###       ("_position" V))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.295s elapsed time, 1.182s cpu time, 0.117s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.327s elapsed time, 1.304s cpu time, 0.117s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
Proofs for coinductive predicate(s) "streamsp"
consts
  right :: "'a tree => 'a tree"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### Ambiguous input (line 141 of "$AFP/HRB-Slicing/StaticInter/BasicDefs.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" et)
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" et)
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_position" p) ("_position" f))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" et)
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_position" p) ("_position" f))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" et)
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BasicDefs"
### 1.250s elapsed time, 4.761s cpu time, 0.958s GC time
Loading theory "Draft.CFG" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation" via "Draft.CFGExit")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.014s elapsed time, 3.843s cpu time, 0.841s GC time
Loading theory "Draft.Com" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation" via "Draft.WellFormProgs" via "Draft.PCFG" via "Draft.ProcState")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Ambiguous input (line 22 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("\<^fixed>Entry"))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("\<^fixed>Entry"))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" Main) ("_position" f))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" Main) ("_position" f)))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 27 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" Main) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" Main) ("_position" f')))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Stream"
### 1.108s elapsed time, 4.200s cpu time, 0.902s GC time
### Ambiguous input (line 29 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" ins) ("_position" outs))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_arg" ("_position" outs))))
###         ("_applC" ("_position" set) ("_position" procs))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" ins) ("_position" outs))
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_arg" ("_position" outs))))
###         ("_applC" ("_position" set) ("_position" procs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_proc)
###         ("_applC" ("_position" targetnode) ("_position" a)))
###       ("_position" p))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_proc)
###         ("_applC" ("_position" targetnode) ("_position" a)))
###       ("_position" p))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_proc)
###         ("_applC" ("_position" sourcenode) ("_position" a)))
###       ("_position" p))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_proc)
###         ("_applC" ("_position" sourcenode) ("_position" a)))
###       ("_position" p))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx)
###             ("_idts" ("_position" rx) ("_position" fsx)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Qx)
###               ("_position" rx) ("_position" p) ("_position" fsx))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx)
###             ("_idts" ("_position" rx) ("_position" fsx)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Qx)
###               ("_position" rx) ("_position" p) ("_position" fsx))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Qx)
###               ("_idts" ("_position" rx) ("_position" fsx)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx)))
###           ("_position" rx) ("_position" p) ("_position" fsx))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Qx)
###               ("_idts" ("_position" rx) ("_position" fsx)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx)))
###           ("_position" rx) ("_position" p) ("_position" fsx))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx)
###             ("_idts" ("_position" rx) ("_position" fsx)))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx))
###             ("_position" rx) ("_position" p) ("_position" fsx)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx)
###             ("_idts" ("_position" rx) ("_position" fsx)))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx))
###             ("_position" rx) ("_position" p) ("_position" fsx)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 39 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx) ("_position" fx))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Qx)
###               ("_position" p) ("_position" fx))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx) ("_position" fx))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Qx)
###               ("_position" p) ("_position" fx))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Qx) ("_position" fx))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx)))
###           ("_position" p) ("_position" fx))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Qx) ("_position" fx))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx)))
###           ("_position" p) ("_position" fx))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx) ("_position" fx))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx))
###             ("_position" p) ("_position" fx)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder" ("_position" a')
###       ("\<^const>HOL.implies"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Qx) ("_position" fx))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Qx))
###             ("_position" p) ("_position" fx)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" get_return_edges) ("_position" a))
###       ("\<^const>Set.empty"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" get_return_edges) ("_position" a))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" a')
###           ("_applC" ("_position" get_return_edges) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("_position" Q)))
###       ("_position" r) ("_position" p) ("_position" fs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" a')
###           ("_applC" ("_position" get_return_edges) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("_position" Q))
###         ("_position" r) ("_position" p) ("_position" fs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" a')
###           ("_applC" ("_position" get_return_edges) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###         ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###           ("_position" r) ("_position" p) ("_position" fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 49 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q')))
###       ("_position" p) ("_position" f'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q')))
###       ("_position" p) ("_position" f'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q'))
###         ("_position" p) ("_position" f')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q'))
###         ("_position" p) ("_position" f')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###           ("_position" p) ("_position" f'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges) ("_position" a)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###           ("_position" p) ("_position" f'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r) ("_position" fs)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r) ("_position" fs)))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r) ("_position" fs)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r) ("_position" fs)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r) ("_position" fs)))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r) ("_position" fs)))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>Set.member" ("_position" a)
###             ("_applC" ("_position" get_return_edges) ("_position" a'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 62 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a)))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" sourcenode) ("_position" a'))
###             ("_applC" ("_position" sourcenode) ("_position" a)))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 65 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###             ("_position" p) ("_position" f'))))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a)))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a'))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q'))
###           ("_position" p) ("_position" f')))))
###   ("\<^const>HOL.Trueprop"
###     ("_Ex1" ("_position" a')
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a'))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a'))
###             ("_applC" ("_position" targetnode) ("_position" a)))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q\<^sub>1)
###               ("_position" r\<^sub>1) ("_position" p)
###               ("_position" fs\<^sub>1))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge"
###                 ("_position" Q\<^sub>2) ("_position" r\<^sub>2)
###                 ("_position" p) ("_position" fs\<^sub>2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" targetnode) ("_position" a))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q\<^sub>1))
###             ("_position" r\<^sub>1) ("_position" p)
###             ("_position" fs\<^sub>1)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("\<^const>BasicDefs.edge_kind.CallEdge"
###                 ("_position" Q\<^sub>2) ("_position" r\<^sub>2)
###                 ("_position" p) ("_position" fs\<^sub>2))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" targetnode) ("_position" a))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q\<^sub>1)
###               ("_position" r\<^sub>1) ("_position" p)
###               ("_position" fs\<^sub>1))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q\<^sub>2))
###               ("_position" r\<^sub>2) ("_position" p)
###               ("_position" fs\<^sub>2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" targetnode) ("_position" a))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_edge) ("_position" a')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q\<^sub>1))
###             ("_position" r\<^sub>1) ("_position" p)
###             ("_position" fs\<^sub>1)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q\<^sub>2))
###               ("_position" r\<^sub>2) ("_position" p)
###               ("_position" fs\<^sub>2)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" targetnode) ("_position" a))
###       ("_applC" ("_position" targetnode) ("_position" a')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale CFG
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
  assumes
    "CFG sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main"
### Ambiguous input (line 89 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" ins)
###         ("\<^const>HOL.Ex_binder" ("_position" outs)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))
###       ("_position" ins))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" ins)
###         ("\<^const>HOL.Ex_binder" ("_position" outs)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))
###       ("_position" ins))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 112 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" outs)
###         ("\<^const>HOL.Ex_binder" ("_position" ins)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))
###       ("_position" outs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_The" ("_position" outs)
###         ("\<^const>HOL.Ex_binder" ("_position" ins)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" ins)
###                 ("_tuple_arg" ("_position" outs))))
###             ("_applC" ("_position" set) ("_position" procs)))))
###       ("_position" outs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.153s elapsed time, 7.561s cpu time, 1.188s GC time
Loading theory "Draft.Templates" (required by "Draft.InterpretationMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.236s cpu time, 0.056s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.InterpretationMoreTemplates")
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "path"
  Proving monotonicity ...
### Ambiguous input (line 206 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("_position" n) ("\<^const>List.list.Nil")
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 209 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" valid_edge) ("_position" a)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 414 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" intra_kind)
###               ("_applC" ("_position" kind) ("_position" a)))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>intra_path" ("_position" n) ("_position" as) ("_position" n'))
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path"
###     ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###     ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" intra_kind)
###             ("_applC" ("_position" kind) ("_position" a))))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>intra_path" ("_position" n) ("_position" as) ("_position" n'))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n'))
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))))
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path"
###       ("\<^fixed>intra_path" ("_position" n) ("_position" as)
###         ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###       ("_position" as) ("_position" n'))
###     ("_Ball" ("_position" a) ("_applC" ("_position" set) ("_position" as))
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 470 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" valid_path_aux)
###                   ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" a)
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" c')))
###                     ("_applC" ("_position" valid_path_aux)
###                       ("_cargs" ("_position" cs') ("_position" as)))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" valid_path_aux)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" valid_path_aux)
###                   ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" a)
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" c')))
###                 ("_applC" ("_position" valid_path_aux)
###                   ("_cargs" ("_position" cs') ("_position" as)))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" valid_path_aux)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil")
###                   ("_applC" ("_position" valid_path_aux)
###                     ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" a)
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" c')))
###                     ("_applC" ("_position" valid_path_aux)
###                       ("_cargs" ("_position" cs') ("_position" as))))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Ambiguous input (line 483 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 485 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs) ("\<^const>List.list.Nil")))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs) ("\<^const>List.list.Nil")))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 487 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" c') ("_position" cs'))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" a)
###                 ("_applC" ("_position" get_return_edges) ("_position" c'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" c') ("_position" cs'))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" a)
###                 ("_applC" ("_position" get_return_edges) ("_position" c'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 544 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" upd_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" upd_cs)
###                   ("_cargs" ("_position" cs) ("_position" as))))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("_applC" ("_position" upd_cs)
###                     ("_cargs" ("_position" cs') ("_position" as))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" upd_cs)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" upd_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" upd_cs)
###                   ("_cargs" ("_position" cs) ("_position" as))))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("_applC" ("_position" upd_cs)
###                 ("_cargs" ("_position" cs') ("_position" as))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" upd_cs)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" upd_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil")
###                   ("_applC" ("_position" upd_cs)
###                     ("_cargs" ("_position" cs) ("_position" as))))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("_applC" ("_position" upd_cs)
###                     ("_cargs" ("_position" cs') ("_position" as)))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" upd_cs)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.638s elapsed time, 1.966s cpu time, 0.149s GC time
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Ambiguous input (line 647 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 690 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 898 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 950 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("_applC" ("_position" valid_path) ("_position" as)))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>valid_path'" ("_position" n) ("_position" as) ("_position" n'))
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_applC" ("_position" valid_path) ("_position" as)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path"
###     ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###     ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_applC" ("_position" valid_path) ("_position" as)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("_applC" ("_position" valid_path) ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>valid_path'" ("_position" n) ("_position" as) ("_position" n'))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n'))
###     ("_applC" ("_position" valid_path) ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))))
###     ("_applC" ("_position" valid_path) ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path"
###       ("\<^fixed>valid_path'" ("_position" n) ("_position" as)
###         ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###       ("_position" as) ("_position" n'))
###     ("_applC" ("_position" valid_path) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1030 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" valid_path_rev_aux)
###                   ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" c')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a)))
###                     ("_applC" ("_position" valid_path_rev_aux)
###                       ("_cargs" ("_position" cs') ("_position" as)))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" valid_path_rev_aux)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" valid_path_rev_aux)
###                   ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" c')
###                   ("_applC" ("_position" get_return_edges) ("_position" a)))
###                 ("_applC" ("_position" valid_path_rev_aux)
###                   ("_cargs" ("_position" cs') ("_position" as)))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" valid_path_rev_aux)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" valid_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil")
###                   ("_applC" ("_position" valid_path_rev_aux)
###                     ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" c')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a)))
###                     ("_applC" ("_position" valid_path_rev_aux)
###                       ("_cargs" ("_position" cs') ("_position" as))))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 53 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>num_inner_nodes" ("_position" Skip))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq" ("_position" Skip)
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 55 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###     ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 14 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>HOL.eq"
###           ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###             ("_position" c\<^sub>2))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>2)
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###         ("\<^fixed>num_inner_nodes" ("_position" c))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c)
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets)))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets))))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 1047 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1049 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs) ("\<^const>List.list.Nil")))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs) ("\<^const>List.list.Nil")))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P)
###                 ("_cargs" ("\<^const>List.list.Nil") ("_position" as))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 61 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.greater"
###     ("\<^const>Com.num_inner_nodes" ("_position" c))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.num_inner_nodes"
###     ("\<^const>Orderings.ord_class.greater" ("_position" c)
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1051 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" c') ("_position" cs')))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" c')
###                 ("_applC" ("_position" get_return_edges) ("_position" a))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" c') ("_position" cs')))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" valid_path_rev_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" c')
###                 ("_applC" ("_position" get_return_edges) ("_position" a))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>Com.num_inner_nodes" ("_position" c))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Com"
### 2.044s elapsed time, 6.027s cpu time, 0.555s GC time
Loading theory "Draft.ProcState" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation" via "Draft.WellFormProgs" via "Draft.PCFG")
### Ambiguous input (line 1103 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_rev_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" upd_rev_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" upd_rev_cs)
###                   ("_cargs" ("_position" cs) ("_position" as))))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("_applC" ("_position" upd_rev_cs)
###                     ("_cargs" ("_position" cs') ("_position" as))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" upd_rev_cs)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_rev_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" upd_rev_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil")
###                 ("_applC" ("_position" upd_rev_cs)
###                   ("_cargs" ("_position" cs) ("_position" as))))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("_applC" ("_position" upd_rev_cs)
###                 ("_cargs" ("_position" cs') ("_position" as))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" upd_rev_cs)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" upd_rev_cs)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" upd_rev_cs)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil")
###                   ("_applC" ("_position" upd_rev_cs)
###                     ("_cargs" ("_position" cs) ("_position" as))))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("_applC" ("_position" upd_rev_cs)
###                     ("_cargs" ("_position" cs') ("_position" as)))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" upd_rev_cs)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 16 of "$AFP/HRB-Slicing/Proc/ProcState.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" update)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" V) ("_position" e))))
###   ("_Update" ("_position" cf)
###     ("_updbind" ("_position" V)
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" e) ("_position" cf))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" update)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" V) ("_position" e))))
###   ("_applC" ("_position" cf)
###     ("\<^const>Com.cmd.LAss" ("_position" V)
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" e) ("_position" cf))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ProcState"
### 0.121s elapsed time, 0.260s cpu time, 0.041s GC time
Loading theory "Draft.PCFG" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation" via "Draft.WellFormProgs")
### Ambiguous input (line 1311 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1397 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1441 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1485 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1531 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_call_list)
###     ("_cargs" ("_position" cs) ("_position" n)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" cs') ("_idts" ("_position" c) ("_position" cs'')))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" cs)
###         ("\<^const>List.append" ("_position" cs')
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs''))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" c))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" c))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs)))
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" get_proc)
###                 ("_case_syntax" ("_position" cs')
###                   ("_case2"
###                     ("_case1" ("\<^const>List.list.Nil") ("_position" n))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_applC" ("_position" last)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" cs'))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_call_list)
###     ("_cargs" ("_position" cs) ("_position" n)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" cs') ("_idts" ("_position" c) ("_position" cs'')))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" cs)
###         ("\<^const>List.append" ("_position" cs')
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs''))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" c))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.conj"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" c))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" get_proc)
###                 ("_case_syntax" ("_position" cs')
###                   ("_case2"
###                     ("_case1" ("\<^const>List.list.Nil") ("_position" n))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_applC" ("_position" last)
###                         ("_applC" ("_position" sourcenodes)
###                           ("_position" cs'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1536 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_return_list)
###     ("_cargs" ("_position" cs) ("_position" n)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" cs') ("_idts" ("_position" c) ("_position" cs'')))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" cs)
###         ("\<^const>List.append" ("_position" cs')
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs''))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" c))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" c))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" get_proc)
###                 ("_case_syntax" ("_position" cs')
###                   ("_case2"
###                     ("_case1" ("\<^const>List.list.Nil") ("_position" n))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_applC" ("_position" last)
###                         ("_applC" ("_position" targetnodes)
###                           ("_position" cs'))))))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" valid_return_list)
###     ("_cargs" ("_position" cs) ("_position" n)))
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" cs') ("_idts" ("_position" c) ("_position" cs'')))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.eq" ("_position" cs)
###         ("\<^const>List.append" ("_position" cs')
###           ("\<^const>List.list.Cons" ("_position" c) ("_position" cs''))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" c))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>HOL.conj"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" c))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))
###             ("\<^const>HOL.eq" ("_position" p)
###               ("_applC" ("_position" get_proc)
###                 ("_case_syntax" ("_position" cs')
###                   ("_case2"
###                     ("_case1" ("\<^const>List.list.Nil") ("_position" n))
###                     ("_case1" ("\<^const>Pure.dummy_pattern")
###                       ("_applC" ("_position" last)
###                         ("_applC" ("_position" targetnodes)
###                           ("_position" cs'))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1914 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" valid_path_rev_aux)
###           ("_cargs" ("\<^const>List.list.Nil") ("_position" as)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" valid_path_rev_aux)
###       ("_cargs" ("\<^const>List.list.Nil") ("_position" as)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1926 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil") ("_position" False))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" a)
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" c')))
###                     ("_applC" ("_position" same_level_path_aux)
###                       ("_cargs" ("_position" cs') ("_position" as)))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" same_level_path_aux)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil") ("_position" False))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" a)
###                   ("_applC" ("_position" get_return_edges)
###                     ("_position" c')))
###                 ("_applC" ("_position" same_level_path_aux)
###                   ("_cargs" ("_position" cs') ("_position" as)))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" same_level_path_aux)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.list.Cons" ("_position" a) ("_position" as))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil") ("_position" False))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" a)
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" c')))
###                     ("_applC" ("_position" same_level_path_aux)
###                       ("_cargs" ("_position" cs') ("_position" as))))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" same_level_path_aux)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 15 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("_applC" ("_position" Label) ("_position" l))
###       ("_position" i))
###     ("_applC" ("_position" Label)
###       ("\<^const>Groups.plus_class.plus" ("_position" l) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("_applC" ("_position" Label) ("_position" l))
###     ("\<^const>HOL.eq" ("_position" i)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 16 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("_position" Entry) ("_position" i))
###     ("_position" Entry)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("_position" Entry)
###     ("\<^const>HOL.eq" ("_position" i) ("_position" Entry))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("_position" Exit) ("_position" i))
###     ("_position" Exit)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("_position" Exit)
###     ("\<^const>HOL.eq" ("_position" i) ("_position" Exit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 20 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" Exit) ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Exit))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" Exit)
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Exit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("_position" Exit)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Exit))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i) ("_position" Exit))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Exit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Ambiguous input (line 26 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" Entry) ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" Entry)
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("_position" Entry)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i) ("_position" Entry))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" c))
###         ("_position" n'))
###       ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" c) ("_position" n')))
###       ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" n'))
###         ("_position" c))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" c))
###       ("\<^const>PCFG.label_incr" ("_position" n') ("_position" c))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>PCFG.label_incr" ("_position" n') ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###         ("_position" m))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m)))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m))
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("\<^const>PCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("_position" j))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###         ("_position" m))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m)))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m))
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("\<^const>PCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("_position" j))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i)))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n)))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n))
###         ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i)))
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i)))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n)))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n))
###         ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i)))
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l))
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1940 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs)))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("_applC" ("_position" Label) ("_position" l))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("_applC" ("_position" Label) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater_eq" ("_position" l)
###       ("_position" i))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l))
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater_eq" ("_position" l)
###       ("_position" i))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1942 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" c') ("_position" cs'))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" same_level_path_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" a)
###                 ("_applC" ("_position" get_return_edges) ("_position" c'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p)
###             ("_idts" ("_position" f)
###               ("_idts" ("_position" c') ("_position" cs'))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" same_level_path_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" a)
###                 ("_applC" ("_position" get_return_edges) ("_position" c'))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.list.Cons" ("_position" a) ("_position" as)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 55 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###           ("_position" n))
###         ("_position" i)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 59 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i)
###           ("_applC" ("_position" Label)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1956 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2248 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" upd_cs)
###             ("_cargs" ("_position" cs) ("_position" as)))
###           ("\<^const>List.list.Nil")))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_Ball" ("_position" a)
###             ("_applC" ("_position" set) ("_position" as))
###             ("_applC" ("_position" valid_edge) ("_position" a))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" c)
###               ("_applC" ("_position" set) ("_position" cs))
###               ("_applC" ("_position" valid_edge) ("_position" c))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a)
###           ("\<^const>List.append" ("_position" as) ("_position" cs))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2527 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" same_level_path_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2715 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 9 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                 ("_position" p) ("_position" f)))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" p) ("_position" f))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>HOL.Ex_binder"
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" same_level_path) ("_position" as)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_Ball" ("_position" a)
###           ("_applC" ("_position" set) ("_position" as))
###           ("_applC" ("_position" valid_edge) ("_position" a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_applC" ("_position" length)
###         ("_filter" ("_position" a) ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.Ex_binder"
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2746 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 7 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>local.path" ("_position" n) ("_position" as)
###         ("\<^const>HOL.conj" ("_position" n')
###           ("_applC" ("_position" same_level_path) ("_position" as)))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###     ("_position" n'))
###   ("\<^const>local.path" ("_position" n) ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_applC" ("_position" same_level_path) ("_position" as)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path"
###     ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###     ("_position" as)
###     ("\<^const>HOL.conj" ("_position" n')
###       ("_applC" ("_position" same_level_path) ("_position" as)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.eq" ("_position" n')
###       ("\<^const>HOL.conj"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))
###         ("_applC" ("_position" same_level_path) ("_position" as))))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###     ("_position" n'))
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path" ("_position" n) ("_position" as)
###       ("_position" n'))
###     ("_applC" ("_position" same_level_path) ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.eq" ("_position" n')
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n'))))
###     ("_applC" ("_position" same_level_path) ("_position" as))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path"
###       ("\<^fixed>same_level_path'" ("_position" n) ("_position" as)
###         ("\<^const>Pure.eq" ("_position" n') ("_position" n)))
###       ("_position" as) ("_position" n'))
###     ("_applC" ("_position" same_level_path) ("_position" as))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2748 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.valid_path'" ("_position" n) ("_position" as)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.valid_path'"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" as) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2752 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###           ("_position" n'))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("_position" n'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.same_level_path'"
###     ("\<^const>local.intra_path" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop" ("_position" n))))
###     ("_position" as) ("_position" n')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2772 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" get_proc) ("_position" n))
###           ("_applC" ("_position" get_proc) ("_position" n')))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" get_proc) ("_position" n))
###       ("_applC" ("_position" get_proc) ("_position" n')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.same_level_path'" ("_position" n) ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" get_proc) ("_position" n)))))
###     ("_applC" ("_position" get_proc) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2894 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG" ("_position" prog) ("_position" Entry)
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" s) ("_position" True))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG" ("_position" prog) ("_position" Entry)
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" s) ("_position" True))))
###       ("_position" Label))
###     ("\<^const>Groups.zero_class.zero")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.one_class.one"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.one_class.one"))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.one_class.one"))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2933 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))
###           ("_case_syntax" ("_position" cs)
###             ("_case2"
###               ("_case1" ("\<^const>List.list.Nil") ("_position" False))
###               ("_case2"
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" c')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a)))
###                     ("_applC" ("_position" same_level_path_rev_aux)
###                       ("_cargs" ("_position" cs') ("_position" as)))))
###                 ("_case1" ("\<^const>Pure.dummy_pattern")
###                   ("_applC" ("_position" same_level_path_rev_aux)
###                     ("_cargs" ("_position" cs) ("_position" as))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case1" ("\<^const>List.list.Nil") ("_position" False))))
###           ("_case2"
###             ("_case1"
###               ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))
###               ("\<^const>HOL.conj"
###                 ("\<^const>Set.member" ("_position" c')
###                   ("_applC" ("_position" get_return_edges) ("_position" a)))
###                 ("_applC" ("_position" same_level_path_rev_aux)
###                   ("_cargs" ("_position" cs') ("_position" as)))))
###             ("_case1" ("\<^const>Pure.dummy_pattern")
###               ("_applC" ("_position" same_level_path_rev_aux)
###                 ("_cargs" ("_position" cs) ("_position" as))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("_applC" ("_position" same_level_path_rev_aux)
###       ("_cargs" ("_position" cs)
###         ("\<^const>List.append" ("_position" as)
###           ("_list" ("_position" a)))))
###     ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###       ("_case2"
###         ("_case1"
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_case2"
###           ("_case1"
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs))
###             ("_case_syntax" ("_position" cs)
###               ("_case2"
###                 ("_case1" ("\<^const>List.list.Nil") ("_position" False))
###                 ("_case1"
###                   ("\<^const>List.list.Cons" ("_position" c')
###                     ("_position" cs'))
###                   ("\<^const>HOL.conj"
###                     ("\<^const>Set.member" ("_position" c')
###                       ("_applC" ("_position" get_return_edges)
###                         ("_position" a)))
###                     ("_applC" ("_position" same_level_path_rev_aux)
###                       ("_cargs" ("_position" cs') ("_position" as))))))))
###           ("_case1" ("\<^const>Pure.dummy_pattern")
###             ("_applC" ("_position" same_level_path_rev_aux)
###               ("_cargs" ("_position" cs) ("_position" as)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 88 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" e)
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" update)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" V) ("_position" e)))))))
###         ("_position" Label))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" update)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" V) ("_position" e)))))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>Proc_CFG" ("_position" e)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" update)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" V) ("_position" e)))))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" update)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" V) ("_position" e)))))))
###       ("_position" Label))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###     ("_position" Exit)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>Proc_CFG" ("_position" e)
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###       ("_position" Exit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 94 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 97 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("_applC"
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###           ("_position" et) ("_position" Label))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et)
###       ("_applC" ("_position" Label)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et)
###         ("_applC" ("_position" Label)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_position" n) ("_position" et) ("_position" Label))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 114 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 118 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" true))))))))
###       ("_position" Label))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c')
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" true))))))))
###         ("_position" Label))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>Proc_CFG" ("_position" c')
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" true))))))))
###       ("_applC" ("_position" Label)
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" true))))))))
###     ("_applC" ("_position" Label)
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_position" Label))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c')
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" false))))))))
###         ("_position" Label))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>Proc_CFG" ("_position" c')
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" false))))))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" true))))))))
###         ("_position" Label))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" true))))))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" true))))))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" true))))))))
###       ("_position" Label))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 124 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>Proc_CFG" ("_position" c')
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###       ("_position" Exit))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###     ("_position" Exit)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>Proc_CFG" ("_position" c')
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.While" ("_position" b)
###         ("\<^fixed>Proc_CFG" ("_position" c')
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_position" et) ("_position" n')))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et) ("_position" n'))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" false))))))))
###         ("_position" Label))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" false))))))))
###     ("_applC" ("_position" Label)
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_applC" ("_position" Label)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_position" Label))
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" false))))))))
###         ("_position" Label))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" false))))))))
###     ("_applC" ("_position" Label)
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_position" Label))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et) ("_position" Label))
###       ("\<^const>Groups.zero_class.zero"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("_applC"
###         ("\<^fixed>Proc_CFG" ("_position" c')
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_position" et) ("_position" Label))
###         ("\<^const>Groups.zero_class.zero")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>Proc_CFG" ("_position" c')
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("_applC" ("_position" Label)
###           ("\<^const>Groups.zero_class.zero"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("_cargs" ("_position" es)
###         ("_cargs"
###           ("\<^fixed>Proc_CFG" ("_position" rets)
###             ("_applC" ("_position" Label)
###               ("\<^const>Groups.zero_class.zero"))
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" es)
###                   ("_tuple_arg" ("_position" rets)))))
###             ("_position" Label))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("_cargs"
###         ("\<^fixed>Proc_CFG" ("_applC" ("_position" es) ("_position" rets))
###           ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_position" Label))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs"
###       ("\<^fixed>Proc_CFG"
###         ("_applC" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets)))
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_position" Label))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("_applC" ("_position" Call)
###       ("_cargs" ("_position" p)
###         ("_cargs" ("_position" es) ("_position" rets))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" CEdge)
###       ("_tuple" ("_position" p)
###         ("_tuple_args" ("_position" es) ("_tuple_arg" ("_position" rets)))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("\<^fixed>Proc_CFG"
###       ("_applC" ("_position" p)
###         ("_cargs" ("_position" es) ("_position" rets)))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("\<^fixed>Proc_CFG" ("_applC" ("_position" es) ("_position" rets))
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("_cargs" ("_position" es)
###         ("\<^fixed>Proc_CFG" ("_position" rets)
###           ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_applC" ("_position" Label)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" Label))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("_applC" ("_position" Call)
###       ("_cargs" ("_position" p)
###         ("_cargs" ("_position" es) ("_position" rets))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###     ("_position" Exit)))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("\<^fixed>Proc_CFG"
###       ("_applC" ("_position" p)
###         ("_cargs" ("_position" es) ("_position" rets)))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###       ("_position" Exit))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("\<^fixed>Proc_CFG" ("_applC" ("_position" es) ("_position" rets))
###         ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###         ("_position" Exit)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("_cargs" ("_position" es)
###         ("\<^fixed>Proc_CFG" ("_position" rets)
###           ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###           ("_applC" ("_position" IEdge)
###             ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###           ("_position" Exit))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Proc_CFG"
  Proving monotonicity ...
### Ambiguous input (line 211 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_position" et) ("_applC" ("_position" Label) ("_position" l))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" Label))
###       ("_position" l)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 298 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_position" Label))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2949 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" p) ("_position" f))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" same_level_path_rev_aux)
###             ("_cargs"
###               ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###               ("_position" as))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" P)
###               ("_cargs"
###                 ("\<^const>List.list.Cons" ("_position" a) ("_position" cs))
###                 ("_position" as)))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2951 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" c') ("_position" cs')))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" same_level_path_rev_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" c')
###                 ("_applC" ("_position" get_return_edges) ("_position" a))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### ("\<^const>Pure.all_binder"
###   ("_idts" ("_position" cs)
###     ("_idts" ("_position" a)
###       ("_idts" ("_position" as)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p)
###               ("_idts" ("_position" fs)
###                 ("_idts" ("_position" c') ("_position" cs')))))))))
###   ("_bigimpl"
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" cs)
###             ("\<^const>List.list.Cons" ("_position" c') ("_position" cs'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" same_level_path_rev_aux)
###               ("_cargs" ("_position" cs') ("_position" as))))
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>Set.member" ("_position" c')
###                 ("_applC" ("_position" get_return_edges) ("_position" a))))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P)
###                   ("_cargs" ("_position" cs') ("_position" as)))))))))
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" P)
###         ("_cargs" ("_position" cs)
###           ("\<^const>List.append" ("_position" as)
###             ("_list" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3155 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" p) ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###       ("_position" p) ("_position" f))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3173 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_rev_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_return_list)
###             ("_cargs" ("_position" cs) ("_position" n'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_rev_aux)
###                         ("_cargs" ("_position" cs) ("_position" ys))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_rev_cs)
###                         ("_cargs" ("_position" cs) ("_position" ys)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" Q) ("_position" f)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))))
###       ("_applC" ("_position" get_proc) ("_position" n)) ("_position" f))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_rev_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_return_list)
###             ("_cargs" ("_position" cs) ("_position" n'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_rev_aux)
###                         ("_cargs" ("_position" cs) ("_position" ys))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_rev_cs)
###                         ("_cargs" ("_position" cs) ("_position" ys)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" Q) ("_position" f)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q)))
###         ("_applC" ("_position" get_proc) ("_position" n))
###         ("_position" f)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_rev_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_return_list)
###             ("_cargs" ("_position" cs) ("_position" n'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_rev_aux)
###                         ("_cargs" ("_position" cs) ("_position" ys))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_rev_cs)
###                         ("_cargs" ("_position" cs) ("_position" ys)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" Q) ("_position" f)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_applC" ("_position" get_proc) ("_position" n))
###           ("_position" f))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_rev_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_return_list)
###             ("_cargs" ("_position" cs) ("_position" n'))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_rev_aux)
###                         ("_cargs" ("_position" cs) ("_position" ys))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_rev_cs)
###                         ("_cargs" ("_position" cs) ("_position" ys)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a) ("_idts" ("_position" Q) ("_position" f)))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_applC" ("_position" get_proc) ("_position" n))
###             ("_position" f)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3307 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as')
###               ("_list" ("_position" a'))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a')
###             ("_idts" ("_position" as')
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" r)
###                   ("_idts" ("_position" p) ("_position" fs))))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.append" ("_position" as')
###                 ("_list" ("_position" a'))))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q))))
###         ("_position" r) ("_position" p) ("_position" fs))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.append" ("_position" as')
###                 ("_list" ("_position" a'))))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q)))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.conj" ("_list" ("_position" a'))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a'))
###                   ("_position" Q)))
###               ("_position" r) ("_position" p) ("_position" fs)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as')
###               ("_list" ("_position" a'))))
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.append" ("_position" as')
###             ("_list" ("_position" a'))))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" r)
###                 ("_idts" ("_position" p) ("_position" fs))))))
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.CallEdge"
###             ("\<^const>HOL.conj"
###               ("\<^const>List.append" ("_position" as')
###                 ("_list" ("_position" a')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q)))
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as'')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n')
###               ("_position" as'') ("_position" n))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 3373 of "$AFP/HRB-Slicing/StaticInter/CFG.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs)))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r)
###               ("_idts" ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("_position" Q)))
###         ("_position" r) ("_position" p) ("_position" fs)))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CFG"
### 3.002s elapsed time, 7.993s cpu time, 0.794s GC time
Loading theory "Draft.CFGExit" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation")
### Ambiguous input (line 17 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a))
###             ("\<^fixed>Exit"))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge) ("_position" a)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" p) ("_position" f)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" targetnode) ("_position" a))
###             ("\<^fixed>Exit"))))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1207 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###     ("_applC" ("_position" Label) ("_position" l))
###     ("_applC" ("_position" CEdge)
###       ("_tuple" ("_position" p)
###         ("_tuple_args" ("_position" es) ("_tuple_arg" ("_position" rets)))))
###     ("_applC" ("_position" Label) ("_position" l'))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###       ("_applC" ("_position" Label) ("_position" l))
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" Label))
###     ("_position" l')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 1255 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PCFG.Proc_CFG" ("_position" c)
###             ("_applC" ("_position" Label) ("_position" l))
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" Label))
###           ("_position" l')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("_lambda" ("_position" s) ("_position" True))
###         ("_tuple" ("_position" p)
###           ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l'))))
###         ("_position" p')
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_pttrns" ("_position" e) ("_position" cf))
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" e) ("_position" cf))))
###             ("_position" es'))))
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Entry))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PCFG.Proc_CFG" ("_position" c)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_applC" ("_position" Label) ("_position" l'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("_lambda" ("_position" s) ("_position" True))
###         ("_tuple" ("_position" p)
###           ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l'))))
###         ("_position" p')
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_pttrns" ("_position" e) ("_position" cf))
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" e) ("_position" cf))))
###             ("_position" es'))))
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Entry))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1261 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_position" Label))
###         ("_position" l')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" ins)
###               ("_tuple_args" ("_position" outs)
###                 ("_tuple_arg" ("_position" c)))))
###           ("_applC" ("_position" set) ("_position" procs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" Main)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p)
###         ("\<^const>BasicDefs.fun_upds"
###           ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###             ("_position" cf'))
###           ("_position" rets)
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" cf) ("_position" outs)))))
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("_applC" ("_position" Label) ("_position" l))
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_applC" ("_position" Label) ("_position" l'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" ins)
###               ("_tuple_args" ("_position" outs)
###                 ("_tuple_arg" ("_position" c)))))
###           ("_applC" ("_position" set) ("_position" procs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" Main)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p)
###         ("\<^const>BasicDefs.fun_upds"
###           ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###             ("_position" cf'))
###           ("_position" rets)
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" cf) ("_position" outs)))))
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_position" Label))
###         ("_position" l')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" ins)
###               ("_tuple_args" ("_position" outs)
###                 ("_tuple_arg" ("_position" c)))))
###           ("_applC" ("_position" set) ("_position" procs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" Main)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###             ("_position" rets)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" cf) ("_position" outs))))))
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("_applC" ("_position" Label) ("_position" l))
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_applC" ("_position" Label) ("_position" l'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" ins)
###               ("_tuple_args" ("_position" outs)
###                 ("_tuple_arg" ("_position" c)))))
###           ("_applC" ("_position" set) ("_position" procs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" Main)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###             ("_position" rets)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" cf) ("_position" outs))))))
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1266 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PCFG.Proc_CFG" ("_position" c)
###             ("_applC" ("_position" Label) ("_position" l))
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" Label))
###           ("_position" l')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" p)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p')
###         ("\<^const>BasicDefs.fun_upds"
###           ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###             ("_position" cf'))
###           ("_position" rets')
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" cf) ("_position" outs')))))
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PCFG.Proc_CFG" ("_position" c)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_applC" ("_position" Label) ("_position" l'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" p)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p')
###         ("\<^const>BasicDefs.fun_upds"
###           ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###             ("_position" cf'))
###           ("_position" rets')
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" cf) ("_position" outs')))))
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PCFG.Proc_CFG" ("_position" c)
###             ("_applC" ("_position" Label) ("_position" l))
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" Label))
###           ("_position" l')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" p)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p')
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###             ("_position" rets')
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" cf) ("_position" outs'))))))
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PCFG.Proc_CFG" ("_position" c)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_applC" ("_position" Label) ("_position" l'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" p)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p')
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###             ("_position" rets')
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" cf) ("_position" outs'))))))
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "PCFG"
locale CFGExit
  fixes sourcenode :: "'edge => 'node"
    and targetnode :: "'edge => 'node"
    and kind :: "'edge => ('var, 'val, 'ret, 'pname) edge_kind"
    and valid_edge :: "'edge => bool"
    and Entry :: "'node"  (\<open>'('_Entry'_')\<close>)
    and get_proc :: "'node => 'pname"
    and get_return_edges :: "'edge => 'edge set"
    and procs :: "('pname * 'var list * 'var list) list"
    and Main :: "'pname"
    and Exit :: "'node"  (\<open>'('_Exit'_')\<close>)
  assumes
    "CFGExit sourcenode targetnode kind valid_edge (_Entry_) get_proc
      get_return_edges procs Main (_Exit_)"
### Ambiguous input (line 54 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 6 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" sourcenode) ("_position" a)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f))))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" sourcenode) ("_position" a)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))
###             ("_position" p) ("_position" f)))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" sourcenode) ("_position" a)))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" a))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q)))))
###       ("_position" p) ("_position" f))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" sourcenode) ("_position" a)))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" a))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q))))
###         ("_position" p) ("_position" f)))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" sourcenode) ("_position" a)))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge) ("_position" a))
###             ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###               ("_position" Q)))
###           ("_position" p) ("_position" f))))))
### ("\<^const>Pure.eq" ("_applC" ("_position" method_exit) ("_position" n))
###   ("\<^const>HOL.disj" ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit"))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q) ("_idts" ("_position" p) ("_position" f))))
###       ("\<^const>HOL.eq" ("_position" n)
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" sourcenode) ("_position" a))
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" valid_edge) ("_position" a))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a))
###                 ("_position" Q))))
###           ("_position" p) ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
  Proving monotonicity ...
### Ambiguous input (line 59 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" method_exit) ("_position" n)))
###     ("_asms"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit")))
###         ("\<^const>HOL.Trueprop" ("_position" P)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" f) ("_position" p))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" sourcenode) ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" valid_edge) ("_position" a)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" kind) ("_position" a))
###                         ("_position" Q))
###                       ("_position" p) ("_position" f))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" method_exit) ("_position" n)))
###     ("_asms"
###       ("\<^const>Pure.imp"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n) ("\<^fixed>Exit")))
###         ("\<^const>HOL.Trueprop" ("_position" P)))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" a)
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" f) ("_position" p))))
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("\<^const>HOL.eq" ("_position" n)
###                   ("_applC" ("_position" sourcenode) ("_position" a))))
###               ("_asms"
###                 ("\<^const>HOL.Trueprop"
###                   ("_applC" ("_position" valid_edge) ("_position" a)))
###                 ("_asm"
###                   ("\<^const>HOL.Trueprop"
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" kind) ("_position" a))
###                       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                         ("_position" Q) ("_position" p)
###                         ("_position" f)))))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 142 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" n') ("\<^fixed>Exit"))
###             ("_position" as)))))
###     ("\<^const>List.list.Nil")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###     ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" n') ("\<^fixed>Exit"))
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.list.Nil")))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###       ("_position" n')))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" n') ("\<^fixed>Exit"))
###       ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###       ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n') ("\<^fixed>Exit")))))
###     ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.eq"
###       ("\<^const>local.path" ("\<^fixed>Exit") ("_position" as)
###         ("\<^const>Pure.imp" ("\<^const>HOL.Trueprop" ("_position" n'))
###           ("\<^const>HOL.Trueprop" ("_position" n'))))
###       ("\<^fixed>Exit"))
###     ("\<^const>HOL.eq" ("_position" as) ("\<^const>List.list.Nil"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 161 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_aux)
###                         ("_cargs" ("_position" cs) ("_position" xs))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_cs)
###                         ("_cargs" ("_position" cs) ("_position" xs)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" r) ("_position" fs))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))))
###       ("_position" r) ("_applC" ("_position" get_proc) ("_position" n'))
###       ("_position" fs))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_aux)
###                         ("_cargs" ("_position" cs) ("_position" xs))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_cs)
###                         ("_cargs" ("_position" cs) ("_position" xs)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r) ("_position" fs))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" valid_edge) ("_position" a))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q)))
###         ("_position" r) ("_applC" ("_position" get_proc) ("_position" n'))
###         ("_position" fs)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_aux)
###                         ("_cargs" ("_position" cs) ("_position" xs))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_cs)
###                         ("_cargs" ("_position" cs) ("_position" xs)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r) ("_position" fs))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_applC" ("_position" get_proc) ("_position" n'))
###           ("_position" fs))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_path_aux)
###         ("_cargs" ("_position" cs) ("_position" as))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>local.path" ("_position" n) ("_position" as)
###           ("_position" n')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" valid_call_list)
###             ("_cargs" ("_position" cs) ("_position" n))))
###         ("_asms"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.not_equal" ("_position" cs)
###               ("\<^const>List.list.Nil")))
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.All_binder"
###                 ("_idts" ("_position" xs) ("_position" ys))
###                 ("\<^const>HOL.implies"
###                   ("\<^const>HOL.eq" ("_position" as)
###                     ("\<^const>List.append" ("_position" xs)
###                       ("_position" ys)))
###                   ("\<^const>HOL.disj"
###                     ("\<^const>HOL.Not"
###                       ("_applC" ("_position" same_level_path_aux)
###                         ("_cargs" ("_position" cs) ("_position" xs))))
###                     ("\<^const>HOL.not_equal"
###                       ("_applC" ("_position" upd_cs)
###                         ("_cargs" ("_position" cs) ("_position" xs)))
###                       ("\<^const>List.list.Nil")))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" a)
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r) ("_position" fs))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" valid_edge) ("_position" a))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r)
###             ("_applC" ("_position" get_proc) ("_position" n'))
###             ("_position" fs)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.PCFG"
### 1.684s elapsed time, 3.973s cpu time, 1.316s GC time
Loading theory "Draft.WellFormProgs" (required by "Draft.InterpretationMoreTemplates" via "Draft.Interpretation")
### Ambiguous input (line 293 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 6 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###               ("_position" p) ("_position" f)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" a')
###             ("_idts" ("_position" as')
###               ("_idts" ("_position" Q)
###                 ("_idts" ("_position" p) ("_position" f)))))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.list.Cons" ("_position" a')
###                 ("_position" as')))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q))))
###         ("_position" p) ("_position" f))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq" ("_position" as)
###               ("\<^const>List.list.Cons" ("_position" a')
###                 ("_position" as')))
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q)))
###           ("_position" p) ("_position" f)))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a')
###             ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###               ("\<^const>HOL.conj" ("_position" as')
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a'))
###                   ("_position" Q)))
###               ("_position" p) ("_position" f)))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" kind) ("_position" a'))
###               ("_position" Q))
###             ("_position" p) ("_position" f))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.disj"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" a') ("_position" as'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>List.list.Cons" ("_position" a') ("_position" as')))
###         ("_applC" ("_position" intra_kind)
###           ("_applC" ("_position" kind) ("_position" a')))))
###     ("\<^const>HOL.disj"
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a')
###           ("_idts" ("_position" as')
###             ("_idts" ("_position" Q)
###               ("_idts" ("_position" p) ("_position" f)))))
###         ("\<^const>HOL.eq" ("_position" as)
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###             ("\<^const>HOL.conj"
###               ("\<^const>List.list.Cons" ("_position" a') ("_position" as'))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" kind) ("_position" a'))
###                 ("_position" Q)))
###             ("_position" p) ("_position" f))))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" as')
###           ("_idts" ("_position" as'') ("_position" n')))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_position" as)
###             ("\<^const>List.append" ("_position" as') ("_position" as'')))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.not_equal" ("_position" as')
###               ("\<^const>List.list.Nil"))
###             ("\<^const>local.same_level_path'" ("_position" n)
###               ("_position" as') ("_position" n'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 353 of "$AFP/HRB-Slicing/StaticInter/CFGExit.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q) ("_idts" ("_position" f) ("_position" p)))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###             ("_position" p) ("_position" f)))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" f) ("_position" p)))
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("_position" Q)))
###         ("_position" p) ("_position" f)))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" a') ("_applC" ("_position" set) ("_position" as'))
###     ("\<^const>HOL.disj"
###       ("_applC" ("_position" intra_kind)
###         ("_applC" ("_position" kind) ("_position" a')))
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" Q) ("_idts" ("_position" f) ("_position" p)))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###             ("_position" Q))
###           ("_position" p) ("_position" f))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.CFGExit"
### 0.827s elapsed time, 2.090s cpu time, 1.044s GC time
### Ambiguous input (line 278 of "$AFP/HRB-Slicing/Proc/WellFormProgs.thy") produces 22 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" c')
###                 ("_idts" ("_position" n)
###                   ("_idts" ("_position" n')
###                     ("_idts" ("_position" es) ("_position" rets)))))
###               ("_applC"
###                 ("\<^const>PCFG.Proc_CFG" ("_position" c') ("_position" n)
###                   ("_applC" ("_position" CEdge)
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" es)
###                         ("_tuple_arg" ("_position" rets)))))
###                   ("\<^const>HOL.implies" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" distinct) ("_position" rets))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" rets))
###                           ("_applC" ("_position" length)
###                             ("_position" outs)))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" es))
###                           ("_position" length))))))
###                 ("_position" ins)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("_applC"
###               ("\<^const>PCFG.Proc_CFG"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" c')
###                     ("_idts" ("_position" n)
###                       ("_idts" ("_position" n')
###                         ("_idts" ("_position" es) ("_position" rets)))))
###                   ("_position" c'))
###                 ("_position" n)
###                 ("_applC" ("_position" CEdge)
###                   ("_tuple" ("_position" p)
###                     ("_tuple_args" ("_position" es)
###                       ("_tuple_arg" ("_position" rets)))))
###                 ("\<^const>HOL.implies" ("_position" n')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" distinct) ("_position" rets))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" rets))
###                         ("_applC" ("_position" length) ("_position" outs)))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" es))
###                         ("_position" length))))))
###               ("_position" ins))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.eq"
###               ("\<^const>PCFG.Proc_CFG"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" c')
###                     ("_idts" ("_position" n)
###                       ("_idts" ("_position" n')
###                         ("_idts" ("_position" es) ("_position" rets)))))
###                   ("_position" c'))
###                 ("_position" n)
###                 ("_applC" ("_position" CEdge)
###                   ("_tuple" ("_position" p)
###                     ("_tuple_args" ("_position" es)
###                       ("_tuple_arg" ("_position" rets)))))
###                 ("\<^const>HOL.implies" ("_position" n')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" distinct) ("_position" rets))
###                     ("\<^const>HOL.conj"
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" rets))
###                         ("_applC" ("_position" length) ("_position" outs)))
###                       ("_applC" ("_position" length) ("_position" es))))))
###               ("_applC" ("_position" length) ("_position" ins)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" c')
###                 ("_idts" ("_position" n)
###                   ("_idts" ("_position" n')
###                     ("_idts" ("_position" es) ("_position" rets)))))
###               ("\<^const>HOL.eq"
###                 ("\<^const>PCFG.Proc_CFG" ("_position" c') ("_position" n)
###                   ("_applC" ("_position" CEdge)
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" es)
###                         ("_tuple_arg" ("_position" rets)))))
###                   ("\<^const>HOL.implies" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" distinct) ("_position" rets))
###                       ("\<^const>HOL.conj"
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" rets))
###                           ("_applC" ("_position" length)
###                             ("_position" outs)))
###                         ("_applC" ("_position" length) ("_position" es))))))
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" c')
###                 ("_idts" ("_position" n)
###                   ("_idts" ("_position" n')
###                     ("_idts" ("_position" es) ("_position" rets)))))
###               ("\<^const>HOL.conj"
###                 ("_applC"
###                   ("\<^const>PCFG.Proc_CFG" ("_position" c') ("_position" n)
###                     ("_applC" ("_position" CEdge)
###                       ("_tuple" ("_position" p)
###                         ("_tuple_args" ("_position" es)
###                           ("_tuple_arg" ("_position" rets)))))
###                     ("\<^const>HOL.implies" ("_position" n')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" distinct) ("_position" rets))
###                         ("\<^const>HOL.eq"
###                           ("_applC" ("_position" length) ("_position" rets))
###                           ("_position" length)))))
###                   ("_position" outs))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" es))
###                   ("_applC" ("_position" length) ("_position" ins)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.conj"
###               ("_applC"
###                 ("\<^const>PCFG.Proc_CFG"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" c')
###                       ("_idts" ("_position" n)
###                         ("_idts" ("_position" n')
###                           ("_idts" ("_position" es) ("_position" rets)))))
###                     ("_position" c'))
###                   ("_position" n)
###                   ("_applC" ("_position" CEdge)
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" es)
###                         ("_tuple_arg" ("_position" rets)))))
###                   ("\<^const>HOL.implies" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" distinct) ("_position" rets))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" rets))
###                         ("_position" length)))))
###                 ("_position" outs))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" length) ("_position" es))
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.eq"
###                 ("\<^const>PCFG.Proc_CFG"
###                   ("\<^const>HOL.All_binder"
###                     ("_idts" ("_position" c')
###                       ("_idts" ("_position" n)
###                         ("_idts" ("_position" n')
###                           ("_idts" ("_position" es) ("_position" rets)))))
###                     ("_position" c'))
###                   ("_position" n)
###                   ("_applC" ("_position" CEdge)
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" es)
###                         ("_tuple_arg" ("_position" rets)))))
###                   ("\<^const>HOL.implies" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" distinct) ("_position" rets))
###                       ("_applC" ("_position" length) ("_position" rets)))))
###                 ("_applC" ("_position" length) ("_position" outs)))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" length) ("_position" es))
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" c')
###                 ("_idts" ("_position" n)
###                   ("_idts" ("_position" n')
###                     ("_idts" ("_position" es) ("_position" rets)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>HOL.eq"
###                   ("\<^const>PCFG.Proc_CFG" ("_position" c') ("_position" n)
###                     ("_applC" ("_position" CEdge)
###                       ("_tuple" ("_position" p)
###                         ("_tuple_args" ("_position" es)
###                           ("_tuple_arg" ("_position" rets)))))
###                     ("\<^const>HOL.implies" ("_position" n')
###                       ("\<^const>HOL.conj"
###                         ("_applC" ("_position" distinct) ("_position" rets))
###                         ("_applC" ("_position" length)
###                           ("_position" rets)))))
###                   ("_applC" ("_position" length) ("_position" outs)))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" es))
###                   ("_applC" ("_position" length) ("_position" ins)))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.conj"
###               ("\<^const>PCFG.Proc_CFG"
###                 ("\<^const>HOL.All_binder"
###                   ("_idts" ("_position" c')
###                     ("_idts" ("_position" n)
###                       ("_idts" ("_position" n')
###                         ("_idts" ("_position" es) ("_position" rets)))))
###                   ("_position" c'))
###                 ("_position" n)
###                 ("_applC" ("_position" CEdge)
###                   ("_tuple" ("_position" p)
###                     ("_tuple_args" ("_position" es)
###                       ("_tuple_arg" ("_position" rets)))))
###                 ("\<^const>HOL.implies" ("_position" n')
###                   ("\<^const>HOL.conj"
###                     ("_applC" ("_position" distinct) ("_position" rets))
###                     ("\<^const>HOL.eq"
###                       ("_applC" ("_position" length) ("_position" rets))
###                       ("_applC" ("_position" length) ("_position" outs))))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" length) ("_position" es))
###                 ("_applC" ("_position" length) ("_position" ins))))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" wf)
###     ("_cargs" ("_position" prog) ("_position" procs)))
###   ("\<^const>HOL.conj"
###     ("_applC" ("_position" well_formed) ("_position" procs))
###     ("\<^const>HOL.All_binder" ("_idts" ("_position" ps) ("_position" p))
###       ("\<^const>HOL.implies"
###         ("_applC" ("_position" containsCall)
###           ("_cargs" ("_position" procs)
###             ("_cargs" ("_position" prog)
###               ("_cargs" ("_position" ps) ("_position" p)))))
###         ("\<^const>HOL.Ex_binder"
###           ("_idts" ("_position" ins)
###             ("_idts" ("_position" outs) ("_position" c)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" ins)
###                   ("_tuple_args" ("_position" outs)
###                     ("_tuple_arg" ("_position" c)))))
###               ("_applC" ("_position" set) ("_position" procs)))
###             ("\<^const>HOL.All_binder"
###               ("_idts" ("_position" c')
###                 ("_idts" ("_position" n)
###                   ("_idts" ("_position" n')
###                     ("_idts" ("_position" es) ("_position" rets)))))
###               ("\<^const>HOL.conj"
###                 ("\<^const>PCFG.Proc_CFG" ("_position" c') ("_position" n)
###                   ("_applC" ("_position" CEdge)
###                     ("_tuple" ("_position" p)
###                       ("_tuple_args" ("_position" es)
###                         ("_tuple_arg" ("_position" rets)))))
###                   ("\<^const>HOL.implies" ("_position" n')
###                     ("\<^const>HOL.conj"
###                       ("_applC" ("_position" distinct) ("_position" rets))
###                       ("\<^const>HOL.eq"
###                         ("_applC" ("_position" length) ("_position" rets))
###                         ("_applC" ("_position" length)
###                           ("_position" outs))))))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" length) ("_position" es))
###                   ("_applC" ("_position" length) ("_position" ins)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.WellFormProgs"
### 0.174s elapsed time, 0.259s cpu time, 0.028s GC time
Loading theory "Draft.Interpretation" (required by "Draft.InterpretationMoreTemplates")
### Ambiguous input (line 23 of "$AFP/HRB-Slicing/Proc/Interpretation.thy") produces 3 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" get_return_edges)
###     ("_cargs" ("_position" wfp) ("_position" a)))
###   ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###     ("_case2"
###       ("_case1"
###         ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###           ("_position" r) ("_position" p) ("_position" fs))
###         ("_Coll" ("_position" a')
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge)
###               ("_cargs" ("_position" wfp) ("_position" a')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" Q') ("_position" f'))
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a'))
###                     ("_position" Q'))
###                   ("_position" p) ("_position" f')))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" targetnode) ("_position" a'))
###                 ("_position" r))))))
###       ("_case1" ("\<^const>Pure.dummy_pattern") ("\<^const>Set.empty")))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" get_return_edges)
###     ("_cargs" ("_position" wfp) ("_position" a)))
###   ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###     ("_case2"
###       ("_case1"
###         ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###           ("_position" r) ("_position" p) ("_position" fs))
###         ("_Coll" ("_position" a')
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge)
###               ("_cargs" ("_position" wfp) ("_position" a')))
###             ("\<^const>HOL.conj"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.Ex_binder"
###                   ("_idts" ("_position" Q') ("_position" f'))
###                   ("\<^const>HOL.eq"
###                     ("_applC" ("_position" kind) ("_position" a'))
###                     ("_position" Q')))
###                 ("_position" p) ("_position" f'))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" targetnode) ("_position" a'))
###                 ("_position" r))))))
###       ("_case1" ("\<^const>Pure.dummy_pattern") ("\<^const>Set.empty")))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" get_return_edges)
###     ("_cargs" ("_position" wfp) ("_position" a)))
###   ("_case_syntax" ("_applC" ("_position" kind) ("_position" a))
###     ("_case2"
###       ("_case1"
###         ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###           ("_position" r) ("_position" p) ("_position" fs))
###         ("_Coll" ("_position" a')
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" valid_edge)
###               ("_cargs" ("_position" wfp) ("_position" a')))
###             ("\<^const>HOL.conj"
###               ("\<^const>HOL.Ex_binder"
###                 ("_idts" ("_position" Q') ("_position" f'))
###                 ("\<^const>HOL.eq"
###                   ("_applC" ("_position" kind) ("_position" a'))
###                   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                     ("_position" Q') ("_position" p) ("_position" f'))))
###               ("\<^const>HOL.eq"
###                 ("_applC" ("_position" targetnode) ("_position" a'))
###                 ("_position" r))))))
###       ("_case1" ("\<^const>Pure.dummy_pattern") ("\<^const>Set.empty")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/HRB-Slicing/Proc/Interpretation.thy") produces 3 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.CallEdge"
###       ("\<^const>HOL.All_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" kind) ("_position" a)) ("_position" Q)))
###       ("_position" r) ("_position" p) ("_position" fs)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_return_edges)
###         ("_cargs" ("_position" wfp) ("_position" a)))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("\<^const>HOL.not_equal"
###           ("_applC" ("_position" kind) ("_position" a)) ("_position" Q))
###         ("_position" r) ("_position" p) ("_position" fs))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_return_edges)
###         ("_cargs" ("_position" wfp) ("_position" a)))
###       ("\<^const>Set.empty"))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.All_binder"
###       ("_idts" ("_position" Q)
###         ("_idts" ("_position" r)
###           ("_idts" ("_position" p) ("_position" fs))))
###       ("\<^const>HOL.not_equal"
###         ("_applC" ("_position" kind) ("_position" a))
###         ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" get_return_edges)
###         ("_cargs" ("_position" wfp) ("_position" a)))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/HRB-Slicing/Proc/Interpretation.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.CallEdge"
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###       ("_position" Q))
###     ("_position" r) ("_position" p) ("_position" fs)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###     ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q) ("_position" r)
###       ("_position" p) ("_position" fs))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/HRB-Slicing/Proc/Interpretation.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("_position" Q')))
###     ("_position" p) ("_position" f')))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("_position" Q'))
###       ("_position" p) ("_position" f'))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###     ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###         ("_position" p) ("_position" f')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/HRB-Slicing/Proc/Interpretation.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" get_return_edges)
###         ("_cargs" ("_position" wfp) ("_position" a)))
###       ("\<^const>Set.empty"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.not_equal"
###       ("_applC" ("_position" get_return_edges)
###         ("_cargs" ("_position" wfp) ("_position" a)))
###       ("\<^const>Set.empty"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/HRB-Slicing/Proc/Interpretation.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges)
###               ("_cargs" ("_position" wfp) ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q')))
###       ("_position" p) ("_position" f'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges)
###               ("_cargs" ("_position" wfp) ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###       ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q')))
###       ("_position" p) ("_position" f'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges)
###               ("_cargs" ("_position" wfp) ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q'))
###         ("_position" p) ("_position" f')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges)
###               ("_cargs" ("_position" wfp) ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###           ("_position" Q'))
###         ("_position" p) ("_position" f')))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###           ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###             ("_position" r) ("_position" p) ("_position" fs))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges)
###               ("_cargs" ("_position" wfp) ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###           ("_position" p) ("_position" f'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" valid_edge)
###         ("_cargs" ("_position" wfp) ("_position" a))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>BasicDefs.edge_kind.CallEdge"
###           ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a))
###             ("_position" Q))
###           ("_position" r) ("_position" p) ("_position" fs)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member" ("_position" a')
###             ("_applC" ("_position" get_return_edges)
###               ("_cargs" ("_position" wfp) ("_position" a))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" Q') ("_position" f'))
###       ("\<^const>HOL.eq" ("_applC" ("_position" kind) ("_position" a'))
###         ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q')
###           ("_position" p) ("_position" f'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Interpretation"
### 1.745s elapsed time, 2.745s cpu time, 1.386s GC time
Loading theory "Draft.InterpretationMoreTemplates"
val templateLemmas =
   [("Interpretation.get_return_edges_call_nonempty",
     "[| valid_edge ?wfp ?a;
         kind ?a = ?Q:?r\<hookrightarrow>\<^bsub>?p\<^esub>?fs |]
      ==> get_return_edges ?wfp ?a ~= {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 4)),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1),
            template_var 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 5),
               template_var 4),
             template_hole 0)
           ))),
    ("Interpretation.get_return_edges_non_call_empty",
     "ALL Q r p fs. kind ?a ~= Q:r\<hookrightarrow>\<^bsub>p\<^esub>fs ==>
      get_return_edges ?wfp ?a = {}",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Interpretation.only_return_edges_in_get_return_edges",
     "[| valid_edge ?wfp ?a;
         kind ?a = ?Q:?r\<hookrightarrow>\<^bsub>?p\<^esub>?fs;
         ?a' : get_return_edges ?wfp ?a |]
      ==> EX Q' f'. kind ?a' = Q'\<hookleftarrow>\<^bsub>?p\<^esub>f'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 6),
              template_var 5)
            ),
        template_equation
         (template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 5)),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 6),
                template_var 5))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Interpretation.call_has_return_edge",
     "[| valid_edge ?wfp ?a;
         kind ?a = ?Q:?r\<hookrightarrow>\<^bsub>?p\<^esub>?fs;
         !!a'. [| valid_edge ?wfp a';
                  EX Q' f'.
                     kind a' = Q'\<hookleftarrow>\<^bsub>?p\<^esub>f';
                  targetnode a' = ?r |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5)
            ),
        template_equation
         (template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 5)),
          template_app
           (template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2),
            template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.InterpretationMoreTemplates"
### 0.425s elapsed time, 0.709s cpu time, 0.085s GC time
val it = (): unit
