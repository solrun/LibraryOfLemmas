Loading theory "Draft.AuxLemmas" (required by "Draft.LabelsMoreTemplates" via "Draft.Labels" via "Draft.Com" via "Draft.BasicDefs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.LabelsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.LabelsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.LabelsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "Draft.AuxLemmas"
### 0.037s elapsed time, 0.185s cpu time, 0.000s GC time
Loading theory "Draft.BasicDefs" (required by "Draft.LabelsMoreTemplates" via "Draft.Labels" via "Draft.Com")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.511s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.LabelsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### Ambiguous input (line 69 of "$AFP/HRB-Slicing/StaticInter/BasicDefs.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>BasicDefs.fun_upds"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###             ("_position" ys))
###           ("_position" V))
###         ("_position" f'))
###       ("_position" xs) ("_position" ys))
###     ("_position" V)))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###       ("_position" ys))
###     ("_cargs"
###       ("\<^const>BasicDefs.fun_upds"
###         ("\<^const>HOL.eq" ("_position" V) ("_position" f'))
###         ("_position" xs) ("_position" ys))
###       ("_position" V))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###         ("_position" ys))
###       ("_position" V))
###     ("_applC"
###       ("\<^const>BasicDefs.fun_upds" ("_position" f') ("_position" xs)
###         ("_position" ys))
###       ("_position" V))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.213s elapsed time, 0.871s cpu time, 0.041s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.LabelsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.329s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.LabelsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.823s elapsed time, 3.237s cpu time, 0.363s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### Ambiguous input (line 141 of "$AFP/HRB-Slicing/StaticInter/BasicDefs.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" et)
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" et)
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_position" p) ("_position" f))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" et)
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_position" p) ("_position" f))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" et)
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Draft.BasicDefs"
### 1.277s elapsed time, 4.792s cpu time, 0.965s GC time
Loading theory "Draft.Com" (required by "Draft.LabelsMoreTemplates" via "Draft.Labels")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.079s elapsed time, 3.935s cpu time, 0.875s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.993s elapsed time, 6.230s cpu time, 1.072s GC time
Loading theory "Draft.Templates" (required by "Draft.LabelsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.159s cpu time, 0.053s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.LabelsMoreTemplates")
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.531s elapsed time, 1.133s cpu time, 0.088s GC time
### Ambiguous input (line 53 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>num_inner_nodes" ("_position" Skip))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq" ("_position" Skip)
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 55 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###     ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 14 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>HOL.eq"
###           ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###             ("_position" c\<^sub>2))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>2)
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###         ("\<^fixed>num_inner_nodes" ("_position" c))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c)
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets)))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets))))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 61 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.greater"
###     ("\<^const>Com.num_inner_nodes" ("_position" c))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.num_inner_nodes"
###     ("\<^const>Orderings.ord_class.greater" ("_position" c)
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>Com.num_inner_nodes" ("_position" c))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Com"
### 1.726s elapsed time, 3.424s cpu time, 0.321s GC time
Loading theory "Draft.Labels" (required by "Draft.LabelsMoreTemplates")
### Ambiguous input (line 27 of "$AFP/HRB-Slicing/Proc/Labels.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs" ("_position" c\<^sub>2)
###         ("_cargs" ("_position" l) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Groups.plus_class.plus" ("_position" l)
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###             ("\<^const>Groups.one_class.one"))
###           ("_position" c))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs" ("_position" c\<^sub>2)
###         ("_cargs" ("_position" l) ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" labels)
###       ("_cargs"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" l)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_position" c))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "labels"
  Proving monotonicity ...
### theory "Draft.Labels"
### 0.073s elapsed time, 0.079s cpu time, 0.000s GC time
Loading theory "Draft.LabelsMoreTemplates"
val templateLemmas =
   [("Labels.label_less_num_inner_nodes", "labels ?c ?l ?c' ==> ?l < #:?c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than, template_var 1,
         template_app (template_hole 0, template_var 2)))),
    ("Labels.labels_label", "labels ?c ?l ?c' ==> label ?c ?l = ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Labels.labels_THE",
     "labels ?c ?l ?c' ==> (THE c'. labels ?c ?l c') = ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Labels.labels_det",
     "[| labels ?c ?l ?c'; labels ?c ?l ?c'' |] ==> ?c' = ?c''",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Labels.less_num_inner_nodes_label",
     "[| ?l < #:?c; !!c'. labels ?c ?l c' ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 2, template_var 1)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.LabelsMoreTemplates"
### 0.368s elapsed time, 0.543s cpu time, 0.057s GC time
val it = (): unit
