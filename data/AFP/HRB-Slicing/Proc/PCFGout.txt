Loading theory "Draft.AuxLemmas" (required by "Draft.PCFGMoreTemplates" via "Draft.PCFG" via "Draft.ProcState" via "Draft.Com" via "Draft.BasicDefs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PCFGMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PCFGMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PCFGMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "Draft.AuxLemmas"
### 0.047s elapsed time, 0.223s cpu time, 0.000s GC time
Loading theory "Draft.BasicDefs" (required by "Draft.PCFGMoreTemplates" via "Draft.PCFG" via "Draft.ProcState" via "Draft.Com")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.544s cpu time, 0.037s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PCFGMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### Ambiguous input (line 69 of "$AFP/HRB-Slicing/StaticInter/BasicDefs.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>BasicDefs.fun_upds"
###       ("\<^const>HOL.eq"
###         ("_applC"
###           ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###             ("_position" ys))
###           ("_position" V))
###         ("_position" f'))
###       ("_position" xs) ("_position" ys))
###     ("_position" V)))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###       ("_position" ys))
###     ("_cargs"
###       ("\<^const>BasicDefs.fun_upds"
###         ("\<^const>HOL.eq" ("_position" V) ("_position" f'))
###         ("_position" xs) ("_position" ys))
###       ("_position" V))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC"
###       ("\<^const>BasicDefs.fun_upds" ("_position" f) ("_position" xs)
###         ("_position" ys))
###       ("_position" V))
###     ("_applC"
###       ("\<^const>BasicDefs.fun_upds" ("_position" f') ("_position" xs)
###         ("_position" ys))
###       ("_position" V))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Set_Algebras"
### 0.195s elapsed time, 0.800s cpu time, 0.037s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PCFGMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.321s elapsed time, 1.294s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PCFGMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.015s elapsed time, 3.847s cpu time, 0.910s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Ambiguous input (line 141 of "$AFP/HRB-Slicing/StaticInter/BasicDefs.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" et)
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" et)
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_position" p) ("_position" f))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>HOL.eq" ("_position" et)
###                 ("\<^const>BasicDefs.edge_kind.ReturnEdge" ("_position" Q)
###                   ("_position" p) ("_position" f))))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" et)
###               ("\<^const>BasicDefs.edge_kind.CallEdge" ("_position" Q)
###                 ("_position" r) ("_position" p) ("_position" fs))))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>Pure.imp"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" intra_kind) ("_position" et)))
###       ("\<^const>HOL.Trueprop" ("_position" P)))
###     ("_asms"
###       ("\<^const>Pure.all_binder"
###         ("_idts" ("_position" Q)
###           ("_idts" ("_position" r)
###             ("_idts" ("_position" p) ("_position" fs))))
###         ("\<^const>Pure.imp"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>BasicDefs.edge_kind.CallEdge"
###               ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###               ("_position" r) ("_position" p) ("_position" fs)))
###           ("\<^const>HOL.Trueprop" ("_position" P))))
###       ("_asm"
###         ("\<^const>Pure.all_binder"
###           ("_idts" ("_position" Q)
###             ("_idts" ("_position" p) ("_position" f)))
###           ("\<^const>Pure.imp"
###             ("\<^const>HOL.Trueprop"
###               ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###                 ("\<^const>HOL.eq" ("_position" et) ("_position" Q))
###                 ("_position" p) ("_position" f)))
###             ("\<^const>HOL.Trueprop" ("_position" P)))))))
###   ("\<^const>HOL.Trueprop" ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.BasicDefs"
### 1.263s elapsed time, 4.741s cpu time, 0.947s GC time
Loading theory "Draft.Com" (required by "Draft.PCFGMoreTemplates" via "Draft.PCFG" via "Draft.ProcState")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.099s elapsed time, 4.019s cpu time, 0.913s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.958s elapsed time, 6.168s cpu time, 1.125s GC time
Loading theory "Draft.Templates" (required by "Draft.PCFGMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.171s cpu time, 0.065s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PCFGMoreTemplates")
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.527s elapsed time, 1.131s cpu time, 0.111s GC time
### Ambiguous input (line 53 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>num_inner_nodes" ("_position" Skip))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq" ("_position" Skip)
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 54 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e)))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 55 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###     ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 14 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>HOL.eq"
###           ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###             ("_position" c\<^sub>2))
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))))
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2)))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^fixed>num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>2))))))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>2)
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 57 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^fixed>num_inner_nodes" ("_position" c))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^fixed>num_inner_nodes" ("_position" c))
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Groups.plus_class.plus"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>HOL.eq"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###         ("\<^fixed>num_inner_nodes" ("_position" c))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c)))
###     ("\<^fixed>num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c)
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c))
###       ("\<^fixed>num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c)
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 58 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>num_inner_nodes"
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets)))))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>num_inner_nodes"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets))))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 61 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.greater"
###     ("\<^const>Com.num_inner_nodes" ("_position" c))
###     ("\<^const>Groups.zero_class.zero")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.num_inner_nodes"
###     ("\<^const>Orderings.ord_class.greater" ("_position" c)
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 64 of "$AFP/HRB-Slicing/Proc/Com.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("\<^const>Com.num_inner_nodes" ("_position" c))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Com"
### 1.701s elapsed time, 3.392s cpu time, 0.390s GC time
Loading theory "Draft.ProcState" (required by "Draft.PCFGMoreTemplates" via "Draft.PCFG")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 16 of "$AFP/HRB-Slicing/Proc/ProcState.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" update)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" V) ("_position" e))))
###   ("_Update" ("_position" cf)
###     ("_updbind" ("_position" V)
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" e) ("_position" cf))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" update)
###     ("_cargs" ("_position" cf) ("_cargs" ("_position" V) ("_position" e))))
###   ("_applC" ("_position" cf)
###     ("\<^const>Com.cmd.LAss" ("_position" V)
###       ("_applC" ("_position" interpret)
###         ("_cargs" ("_position" e) ("_position" cf))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ProcState"
### 0.101s elapsed time, 0.140s cpu time, 0.038s GC time
Loading theory "Draft.PCFG" (required by "Draft.PCFGMoreTemplates")
### Ambiguous input (line 15 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("_applC" ("_position" Label) ("_position" l))
###       ("_position" i))
###     ("_applC" ("_position" Label)
###       ("\<^const>Groups.plus_class.plus" ("_position" l) ("_position" i)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("_applC" ("_position" Label) ("_position" l))
###     ("\<^const>HOL.eq" ("_position" i)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.plus_class.plus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 16 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("_position" Entry) ("_position" i))
###     ("_position" Entry)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("_position" Entry)
###     ("\<^const>HOL.eq" ("_position" i) ("_position" Entry))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>label_incr" ("_position" Exit) ("_position" i))
###     ("_position" Exit)))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>label_incr" ("_position" Exit)
###     ("\<^const>HOL.eq" ("_position" i) ("_position" Exit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 20 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" Exit) ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Exit))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" Exit)
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Exit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 23 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("_position" Exit)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Exit))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i) ("_position" Exit))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Exit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" Entry) ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" Entry)
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("_position" Entry)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i) ("_position" Entry))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 5 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" c))
###         ("_position" n'))
###       ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" c) ("_position" n')))
###       ("_position" c)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" c) ("_position" n'))
###         ("_position" c))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" c))
###       ("\<^const>PCFG.label_incr" ("_position" n') ("_position" c))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>PCFG.label_incr" ("_position" n') ("_position" c)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" n'))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###         ("_position" m))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m)))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m))
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("\<^const>PCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("_position" j))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_position" n) ("_position" m)) ("_position" j))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###         ("_position" m))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m)))
###       ("\<^const>Groups.plus_class.plus" ("_position" i) ("_position" j))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq" ("_position" i) ("_position" m))
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" i)
###           ("_position" j)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("\<^const>PCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" i)
###             ("_position" j))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 39 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 10 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i)))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n)))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n))
###         ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i)))
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m) ("_position" j))
###       ("_position" n))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" m)
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i)))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n)))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("\<^const>Groups.plus_class.plus" ("_position" j)
###             ("_position" i))
###           ("_position" n))
###         ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" m)
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i)))
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq"
###         ("\<^const>Groups.plus_class.plus" ("_position" j) ("_position" i))
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" m)
###       ("\<^const>HOL.eq" ("_position" j) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 43 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l))
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 47 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###       ("_applC" ("_position" Label) ("_position" l))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr" ("_position" n)
###       ("\<^const>HOL.eq" ("_position" i)
###         ("_applC" ("_position" Label) ("_position" l)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n)
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.minus_class.minus" ("_position" l)
###           ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l))
###         ("_position" n))
###       ("_position" i)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater_eq" ("_position" l)
###       ("_position" i))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_applC" ("_position" Label) ("_position" l))
###       ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.greater_eq" ("_position" l)
###       ("_position" i))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 55 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.label_incr"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###           ("_position" n))
###         ("_position" i)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 59 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>HOL.eq" ("_position" i)
###           ("_applC" ("_position" Label)
###             ("\<^const>Groups.zero_class.zero")))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("\<^const>PCFG.label_incr" ("_position" n) ("_position" i))
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.greater" ("_position" i)
###           ("\<^const>Groups.zero_class.zero")))))
###   ("\<^const>HOL.Trueprop" ("_position" False)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG" ("_position" prog) ("_position" Entry)
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" s) ("_position" True))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG" ("_position" prog) ("_position" Entry)
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" s) ("_position" True))))
###       ("_position" Label))
###     ("\<^const>Groups.zero_class.zero")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.one_class.one"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.one_class.one"))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.one_class.one"))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.one_class.one"))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 88 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" e)
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" update)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" V) ("_position" e)))))))
###         ("_position" Label))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" update)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" V) ("_position" e)))))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>Proc_CFG" ("_position" e)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" update)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" V) ("_position" e)))))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" update)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" V) ("_position" e)))))))
###       ("_position" Label))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 91 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.LAss" ("_position" V) ("_position" e))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###     ("_position" Exit)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.LAss" ("_position" V)
###     ("\<^fixed>Proc_CFG" ("_position" e)
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###       ("_position" Exit))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 94 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et) ("_position" n'))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 97 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("_applC"
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###           ("_position" et) ("_position" Label))
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_position" n) ("_position" et)
###       ("_applC" ("_position" Label)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et)
###         ("_applC" ("_position" Label)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>1) ("_position" n)
###         ("_position" et) ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("_position" n) ("_position" et) ("_position" Label))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 114 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one")))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes"
###               ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###                 ("\<^const>Groups.one_class.one"))))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###             ("\<^const>Groups.one_class.one")))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###               ("\<^const>Groups.one_class.one")))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes"
###             ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###           ("_position" c\<^sub>2))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et) ("_position" n'))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2) ("_position" n)
###         ("_position" et) ("_position" n')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.Seq" ("_position" c\<^sub>1)
###         ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))
###           ("_position" et) ("_position" n')))
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 118 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" true))))))))
###       ("_position" Label))
###     ("_Numeral" ("_constify" ("_position" 2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c')
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" true))))))))
###         ("_position" Label))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>Proc_CFG" ("_position" c')
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" true))))))))
###       ("_applC" ("_position" Label)
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" true))))))))
###     ("_applC" ("_position" Label)
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 103 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" true))))))))
###         ("_position" Label))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" true))))))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" true))))))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" true))))))))
###       ("_position" Label))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 121 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_position" Label))
###     ("\<^const>Groups.one_class.one")))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c')
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" false))))))))
###         ("_position" Label))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>Proc_CFG" ("_position" c')
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" false))))))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 124 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.While" ("_position" b)
###     ("\<^fixed>Proc_CFG" ("_position" c')
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###       ("_position" Exit))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###     ("_position" Exit)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 107 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" false))))))))
###         ("_position" Label))
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" false))))))))
###     ("_applC" ("_position" Label)
###       ("\<^const>Com.num_inner_nodes"
###         ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_applC" ("_position" Label)
###         ("\<^const>Com.num_inner_nodes"
###           ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_position" Label))
###     ("\<^const>Com.num_inner_nodes"
###       ("\<^const>Groups.plus_class.plus" ("_position" c\<^sub>1)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("_applC"
###       ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###             ("_lambda" ("_position" cf)
###               ("_applC" ("_position" state_check)
###                 ("_cargs" ("_position" cf)
###                   ("_cargs" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" false))))))))
###         ("_position" Label))
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###       ("_position" c\<^sub>2))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###         ("_lambda" ("_position" cf)
###           ("_applC" ("_position" state_check)
###             ("_cargs" ("_position" cf)
###               ("_cargs" ("_position" b)
###                 ("_applC" ("_position" Some) ("_position" false))))))))
###     ("_applC" ("_position" Label)
###       ("\<^const>Groups.plus_class.plus"
###         ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###     ("\<^fixed>Proc_CFG" ("_position" c\<^sub>2)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_applC" ("_position" Label)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.Cond" ("_position" b) ("_position" c\<^sub>1)
###         ("_position" c\<^sub>2))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.PredicateEdge"
###           ("_lambda" ("_position" cf)
###             ("_applC" ("_position" state_check)
###               ("_cargs" ("_position" cf)
###                 ("_cargs" ("_position" b)
###                   ("_applC" ("_position" Some) ("_position" false))))))))
###       ("_position" Label))
###     ("\<^const>Groups.plus_class.plus"
###       ("\<^const>Com.num_inner_nodes" ("_position" c\<^sub>1))
###       ("\<^const>Groups.one_class.one"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 127 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>Proc_CFG" ("_position" c')
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("\<^const>PCFG.label_incr" ("_position" n')
###           ("_Numeral" ("_constify" ("_position" 2))))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("\<^const>PCFG.label_incr" ("_position" n')
###         ("_Numeral" ("_constify" ("_position" 2)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^const>Com.cmd.While" ("_position" b)
###         ("\<^fixed>Proc_CFG" ("_position" c')
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_position" et) ("_position" n')))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" n')))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" n') ("_position" Exit))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.label_incr"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et) ("_position" n'))
###       ("_Numeral" ("_constify" ("_position" 2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 131 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^fixed>Proc_CFG"
###         ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et) ("_position" Label))
###       ("\<^const>Groups.zero_class.zero"))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("_applC"
###         ("\<^fixed>Proc_CFG" ("_position" c')
###           ("\<^const>PCFG.label_incr" ("_position" n)
###             ("_Numeral" ("_constify" ("_position" 2))))
###           ("_position" et) ("_position" Label))
###         ("\<^const>Groups.zero_class.zero")))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Com.cmd.While" ("_position" b)
###       ("\<^fixed>Proc_CFG" ("_position" c')
###         ("\<^const>PCFG.label_incr" ("_position" n)
###           ("_Numeral" ("_constify" ("_position" 2))))
###         ("_position" et)
###         ("_applC" ("_position" Label)
###           ("\<^const>Groups.zero_class.zero"))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^fixed>Proc_CFG" ("_position" c') ("_position" n) ("_position" et)
###         ("_position" Exit)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" n) ("_position" Entry)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>Proc_CFG"
###       ("\<^const>Com.cmd.While" ("_position" b) ("_position" c'))
###       ("\<^const>PCFG.label_incr" ("_position" n)
###         ("_Numeral" ("_constify" ("_position" 2))))
###       ("_position" et)
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 134 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("_cargs" ("_position" es)
###         ("_cargs"
###           ("\<^fixed>Proc_CFG" ("_position" rets)
###             ("_applC" ("_position" Label)
###               ("\<^const>Groups.zero_class.zero"))
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p)
###                 ("_tuple_args" ("_position" es)
###                   ("_tuple_arg" ("_position" rets)))))
###             ("_position" Label))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("_cargs"
###         ("\<^fixed>Proc_CFG" ("_applC" ("_position" es) ("_position" rets))
###           ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_position" Label))
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs"
###       ("\<^fixed>Proc_CFG"
###         ("_applC" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets)))
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_position" Label))
###       ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("_applC" ("_position" Call)
###       ("_cargs" ("_position" p)
###         ("_cargs" ("_position" es) ("_position" rets))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###     ("_applC" ("_position" CEdge)
###       ("_tuple" ("_position" p)
###         ("_tuple_args" ("_position" es) ("_tuple_arg" ("_position" rets)))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("\<^fixed>Proc_CFG"
###       ("_applC" ("_position" p)
###         ("_cargs" ("_position" es) ("_position" rets)))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("\<^fixed>Proc_CFG" ("_applC" ("_position" es) ("_position" rets))
###         ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("_cargs" ("_position" es)
###         ("\<^fixed>Proc_CFG" ("_position" rets)
###           ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_applC" ("_position" Label)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^fixed>Proc_CFG"
###       ("_applC" ("_position" Call)
###         ("_cargs" ("_position" p)
###           ("_cargs" ("_position" es) ("_position" rets))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" Label))
###     ("\<^const>Groups.one_class.one")))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 137 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>Proc_CFG"
###     ("_applC" ("_position" Call)
###       ("_cargs" ("_position" p)
###         ("_cargs" ("_position" es) ("_position" rets))))
###     ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###     ("_applC" ("_position" IEdge)
###       ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###     ("_position" Exit)))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("\<^fixed>Proc_CFG"
###       ("_applC" ("_position" p)
###         ("_cargs" ("_position" es) ("_position" rets)))
###       ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###       ("_applC" ("_position" IEdge)
###         ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###       ("_position" Exit))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("\<^fixed>Proc_CFG" ("_applC" ("_position" es) ("_position" rets))
###         ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###         ("_applC" ("_position" IEdge)
###           ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###         ("_position" Exit)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" Call)
###     ("_cargs" ("_position" p)
###       ("_cargs" ("_position" es)
###         ("\<^fixed>Proc_CFG" ("_position" rets)
###           ("_applC" ("_position" Label) ("\<^const>Groups.one_class.one"))
###           ("_applC" ("_position" IEdge)
###             ("\<^const>BasicDefs.edge_kind.UpdateEdge" ("_position" id)))
###           ("_position" Exit))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "Proc_CFG"
  Proving monotonicity ...
### Ambiguous input (line 211 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_position" et) ("_applC" ("_position" Label) ("_position" l))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_position" et) ("_position" Label))
###       ("_position" l)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less" ("_position" l)
###       ("\<^const>Com.num_inner_nodes" ("_position" prog)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 298 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_applC" ("_position" Label) ("\<^const>Groups.zero_class.zero"))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("_applC"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog) ("_position" n)
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_position" Label))
###       ("\<^const>Groups.zero_class.zero")))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq" ("_position" n) ("_position" Entry))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1207 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###     ("_applC" ("_position" Label) ("_position" l))
###     ("_applC" ("_position" CEdge)
###       ("_tuple" ("_position" p)
###         ("_tuple_args" ("_position" es) ("_tuple_arg" ("_position" rets)))))
###     ("_applC" ("_position" Label) ("_position" l'))))
### ("\<^const>HOL.Trueprop"
###   ("_applC"
###     ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###       ("_applC" ("_position" Label) ("_position" l))
###       ("_applC" ("_position" CEdge)
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" es)
###             ("_tuple_arg" ("_position" rets)))))
###       ("_position" Label))
###     ("_position" l')))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 1255 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PCFG.Proc_CFG" ("_position" c)
###             ("_applC" ("_position" Label) ("_position" l))
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" Label))
###           ("_position" l')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("_lambda" ("_position" s) ("_position" True))
###         ("_tuple" ("_position" p)
###           ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l'))))
###         ("_position" p')
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_pttrns" ("_position" e) ("_position" cf))
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" e) ("_position" cf))))
###             ("_position" es'))))
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Entry))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PCFG.Proc_CFG" ("_position" c)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_applC" ("_position" Label) ("_position" l'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l))))
###       ("\<^const>BasicDefs.edge_kind.CallEdge"
###         ("_lambda" ("_position" s) ("_position" True))
###         ("_tuple" ("_position" p)
###           ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l'))))
###         ("_position" p')
###         ("_applC" ("_position" map)
###           ("_cargs"
###             ("_lambda" ("_pttrns" ("_position" e) ("_position" cf))
###               ("_applC" ("_position" interpret)
###                 ("_cargs" ("_position" e) ("_position" cf))))
###             ("_position" es'))))
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Entry))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1261 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_position" Label))
###         ("_position" l')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" ins)
###               ("_tuple_args" ("_position" outs)
###                 ("_tuple_arg" ("_position" c)))))
###           ("_applC" ("_position" set) ("_position" procs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" Main)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p)
###         ("\<^const>BasicDefs.fun_upds"
###           ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###             ("_position" cf'))
###           ("_position" rets)
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" cf) ("_position" outs)))))
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("_applC" ("_position" Label) ("_position" l))
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_applC" ("_position" Label) ("_position" l'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" ins)
###               ("_tuple_args" ("_position" outs)
###                 ("_tuple_arg" ("_position" c)))))
###           ("_applC" ("_position" set) ("_position" procs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" Main)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p)
###         ("\<^const>BasicDefs.fun_upds"
###           ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###             ("_position" cf'))
###           ("_position" rets)
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" cf) ("_position" outs)))))
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC"
###         ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p)
###               ("_tuple_args" ("_position" es)
###                 ("_tuple_arg" ("_position" rets)))))
###           ("_position" Label))
###         ("_position" l')))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" ins)
###               ("_tuple_args" ("_position" outs)
###                 ("_tuple_arg" ("_position" c)))))
###           ("_applC" ("_position" set) ("_position" procs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" Main)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###             ("_position" rets)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" cf) ("_position" outs))))))
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>PCFG.Proc_CFG" ("_position" prog)
###         ("_applC" ("_position" Label) ("_position" l))
###         ("_applC" ("_position" CEdge)
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" es)
###               ("_tuple_arg" ("_position" rets)))))
###         ("_applC" ("_position" Label) ("_position" l'))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member"
###           ("_tuple" ("_position" p)
###             ("_tuple_args" ("_position" ins)
###               ("_tuple_args" ("_position" outs)
###                 ("_tuple_arg" ("_position" c)))))
###           ("_applC" ("_position" set) ("_position" procs))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p) ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" Main)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p)
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###             ("_position" rets)
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" cf) ("_position" outs))))))
###       ("_tuple" ("_position" Main)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1266 of "$AFP/HRB-Slicing/Proc/PCFG.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PCFG.Proc_CFG" ("_position" c)
###             ("_applC" ("_position" Label) ("_position" l))
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" Label))
###           ("_position" l')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" p)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p')
###         ("\<^const>BasicDefs.fun_upds"
###           ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###             ("_position" cf'))
###           ("_position" rets')
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" cf) ("_position" outs')))))
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PCFG.Proc_CFG" ("_position" c)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_applC" ("_position" Label) ("_position" l'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" p)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p')
###         ("\<^const>BasicDefs.fun_upds"
###           ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###             ("_position" cf'))
###           ("_position" rets')
###           ("_applC" ("_position" map)
###             ("_cargs" ("_position" cf) ("_position" outs')))))
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC"
###           ("\<^const>PCFG.Proc_CFG" ("_position" c)
###             ("_applC" ("_position" Label) ("_position" l))
###             ("_applC" ("_position" CEdge)
###               ("_tuple" ("_position" p')
###                 ("_tuple_args" ("_position" es')
###                   ("_tuple_arg" ("_position" rets')))))
###             ("_position" Label))
###           ("_position" l')))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" p)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p')
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###             ("_position" rets')
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" cf) ("_position" outs'))))))
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" p)
###           ("_tuple_args" ("_position" ins)
###             ("_tuple_args" ("_position" outs)
###               ("_tuple_arg" ("_position" c)))))
###         ("_applC" ("_position" set) ("_position" procs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>PCFG.Proc_CFG" ("_position" c)
###           ("_applC" ("_position" Label) ("_position" l))
###           ("_applC" ("_position" CEdge)
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" es')
###                 ("_tuple_arg" ("_position" rets')))))
###           ("_applC" ("_position" Label) ("_position" l'))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p')
###               ("_tuple_args" ("_position" ins')
###                 ("_tuple_args" ("_position" outs')
###                   ("_tuple_arg" ("_position" c')))))
###             ("_applC" ("_position" set) ("_position" procs))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" containsCall)
###               ("_cargs" ("_position" procs)
###                 ("_cargs" ("_position" prog)
###                   ("_cargs" ("_position" ps) ("_position" p))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>PCFG" ("_position" prog) ("_position" procs)
###       ("_tuple" ("_position" p') ("_tuple_arg" ("_position" Exit)))
###       ("\<^const>BasicDefs.edge_kind.ReturnEdge"
###         ("_lambda" ("_position" cf)
###           ("\<^const>HOL.eq" ("_applC" ("_position" snd) ("_position" cf))
###             ("_tuple" ("_position" p)
###               ("_tuple_arg"
###                 ("_applC" ("_position" Label) ("_position" l'))))))
###         ("_position" p')
###         ("_lambda" ("_pttrns" ("_position" cf) ("_position" cf'))
###           ("\<^const>BasicDefs.fun_upds" ("_position" cf')
###             ("_position" rets')
###             ("_applC" ("_position" map)
###               ("_cargs" ("_position" cf) ("_position" outs'))))))
###       ("_tuple" ("_position" p)
###         ("_tuple_arg" ("_applC" ("_position" Label) ("_position" l')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "PCFG"
  Proving monotonicity ...
### theory "Draft.PCFG"
### 1.359s elapsed time, 2.053s cpu time, 0.930s GC time
Loading theory "Draft.PCFGMoreTemplates"
val templateLemmas =
   [("PCFG.Proc_CFG_Exit_no_sourcenode",
     "?prog \<turnstile> Exit -?et\<rightarrow>\<^sub>p ?n' ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("PCFG.Proc_CFG_Entry_no_targetnode",
     "?prog \<turnstile> ?n -?et\<rightarrow>\<^sub>p Entry ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1),
                template_var 0),
              template_hole 1)
            )],
       template_predicate (template_hole 0))),
    ("PCFG.Entry_label_incr", "Entry = ?n \<oplus> ?i ==> ?n = Entry",
     template_implication
      ([template_equation
         (template_hole 1,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation (template_var 1, template_hole 1))),
    ("PCFG.Exit_label_incr", "Exit = ?n \<oplus> ?i ==> ?n = Exit",
     template_implication
      ([template_equation
         (template_hole 1,
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 0))],
       template_equation (template_var 1, template_hole 1))),
    ("PCFG.label_incr_Entry", "?n \<oplus> ?i = Entry ==> ?n = Entry",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_hole 0)],
       template_equation (template_var 1, template_hole 0))),
    ("PCFG.label_incr_Exit", "?n \<oplus> ?i = Exit ==> ?n = Exit",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_hole 0)],
       template_equation (template_var 1, template_hole 0))),
    ("PCFG.Proc_CFG_IEdge_intra_kind",
     "?prog \<turnstile> ?n -IEdge ?et\<rightarrow>\<^sub>p ?n' ==>
      intra_kind ?et",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 2, template_var 3),
                  template_var 2),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("PCFG.label_incr_ge", "Label ?l = ?n \<oplus> ?i ==> ?i <= ?l",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation (less_equals, template_var 0, template_var 2))),
    ("PCFG.Proc_CFG_targetlabel_less_num_nodes",
     "?prog \<turnstile> ?n -?et\<rightarrow>\<^sub>p Label ?l ==>
      ?l < #:?prog",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2),
                template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_than, template_var 0,
         template_app (template_hole 0, template_var 3)))),
    ("PCFG.Proc_CFG_sourcelabel_less_num_nodes",
     "?prog \<turnstile> Label ?l -?et\<rightarrow>\<^sub>p ?n' ==>
      ?l < #:?prog",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app (template_hole 2, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_than, template_var 2,
         template_app (template_hole 0, template_var 3)))),
    ("PCFG.label_incr_inj", "?n \<oplus> ?c = ?n' \<oplus> ?c ==> ?n = ?n'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 0),
            template_var 1))],
       template_equation (template_var 2, template_var 0))),
    ("PCFG.label_incr_start_Node_smaller",
     "Label ?l = ?n \<oplus> ?i ==> ?n = Label (?l - ?i)",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_equation
        (template_var 1,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("PCFG.label_incr_start_Node_smaller_rev",
     "?n \<oplus> ?i = Label ?l ==> ?n = Label (?l - ?i)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation
        (template_var 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("PCFG.label_incr_0",
     "[| Label 0 = ?n \<oplus> ?i; 0 < ?i |] ==> False",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_hole 3),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_inequation (less_than, template_hole 3, template_var 0)],
       template_predicate (template_hole 0))),
    ("PCFG.label_incr_0_rev",
     "[| ?n \<oplus> ?i = Label 0; 0 < ?i |] ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_app (template_hole 3, template_hole 2)),
        template_inequation (less_than, template_hole 2, template_var 0)],
       template_predicate (template_hole 0))),
    ("PCFG.label_incr_simp",
     "?n \<oplus> ?i = ?m \<oplus> ?i + ?j ==> ?n = ?m \<oplus> ?j",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)))],
       template_equation
        (template_var 3,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("PCFG.label_incr_simp_rev",
     "?m \<oplus> ?j + ?i = ?n \<oplus> ?i ==> ?m \<oplus> ?j = ?n",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3),
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_var 0))),
    ("PCFG.Proc_CFG_Call_target_0",
     "?prog \<turnstile> ?n -CEdge
                              (?p, ?es,
                               ?rets)\<rightarrow>\<^sub>p Label 0 ==>
      ?n = Entry",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 4),
                  template_var 3),
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_app
                     (template_app (template_hole 4, template_var 1),
                      template_var 0)))),
              template_app (template_hole 3, template_hole 2))
            )],
       template_equation (template_var 3, template_hole 0))),
    ("PCFG.Proc_CFG_Call_containsCall",
     "?prog \<turnstile> ?n -CEdge
                              (?p, ?es, ?rets)\<rightarrow>\<^sub>p ?n' ==>
      containsCall ?procs ?prog [] ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 6),
                  template_var 5),
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 4),
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 2)))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 6),
               template_hole 0),
             template_var 4)
           ))),
    ("PCFG.Proc_CFG_edge_det",
     "[| ?prog \<turnstile> ?n -?et\<rightarrow>\<^sub>p ?n';
         ?prog \<turnstile> ?n -?et'\<rightarrow>\<^sub>p ?n' |]
      ==> ?et = ?et'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 1, template_var 4),
                  template_var 3),
                template_var 0),
              template_var 1)
            )],
       template_equation (template_var 2, template_var 0))),
    ("PCFG.Proc_CFG_Call_Intra_edge_not_same_source",
     "[| ?prog \<turnstile> ?n -CEdge
                                 (?p, ?es, ?rets)\<rightarrow>\<^sub>p ?n';
         ?prog \<turnstile> ?n -IEdge ?et\<rightarrow>\<^sub>p ?n'' |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 6),
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3)))),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 6),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("PCFG.Proc_CFG_Call_Intra_edge_not_same_target",
     "[| ?prog \<turnstile> ?n -CEdge
                                 (?p, ?es, ?rets)\<rightarrow>\<^sub>p ?n';
         ?prog \<turnstile> ?n'' -IEdge ?et\<rightarrow>\<^sub>p ?n' |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 6),
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_var 3)))),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 5, template_var 7),
                  template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate (template_hole 0))),
    ("PCFG.Proc_CFG_Exit_edge",
     "(!!l et.
          [| ?prog \<turnstile> Label l -IEdge et\<rightarrow>\<^sub>p Exit;
             l <= #:?prog |]
          ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("PCFG.Proc_CFG_Call_Labels",
     "?prog \<turnstile> ?n -CEdge
                              (?p, ?es, ?rets)\<rightarrow>\<^sub>p ?n' ==>
      EX l. ?n = Label l & ?n' = Label (Suc l)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 5),
                  template_var 4),
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)))),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("PCFG.Proc_CFG_Call_follows_id_edge",
     "[| ?prog \<turnstile> ?n -CEdge
                                 (?p, ?es, ?rets)\<rightarrow>\<^sub>p ?n';
         ?prog \<turnstile> ?n' -IEdge ?et\<rightarrow>\<^sub>p ?n'' |]
      ==> ?et = \<Up>id",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 7),
                  template_var 6),
                template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 5),
                    template_app
                     (template_app (template_hole 4, template_var 4),
                      template_var 3)))),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 7),
                  template_var 2),
                template_app (template_hole 3, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_var 1, template_app (template_hole 1, template_hole 0)))),
    ("PCFG.Proc_CFG_Call_targetnode_no_Call_sourcenode",
     "[| ?prog \<turnstile> ?n -CEdge
                                 (?p, ?es, ?rets)\<rightarrow>\<^sub>p ?n';
         ?prog \<turnstile> ?n' -CEdge
                                  (?p', ?es',
                                   ?rets')\<rightarrow>\<^sub>p ?n'' |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 9),
                  template_var 8),
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 7),
                    template_app
                     (template_app (template_hole 1, template_var 6),
                      template_var 5)))),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 4, template_var 9),
                  template_var 4),
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app
                     (template_app (template_hole 1, template_var 2),
                      template_var 1)))),
              template_var 0)
            )],
       template_predicate (template_hole 0))),
    ("PCFG.Proc_CFG_EntryD",
     "?prog \<turnstile> Entry -?et\<rightarrow>\<^sub>p ?n' ==>
      ?n' = Exit & ?et = IEdge (%s. False)\<^sub>\<surd> |
      ?n' = Label 0 & ?et = IEdge (%s. True)\<^sub>\<surd>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 2),
                  template_hole 11),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_hole 7)),
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, t_empty))))),
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_app (template_hole 2, template_hole 1))),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, t_empty)))))
           ))),
    ("PCFG.containsCall_empty_Proc_CFG_Call_edge",
     "[| containsCall ?procs ?prog [] ?p;
         !!l es rets l'.
            ?prog \<turnstile> Label
                                l -CEdge
                                    (?p, es,
                                     rets)\<rightarrow>\<^sub>p Label l' ==>
            ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 3),
                  template_var 2),
                template_hole 8),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("PCFG.containsCall_indirection",
     "[| containsCall ?procs ?prog ?qs ?q; containsCall ?procs ?c ?ps ?p;
         (?q, ?ins, ?outs, ?c) : set ?procs |]
      ==> containsCall ?procs ?prog (?qs @ ?q # ?ps) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 7, template_var 8),
                  template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_app
                     (template_app (template_hole 3, template_var 0),
                      template_var 4)))),
              template_app (template_hole 2, template_var 8))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_var 8),
                 template_var 7),
               template_app
                (template_app (template_hole 1, template_var 6),
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 3))),
             template_var 2)
           ))),
    ("PCFG.containsCall_in_proc",
     "[| containsCall ?procs ?prog ?qs ?q;
         (?q, ?ins, ?outs, ?c) : set ?procs; containsCall ?procs ?c [] ?p |]
      ==> containsCall ?procs ?prog (?qs @ [?q]) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1)))),
              template_app (template_hole 3, template_var 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 7),
                  template_var 1),
                template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 8, template_var 7),
                 template_var 6),
               template_app
                (template_app (template_hole 1, template_var 5),
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_hole 2))),
             template_var 0)
           ))),
    ("PCFG.Proc_CFG_Call_nodes_eq",
     "[| ?prog \<turnstile> ?n -CEdge
                                 (?p, ?es, ?rets)\<rightarrow>\<^sub>p ?n';
         ?prog \<turnstile> ?n -CEdge
                                 (?p', ?es',
                                  ?rets')\<rightarrow>\<^sub>p ?n'' |]
      ==> ?n' = ?n'' & ?p = ?p' & ?es = ?es' & ?rets = ?rets'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 9),
                  template_var 8),
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app (template_hole 5, template_var 6),
                      template_var 5)))),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 9),
                  template_var 8),
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 3),
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 4),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 7),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 1))))
           ))),
    ("PCFG.Proc_CFG_Call_nodes_eq'",
     "[| ?prog \<turnstile> ?n -CEdge
                                 (?p, ?es, ?rets)\<rightarrow>\<^sub>p ?n';
         ?prog \<turnstile> ?n'' -CEdge
                                   (?p', ?es',
                                    ?rets')\<rightarrow>\<^sub>p ?n' |]
      ==> ?n = ?n'' & ?p = ?p' & ?es = ?es' & ?rets = ?rets'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 9),
                  template_var 8),
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 7),
                    template_app
                     (template_app (template_hole 5, template_var 6),
                      template_var 5)))),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 8, template_var 9),
                  template_var 3),
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_app
                     (template_app (template_hole 5, template_var 1),
                      template_var 0)))),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 8),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 7),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 5),
                   template_var 0))))
           ))),
    ("PCFG.WCFG_deterministic",
     "[| ?prog \<turnstile> ?n\<^sub>1 -?et\<^sub>1\<rightarrow>\<^sub>p ?n\<^sub>1';
         ?prog \<turnstile> ?n\<^sub>2 -?et\<^sub>2\<rightarrow>\<^sub>p ?n\<^sub>2';
         ?n\<^sub>1 = ?n\<^sub>2; ?n\<^sub>1' ~= ?n\<^sub>2' |]
      ==> EX Q Q'.
             ?et\<^sub>1 = IEdge (Q)\<^sub>\<surd> &
             ?et\<^sub>2 = IEdge (Q')\<^sub>\<surd> &
             (ALL s. (Q s --> ~ Q' s) & (Q' s --> ~ Q s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 6),
                  template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_equation (template_var 5, template_var 2),
        template_negation
         (template_equation (template_var 3, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("PCFG.containsCallcases",
     "containsCall ?procs ?prog ?ps ?p ==>
      ?ps = [] & containsCall ?procs ?prog ?ps ?p |
      (EX q ins outs c ps'.
          ?ps = ps' @ [q] &
          (q, ins, outs, c) : set ?procs &
          containsCall ?procs c [] ?p & containsCall ?procs ?prog ps' q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 3),
                  template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 11, template_var 1),
                     template_hole 10)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 14, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0))),
             template_app (template_hole 9, t_empty))
           ))),
    ("PCFG.containsCallE",
     "[| containsCall ?procs ?prog ?ps ?p;
         [| ?ps = []; containsCall ?procs ?prog ?ps ?p |]
         ==> ?P ?procs ?prog ?ps ?p;
         !!q ins outs c es' rets' ps'.
            [| ?ps = ps' @ [q]; (q, ins, outs, c) : set ?procs;
               containsCall ?procs c [] ?p;
               containsCall ?procs ?prog ps' q |]
            ==> ?P ?procs ?prog ?ps ?p |]
      ==> ?P ?procs ?prog ?ps ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_implication
         ([template_equation (template_var 2, template_hole 12)],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 14, template_var 4),
                       template_var 3),
                     template_var 2),
                   template_var 1)
                 )],
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app (template_var 0, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1)
                ))),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 0, template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)
           ))),
    ("PCFG.containsCall_induct",
     "[| !!procs ps p. ?P procs Skip ps p;
         !!procs V e ps p. ?P procs (V:=e) ps p;
         !!procs c\<^sub>1 c\<^sub>2 ps p.
            [| ?P procs c\<^sub>1 ps p; ?P procs c\<^sub>2 ps p |]
            ==> ?P procs (c\<^sub>1;; c\<^sub>2) ps p;
         !!procs b c\<^sub>1 c\<^sub>2 ps p.
            [| ?P procs c\<^sub>1 ps p; ?P procs c\<^sub>2 ps p |]
            ==> ?P procs (if (b) c\<^sub>1 else c\<^sub>2) ps p;
         !!procs b c ps p. ?P procs c ps p ==> ?P procs (while (b) c) ps p;
         !!procs q es' rets' ps p.
            (!!x xa xb xc.
                [| ps = q # xc; (q, x, xa, xb) : set procs |]
                ==> ?P procs xb xc p) ==>
            ?P procs (Call q es' rets') ps p |]
      ==> ?P ?a0.0 ?a1.0 ?a2.0 ?a3.0",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate (template_app (template_hole 19, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_var 4, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.PCFGMoreTemplates"
### 0.406s elapsed time, 0.585s cpu time, 0.035s GC time
val it = (): unit
