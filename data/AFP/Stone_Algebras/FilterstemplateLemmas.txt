   [("Filters.simp_filter",
     "ord_class.filter (Filters.filter.Rep_filter ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Filters.up_filter_antitone",
     "(?x <= ?y) = (up_filter ?y <= up_filter ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1, template_app (template_hole 0, t_empty))),
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty))))),
    ("Filters.up_filter_injective",
     "up_filter ?x = up_filter ?y ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3, template_app (template_hole 2, t_empty)),
          template_app
           (template_hole 3, template_app (template_hole 2, t_empty)))],
       template_equation (template_var 1, template_var 0))),
    ("Filters.up_filter_dist_inf",
     "up_filter (?x \<sqinter> ?y) = up_filter ?x \<squnion> up_filter ?y",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, t_empty)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))),
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("Filters.up_filter_dist_sup",
     "up_filter (?x \<squnion> ?y) = up_filter ?x \<sqinter> up_filter ?y",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, t_empty)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty))),
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))))),
    ("Filters.filter_map_filter",
     "[| mono ?f; ALL x y. ?f x <= y --> (EX z>=x. y = ?f z) |]
      ==> ord_class.filter (?f ` Filters.filter.Rep_filter ?F)",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           )))]
