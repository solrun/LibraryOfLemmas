Loading theory "Draft.Lattice_Basics" (required by "Draft.Stone_ConstructionMoreTemplates" via "Draft.Stone_Construction" via "Draft.P_Algebras")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Stone_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Stone_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Stone_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
class sup = type +
  fixes sup :: "'a => 'a => 'a"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class inf = type +
  fixes inf :: "'a => 'a => 'a"
class uminus = type +
  fixes uminus :: "'a => 'a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.605s cpu time, 0.036s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Stone_ConstructionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.197s elapsed time, 0.794s cpu time, 0.036s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Stone_ConstructionMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
### theory "HOL-Library.Nat_Bijection"
### 0.302s elapsed time, 1.201s cpu time, 0.101s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Stone_ConstructionMoreTemplates" via "Draft.ExtrEqs")
class semilattice_sup = sup + order +
  assumes "sup_ge1": "!!x y. x <= x \<squnion> y"
    and "sup_ge2": "!!y x. y <= x \<squnion> y"
    and "sup_least": "!!y x z. [| y <= x; z <= x |] ==> y \<squnion> z <= x"
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<squnion>) bot ?xs == foldr (\<squnion>) ?xs bot
### Partially applied constant "Lattices.sup_class.sup" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<squnion>) bot ?g (set ?xs) ==
### sup_monoid.sum_list (map ?g (remdups ?xs))
class semilattice_inf = inf + order +
  assumes "inf_le1": "!!x y. x \<sqinter> y <= x"
    and "inf_le2": "!!x y. x \<sqinter> y <= y"
    and
    "inf_greatest": "!!x y z. [| x <= y; x <= z |] ==> x <= y \<sqinter> z"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class directed_semilattice_inf = semilattice_inf +
  assumes "ub": "!!x y. EX z>=x. y <= z"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.896s elapsed time, 3.397s cpu time, 0.587s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.945s elapsed time, 3.462s cpu time, 0.576s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### monoid_add.sum_list (\<sqinter>) top ?xs == foldr (\<sqinter>) ?xs top
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Partially applied constant "Lattices.inf_class.inf" on left hand side of equation, in theorem:
### comm_monoid_add.sum (\<sqinter>) top ?g (set ?xs) ==
### inf.sup_monoid.sum_list (map ?g (remdups ?xs))
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.756s elapsed time, 5.465s cpu time, 0.811s GC time
Loading theory "Draft.Templates" (required by "Draft.Stone_ConstructionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.104s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Stone_ConstructionMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.495s elapsed time, 1.015s cpu time, 0.070s GC time
class dense_lattice = bounded_lattice +
  assumes
    "bot_meet_irreducible":
      "!!x y. x \<sqinter> y = bot --> x = bot | y = bot"
class distrib_lattice = lattice +
  assumes
    "sup_inf_distrib1":
      "!!x y z.
          x \<squnion> y \<sqinter> z =
          (x \<squnion> y) \<sqinter> (x \<squnion> z)"
class linorder_lattice_expansion = bounded_linorder + inf + sup +
  assumes "sup_def": "!!x y. x \<squnion> y = max x y"
  assumes "inf_def": "!!x y. x \<sqinter> y = min x y"
### Additional type variable(s) in locale specification "non_trivial": 'a
class non_trivial = type +
  assumes "consistent": "EX x y. x ~= y"
class boolean_algebra = minus + uminus + bounded_lattice + distrib_lattice +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = bot"
    and "sup_compl_top": "!!x. x \<squnion> - x = top"
  assumes "diff_eq": "!!x y. x - y = x \<sqinter> - y"
### theory "Draft.Lattice_Basics"
### 7.985s elapsed time, 12.881s cpu time, 1.142s GC time
Loading theory "Draft.Filters" (required by "Draft.Stone_ConstructionMoreTemplates" via "Draft.Stone_Construction")
Loading theory "Draft.P_Algebras" (required by "Draft.Stone_ConstructionMoreTemplates" via "Draft.Stone_Construction")
class ord = type +
  fixes less_eq :: "'a => 'a => bool"
    and less :: "'a => 'a => bool"
class order = preorder +
  assumes "order_antisym": "!!x y. [| x <= y; y <= x |] ==> x = y"
class order_bot = bot + order +
  assumes "bot_least": "!!a. bot <= a"
class order_top = order + top +
  assumes "top_greatest": "!!a. a <= top"
class semilattice_sup = sup + order +
  assumes "sup_ge1": "!!x y. x <= x \<squnion> y"
    and "sup_ge2": "!!y x. y <= x \<squnion> y"
    and "sup_least": "!!y x z. [| y <= x; z <= x |] ==> y \<squnion> z <= x"
class semilattice_inf = inf + order +
  assumes "inf_le1": "!!x y. x \<sqinter> y <= x"
    and "inf_le2": "!!x y. x \<sqinter> y <= y"
    and
    "inf_greatest": "!!x y z. [| x <= y; x <= z |] ==> x <= y \<sqinter> z"
class directed_semilattice_inf = semilattice_inf +
  assumes "ub": "!!x y. EX z>=x. y <= z"
instantiation
  Filters.filter :: (directed_semilattice_inf) bounded_lattice_top
  sup_filter == sup ::
    'a Filters.filter => 'a Filters.filter => 'a Filters.filter
  top_filter == top :: 'a Filters.filter
  inf_filter == inf ::
    'a Filters.filter => 'a Filters.filter => 'a Filters.filter
  less_eq_filter == less_eq ::
    'a Filters.filter => 'a Filters.filter => bool
  less_filter == less :: 'a Filters.filter => 'a Filters.filter => bool
class p_algebra = uminus + bounded_lattice +
  assumes "pseudo_complement": "!!x y. (x \<sqinter> y = bot) = (x <= - y)"
instantiation
  Filters.filter :: (bounded_semilattice_inf_top) bounded_lattice
  bot_filter == bot :: 'a Filters.filter
class distrib_lattice = lattice +
  assumes
    "sup_inf_distrib1":
      "!!x y z.
          x \<squnion> y \<sqinter> z =
          (x \<squnion> y) \<sqinter> (x \<squnion> z)"
instantiation
  Filters.filter :: (distrib_lattice_top) bounded_distrib_lattice
### theory "Draft.Filters"
### 1.168s elapsed time, 2.766s cpu time, 0.198s GC time
class p_algebra_eq = uminus + bounded_lattice +
  assumes "p_bot_eq": "- bot = top"
    and "p_top_eq": "- top = bot"
    and
    "inf_import_p_eq":
      "!!x y. x \<sqinter> - (x \<sqinter> y) = x \<sqinter> - y"
class stone_algebra = pd_algebra +
  assumes "stone": "!!x. - x \<squnion> - - x = top"
class linorder_stone_algebra_expansion = uminus +
  linorder_lattice_expansion +
  assumes "uminus_def": "!!x. - x = (if x = bot then top else bot)"
class implies = type +
  fixes implies :: "'a => 'a => 'a"
class heyting_semilattice = semilattice_inf + implies +
  assumes
    "implies_galois":
      "!!x y z. (x \<sqinter> y <= z) = (x <= y \<leadsto> z)"
class heyting_semilattice_eq = semilattice_inf + implies +
  assumes "implies_mp_below": "!!x y. x \<sqinter> (x \<leadsto> y) <= y"
    and
    "implies_galois_increasing": "!!x y. x <= y \<leadsto> x \<sqinter> y"
    and
    "implies_isotone_inf":
      "!!x y z. x \<leadsto> y \<sqinter> z <= x \<leadsto> y"
class heyting_algebra = uminus + bounded_heyting_lattice +
  assumes "uminus_eq": "!!x. - x = x \<leadsto> bot"
class heyting_algebra_eq = uminus + bounded_lattice + implies +
  assumes
    "implies_mp_eq": "!!x y. x \<sqinter> (x \<leadsto> y) = x \<sqinter> y"
    and
    "implies_import_inf":
      "!!x y z.
          x \<sqinter> (x \<sqinter> y \<leadsto> (x \<leadsto> z)) =
          x \<sqinter> (y \<leadsto> z)"
    and
    "inf_inf_implies":
      "!!z x y. z \<sqinter> (x \<sqinter> y \<leadsto> x) = z"
    and "uminus_eq_eq": "!!x. - x = x \<leadsto> bot"
class heyting_stone_algebra = heyting_algebra +
  assumes "heyting_stone": "!!x. - x \<squnion> - - x = top"
class brouwer_algebra = minus + uminus + bounded_lattice +
  assumes "minus_galois": "!!x y z. (x <= y \<squnion> z) = (x - y <= z)"
    and "uminus_eq_minus": "!!x. - x = top - x"
class boolean_algebra = minus + sup_inf_top_bot_uminus_ord +
  bounded_lattice + distrib_lattice +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = bot"
    and "sup_compl_top": "!!x. x \<squnion> - x = top"
  assumes "diff_eq": "!!x y. x - y = x \<sqinter> - y"
### theory "Draft.P_Algebras"
### 13.074s elapsed time, 15.201s cpu time, 0.955s GC time
Loading theory "Draft.Stone_Construction" (required by "Draft.Stone_ConstructionMoreTemplates")
locale triple
  fixes phi :: "'a => 'b Filters.filter"
  assumes "triple phi"
instantiation
  regular :: (stone_algebra) boolean_algebra
  minus_regular == minus :: 'a regular => 'a regular => 'a regular
  less_eq_regular == less_eq :: 'a regular => 'a regular => bool
  less_regular == less :: 'a regular => 'a regular => bool
  inf_regular == inf :: 'a regular => 'a regular => 'a regular
  sup_regular == sup :: 'a regular => 'a regular => 'a regular
  uminus_regular == uminus :: 'a regular => 'a regular
  bot_regular == bot :: 'a regular
  top_regular == top :: 'a regular
instantiation
  regular :: (non_trivial_stone_algebra) non_trivial_boolean_algebra
instantiation
  dense :: (stone_algebra) distrib_lattice_top
  sup_dense == sup :: 'a dense => 'a dense => 'a dense
  top_dense == top :: 'a dense
  inf_dense == inf :: 'a dense => 'a dense => 'a dense
  less_eq_dense == less_eq :: 'a dense => 'a dense => bool
  less_dense == less :: 'a dense => 'a dense => bool
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Stone_Construction.dense" found.
instantiation
  dense_filter_type :: (stone_algebra) bounded_distrib_lattice
  bot_dense_filter_type == bot :: 'a dense_filter_type
  sup_dense_filter_type == sup ::
    'a dense_filter_type => 'a dense_filter_type => 'a dense_filter_type
  top_dense_filter_type == top :: 'a dense_filter_type
  inf_dense_filter_type == inf ::
    'a dense_filter_type => 'a dense_filter_type => 'a dense_filter_type
  less_eq_dense_filter_type == less_eq ::
    'a dense_filter_type => 'a dense_filter_type => bool
  less_dense_filter_type == less ::
    'a dense_filter_type => 'a dense_filter_type => bool
locale triple
  fixes phi :: "'a => 'b Filters.filter"
  assumes "triple phi"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Filters.filter" found.
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Stone_Construction.phi" found.
instantiation
  lifted_pair :: (non_trivial_boolean_algebra, distrib_lattice_top)
    stone_algebra
  uminus_lifted_pair == uminus ::
    ('a, 'b) lifted_pair => ('a, 'b) lifted_pair
  bot_lifted_pair == bot :: ('a, 'b) lifted_pair
  sup_lifted_pair == sup ::
    ('a, 'b) lifted_pair => ('a, 'b) lifted_pair => ('a, 'b) lifted_pair
  top_lifted_pair == top :: ('a, 'b) lifted_pair
  inf_lifted_pair == inf ::
    ('a, 'b) lifted_pair => ('a, 'b) lifted_pair => ('a, 'b) lifted_pair
  less_eq_lifted_pair == less_eq ::
    ('a, 'b) lifted_pair => ('a, 'b) lifted_pair => bool
  less_lifted_pair == less ::
    ('a, 'b) lifted_pair => ('a, 'b) lifted_pair => bool
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Stone_Construction.regular" found.
instantiation
  stone_phi_pair :: (stone_algebra) sup_inf_top_bot_uminus_ord
  less_eq_stone_phi_pair == less_eq ::
    'a stone_phi_pair => 'a stone_phi_pair => bool
  less_stone_phi_pair == less ::
    'a stone_phi_pair => 'a stone_phi_pair => bool
  inf_stone_phi_pair == inf ::
    'a stone_phi_pair => 'a stone_phi_pair => 'a stone_phi_pair
  sup_stone_phi_pair == sup ::
    'a stone_phi_pair => 'a stone_phi_pair => 'a stone_phi_pair
  uminus_stone_phi_pair == uminus :: 'a stone_phi_pair => 'a stone_phi_pair
  bot_stone_phi_pair == bot :: 'a stone_phi_pair
  top_stone_phi_pair == top :: 'a stone_phi_pair
Found termination order: "{}"
instantiation
  stone_phi_pair :: (non_trivial_stone_algebra) stone_algebra
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Stone_Construction.phi" found.
instantiation
  lifted_boolean_algebra ::
    (non_trivial_boolean_algebra, distrib_lattice_top) boolean_algebra
  minus_lifted_boolean_algebra == minus ::
    ('a, 'b) lifted_boolean_algebra
    => ('a, 'b) lifted_boolean_algebra => ('a, 'b) lifted_boolean_algebra
  less_eq_lifted_boolean_algebra == less_eq ::
    ('a, 'b) lifted_boolean_algebra
    => ('a, 'b) lifted_boolean_algebra => bool
  less_lifted_boolean_algebra == less ::
    ('a, 'b) lifted_boolean_algebra
    => ('a, 'b) lifted_boolean_algebra => bool
  inf_lifted_boolean_algebra == inf ::
    ('a, 'b) lifted_boolean_algebra
    => ('a, 'b) lifted_boolean_algebra => ('a, 'b) lifted_boolean_algebra
  sup_lifted_boolean_algebra == sup ::
    ('a, 'b) lifted_boolean_algebra
    => ('a, 'b) lifted_boolean_algebra => ('a, 'b) lifted_boolean_algebra
  uminus_lifted_boolean_algebra == uminus ::
    ('a, 'b) lifted_boolean_algebra => ('a, 'b) lifted_boolean_algebra
  bot_lifted_boolean_algebra == bot :: ('a, 'b) lifted_boolean_algebra
  top_lifted_boolean_algebra == top :: ('a, 'b) lifted_boolean_algebra
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Stone_Construction.phi" found.
instantiation
  lifted_distrib_lattice_top ::
    (non_trivial_boolean_algebra, distrib_lattice_top) distrib_lattice_top
  sup_lifted_distrib_lattice_top == sup ::
    ('a, 'b) lifted_distrib_lattice_top
    => ('a, 'b) lifted_distrib_lattice_top
       => ('a, 'b) lifted_distrib_lattice_top
  top_lifted_distrib_lattice_top == top ::
    ('a, 'b) lifted_distrib_lattice_top
  inf_lifted_distrib_lattice_top == inf ::
    ('a, 'b) lifted_distrib_lattice_top
    => ('a, 'b) lifted_distrib_lattice_top
       => ('a, 'b) lifted_distrib_lattice_top
  less_eq_lifted_distrib_lattice_top == less_eq ::
    ('a, 'b) lifted_distrib_lattice_top
    => ('a, 'b) lifted_distrib_lattice_top => bool
  less_lifted_distrib_lattice_top == less ::
    ('a, 'b) lifted_distrib_lattice_top
    => ('a, 'b) lifted_distrib_lattice_top => bool
Found termination order: "{}"
### theory "Draft.Stone_Construction"
### 2.502s elapsed time, 4.291s cpu time, 2.305s GC time
Loading theory "Draft.Stone_ConstructionMoreTemplates"
val templateLemmas =
   [("Stone_Construction.simp_dense", "dense (Rep_dense ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Stone_Construction.simp_regular", "in_p_image (Rep_regular ?x)",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Stone_Construction.stone_phi_base_filter",
     "ord_class.filter (stone_phi_base ?x)",
     template_predicate
      (
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))
         )),
    ("Stone_Construction.simp_lifted_pair",
     "ALL f. Rep_lifted_pair ?pf f : triple.pairs (Rep_phi f)",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Stone_Construction.stone_phi_embed_strict_order_isomorphism",
     "(?x < ?y) = (stone_phi_embed ?x < stone_phi_embed ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Stone_Construction.stone_phi_embed_order_injective",
     "stone_phi_embed ?x <= stone_phi_embed ?y ==> ?x <= ?y",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Stone_Construction.phi_iso_filter",
     "ord_class.filter
       ((%qf. Rep_lifted_distrib_lattice_top (dl_iso qf) ?f) `
        Filters.filter.Rep_filter (stone_phi ?pf))",
     template_predicate
      (
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))
         )),
    ("Stone_Construction.dl_iso_inv_lifted_pair",
     "(top, up_filter (Rep_lifted_distrib_lattice_top ?xf ?f))
      : triple.pairs (Rep_phi ?f)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, t_empty)))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Stone_Construction.ba_iso_inv_lifted_pair",
     "(Rep_lifted_boolean_algebra ?xf ?f,
       Rep_phi ?f (- Rep_lifted_boolean_algebra ?xf ?f))
      : triple.pairs (Rep_phi ?f)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0))))),
           template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)))
         )),
    ("Stone_Construction.get_dense_char",
     "Rep_lifted_pair (Rep_dense ?pf) ?f =
      (top, up_filter (get_dense ?pf ?f))",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 5, template_hole 4),
         template_app
          (template_hole 3, template_app (template_hole 2, t_empty))))),
    ("Stone_Construction.dl_iso_inv_dense",
     "dense
       (Abs_lifted_pair
         (%f. (top, up_filter (Rep_lifted_distrib_lattice_top ?xf f))))",
     template_equation
      (template_app
        (template_hole 8, template_app (template_hole 7, t_empty)),
       template_hole 0)),
    ("Stone_Construction.up_dense_stone_phi",
     "up_filter (Abs_dense (?x \<squnion> - ?x))
      <= stone_phi (Abs_regular (- - ?x))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 7, template_app (template_hole 6, t_empty)),
       template_app
        (template_hole 1,
         template_app
          (template_hole 0,
           template_app
            (template_hole 2,
             template_app (template_hole 2, template_var 0)))))),
    ("Stone_Construction.dl_iso_left_invertible",
     "dl_iso_inv (dl_iso ?pf) = ?pf",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, t_empty)),
       template_var 0)),
    ("Stone_Construction.dl_iso_right_invertible",
     "dl_iso (dl_iso_inv ?xf) = ?xf",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_hole 8,
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty)))),
       template_var 0)),
    ("Stone_Construction.stone_phi_embed_triple_pair",
     "(if Rep_phi ?f = stone_phi then Rep_stone_phi_pair ?x
       else triple.pairs_uminus (Rep_phi ?f)
             (triple.pairs_uminus (Rep_phi ?f) (Rep_stone_phi_pair ?x)))
      : triple.pairs (Rep_phi ?f)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 4, template_var 1)),
                     template_hole 3)),
                 template_app (template_hole 2, template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 4, template_var 1)),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 4, template_var 1)),
                   template_app (template_hole 2, template_var 0))))),
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_var 1)))
         )),
    ("Stone_Construction.up_filter_dense_antitone_dense",
     "dense (?x \<squnion> - ?x \<squnion> ?y) &
      dense (?x \<squnion> - ?x \<squnion> ?y \<squnion> ?z)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 1, template_var 2),
                         template_app (template_hole 2, template_var 2))),
                     template_var 1))),
               template_hole 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 1,
                         template_app
                          (template_app (template_hole 1, template_var 2),
                           template_app (template_hole 2, template_var 2))),
                       template_var 1)),
                   template_var 0))),
             template_hole 0))
         )),
    ("Stone_Construction.ba_iso_right_invertible",
     "ba_iso (ba_iso_inv ?xf) = ?xf",
     template_equation
      (template_app (template_hole 9, t_empty), template_var 0)),
    ("Stone_Construction.phi_iso",
     "Rep_phi ?f (Rep_lifted_boolean_algebra (ba_iso ?pf) ?f) =
      filter_map (%qf. Rep_lifted_distrib_lattice_top (dl_iso qf) ?f)
       (stone_phi ?pf)",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 1),
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_var 1)),
       template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Stone_Construction.sa_iso_triple_pair",
     "(Abs_regular (- - ?x),
       stone_phi (Abs_regular (- ?x)) \<squnion>
       up_filter (Abs_dense (?x \<squnion> - ?x)))
      : stone_phi.pairs",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app (template_hole 8, template_var 0)))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_var 0)))),
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, t_empty))))),
           template_app (template_hole 0, template_hole 6))
         )),
    ("Stone_Construction.stone_phi_complement",
     "complement (stone_phi (Abs_regular (- ?x)))
       (stone_phi (Abs_regular (- - ?x)))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 0)))),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3, template_var 0)))))),
               template_hole 2)),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 0)))),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 3, template_var 0)))))),
             template_hole 0))
         )),
    ("Stone_Construction.ba_iso_left_invertible",
     "ba_iso_inv (ba_iso ?pf) = ?pf",
     template_equation
      (template_app
        (template_hole 9, template_app (template_hole 8, t_empty)),
       template_var 0)),
    ("Stone_Construction.ba_iso_inv_regular",
     "regular
       (Abs_lifted_pair
         (%f. (Rep_lifted_boolean_algebra ?xf f,
               Rep_phi f (- Rep_lifted_boolean_algebra ?xf f))))",
     template_equation
      (template_app (template_hole 5, t_empty),
       template_app
        (template_hole 0,
         template_app
          (template_hole 0, template_app (template_hole 5, t_empty))))),
    ("Stone_Construction.up_filter_dense_antitone",
     "up_filter (Abs_dense (?x \<squnion> - ?x \<squnion> ?y \<squnion> ?z))
      <= up_filter (Abs_dense (?x \<squnion> - ?x \<squnion> ?y))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Stone_Construction.stone_phi_inf_dense",
     "stone_phi (Abs_regular (- ?x)) \<sqinter>
      up_filter (Abs_dense (?y \<squnion> - ?y))
      <= up_filter (Abs_dense (?y \<squnion> - ?y \<squnion> ?x))",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)))),
         template_app
          (template_hole 4, template_app (template_hole 3, t_empty))),
       template_app
        (template_hole 4, template_app (template_hole 3, t_empty)))),
    ("Stone_Construction.simp_phi",
     "bounded_lattice_homomorphism (Rep_phi ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app (template_hole 10, t_empty)),
                   template_app (template_hole 10, t_empty))),
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_hole 3)),
                 template_hole 2))),
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_hole 1)),
             template_hole 0))
         )),
    ("Stone_Construction.sa_iso_left_invertible",
     "sa_iso_inv (sa_iso ?x) = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 16,
           template_app
            (template_hole 15,
             template_app
              (template_hole 14,
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 12,
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_hole 10,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 9, template_var 0)))),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 10,
                             template_app
                              (template_hole 9, template_var 0)))),
                       template_app
                        (template_hole 6,
                         template_app (template_hole 5, t_empty))))))))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_hole 7),
             template_app
              (template_hole 13,
               template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_hole 10,
                       template_app
                        (template_hole 9,
                         template_app (template_hole 9, template_var 0)))),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 10,
                           template_app
                            (template_hole 9, template_var 0)))),
                     template_app
                      (template_hole 6,
                       template_app (template_hole 5, t_empty))))))))),
       template_var 0)),
    ("Stone_Construction.sa_iso_right_invertible",
     "sa_iso (sa_iso_inv ?p) = ?p",
     template_equation
      (template_app
        (template_hole 16,
         template_app
          (template_app
            (template_hole 15,
             template_app
              (template_hole 14,
               template_app
                (template_hole 13,
                 template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_hole 11,
                         template_app
                          (template_hole 10,
                           template_app
                            (template_hole 9, template_var 0)))),
                     template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_hole 6),
                         template_app
                          (template_hole 9, template_var 0)))))))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 14,
                   template_app
                    (template_hole 13,
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_hole 11,
                           template_app
                            (template_hole 10,
                             template_app
                              (template_hole 9, template_var 0)))),
                       template_app
                        (template_hole 8,
                         template_app
                          (template_app (template_hole 7, template_hole 6),
                           template_app
                            (template_hole 9, template_var 0)))))))),
             template_app
              (template_hole 4, template_app (template_hole 3, t_empty))))),
       template_var 0))]:
   (string * thm * template) list
### theory "Draft.Stone_ConstructionMoreTemplates"
### 0.497s elapsed time, 0.799s cpu time, 0.095s GC time
val it = (): unit
