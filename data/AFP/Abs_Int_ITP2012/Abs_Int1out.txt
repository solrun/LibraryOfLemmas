Loading theory "Draft.Complete_Lattice_ix" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0" via "Draft.Collecting")
Loading theory "HOL-IMP.AExp" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0" via "Draft.Collecting" via "Draft.ACom" via "HOL-IMP.Com" via "HOL-IMP.BExp")
Loading theory "HOL-Library.Char_ord" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.Abs_Int1" via "Draft.Abs_State")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
locale Complete_Lattice_ix
  fixes L :: "'i => 'a set"
    and Glb :: "'i => 'a set => 'a"
  assumes "Complete_Lattice_ix L Glb"
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Complete_Lattice_ix"
### 0.065s elapsed time, 0.290s cpu time, 0.000s GC time
Loading theory "HOL-Library.List_Lexorder" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.Abs_Int1" via "Draft.Abs_State")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### theory "HOL-Library.Char_ord"
### 0.085s elapsed time, 0.371s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  list :: (ord) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
instantiation
  list :: (linorder) distrib_lattice
  inf_list == inf :: 'a list => 'a list => 'a list
  sup_list == sup :: 'a list => 'a list => 'a list
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.569s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  list :: (order) order_bot
  bot_list == bot :: 'a list
### theory "HOL-Library.List_Lexorder"
### 0.097s elapsed time, 0.372s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.238s elapsed time, 0.943s cpu time, 0.106s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0")
### theory "HOL-Library.Nat_Bijection"
### 0.343s elapsed time, 1.339s cpu time, 0.149s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.442s elapsed time, 1.745s cpu time, 0.233s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-IMP.AExp"
### 0.972s elapsed time, 3.859s cpu time, 0.382s GC time
Loading theory "HOL-IMP.BExp" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0" via "Draft.Collecting" via "Draft.ACom" via "HOL-IMP.Com")
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.124s elapsed time, 4.307s cpu time, 0.907s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.003s elapsed time, 3.834s cpu time, 0.796s GC time
Found termination order: "{}"
"12"
  :: "int"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
"5"
  :: "int"
"True"
  :: "bool"
"V ''x''"
  :: "aexp"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.195s elapsed time, 8.121s cpu time, 1.252s GC time
Loading theory "Draft.Templates" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
### theory "HOL-IMP.BExp"
### 1.434s elapsed time, 5.038s cpu time, 0.913s GC time
Loading theory "HOL-IMP.Com" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0" via "Draft.Collecting" via "Draft.ACom")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.202s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Abs_Int1MoreTemplates")
"bsimp b"
  :: "bexp"
"Bc False"
  :: "bexp"
### theory "HOL-IMP.Com"
### 0.542s elapsed time, 1.657s cpu time, 0.138s GC time
Loading theory "Draft.ACom" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0" via "Draft.Collecting")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.651s elapsed time, 1.843s cpu time, 0.195s GC time
### Ambiguous input (line 20 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" P)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" P)))))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("_applC" ("_position" post) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("_applC" ("_position" post) ("_position" c2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 22 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" P)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" P)))))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 27 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" P)))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" P)))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 28 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>Com.com.Seq" ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>Com.com.Seq" ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" P)))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" P)))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 34 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e) ("_Finset" ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_position" c2))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2)))
###       ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_position" c2))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" c2) ("_Finset" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 43 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" a)))
###     ("_list" ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" a)))))
###     ("_list" ("_position" a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>ACom.acom.Seq" ("_position" C1) ("_position" C2)))
###     ("\<^const>List.append" ("_applC" ("_position" annos) ("_position" C1))
###       ("_applC" ("_position" annos) ("_position" C2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>Com.com.Seq" ("_position" C1) ("_position" C2)))
###     ("\<^const>List.append" ("_applC" ("_position" annos) ("_position" C1))
###       ("_applC" ("_position" annos) ("_position" C2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 45 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" C1)
###         ("_position" C2) ("_position" a)))
###     ("\<^const>List.list.Cons" ("_position" a)
###       ("\<^const>List.append"
###         ("_applC" ("_position" annos) ("_position" C1))
###         ("_applC" ("_position" annos) ("_position" C2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C1)
###         ("_applC" ("_position" C2) ("_Finset" ("_position" a)))))
###     ("\<^const>List.list.Cons" ("_position" a)
###       ("\<^const>List.append"
###         ("_applC" ("_position" annos) ("_position" C1))
###         ("_applC" ("_position" annos) ("_position" C2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 50 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset" ("_applC" ("_position" f) ("_position" P)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset" ("_applC" ("_position" f) ("_position" P)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_applC" ("_position" f) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_applC" ("_position" f) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2)
###             ("_Finset" ("_applC" ("_position" f) ("_position" P)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2)
###             ("_Finset" ("_applC" ("_position" f) ("_position" P)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2)))
###       ("_applC" ("_position" f) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2)))
###       ("_applC" ("_position" f) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 69 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.Ex_binder" ("_position" S)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S)))
###         ("\<^const>HOL.eq" ("_position" S')
###           ("_applC" ("_position" f) ("_position" S)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S')))
###     ("\<^const>HOL.Ex_binder" ("_position" S)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S)))
###         ("\<^const>HOL.eq" ("_position" S')
###           ("_applC" ("_position" f) ("_position" S)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.Ex_binder" ("_position" S)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S)))))
###         ("\<^const>HOL.eq" ("_position" S')
###           ("_applC" ("_position" f) ("_position" S)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S')))
###     ("\<^const>HOL.Ex_binder" ("_position" S)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S)))))
###         ("\<^const>HOL.eq" ("_position" S')
###           ("_applC" ("_position" f) ("_position" S)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1) ("_position" c2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c2)))
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1) ("_position" c2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c2)))
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1) ("_position" c2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c2)))
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1) ("_position" c2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c2)))
###             ("_position" c2')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###         ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" S) ("_idts" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###             ("_position" c2) ("_position" S)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map_acom)
###                 ("_cargs" ("_position" f) ("_position" c2)))
###               ("_position" c2'))
###             ("\<^const>HOL.eq" ("_position" S')
###               ("_applC" ("_position" f) ("_position" S)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###         ("_position" c2') ("_position" S')))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" S) ("_idts" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###             ("_position" c2) ("_position" S)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map_acom)
###                 ("_cargs" ("_position" f) ("_position" c2)))
###               ("_position" c2'))
###             ("\<^const>HOL.eq" ("_position" S')
###               ("_applC" ("_position" f) ("_position" S)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###         ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" S) ("_idts" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_applC" ("_position" c2) ("_Finset" ("_position" S)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map_acom)
###                 ("_cargs" ("_position" f) ("_position" c2)))
###               ("_position" c2'))
###             ("\<^const>HOL.eq" ("_position" S')
###               ("_applC" ("_position" f) ("_position" S)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###         ("_position" c2') ("_position" S')))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" S) ("_idts" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_applC" ("_position" c2) ("_Finset" ("_position" S)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map_acom)
###                 ("_cargs" ("_position" f) ("_position" c2)))
###               ("_position" c2'))
###             ("\<^const>HOL.eq" ("_position" S')
###               ("_applC" ("_position" f) ("_position" S)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" e)))
###     ("\<^const>HOL.Ex_binder" ("_position" P)
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" e)))
###     ("\<^const>HOL.Ex_binder" ("_position" P)
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" d1) ("_position" d2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" d1) ("_position" d2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" d1) ("_position" d2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" d1) ("_position" d2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" d1) ("_position" d2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" d1) ("_position" d2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" d1) ("_position" d2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" d1) ("_position" d2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 104 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_position" c2)))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" d1) ("_idts" ("_position" d2) ("_position" P)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" d1)
###             ("_position" d2) ("_position" P)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_position" c2)))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" d1) ("_idts" ("_position" d2) ("_position" P)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" d1)
###             ("_applC" ("_position" d2) ("_Finset" ("_position" P)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ACom"
### 1.268s elapsed time, 1.538s cpu time, 0.174s GC time
Loading theory "Draft.Collecting" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0")
instantiation
  acom :: (order) order
  less_eq_acom == less_eq :: 'a acom => 'a acom => bool
  less_acom == ord_class.less :: 'a acom => 'a acom => bool
### Ambiguous input (line 19 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S))
###       ("\<^const>ACom.acom.Assign" ("_position" x') ("_position" e')
###         ("_position" S')))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###       ("\<^const>ACom.acom.Assign" ("_position" x') ("_position" e')
###         ("_position" S')))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S))
###       ("\<^const>Com.com.Assign" ("_position" x')
###         ("_applC" ("_position" e') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###       ("\<^const>Com.com.Assign" ("_position" x')
###         ("_applC" ("_position" e') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 20 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###       ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###         ("_position" c1'))
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###         ("_position" c2')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###       ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###         ("_position" c1'))
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###         ("_position" c2')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###       ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###         ("_position" c1'))
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###         ("_position" c2')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###       ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###         ("_position" c1'))
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###         ("_position" c2')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S))
###       ("\<^const>ACom.acom.If" ("_position" b') ("_position" c1')
###         ("_position" c2') ("_position" S')))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###           ("_position" c1'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###       ("\<^const>ACom.acom.If" ("_position" b') ("_position" c1')
###         ("_position" c2') ("_position" S')))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###           ("_position" c1'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S))
###       ("\<^const>Com.com.If" ("_position" b') ("_position" c1')
###         ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###           ("_position" c1'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###       ("\<^const>Com.com.If" ("_position" b') ("_position" c1')
###         ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###           ("_position" c1'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###             ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 30 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S')))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S')))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###             ("_position" c2') ("_position" S')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###             ("_position" c2') ("_position" S')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###             ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###             ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###               ("_position" S'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>1)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("_position" c1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>1)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("_position" c1)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>1)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S)))
###     ("_position" c1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>1)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S)))))
###     ("_position" c1)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!v. sub\<^sub>1 (SKIP {v}) = undefined
### !!v va vb. sub\<^sub>1 (v ::= va {vb}) = undefined
Found termination order: "{}"
### Ambiguous input (line 72 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>2)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("_position" c2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>2)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("_position" c2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>2)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S)))
###     ("_position" c2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>2)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S)))))
###     ("_position" c2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!v. sub\<^sub>2 (SKIP {v}) = undefined
### !!v va vb. sub\<^sub>2 (v ::= va {vb}) = undefined
### !!v va vb vc. sub\<^sub>2 ({v}
###                            WHILE va DO vb
###                            {vc}) =
###               undefined
Found termination order: "{}"
### Missing patterns in function definition:
### !!v. invar (SKIP {v}) = undefined
### !!v va vb. invar (v ::= va {vb}) = undefined
### !!v va. invar (v;;
###                va) =
###         undefined
### (1 more)
Found termination order: "{}"
### Ambiguous input (line 81 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###           ("_position" M))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" a)
###         ("_Finset"
###           ("_applC" ("_position" F)
###             ("\<^const>Set.image" ("_position" post) ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###           ("_position" M))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" a)
###       ("_applC" ("_position" F)
###         ("\<^const>Set.image" ("_position" post) ("_position" M))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs" ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###           ("_position" M))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c1)
###             ("\<^const>Set.image" ("_position" sub\<^sub>1)
###               ("_position" M)))))
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c2)
###             ("\<^const>Set.image" ("_position" sub\<^sub>2)
###               ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs"
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###           ("_position" M))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c1)
###             ("\<^const>Set.image" ("_position" sub\<^sub>1)
###               ("_position" M)))))
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c2)
###             ("\<^const>Set.image" ("_position" sub\<^sub>2)
###               ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs" ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###           ("_position" M))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c1)
###             ("\<^const>Set.image" ("_position" sub\<^sub>1)
###               ("_position" M)))))
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c2)
###             ("\<^const>Set.image" ("_position" sub\<^sub>2)
###               ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs"
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###           ("_position" M))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c1)
###             ("\<^const>Set.image" ("_position" sub\<^sub>1)
###               ("_position" M)))))
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c2)
###             ("\<^const>Set.image" ("_position" sub\<^sub>2)
###               ("_position" M))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 84 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs"
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_position" c2))
###           ("_position" M))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c1)
###             ("\<^const>Set.image" ("_position" sub\<^sub>1)
###               ("_position" M)))))
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c2)
###             ("\<^const>Set.image" ("_position" sub\<^sub>2)
###               ("_position" M)))))
###       ("_applC" ("_position" F)
###         ("\<^const>Set.image" ("_position" post) ("_position" M))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs"
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_position" c2))
###           ("_position" M))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c1)
###             ("\<^const>Set.image" ("_position" sub\<^sub>1)
###               ("_position" M)))))
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c2)
###             ("_cargs"
###               ("\<^const>Set.image" ("_position" sub\<^sub>2)
###                 ("_position" M))
###               ("_Finset"
###                 ("_applC" ("_position" F)
###                   ("\<^const>Set.image" ("_position" post)
###                     ("_position" M)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### Ambiguous input (line 143 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_Coll" ("_position" s')
###         ("_Bex" ("_position" s) ("_position" S)
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_Update" ("_position" s)
###               ("_updbind" ("_position" x)
###                 ("_applC" ("_position" aval)
###                   ("_cargs" ("_position" e) ("_position" s)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_Coll" ("_position" s')
###         ("_Bex" ("_position" s) ("_position" S)
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_Update" ("_position" s)
###               ("_updbind" ("_position" x)
###                 ("_applC" ("_position" aval)
###                   ("_cargs" ("_position" e) ("_position" s)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_Coll" ("_position" s')
###             ("_Bex" ("_position" s) ("_position" S)
###               ("\<^const>HOL.eq" ("_position" s')
###                 ("_Update" ("_position" s)
###                   ("_updbind" ("_position" x)
###                     ("_applC" ("_position" aval)
###                       ("_cargs" ("_position" e) ("_position" s)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_Coll" ("_position" s')
###             ("_Bex" ("_position" s) ("_position" S)
###               ("\<^const>HOL.eq" ("_position" s')
###                 ("_Update" ("_position" s)
###                   ("_updbind" ("_position" x)
###                     ("_applC" ("_position" aval)
###                       ("_cargs" ("_position" e) ("_position" s)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step)
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step)
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step)
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step)
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("_applC" ("_position" bval)
###               ("_cargs" ("_position" b) ("_position" s))))
###           ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" bval)
###                 ("_cargs" ("_position" b) ("_position" s)))))
###           ("_cargs" ("_position" c2)
###             ("_Finset"
###               ("\<^const>Set.union"
###                 ("_applC" ("_position" post) ("_position" c1))
###                 ("_applC" ("_position" post) ("_position" c2))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("_applC" ("_position" bval)
###               ("_cargs" ("_position" b) ("_position" s))))
###           ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" bval)
###                 ("_cargs" ("_position" b) ("_position" s)))))
###           ("_cargs" ("_position" c2)
###             ("_Finset"
###               ("\<^const>Set.union"
###                 ("_applC" ("_position" post) ("_position" c1))
###                 ("_applC" ("_position" post) ("_position" c2))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("_applC" ("_position" bval)
###               ("_cargs" ("_position" b) ("_position" s))))
###           ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" bval)
###                 ("_cargs" ("_position" b) ("_position" s)))))
###           ("_position" c2)))
###       ("\<^const>Set.union" ("_applC" ("_position" post) ("_position" c1))
###         ("_applC" ("_position" post) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("_applC" ("_position" bval)
###               ("_cargs" ("_position" b) ("_position" s))))
###           ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" bval)
###                 ("_cargs" ("_position" b) ("_position" s)))))
###           ("_position" c2)))
###       ("\<^const>Set.union" ("_applC" ("_position" post) ("_position" c1))
###         ("_applC" ("_position" post) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Collecting"
### 1.826s elapsed time, 2.423s cpu time, 0.203s GC time
Loading theory "Draft.Abs_Int0" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.Abs_Int1" via "Draft.Abs_State")
class preord = type +
  fixes le :: "'a => 'a => bool"
  assumes "le_refl": "!!x. x \<sqsubseteq> x"
    and
    "le_trans":
      "!!x y z.
          [| x \<sqsubseteq> y; y \<sqsubseteq> z |] ==> x \<sqsubseteq> z"
class SL_top = preord +
  fixes join :: "'a => 'a => 'a"
    and Top :: "'a"
  assumes "join_ge1": "!!x y. x \<sqsubseteq> x \<squnion> y"
    and "join_ge2": "!!y x. y \<sqsubseteq> x \<squnion> y"
    and
    "join_least":
      "!!x z y.
          [| x \<sqsubseteq> z; y \<sqsubseteq> z |]
          ==> x \<squnion> y \<sqsubseteq> z"
    and "top": "!!x. x \<sqsubseteq> \<top>"
instantiation
  fun :: (type, SL_top) SL_top
  join_fun == join :: ('a => 'b) => ('a => 'b) => 'a => 'b
  Top_fun == Top :: 'a => 'b
  le_fun == le :: ('a => 'b) => ('a => 'b) => bool
instantiation
  acom :: (preord) preord
  le_acom == le :: 'a acom => 'a acom => bool
### Ambiguous input (line 76 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###         ("\<^const>ACom.acom.Assign" ("_position" x') ("_position" e')
###           ("_position" S'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" S))
###         ("\<^const>ACom.acom.Assign" ("_position" x') ("_position" e')
###           ("_position" S'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###         ("\<^const>Com.com.Assign" ("_position" x')
###           ("_applC" ("_position" e') ("_Finset" ("_position" S'))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" S))
###         ("\<^const>Com.com.Assign" ("_position" x')
###           ("_applC" ("_position" e') ("_Finset" ("_position" S'))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs" ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###         ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c1) ("_position" c1')))
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c2) ("_position" c2'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs" ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###         ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c1) ("_position" c1')))
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c2) ("_position" c2'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs" ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###         ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c1) ("_position" c1')))
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c2) ("_position" c2'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs" ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###         ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c1) ("_position" c1')))
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c2) ("_position" c2'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###         ("\<^const>ACom.acom.If" ("_position" b') ("_position" c1')
###           ("_position" c2') ("_position" S'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" le_acom)
###           ("_cargs" ("_position" c1) ("_position" c1')))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" le_acom)
###             ("_cargs" ("_position" c2) ("_position" c2')))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" S))
###         ("\<^const>ACom.acom.If" ("_position" b') ("_position" c1')
###           ("_position" c2') ("_position" S'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" le_acom)
###           ("_cargs" ("_position" c1) ("_position" c1')))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" le_acom)
###             ("_cargs" ("_position" c2) ("_position" c2')))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###         ("\<^const>Com.com.If" ("_position" b') ("_position" c1')
###           ("_applC" ("_position" c2') ("_Finset" ("_position" S'))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" le_acom)
###           ("_cargs" ("_position" c1) ("_position" c1')))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" le_acom)
###             ("_cargs" ("_position" c2) ("_position" c2')))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" S))
###         ("\<^const>Com.com.If" ("_position" b') ("_position" c1')
###           ("_applC" ("_position" c2') ("_Finset" ("_position" S'))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" le_acom)
###           ("_cargs" ("_position" c1) ("_position" c1')))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" le_acom)
###             ("_cargs" ("_position" c2) ("_position" c2')))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###             ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 87 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S')))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S')))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###             ("_position" c2')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 93 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###             ("_position" c2') ("_position" S')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###             ("_position" c2') ("_position" S')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###             ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###             ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###               ("_position" S'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  option :: (preord) preord
  le_option == le :: 'a option => 'a option => bool
Found termination order: "{}"
instantiation
  option :: (SL_top) SL_top
  join_option == join :: 'a option => 'a option => 'a option
  Top_option == Top :: 'a option
Found termination order: "{}"
Found termination order: "{}"
locale Val_abs
  fixes \<gamma> :: "'av => int set"
    and num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
  assumes "Val_abs \<gamma> num' plus'"
locale Abs_Int_Fun
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and \<gamma> :: "'av => int set"
  assumes "Abs_Int_Fun num' plus' \<gamma>"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 268 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_case_syntax" ("_position" S)
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" S))
###             ("_applC" ("_position" Some)
###               ("_Update" ("_position" S)
###                 ("_updbind" ("_position" x)
###                   ("_applC" ("_position" aval')
###                     ("_cargs" ("_position" e) ("_position" S))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_case_syntax" ("_position" S)
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" S))
###             ("_applC" ("_position" Some)
###               ("_Update" ("_position" S)
###                 ("_updbind" ("_position" x)
###                   ("_applC" ("_position" aval')
###                     ("_cargs" ("_position" e) ("_position" S))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_case_syntax" ("_position" S)
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1" ("_applC" ("_position" Some) ("_position" S))
###                 ("_applC" ("_position" Some)
###                   ("_Update" ("_position" S)
###                     ("_updbind" ("_position" x)
###                       ("_applC" ("_position" aval')
###                         ("_cargs" ("_position" e)
###                           ("_position" S))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_case_syntax" ("_position" S)
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1" ("_applC" ("_position" Some) ("_position" S))
###                 ("_applC" ("_position" Some)
###                   ("_Update" ("_position" S)
###                     ("_updbind" ("_position" x)
###                       ("_applC" ("_position" aval')
###                         ("_cargs" ("_position" e)
###                           ("_position" S))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 270 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S)
###           ("_cargs" ("_position" c2)
###             ("_Finset"
###               ("\<^const>Abs_Int0.SL_top_class.join"
###                 ("_applC" ("_position" post) ("_position" c1))
###                 ("_applC" ("_position" post) ("_position" c2))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S)
###           ("_cargs" ("_position" c2)
###             ("_Finset"
###               ("\<^const>Abs_Int0.SL_top_class.join"
###                 ("_applC" ("_position" post) ("_position" c1))
###                 ("_applC" ("_position" post) ("_position" c2))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c2)))
###       ("\<^const>Abs_Int0.SL_top_class.join"
###         ("_applC" ("_position" post) ("_position" c1))
###         ("_applC" ("_position" post) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c2)))
###       ("\<^const>Abs_Int0.SL_top_class.join"
###         ("_applC" ("_position" post) ("_position" c1))
###         ("_applC" ("_position" post) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Abs_Int_Fun_mono
  fixes num' :: "int => 'a"
    and plus' :: "'a => 'a => 'a"
    and \<gamma> :: "'a => int set"
  assumes "Abs_Int_Fun_mono num' plus' \<gamma>"
### theory "Draft.Abs_Int0"
### 2.000s elapsed time, 2.621s cpu time, 0.252s GC time
Loading theory "Draft.Abs_State" (required by "Draft.Abs_Int1MoreTemplates" via "Draft.Abs_Int1")
Found termination order: "{}"
Found termination order: "{}"
instantiation
  Abs_State.st :: (SL_top) SL_top
  join_st == join :: 'a Abs_State.st => 'a Abs_State.st => 'a Abs_State.st
  Top_st == Top :: 'a Abs_State.st
  le_st == le :: 'a Abs_State.st => 'a Abs_State.st => bool
locale Gamma
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and \<gamma> :: "'av => int set"
  assumes "Gamma num' plus' \<gamma>"
### theory "Draft.Abs_State"
### 0.693s elapsed time, 0.748s cpu time, 0.066s GC time
Loading theory "Draft.Abs_Int1" (required by "Draft.Abs_Int1MoreTemplates")
locale Gamma
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and \<gamma> :: "'av => int set"
  assumes "Gamma num' plus' \<gamma>"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Abs_Int
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and \<gamma> :: "'av => int set"
  assumes "Abs_Int num' plus' \<gamma>"
### Ambiguous input (line 34 of "$AFP/Abs_Int_ITP2012/Abs_Int1.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_case_syntax" ("_position" S)
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" S))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" update)
###                 ("_cargs" ("_position" S)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" aval')
###                       ("_cargs" ("_position" e) ("_position" S)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_case_syntax" ("_position" S)
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" S))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" update)
###                 ("_cargs" ("_position" S)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" aval')
###                       ("_cargs" ("_position" e) ("_position" S)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_case_syntax" ("_position" S)
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1" ("_applC" ("_position" Some) ("_position" S))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" update)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" aval')
###                           ("_cargs" ("_position" e)
###                             ("_position" S)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_case_syntax" ("_position" S)
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1" ("_applC" ("_position" Some) ("_position" S))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" update)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" aval')
###                           ("_cargs" ("_position" e)
###                             ("_position" S)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Abs_Int_ITP2012/Abs_Int1.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 37 of "$AFP/Abs_Int_ITP2012/Abs_Int1.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" c1')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c1))))
###         ("_bind" ("_position" c2')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c2)))))
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###         ("_position" c2')
###         ("\<^const>Abs_Int0.SL_top_class.join"
###           ("_applC" ("_position" post) ("_position" c1))
###           ("_applC" ("_position" post) ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" c1')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c1))))
###         ("_bind" ("_position" c2')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c2)))))
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###         ("_position" c2')
###         ("\<^const>Abs_Int0.SL_top_class.join"
###           ("_applC" ("_position" post) ("_position" c1))
###           ("_applC" ("_position" post) ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" c1')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c1))))
###         ("_bind" ("_position" c2')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c2)))))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###         ("_applC" ("_position" c2')
###           ("_Finset"
###             ("\<^const>Abs_Int0.SL_top_class.join"
###               ("_applC" ("_position" post) ("_position" c1))
###               ("_applC" ("_position" post) ("_position" c2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" c1')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c1))))
###         ("_bind" ("_position" c2')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c2)))))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###         ("_applC" ("_position" c2')
###           ("_Finset"
###             ("\<^const>Abs_Int0.SL_top_class.join"
###               ("_applC" ("_position" post) ("_position" c1))
###               ("_applC" ("_position" post) ("_position" c2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Abs_Int_mono
  fixes num' :: "int => 'a"
    and plus' :: "'a => 'a => 'a"
    and \<gamma> :: "'a => int set"
  assumes "Abs_Int_mono num' plus' \<gamma>"
locale Abs_Int_mono
  fixes num' :: "int => 'a"
    and plus' :: "'a => 'a => 'a"
    and \<gamma> :: "'a => int set"
  assumes "Abs_Int_mono num' plus' \<gamma>"
### theory "Draft.Abs_Int1"
### 0.453s elapsed time, 0.513s cpu time, 0.068s GC time
Loading theory "Draft.Abs_Int1MoreTemplates"
val templateLemmas =
   [("Abs_Int1.listrel_converse", "listrel (?r^-1) = (listrel ?r)^-1",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Abs_Int1.strict_inv_image",
     "strict (inv_image ?r ?f) = inv_image (strict ?r) ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))),
         template_var 0))),
    ("Abs_Int1.acc_inv_image", "acc ?r ==> acc (inv_image ?r ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 7, template_var 1)))))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 1, template_var 1),
                       template_var 0))))))
           ))),
    ("Abs_Int1.listrel_Cons_iff",
     "((?x # ?xs, ?y # ?ys) : listrel ?r) =
      ((?x, ?y) : ?r & (?xs, ?ys) : listrel ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 4),
                 template_var 3)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Abs_Int1.le_iff_le_annos",
     "(?c1.0 \<sqsubseteq> ?c2.0) =
      ((annos ?c1.0, annos ?c2.0) : listrel {(x, y). x \<sqsubseteq> y} &
       strip ?c1.0 = strip ?c2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 1)),
                     template_app (template_hole 6, template_var 0))),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, t_empty))))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Abs_Int1.listrel_app",
     "[| (?xs1.0, ?ys1.0) : listrel ?r; (?xs2.0, ?ys2.0) : listrel ?r |]
      ==> (?xs1.0 @ ?xs2.0, ?ys1.0 @ ?ys2.0) : listrel ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_var 3)),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app (template_hole 2, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_app (template_hole 2, template_var 2))
           ))),
    ("Abs_Int1.listrel_app_same_size",
     "[| length ?xs1.0 = length ?ys1.0; length ?xs2.0 = length ?ys2.0 |]
      ==> ((?xs1.0 @ ?xs2.0, ?ys1.0 @ ?ys2.0) : listrel ?r) =
          ((?xs1.0, ?ys1.0) : listrel ?r & (?xs2.0, ?ys2.0) : listrel ?r)",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 4),
          template_app (template_hole 7, template_var 3)),
        template_equation
         (template_app (template_hole 8, template_var 2),
          template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 4),
                   template_var 2)),
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1))),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 3)),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1)),
             template_app (template_hole 1, template_var 0)))))),
    ("Abs_Int1.acc_listrel",
     "[| refl ?r; trans ?r; acc ?r |] ==> acc (listrel ?r - {([], [])})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 13,
              template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 0),
                  template_app
                   (template_hole 10,
                    template_app (template_hole 12, template_var 0)))))
            )],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app (template_hole 5, template_var 0)),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_hole 2)),
                       template_hole 1))),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_var 0)),
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 3, template_hole 2),
                             template_hole 2)),
                         template_hole 1)))))))
           ))),
    ("Abs_Int1.pfp_termination",
     "[| !!x y. x \<sqsubseteq> y ==> ?f x \<sqsubseteq> ?f y;
         acc {(x, y). x \<sqsubseteq> y}; ?x0.0 \<sqsubseteq> ?f ?x0.0 |]
      ==> EX x. pfp ?f ?x0.0 = Some x",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, t_empty))),
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 8,
                      template_app
                       (template_hole 6,
                        template_app (template_hole 5, t_empty)))))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_var 1, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Abs_Int1.lpfpc_termination",
     "[| acc {(x, y). x \<sqsubseteq> y};
         !!x y. x \<sqsubseteq> y ==> ?f x \<sqsubseteq> ?f y;
         !!c. strip (?f c) = strip c |]
      ==> EX c'. lpfp\<^sub>c ?f ?c = Some c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_hole 11,
                      template_app (template_hole 10, t_empty))),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_hole 13,
                      template_app
                       (template_hole 11,
                        template_app (template_hole 10, t_empty)))))))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Abs_Int1.measure_st",
     "[| (strict {(x, y). x \<sqsubseteq> y})^-1 <= measure ?m;
         ALL x y. x \<sqsubseteq> y & y \<sqsubseteq> x --> ?m x = ?m y |]
      ==> (strict {(S, S'). S \<sqsubseteq> S'})^-1
          <= measure
              (%fd. SUM x |
                       x : set (Abs_State.dom fd) &
                       ~ \<top> \<sqsubseteq> fun fd x.
                       ?m (fun fd x) + 1)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 28,
            template_app
             (template_app
               (template_hole 27,
                template_app
                 (template_hole 26,
                  template_app (template_hole 25, t_empty))),
              template_app
               (template_hole 23,
                template_app
                 (template_hole 28,
                  template_app
                   (template_hole 26,
                    template_app (template_hole 25, t_empty)))))),
          template_app (template_hole 22, template_var 0)),
        template_predicate (template_app (template_hole 21, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 16,
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_hole 14,
                 template_app (template_hole 13, t_empty))),
             template_app
              (template_hole 11,
               template_app
                (template_hole 16,
                 template_app
                  (template_hole 14,
                   template_app (template_hole 13, t_empty)))))),
         template_app (template_hole 10, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Abs_Int1MoreTemplates"
### 0.396s elapsed time, 0.520s cpu time, 0.039s GC time
val it = (): unit
