Loading theory "HOL-IMP.AExp" (required by "Draft.AComMoreTemplates" via "Draft.ACom" via "HOL-IMP.Com" via "HOL-IMP.BExp")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AComMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AComMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AComMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.492s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AComMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.244s elapsed time, 0.983s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AComMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.360s elapsed time, 1.438s cpu time, 0.129s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AComMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
### theory "HOL-IMP.AExp"
### 0.908s elapsed time, 3.602s cpu time, 0.315s GC time
Loading theory "HOL-IMP.BExp" (required by "Draft.AComMoreTemplates" via "Draft.ACom" via "HOL-IMP.Com")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.848s elapsed time, 3.331s cpu time, 0.364s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.128s elapsed time, 4.281s cpu time, 0.914s GC time
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
"5"
  :: "int"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
"V ''x''"
  :: "aexp"
"True"
  :: "bool"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.134s elapsed time, 7.533s cpu time, 1.147s GC time
Loading theory "Draft.Templates" (required by "Draft.AComMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
### theory "HOL-IMP.BExp"
### 1.367s elapsed time, 4.479s cpu time, 0.874s GC time
Loading theory "HOL-IMP.Com" (required by "Draft.AComMoreTemplates" via "Draft.ACom")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.251s cpu time, 0.046s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AComMoreTemplates")
"Bc False"
  :: "bexp"
"bsimp b"
  :: "bexp"
### theory "HOL-IMP.Com"
### 0.550s elapsed time, 1.638s cpu time, 0.115s GC time
Loading theory "Draft.ACom" (required by "Draft.AComMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.608s elapsed time, 1.675s cpu time, 0.121s GC time
### Ambiguous input (line 20 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" P)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" P)))))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("_applC" ("_position" post) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("_applC" ("_position" post) ("_position" c2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 22 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" P)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" P)))))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 27 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" P)))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" P)))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 28 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>Com.com.Seq" ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>Com.com.Seq" ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" P)))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" P)))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 34 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e) ("_Finset" ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_position" c2))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2)))
###       ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_position" c2))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" c2) ("_Finset" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 43 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" a)))
###     ("_list" ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" a)))))
###     ("_list" ("_position" a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>ACom.acom.Seq" ("_position" C1) ("_position" C2)))
###     ("\<^const>List.append" ("_applC" ("_position" annos) ("_position" C1))
###       ("_applC" ("_position" annos) ("_position" C2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>Com.com.Seq" ("_position" C1) ("_position" C2)))
###     ("\<^const>List.append" ("_applC" ("_position" annos) ("_position" C1))
###       ("_applC" ("_position" annos) ("_position" C2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 45 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" C1)
###         ("_position" C2) ("_position" a)))
###     ("\<^const>List.list.Cons" ("_position" a)
###       ("\<^const>List.append"
###         ("_applC" ("_position" annos) ("_position" C1))
###         ("_applC" ("_position" annos) ("_position" C2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C1)
###         ("_applC" ("_position" C2) ("_Finset" ("_position" a)))))
###     ("\<^const>List.list.Cons" ("_position" a)
###       ("\<^const>List.append"
###         ("_applC" ("_position" annos) ("_position" C1))
###         ("_applC" ("_position" annos) ("_position" C2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 50 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset" ("_applC" ("_position" f) ("_position" P)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset" ("_applC" ("_position" f) ("_position" P)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_applC" ("_position" f) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_applC" ("_position" f) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2)
###             ("_Finset" ("_applC" ("_position" f) ("_position" P)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2)
###             ("_Finset" ("_applC" ("_position" f) ("_position" P)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2)))
###       ("_applC" ("_position" f) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2)))
###       ("_applC" ("_position" f) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 69 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.Ex_binder" ("_position" S)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S)))
###         ("\<^const>HOL.eq" ("_position" S')
###           ("_applC" ("_position" f) ("_position" S)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S')))
###     ("\<^const>HOL.Ex_binder" ("_position" S)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S)))
###         ("\<^const>HOL.eq" ("_position" S')
###           ("_applC" ("_position" f) ("_position" S)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.Ex_binder" ("_position" S)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S)))))
###         ("\<^const>HOL.eq" ("_position" S')
###           ("_applC" ("_position" f) ("_position" S)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S')))
###     ("\<^const>HOL.Ex_binder" ("_position" S)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S)))))
###         ("\<^const>HOL.eq" ("_position" S')
###           ("_applC" ("_position" f) ("_position" S)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1) ("_position" c2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c2)))
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1) ("_position" c2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c2)))
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1) ("_position" c2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c2)))
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1) ("_position" c2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c2)))
###             ("_position" c2')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###         ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" S) ("_idts" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###             ("_position" c2) ("_position" S)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map_acom)
###                 ("_cargs" ("_position" f) ("_position" c2)))
###               ("_position" c2'))
###             ("\<^const>HOL.eq" ("_position" S')
###               ("_applC" ("_position" f) ("_position" S)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###         ("_position" c2') ("_position" S')))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" S) ("_idts" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###             ("_position" c2) ("_position" S)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map_acom)
###                 ("_cargs" ("_position" f) ("_position" c2)))
###               ("_position" c2'))
###             ("\<^const>HOL.eq" ("_position" S')
###               ("_applC" ("_position" f) ("_position" S)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###         ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" S) ("_idts" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_applC" ("_position" c2) ("_Finset" ("_position" S)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map_acom)
###                 ("_cargs" ("_position" f) ("_position" c2)))
###               ("_position" c2'))
###             ("\<^const>HOL.eq" ("_position" S')
###               ("_applC" ("_position" f) ("_position" S)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###         ("_position" c2') ("_position" S')))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" S) ("_idts" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_applC" ("_position" c2) ("_Finset" ("_position" S)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map_acom)
###                 ("_cargs" ("_position" f) ("_position" c2)))
###               ("_position" c2'))
###             ("\<^const>HOL.eq" ("_position" S')
###               ("_applC" ("_position" f) ("_position" S)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" e)))
###     ("\<^const>HOL.Ex_binder" ("_position" P)
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" e)))
###     ("\<^const>HOL.Ex_binder" ("_position" P)
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" d1) ("_position" d2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" d1) ("_position" d2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" d1) ("_position" d2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" d1) ("_position" d2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" d1) ("_position" d2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" d1) ("_position" d2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" d1) ("_position" d2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" d1) ("_position" d2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 104 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_position" c2)))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" d1) ("_idts" ("_position" d2) ("_position" P)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" d1)
###             ("_position" d2) ("_position" P)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_position" c2)))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" d1) ("_idts" ("_position" d2) ("_position" P)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" d1)
###             ("_applC" ("_position" d2) ("_Finset" ("_position" P)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ACom"
### 1.245s elapsed time, 1.503s cpu time, 0.176s GC time
Loading theory "Draft.AComMoreTemplates"
val templateLemmas =
   [("ACom.strip_anno", "strip (anno ?a ?c) = ?c",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("ACom.strip_acom", "strip (ACom.map_acom ?f ?c) = strip ?c",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ACom.post_map_acom", "post (ACom.map_acom ?f ?c) = ?f (post ?c)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("ACom.set_annos_anno", "set (annos (anno ?a ?C)) = {?a}",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("ACom.strip_eq_SKIP", "(strip ?c = com.SKIP) = (EX P. ?c = SKIP {P})",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app (template_hole 2, t_empty))),
    ("ACom.size_annos_same",
     "strip ?C1.0 = strip ?C2.0 ==>
      length (annos ?C1.0) = length (annos ?C2.0)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("ACom.strip_eq_Assign",
     "(strip ?c = ?x ::= ?e) = (EX P. ?c = ?x ::= ?e {P})",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("ACom.size_annos_same2",
     "strip ?C1.0 = strip ?C2.0 ==>
      (length (annos ?C1.0) = length (annos ?C2.0)) = True",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_hole 0))),
    ("ACom.map_acom_SKIP",
     "(ACom.map_acom ?f ?c = SKIP {?S'}) =
      (EX S. ?c = SKIP {S} & ?S' = ?f S)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("ACom.map_acom_Assign",
     "(ACom.map_acom ?f ?c = ?x ::= ?e {?S'}) =
      (EX S. ?c = ?x ::= ?e {S} & ?S' = ?f S)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("ACom.strip_eq_While",
     "(strip ?c = WHILE ?b DO ?c1.0) =
      (EX I d1 P. ?c = {I}
                       WHILE ?b DO d1
                       {P} &
                  strip d1 = ?c1.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 2)),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("ACom.strip_eq_Seq",
     "(strip ?c = ?c1.0;; ?c2.0) =
      (EX d1 d2. ?c = d1;;
                 d2 &
                 strip d1 = ?c1.0 & strip d2 = ?c2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("ACom.map_acom_Seq",
     "(ACom.map_acom ?f ?c = ?c1';;
       ?c2') =
      (EX c1 c2.
          ?c = c1;;
          c2 &
          ACom.map_acom ?f c1 = ?c1' & ACom.map_acom ?f c2 = ?c2')",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("ACom.strip_eq_If",
     "(strip ?c = IF ?b THEN ?c1.0 ELSE ?c2.0) =
      (EX d1 d2 P.
          ?c = IF ?b THEN d1 ELSE d2
               {P} &
          strip d1 = ?c1.0 & strip d2 = ?c2.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("ACom.map_acom_While",
     "(ACom.map_acom ?f ?w = {?I'}
                             WHILE ?b DO ?c'
                             {?P'}) =
      (EX I P c.
          ?w = {I}
               WHILE ?b DO c
               {P} &
          ACom.map_acom ?f c = ?c' & ?I' = ?f I & ?P' = ?f P)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("ACom.map_acom_If",
     "(ACom.map_acom ?f ?c = IF ?b THEN ?c1' ELSE ?c2'
                             {?S'}) =
      (EX S c1 c2.
          ?c = IF ?b THEN c1 ELSE c2
               {S} &
          ACom.map_acom ?f c1 = ?c1' &
          ACom.map_acom ?f c2 = ?c2' & ?S' = ?f S)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 5),
             template_var 4)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 5, t_empty)))]:
   (string * thm * template) list
### theory "Draft.AComMoreTemplates"
### 0.356s elapsed time, 0.532s cpu time, 0.045s GC time
val it = (): unit
