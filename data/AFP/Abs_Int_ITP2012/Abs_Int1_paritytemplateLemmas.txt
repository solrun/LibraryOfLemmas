   [("Abs_Int1_parity.gamma_num'", "?n : \<gamma>_parity (num_parity ?n)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Abs_Int1_parity.AI_parity_Some", "EX c'. AI_parity ?c = Some c'",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Abs_Int1_parity.strip_step'", "strip (step_parity ?S ?c) = strip ?c",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Abs_Int1_parity.mono_gamma",
     "?a \<sqsubseteq> ?b ==> \<gamma>_parity ?a <= \<gamma>_parity ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Abs_Int1_parity.mono_aval'",
     "?S \<sqsubseteq> ?S' ==>
      aval_parity ?e ?S \<sqsubseteq> aval_parity ?e ?S'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Abs_Int1_parity.mono_gamma_f",
     "?f \<sqsubseteq> ?g ==> \<gamma>\<^sub>f ?f <= \<gamma>\<^sub>f ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Abs_Int1_parity.mono_gamma_o",
     "?sa \<sqsubseteq> ?sa' ==>
      \<gamma>\<^sub>o ?sa <= \<gamma>\<^sub>o ?sa'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)))),
    ("Abs_Int1_parity.AI_sound",
     "AI_parity ?c = Some ?c' ==> CS ?c <= \<gamma>\<^sub>c ?c'",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Abs_Int1_parity.aval'_sound",
     "?s : \<gamma>\<^sub>f ?S ==>
      aval ?a ?s : \<gamma>_parity (aval_parity ?a ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Abs_Int1_parity.mono_gamma_c",
     "?ca \<sqsubseteq> ?ca' ==>
      \<gamma>\<^sub>c ?ca <= \<gamma>\<^sub>c ?ca'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Abs_Int1_parity.in_gamma_option_iff",
     "(?x : \<gamma>_option ?r ?u) = (EX u'. ?u = Some u' & ?x : ?r u')",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Abs_Int1_parity.mono_step'",
     "[| ?S \<sqsubseteq> ?S'; ?c \<sqsubseteq> ?c' |]
      ==> step_parity ?S ?c \<sqsubseteq> step_parity ?S' ?c'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Abs_Int1_parity.mono_plus'",
     "[| ?a1.0 \<sqsubseteq> ?b1.0; ?a2.0 \<sqsubseteq> ?b2.0 |]
      ==> plus_parity ?a1.0 ?a2.0 \<sqsubseteq> plus_parity ?b1.0 ?b2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Abs_Int1_parity.mono_update",
     "[| ?a \<sqsubseteq> ?a'; ?S \<sqsubseteq> ?S' |]
      ==> update ?S ?x ?a \<sqsubseteq> update ?S' ?x ?a'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0),
                 template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3))
           ))),
    ("Abs_Int1_parity.gamma_plus'",
     "[| ?n1.0 : \<gamma>_parity ?a1.0; ?n2.0 : \<gamma>_parity ?a2.0 |]
      ==> ?n1.0 + ?n2.0 : \<gamma>_parity (plus_parity ?a1.0 ?a2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("Abs_Int1_parity.in_gamma_update",
     "[| ?s : \<gamma>\<^sub>f ?S; ?i : \<gamma>_parity ?a |]
      ==> ?s(?x := ?i) : \<gamma>\<^sub>f (update ?S ?x ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0),
                 template_var 1)))
           ))),
    ("Abs_Int1_parity.step_preserves_le",
     "[| ?S <= \<gamma>\<^sub>o ?S'; ?c <= \<gamma>\<^sub>c ?c' |]
      ==> step ?S ?c <= \<gamma>\<^sub>c (step_parity ?S' ?c')",
     template_implication
      ([template_inequation
         (less_equals, template_var 3,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_hole 4)),
            template_var 2)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_app
             (template_hole 2,
              template_app
               (template_hole 6,
                template_app (template_hole 5, template_hole 4))),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 3), template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4))),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Abs_Int1_parity.AI_Some_measure",
     "[| (strict {(x, y). x \<sqsubseteq> y})^-1 <= measure ?m;
         ALL x y. x \<sqsubseteq> y & y \<sqsubseteq> x --> ?m x = ?m y |]
      ==> EX c'. AI_parity ?c = Some c'",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 14,
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_hole 12,
                  template_app (template_hole 11, t_empty))),
              template_app
               (template_hole 9,
                template_app
                 (template_hole 14,
                  template_app
                   (template_hole 12,
                    template_app (template_hole 11, t_empty)))))),
          template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty))))]
