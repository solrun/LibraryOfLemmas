Loading theory "Draft.Complete_Lattice_ix" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0" via "Draft.Collecting")
Loading theory "HOL-IMP.AExp" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0" via "Draft.Collecting" via "Draft.ACom" via "HOL-IMP.Com" via "HOL-IMP.BExp")
Loading theory "HOL-Library.Char_ord" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2" via "Draft.Abs_Int1" via "Draft.Abs_State")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
locale Complete_Lattice_ix
  fixes L :: "'i => 'a set"
    and Glb :: "'i => 'a set => 'a"
  assumes "Complete_Lattice_ix L Glb"
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "Draft.Complete_Lattice_ix"
### 0.066s elapsed time, 0.297s cpu time, 0.000s GC time
Loading theory "HOL-Library.List_Lexorder" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2" via "Draft.Abs_Int1" via "Draft.Abs_State")
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### theory "HOL-Library.Char_ord"
### 0.087s elapsed time, 0.383s cpu time, 0.000s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  list :: (ord) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
instantiation
  list :: (linorder) distrib_lattice
  inf_list == inf :: 'a list => 'a list => 'a list
  sup_list == sup :: 'a list => 'a list => 'a list
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.533s cpu time, 0.044s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  list :: (order) order_bot
  bot_list == bot :: 'a list
### theory "HOL-Library.List_Lexorder"
### 0.090s elapsed time, 0.344s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.194s elapsed time, 0.759s cpu time, 0.071s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0")
### theory "HOL-Library.Nat_Bijection"
### 0.290s elapsed time, 1.131s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.355s elapsed time, 1.397s cpu time, 0.166s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### theory "HOL-IMP.AExp"
### 0.785s elapsed time, 3.123s cpu time, 0.281s GC time
Loading theory "HOL-IMP.BExp" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0" via "Draft.Collecting" via "Draft.ACom" via "HOL-IMP.Com")
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
consts
  snth :: "'a stream => nat => 'a"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.749s elapsed time, 2.950s cpu time, 0.309s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"12"
  :: "int"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
"12"
  :: "int"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.872s elapsed time, 3.347s cpu time, 0.663s GC time
"12"
  :: "int"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
"5"
  :: "int"
"V ''x''"
  :: "aexp"
Found termination order: "size <*mlex*> {}"
"True"
  :: "bool"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 1.789s elapsed time, 6.686s cpu time, 0.981s GC time
Loading theory "Draft.Templates" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
### theory "HOL-IMP.BExp"
### 1.183s elapsed time, 4.262s cpu time, 0.744s GC time
Loading theory "HOL-IMP.Com" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0" via "Draft.Collecting" via "Draft.ACom")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.170s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Abs_Int3MoreTemplates")
"Bc False"
  :: "bexp"
"bsimp b"
  :: "bexp"
### theory "HOL-IMP.Com"
### 0.461s elapsed time, 1.429s cpu time, 0.129s GC time
Loading theory "Draft.ACom" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0" via "Draft.Collecting")
Loading theory "HOL-IMP.Abs_Int_Tests" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl")
Loading theory "HOL-IMP.Vars" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2")
class vars = type +
  fixes vars :: "'a => char list set"
instantiation
  aexp :: vars
  vars_aexp == vars :: aexp => char list set
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.534s elapsed time, 1.708s cpu time, 0.174s GC time
### theory "HOL-IMP.Abs_Int_Tests"
### 0.107s elapsed time, 0.421s cpu time, 0.046s GC time
Found termination order: "size <*mlex*> {}"
instantiation
  bexp :: vars
  vars_bexp == vars :: bexp => char list set
Found termination order: "size <*mlex*> {}"
"{''x'', ''y''}"
  :: "char list set"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  com :: vars
  vars_com == vars :: com => char list set
### theory "HOL-IMP.Vars"
### 0.385s elapsed time, 1.328s cpu time, 0.147s GC time
"{''y'', ''z'', ''x''}"
  :: "char list set"
### Ambiguous input (line 20 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" P)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" P)))))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("_applC" ("_position" post) ("_position" c2))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("_applC" ("_position" post) ("_position" c2))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 22 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" P)))
###     ("_position" P)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" post)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" P)))))
###     ("_position" P)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 27 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" P)))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" P)))))
###     ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 28 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>Com.com.Seq" ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>Com.com.Seq" ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 29 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" P)))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" strip)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" P)))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" strip) ("_position" c1))
###       ("_applC" ("_position" strip) ("_position" c2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 34 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.Assign" ("_position" x) ("_position" e))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e) ("_Finset" ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 35 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_position" c2))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c2)))
###       ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" anno)
###       ("_cargs" ("_position" a)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_position" c2))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a) ("_position" c1)))
###       ("_applC" ("_position" anno)
###         ("_cargs" ("_position" a)
###           ("_cargs" ("_position" c2) ("_Finset" ("_position" a))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 43 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" a)))
###     ("_list" ("_position" a))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" a)))))
###     ("_list" ("_position" a))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 44 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>ACom.acom.Seq" ("_position" C1) ("_position" C2)))
###     ("\<^const>List.append" ("_applC" ("_position" annos) ("_position" C1))
###       ("_applC" ("_position" annos) ("_position" C2)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>Com.com.Seq" ("_position" C1) ("_position" C2)))
###     ("\<^const>List.append" ("_applC" ("_position" annos) ("_position" C1))
###       ("_applC" ("_position" annos) ("_position" C2)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 45 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" C1)
###         ("_position" C2) ("_position" a)))
###     ("\<^const>List.list.Cons" ("_position" a)
###       ("\<^const>List.append"
###         ("_applC" ("_position" annos) ("_position" C1))
###         ("_applC" ("_position" annos) ("_position" C2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" annos)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" C1)
###         ("_applC" ("_position" C2) ("_Finset" ("_position" a)))))
###     ("\<^const>List.list.Cons" ("_position" a)
###       ("\<^const>List.append"
###         ("_applC" ("_position" annos) ("_position" C1))
###         ("_applC" ("_position" annos) ("_position" C2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 50 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset" ("_applC" ("_position" f) ("_position" P)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset" ("_applC" ("_position" f) ("_position" P)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_applC" ("_position" f) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_applC" ("_position" f) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 51 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 52 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2)
###             ("_Finset" ("_applC" ("_position" f) ("_position" P)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2)
###             ("_Finset" ("_applC" ("_position" f) ("_position" P)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2)))
###       ("_applC" ("_position" f) ("_position" P)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_acom)
###       ("_cargs" ("_position" f)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c1)))
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c2)))
###       ("_applC" ("_position" f) ("_position" P)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 69 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.Ex_binder" ("_position" S)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S)))
###         ("\<^const>HOL.eq" ("_position" S')
###           ("_applC" ("_position" f) ("_position" S)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S')))
###     ("\<^const>HOL.Ex_binder" ("_position" S)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S)))
###         ("\<^const>HOL.eq" ("_position" S')
###           ("_applC" ("_position" f) ("_position" S)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.Ex_binder" ("_position" S)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S)))))
###         ("\<^const>HOL.eq" ("_position" S')
###           ("_applC" ("_position" f) ("_position" S)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S')))
###     ("\<^const>HOL.Ex_binder" ("_position" S)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S)))))
###         ("\<^const>HOL.eq" ("_position" S')
###           ("_applC" ("_position" f) ("_position" S)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1) ("_position" c2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c2)))
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1) ("_position" c2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c2)))
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1) ("_position" c2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c2)))
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1) ("_position" c2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c2)))
###             ("_position" c2')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###         ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" S) ("_idts" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###             ("_position" c2) ("_position" S)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map_acom)
###                 ("_cargs" ("_position" f) ("_position" c2)))
###               ("_position" c2'))
###             ("\<^const>HOL.eq" ("_position" S')
###               ("_applC" ("_position" f) ("_position" S)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###         ("_position" c2') ("_position" S')))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" S) ("_idts" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###             ("_position" c2) ("_position" S)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map_acom)
###                 ("_cargs" ("_position" f) ("_position" c2)))
###               ("_position" c2'))
###             ("\<^const>HOL.eq" ("_position" S')
###               ("_applC" ("_position" f) ("_position" S)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###         ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" S) ("_idts" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_applC" ("_position" c2) ("_Finset" ("_position" S)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map_acom)
###                 ("_cargs" ("_position" f) ("_position" c2)))
###               ("_position" c2'))
###             ("\<^const>HOL.eq" ("_position" S')
###               ("_applC" ("_position" f) ("_position" S)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" map_acom)
###         ("_cargs" ("_position" f) ("_position" c)))
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###         ("_position" c2') ("_position" S')))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" S) ("_idts" ("_position" c1) ("_position" c2)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_applC" ("_position" c2) ("_Finset" ("_position" S)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" map_acom)
###               ("_cargs" ("_position" f) ("_position" c1)))
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" map_acom)
###                 ("_cargs" ("_position" f) ("_position" c2)))
###               ("_position" c2'))
###             ("\<^const>HOL.eq" ("_position" S')
###               ("_applC" ("_position" f) ("_position" S)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 96 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" e)))
###     ("\<^const>HOL.Ex_binder" ("_position" P)
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.Assign" ("_position" x) ("_position" e)))
###     ("\<^const>HOL.Ex_binder" ("_position" P)
###       ("\<^const>HOL.eq" ("_position" c)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 100 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" d1) ("_position" d2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" d1) ("_position" d2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" d1) ("_position" d2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" d1) ("_position" d2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" d1) ("_position" d2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" d1) ("_position" d2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" d1) ("_position" d2))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" d1) ("_position" d2)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 104 of "$AFP/Abs_Int_ITP2012/ACom.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_position" c2)))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" d1) ("_idts" ("_position" d2) ("_position" P)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" d1)
###             ("_position" d2) ("_position" P)))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" c))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_position" c2)))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" d1) ("_idts" ("_position" d2) ("_position" P)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" d1)
###             ("_applC" ("_position" d2) ("_Finset" ("_position" P)))))
###         ("\<^const>HOL.conj"
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d1))
###             ("_position" c1))
###           ("\<^const>HOL.eq" ("_applC" ("_position" strip) ("_position" d2))
###             ("_position" c2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ACom"
### 1.552s elapsed time, 3.140s cpu time, 1.000s GC time
Loading theory "Draft.Collecting" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2" via "Draft.Abs_Int1" via "Draft.Abs_State" via "Draft.Abs_Int0")
instantiation
  acom :: (order) order
  less_eq_acom == less_eq :: 'a acom => 'a acom => bool
  less_acom == ord_class.less :: 'a acom => 'a acom => bool
### Ambiguous input (line 19 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S))
###       ("\<^const>ACom.acom.Assign" ("_position" x') ("_position" e')
###         ("_position" S')))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###       ("\<^const>ACom.acom.Assign" ("_position" x') ("_position" e')
###         ("_position" S')))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S))
###       ("\<^const>Com.com.Assign" ("_position" x')
###         ("_applC" ("_position" e') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###       ("\<^const>Com.com.Assign" ("_position" x')
###         ("_applC" ("_position" e') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 20 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###       ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###         ("_position" c1'))
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###         ("_position" c2')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###       ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###         ("_position" c1'))
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###         ("_position" c2')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###       ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###         ("_position" c1'))
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###         ("_position" c2')))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###       ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###     ("\<^const>HOL.conj"
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###         ("_position" c1'))
###       ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###         ("_position" c2')))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 21 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S))
###       ("\<^const>ACom.acom.If" ("_position" b') ("_position" c1')
###         ("_position" c2') ("_position" S')))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###           ("_position" c1'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###       ("\<^const>ACom.acom.If" ("_position" b') ("_position" c1')
###         ("_position" c2') ("_position" S')))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###           ("_position" c1'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S))
###       ("\<^const>Com.com.If" ("_position" b') ("_position" c1')
###         ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###           ("_position" c1'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###       ("\<^const>Com.com.If" ("_position" b') ("_position" c1')
###         ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###           ("_position" c1'))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###             ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 30 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S')))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S')))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###         ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###           ("_position" S'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 33 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###             ("_position" c2')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###             ("_position" c2') ("_position" S')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###             ("_position" c2') ("_position" S')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###             ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###             ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less_eq" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Orderings.ord_class.less_eq" ("_position" S)
###               ("_position" S'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 67 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>1)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("_position" c1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>1)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("_position" c1)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 68 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>1)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S)))
###     ("_position" c1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>1)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S)))))
###     ("_position" c1)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!v. sub\<^sub>1 (SKIP {v}) = undefined
### !!v va vb. sub\<^sub>1 (v ::= va {vb}) = undefined
Found termination order: "{}"
### Ambiguous input (line 72 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>2)
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2)))
###     ("_position" c2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>2)
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2)))
###     ("_position" c2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 73 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>2)
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S)))
###     ("_position" c2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" sub\<^sub>2)
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S)))))
###     ("_position" c2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!v. sub\<^sub>2 (SKIP {v}) = undefined
### !!v va vb. sub\<^sub>2 (v ::= va {vb}) = undefined
### !!v va vb vc. sub\<^sub>2 ({v}
###                            WHILE va DO vb
###                            {vc}) =
###               undefined
Found termination order: "{}"
### Missing patterns in function definition:
### !!v. invar (SKIP {v}) = undefined
### !!v va vb. invar (v ::= va {vb}) = undefined
### !!v va. invar (v;;
###                va) =
###         undefined
### (1 more)
Found termination order: "{}"
### Ambiguous input (line 81 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###           ("_position" M))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" a)
###         ("_Finset"
###           ("_applC" ("_position" F)
###             ("\<^const>Set.image" ("_position" post) ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs"
###           ("\<^const>Com.com.Assign" ("_position" x) ("_position" a))
###           ("_position" M))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" a)
###       ("_applC" ("_position" F)
###         ("\<^const>Set.image" ("_position" post) ("_position" M))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 82 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs" ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###           ("_position" M))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c1)
###             ("\<^const>Set.image" ("_position" sub\<^sub>1)
###               ("_position" M)))))
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c2)
###             ("\<^const>Set.image" ("_position" sub\<^sub>2)
###               ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs"
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###           ("_position" M))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c1)
###             ("\<^const>Set.image" ("_position" sub\<^sub>1)
###               ("_position" M)))))
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c2)
###             ("\<^const>Set.image" ("_position" sub\<^sub>2)
###               ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs" ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###           ("_position" M))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c1)
###             ("\<^const>Set.image" ("_position" sub\<^sub>1)
###               ("_position" M)))))
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c2)
###             ("\<^const>Set.image" ("_position" sub\<^sub>2)
###               ("_position" M))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs"
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###           ("_position" M))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c1)
###             ("\<^const>Set.image" ("_position" sub\<^sub>1)
###               ("_position" M)))))
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c2)
###             ("\<^const>Set.image" ("_position" sub\<^sub>2)
###               ("_position" M))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 84 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs"
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_position" c2))
###           ("_position" M))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c1)
###             ("\<^const>Set.image" ("_position" sub\<^sub>1)
###               ("_position" M)))))
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c2)
###             ("\<^const>Set.image" ("_position" sub\<^sub>2)
###               ("_position" M)))))
###       ("_applC" ("_position" F)
###         ("\<^const>Set.image" ("_position" post) ("_position" M))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" lift)
###       ("_cargs" ("_position" F)
###         ("_cargs"
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_position" c2))
###           ("_position" M))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c1)
###             ("\<^const>Set.image" ("_position" sub\<^sub>1)
###               ("_position" M)))))
###       ("_applC" ("_position" lift)
###         ("_cargs" ("_position" F)
###           ("_cargs" ("_position" c2)
###             ("_cargs"
###               ("\<^const>Set.image" ("_position" sub\<^sub>2)
###                 ("_position" M))
###               ("_Finset"
###                 ("_applC" ("_position" F)
###                   ("\<^const>Set.image" ("_position" post)
###                     ("_position" M)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### Ambiguous input (line 143 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_Coll" ("_position" s')
###         ("_Bex" ("_position" s) ("_position" S)
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_Update" ("_position" s)
###               ("_updbind" ("_position" x)
###                 ("_applC" ("_position" aval)
###                   ("_cargs" ("_position" e) ("_position" s)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_Coll" ("_position" s')
###         ("_Bex" ("_position" s) ("_position" S)
###           ("\<^const>HOL.eq" ("_position" s')
###             ("_Update" ("_position" s)
###               ("_updbind" ("_position" x)
###                 ("_applC" ("_position" aval)
###                   ("_cargs" ("_position" e) ("_position" s)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_Coll" ("_position" s')
###             ("_Bex" ("_position" s) ("_position" S)
###               ("\<^const>HOL.eq" ("_position" s')
###                 ("_Update" ("_position" s)
###                   ("_updbind" ("_position" x)
###                     ("_applC" ("_position" aval)
###                       ("_cargs" ("_position" e) ("_position" s)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_Coll" ("_position" s')
###             ("_Bex" ("_position" s) ("_position" S)
###               ("\<^const>HOL.eq" ("_position" s')
###                 ("_Update" ("_position" s)
###                   ("_updbind" ("_position" x)
###                     ("_applC" ("_position" aval)
###                       ("_cargs" ("_position" e) ("_position" s)))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 145 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step)
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step)
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step)
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step)
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 146 of "$AFP/Abs_Int_ITP2012/Collecting.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("_applC" ("_position" bval)
###               ("_cargs" ("_position" b) ("_position" s))))
###           ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" bval)
###                 ("_cargs" ("_position" b) ("_position" s)))))
###           ("_cargs" ("_position" c2)
###             ("_Finset"
###               ("\<^const>Set.union"
###                 ("_applC" ("_position" post) ("_position" c1))
###                 ("_applC" ("_position" post) ("_position" c2))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("_applC" ("_position" bval)
###               ("_cargs" ("_position" b) ("_position" s))))
###           ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" bval)
###                 ("_cargs" ("_position" b) ("_position" s)))))
###           ("_cargs" ("_position" c2)
###             ("_Finset"
###               ("\<^const>Set.union"
###                 ("_applC" ("_position" post) ("_position" c1))
###                 ("_applC" ("_position" post) ("_position" c2))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("_applC" ("_position" bval)
###               ("_cargs" ("_position" b) ("_position" s))))
###           ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" bval)
###                 ("_cargs" ("_position" b) ("_position" s)))))
###           ("_position" c2)))
###       ("\<^const>Set.union" ("_applC" ("_position" post) ("_position" c1))
###         ("_applC" ("_position" post) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step)
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("_applC" ("_position" bval)
###               ("_cargs" ("_position" b) ("_position" s))))
###           ("_position" c1)))
###       ("_applC" ("_position" step)
###         ("_cargs"
###           ("_Collect" ("_position" s) ("_position" S)
###             ("\<^const>HOL.Not"
###               ("_applC" ("_position" bval)
###                 ("_cargs" ("_position" b) ("_position" s)))))
###           ("_position" c2)))
###       ("\<^const>Set.union" ("_applC" ("_position" post) ("_position" c1))
###         ("_applC" ("_position" post) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Collecting"
### 2.099s elapsed time, 3.190s cpu time, 0.923s GC time
Loading theory "Draft.Abs_Int0" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2" via "Draft.Abs_Int1" via "Draft.Abs_State")
class preord = type +
  fixes le :: "'a => 'a => bool"
  assumes "le_refl": "!!x. x \<sqsubseteq> x"
    and
    "le_trans":
      "!!x y z.
          [| x \<sqsubseteq> y; y \<sqsubseteq> z |] ==> x \<sqsubseteq> z"
class SL_top = preord +
  fixes join :: "'a => 'a => 'a"
    and Top :: "'a"
  assumes "join_ge1": "!!x y. x \<sqsubseteq> x \<squnion> y"
    and "join_ge2": "!!y x. y \<sqsubseteq> x \<squnion> y"
    and
    "join_least":
      "!!x z y.
          [| x \<sqsubseteq> z; y \<sqsubseteq> z |]
          ==> x \<squnion> y \<sqsubseteq> z"
    and "top": "!!x. x \<sqsubseteq> \<top>"
instantiation
  fun :: (type, SL_top) SL_top
  join_fun == join :: ('a => 'b) => ('a => 'b) => 'a => 'b
  Top_fun == Top :: 'a => 'b
  le_fun == le :: ('a => 'b) => ('a => 'b) => bool
instantiation
  acom :: (preord) preord
  le_acom == le :: 'a acom => 'a acom => bool
### Ambiguous input (line 76 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###         ("\<^const>ACom.acom.Assign" ("_position" x') ("_position" e')
###           ("_position" S'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" S))
###         ("\<^const>ACom.acom.Assign" ("_position" x') ("_position" e')
###           ("_position" S'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###         ("\<^const>Com.com.Assign" ("_position" x')
###           ("_applC" ("_position" e') ("_Finset" ("_position" S'))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" S))
###         ("\<^const>Com.com.Assign" ("_position" x')
###           ("_applC" ("_position" e') ("_Finset" ("_position" S'))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" x) ("_position" x'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" e) ("_position" e'))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 77 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs" ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###         ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c1) ("_position" c1')))
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c2) ("_position" c2'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs" ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###         ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c1) ("_position" c1')))
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c2) ("_position" c2'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs" ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###         ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c1) ("_position" c1')))
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c2) ("_position" c2'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs" ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###         ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2'))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c1) ("_position" c1')))
###       ("_applC" ("_position" le_acom)
###         ("_cargs" ("_position" c2) ("_position" c2'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 78 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###         ("\<^const>ACom.acom.If" ("_position" b') ("_position" c1')
###           ("_position" c2') ("_position" S'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" le_acom)
###           ("_cargs" ("_position" c1) ("_position" c1')))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" le_acom)
###             ("_cargs" ("_position" c2) ("_position" c2')))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" S))
###         ("\<^const>ACom.acom.If" ("_position" b') ("_position" c1')
###           ("_position" c2') ("_position" S'))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" le_acom)
###           ("_cargs" ("_position" c1) ("_position" c1')))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" le_acom)
###             ("_cargs" ("_position" c2) ("_position" c2')))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###         ("\<^const>Com.com.If" ("_position" b') ("_position" c1')
###           ("_applC" ("_position" c2') ("_Finset" ("_position" S'))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" le_acom)
###           ("_cargs" ("_position" c1) ("_position" c1')))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" le_acom)
###             ("_cargs" ("_position" c2) ("_position" c2')))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###             ("_position" S')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" le_acom)
###       ("_cargs"
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" S))
###         ("\<^const>Com.com.If" ("_position" b') ("_position" c1')
###           ("_applC" ("_position" c2') ("_Finset" ("_position" S'))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" b) ("_position" b'))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" le_acom)
###           ("_cargs" ("_position" c1) ("_position" c1')))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" le_acom)
###             ("_cargs" ("_position" c2) ("_position" c2')))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###             ("_position" S')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Ambiguous input (line 87 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S')))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" S')))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>Com.com.Assign" ("_position" x)
###         ("_applC" ("_position" e) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###         ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_position" S')
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" S')))))
###         ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###           ("_position" S'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 90 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###             ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder" ("_idts" ("_position" c1') ("_position" c2'))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###             ("_position" c2')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 93 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###             ("_position" c2') ("_position" S')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###             ("_position" c2') ("_position" S')))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###         ("_applC" ("_position" c2) ("_Finset" ("_position" S))))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###             ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###               ("_position" S'))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.iff"
###     ("\<^const>Abs_Int0.preord_class.le"
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###         ("_position" c2) ("_position" S))
###       ("_position" c))
###     ("\<^const>HOL.Ex_binder"
###       ("_idts" ("_position" c1')
###         ("_idts" ("_position" c2') ("_position" S')))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" c)
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###             ("_applC" ("_position" c2') ("_Finset" ("_position" S')))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Abs_Int0.preord_class.le" ("_position" c1)
###             ("_position" c1'))
###           ("\<^const>HOL.conj"
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" c2)
###               ("_position" c2'))
###             ("\<^const>Abs_Int0.preord_class.le" ("_position" S)
###               ("_position" S'))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  option :: (preord) preord
  le_option == le :: 'a option => 'a option => bool
Found termination order: "{}"
instantiation
  option :: (SL_top) SL_top
  join_option == join :: 'a option => 'a option => 'a option
  Top_option == Top :: 'a option
Found termination order: "{}"
Found termination order: "{}"
locale Val_abs
  fixes \<gamma> :: "'av => int set"
    and num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
  assumes "Val_abs \<gamma> num' plus'"
locale Abs_Int_Fun
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and \<gamma> :: "'av => int set"
  assumes "Abs_Int_Fun num' plus' \<gamma>"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 268 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_case_syntax" ("_position" S)
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" S))
###             ("_applC" ("_position" Some)
###               ("_Update" ("_position" S)
###                 ("_updbind" ("_position" x)
###                   ("_applC" ("_position" aval')
###                     ("_cargs" ("_position" e) ("_position" S))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_case_syntax" ("_position" S)
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" S))
###             ("_applC" ("_position" Some)
###               ("_Update" ("_position" S)
###                 ("_updbind" ("_position" x)
###                   ("_applC" ("_position" aval')
###                     ("_cargs" ("_position" e) ("_position" S))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_case_syntax" ("_position" S)
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1" ("_applC" ("_position" Some) ("_position" S))
###                 ("_applC" ("_position" Some)
###                   ("_Update" ("_position" S)
###                     ("_updbind" ("_position" x)
###                       ("_applC" ("_position" aval')
###                         ("_cargs" ("_position" e)
###                           ("_position" S))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_case_syntax" ("_position" S)
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1" ("_applC" ("_position" Some) ("_position" S))
###                 ("_applC" ("_position" Some)
###                   ("_Update" ("_position" S)
###                     ("_updbind" ("_position" x)
###                       ("_applC" ("_position" aval')
###                         ("_cargs" ("_position" e)
###                           ("_position" S))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 270 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 271 of "$AFP/Abs_Int_ITP2012/Abs_Int0.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S)
###           ("_cargs" ("_position" c2)
###             ("_Finset"
###               ("\<^const>Abs_Int0.SL_top_class.join"
###                 ("_applC" ("_position" post) ("_position" c1))
###                 ("_applC" ("_position" post) ("_position" c2))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S)
###           ("_cargs" ("_position" c2)
###             ("_Finset"
###               ("\<^const>Abs_Int0.SL_top_class.join"
###                 ("_applC" ("_position" post) ("_position" c1))
###                 ("_applC" ("_position" post) ("_position" c2))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c2)))
###       ("\<^const>Abs_Int0.SL_top_class.join"
###         ("_applC" ("_position" post) ("_position" c1))
###         ("_applC" ("_position" post) ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c2)))
###       ("\<^const>Abs_Int0.SL_top_class.join"
###         ("_applC" ("_position" post) ("_position" c1))
###         ("_applC" ("_position" post) ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Abs_Int_Fun_mono
  fixes num' :: "int => 'a"
    and plus' :: "'a => 'a => 'a"
    and \<gamma> :: "'a => int set"
  assumes "Abs_Int_Fun_mono num' plus' \<gamma>"
### theory "Draft.Abs_Int0"
### 1.988s elapsed time, 2.642s cpu time, 0.263s GC time
Loading theory "Draft.Abs_State" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2" via "Draft.Abs_Int1")
Found termination order: "{}"
Found termination order: "{}"
instantiation
  Abs_State.st :: (SL_top) SL_top
  join_st == join :: 'a Abs_State.st => 'a Abs_State.st => 'a Abs_State.st
  Top_st == Top :: 'a Abs_State.st
  le_st == le :: 'a Abs_State.st => 'a Abs_State.st => bool
locale Gamma
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and \<gamma> :: "'av => int set"
  assumes "Gamma num' plus' \<gamma>"
### theory "Draft.Abs_State"
### 0.685s elapsed time, 0.736s cpu time, 0.059s GC time
Loading theory "Draft.Abs_Int1" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl" via "Draft.Abs_Int2")
locale Gamma
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and \<gamma> :: "'av => int set"
  assumes "Gamma num' plus' \<gamma>"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Abs_Int
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and \<gamma> :: "'av => int set"
  assumes "Abs_Int num' plus' \<gamma>"
### Ambiguous input (line 34 of "$AFP/Abs_Int_ITP2012/Abs_Int1.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_case_syntax" ("_position" S)
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" S))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" update)
###                 ("_cargs" ("_position" S)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" aval')
###                       ("_cargs" ("_position" e) ("_position" S)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_case_syntax" ("_position" S)
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" S))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" update)
###                 ("_cargs" ("_position" S)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" aval')
###                       ("_cargs" ("_position" e) ("_position" S)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_case_syntax" ("_position" S)
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1" ("_applC" ("_position" Some) ("_position" S))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" update)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" aval')
###                           ("_cargs" ("_position" e)
###                             ("_position" S)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_case_syntax" ("_position" S)
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1" ("_applC" ("_position" Some) ("_position" S))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" update)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" aval')
###                           ("_cargs" ("_position" e)
###                             ("_position" S)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 36 of "$AFP/Abs_Int_ITP2012/Abs_Int1.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 37 of "$AFP/Abs_Int_ITP2012/Abs_Int1.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" c1')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c1))))
###         ("_bind" ("_position" c2')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c2)))))
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###         ("_position" c2')
###         ("\<^const>Abs_Int0.SL_top_class.join"
###           ("_applC" ("_position" post) ("_position" c1))
###           ("_applC" ("_position" post) ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" c1')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c1))))
###         ("_bind" ("_position" c2')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c2)))))
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###         ("_position" c2')
###         ("\<^const>Abs_Int0.SL_top_class.join"
###           ("_applC" ("_position" post) ("_position" c1))
###           ("_applC" ("_position" post) ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" c1')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c1))))
###         ("_bind" ("_position" c2')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c2)))))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###         ("_applC" ("_position" c2')
###           ("_Finset"
###             ("\<^const>Abs_Int0.SL_top_class.join"
###               ("_applC" ("_position" post) ("_position" c1))
###               ("_applC" ("_position" post) ("_position" c2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" c1')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c1))))
###         ("_bind" ("_position" c2')
###           ("_applC" ("_position" step')
###             ("_cargs" ("_position" S) ("_position" c2)))))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###         ("_applC" ("_position" c2')
###           ("_Finset"
###             ("\<^const>Abs_Int0.SL_top_class.join"
###               ("_applC" ("_position" post) ("_position" c1))
###               ("_applC" ("_position" post) ("_position" c2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Abs_Int_mono
  fixes num' :: "int => 'a"
    and plus' :: "'a => 'a => 'a"
    and \<gamma> :: "'a => int set"
  assumes "Abs_Int_mono num' plus' \<gamma>"
locale Abs_Int_mono
  fixes num' :: "int => 'a"
    and plus' :: "'a => 'a => 'a"
    and \<gamma> :: "'a => int set"
  assumes "Abs_Int_mono num' plus' \<gamma>"
### theory "Draft.Abs_Int1"
### 0.432s elapsed time, 0.447s cpu time, 0.000s GC time
Loading theory "Draft.Abs_Int2" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3" via "Draft.Abs_Int2_ivl")
instantiation
  prod :: (preord, preord) preord
  le_prod == le :: 'a * 'b => 'a * 'b => bool
class L_top_bot = SL_top +
  fixes meet :: "'a => 'a => 'a"
    and bot :: "'a"
  assumes "meet_le1": "!!x y. x \<sqinter> y \<sqsubseteq> x"
    and "meet_le2": "!!x y. x \<sqinter> y \<sqsubseteq> y"
    and
    "meet_greatest":
      "!!x y z.
          [| x \<sqsubseteq> y; x \<sqsubseteq> z |]
          ==> x \<sqsubseteq> y \<sqinter> z"
  assumes "bot": "!!x. \<bottom> \<sqsubseteq> x"
locale Val_abs1_gamma
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and \<gamma> :: "'av => int set"
  assumes "Val_abs1_gamma num' plus' \<gamma>"
locale Val_abs1
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and \<gamma> :: "'av => int set"
    and test_num' :: "int => 'av => bool"
    and filter_plus' :: "'av => 'av => 'av => 'av * 'av"
    and filter_less' :: "bool => 'av => 'av => 'av * 'av"
  assumes "Val_abs1 num' plus' \<gamma> test_num' filter_plus' filter_less'"
locale Abs_Int1
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and test_num' :: "int => 'av => bool"
    and filter_plus' :: "'av => 'av => 'av => 'av * 'av"
    and filter_less' :: "bool => 'av => 'av => 'av * 'av"
    and \<gamma> :: "'av => int set"
  assumes "Abs_Int1 num' plus' test_num' filter_plus' filter_less' \<gamma>"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 153 of "$AFP/Abs_Int_ITP2012/Abs_Int2.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_case_syntax" ("_position" S)
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" S))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" update)
###                 ("_cargs" ("_position" S)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" aval')
###                       ("_cargs" ("_position" e) ("_position" S)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_case_syntax" ("_position" S)
###         ("_case2" ("_case1" ("_position" None) ("_position" None))
###           ("_case1" ("_applC" ("_position" Some) ("_position" S))
###             ("_applC" ("_position" Some)
###               ("_applC" ("_position" update)
###                 ("_cargs" ("_position" S)
###                   ("_cargs" ("_position" x)
###                     ("_applC" ("_position" aval')
###                       ("_cargs" ("_position" e) ("_position" S)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###           ("_position" P))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_case_syntax" ("_position" S)
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1" ("_applC" ("_position" Some) ("_position" S))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" update)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" aval')
###                           ("_cargs" ("_position" e)
###                             ("_position" S)))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Assign" ("_position" x)
###           ("_applC" ("_position" e) ("_Finset" ("_position" P))))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_case_syntax" ("_position" S)
###             ("_case2" ("_case1" ("_position" None) ("_position" None))
###               ("_case1" ("_applC" ("_position" Some) ("_position" S))
###                 ("_applC" ("_position" Some)
###                   ("_applC" ("_position" update)
###                     ("_cargs" ("_position" S)
###                       ("_cargs" ("_position" x)
###                         ("_applC" ("_position" aval')
###                           ("_cargs" ("_position" e)
###                             ("_position" S)))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 155 of "$AFP/Abs_Int_ITP2012/Abs_Int2.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" step')
###         ("_cargs" ("_position" S) ("_position" c1)))
###       ("_applC" ("_position" step')
###         ("_cargs" ("_applC" ("_position" post) ("_position" c1))
###           ("_position" c2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 156 of "$AFP/Abs_Int_ITP2012/Abs_Int2.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" c1')
###           ("_applC" ("_position" step')
###             ("_cargs"
###               ("_applC" ("_position" bfilter)
###                 ("_cargs" ("_position" b)
###                   ("_cargs" ("_position" True) ("_position" S))))
###               ("_position" c1))))
###         ("_bind" ("_position" c2')
###           ("_applC" ("_position" step')
###             ("_cargs"
###               ("_applC" ("_position" bfilter)
###                 ("_cargs" ("_position" b)
###                   ("_cargs" ("_position" False) ("_position" S))))
###               ("_position" c2)))))
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###         ("_position" c2')
###         ("\<^const>Abs_Int0.SL_top_class.join"
###           ("_applC" ("_position" post) ("_position" c1))
###           ("_applC" ("_position" post) ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" c1')
###           ("_applC" ("_position" step')
###             ("_cargs"
###               ("_applC" ("_position" bfilter)
###                 ("_cargs" ("_position" b)
###                   ("_cargs" ("_position" True) ("_position" S))))
###               ("_position" c1))))
###         ("_bind" ("_position" c2')
###           ("_applC" ("_position" step')
###             ("_cargs"
###               ("_applC" ("_position" bfilter)
###                 ("_cargs" ("_position" b)
###                   ("_cargs" ("_position" False) ("_position" S))))
###               ("_position" c2)))))
###       ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1')
###         ("_position" c2')
###         ("\<^const>Abs_Int0.SL_top_class.join"
###           ("_applC" ("_position" post) ("_position" c1))
###           ("_applC" ("_position" post) ("_position" c2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###           ("_position" c2) ("_position" P))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" c1')
###           ("_applC" ("_position" step')
###             ("_cargs"
###               ("_applC" ("_position" bfilter)
###                 ("_cargs" ("_position" b)
###                   ("_cargs" ("_position" True) ("_position" S))))
###               ("_position" c1))))
###         ("_bind" ("_position" c2')
###           ("_applC" ("_position" step')
###             ("_cargs"
###               ("_applC" ("_position" bfilter)
###                 ("_cargs" ("_position" b)
###                   ("_cargs" ("_position" False) ("_position" S))))
###               ("_position" c2)))))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###         ("_applC" ("_position" c2')
###           ("_Finset"
###             ("\<^const>Abs_Int0.SL_top_class.join"
###               ("_applC" ("_position" post) ("_position" c1))
###               ("_applC" ("_position" post) ("_position" c2)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" step')
###       ("_cargs" ("_position" S)
###         ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###           ("_applC" ("_position" c2) ("_Finset" ("_position" P))))))
###     ("_Let"
###       ("_binds"
###         ("_bind" ("_position" c1')
###           ("_applC" ("_position" step')
###             ("_cargs"
###               ("_applC" ("_position" bfilter)
###                 ("_cargs" ("_position" b)
###                   ("_cargs" ("_position" True) ("_position" S))))
###               ("_position" c1))))
###         ("_bind" ("_position" c2')
###           ("_applC" ("_position" step')
###             ("_cargs"
###               ("_applC" ("_position" bfilter)
###                 ("_cargs" ("_position" b)
###                   ("_cargs" ("_position" False) ("_position" S))))
###               ("_position" c2)))))
###       ("\<^const>Com.com.If" ("_position" b) ("_position" c1')
###         ("_applC" ("_position" c2')
###           ("_Finset"
###             ("\<^const>Abs_Int0.SL_top_class.join"
###               ("_applC" ("_position" post) ("_position" c1))
###               ("_applC" ("_position" post) ("_position" c2)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Abs_Int1_mono
  fixes num' :: "int => 'a"
    and plus' :: "'a => 'a => 'a"
    and test_num' :: "int => 'a => bool"
    and filter_plus' :: "'a => 'a => 'a => 'a * 'a"
    and filter_less' :: "bool => 'a => 'a => 'a * 'a"
    and \<gamma> :: "'a => int set"
  assumes
    "Abs_Int1_mono num' plus' test_num' filter_plus' filter_less' \<gamma>"
### theory "Draft.Abs_Int2"
### 1.119s elapsed time, 1.261s cpu time, 0.156s GC time
Loading theory "Draft.Abs_Int2_ivl" (required by "Draft.Abs_Int3MoreTemplates" via "Draft.Abs_Int3")
### Ambiguous input (line 18 of "$AFP/Abs_Int_ITP2012/Abs_Int2_ivl.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_Finset"
###     ("_applC" ("_position" lo) ("_cargs" ("_DDDOT") ("_position" hi))))
###   ("_applC" ("_position" I)
###     ("_cargs" ("_applC" ("_position" Some) ("_position" lo))
###       ("_applC" ("_position" Some) ("_position" hi)))))
### ("\<^const>Pure.eq"
###   ("\<^fixed>I_Some_Some" ("_position" lo) ("_position" hi))
###   ("_applC" ("_position" I)
###     ("_cargs" ("_applC" ("_position" Some) ("_position" lo))
###       ("_applC" ("_position" Some) ("_position" hi)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/Abs_Int_ITP2012/Abs_Int2_ivl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" num_ivl) ("_position" n))
###     ("_Finset"
###       ("_applC" ("_position" n) ("_cargs" ("_DDDOT") ("_position" n))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_applC" ("_position" num_ivl) ("_position" n))
###     ("\<^const>Abs_Int2_ivl.I_Some_Some" ("_position" n) ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
instantiation
  option :: (plus) plus
  plus_option == plus_class.plus :: 'a option => 'a option => 'a option
Found termination order: "{}"
### Ambiguous input (line 45 of "$AFP/Abs_Int_ITP2012/Abs_Int2_ivl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" empty)
###     ("_Finset"
###       ("_applC" ("\<^const>Groups.one_class.one")
###         ("_cargs" ("_DDDOT") ("\<^const>Groups.zero_class.zero"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" empty)
###     ("\<^const>Abs_Int2_ivl.I_Some_Some" ("\<^const>Groups.one_class.one")
###       ("\<^const>Groups.zero_class.zero"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 48 of "$AFP/Abs_Int_ITP2012/Abs_Int2_ivl.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_empty)
###       ("_Finset"
###         ("_applC" ("_position" l) ("_cargs" ("_DDDOT") ("_position" h)))))
###     ("\<^const>Orderings.ord_class.less" ("_position" h) ("_position" l))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" is_empty)
###       ("\<^const>Abs_Int2_ivl.I_Some_Some" ("_position" l) ("_position" h)))
###     ("\<^const>Orderings.ord_class.less" ("_position" h) ("_position" l))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
instantiation
  ivl :: SL_top
  join_ivl == join :: ivl => ivl => ivl
  Top_ivl == Top :: ivl
  le_ivl == le :: ivl => ivl => bool
Found termination order: "{}"
instantiation
  ivl :: L_top_bot
  meet_ivl == meet :: ivl => ivl => ivl
  bot_ivl == L_top_bot_class.bot :: ivl
instantiation
  option :: (minus) minus
  minus_option == minus :: 'a option => 'a option => 'a option
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Abs_Int2_ivl"
### 1.279s elapsed time, 1.446s cpu time, 0.208s GC time
Loading theory "Draft.Abs_Int3" (required by "Draft.Abs_Int3MoreTemplates")
class WN = SL_top +
  fixes widen :: "'a => 'a => 'a"
    and narrow :: "'a => 'a => 'a"
  assumes "widen1": "!!x y. x \<sqsubseteq> x \<nabla> y"
  assumes "widen2": "!!y x. y \<sqsubseteq> x \<nabla> y"
  assumes
    "narrow1":
      "!!y x. y \<sqsubseteq> x ==> y \<sqsubseteq> x \<triangle> y"
  assumes
    "narrow2":
      "!!y x. y \<sqsubseteq> x ==> x \<triangle> y \<sqsubseteq> x"
instantiation
  ivl :: WN
  widen_ivl == widen :: ivl => ivl => ivl
  narrow_ivl == narrow :: ivl => ivl => ivl
instantiation
  Abs_State.st :: (WN) WN
  widen_st == widen :: 'a Abs_State.st => 'a Abs_State.st => 'a Abs_State.st
  narrow_st == narrow ::
    'a Abs_State.st => 'a Abs_State.st => 'a Abs_State.st
instantiation
  option :: (WN) WN
  widen_option == widen :: 'a option => 'a option => 'a option
  narrow_option == narrow :: 'a option => 'a option => 'a option
Found termination order: "{}"
Found termination order: "{}"
### Ambiguous input (line 109 of "$AFP/Abs_Int_ITP2012/Abs_Int3.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" a1))))
###           ("\<^const>ACom.acom.Assign" ("_position" x') ("_position" e')
###             ("_position" a2)))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_applC" ("_position" f)
###             ("_cargs" ("_position" a1) ("_position" a2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" a1))
###           ("\<^const>ACom.acom.Assign" ("_position" x') ("_position" e')
###             ("_position" a2)))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_applC" ("_position" f)
###             ("_cargs" ("_position" a1) ("_position" a2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" a1))))
###           ("\<^const>Com.com.Assign" ("_position" x')
###             ("_applC" ("_position" e') ("_Finset" ("_position" a2)))))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_applC" ("_position" f)
###             ("_cargs" ("_position" a1) ("_position" a2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" a1))
###           ("\<^const>Com.com.Assign" ("_position" x')
###             ("_applC" ("_position" e') ("_Finset" ("_position" a2)))))))
###     ("\<^const>Com.com.Assign" ("_position" x)
###       ("_applC" ("_position" e)
###         ("_Finset"
###           ("_applC" ("_position" f)
###             ("_cargs" ("_position" a1) ("_position" a2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" a1))))
###           ("\<^const>ACom.acom.Assign" ("_position" x') ("_position" e')
###             ("_position" a2)))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" a1) ("_position" a2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" a1))
###           ("\<^const>ACom.acom.Assign" ("_position" x') ("_position" e')
###             ("_position" a2)))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" a1) ("_position" a2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>Com.com.Assign" ("_position" x)
###             ("_applC" ("_position" e) ("_Finset" ("_position" a1))))
###           ("\<^const>Com.com.Assign" ("_position" x')
###             ("_applC" ("_position" e') ("_Finset" ("_position" a2)))))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" a1) ("_position" a2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###             ("_position" a1))
###           ("\<^const>Com.com.Assign" ("_position" x')
###             ("_applC" ("_position" e') ("_Finset" ("_position" a2)))))))
###     ("\<^const>ACom.acom.Assign" ("_position" x) ("_position" e)
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" a1) ("_position" a2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 110 of "$AFP/Abs_Int_ITP2012/Abs_Int3.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###           ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2) ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###           ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2) ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###           ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2) ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###           ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))))
###     ("\<^const>ACom.acom.Seq"
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2) ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###           ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2) ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###           ("\<^const>ACom.acom.Seq" ("_position" c1') ("_position" c2')))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2) ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs" ("\<^const>Com.com.Seq" ("_position" c1) ("_position" c2))
###           ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2) ("_position" c2')))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>ACom.acom.Seq" ("_position" c1) ("_position" c2))
###           ("\<^const>Com.com.Seq" ("_position" c1') ("_position" c2')))))
###     ("\<^const>Com.com.Seq"
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2) ("_position" c2')))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 111 of "$AFP/Abs_Int_ITP2012/Abs_Int3.thy") produces 8 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_applC" ("_position" c2) ("_Finset" ("_position" a1))))
###           ("\<^const>ACom.acom.If" ("_position" b') ("_position" c1')
###             ("_position" c2') ("_position" a2)))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2)
###             ("_cargs" ("_position" c2')
###               ("_Finset"
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" a1) ("_position" a2)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###             ("_position" c2) ("_position" a1))
###           ("\<^const>ACom.acom.If" ("_position" b') ("_position" c1')
###             ("_position" c2') ("_position" a2)))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2)
###             ("_cargs" ("_position" c2')
###               ("_Finset"
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" a1) ("_position" a2)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_applC" ("_position" c2) ("_Finset" ("_position" a1))))
###           ("\<^const>Com.com.If" ("_position" b') ("_position" c1')
###             ("_applC" ("_position" c2') ("_Finset" ("_position" a2)))))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2)
###             ("_cargs" ("_position" c2')
###               ("_Finset"
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" a1) ("_position" a2)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###             ("_position" c2) ("_position" a1))
###           ("\<^const>Com.com.If" ("_position" b') ("_position" c1')
###             ("_applC" ("_position" c2') ("_Finset" ("_position" a2)))))))
###     ("\<^const>Com.com.If" ("_position" b)
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2)
###             ("_cargs" ("_position" c2')
###               ("_Finset"
###                 ("_applC" ("_position" f)
###                   ("_cargs" ("_position" a1) ("_position" a2)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_applC" ("_position" c2) ("_Finset" ("_position" a1))))
###           ("\<^const>ACom.acom.If" ("_position" b') ("_position" c1')
###             ("_position" c2') ("_position" a2)))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2) ("_position" c2'))))
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" a1) ("_position" a2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###             ("_position" c2) ("_position" a1))
###           ("\<^const>ACom.acom.If" ("_position" b') ("_position" c1')
###             ("_position" c2') ("_position" a2)))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2) ("_position" c2'))))
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" a1) ("_position" a2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>Com.com.If" ("_position" b) ("_position" c1)
###             ("_applC" ("_position" c2) ("_Finset" ("_position" a1))))
###           ("\<^const>Com.com.If" ("_position" b') ("_position" c1')
###             ("_applC" ("_position" c2') ("_Finset" ("_position" a2)))))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2) ("_position" c2'))))
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" a1) ("_position" a2))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map2_acom)
###       ("_cargs" ("_position" f)
###         ("_cargs"
###           ("\<^const>ACom.acom.If" ("_position" b) ("_position" c1)
###             ("_position" c2) ("_position" a1))
###           ("\<^const>Com.com.If" ("_position" b') ("_position" c1')
###             ("_applC" ("_position" c2') ("_Finset" ("_position" a2)))))))
###     ("\<^const>ACom.acom.If" ("_position" b)
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c1) ("_position" c1'))))
###       ("_applC" ("_position" map2_acom)
###         ("_cargs" ("_position" f)
###           ("_cargs" ("_position" c2) ("_position" c2'))))
###       ("_applC" ("_position" f)
###         ("_cargs" ("_position" a1) ("_position" a2))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Missing patterns in function definition:
### !!a v va vb vc. map2_acom a (v ::= va {vb}) (SKIP {vc}) = undefined
### !!a v va vb vc vd. map2_acom a (v ::= va {vb}) (vc;;
###           vd) =
###                    undefined
### !!a v va vb vc vd ve vf.
###    map2_acom a (v ::= va {vb}) (IF vc THEN vd ELSE ve
###                                 {vf}) =
###    undefined
### (29 more)
"Some (''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
       {Some [(''x'', {0\<dots>0})]}
       WHILE Bc True DO ''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]}
       {None})"
  :: "(char list * ivl) list option acom option"
"Some
  (''y'' ::= N 7 {Some [(''y'', {7\<dots>7})]};;
   IF Less (V ''x'') (V ''y'')
   THEN ''y'' ::= Plus (V ''y'') (V ''x'')
        {Some [(''x'', {\<dots>6}), (''y'', {\<dots>13})]}
   ELSE ''x'' ::= Plus (V ''x'') (V ''y'')
        {Some [(''x'', {14\<dots>}), (''y'', {7\<dots>7})]}
   {Some [(''x'', {\<dots>}), (''y'', {\<dots>13})]})"
  :: "(char list * ivl) list option acom option"
"Some
  (''x'' ::= N 42 {Some [(''x'', {42\<dots>42})]};;
   IF Less (N 41) (V ''x'') THEN ''x'' ::= N 5 {Some [(''x'', {5\<dots>5})]}
   ELSE ''x'' ::= N 6 {None}
   {Some [(''x'', {5\<dots>5})]})"
  :: "(char list * ivl) list option acom option"
"Some
  ({Some []}
   WHILE Less (V ''x'') (N 100)
   DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {\<dots>100})]}
   {Some [(''x'', {100\<dots>})]})"
  :: "(char list * ivl) list option acom option"
"Some
  (''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
   ''y'' ::= N 0 {Some [(''x'', {0\<dots>0}), (''y'', {0\<dots>0})]};;
   ''z'' ::= N 2
   {Some
     [(''x'', {0\<dots>0}), (''y'', {0\<dots>0}), (''z'', {2\<dots>2})]};;
   {Some [(''x'', {0\<dots>2}), (''y'', {0\<dots>2}), (''z'', {2\<dots>2})]}
   WHILE Less (V ''x'') (N 1)
   DO (''x'' ::= V ''y''
       {Some
         [(''x'', {0\<dots>2}), (''y'', {0\<dots>2}),
          (''z'', {2\<dots>2})]};;
       ''y'' ::= V ''z''
       {Some
         [(''x'', {0\<dots>2}), (''y'', {2\<dots>2}),
          (''z'', {2\<dots>2})]})
   {Some
     [(''x'', {1\<dots>2}), (''y'', {0\<dots>2}), (''z'', {2\<dots>2})]})"
  :: "(char list * ivl) list option acom option"
"{None}
 WHILE Less (V ''x'') (N 100) DO ''x'' ::= Plus (V ''x'') (N 1) {None}
 {None}"
  :: "(char list * ivl) list option acom"
"{Some []}
 WHILE Less (V ''x'') (N 100) DO ''x'' ::= Plus (V ''x'') (N 1) {None}
 {None}"
  :: "(char list * ivl) list option acom"
"{Some []}
 WHILE Less (V ''x'') (N 100)
 DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {\<dots>100})]}
 {Some [(''x'', {100\<dots>})]}"
  :: "(char list * ivl) list option acom"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale Abs_Int2
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and test_num' :: "int => 'av => bool"
    and filter_plus' :: "'av => 'av => 'av => 'av * 'av"
    and filter_less' :: "bool => 'av => 'av => 'av * 'av"
    and \<gamma> :: "'av => int set"
  assumes "Abs_Int2 num' plus' test_num' filter_plus' filter_less' \<gamma>"
"Some
  (''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
   {Some [(''x'', {0\<dots>100})]}
   WHILE Less (V ''x'') (N 100)
   DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {1\<dots>100})]}
   {Some [(''x'', {100\<dots>100})]})"
  :: "(char list * ivl) list option acom option"
"''x'' ::= N 0 {None};;
 {None}
 WHILE Less (V ''x'') (N 100) DO ''x'' ::= Plus (V ''x'') (N 1) {None}
 {None}"
  :: "(char list * ivl) list option acom"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {None}
 WHILE Less (V ''x'') (N 100) DO ''x'' ::= Plus (V ''x'') (N 1) {None}
 {None}"
  :: "(char list * ivl) list option acom"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {Some [(''x'', {0\<dots>0})]}
 WHILE Less (V ''x'') (N 100) DO ''x'' ::= Plus (V ''x'') (N 1) {None}
 {None}"
  :: "(char list * ivl) list option acom"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {Some [(''x'', {0\<dots>0})]}
 WHILE Less (V ''x'') (N 100)
 DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {1\<dots>1})]}
 {None}"
  :: "(char list * ivl) list option acom"
locale Abs_Int2
  fixes num' :: "int => 'av"
    and plus' :: "'av => 'av => 'av"
    and test_num' :: "int => 'av => bool"
    and filter_plus' :: "'av => 'av => 'av => 'av * 'av"
    and filter_less' :: "bool => 'av => 'av => 'av * 'av"
    and \<gamma> :: "'av => int set"
  assumes "Abs_Int2 num' plus' test_num' filter_plus' filter_less' \<gamma>"
### theory "Draft.Abs_Int3"
### 2.808s elapsed time, 11.298s cpu time, 0.777s GC time
Loading theory "Draft.Abs_Int3MoreTemplates"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {Some [(''x'', {0\<dots>1})]}
 WHILE Less (V ''x'') (N 100)
 DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {1\<dots>1})]}
 {None}"
  :: "(char list * ivl) list option acom"
val templateLemmas =
   [("Abs_Int3.m_ivl_height", "m_ivl ?ivl <= 2",
     template_inequation
      (less_equals, template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("Abs_Int3.AI_ivl'_termination", "EX c'. AI_ivl' ?c = Some c'",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Abs_Int3.Top_less_ivl", "\<top> \<sqsubseteq> ?x ==> m_ivl ?x = 0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Abs_Int3.iter_winden_step_ivl_termination",
     "EX c. iter_widen (step_ivl \<top>) (\<bottom>\<^sub>c ?c0.0) =
            Some c",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Abs_Int3.domo_narrow_subset",
     "domo (?S1.0 \<triangle> ?S2.0) <= domo ?S1.0 Un domo ?S2.0",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Abs_Int3.domo_widen_subset",
     "domo (?S1.0 \<nabla> ?S2.0) <= domo ?S1.0 Un domo ?S2.0",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Abs_Int3.n_ivl_mono", "?x \<sqsubseteq> ?y ==> n_ivl ?x <= n_ivl ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Abs_Int3.m_ivl_anti_mono",
     "?y \<sqsubseteq> ?x ==> m_ivl ?x <= m_ivl ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Abs_Int3.narrow1_acom",
     "?y \<sqsubseteq> ?x ==> ?y \<sqsubseteq> ?x \<triangle>\<^sub>c ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0),
               template_var 1))
           ))),
    ("Abs_Int3.narrow2_acom",
     "?y \<sqsubseteq> ?x ==> ?x \<triangle>\<^sub>c ?y \<sqsubseteq> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0),
                 template_var 1)),
             template_var 0)
           ))),
    ("Abs_Int3.m_st_anti_mono",
     "?S1.0 \<sqsubseteq> ?S2.0 ==> m_st m_ivl ?S2.0 <= m_st m_ivl ?S1.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 1)))),
    ("Abs_Int3.iter_widen_pfp",
     "iter_widen ?f ?c = Some ?c' ==> ?f ?c' \<sqsubseteq> ?c'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 0)),
             template_var 0)
           ))),
    ("Abs_Int3.m_ivl_widen",
     "~ ?y \<sqsubseteq> ?x ==> m_ivl (?x \<nabla> ?y) < m_ivl ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Abs_Int3.widen1_acom",
     "strip ?c = strip ?c' ==> ?c \<sqsubseteq> ?c \<nabla>\<^sub>c ?c'",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1),
               template_var 0))
           ))),
    ("Abs_Int3.widen2_acom",
     "strip ?c = strip ?c' ==> ?c' \<sqsubseteq> ?c \<nabla>\<^sub>c ?c'",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1),
               template_var 0))
           ))),
    ("Abs_Int3.m_st_widen",
     "~ ?S2.0 \<sqsubseteq> ?S1.0 ==>
      m_st m_ivl (?S1.0 \<nabla> ?S2.0) < m_st m_ivl ?S1.0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Abs_Int3.strip_map2_acom",
     "strip ?c1.0 = strip ?c2.0 ==>
      strip (map2_acom ?f ?c1.0 ?c2.0) = strip ?c1.0",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 2)))),
    ("Abs_Int3.strip_narrow_acom",
     "strip ?c' = strip ?c ==>
      strip (?c \<triangle>\<^sub>c ?c') = strip ?c",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0),
             template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Abs_Int3.strip_widen_acom",
     "strip ?c' = strip ?c ==> strip (?c \<nabla>\<^sub>c ?c') = strip ?c",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0),
             template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Abs_Int3.AI_wn_sound",
     "AI_ivl' ?c = Some ?c' ==> CS ?c <= \<gamma>\<^sub>c ?c'",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           template_var 0)))),
    ("Abs_Int3.n_ivl_narrow",
     "~ ?x \<sqsubseteq> ?x \<triangle> ?y ==>
      n_ivl (?x \<triangle> ?y) < n_ivl ?x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0))
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Abs_Int3.pfp_wn_pfp",
     "[| preord_class.mono ?f; pfp_wn ?f ?c = Some ?c' |]
      ==> ?f ?c' \<sqsubseteq> ?c'",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 0)),
             template_var 0)
           ))),
    ("Abs_Int3.m_st_height",
     "[| finite ?X; set (Abs_State.dom ?S) <= ?X |]
      ==> m_st m_ivl ?S <= 2 * card ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 9,
            template_app (template_hole 8, template_var 0)),
          template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 6, template_hole 5), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 1))))),
    ("Abs_Int3.strip_pfp_wn",
     "[| ALL c. strip (?f c) = strip c; pfp_wn ?f ?c = Some ?c' |]
      ==> strip ?c' = ?c",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0), template_var 1))),
    ("Abs_Int3.strip_iter_widen",
     "[| ALL c. strip (?f c) = strip c; iter_widen ?f ?c = Some ?c' |]
      ==> strip ?c' = strip ?c",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 3, template_var 1)))),
    ("Abs_Int3.iter_narrow_step_ivl_termination",
     "[| ?c0.0 : Com (vars (strip ?c0.0));
         step_ivl \<top> ?c0.0 \<sqsubseteq> ?c0.0 |]
      ==> EX c. iter_narrow (step_ivl \<top>) ?c0.0 = Some c",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 0))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 0)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Abs_Int3.strip_while",
     "[| ALL c. strip (?f c) = strip c; while_option ?P ?f ?c = Some ?c' |]
      ==> strip ?c' = strip ?c",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 1, template_var 2),
              template_var 3),
            template_var 1),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 3, template_var 1)))),
    ("Abs_Int3.annos_narrow_acom",
     "strip ?c1.0 = strip ?c2.0 ==>
      annos (?c1.0 \<triangle>\<^sub>c ?c2.0) =
      map2 (\<triangle>) (annos ?c1.0) (annos ?c2.0)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 5, template_var 1)),
             template_app (template_hole 5, template_var 0)))))),
    ("Abs_Int3.annos_widen_acom",
     "strip ?c1.0 = strip ?c2.0 ==>
      annos (?c1.0 \<nabla>\<^sub>c ?c2.0) =
      map2 (\<nabla>) (annos ?c1.0) (annos ?c2.0)",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 5, template_var 1)),
             template_app (template_hole 5, template_var 0)))))),
    ("Abs_Int3.iter_narrow_pfp",
     "[| preord_class.mono ?f; ?f ?c0.0 \<sqsubseteq> ?c0.0;
         iter_narrow ?f ?c0.0 = Some ?c |]
      ==> ?f ?c \<sqsubseteq> ?c & ?c \<sqsubseteq> ?c0.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_var 2, template_var 1)),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_var 2, template_var 0)),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1))
           ))),
    ("Abs_Int3.narrow_acom_Com",
     "[| strip ?c2.0 = strip ?c1.0; ?c1.0 : Com ?X; ?c2.0 : Com ?X |]
      ==> ?c1.0 \<triangle>\<^sub>c ?c2.0 : Com ?X",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1),
                 template_var 2)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("Abs_Int3.widen_acom_Com",
     "[| strip ?c2.0 = strip ?c1.0; ?c1.0 : Com ?X; ?c2.0 : Com ?X |]
      ==> ?c1.0 \<nabla>\<^sub>c ?c2.0 : Com ?X",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 2),
          template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1),
                 template_var 2)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("Abs_Int3.iter_widen_step'_Com",
     "[| iter_widen (step_ivl \<top>) ?c = Some ?c'; vars (strip ?c) <= ?X;
         ?c : Com ?X |]
      ==> ?c' : Com ?X",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_hole 7, template_hole 6)),
            template_var 2),
          template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 2)),
          template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Abs_Int3.n_o_mono",
     "[| domo ?S1.0 <= ?X; domo ?S2.0 <= ?X; ?S1.0 \<sqsubseteq> ?S2.0 |]
      ==> n_o (n_st n_ivl ?X) ?S1.0 <= n_o (n_st n_ivl ?X) ?S2.0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1)),
           template_var 0)))),
    ("Abs_Int3.n_st_mono",
     "[| set (Abs_State.dom ?S1.0) <= ?X; set (Abs_State.dom ?S2.0) <= ?X;
         ?S1.0 \<sqsubseteq> ?S2.0 |]
      ==> n_st n_ivl ?X ?S1.0 <= n_st n_ivl ?X ?S2.0",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 2)),
          template_var 1),
        template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app (template_hole 4, template_var 0)),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0)))),
    ("Abs_Int3.m_o_anti_mono",
     "[| finite ?X; domo ?S2.0 <= ?X; ?S1.0 \<sqsubseteq> ?S2.0 |]
      ==> m_o (m_st m_ivl) (2 * card ?X) ?S2.0
          <= m_o (m_st m_ivl) (2 * card ?X) ?S1.0",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 1),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_app (template_hole 0, template_var 2))),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_hole 5)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_app (template_hole 0, template_var 2))),
           template_var 0)))),
    ("Abs_Int3.m_o_widen",
     "[| finite ?X; domo ?S2.0 <= ?X; ~ ?S2.0 \<sqsubseteq> ?S1.0 |]
      ==> m_o (m_st m_ivl) (2 * card ?X) (?S1.0 \<nabla> ?S2.0)
          < m_o (m_st m_ivl) (2 * card ?X) ?S1.0",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 12, template_var 1),
          template_var 2),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app (template_hole 1, template_var 2))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_hole 6)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_hole 2))),
               template_app (template_hole 1, template_var 2))),
           template_var 0)))),
    ("Abs_Int3.n_o_narrow",
     "[| finite ?X; domo ?S1.0 <= ?X; domo ?S2.0 <= ?X;
         ?S2.0 \<sqsubseteq> ?S1.0;
         ~ ?S1.0 \<sqsubseteq> ?S1.0 \<triangle> ?S2.0 |]
      ==> n_o (n_st n_ivl ?X) (?S1.0 \<triangle> ?S2.0)
          < n_o (n_st n_ivl ?X) ?S1.0",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 0),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2)),
           template_var 1)))),
    ("Abs_Int3.n_st_narrow",
     "[| finite ?X; set (Abs_State.dom ?S1.0) <= ?X;
         set (Abs_State.dom ?S2.0) <= ?X; ?S2.0 \<sqsubseteq> ?S1.0;
         ~ ?S1.0 \<sqsubseteq> ?S1.0 \<triangle> ?S2.0 |]
      ==> n_st n_ivl ?X (?S1.0 \<triangle> ?S2.0) < n_st n_ivl ?X ?S1.0",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 1)),
          template_var 2),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app (template_hole 6, template_var 0)),
          template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2),
           template_var 1)))),
    ("Abs_Int3.measure_m_c",
     "finite ?X ==>
      {(c, c \<nabla>\<^sub>c c') |c c'.
       strip c' = strip c &
       c : Com ?X & c' : Com ?X & ~ c' \<sqsubseteq> c}^-1
      <= measure (m_c (m_o (m_st m_ivl) (2 * card ?X)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 25, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 23, template_app (template_hole 22, t_empty)),
         template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_hole 5)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))),
                 template_app (template_hole 0, template_var 0)))))))),
    ("Abs_Int3.measure_n_c",
     "finite ?X ==>
      {(c, c \<triangle>\<^sub>c c') |c c'.
       strip c = strip c' &
       c : Com ?X &
       c' : Com ?X &
       c' \<sqsubseteq> c & ~ c \<sqsubseteq> c \<triangle>\<^sub>c c'}^-1
      <= measure (m_c (n_o (n_st n_ivl ?X)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 20, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 18, template_app (template_hole 17, t_empty)),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))))))),
    ("Abs_Int3.iter_widen_Com",
     "[| iter_widen ?f ?c = Some ?c';
         ALL c. c : Com ?X --> vars (strip c) <= ?X --> ?f c : Com ?X;
         !!c. strip (?f c) = strip c; ?c : Com ?X; vars (strip ?c) <= ?X |]
      ==> ?c' : Com ?X",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 10, template_var 3),
            template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 1, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 0))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 2)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_var 1),
             template_app (template_hole 5, template_var 0))
           ))),
    ("Abs_Int3.while_Com",
     "[| while_option ?P ?f ?c = Some ?c'; !!c. strip (?f c) = strip c;
         ALL c. c : Com ?X --> vars (strip c) <= ?X --> ?f c : Com ?X;
         ?c : Com ?X; vars (strip ?c) <= ?X |]
      ==> ?c' : Com ?X",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 10, template_var 4),
              template_var 3),
            template_var 2),
          template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 0))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 0,
            template_app (template_hole 6, template_var 2)),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 2, template_var 0))
           ))),
    ("Abs_Int3.iter_narrow_termination",
     "[| !!c. ?P c ==> ?P (c \<triangle>\<^sub>c ?f c);
         wf ({uu_.
              EX c c'.
                 uu_ = (c, c \<triangle>\<^sub>c ?f c) &
                 ?P c & ~ c \<sqsubseteq> c \<triangle>\<^sub>c ?f c}^-1);
         ?P ?c0.0 |]
      ==> EX c. iter_narrow ?f ?c0.0 = Some c",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app
               (template_hole 11, template_app (template_hole 10, t_empty)))
            ),
        template_predicate (template_app (template_var 2, template_var 0))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Abs_Int3.iter_widen_termination",
     "[| !!c. ?P c ==> ?P (?f c);
         !!c c'. [| ?P c; ?P c' |] ==> ?P (c \<nabla>\<^sub>c c');
         wf ({(c, c \<nabla>\<^sub>c c') |c c'.
              ?P c & ?P c' & ~ c' \<sqsubseteq> c}^-1);
         ?P ?c0.0; ?c0.0 \<sqsubseteq> ?f ?c0.0 |]
      ==> EX c. iter_widen ?f ?c0.0 = Some c",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_hole 10, template_app (template_hole 9, t_empty)))
            ),
        template_predicate (template_app (template_var 2, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_var 1, template_var 0))
            )],
       template_predicate (template_app (template_hole 8, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Abs_Int3MoreTemplates"
### 0.684s elapsed time, 2.714s cpu time, 0.190s GC time
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 ''y'' ::= N 0 {Some [(''x'', {0\<dots>0}), (''y'', {0\<dots>0})]};;
 {Some [(''x'', {0\<dots>11}), (''y'', {0\<dots>15})]}
 WHILE Less (V ''x'') (N 11)
 DO (''x'' ::= Plus (V ''x'') (N 1)
     {Some [(''x'', {1\<dots>11}), (''y'', {0\<dots>15})]};;
     ''y'' ::= Plus (V ''y'') (N 1)
     {Some [(''x'', {1\<dots>11}), (''y'', {1\<dots>16})]})
 {Some [(''x'', {11\<dots>11}), (''y'', {0\<dots>15})]}"
  :: "(char list * ivl) list option acom"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {Some [(''x'', {0\<dots>24})]}
 WHILE Less (N (- 1)) (V ''x'')
 DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {1\<dots>24})]}
 {None}"
  :: "(char list * ivl) list option acom"
"Some
  (''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
   ''y'' ::= N 0 {Some [(''x'', {0\<dots>0}), (''y'', {0\<dots>0})]};;
   {Some [(''x'', {0\<dots>100}), (''y'', {0\<dots>99})]}
   WHILE Less (V ''x'') (N 100)
   DO (''y'' ::= V ''x''
       {Some [(''x'', {0\<dots>99}), (''y'', {0\<dots>99})]};;
       ''x'' ::= Plus (V ''x'') (N 1)
       {Some [(''x'', {1\<dots>100}), (''y'', {0\<dots>99})]})
   {Some [(''x'', {100\<dots>100}), (''y'', {0\<dots>99})]})"
  :: "(char list * ivl) list option acom option"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {None}
 WHILE Less (V ''x'') (N 100) DO ''x'' ::= Plus (V ''x'') (N 1) {None}
 {None}"
  :: "(char list * ivl) list option acom"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {Some [(''x'', {0\<dots>0})]}
 WHILE Less (V ''x'') (N 100) DO ''x'' ::= Plus (V ''x'') (N 1) {None}
 {None}"
  :: "(char list * ivl) list option acom"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {Some [(''x'', {0\<dots>})]}
 WHILE Less (V ''x'') (N 100)
 DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {1\<dots>})]}
 {Some [(''x'', {100\<dots>})]}"
  :: "(char list * ivl) list option acom"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {Some [(''x'', {0\<dots>0})]}
 WHILE Less (V ''x'') (N 100)
 DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {1\<dots>1})]}
 {None}"
  :: "(char list * ivl) list option acom"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {Some [(''x'', {0\<dots>})]}
 WHILE Less (V ''x'') (N 100)
 DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {1\<dots>1})]}
 {None}"
  :: "(char list * ivl) list option acom"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {Some [(''x'', {0\<dots>100})]}
 WHILE Less (V ''x'') (N 100)
 DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {1\<dots>100})]}
 {Some [(''x'', {100\<dots>100})]}"
  :: "(char list * ivl) list option acom"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {Some [(''x'', {0\<dots>})]}
 WHILE Less (V ''x'') (N 100)
 DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {1\<dots>100})]}
 {Some [(''x'', {100\<dots>})]}"
  :: "(char list * ivl) list option acom"
"''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
 {Some [(''x'', {0\<dots>100})]}
 WHILE Less (V ''x'') (N 100)
 DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {1\<dots>100})]}
 {Some [(''x'', {100\<dots>})]}"
  :: "(char list * ivl) list option acom"
"Some
  (''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
   ''y'' ::= N 0 {Some [(''x'', {0\<dots>0}), (''y'', {0\<dots>0})]};;
   {Some [(''x'', {0\<dots>11}), (''y'', {0\<dots>})]}
   WHILE Less (V ''x'') (N 11)
   DO (''x'' ::= Plus (V ''x'') (N 1)
       {Some [(''x'', {1\<dots>11}), (''y'', {0\<dots>})]};;
       ''y'' ::= Plus (V ''y'') (N 1)
       {Some [(''x'', {1\<dots>11}), (''y'', {1\<dots>})]})
   {Some [(''x'', {11\<dots>11}), (''y'', {0\<dots>})]})"
  :: "(char list * ivl) list option acom option"
"Some
  (''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
   ''y'' ::= N 0 {Some [(''x'', {0\<dots>0}), (''y'', {0\<dots>0})]};;
   {Some [(''x'', {0\<dots>100}), (''y'', {0\<dots>99})]}
   WHILE Less (V ''x'') (N 100)
   DO (''y'' ::= V ''x''
       {Some [(''x'', {0\<dots>99}), (''y'', {0\<dots>99})]};;
       ''x'' ::= Plus (V ''x'') (N 1)
       {Some [(''x'', {1\<dots>100}), (''y'', {0\<dots>99})]})
   {Some [(''x'', {100\<dots>100}), (''y'', {0\<dots>99})]})"
  :: "(char list * ivl) list option acom option"
"Some
  (''x'' ::= N 0 {Some [(''x'', {0\<dots>0})]};;
   {Some [(''x'', {0\<dots>})]}
   WHILE Less (N (- 1)) (V ''x'')
   DO ''x'' ::= Plus (V ''x'') (N 1) {Some [(''x'', {1\<dots>})]}
   {None})"
  :: "(char list * ivl) list option acom option"
val it = (): unit
