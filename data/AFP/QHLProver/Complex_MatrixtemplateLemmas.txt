   [("Complex_Matrix.hermitian_one", "hermitian (1\<^sub>m ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Matrix.positive_one", "positive (1\<^sub>m ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Matrix.unitary_one", "unitary (1\<^sub>m ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Matrix.positive_zero", "positive (0\<^sub>m ?n ?n)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))
         )),
    ("Complex_Matrix.vec_norm_geq_0", "0 <= vec_norm ?v",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Complex_Matrix.adjoint_adjoint", "adjoint (adjoint ?A) = ?A",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Complex_Matrix.trace_zero", "trace (0\<^sub>m ?n ?n) = (0::?'a)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0), template_var 0)),
       template_hole 0)),
    ("Complex_Matrix.trace_id", "trace (1\<^sub>m ?n) = int ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Matrix.adjoint_dim_col", "dim_col (adjoint ?A) = dim_row ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Matrix.adjoint_dim_row", "dim_row (adjoint ?A) = dim_col ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Matrix.adjoint_one", "adjoint (1\<^sub>m ?n) = 1\<^sub>m ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Matrix.normalize_normalize",
     "vec_normalize (vec_normalize ?v) = vec_normalize ?v",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Matrix.self_cscalar_prod_geq_0",
     "(0::?'a) <= inner_prod ?v ?v",
     template_inequation
      (less_equals, template_hole 2,
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.positive_is_hermitian", "positive ?A ==> hermitian ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.conjugate_scalar_prod_Im", "Im (inner_prod ?v ?v) = 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Complex_Matrix.vec_eq_norm_smult_normalized",
     "?v = vec_norm ?v \<cdot>\<^sub>v vec_normalize ?v",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.conjugate_scalar_prod_Re",
     "0 <= Re (inner_prod ?v ?v)",
     template_inequation
      (less_equals, template_hole 3,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.trace_adjoint_positive",
     "0 <= trace (?A * adjoint ?A)",
     template_inequation
      (less_equals, template_hole 3,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.positive_dim_eq",
     "positive ?A ==> dim_row ?A = dim_col ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.unitary_zero", "?A : carrier_mat 0 0 ==> unitary ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.adjoint_scale",
     "adjoint (?a \<cdot>\<^sub>m ?A) =
      conjugate ?a \<cdot>\<^sub>m adjoint ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Matrix.positive_same_outer_prod",
     "?v : carrier_vec ?n ==> positive (outer_prod ?v ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1))
           ))),
    ("Complex_Matrix.lowner_le_refl",
     "?A : carrier_mat ?n ?n ==> ?A \<le>\<^sub>L ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 1)
           ))),
    ("Complex_Matrix.normalized_vec_dim",
     "?v : carrier_vec ?n ==> vec_normalize ?v : carrier_vec ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Complex_Matrix.complex_mat_has_jordan_nf",
     "?A : carrier_mat ?n ?n ==> EX n_as. jordan_nf ?A n_as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Matrix.minus_smult_vec_distrib",
     "(?a - ?b) \<cdot>\<^sub>v ?w =
      ?a \<cdot>\<^sub>v ?w - ?b \<cdot>\<^sub>v ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Matrix.hermitian_is_normal",
     "hermitian ?A ==> ?A * adjoint ?A = adjoint ?A * ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)))),
    ("Complex_Matrix.adjoint_dim",
     "?A : carrier_mat ?n ?n ==> adjoint ?A : carrier_mat ?n ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 0))
           ))),
    ("Complex_Matrix.unitary_is_corthogonal",
     "[| ?U : carrier_mat ?n ?n; unitary ?U |] ==> corthogonal_mat ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Matrix.right_add_zero_mat",
     "?A : carrier_mat ?nr ?nc ==> ?A + 0\<^sub>m ?nr ?nc = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 2))),
    ("Complex_Matrix.uminus_mat",
     "?A : carrier_mat ?n ?n ==> - ?A = - 1 \<cdot>\<^sub>m ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 1)))),
    ("Complex_Matrix.unitary_adjoint",
     "[| ?A : carrier_mat ?n ?n; unitary ?A |] ==> unitary (adjoint ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))
           ))),
    ("Complex_Matrix.adjoint_row",
     "?i < dim_col ?A ==> row (adjoint ?A) ?i = conjugate (col ?A ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Complex_Matrix.adjoint_col",
     "?i < dim_row ?A ==> col (adjoint ?A) ?i = conjugate (row ?A ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Complex_Matrix.vec_norm_zero",
     "?v : carrier_vec ?n ==> (vec_norm ?v = 0) = (?v = 0\<^sub>v ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_bimplication
        (template_equation
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_equation
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.normalize_keep_corthogonal",
     "[| corthogonal ?vs; set ?vs <= carrier_vec ?n |]
      ==> corthogonal (map vec_normalize ?vs)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1))
           ))),
    ("Complex_Matrix.unitaryD2",
     "[| ?A : carrier_mat ?n ?n; unitary ?A |]
      ==> inverts_mat (adjoint ?A) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 1)
           ))),
    ("Complex_Matrix.positive_trace",
     "[| ?A : carrier_mat ?n ?n; positive ?A |] ==> 0 <= trace ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Matrix.normalize_zero",
     "?v : carrier_vec ?n ==>
      (vec_normalize ?v = 0\<^sub>v ?n) = (?v = 0\<^sub>v ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_equation
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.trace_smult",
     "?A : carrier_mat ?n ?n ==>
      trace (?c \<cdot>\<^sub>m ?A) = ?c * trace ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 2))))),
    ("Complex_Matrix.positive_antisym",
     "[| positive ?A; positive (- ?A) |]
      ==> ?A = 0\<^sub>m (dim_col ?A) (dim_col ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.pure_state_self_outer_prod_is_partial_density_operator",
     "[| ?v : carrier_vec ?n; vec_norm ?v = 1 |]
      ==> partial_density_operator (outer_prod ?v ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            ),
        template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1))
           ))),
    ("Complex_Matrix.zero_lowner_le_positiveI",
     "[| ?A : carrier_mat ?n ?n; positive ?A |]
      ==> 0\<^sub>m ?n ?n \<le>\<^sub>L ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 0)),
             template_var 1)
           ))),
    ("Complex_Matrix.zero_lowner_le_positiveD",
     "[| ?A : carrier_mat ?n ?n; 0\<^sub>m ?n ?n \<le>\<^sub>L ?A |]
      ==> positive ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Matrix.conjugate_scalar_prod",
     "dim_vec ?v = dim_vec ?w ==>
      conjugate (?v \<bullet> ?w) = inner_prod ?w (conjugate ?v)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.vec_norm_ge_0",
     "[| ?v : carrier_vec ?n; ?v ~= 0\<^sub>v ?n |] ==> 0 < vec_norm ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Matrix.one_dim_mat_mult_is_scale",
     "?B : carrier_mat 1 ?n ==>
      mat 1 1 (%k. ?a) * ?B = ?a \<cdot>\<^sub>m ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 4),
                 template_hole 4),
               t_empty)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Complex_Matrix.smult_smult_mat",
     "?A : carrier_mat ?nr ?n ==>
      ?k \<cdot>\<^sub>m (?l \<cdot>\<^sub>m ?A) =
      ?k * ?l \<cdot>\<^sub>m ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 4)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 4)))),
    ("Complex_Matrix.unitary_simps",
     "[| ?A : carrier_mat ?n ?n; unitary ?A |]
      ==> ?A * adjoint ?A = 1\<^sub>m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.unitary_simps",
     "[| ?A : carrier_mat ?n ?n; unitary ?A |]
      ==> adjoint ?A * ?A = 1\<^sub>m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.lowner_le_trans_positiveI",
     "[| ?A : carrier_mat ?n ?n; positive ?A; ?A \<le>\<^sub>L ?B |]
      ==> positive ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Complex_Matrix.outer_prod_dim",
     "[| ?v : carrier_vec ?n; ?w : carrier_vec ?m |]
      ==> outer_prod ?v ?w : carrier_mat ?n ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Complex_Matrix.positive_if_decomp",
     "[| ?A : carrier_mat ?n ?n; EX M. M * adjoint M = ?A |]
      ==> positive ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Matrix.outer_prod_le_one",
     "[| ?v : carrier_vec ?n; inner_prod ?v ?v <= 1 |]
      ==> outer_prod ?v ?v \<le>\<^sub>L 1\<^sub>m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app (template_hole 4, template_var 1)),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Matrix.positive_smult",
     "[| ?A : carrier_mat ?n ?n; positive ?A; 0 <= ?c |]
      ==> positive (?c \<cdot>\<^sub>m ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Complex_Matrix.positive_iff_decomp",
     "?A : carrier_mat ?n ?n ==>
      positive ?A = (EX M:carrier_mat ?n ?n. M * adjoint M = ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_var 0)),
           t_empty)))),
    ("Complex_Matrix.trace_outer_prod",
     "[| ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> trace (outer_prod ?v ?w) = inner_prod ?w ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.normalized_vec_norm",
     "[| ?v : carrier_vec ?n; ?v ~= 0\<^sub>v ?n |]
      ==> inner_prod (vec_normalize ?v) (vec_normalize ?v) = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 1))),
         template_hole 0))),
    ("Complex_Matrix.add_carrier_mat'",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?nr ?nc |]
      ==> ?A + ?B : carrier_mat ?nr ?nc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("Complex_Matrix.minus_carrier_mat'",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?nr ?nc |]
      ==> ?A - ?B : carrier_mat ?nr ?nc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("Complex_Matrix.positive_scale",
     "[| ?A : carrier_mat ?n ?n; positive ?A; 0 <= ?c |]
      ==> positive (complex_of_real ?c \<cdot>\<^sub>m ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation (less_equals, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 2))
           ))),
    ("Complex_Matrix.inner_prod_swap",
     "[| ?y : carrier_vec ?n; ?x : carrier_vec ?n |]
      ==> inner_prod ?y ?x = conjugate (inner_prod ?x ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0)))))),
    ("Complex_Matrix.positive_only_if_decomp",
     "[| ?A : carrier_mat ?n ?n; positive ?A |]
      ==> EX M:carrier_mat ?n ?n. M * adjoint M = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 0)),
             t_empty)
           ))),
    ("Complex_Matrix.inverts_mat_symm",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         inverts_mat ?A ?B |]
      ==> inverts_mat ?B ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Complex_Matrix.trace_comm",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n |]
      ==> trace (?A * ?B) = trace (?B * ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Complex_Matrix.normalized_corthogonal_mat_is_unitary",
     "[| set ?ws <= carrier_vec ?n; corthogonal ?ws; length ?ws = ?n |]
      ==> unitary (mat_of_cols ?n (map vec_normalize ?ws))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_var 0)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)))
           ))),
    ("Complex_Matrix.mat_of_vec_mult_one_dim_vec",
     "?a : carrier_vec ?d ==>
      mat ?d 1 (%(i, j). ?a $ i) *\<^sub>v vec 1 (%k. ?c) =
      ?c \<cdot>\<^sub>v ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4),
               template_app (template_hole 3, t_empty))),
           template_app
            (template_app (template_hole 1, template_hole 4), t_empty)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Complex_Matrix.trace_minus_linear",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n |]
      ==> trace (?A - ?B) = trace ?A - trace ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 2, template_var 0))))),
    ("Complex_Matrix.trace_add_linear",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n |]
      ==> trace (?A + ?B) = trace ?A + trace ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 2, template_var 0))))),
    ("Complex_Matrix.mult_mat_vec_smult_vec_assoc",
     "[| ?A : carrier_mat ?n ?m; ?w : carrier_vec ?m |]
      ==> ?A *\<^sub>v (?a \<cdot>\<^sub>v ?w) =
          ?a \<cdot>\<^sub>v (?A *\<^sub>v ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1))))),
    ("Complex_Matrix.smult_mat_mult_mat_vec_assoc",
     "[| ?A : carrier_mat ?n ?m; ?w : carrier_vec ?m |]
      ==> ?a \<cdot>\<^sub>m ?A *\<^sub>v ?w =
          ?a \<cdot>\<^sub>v (?A *\<^sub>v ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 4)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 1))))),
    ("Complex_Matrix.adjoint_mult",
     "[| ?A : carrier_mat ?n ?m; ?B : carrier_mat ?m ?l |]
      ==> adjoint (?A * ?B) = adjoint ?B * adjoint ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 4))))),
    ("Complex_Matrix.adjoint_minus",
     "[| ?A : carrier_mat ?n ?m; ?B : carrier_mat ?n ?m |]
      ==> adjoint (?A - ?B) = adjoint ?A - adjoint ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 3)),
           template_app (template_hole 1, template_var 0))))),
    ("Complex_Matrix.adjoint_add",
     "[| ?A : carrier_mat ?n ?m; ?B : carrier_mat ?n ?m |]
      ==> adjoint (?A + ?B) = adjoint ?A + adjoint ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 3)),
           template_app (template_hole 1, template_var 0))))),
    ("Complex_Matrix.normalize_keep_eigenvector",
     "[| eigenvector ?A ?v ?e; ?A : carrier_mat ?n ?n;
         ?v : carrier_vec ?n |]
      ==> eigenvector ?A (vec_normalize ?v) ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app (template_hole 0, template_var 2)),
             template_var 1)
           ))),
    ("Complex_Matrix.normal_upper_triangular_matrix_is_diagonal",
     "[| ?A : carrier_mat ?n ?n; upper_triangular ?A;
         ?A * adjoint ?A = adjoint ?A * ?A |]
      ==> diagonal_mat ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1),
            template_app (template_hole 1, template_var 1)),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Matrix.lowner_le_swap",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?A \<le>\<^sub>L ?B |]
      ==> - ?B \<le>\<^sub>L - ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Complex_Matrix.lowner_le_imp_trace_le",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?A \<le>\<^sub>L ?B |]
      ==> trace ?A <= trace ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.adjoint_eval",
     "[| ?i < dim_col ?A; ?j < dim_row ?A |]
      ==> adjoint ?A $$ (?i, ?j) = conjugate (?A $$ (?j, ?i))",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)))))),
    ("Complex_Matrix.inner_prod_smult_left",
     "[| ?u : carrier_vec ?n; ?v : carrier_vec ?n |]
      ==> inner_prod ?u (?a \<cdot>\<^sub>v ?v) = ?a * inner_prod ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app (template_hole 1, template_var 3)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 1, template_var 3)))))),
    ("Complex_Matrix.hermitian_inner_prod_real",
     "[| ?A : carrier_mat ?n ?n; ?v : carrier_vec ?n; hermitian ?A |]
      ==> inner_prod ?v (?A *\<^sub>v ?v) : \<real>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0)),
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)
           ))),
    ("Complex_Matrix.positive_close_under_left_right_mult_adjoint",
     "[| ?M : carrier_mat ?n ?n; ?A : carrier_mat ?n ?n; positive ?A |]
      ==> positive (?M * ?A * adjoint ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Complex_Matrix.inner_prod_smult_right",
     "[| ?u : carrier_vec ?n; ?v : carrier_vec ?n |]
      ==> inner_prod (?a \<cdot>\<^sub>v ?u) ?v =
          conjugate ?a * inner_prod ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 3))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 3, template_var 3)))))),
    ("Complex_Matrix.positive_add",
     "[| positive ?A; positive ?B; ?A : carrier_mat ?n ?n;
         ?B : carrier_mat ?n ?n |]
      ==> positive (?A + ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Complex_Matrix.unitary_times_unitary",
     "[| ?P : carrier_mat ?n ?n; ?Q : carrier_mat ?n ?n; unitary ?P;
         unitary ?Q |]
      ==> unitary (?P * ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Complex_Matrix.complex_mat_char_poly_factorizable",
     "?A : carrier_mat ?n ?n ==>
      EX as. char_poly ?A = (PROD a<-as. [:- a, 1:]) & length as = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app (template_hole 12, template_var 0),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Complex_Matrix.smult_distrib_left_minus_mat",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n |]
      ==> ?c \<cdot>\<^sub>m (?B - ?A) =
          ?c \<cdot>\<^sub>m ?B - ?c \<cdot>\<^sub>m ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3))))),
    ("Complex_Matrix.lowner_le_antisym",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?A \<le>\<^sub>L ?B; ?B \<le>\<^sub>L ?A |]
      ==> ?A = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Complex_Matrix.unit_vec_bracket",
     "[| ?A : carrier_mat ?n ?n; ?i < ?n |]
      ==> inner_prod (unit_vec ?n ?i) (?A *\<^sub>v unit_vec ?n ?i) =
          ?A $$ (?i, ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 1))
            ),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))))),
    ("Complex_Matrix.unitary_operator_keep_trace",
     "[| ?U : carrier_mat ?n ?n; ?A : carrier_mat ?n ?n; unitary ?U |]
      ==> trace ?A = trace (adjoint ?U * ?A * ?U)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 0)),
             template_var 2))))),
    ("Complex_Matrix.normalized_cscalar_prod",
     "[| ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> inner_prod ?w ?v =
          vec_norm ?v * vec_norm ?w *
          inner_prod (vec_normalize ?w) (vec_normalize ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 0))))))),
    ("Complex_Matrix.inner_prod_smult_left_right",
     "[| ?u : carrier_vec ?n; ?v : carrier_vec ?n |]
      ==> inner_prod (?a \<cdot>\<^sub>v ?u) (?b \<cdot>\<^sub>v ?v) =
          conjugate ?a * ?b * inner_prod ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 4))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 2, template_var 4)))))),
    ("Complex_Matrix.outer_prod_mult_vec",
     "[| ?a : carrier_vec ?d1.0; ?b : carrier_vec ?d2.0;
         ?c : carrier_vec ?d2.0 |]
      ==> outer_prod ?a ?b *\<^sub>v ?c =
          inner_prod ?b ?c \<cdot>\<^sub>v ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2))),
           template_var 4)))),
    ("Complex_Matrix.hermitian_inner_prod_zero",
     "[| ?A : carrier_mat ?n ?n; hermitian ?A;
         ALL v:carrier_vec ?n. inner_prod v (?A *\<^sub>v v) = 0 |]
      ==> ?A = 0\<^sub>m ?n ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_var 0),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 0)))),
    ("Complex_Matrix.Cauchy_Schwarz_complex_vec",
     "[| ?x : carrier_vec ?n; ?y : carrier_vec ?n |]
      ==> inner_prod ?x ?y * inner_prod ?y ?x
          <= inner_prod ?x ?x * inner_prod ?y ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0)))))),
    ("Complex_Matrix.lowner_le_smultc",
     "[| 0 <= ?c; ?A \<le>\<^sub>L ?B; ?A : carrier_mat ?n ?n;
         ?B : carrier_mat ?n ?n |]
      ==> ?c \<cdot>\<^sub>m ?A \<le>\<^sub>L ?c \<cdot>\<^sub>m ?B",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           ))),
    ("Complex_Matrix.positive_iff_normalized_vec",
     "positive ?A =
      (?A : carrier_mat (dim_col ?A) (dim_col ?A) &
       (ALL v.
           dim_vec v = dim_col ?A & vec_norm v = 1 -->
           0 <= inner_prod v (?A *\<^sub>v v)))",
     template_equation
      (template_app (template_hole 16, template_var 0),
       template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 14, template_var 0),
             template_app
              (template_app
                (template_hole 13,
                 template_app (template_hole 12, template_var 0)),
               template_app (template_hole 12, template_var 0)))),
         template_app (template_hole 11, t_empty)))),
    ("Complex_Matrix.mat_of_vec_mult_vec",
     "[| ?a : carrier_vec ?d; ?b : carrier_vec ?d |]
      ==> mat 1 ?d (%(i, j). conjugate ?a $ j) *\<^sub>v ?b =
          vec 1 (%k. inner_prod ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 1),
               template_app (template_hole 4, t_empty))),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 5), t_empty)))),
    ("Complex_Matrix.swap_plus_mat",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n |]
      ==> ?A + ?B + ?C = ?A + ?C + ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 1)))),
    ("Complex_Matrix.trace_outer_prod_right",
     "[| ?A : carrier_mat ?n ?n; ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> trace (?A * outer_prod ?v ?w) = inner_prod ?w (?A *\<^sub>v ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 2))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.lowner_le_smult",
     "[| 0 <= ?c; ?A \<le>\<^sub>L ?B; ?A : carrier_mat ?n ?n;
         ?B : carrier_mat ?n ?n |]
      ==> complex_of_real ?c \<cdot>\<^sub>m ?A \<le>\<^sub>L
          complex_of_real ?c \<cdot>\<^sub>m ?B",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_var 1))
           ))),
    ("Complex_Matrix.sum_only_one_neq_0",
     "[| finite ?A; ?j : ?A;
         !!i. [| i : ?A; i ~= ?j |] ==> ?g i = (0::?'b) |]
      ==> sum ?g ?A = ?g ?j",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Complex_Matrix.inner_prod_distrib_left",
     "[| ?u : carrier_vec ?n; ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> inner_prod (?v + ?w) ?u = inner_prod ?v ?u + inner_prod ?w ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app (template_hole 2, template_var 0)))))),
    ("Complex_Matrix.inner_prod_minus_distrib_right",
     "[| ?u : carrier_vec ?n; ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> inner_prod ?u (?v - ?w) = inner_prod ?u ?v - inner_prod ?u ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app (template_hole 1, template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 1, template_var 3))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 1, template_var 3)))))),
    ("Complex_Matrix.inner_prod_distrib_right",
     "[| ?u : carrier_vec ?n; ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> inner_prod ?u (?v + ?w) = inner_prod ?u ?v + inner_prod ?u ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app (template_hole 1, template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 1, template_var 3))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 1, template_var 3)))))),
    ("Complex_Matrix.inverts_mat_unique",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; inverts_mat ?A ?B; inverts_mat ?A ?C |]
      ==> ?B = ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Matrix.lowner_le_trans",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?A \<le>\<^sub>L ?B; ?B \<le>\<^sub>L ?C |]
      ==> ?A \<le>\<^sub>L ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 0)
           ))),
    ("Complex_Matrix.lowner_le_trace",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n |]
      ==> (?A \<le>\<^sub>L ?B) =
          (ALL \<rho>:carrier_mat ?n ?n.
              partial_density_operator \<rho> -->
              trace (?A * \<rho>) <= trace (?B * \<rho>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 1)),
           t_empty)))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A + ?B = ?B + ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 4)))),
    ("Complex_Matrix.complex_mat_decomposition_to_hermitian",
     "?A : carrier_mat ?n ?n ==>
      EX B C.
         hermitian B &
         hermitian C &
         ?A = B + \<i> \<cdot>\<^sub>m C &
         B : carrier_mat ?n ?n & C : carrier_mat ?n ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 0),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Complex_Matrix.index_outer_prod",
     "[| ?v : carrier_vec ?n; ?w : carrier_vec ?m; ?i < ?n; ?j < ?m |]
      ==> outer_prod ?v ?w $$ (?i, ?j) = ?v $ ?i * conjugate (?w $ ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app (template_hole 8, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app (template_hole 8, template_var 2))
            ),
        template_inequation (less_than, template_var 1, template_var 4),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 5),
               template_var 3)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 5),
               template_var 1)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)))))),
    ("Complex_Matrix.lowner_le_inner_prod_le",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?v : carrier_vec ?n; ?A \<le>\<^sub>L ?B |]
      ==> inner_prod ?v (?A *\<^sub>v ?v)
          <= inner_prod ?v (?B *\<^sub>v ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A - ?B = ?A + - 1 \<cdot>\<^sub>m ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 4), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 2))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A + (?B - ?C) = ?A + ?B - ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2)),
           template_var 1)))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A + ?B + ?C = ?C + ?B + ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 4)))),
    ("Complex_Matrix.lowner_le_keep_under_measurement",
     "[| ?M : carrier_mat ?n ?n; ?A : carrier_mat ?n ?n;
         ?B : carrier_mat ?n ?n; ?A \<le>\<^sub>L ?B |]
      ==> adjoint ?M * ?A * ?M \<le>\<^sub>L adjoint ?M * ?B * ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 3)),
                     template_var 1)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   template_var 0)),
               template_var 3))
           ))),
    ("Complex_Matrix.lowner_le_traceD",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?\<rho> : carrier_mat ?n ?n; ?A \<le>\<^sub>L ?B;
         partial_density_operator ?\<rho> |]
      ==> trace (?A * ?\<rho>) <= trace (?B * ?\<rho>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Complex_Matrix.outer_prod_mult_outer_prod",
     "[| ?a : carrier_vec ?d1.0; ?b : carrier_vec ?d2.0;
         ?c : carrier_vec ?d2.0; ?d : carrier_vec ?d3.0 |]
      ==> outer_prod ?a ?b * outer_prod ?c ?d =
          inner_prod ?b ?c \<cdot>\<^sub>m outer_prod ?a ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_app (template_hole 6, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 6),
               template_var 4)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 4))),
           template_app
            (template_app (template_hole 3, template_var 6),
             template_var 1))))),
    ("Complex_Matrix.complex_mat_has_unitary_schur_decomposition",
     "?A : carrier_mat ?n ?n ==>
      EX B P es.
         similar_mat_wit ?A B P (adjoint P) &
         unitary P &
         char_poly ?A = (PROD e<-es. [:- e, 1:]) & diag_mat B = es",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_app
               (template_app (template_hole 16, template_var 0),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 15, t_empty)))),
    ("Complex_Matrix.aux_Cauchy",
     "[| ?x : carrier_vec ?n; ?y : carrier_vec ?n |]
      ==> 0 <= inner_prod ?x ?x + ?a * inner_prod ?x ?y +
               cnj ?a * (cnj (inner_prod ?x ?y) + ?a * inner_prod ?y ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 2))
            )],
       template_inequation
        (less_equals, template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app (template_hole 2, template_var 3))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 2, template_var 3))))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, template_var 3)))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 2, template_var 1))))))))),
    ("Complex_Matrix.trace_pdo_eq_imp_eq",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         !!\<rho>.
            [| \<rho> : carrier_mat ?n ?n;
               partial_density_operator \<rho> |]
            ==> trace (?A * \<rho>) = trace (?B * \<rho>) |]
      ==> ?A = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 2, template_var 0))),
    ("Complex_Matrix.lowner_le_traceI",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         !!\<rho>.
            [| \<rho> : carrier_mat ?n ?n;
               partial_density_operator \<rho> |]
            ==> trace (?A * \<rho>) <= trace (?B * \<rho>) |]
      ==> ?A \<le>\<^sub>L ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> trace (?A * ?B * ?C) = trace (?B * ?C * ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 4))))),
    ("Complex_Matrix.inner_prod_outer_prod",
     "[| ?a : carrier_vec ?n; ?b : carrier_vec ?n; ?c : carrier_vec ?m;
         ?d : carrier_vec ?m |]
      ==> inner_prod ?a (outer_prod ?b ?c *\<^sub>v ?d) =
          inner_prod ?a ?b * inner_prod ?c ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app (template_hole 6, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_var 0)),
           template_app (template_hole 1, template_var 5)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_app (template_hole 1, template_var 5))),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 1, template_var 2)))))),
    ("Complex_Matrix.outer_prod_left_right_mat",
     "[| ?u : carrier_vec ?d2.0; ?v : carrier_vec ?d3.0;
         ?A : carrier_mat ?d1.0 ?d2.0; ?B : carrier_mat ?d3.0 ?d4.0 |]
      ==> ?A * outer_prod ?u ?v * ?B =
          outer_prod (?A *\<^sub>v ?u) (adjoint ?B *\<^sub>v ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 7),
              template_app (template_hole 7, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app (template_hole 7, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 7),
                 template_var 5))),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 7)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 5))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> adjoint (?A * adjoint ?B) * ?C = ?B * (adjoint ?A * ?C)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app (template_hole 0, template_var 2)))),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)),
             template_var 1))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> trace (?A + ?B * ?C) = trace ?A + trace (?C * ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 4)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)))))),
    ("Complex_Matrix.mat_of_vec_mult_eq_scalar_prod",
     "[| ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> mat 1 (dim_vec ?v) (%(i, j). conjugate ?v $ j) *
          mat (dim_vec ?w) 1 (%(i, j). ?w $ i) =
          mat 1 1 (%k. inner_prod ?v ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app (template_hole 4, template_var 2)),
               template_app (template_hole 3, t_empty))),
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 4, template_var 0)),
               template_hole 5),
             template_app (template_hole 3, t_empty))),
         template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 5),
           t_empty)))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A - (?B + ?C + ?D) = ?A - ?B - ?C - ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2)),
               template_var 1)),
           template_var 0)))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A + ?B + (?C + ?D) = ?A + ?C + (?B + ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A * ?B * (?C * ?D) = ?A * ?B * ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)),
               template_var 1)),
           template_var 0)))),
    ("Complex_Matrix.unitary_elim",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?P : carrier_mat ?n ?n; unitary ?P;
         ?P * ?A * adjoint ?P = ?P * ?B * adjoint ?P |]
      ==> ?A = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_equation
         (template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 3)),
            template_app (template_hole 0, template_var 0)),
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 1)),
            template_app (template_hole 0, template_var 0)))],
       template_equation (template_var 3, template_var 1))),
    ("Complex_Matrix.four_block_mat_adjoint",
     "[| ?A : carrier_mat ?nr1.0 ?nc1.0; ?B : carrier_mat ?nr1.0 ?nc2.0;
         ?C : carrier_mat ?nr2.0 ?nc1.0; ?D : carrier_mat ?nr2.0 ?nc2.0 |]
      ==> adjoint (four_block_mat ?A ?B ?C ?D) =
          four_block_mat (adjoint ?A) (adjoint ?C) (adjoint ?B)
           (adjoint ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 7),
              template_app
               (template_app (template_hole 3, template_var 6),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 6),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 7),
                 template_var 4),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 7)),
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 1, template_var 4)),
           template_app (template_hole 1, template_var 0))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A * 1\<^sub>m ?n * 1\<^sub>m ?n * ?B * 1\<^sub>m ?n = ?A * ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_app (template_hole 0, template_var 3))),
                   template_app (template_hole 0, template_var 3))),
               template_var 2)),
           template_app (template_hole 0, template_var 3)),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 2)))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A - ?B + (?B - ?C) = ?A + - ?B + ?B + - ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_app (template_hole 0, template_var 2))),
               template_var 2)),
           template_app (template_hole 0, template_var 1))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> trace (?A * ?B * ?C * ?D) = trace (?C * ?D * ?A * ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2)),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_var 4)),
             template_var 2))))),
    ("Complex_Matrix.lowner_le_minus",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n;
         ?A \<le>\<^sub>L ?B; ?C \<le>\<^sub>L ?D |]
      ==> ?A - ?D \<le>\<^sub>L ?B - ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Complex_Matrix.lowner_le_add",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n;
         ?A \<le>\<^sub>L ?B; ?C \<le>\<^sub>L ?D |]
      ==> ?A + ?C \<le>\<^sub>L ?B + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A * (?B - ?C) * ?D = ?A * ?B * ?D - ?A * ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_var 0))))),
    ("Complex_Matrix.diag_mat_mult_diag_mat",
     "[| ?B : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n; diagonal_mat ?B;
         diagonal_mat ?D |]
      ==> ?B * ?D =
          mat ?n ?n
           (%(i, j).
               if i = j then ?B $$ (i, i) * ?D $$ (i, i) else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 0),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 1),
             template_var 1),
           template_app (template_hole 6, t_empty))))),
    ("Complex_Matrix.spectral_decomposition_extract_diag",
     "[| ?P : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n; unitary ?P;
         diagonal_mat ?B; ?i < ?n |]
      ==> inner_prod (col ?P ?i)
           (?P * ?B * adjoint ?P *\<^sub>v col ?P ?i) =
          ?B $$ (?i, ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app
               (template_app (template_hole 12, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app (template_hole 12, template_var 2),
                template_var 2))
            ),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_var 1)),
                   template_app (template_hole 4, template_var 3))),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 0))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))))),
    ("Complex_Matrix.positive_eigenvalue_positive",
     "[| ?A : carrier_mat ?n ?n; positive ?A;
         char_poly ?A = (PROD e<-?es. [:- e, 1:]);
         unitary_schur_decomposition ?A ?es = (?B, ?P, ?Q); ?i < ?n |]
      ==> 0 <= ?B $$ (?i, ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 6),
              template_app
               (template_app (template_hole 18, template_var 5),
                template_var 5))
            ),
        template_predicate
         (template_app (template_hole 17, template_var 6)),
        template_equation
         (template_app (template_hole 15, template_var 6),
          template_app
           (template_hole 14,
            template_app
             (template_app (template_hole 13, t_empty), template_var 4))),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 6), template_var 4),
          template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1))),
        template_inequation (less_than, template_var 0, template_var 5)],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> (?A + ?B) * (?B + ?C) = ?A * ?B + ?B * ?B + ?A * ?C + ?B * ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 2))),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Matrix.unitary_schur_decomposition",
     "[| ?A : carrier_mat ?n ?n; char_poly ?A = (PROD e<-?es. [:- e, 1:]);
         unitary_schur_decomposition ?A ?es = (?B, ?P, ?Q) |]
      ==> similar_mat_wit ?A ?B ?P ?Q &
          upper_triangular ?B &
          diag_mat ?B = ?es & unitary ?P & ?Q = adjoint ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 5),
              template_app
               (template_app (template_hole 20, template_var 4),
                template_var 4))
            ),
        template_equation
         (template_app (template_hole 18, template_var 5),
          template_app
           (template_hole 17,
            template_app
             (template_app (template_hole 16, t_empty), template_var 3))),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 5),
            template_var 3),
          template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 5),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 5, template_var 2)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 2)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 2, template_var 1)),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app (template_hole 0, template_var 1))))))
           ))),
    ("Complex_Matrix.normal_complex_mat_has_spectral_decomposition",
     "[| ?A : carrier_mat ?n ?n; ?A * adjoint ?A = adjoint ?A * ?A;
         char_poly ?A = (PROD e<-?es. [:- e, 1:]);
         unitary_schur_decomposition ?A ?es = (?B, ?P, ?Q) |]
      ==> similar_mat_wit ?A ?B ?P (adjoint ?P) &
          diagonal_mat ?B & diag_mat ?B = ?es & unitary ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 5),
              template_app
               (template_app (template_hole 21, template_var 4),
                template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 5),
            template_app (template_hole 18, template_var 5)),
          template_app
           (template_app
             (template_hole 19,
              template_app (template_hole 18, template_var 5)),
            template_var 5)),
        template_equation
         (template_app (template_hole 16, template_var 5),
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, t_empty), template_var 3))),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 5), template_var 3),
          template_app
           (template_app (template_hole 7, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 2),
                   template_var 1),
                 template_app (template_hole 18, template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 2)),
                     template_var 3)),
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Complex_Matrix.hermitian_eigenvalue_real",
     "[| ?A : carrier_mat ?n ?n; hermitian ?A;
         char_poly ?A = (PROD e<-?es. [:- e, 1:]);
         unitary_schur_decomposition ?A ?es = (?B, ?P, ?Q) |]
      ==> similar_mat_wit ?A ?B ?P (adjoint ?P) &
          diagonal_mat ?B &
          diag_mat ?B = ?es &
          unitary ?P & (ALL i<?n. ?B $$ (i, i) : \<real>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 28, template_var 5),
              template_app
               (template_app (template_hole 27, template_var 4),
                template_var 4))
            ),
        template_predicate
         (template_app (template_hole 26, template_var 5)),
        template_equation
         (template_app (template_hole 24, template_var 5),
          template_app
           (template_hole 23,
            template_app
             (template_app (template_hole 22, t_empty), template_var 3))),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 5),
            template_var 3),
          template_app
           (template_app (template_hole 15, template_var 2),
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 12, template_var 5),
                     template_var 2),
                   template_var 1),
                 template_app (template_hole 11, template_var 1))),
             template_app
              (template_app
                (template_hole 13,
                 template_app (template_hole 10, template_var 2)),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_var 2)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app (template_hole 7, template_var 1)),
                   template_app (template_hole 6, t_empty)))))
           )))]
