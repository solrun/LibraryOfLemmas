Loading theory "Deep_Learning.Tensor" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Deep_Learning.Tensor_Matricization" via "Deep_Learning.Tensor_Plus" via "Deep_Learning.Tensor_Subtensor")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom" via "HOL-Library.Multiset")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Proofs for inductive predicate(s) "valid_index"
  Proving monotonicity ...
### theory "HOL-Combinatorics.Transposition"
### 0.134s elapsed time, 0.567s cpu time, 0.000s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
### Missing patterns in function definition:
### !!v va b. lookup_base (v # va) b [] = undefined
### !!b v va. lookup_base [] b (v # va) = undefined
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "Deep_Learning.Tensor"
### 0.365s elapsed time, 1.464s cpu time, 0.095s GC time
Loading theory "Deep_Learning.Tensor_Subtensor" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Deep_Learning.Tensor_Matricization" via "Deep_Learning.Tensor_Plus")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "Deep_Learning.Tensor_Subtensor"
### 0.087s elapsed time, 0.337s cpu time, 0.064s GC time
Loading theory "Deep_Learning.Tensor_Plus" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Deep_Learning.Tensor_Matricization")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.462s elapsed time, 1.846s cpu time, 0.159s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
instantiation
  tensor :: (semigroup_add) plus
  plus_tensor == plus :: 'a tensor => 'a tensor => 'a tensor
### theory "HOL-Library.FuncSet"
### 0.363s elapsed time, 1.419s cpu time, 0.159s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
### theory "Deep_Learning.Tensor_Plus"
### 0.137s elapsed time, 0.535s cpu time, 0.090s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.921s elapsed time, 3.542s cpu time, 0.664s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Partial_StateMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Disjoint_Sets"
### 0.404s elapsed time, 1.497s cpu time, 0.415s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.Function_Algebras"
### 0.103s elapsed time, 0.410s cpu time, 0.000s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
### theory "HOL-Library.More_List"
### 0.169s elapsed time, 0.669s cpu time, 0.102s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Partial_StateMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  enumerate :: "'a set => nat => 'a"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Infinite_Set"
### 0.317s elapsed time, 1.247s cpu time, 0.160s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Partial_StateMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "HOL-Algebra.Congruence"
### 0.873s elapsed time, 3.330s cpu time, 0.735s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
### theory "HOL-Library.Nat_Bijection"
### 0.310s elapsed time, 1.215s cpu time, 0.193s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Partial_StateMoreTemplates" via "Draft.ExtrEqs")
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.823s cpu time, 0.135s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Partial_StateMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Algebra.Order"
### 1.144s elapsed time, 4.345s cpu time, 1.202s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
### theory "HOL-Library.Stream"
### 1.174s elapsed time, 4.463s cpu time, 1.227s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Partial_StateMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
Found termination order: "size <*mlex*> {}"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
Found termination order: "size <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Algebra.Lattice"
### 1.205s elapsed time, 4.537s cpu time, 1.459s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.BigO"
### 1.195s elapsed time, 4.497s cpu time, 1.455s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Conjugate")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### theory "HOL-Library.Complex_Order"
### 0.066s elapsed time, 0.270s cpu time, 0.000s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
### theory "HOL-Library.Tree"
### 2.689s elapsed time, 10.225s cpu time, 2.851s GC time
Loading theory "Draft.Templates" (required by "Draft.Partial_StateMoreTemplates" via "Draft.ExtrEqs")
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.272s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Partial_StateMoreTemplates")
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
### theory "HOL-Algebra.Complete_Lattice"
### 0.769s elapsed time, 3.039s cpu time, 0.367s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.359s elapsed time, 16.704s cpu time, 3.996s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.816s elapsed time, 3.226s cpu time, 0.463s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.035s elapsed time, 4.083s cpu time, 0.649s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
### theory "HOL-Algebra.Group"
### 1.688s elapsed time, 6.677s cpu time, 1.000s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.131s elapsed time, 0.520s cpu time, 0.119s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Algebra.FiniteProduct"
### 0.497s elapsed time, 1.968s cpu time, 0.195s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Jordan_Normal_Form.Conjugate"
### 3.422s elapsed time, 13.531s cpu time, 1.950s GC time
Loading theory "Jordan_Normal_Form.DL_Missing_Sublist" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Deep_Learning.Tensor_Matricization")
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Cannot skip proof of schematic goal statement
### theory "HOL-Algebra.Coset"
### 1.390s elapsed time, 5.495s cpu time, 0.858s GC time
Loading theory "VectorSpace.FunctionLemmas" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace" via "VectorSpace.MonoidSums")
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
### theory "VectorSpace.FunctionLemmas"
### 0.031s elapsed time, 0.125s cpu time, 0.000s GC time
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
### theory "Jordan_Normal_Form.DL_Missing_Sublist"
### 0.291s elapsed time, 1.148s cpu time, 0.189s GC time
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
### theory "HOL-Algebra.Ring"
### 2.454s elapsed time, 6.906s cpu time, 0.983s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix")
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.309s elapsed time, 4.009s cpu time, 0.442s GC time
Loading theory "VectorSpace.RingModuleFacts" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 6.317s elapsed time, 20.485s cpu time, 2.695s GC time
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial")
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
### theory "VectorSpace.RingModuleFacts"
### 0.612s elapsed time, 1.896s cpu time, 0.189s GC time
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
consts
  Poly :: "'a list => 'a poly"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.299s elapsed time, 5.228s cpu time, 0.563s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix")
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Jordan_Normal_Form.Missing_Ring"
### 3.469s elapsed time, 12.125s cpu time, 1.281s GC time
Loading theory "VectorSpace.MonoidSums" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### theory "VectorSpace.MonoidSums"
### 0.353s elapsed time, 1.397s cpu time, 0.165s GC time
Loading theory "VectorSpace.LinearCombinations" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
Proofs for inductive predicate(s) "algebraic_int"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
locale LinearCombinations.submodule
  fixes R :: "('a, 'b) ring_scheme"
    and N :: "'c set"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "LinearCombinations.submodule R N M"
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
### theory "Polynomial_Interpolation.Ring_Hom"
### 3.314s elapsed time, 13.084s cpu time, 1.691s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix")
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "VectorSpace.LinearCombinations"
### 4.125s elapsed time, 16.251s cpu time, 2.274s GC time
Loading theory "VectorSpace.SumSpaces" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
### theory "VectorSpace.SumSpaces"
### 0.509s elapsed time, 1.995s cpu time, 0.336s GC time
Loading theory "VectorSpace.VectorSpace" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace")
### theory "HOL-Computational_Algebra.Polynomial"
### 6.465s elapsed time, 25.511s cpu time, 3.301s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
Found termination order: "{}"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale subspace
  fixes K :: "('a, 'b) ring_scheme"
    and W :: "'c set"
    and V :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "subspace K W V"
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 1.296s elapsed time, 4.793s cpu time, 3.604s GC time
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
### Ignoring duplicate rewrite rule:
### carrier (vs ?y) == ?y
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
Found termination order: "length <*mlex*> {}"
### Ignoring duplicate rewrite rule:
### T \<zero>\<^bsub>V\<^esub> == \<zero>\<^bsub>W\<^esub>
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Jordan_Normal_Form.Matrix"
### 4.804s elapsed time, 17.196s cpu time, 5.278s GC time
Loading theory "Deep_Learning.Tensor_Matricization" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State")
Loading theory "Jordan_Normal_Form.Gauss_Jordan_Elimination" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### Missing patterns in function definition:
### !!v va. digit_decode (v # va) [] = undefined
### !!v va. digit_decode [] (v # va) = undefined
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 10.615s elapsed time, 40.217s cpu time, 8.058s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
### theory "Deep_Learning.Tensor_Matricization"
### 1.179s elapsed time, 4.672s cpu time, 0.527s GC time
### theory "Jordan_Normal_Form.Gauss_Jordan_Elimination"
### 1.218s elapsed time, 4.800s cpu time, 0.607s GC time
Loading theory "Jordan_Normal_Form.Column_Operations" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Jordan_Normal_Form.Determinant")
locale fract_as_normalized_quot
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.473s elapsed time, 1.508s cpu time, 0.198s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial")
### theory "Jordan_Normal_Form.Column_Operations"
### 0.397s elapsed time, 1.224s cpu time, 0.118s GC time
### theory "VectorSpace.VectorSpace"
### 4.770s elapsed time, 16.389s cpu time, 4.897s GC time
Loading theory "Jordan_Normal_Form.Missing_VectorSpace" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect")
### Cannot skip proof of schematic goal statement
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.904s elapsed time, 2.025s cpu time, 0.265s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial")
Loading theory "Jordan_Normal_Form.Determinant" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 0.868s elapsed time, 2.651s cpu time, 0.371s GC time
Loading theory "Polynomial_Factorization.Order_Polynomial" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly")
### theory "Polynomial_Factorization.Order_Polynomial"
### 0.105s elapsed time, 0.414s cpu time, 0.081s GC time
Loading theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized"
### 0.352s elapsed time, 1.375s cpu time, 0.233s GC time
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
### theory "Jordan_Normal_Form.Missing_VectorSpace"
### 2.135s elapsed time, 6.362s cpu time, 0.952s GC time
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
### theory "Jordan_Normal_Form.Determinant"
### 1.540s elapsed time, 5.081s cpu time, 0.825s GC time
Loading theory "Jordan_Normal_Form.VS_Connect" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt")
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
### Cannot skip proof of schematic goal statement
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 2.861s elapsed time, 8.854s cpu time, 4.960s GC time
Loading theory "Jordan_Normal_Form.Char_Poly" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
locale matrix_ring
  fixes n :: "nat"
    and field_type :: "'a itself"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
### theory "Jordan_Normal_Form.Char_Poly"
### 0.815s elapsed time, 1.702s cpu time, 0.146s GC time
Loading theory "Jordan_Normal_Form.Jordan_Normal_Form" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence")
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
### theory "Jordan_Normal_Form.Jordan_Normal_Form"
### 0.259s elapsed time, 0.559s cpu time, 0.095s GC time
locale matrix_vs
  fixes nr :: "nat"
    and nc :: "nat"
    and field_type :: "'a itself"
### Cannot skip proof of schematic goal statement
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale mat_space
  fixes f_ty :: "'a itself"
    and nc :: "nat"
    and nr :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale idom_vec
  fixes n :: "nat"
    and f_ty :: "'a itself"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Jordan_Normal_Form.VS_Connect"
### 7.202s elapsed time, 12.865s cpu time, 5.090s GC time
Loading theory "Jordan_Normal_Form.Gram_Schmidt" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale cof_vec_space
  fixes n :: "nat"
    and f_ty :: "'a itself"
### theory "Jordan_Normal_Form.Gram_Schmidt"
### 0.883s elapsed time, 1.101s cpu time, 0.118s GC time
Loading theory "Jordan_Normal_Form.Schur_Decomposition" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.Schur_Decomposition"
### 1.630s elapsed time, 1.943s cpu time, 0.151s GC time
Loading theory "Jordan_Normal_Form.Jordan_Normal_Form_Existence" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit" via "Draft.Complex_Matrix")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd (snd (snd p))))) <*mlex*> {}"
### theory "Jordan_Normal_Form.Jordan_Normal_Form_Existence"
### 2.112s elapsed time, 2.377s cpu time, 0.345s GC time
Loading theory "Draft.Complex_Matrix" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program" via "Draft.Matrix_Limit")
### Ignoring duplicate rewrite rule:
### ?y : carrier_mat ?nr1 ?nc1 ==> ?y + 0\<^sub>m ?nr1 ?nc1 == ?y
val string_of_terms = fn: Proof.context -> term list -> string
val trace_t = fn: Proof.context -> string -> term -> unit
val trace_fullthm = fn: Proof.context -> string -> thm -> unit
val natT = "nat": typ
val is_times = fn: term -> bool
val is_plus = fn: term -> bool
val is_minus = fn: term -> bool
val is_uminus = fn: term -> bool
val dest_binop = fn: term -> term * term
val dest_arg = fn: term -> term
val dest_arg1 = fn: term -> term
val is_mat_type = fn: term -> bool
val is_smult_mat = fn: term -> bool
val is_adjoint = fn: term -> bool
val is_id_mat = fn: term -> bool
val is_zero_mat = fn: term -> bool
val strip_times = fn: term -> term list
val carrier_mat = fn: term -> term -> term
val mk_mem_carrier = fn: term -> term -> term
val assume_carrier = fn: Proof.context -> term -> term -> thm
val prod_in_carrier = fn: Proof.context -> term -> term -> thm
val obj_sym = fn: thm -> thm
val to_meta_eq = fn: thm -> thm
val to_obj_eq = fn: thm -> thm
val rewr_cv = fn: Proof.context -> term -> thm -> cterm -> thm
val assoc_times_norm = fn: Proof.context -> term -> conv
val assoc_plus_one_norm = fn: Proof.context -> term -> conv
val assoc_plus_norm = fn: Proof.context -> term -> conv
val smult_plus_norm = fn: Proof.context -> term -> conv
val norm_mult_poly_monomial = fn: Proof.context -> term -> conv
val norm_mult_polynomials = fn: Proof.context -> term -> conv
val is_trace = fn: term -> bool
val norm_trace_times = fn: Proof.context -> term -> cterm -> thm
val norm_trace_plus = fn: Proof.context -> term -> conv
val assoc_norm = fn: Proof.context -> term -> conv
val prove_by_assoc_norm = fn: Proof.context -> term -> term -> thm
val prove_by_assoc_norm_tac = fn:
   string -> Proof.context -> thm -> thm Seq.seq
val mat_assoc_method = fn: (Proof.context -> Method.method) context_parser
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Complex_Matrix"
### 18.684s elapsed time, 58.134s cpu time, 55.710s GC time
Loading theory "Draft.Matrix_Limit" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State" via "Draft.Quantum_Program")
locale matrix_seq
  fixes dim :: "nat"
    and f :: "nat => complex mat"
  assumes "matrix_seq dim f"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.Matrix_Limit"
### 0.496s elapsed time, 0.638s cpu time, 0.190s GC time
Loading theory "Draft.Quantum_Program" (required by "Draft.Partial_StateMoreTemplates" via "Draft.Partial_State")
locale state_sig
  fixes dims :: "nat list"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Quantum_Program"
### 1.120s elapsed time, 1.246s cpu time, 0.149s GC time
Loading theory "Draft.Partial_State" (required by "Draft.Partial_StateMoreTemplates")
locale partial_state
  fixes dims :: "nat list"
    and vars :: "nat set"
locale partial_state
  fixes dims :: "nat list"
    and vars :: "nat set"
Found termination order: "{}"
locale state_sig
  fixes dims :: "nat list"
locale partial_state2
  fixes dims :: "nat list"
    and vars1 :: "nat set"
    and vars2 :: "nat set"
  assumes "partial_state2 vars1 vars2"
locale state_sig
  fixes dims :: "nat list"
### Ambiguous input (line 1382 of "$AFP/QHLProver/Partial_State.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Coset.normal_rel" ("_position" is)
###     ("_applC" ("_position" nths)
###       ("_cargs" ("_position" dims) ("_position" A)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Tensor.valid_index" ("_position" is)
###     ("_applC" ("_position" nths)
###       ("_cargs" ("_position" dims) ("_position" A)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1383 of "$AFP/QHLProver/Partial_State.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Coset.normal_rel"
###     ("_applC" ("_position" nths)
###       ("_cargs" ("_position" is)
###         ("\<^const>Set.image"
###           ("_applC" ("_position" ind_in_set) ("_position" A))
###           ("_position" B))))
###     ("_applC" ("_position" nths)
###       ("_cargs" ("_position" dims) ("_position" B)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Tensor.valid_index"
###     ("_applC" ("_position" nths)
###       ("_cargs" ("_position" is)
###         ("\<^const>Set.image"
###           ("_applC" ("_position" ind_in_set) ("_position" A))
###           ("_position" B))))
###     ("_applC" ("_position" nths)
###       ("_cargs" ("_position" dims) ("_position" B)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale state_sig
  fixes dims :: "nat list"
### theory "Draft.Partial_State"
### 1.166s elapsed time, 1.303s cpu time, 0.187s GC time
Loading theory "Draft.Partial_StateMoreTemplates"
val templateLemmas =
   [("Partial_State.nths_minus_upt_eq_drop",
     "nths ?l (- {..<?n}) = drop ?n ?l",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Partial_State.digit_encode_take",
     "take ?n (digit_encode ?ds ?a) = digit_encode (take ?n ?ds) ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Partial_State.digit_encode_drop",
     "drop ?n (digit_encode ?ds ?a) =
      digit_encode (drop ?n ?ds) (?a div prod_list (take ?n ?ds))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)))))),
    ("Partial_State.nths_reencode_eq",
     "?B <= ?A ==> nths (nths ?xs ?A) (ind_in_set ?A ` ?B) = nths ?xs ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 2)))),
    ("Partial_State.nths_intersection_eq",
     "{0..<length ?xs} <= ?A ==> nths ?xs ?B = nths ?xs (?A Int ?B)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app (template_hole 3, template_var 2)),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Partial_State.ind_in_set_bound",
     "?M <= ?N ==> ind_in_set ?A ?N ~: ind_in_set ?A ` ({0..<?M} Int ?A)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 4, template_var 0)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_hole 0),
                         template_var 2)),
                     template_var 0)))
               )
           ))),
    ("Partial_State.nths_minus_eq",
     "{0..<length ?xs} <= ?A ==> nths ?xs (- ?B) = nths ?xs (?A - ?B)",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app (template_hole 4, template_var 2)),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Partial_State.nths_reencode_eq_comp",
     "?B <= ?A ==>
      nths (nths ?xs ?A) (- ind_in_set ?A ` ?B) = nths ?xs (?A - ?B)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 1)),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_var 2))),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Partial_State.nths_prod_list_split",
     "?B <= ?A ==>
      prod_list (nths ?xs ?A) =
      prod_list (nths ?xs ?B) * prod_list (nths ?xs (?A - ?B))",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))))))),
    ("Partial_State.lt_set_card_lt",
     "[| finite ?A; ?x : ?A |] ==> card {y: ?A. y < ?x} < card ?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 2, template_var 1)))),
    ("Partial_State.ind_in_set_iff",
     "[| ?x : ?A; ?B <= ?A |]
      ==> (ind_in_set ?A ?x : ind_in_set ?A ` ?B) = (?x : ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("Partial_State.bij_minus_subset",
     "[| bij_betw ?f ?A ?B; ?C <= ?A |]
      ==> ?f ` ?A - ?f ` ?C = ?f ` (?A - ?C)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Partial_State.nths_split_complement_eq",
     "[| ?A Int ?B = {}; {0..<length ?xs} <= ?A Un ?B |]
      ==> nths ?xs ?A = nths ?xs (- ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 2), template_var 1),
          template_hole 8),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app (template_hole 4, template_var 0)),
          template_app
           (template_app (template_hole 3, template_var 2),
            template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Partial_State.bij_ind_in_set_bound",
     "(!!x. ?f x = card {y: ?v0.0. y < x}) ==>
      bij_betw ?f ({0..<?M} Int ?v0.0) {0..<card ({0..<?M} Int ?v0.0)}",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 0)),
                   template_var 1))))
           ))),
    ("Partial_State.ind_in_set_minus_subset_bound",
     "?B <= ?A ==>
      ind_in_set ?A ` ({0..<?M} Int ?A) - ind_in_set ?A ` ?B =
      ind_in_set ?A ` ({0..<?M} Int ?A) Int ind_in_set ?A ` (?A - ?B)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0)),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 2))))))]:
   (string * thm * template) list
### theory "Draft.Partial_StateMoreTemplates"
### 0.794s elapsed time, 1.129s cpu time, 0.124s GC time
val it = (): unit
