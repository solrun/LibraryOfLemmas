Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom" via "HOL-Library.Multiset")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
### theory "HOL-Combinatorics.Transposition"
### 0.160s elapsed time, 0.661s cpu time, 0.037s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.088s elapsed time, 0.343s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.FuncSet"
### 0.371s elapsed time, 1.490s cpu time, 0.096s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.446s elapsed time, 1.778s cpu time, 0.153s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
### theory "HOL-Library.Infinite_Set"
### 0.274s elapsed time, 1.078s cpu time, 0.115s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc" via "HOL-Combinatorics.Permutations")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Library.Disjoint_Sets"
### 0.469s elapsed time, 1.705s cpu time, 0.611s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.011s elapsed time, 3.871s cpu time, 0.764s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.More_List"
### 0.218s elapsed time, 0.867s cpu time, 0.110s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Algebra.Congruence"
### 0.952s elapsed time, 3.607s cpu time, 0.858s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### theory "HOL-Library.Nat_Bijection"
### 0.379s elapsed time, 1.487s cpu time, 0.190s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.883s cpu time, 0.080s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
consts
  snth :: "'a stream => nat => 'a"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
consts
  cycle :: "'a list => 'a stream"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Algebra.Order"
### 1.231s elapsed time, 4.676s cpu time, 1.319s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Stream"
### 1.234s elapsed time, 4.683s cpu time, 1.319s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
Found termination order: "size <*mlex*> {}"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 0.883s elapsed time, 3.482s cpu time, 0.522s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.BigO"
### 1.313s elapsed time, 4.971s cpu time, 1.735s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Conjugate")
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### theory "HOL-Library.Complex_Order"
### 0.076s elapsed time, 0.293s cpu time, 0.047s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix")
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.Tree"
### 2.819s elapsed time, 10.718s cpu time, 3.176s GC time
Loading theory "Draft.Templates" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.ExtrEqs")
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.256s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Complex_MatrixMoreTemplates")
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
### theory "HOL-Algebra.Complete_Lattice"
### 1.115s elapsed time, 4.173s cpu time, 1.583s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.769s elapsed time, 3.032s cpu time, 0.461s GC time
Loading theory "VectorSpace.FunctionLemmas" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace" via "VectorSpace.MonoidSums")
### theory "VectorSpace.FunctionLemmas"
### 0.030s elapsed time, 0.128s cpu time, 0.000s GC time
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
### theory "HOL-Library.Multiset"
### 4.750s elapsed time, 18.163s cpu time, 4.571s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.541s elapsed time, 5.883s cpu time, 2.085s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "HOL-Algebra.Group"
### 2.220s elapsed time, 8.537s cpu time, 2.432s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.136s elapsed time, 0.534s cpu time, 0.142s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Algebra.FiniteProduct"
### 1.033s elapsed time, 3.805s cpu time, 1.987s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### Cannot skip proof of schematic goal statement
### theory "Jordan_Normal_Form.Conjugate"
### 4.350s elapsed time, 16.675s cpu time, 5.071s GC time
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
### theory "HOL-Algebra.Coset"
### 1.812s elapsed time, 6.650s cpu time, 2.406s GC time
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Ring"
### 2.340s elapsed time, 5.923s cpu time, 0.650s GC time
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix")
Loading theory "HOL-Algebra.Module" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.287s elapsed time, 3.897s cpu time, 0.244s GC time
Loading theory "VectorSpace.RingModuleFacts" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
### theory "VectorSpace.RingModuleFacts"
### 0.613s elapsed time, 1.866s cpu time, 0.182s GC time
Loading theory "VectorSpace.MonoidSums" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 7.150s elapsed time, 22.559s cpu time, 5.291s GC time
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial")
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### theory "VectorSpace.MonoidSums"
### 0.269s elapsed time, 1.000s cpu time, 0.000s GC time
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
consts
  Poly :: "'a list => 'a poly"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.235s elapsed time, 4.998s cpu time, 0.315s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Matrix")
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Jordan_Normal_Form.Missing_Ring"
### 3.421s elapsed time, 11.750s cpu time, 0.741s GC time
Loading theory "VectorSpace.LinearCombinations" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale LinearCombinations.submodule
  fixes R :: "('a, 'b) ring_scheme"
    and N :: "'c set"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "LinearCombinations.submodule R N M"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
### theory "Polynomial_Interpolation.Ring_Hom"
### 3.177s elapsed time, 12.640s cpu time, 1.003s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix")
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "VectorSpace.LinearCombinations"
### 3.898s elapsed time, 15.494s cpu time, 1.292s GC time
Loading theory "VectorSpace.SumSpaces" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "VectorSpace.SumSpaces"
### 0.454s elapsed time, 1.811s cpu time, 0.134s GC time
Loading theory "VectorSpace.VectorSpace" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale subspace
  fixes K :: "('a, 'b) ring_scheme"
    and W :: "'c set"
    and V :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "subspace K W V"
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
### Ignoring duplicate rewrite rule:
### carrier (vs ?y) == ?y
### theory "HOL-Computational_Algebra.Polynomial"
### 6.146s elapsed time, 24.414s cpu time, 2.068s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
Found termination order: "{}"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.256s elapsed time, 1.023s cpu time, 0.000s GC time
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
### Ignoring duplicate rewrite rule:
### T \<zero>\<^bsub>V\<^esub> == \<zero>\<^bsub>W\<^esub>
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Jordan_Normal_Form.Matrix"
### 3.653s elapsed time, 13.100s cpu time, 1.287s GC time
Loading theory "Jordan_Normal_Form.Gauss_Jordan_Elimination" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### theory "Jordan_Normal_Form.Gauss_Jordan_Elimination"
### 1.051s elapsed time, 3.212s cpu time, 0.307s GC time
Loading theory "Jordan_Normal_Form.Column_Operations" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Jordan_Normal_Form.Determinant")
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 9.187s elapsed time, 34.197s cpu time, 2.912s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
### theory "VectorSpace.VectorSpace"
### 3.679s elapsed time, 12.047s cpu time, 1.297s GC time
Loading theory "Jordan_Normal_Form.Missing_VectorSpace" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale fract_as_normalized_quot
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.Column_Operations"
### 0.394s elapsed time, 1.229s cpu time, 0.127s GC time
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.439s elapsed time, 1.307s cpu time, 0.127s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial")
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
### Cannot skip proof of schematic goal statement
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.908s elapsed time, 2.022s cpu time, 0.282s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial")
Loading theory "Jordan_Normal_Form.Determinant" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly")
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
### theory "Jordan_Normal_Form.Missing_VectorSpace"
### 1.954s elapsed time, 5.135s cpu time, 0.417s GC time
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 0.811s elapsed time, 2.456s cpu time, 0.135s GC time
Loading theory "Polynomial_Factorization.Order_Polynomial" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly")
### theory "Polynomial_Factorization.Order_Polynomial"
### 0.125s elapsed time, 0.408s cpu time, 0.167s GC time
Loading theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form" via "Jordan_Normal_Form.Char_Poly")
### theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized"
### 0.269s elapsed time, 0.805s cpu time, 0.000s GC time
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
### theory "Jordan_Normal_Form.Determinant"
### 1.461s elapsed time, 4.304s cpu time, 0.543s GC time
Loading theory "Jordan_Normal_Form.VS_Connect" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Gram_Schmidt")
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
### Cannot skip proof of schematic goal statement
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 1.546s elapsed time, 3.719s cpu time, 0.535s GC time
Loading theory "Jordan_Normal_Form.Char_Poly" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Jordan_Normal_Form")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale matrix_ring
  fixes n :: "nat"
    and field_type :: "'a itself"
### theory "Jordan_Normal_Form.Char_Poly"
### 0.837s elapsed time, 1.785s cpu time, 0.204s GC time
Loading theory "Jordan_Normal_Form.Jordan_Normal_Form" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence")
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
### theory "Jordan_Normal_Form.Jordan_Normal_Form"
### 0.233s elapsed time, 0.466s cpu time, 0.000s GC time
locale matrix_vs
  fixes nr :: "nat"
    and nc :: "nat"
    and field_type :: "'a itself"
### Cannot skip proof of schematic goal statement
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Cannot skip proof of schematic goal statement
locale mat_space
  fixes f_ty :: "'a itself"
    and nc :: "nat"
    and nr :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale idom_vec
  fixes n :: "nat"
    and f_ty :: "'a itself"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Jordan_Normal_Form.VS_Connect"
### 5.992s elapsed time, 8.409s cpu time, 0.710s GC time
Loading theory "Jordan_Normal_Form.Gram_Schmidt" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence" via "Jordan_Normal_Form.Schur_Decomposition")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale cof_vec_space
  fixes n :: "nat"
    and f_ty :: "'a itself"
### theory "Jordan_Normal_Form.Gram_Schmidt"
### 0.880s elapsed time, 1.098s cpu time, 0.111s GC time
Loading theory "Jordan_Normal_Form.Schur_Decomposition" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix" via "Jordan_Normal_Form.Jordan_Normal_Form_Existence")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.Schur_Decomposition"
### 1.616s elapsed time, 1.901s cpu time, 0.102s GC time
Loading theory "Jordan_Normal_Form.Jordan_Normal_Form_Existence" (required by "Draft.Complex_MatrixMoreTemplates" via "Draft.Complex_Matrix")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd (snd p))))) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd (snd (snd p))))) <*mlex*> {}"
### theory "Jordan_Normal_Form.Jordan_Normal_Form_Existence"
### 2.096s elapsed time, 2.306s cpu time, 0.260s GC time
Loading theory "Draft.Complex_Matrix" (required by "Draft.Complex_MatrixMoreTemplates")
### Ignoring duplicate rewrite rule:
### ?y : carrier_mat ?nr1 ?nc1 ==> ?y + 0\<^sub>m ?nr1 ?nc1 == ?y
val string_of_terms = fn: Proof.context -> term list -> string
val trace_t = fn: Proof.context -> string -> term -> unit
val trace_fullthm = fn: Proof.context -> string -> thm -> unit
val natT = "nat": typ
val is_times = fn: term -> bool
val is_plus = fn: term -> bool
val is_minus = fn: term -> bool
val is_uminus = fn: term -> bool
val dest_binop = fn: term -> term * term
val dest_arg = fn: term -> term
val dest_arg1 = fn: term -> term
val is_mat_type = fn: term -> bool
val is_smult_mat = fn: term -> bool
val is_adjoint = fn: term -> bool
val is_id_mat = fn: term -> bool
val is_zero_mat = fn: term -> bool
val strip_times = fn: term -> term list
val carrier_mat = fn: term -> term -> term
val mk_mem_carrier = fn: term -> term -> term
val assume_carrier = fn: Proof.context -> term -> term -> thm
val prod_in_carrier = fn: Proof.context -> term -> term -> thm
val obj_sym = fn: thm -> thm
val to_meta_eq = fn: thm -> thm
val to_obj_eq = fn: thm -> thm
val rewr_cv = fn: Proof.context -> term -> thm -> cterm -> thm
val assoc_times_norm = fn: Proof.context -> term -> conv
val assoc_plus_one_norm = fn: Proof.context -> term -> conv
val assoc_plus_norm = fn: Proof.context -> term -> conv
val smult_plus_norm = fn: Proof.context -> term -> conv
val norm_mult_poly_monomial = fn: Proof.context -> term -> conv
val norm_mult_polynomials = fn: Proof.context -> term -> conv
val is_trace = fn: term -> bool
val norm_trace_times = fn: Proof.context -> term -> cterm -> thm
val norm_trace_plus = fn: Proof.context -> term -> conv
val assoc_norm = fn: Proof.context -> term -> conv
val prove_by_assoc_norm = fn: Proof.context -> term -> term -> thm
val prove_by_assoc_norm_tac = fn:
   string -> Proof.context -> thm -> thm Seq.seq
val mat_assoc_method = fn: (Proof.context -> Method.method) context_parser
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Complex_Matrix"
### 1.945s elapsed time, 2.422s cpu time, 0.308s GC time
Loading theory "Draft.Complex_MatrixMoreTemplates"
val templateLemmas =
   [("Complex_Matrix.hermitian_one", "hermitian (1\<^sub>m ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Matrix.positive_one", "positive (1\<^sub>m ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Matrix.unitary_one", "unitary (1\<^sub>m ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Matrix.positive_zero", "positive (0\<^sub>m ?n ?n)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))
         )),
    ("Complex_Matrix.vec_norm_geq_0", "0 <= vec_norm ?v",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("Complex_Matrix.adjoint_adjoint", "adjoint (adjoint ?A) = ?A",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Complex_Matrix.trace_zero", "trace (0\<^sub>m ?n ?n) = (0::?'a)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0), template_var 0)),
       template_hole 0)),
    ("Complex_Matrix.trace_id", "trace (1\<^sub>m ?n) = int ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Matrix.adjoint_dim_col", "dim_col (adjoint ?A) = dim_row ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Matrix.adjoint_dim_row", "dim_row (adjoint ?A) = dim_col ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Matrix.adjoint_one", "adjoint (1\<^sub>m ?n) = 1\<^sub>m ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Matrix.normalize_normalize",
     "vec_normalize (vec_normalize ?v) = vec_normalize ?v",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Matrix.self_cscalar_prod_geq_0",
     "(0::?'a) <= inner_prod ?v ?v",
     template_inequation
      (less_equals, template_hole 2,
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.positive_is_hermitian", "positive ?A ==> hermitian ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.conjugate_scalar_prod_Im", "Im (inner_prod ?v ?v) = 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0))),
       template_hole 0)),
    ("Complex_Matrix.vec_eq_norm_smult_normalized",
     "?v = vec_norm ?v \<cdot>\<^sub>v vec_normalize ?v",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.conjugate_scalar_prod_Re",
     "0 <= Re (inner_prod ?v ?v)",
     template_inequation
      (less_equals, template_hole 3,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.trace_adjoint_positive",
     "0 <= trace (?A * adjoint ?A)",
     template_inequation
      (less_equals, template_hole 3,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.positive_dim_eq",
     "positive ?A ==> dim_row ?A = dim_col ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.unitary_zero", "?A : carrier_mat 0 0 ==> unitary ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.adjoint_scale",
     "adjoint (?a \<cdot>\<^sub>m ?A) =
      conjugate ?a \<cdot>\<^sub>m adjoint ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Matrix.positive_same_outer_prod",
     "?v : carrier_vec ?n ==> positive (outer_prod ?v ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1))
           ))),
    ("Complex_Matrix.lowner_le_refl",
     "?A : carrier_mat ?n ?n ==> ?A \<le>\<^sub>L ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 1)
           ))),
    ("Complex_Matrix.normalized_vec_dim",
     "?v : carrier_vec ?n ==> vec_normalize ?v : carrier_vec ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 1, template_var 0))
           ))),
    ("Complex_Matrix.complex_mat_has_jordan_nf",
     "?A : carrier_mat ?n ?n ==> EX n_as. jordan_nf ?A n_as",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Matrix.minus_smult_vec_distrib",
     "(?a - ?b) \<cdot>\<^sub>v ?w =
      ?a \<cdot>\<^sub>v ?w - ?b \<cdot>\<^sub>v ?w",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Matrix.hermitian_is_normal",
     "hermitian ?A ==> ?A * adjoint ?A = adjoint ?A * ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 0)))),
    ("Complex_Matrix.adjoint_dim",
     "?A : carrier_mat ?n ?n ==> adjoint ?A : carrier_mat ?n ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 0))
           ))),
    ("Complex_Matrix.unitary_is_corthogonal",
     "[| ?U : carrier_mat ?n ?n; unitary ?U |] ==> corthogonal_mat ?U",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Matrix.right_add_zero_mat",
     "?A : carrier_mat ?nr ?nc ==> ?A + 0\<^sub>m ?nr ?nc = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 2))),
    ("Complex_Matrix.uminus_mat",
     "?A : carrier_mat ?n ?n ==> - ?A = - 1 \<cdot>\<^sub>m ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 1)))),
    ("Complex_Matrix.unitary_adjoint",
     "[| ?A : carrier_mat ?n ?n; unitary ?A |] ==> unitary (adjoint ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))
           ))),
    ("Complex_Matrix.adjoint_row",
     "?i < dim_col ?A ==> row (adjoint ?A) ?i = conjugate (col ?A ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Complex_Matrix.adjoint_col",
     "?i < dim_row ?A ==> col (adjoint ?A) ?i = conjugate (row ?A ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Complex_Matrix.vec_norm_zero",
     "?v : carrier_vec ?n ==> (vec_norm ?v = 0) = (?v = 0\<^sub>v ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_bimplication
        (template_equation
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_equation
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.normalize_keep_corthogonal",
     "[| corthogonal ?vs; set ?vs <= carrier_vec ?n |]
      ==> corthogonal (map vec_normalize ?vs)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1))
           ))),
    ("Complex_Matrix.unitaryD2",
     "[| ?A : carrier_mat ?n ?n; unitary ?A |]
      ==> inverts_mat (adjoint ?A) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 1)
           ))),
    ("Complex_Matrix.positive_trace",
     "[| ?A : carrier_mat ?n ?n; positive ?A |] ==> 0 <= trace ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals, template_hole 1,
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Matrix.normalize_zero",
     "?v : carrier_vec ?n ==>
      (vec_normalize ?v = 0\<^sub>v ?n) = (?v = 0\<^sub>v ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_equation
          (template_var 1,
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.trace_smult",
     "?A : carrier_mat ?n ?n ==>
      trace (?c \<cdot>\<^sub>m ?A) = ?c * trace ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 2))))),
    ("Complex_Matrix.positive_antisym",
     "[| positive ?A; positive (- ?A) |]
      ==> ?A = 0\<^sub>m (dim_col ?A) (dim_col ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.pure_state_self_outer_prod_is_partial_density_operator",
     "[| ?v : carrier_vec ?n; vec_norm ?v = 1 |]
      ==> partial_density_operator (outer_prod ?v ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            ),
        template_equation
         (template_app (template_hole 3, template_var 1), template_hole 2)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1))
           ))),
    ("Complex_Matrix.zero_lowner_le_positiveI",
     "[| ?A : carrier_mat ?n ?n; positive ?A |]
      ==> 0\<^sub>m ?n ?n \<le>\<^sub>L ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 0)),
             template_var 1)
           ))),
    ("Complex_Matrix.zero_lowner_le_positiveD",
     "[| ?A : carrier_mat ?n ?n; 0\<^sub>m ?n ?n \<le>\<^sub>L ?A |]
      ==> positive ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 0)),
              template_var 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Matrix.conjugate_scalar_prod",
     "dim_vec ?v = dim_vec ?w ==>
      conjugate (?v \<bullet> ?w) = inner_prod ?w (conjugate ?v)",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.vec_norm_ge_0",
     "[| ?v : carrier_vec ?n; ?v ~= 0\<^sub>v ?n |] ==> 0 < vec_norm ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 3, template_var 0))
            )],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Matrix.one_dim_mat_mult_is_scale",
     "?B : carrier_mat 1 ?n ==>
      mat 1 1 (%k. ?a) * ?B = ?a \<cdot>\<^sub>m ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_hole 4),
                 template_hole 4),
               t_empty)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Complex_Matrix.smult_smult_mat",
     "?A : carrier_mat ?nr ?n ==>
      ?k \<cdot>\<^sub>m (?l \<cdot>\<^sub>m ?A) =
      ?k * ?l \<cdot>\<^sub>m ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 4)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 4)))),
    ("Complex_Matrix.unitary_simps",
     "[| ?A : carrier_mat ?n ?n; unitary ?A |]
      ==> ?A * adjoint ?A = 1\<^sub>m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.unitary_simps",
     "[| ?A : carrier_mat ?n ?n; unitary ?A |]
      ==> adjoint ?A * ?A = 1\<^sub>m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.lowner_le_trans_positiveI",
     "[| ?A : carrier_mat ?n ?n; positive ?A; ?A \<le>\<^sub>L ?B |]
      ==> positive ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 1, template_var 0)))),
    ("Complex_Matrix.outer_prod_dim",
     "[| ?v : carrier_vec ?n; ?w : carrier_vec ?m |]
      ==> outer_prod ?v ?w : carrier_mat ?n ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Complex_Matrix.positive_if_decomp",
     "[| ?A : carrier_mat ?n ?n; EX M. M * adjoint M = ?A |]
      ==> positive ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Matrix.outer_prod_le_one",
     "[| ?v : carrier_vec ?n; inner_prod ?v ?v <= 1 |]
      ==> outer_prod ?v ?v \<le>\<^sub>L 1\<^sub>m ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 0))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app (template_hole 4, template_var 1)),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Matrix.positive_smult",
     "[| ?A : carrier_mat ?n ?n; positive ?A; 0 <= ?c |]
      ==> positive (?c \<cdot>\<^sub>m ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Complex_Matrix.positive_iff_decomp",
     "?A : carrier_mat ?n ?n ==>
      positive ?A = (EX M:carrier_mat ?n ?n. M * adjoint M = ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 0),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 6, template_var 0),
               template_var 0)),
           t_empty)))),
    ("Complex_Matrix.trace_outer_prod",
     "[| ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> trace (outer_prod ?v ?w) = inner_prod ?w ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.normalized_vec_norm",
     "[| ?v : carrier_vec ?n; ?v ~= 0\<^sub>v ?n |]
      ==> inner_prod (vec_normalize ?v) (vec_normalize ?v) = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_hole 1,
             template_app (template_hole 2, template_var 1))),
         template_hole 0))),
    ("Complex_Matrix.add_carrier_mat'",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?nr ?nc |]
      ==> ?A + ?B : carrier_mat ?nr ?nc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("Complex_Matrix.minus_carrier_mat'",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?nr ?nc |]
      ==> ?A - ?B : carrier_mat ?nr ?nc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))
           ))),
    ("Complex_Matrix.positive_scale",
     "[| ?A : carrier_mat ?n ?n; positive ?A; 0 <= ?c |]
      ==> positive (complex_of_real ?c \<cdot>\<^sub>m ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 4, template_var 2)),
        template_inequation (less_equals, template_hole 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 2))
           ))),
    ("Complex_Matrix.inner_prod_swap",
     "[| ?y : carrier_vec ?n; ?x : carrier_vec ?n |]
      ==> inner_prod ?y ?x = conjugate (inner_prod ?x ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 2)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 0)))))),
    ("Complex_Matrix.positive_only_if_decomp",
     "[| ?A : carrier_mat ?n ?n; positive ?A |]
      ==> EX M:carrier_mat ?n ?n. M * adjoint M = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 0)),
             t_empty)
           ))),
    ("Complex_Matrix.inverts_mat_symm",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         inverts_mat ?A ?B |]
      ==> inverts_mat ?B ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 2)
           ))),
    ("Complex_Matrix.trace_comm",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n |]
      ==> trace (?A * ?B) = trace (?B * ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2))))),
    ("Complex_Matrix.normalized_corthogonal_mat_is_unitary",
     "[| set ?ws <= carrier_vec ?n; corthogonal ?ws; length ?ws = ?n |]
      ==> unitary (mat_of_cols ?n (map vec_normalize ?ws))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_var 0)),
        template_predicate (template_app (template_hole 6, template_var 1)),
        template_equation
         (template_app (template_hole 4, template_var 1), template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)))
           ))),
    ("Complex_Matrix.mat_of_vec_mult_one_dim_vec",
     "?a : carrier_vec ?d ==>
      mat ?d 1 (%(i, j). ?a $ i) *\<^sub>v vec 1 (%k. ?c) =
      ?c \<cdot>\<^sub>v ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4),
               template_app (template_hole 3, t_empty))),
           template_app
            (template_app (template_hole 1, template_hole 4), t_empty)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Complex_Matrix.trace_minus_linear",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n |]
      ==> trace (?A - ?B) = trace ?A - trace ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 2, template_var 0))))),
    ("Complex_Matrix.trace_add_linear",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n |]
      ==> trace (?A + ?B) = trace ?A + trace ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 2)),
           template_app (template_hole 2, template_var 0))))),
    ("Complex_Matrix.mult_mat_vec_smult_vec_assoc",
     "[| ?A : carrier_mat ?n ?m; ?w : carrier_vec ?m |]
      ==> ?A *\<^sub>v (?a \<cdot>\<^sub>v ?w) =
          ?a \<cdot>\<^sub>v (?A *\<^sub>v ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 1))))),
    ("Complex_Matrix.smult_mat_mult_mat_vec_assoc",
     "[| ?A : carrier_mat ?n ?m; ?w : carrier_vec ?m |]
      ==> ?a \<cdot>\<^sub>m ?A *\<^sub>v ?w =
          ?a \<cdot>\<^sub>v (?A *\<^sub>v ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 4)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 1))))),
    ("Complex_Matrix.adjoint_mult",
     "[| ?A : carrier_mat ?n ?m; ?B : carrier_mat ?m ?l |]
      ==> adjoint (?A * ?B) = adjoint ?B * adjoint ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 1, template_var 4))))),
    ("Complex_Matrix.adjoint_minus",
     "[| ?A : carrier_mat ?n ?m; ?B : carrier_mat ?n ?m |]
      ==> adjoint (?A - ?B) = adjoint ?A - adjoint ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 3)),
           template_app (template_hole 1, template_var 0))))),
    ("Complex_Matrix.adjoint_add",
     "[| ?A : carrier_mat ?n ?m; ?B : carrier_mat ?n ?m |]
      ==> adjoint (?A + ?B) = adjoint ?A + adjoint ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 3)),
           template_app (template_hole 1, template_var 0))))),
    ("Complex_Matrix.normalize_keep_eigenvector",
     "[| eigenvector ?A ?v ?e; ?A : carrier_mat ?n ?n;
         ?v : carrier_vec ?n |]
      ==> eigenvector ?A (vec_normalize ?v) ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_var 3),
               template_app (template_hole 0, template_var 2)),
             template_var 1)
           ))),
    ("Complex_Matrix.normal_upper_triangular_matrix_is_diagonal",
     "[| ?A : carrier_mat ?n ?n; upper_triangular ?A;
         ?A * adjoint ?A = adjoint ?A * ?A |]
      ==> diagonal_mat ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 0),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1),
            template_app (template_hole 1, template_var 1)),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Matrix.lowner_le_swap",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?A \<le>\<^sub>L ?B |]
      ==> - ?B \<le>\<^sub>L - ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("Complex_Matrix.lowner_le_imp_trace_le",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?A \<le>\<^sub>L ?B |]
      ==> trace ?A <= trace ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Matrix.adjoint_eval",
     "[| ?i < dim_col ?A; ?j < dim_row ?A |]
      ==> adjoint ?A $$ (?i, ?j) = conjugate (?A $$ (?j, ?i))",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)))))),
    ("Complex_Matrix.inner_prod_smult_left",
     "[| ?u : carrier_vec ?n; ?v : carrier_vec ?n |]
      ==> inner_prod ?u (?a \<cdot>\<^sub>v ?v) = ?a * inner_prod ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app (template_hole 1, template_var 3)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 1, template_var 3)))))),
    ("Complex_Matrix.hermitian_inner_prod_real",
     "[| ?A : carrier_mat ?n ?n; ?v : carrier_vec ?n; hermitian ?A |]
      ==> inner_prod ?v (?A *\<^sub>v ?v) : \<real>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 2),
                     template_var 0)),
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)
           ))),
    ("Complex_Matrix.positive_close_under_left_right_mult_adjoint",
     "[| ?M : carrier_mat ?n ?n; ?A : carrier_mat ?n ?n; positive ?A |]
      ==> positive (?M * ?A * adjoint ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_app (template_hole 0, template_var 2)))
           ))),
    ("Complex_Matrix.inner_prod_smult_right",
     "[| ?u : carrier_vec ?n; ?v : carrier_vec ?n |]
      ==> inner_prod (?a \<cdot>\<^sub>v ?u) ?v =
          conjugate ?a * inner_prod ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 3))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 3, template_var 3)))))),
    ("Complex_Matrix.positive_add",
     "[| positive ?A; positive ?B; ?A : carrier_mat ?n ?n;
         ?B : carrier_mat ?n ?n |]
      ==> positive (?A + ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Complex_Matrix.unitary_times_unitary",
     "[| ?P : carrier_mat ?n ?n; ?Q : carrier_mat ?n ?n; unitary ?P;
         unitary ?Q |]
      ==> unitary (?P * ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 1, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Complex_Matrix.complex_mat_char_poly_factorizable",
     "?A : carrier_mat ?n ?n ==>
      EX as. char_poly ?A = (PROD a<-as. [:- a, 1:]) & length as = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app (template_hole 12, template_var 0),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("Complex_Matrix.smult_distrib_left_minus_mat",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n |]
      ==> ?c \<cdot>\<^sub>m (?B - ?A) =
          ?c \<cdot>\<^sub>m ?B - ?c \<cdot>\<^sub>m ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3))))),
    ("Complex_Matrix.lowner_le_antisym",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?A \<le>\<^sub>L ?B; ?B \<le>\<^sub>L ?A |]
      ==> ?A = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Complex_Matrix.unit_vec_bracket",
     "[| ?A : carrier_mat ?n ?n; ?i < ?n |]
      ==> inner_prod (unit_vec ?n ?i) (?A *\<^sub>v unit_vec ?n ?i) =
          ?A $$ (?i, ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 1))
            ),
        template_inequation (less_than, template_var 0, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))))),
    ("Complex_Matrix.unitary_operator_keep_trace",
     "[| ?U : carrier_mat ?n ?n; ?A : carrier_mat ?n ?n; unitary ?U |]
      ==> trace ?A = trace (adjoint ?U * ?A * ?U)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 0)),
             template_var 2))))),
    ("Complex_Matrix.normalized_cscalar_prod",
     "[| ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> inner_prod ?w ?v =
          vec_norm ?v * vec_norm ?w *
          inner_prod (vec_normalize ?w) (vec_normalize ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 0))))))),
    ("Complex_Matrix.inner_prod_smult_left_right",
     "[| ?u : carrier_vec ?n; ?v : carrier_vec ?n |]
      ==> inner_prod (?a \<cdot>\<^sub>v ?u) (?b \<cdot>\<^sub>v ?v) =
          conjugate ?a * ?b * inner_prod ?u ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 4))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 2, template_var 4)))))),
    ("Complex_Matrix.outer_prod_mult_vec",
     "[| ?a : carrier_vec ?d1.0; ?b : carrier_vec ?d2.0;
         ?c : carrier_vec ?d2.0 |]
      ==> outer_prod ?a ?b *\<^sub>v ?c =
          inner_prod ?b ?c \<cdot>\<^sub>v ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2))),
           template_var 4)))),
    ("Complex_Matrix.hermitian_inner_prod_zero",
     "[| ?A : carrier_mat ?n ?n; hermitian ?A;
         ALL v:carrier_vec ?n. inner_prod v (?A *\<^sub>v v) = 0 |]
      ==> ?A = 0\<^sub>m ?n ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_var 0),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 0)))),
    ("Complex_Matrix.Cauchy_Schwarz_complex_vec",
     "[| ?x : carrier_vec ?n; ?y : carrier_vec ?n |]
      ==> inner_prod ?x ?y * inner_prod ?y ?x
          <= inner_prod ?x ?x * inner_prod ?y ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 2))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0)))))),
    ("Complex_Matrix.lowner_le_smultc",
     "[| 0 <= ?c; ?A \<le>\<^sub>L ?B; ?A : carrier_mat ?n ?n;
         ?B : carrier_mat ?n ?n |]
      ==> ?c \<cdot>\<^sub>m ?A \<le>\<^sub>L ?c \<cdot>\<^sub>m ?B",
     template_implication
      ([template_inequation (less_equals, template_hole 4, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           ))),
    ("Complex_Matrix.positive_iff_normalized_vec",
     "positive ?A =
      (?A : carrier_mat (dim_col ?A) (dim_col ?A) &
       (ALL v.
           dim_vec v = dim_col ?A & vec_norm v = 1 -->
           0 <= inner_prod v (?A *\<^sub>v v)))",
     template_equation
      (template_app (template_hole 16, template_var 0),
       template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app (template_hole 14, template_var 0),
             template_app
              (template_app
                (template_hole 13,
                 template_app (template_hole 12, template_var 0)),
               template_app (template_hole 12, template_var 0)))),
         template_app (template_hole 11, t_empty)))),
    ("Complex_Matrix.mat_of_vec_mult_vec",
     "[| ?a : carrier_vec ?d; ?b : carrier_vec ?d |]
      ==> mat 1 ?d (%(i, j). conjugate ?a $ j) *\<^sub>v ?b =
          vec 1 (%k. inner_prod ?a ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_hole 5),
                 template_var 1),
               template_app (template_hole 4, t_empty))),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_hole 5), t_empty)))),
    ("Complex_Matrix.swap_plus_mat",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n |]
      ==> ?A + ?B + ?C = ?A + ?C + ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0)),
           template_var 1)))),
    ("Complex_Matrix.trace_outer_prod_right",
     "[| ?A : carrier_mat ?n ?n; ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> trace (?A * outer_prod ?v ?w) = inner_prod ?w (?A *\<^sub>v ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 3),
              template_app
               (template_app (template_hole 9, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 2))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.lowner_le_smult",
     "[| 0 <= ?c; ?A \<le>\<^sub>L ?B; ?A : carrier_mat ?n ?n;
         ?B : carrier_mat ?n ?n |]
      ==> complex_of_real ?c \<cdot>\<^sub>m ?A \<le>\<^sub>L
          complex_of_real ?c \<cdot>\<^sub>m ?B",
     template_implication
      ([template_inequation (less_equals, template_hole 5, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 3)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_var 1))
           ))),
    ("Complex_Matrix.sum_only_one_neq_0",
     "[| finite ?A; ?j : ?A;
         !!i. [| i : ?A; i ~= ?j |] ==> ?g i = (0::?'b) |]
      ==> sum ?g ?A = ?g ?j",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Complex_Matrix.inner_prod_distrib_left",
     "[| ?u : carrier_vec ?n; ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> inner_prod (?v + ?w) ?u = inner_prod ?v ?u + inner_prod ?w ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app (template_hole 2, template_var 0)))))),
    ("Complex_Matrix.inner_prod_minus_distrib_right",
     "[| ?u : carrier_vec ?n; ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> inner_prod ?u (?v - ?w) = inner_prod ?u ?v - inner_prod ?u ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app (template_hole 1, template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 1, template_var 3))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 1, template_var 3)))))),
    ("Complex_Matrix.inner_prod_distrib_right",
     "[| ?u : carrier_vec ?n; ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> inner_prod ?u (?v + ?w) = inner_prod ?u ?v + inner_prod ?u ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app (template_hole 1, template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 1, template_var 3))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 1, template_var 3)))))),
    ("Complex_Matrix.inverts_mat_unique",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; inverts_mat ?A ?B; inverts_mat ?A ?C |]
      ==> ?B = ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Matrix.lowner_le_trans",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?A \<le>\<^sub>L ?B; ?B \<le>\<^sub>L ?C |]
      ==> ?A \<le>\<^sub>L ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 0)
           ))),
    ("Complex_Matrix.lowner_le_trace",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n |]
      ==> (?A \<le>\<^sub>L ?B) =
          (ALL \<rho>:carrier_mat ?n ?n.
              partial_density_operator \<rho> -->
              trace (?A * \<rho>) <= trace (?B * \<rho>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 1)),
           t_empty)))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A + ?B = ?B + ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 4), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 4)))),
    ("Complex_Matrix.complex_mat_decomposition_to_hermitian",
     "?A : carrier_mat ?n ?n ==>
      EX B C.
         hermitian B &
         hermitian C &
         ?A = B + \<i> \<cdot>\<^sub>m C &
         B : carrier_mat ?n ?n & C : carrier_mat ?n ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 0),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Complex_Matrix.index_outer_prod",
     "[| ?v : carrier_vec ?n; ?w : carrier_vec ?m; ?i < ?n; ?j < ?m |]
      ==> outer_prod ?v ?w $$ (?i, ?j) = ?v $ ?i * conjugate (?w $ ?j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_app (template_hole 8, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app (template_hole 8, template_var 2))
            ),
        template_inequation (less_than, template_var 1, template_var 4),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 5),
               template_var 3)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 5),
               template_var 1)),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)))))),
    ("Complex_Matrix.lowner_le_inner_prod_le",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?v : carrier_vec ?n; ?A \<le>\<^sub>L ?B |]
      ==> inner_prod ?v (?A *\<^sub>v ?v)
          <= inner_prod ?v (?B *\<^sub>v ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app
               (template_app (template_hole 7, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A - ?B = ?A + - 1 \<cdot>\<^sub>m ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 4), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 2))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A + (?B - ?C) = ?A + ?B - ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2)),
           template_var 1)))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A + ?B + ?C = ?C + ?B + ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 4)))),
    ("Complex_Matrix.lowner_le_keep_under_measurement",
     "[| ?M : carrier_mat ?n ?n; ?A : carrier_mat ?n ?n;
         ?B : carrier_mat ?n ?n; ?A \<le>\<^sub>L ?B |]
      ==> adjoint ?M * ?A * ?M \<le>\<^sub>L adjoint ?M * ?B * ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 3)),
                     template_var 1)),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   template_var 0)),
               template_var 3))
           ))),
    ("Complex_Matrix.lowner_le_traceD",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?\<rho> : carrier_mat ?n ?n; ?A \<le>\<^sub>L ?B;
         partial_density_operator ?\<rho> |]
      ==> trace (?A * ?\<rho>) <= trace (?B * ?\<rho>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Complex_Matrix.outer_prod_mult_outer_prod",
     "[| ?a : carrier_vec ?d1.0; ?b : carrier_vec ?d2.0;
         ?c : carrier_vec ?d2.0; ?d : carrier_vec ?d3.0 |]
      ==> outer_prod ?a ?b * outer_prod ?c ?d =
          inner_prod ?b ?c \<cdot>\<^sub>m outer_prod ?a ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_app (template_hole 6, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 6),
               template_var 4)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 4))),
           template_app
            (template_app (template_hole 3, template_var 6),
             template_var 1))))),
    ("Complex_Matrix.complex_mat_has_unitary_schur_decomposition",
     "?A : carrier_mat ?n ?n ==>
      EX B P es.
         similar_mat_wit ?A B P (adjoint P) &
         unitary P &
         char_poly ?A = (PROD e<-es. [:- e, 1:]) & diag_mat B = es",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 1),
              template_app
               (template_app (template_hole 16, template_var 0),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 15, t_empty)))),
    ("Complex_Matrix.aux_Cauchy",
     "[| ?x : carrier_vec ?n; ?y : carrier_vec ?n |]
      ==> 0 <= inner_prod ?x ?x + ?a * inner_prod ?x ?y +
               cnj ?a * (cnj (inner_prod ?x ?y) + ?a * inner_prod ?y ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 2))
            )],
       template_inequation
        (less_equals, template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app (template_hole 2, template_var 3))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 2, template_var 3))))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_app (template_hole 2, template_var 3)))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 2, template_var 1))))))))),
    ("Complex_Matrix.trace_pdo_eq_imp_eq",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         !!\<rho>.
            [| \<rho> : carrier_mat ?n ?n;
               partial_density_operator \<rho> |]
            ==> trace (?A * \<rho>) = trace (?B * \<rho>) |]
      ==> ?A = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 2, template_var 0))),
    ("Complex_Matrix.lowner_le_traceI",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         !!\<rho>.
            [| \<rho> : carrier_mat ?n ?n;
               partial_density_operator \<rho> |]
            ==> trace (?A * \<rho>) <= trace (?B * \<rho>) |]
      ==> ?A \<le>\<^sub>L ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> trace (?A * ?B * ?C) = trace (?B * ?C * ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 4))))),
    ("Complex_Matrix.inner_prod_outer_prod",
     "[| ?a : carrier_vec ?n; ?b : carrier_vec ?n; ?c : carrier_vec ?m;
         ?d : carrier_vec ?m |]
      ==> inner_prod ?a (outer_prod ?b ?c *\<^sub>v ?d) =
          inner_prod ?a ?b * inner_prod ?c ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 5),
              template_app (template_hole 6, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 6, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_var 0)),
           template_app (template_hole 1, template_var 5)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_app (template_hole 1, template_var 5))),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 1, template_var 2)))))),
    ("Complex_Matrix.outer_prod_left_right_mat",
     "[| ?u : carrier_vec ?d2.0; ?v : carrier_vec ?d3.0;
         ?A : carrier_mat ?d1.0 ?d2.0; ?B : carrier_mat ?d3.0 ?d4.0 |]
      ==> ?A * outer_prod ?u ?v * ?B =
          outer_prod (?A *\<^sub>v ?u) (adjoint ?B *\<^sub>v ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 7),
              template_app (template_hole 7, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app (template_hole 7, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 4),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 7),
                 template_var 5))),
           template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 7)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 5))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> adjoint (?A * adjoint ?B) * ?C = ?B * (adjoint ?A * ?C)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_app (template_hole 0, template_var 2)))),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 4)),
             template_var 1))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> trace (?A + ?B * ?C) = trace ?A + trace (?C * ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 4),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 4)),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)))))),
    ("Complex_Matrix.mat_of_vec_mult_eq_scalar_prod",
     "[| ?v : carrier_vec ?n; ?w : carrier_vec ?n |]
      ==> mat 1 (dim_vec ?v) (%(i, j). conjugate ?v $ j) *
          mat (dim_vec ?w) 1 (%(i, j). ?w $ i) =
          mat 1 1 (%k. inner_prod ?v ?w)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app (template_hole 9, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app (template_hole 4, template_var 2)),
               template_app (template_hole 3, t_empty))),
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 4, template_var 0)),
               template_hole 5),
             template_app (template_hole 3, t_empty))),
         template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 5),
           t_empty)))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A - (?B + ?C + ?D) = ?A - ?B - ?C - ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 4),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2)),
               template_var 1)),
           template_var 0)))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A + ?B + (?C + ?D) = ?A + ?C + (?B + ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A * ?B * (?C * ?D) = ?A * ?B * ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 2)),
               template_var 1)),
           template_var 0)))),
    ("Complex_Matrix.unitary_elim",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?P : carrier_mat ?n ?n; unitary ?P;
         ?P * ?A * adjoint ?P = ?P * ?B * adjoint ?P |]
      ==> ?A = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 2),
                template_var 2))
            ),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_equation
         (template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 3)),
            template_app (template_hole 0, template_var 0)),
          template_app
           (template_app
             (template_hole 1,
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 1)),
            template_app (template_hole 0, template_var 0)))],
       template_equation (template_var 3, template_var 1))),
    ("Complex_Matrix.four_block_mat_adjoint",
     "[| ?A : carrier_mat ?nr1.0 ?nc1.0; ?B : carrier_mat ?nr1.0 ?nc2.0;
         ?C : carrier_mat ?nr2.0 ?nc1.0; ?D : carrier_mat ?nr2.0 ?nc2.0 |]
      ==> adjoint (four_block_mat ?A ?B ?C ?D) =
          four_block_mat (adjoint ?A) (adjoint ?C) (adjoint ?B)
           (adjoint ?D)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 7),
              template_app
               (template_app (template_hole 3, template_var 6),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 6),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 7),
                 template_var 4),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 7)),
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 1, template_var 4)),
           template_app (template_hole 1, template_var 0))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A * 1\<^sub>m ?n * 1\<^sub>m ?n * ?B * 1\<^sub>m ?n = ?A * ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_app (template_hole 0, template_var 3))),
                   template_app (template_hole 0, template_var 3))),
               template_var 2)),
           template_app (template_hole 0, template_var 3)),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_var 2)))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A - ?B + (?B - ?C) = ?A + - ?B + ?B + - ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_app (template_hole 0, template_var 2))),
               template_var 2)),
           template_app (template_hole 0, template_var 1))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> trace (?A * ?B * ?C * ?D) = trace (?C * ?D * ?A * ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2)),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_var 4)),
             template_var 2))))),
    ("Complex_Matrix.lowner_le_minus",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n;
         ?A \<le>\<^sub>L ?B; ?C \<le>\<^sub>L ?D |]
      ==> ?A - ?D \<le>\<^sub>L ?B - ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))
           ))),
    ("Complex_Matrix.lowner_le_add",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n;
         ?A \<le>\<^sub>L ?B; ?C \<le>\<^sub>L ?D |]
      ==> ?A + ?C \<le>\<^sub>L ?B + ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> ?A * (?B - ?C) * ?D = ?A * ?B * ?D - ?A * ?C * ?D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2)),
               template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_var 0))))),
    ("Complex_Matrix.diag_mat_mult_diag_mat",
     "[| ?B : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n; diagonal_mat ?B;
         diagonal_mat ?D |]
      ==> ?B * ?D =
          mat ?n ?n
           (%(i, j).
               if i = j then ?B $$ (i, i) * ?D $$ (i, i) else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 1))
            ),
        template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 0),
         template_app
          (template_app
            (template_app (template_hole 7, template_var 1),
             template_var 1),
           template_app (template_hole 6, t_empty))))),
    ("Complex_Matrix.spectral_decomposition_extract_diag",
     "[| ?P : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n; unitary ?P;
         diagonal_mat ?B; ?i < ?n |]
      ==> inner_prod (col ?P ?i)
           (?P * ?B * adjoint ?P *\<^sub>v col ?P ?i) =
          ?B $$ (?i, ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app
               (template_app (template_hole 12, template_var 2),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app (template_hole 12, template_var 2),
                template_var 2))
            ),
        template_predicate
         (template_app (template_hole 11, template_var 3)),
        template_predicate
         (template_app (template_hole 10, template_var 1)),
        template_inequation (less_than, template_var 0, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 5, template_var 3),
                       template_var 1)),
                   template_app (template_hole 4, template_var 3))),
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 0))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))))),
    ("Complex_Matrix.positive_eigenvalue_positive",
     "[| ?A : carrier_mat ?n ?n; positive ?A;
         char_poly ?A = (PROD e<-?es. [:- e, 1:]);
         unitary_schur_decomposition ?A ?es = (?B, ?P, ?Q); ?i < ?n |]
      ==> 0 <= ?B $$ (?i, ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 6),
              template_app
               (template_app (template_hole 18, template_var 5),
                template_var 5))
            ),
        template_predicate
         (template_app (template_hole 17, template_var 6)),
        template_equation
         (template_app (template_hole 15, template_var 6),
          template_app
           (template_hole 14,
            template_app
             (template_app (template_hole 13, t_empty), template_var 4))),
        template_equation
         (template_app
           (template_app (template_hole 7, template_var 6), template_var 4),
          template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1))),
        template_inequation (less_than, template_var 0, template_var 5)],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 3),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))))),
    ("Complex_Matrix.mat_assoc_test",
     "[| ?A : carrier_mat ?n ?n; ?B : carrier_mat ?n ?n;
         ?C : carrier_mat ?n ?n; ?D : carrier_mat ?n ?n |]
      ==> (?A + ?B) * (?B + ?C) = ?A * ?B + ?B * ?B + ?A * ?C + ?B * ?C",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 1, template_var 4),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 2))),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Matrix.unitary_schur_decomposition",
     "[| ?A : carrier_mat ?n ?n; char_poly ?A = (PROD e<-?es. [:- e, 1:]);
         unitary_schur_decomposition ?A ?es = (?B, ?P, ?Q) |]
      ==> similar_mat_wit ?A ?B ?P ?Q &
          upper_triangular ?B &
          diag_mat ?B = ?es & unitary ?P & ?Q = adjoint ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 5),
              template_app
               (template_app (template_hole 20, template_var 4),
                template_var 4))
            ),
        template_equation
         (template_app (template_hole 18, template_var 5),
          template_app
           (template_hole 17,
            template_app
             (template_app (template_hole 16, t_empty), template_var 3))),
        template_equation
         (template_app
           (template_app (template_hole 10, template_var 5),
            template_var 3),
          template_app
           (template_app (template_hole 9, template_var 2),
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 6, template_var 5),
                     template_var 2),
                   template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 5, template_var 2)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 4,
                       template_app (template_hole 3, template_var 2)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 2, template_var 1)),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_app (template_hole 0, template_var 1))))))
           ))),
    ("Complex_Matrix.normal_complex_mat_has_spectral_decomposition",
     "[| ?A : carrier_mat ?n ?n; ?A * adjoint ?A = adjoint ?A * ?A;
         char_poly ?A = (PROD e<-?es. [:- e, 1:]);
         unitary_schur_decomposition ?A ?es = (?B, ?P, ?Q) |]
      ==> similar_mat_wit ?A ?B ?P (adjoint ?P) &
          diagonal_mat ?B & diag_mat ?B = ?es & unitary ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 5),
              template_app
               (template_app (template_hole 21, template_var 4),
                template_var 4))
            ),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 5),
            template_app (template_hole 18, template_var 5)),
          template_app
           (template_app
             (template_hole 19,
              template_app (template_hole 18, template_var 5)),
            template_var 5)),
        template_equation
         (template_app (template_hole 16, template_var 5),
          template_app
           (template_hole 15,
            template_app
             (template_app (template_hole 14, t_empty), template_var 3))),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 5), template_var 3),
          template_app
           (template_app (template_hole 7, template_var 2),
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_var 5),
                     template_var 2),
                   template_var 1),
                 template_app (template_hole 18, template_var 1))),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_var 2)),
                     template_var 3)),
                 template_app (template_hole 0, template_var 1))))
           ))),
    ("Complex_Matrix.hermitian_eigenvalue_real",
     "[| ?A : carrier_mat ?n ?n; hermitian ?A;
         char_poly ?A = (PROD e<-?es. [:- e, 1:]);
         unitary_schur_decomposition ?A ?es = (?B, ?P, ?Q) |]
      ==> similar_mat_wit ?A ?B ?P (adjoint ?P) &
          diagonal_mat ?B &
          diag_mat ?B = ?es &
          unitary ?P & (ALL i<?n. ?B $$ (i, i) : \<real>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 28, template_var 5),
              template_app
               (template_app (template_hole 27, template_var 4),
                template_var 4))
            ),
        template_predicate
         (template_app (template_hole 26, template_var 5)),
        template_equation
         (template_app (template_hole 24, template_var 5),
          template_app
           (template_hole 23,
            template_app
             (template_app (template_hole 22, t_empty), template_var 3))),
        template_equation
         (template_app
           (template_app (template_hole 16, template_var 5),
            template_var 3),
          template_app
           (template_app (template_hole 15, template_var 2),
            template_app
             (template_app (template_hole 14, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 12, template_var 5),
                     template_var 2),
                   template_var 1),
                 template_app (template_hole 11, template_var 1))),
             template_app
              (template_app
                (template_hole 13,
                 template_app (template_hole 10, template_var 2)),
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_var 2)),
                     template_var 3)),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app (template_hole 7, template_var 1)),
                   template_app (template_hole 6, t_empty)))))
           )))]:
   (string * thm * template) list
### theory "Draft.Complex_MatrixMoreTemplates"
### 0.802s elapsed time, 1.125s cpu time, 0.161s GC time
val it = (): unit
