Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Ordered_ListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Ordered_ListMoreTemplates" via "Draft.Ordered_List" via "Draft.Util" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Ordered_ListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Ordered_ListMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.114s elapsed time, 0.471s cpu time, 0.037s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Ordered_ListMoreTemplates" via "Draft.Ordered_List" via "Draft.Util")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Monad_Syntax"
### 0.033s elapsed time, 0.135s cpu time, 0.000s GC time
Loading theory "Draft.Util" (required by "Draft.Ordered_ListMoreTemplates" via "Draft.Ordered_List")
### theory "HOL-Library.Function_Algebras"
### 0.154s elapsed time, 0.634s cpu time, 0.037s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Ordered_ListMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.830s cpu time, 0.037s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Ordered_ListMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Util"
### 0.084s elapsed time, 0.332s cpu time, 0.000s GC time
Loading theory "Draft.Ordered_List" (required by "Draft.Ordered_ListMoreTemplates")
Found termination order: "size_list size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.417s elapsed time, 1.659s cpu time, 0.132s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Ordered_ListMoreTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.956s elapsed time, 3.615s cpu time, 0.857s GC time
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ordered_List"
### 1.002s elapsed time, 3.747s cpu time, 0.905s GC time
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.041s elapsed time, 3.467s cpu time, 0.810s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.924s elapsed time, 5.238s cpu time, 1.038s GC time
Loading theory "Draft.Templates" (required by "Draft.Ordered_ListMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Ordered_ListMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.475s elapsed time, 0.531s cpu time, 0.068s GC time
Loading theory "Draft.Ordered_ListMoreTemplates"
val templateLemmas =
   [("Ordered_List.insert_insert'",
     "Ordered_List.insert ?xs ?e ?i = insert' ?xs ?e ?i",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Ordered_List.insert_body_insert'",
     "insert' ?xs ?e None = Some (insert_body ?xs ?e)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Ordered_List.insert_None_index_neq_None",
     "Ordered_List.insert ?xs ?e ?i = None ==> ?i ~= None",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1),
            template_var 0),
          template_hole 3)],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Ordered_List.delete_None_index_not_in",
     "delete ?xs ?i = None ==> ?i ~: fst ` set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 0),
          template_hole 5)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 1)))
               )
           ))),
    ("Ordered_List.index_not_in_delete_None",
     "?i ~: fst ` set ?xs ==> delete ?xs ?i = None",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app (template_hole 3, template_var 0)))
                )
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Ordered_List.insert_body_preserve_indices",
     "fst ` set (insert_body ?xs ?e) = fst ` set ?xs Un {fst ?e}",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app (template_hole 4, template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 5, template_var 0)),
           template_hole 0)))),
    ("Ordered_List.delete_no_failure",
     "?i : fst ` set ?xs ==> EX xs'. delete ?xs ?i = Some xs'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_app (template_hole 4, template_var 0)))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Ordered_List.index_not_in_insert_Some_None",
     "?i ~: fst ` set ?xs ==> Ordered_List.insert ?xs ?e (Some ?i) = None",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_app (template_hole 4, template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_app (template_hole 1, template_var 2)),
         template_hole 0))),
    ("Ordered_List.insert_Some_None_index_not_in",
     "Ordered_List.insert ?xs ?e (Some ?i) = None ==> ?i ~: fst ` set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1),
            template_app (template_hole 6, template_var 0)),
          template_hole 5)],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 2)))
               )
           ))),
    ("Ordered_List.delete_commutes",
     "delete ?xs ?i1.0 >>= (%ys. delete ys ?i2.0) =
      delete ?xs ?i2.0 >>= (%ys. delete ys ?i1.0)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         t_empty),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         t_empty))),
    ("Ordered_List.delete_preserve_indices",
     "delete ?xs ?i = Some ?ys ==> fst ` set ?xs = fst ` set ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Ordered_List.insert_body_stop_iteration",
     "fst ?x < fst ?e ==> insert_body (?x # ?xs) ?e = ?e # ?x # ?xs",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Ordered_List.insert_body_contains_new_elem",
     "EX p s. ?xs = p @ s & insert_body ?xs ?e = p @ ?e # s",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Ordered_List.insert_body_commutes",
     "fst ?e1.0 ~= fst ?e2.0 ==>
      insert_body (insert_body ?xs ?e1.0) ?e2.0 =
      insert_body (insert_body ?xs ?e2.0) ?e1.0",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2)))),
    ("Ordered_List.insert_delete_commute",
     "?i2.0 ~= fst ?e ==>
      Ordered_List.insert ?xs ?e ?i1.0 >>= (%ys. delete ys ?i2.0) =
      delete ?xs ?i2.0 >>= (%ys. Ordered_List.insert ys ?e ?i1.0)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 4, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2),
               template_var 0)),
           t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3)),
           t_empty)))),
    ("Ordered_List.insert_preserve_indices'",
     "Ordered_List.insert ?xs ?e ?i = Some ?ys ==>
      fst ` set (the (Ordered_List.insert ?xs ?e ?i)) =
      fst ` set ?xs Un {fst ?e}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2),
            template_var 1),
          template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 3),
                   template_var 2),
                 template_var 1)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, template_var 3))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 5, template_var 2)),
             template_hole 0))))),
    ("Ordered_List.insert_no_failure",
     "?i = None | (EX i'. ?i = Some i' & i' : fst ` set ?xs) ==>
      EX xs'. Ordered_List.insert ?xs ?e ?i = Some xs'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 2),
                  template_hole 11)),
              template_app (template_hole 10, t_empty))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Ordered_List.insert_preserve_indices",
     "EX ys. Ordered_List.insert ?xs ?e ?i = Some ys ==>
      fst ` set (the (Ordered_List.insert ?xs ?e ?i)) =
      fst ` set ?xs Un {fst ?e}",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 2),
                   template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 5, template_var 1)),
             template_hole 0))))),
    ("Ordered_List.insert_body_delete_commute",
     "?i2.0 ~= fst ?e ==>
      delete (insert_body ?xs ?e) ?i2.0 >>= (%t. Some (?x # t)) =
      delete ?xs ?i2.0 >>= (%y. Some (?x # insert_body y ?e))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 6, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2)),
               template_var 3)),
           t_empty),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 3)),
           t_empty)))),
    ("Ordered_List.insert_insert_body",
     "[| fst ?e1.0 ~= fst ?e2.0; ?i2.0 ~= Some (fst ?e1.0) |]
      ==> Ordered_List.insert (insert_body ?xs ?e1.0) ?e2.0 ?i2.0 =
          Ordered_List.insert ?xs ?e2.0 ?i2.0 >>=
          (%ys. Some (insert_body ys ?e1.0))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 7, template_var 2))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app
               (template_hole 5,
                template_app (template_hole 7, template_var 3)))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 3)),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 2),
               template_var 1)),
           t_empty)))),
    ("Ordered_List.insert_insert_body_commute",
     "[| ?i ~= fst ?e1.0; fst ?e1.0 ~= fst ?e2.0 |]
      ==> Ordered_List.insert (insert_body ?xs ?e1.0) ?e2.0 (Some ?i) =
          Ordered_List.insert ?xs ?e2.0 (Some ?i) >>=
          (%y. Some (insert_body y ?e1.0))",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 3,
              template_app (template_hole 6, template_var 2))
            ),
        template_negation
         (
            template_equation
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 2)),
             template_var 1),
           template_app (template_hole 2, template_var 3)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 0),
                 template_var 1),
               template_app (template_hole 2, template_var 3))),
           t_empty)))),
    ("Ordered_List.insert_Nil_None",
     "[| fst ?e1.0 ~= fst ?e2.0; ?i ~= fst ?e2.0;
         ?i2.0 ~= Some (fst ?e1.0) |]
      ==> Ordered_List.insert [] ?e2.0 ?i2.0 >>=
          (%ys. Ordered_List.insert ys ?e1.0 (Some ?i)) =
          None",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 3),
              template_app (template_hole 7, template_var 2))
            ),
        template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 7, template_var 2))
            ),
        template_negation
         (
            template_equation
             (template_var 0,
              template_app
               (template_hole 5,
                template_app (template_hole 7, template_var 3)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 2),
               template_var 0)),
           t_empty),
         template_hole 0))),
    ("Ordered_List.split_tuple_list_by_id",
     "[| (?a, ?b, ?c) : set ?xs; distinct (map fst ?xs) |]
      ==> EX pre suf.
             ?xs = pre @ (?a, ?b, ?c) # suf & (ALL y:set pre. fst y ~= ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 3),
                  template_app
                   (template_app (template_hole 12, template_var 2),
                    template_var 1))),
              template_app (template_hole 11, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Ordered_List.insert_preserves_order",
     "[| ?i = None | (EX i'. ?i = Some i' & i' : fst ` set ?xs);
         distinct (map fst ?xs) |]
      ==> EX pre suf.
             ?xs = pre @ suf &
             Ordered_List.insert ?xs ?e ?i = Some (pre @ ?e # suf)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 2),
                  template_hole 16)),
              template_app (template_hole 15, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 10),
                template_var 1))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Ordered_List.insert_between_elements",
     "[| ?xs = ?pre @ ?ref # ?suf; distinct (map fst ?xs);
         !!i'. i' : fst ` set ?xs ==> i' < fst ?e |]
      ==> Ordered_List.insert ?xs ?e (Some (fst ?ref)) =
          Some (?pre @ ?ref # ?e # ?suf)",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 13, template_var 3),
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1))),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 4))
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 0),
           template_app
            (template_hole 1,
             template_app (template_hole 9, template_var 2))),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 13, template_var 3),
             template_app
              (template_app (template_hole 12, template_var 2),
               template_app
                (template_app (template_hole 12, template_var 0),
                 template_var 1))))))),
    ("Ordered_List.insert_commutes",
     "[| fst ?e1.0 ~= fst ?e2.0; ?i1.0 = None | ?i1.0 ~= Some (fst ?e2.0);
         ?i2.0 = None | ?i2.0 ~= Some (fst ?e1.0) |]
      ==> Ordered_List.insert ?xs ?e1.0 ?i1.0 >>=
          (%ys. Ordered_List.insert ys ?e2.0 ?i2.0) =
          Ordered_List.insert ?xs ?e2.0 ?i2.0 >>=
          (%ys. Ordered_List.insert ys ?e1.0 ?i1.0)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 7, template_var 4),
              template_app (template_hole 7, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_hole 4)),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_app
                   (template_hole 3,
                    template_app (template_hole 7, template_var 3)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_app
                   (template_hole 3,
                    template_app (template_hole 7, template_var 4)))))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4),
               template_var 2)),
           t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 3),
               template_var 1)),
           t_empty)))),
    ("Ordered_List.insert_position_element_technical",
     "[| ALL x:set ?as. ?a ~= fst x;
         insert_body (?cs @ ?ds) ?e = ?cs @ ?e # ?ds |]
      ==> Ordered_List.insert (?as @ (?a, ?aa, ?b) # ?cs @ ?ds) ?e
           (Some ?a) =
          Some (?as @ (?a, ?aa, ?b) # ?cs @ ?e # ?ds)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 6)),
              t_empty)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3)),
            template_var 2),
          template_app
           (template_app (template_hole 7, template_var 4),
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 3)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 7, template_var 6),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 3, template_var 5),
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0))),
                   template_app
                    (template_app (template_hole 7, template_var 4),
                     template_var 3)))),
             template_var 2),
           template_app (template_hole 1, template_var 5)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 7, template_var 6),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 3, template_var 5),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 7, template_var 4),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 3))))))))]:
   (string * thm * template) list
### theory "Draft.Ordered_ListMoreTemplates"
### 0.324s elapsed time, 0.446s cpu time, 0.035s GC time
val it = (): unit
