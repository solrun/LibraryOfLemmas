   [("Util.kleisli_assoc",
     "(?z \<rhd> ?x) \<rhd> ?y = ?z \<rhd> ?x \<rhd> ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Util.distinct_set_notin", "distinct (?x # ?xs) ==> ?x ~: set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Util.map_filter_append",
     "List.map_filter ?P (?xs @ ?ys) =
      List.map_filter ?P ?xs @ List.map_filter ?P ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Util.list_nil_or_snoc", "?xs = [] | (EX y ys. ?xs = ys @ [y])",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 4)),
           template_app (template_hole 3, t_empty))
         )),
    ("Util.list_head_butlast",
     "[| hd ?xs = ?v; 1 < length ?xs |] ==> hd (butlast ?xs) = ?v",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_var 0),
        template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Util.list_head_length_one",
     "[| hd ?xs = ?x; length ?xs = 1 |] ==> ?xs = [?x]",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), template_var 0),
        template_equation
         (template_app (template_hole 4, template_var 1), template_hole 3)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Util.set_elem_nth", "?x : set ?xs ==> EX m<length ?xs. ?xs ! m = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Util.kleisli_comm_cong",
     "?x \<rhd> ?y = ?y \<rhd> ?x ==>
      ?z \<rhd> ?x \<rhd> ?y = ?z \<rhd> ?y \<rhd> ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Util.list_head_unaffected",
     "hd (?x @ [?y, ?z]) = ?v ==> hd (?x @ [?y]) = ?v",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_hole 0)))),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))),
         template_var 0))),
    ("Util.list_two_at_end",
     "1 < length ?xs ==> EX xs' x y. ?xs = xs' @ [x, y]",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Util.suffix_eq_distinct_list",
     "[| distinct ?xs; ?ys @ ?suf1.0 = ?xs; ?ys @ ?suf2.0 = ?xs |]
      ==> ?suf1.0 = ?suf2.0",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 0),
          template_var 3)],
       template_equation (template_var 1, template_var 0))),
    ("Util.set_membership_equality_technicalD",
     "{?x} Un set ?xs = {?y} Un set ?ys ==> ?x = ?y | ?y : set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_hole 4)),
            template_app (template_hole 3, template_var 2)),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4)),
            template_app (template_hole 3, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 3, template_var 2)))
           ))),
    ("Util.list_nth_split_technical",
     "[| ?m < length ?cs; ?cs ~= [] |]
      ==> EX xs ys. ?cs = xs @ ?cs ! ?m # ys",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Util.split_list_unique_prefix",
     "?x : set ?xs ==>
      EX pre suf. ?xs = pre @ ?x # suf & (ALL y:set pre. ?x ~= y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Util.pre_suf_eq_distinct_list",
     "[| distinct ?xs; ?ys ~= []; ?pre1.0 @ ?ys @ ?suf1.0 = ?xs;
         ?pre2.0 @ ?ys @ ?suf2.0 = ?xs |]
      ==> ?pre1.0 = ?pre2.0 & ?suf1.0 = ?suf2.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 5)),
        template_negation
         (template_equation (template_var 4, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 2)),
          template_var 5),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 0)),
          template_var 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Util.list_nth_split",
     "[| ?m < length ?cs; ?n < ?m; 1 < length ?cs |]
      ==> EX xs ys zs. ?cs = xs @ ?cs ! ?n # ys @ ?cs ! ?m # zs",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1)),
        template_inequation (less_than, template_var 0, template_var 2),
        template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 6, template_var 1))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Util.set_equality_technical",
     "[| {?x} Un set ?xs = {?y} Un set ?ys; ?x ~: set ?xs; ?y ~: set ?ys;
         ?y : set ?xs |]
      ==> {?x} Un (set ?xs - {?y}) = set ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_hole 4)),
            template_app (template_hole 3, template_var 2)),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4)),
            template_app (template_hole 3, template_var 0))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_hole 4)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 4))),
         template_app (template_hole 3, template_var 0)))),
    ("Util.list_split_two_elems",
     "[| distinct ?cs; ?x : set ?cs; ?y : set ?cs; ?x ~= ?y |]
      ==> EX pre mid suf.
             ?cs = pre @ ?x # mid @ ?y # suf |
             ?cs = pre @ ?y # mid @ ?x # suf",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty))))]
