Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.UtilMoreTemplates" via "Draft.Util" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.UtilMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.UtilMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.UtilMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.515s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.UtilMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.131s elapsed time, 0.536s cpu time, 0.038s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.UtilMoreTemplates" via "Draft.Util")
### theory "HOL-Library.Monad_Syntax"
### 0.047s elapsed time, 0.187s cpu time, 0.000s GC time
Loading theory "Draft.Util" (required by "Draft.UtilMoreTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.311s elapsed time, 1.244s cpu time, 0.117s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.UtilMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Util"
### 0.145s elapsed time, 0.564s cpu time, 0.079s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.327s cpu time, 0.117s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.UtilMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.716s elapsed time, 2.186s cpu time, 0.204s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.773s elapsed time, 2.284s cpu time, 0.204s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.869s elapsed time, 4.440s cpu time, 0.926s GC time
Loading theory "Draft.Templates" (required by "Draft.UtilMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.046s elapsed time, 0.060s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.UtilMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.431s elapsed time, 0.437s cpu time, 0.000s GC time
Loading theory "Draft.UtilMoreTemplates"
val templateLemmas =
   [("Util.kleisli_assoc",
     "(?z \<rhd> ?x) \<rhd> ?y = ?z \<rhd> ?x \<rhd> ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Util.distinct_set_notin", "distinct (?x # ?xs) ==> ?x ~: set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Util.map_filter_append",
     "List.map_filter ?P (?xs @ ?ys) =
      List.map_filter ?P ?xs @ List.map_filter ?P ?ys",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Util.list_nil_or_snoc", "?xs = [] | (EX y ys. ?xs = ys @ [y])",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 4)),
           template_app (template_hole 3, t_empty))
         )),
    ("Util.list_head_butlast",
     "[| hd ?xs = ?v; 1 < length ?xs |] ==> hd (butlast ?xs) = ?v",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1), template_var 0),
        template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 1))],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Util.list_head_length_one",
     "[| hd ?xs = ?x; length ?xs = 1 |] ==> ?xs = [?x]",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1), template_var 0),
        template_equation
         (template_app (template_hole 4, template_var 1), template_hole 3)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Util.set_elem_nth", "?x : set ?xs ==> EX m<length ?xs. ?xs ! m = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Util.kleisli_comm_cong",
     "?x \<rhd> ?y = ?y \<rhd> ?x ==>
      ?z \<rhd> ?x \<rhd> ?y = ?z \<rhd> ?y \<rhd> ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Util.list_head_unaffected",
     "hd (?x @ [?y, ?z]) = ?v ==> hd (?x @ [?y]) = ?v",
     template_implication
      ([template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_hole 0)))),
          template_var 0)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))),
         template_var 0))),
    ("Util.list_two_at_end",
     "1 < length ?xs ==> EX xs' x y. ?xs = xs' @ [x, y]",
     template_implication
      ([template_inequation
         (less_than, template_hole 7,
          template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Util.suffix_eq_distinct_list",
     "[| distinct ?xs; ?ys @ ?suf1.0 = ?xs; ?ys @ ?suf2.0 = ?xs |]
      ==> ?suf1.0 = ?suf2.0",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_var 3),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 0),
          template_var 3)],
       template_equation (template_var 1, template_var 0))),
    ("Util.set_membership_equality_technicalD",
     "{?x} Un set ?xs = {?y} Un set ?ys ==> ?x = ?y | ?y : set ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_hole 4)),
            template_app (template_hole 3, template_var 2)),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4)),
            template_app (template_hole 3, template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 3, template_var 2)))
           ))),
    ("Util.list_nth_split_technical",
     "[| ?m < length ?cs; ?cs ~= [] |]
      ==> EX xs ys. ?cs = xs @ ?cs ! ?m # ys",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Util.split_list_unique_prefix",
     "?x : set ?xs ==>
      EX pre suf. ?xs = pre @ ?x # suf & (ALL y:set pre. ?x ~= y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Util.pre_suf_eq_distinct_list",
     "[| distinct ?xs; ?ys ~= []; ?pre1.0 @ ?ys @ ?suf1.0 = ?xs;
         ?pre2.0 @ ?ys @ ?suf2.0 = ?xs |]
      ==> ?pre1.0 = ?pre2.0 & ?suf1.0 = ?suf2.0",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 5)),
        template_negation
         (template_equation (template_var 4, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 3),
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 2)),
          template_var 5),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 0)),
          template_var 5)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Util.list_nth_split",
     "[| ?m < length ?cs; ?n < ?m; 1 < length ?cs |]
      ==> EX xs ys zs. ?cs = xs @ ?cs ! ?n # ys @ ?cs ! ?m # zs",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 6, template_var 1)),
        template_inequation (less_than, template_var 0, template_var 2),
        template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 6, template_var 1))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Util.set_equality_technical",
     "[| {?x} Un set ?xs = {?y} Un set ?ys; ?x ~: set ?xs; ?y ~: set ?ys;
         ?y : set ?xs |]
      ==> {?x} Un (set ?xs - {?y}) = set ?ys",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_hole 4)),
            template_app (template_hole 3, template_var 2)),
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4)),
            template_app (template_hole 3, template_var 0))),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_app (template_hole 3, template_var 2))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_app (template_hole 3, template_var 0))
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_app (template_hole 3, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_hole 4)),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 2)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 4))),
         template_app (template_hole 3, template_var 0)))),
    ("Util.list_split_two_elems",
     "[| distinct ?cs; ?x : set ?cs; ?y : set ?cs; ?x ~= ?y |]
      ==> EX pre mid suf.
             ?cs = pre @ ?x # mid @ ?y # suf |
             ?cs = pre @ ?y # mid @ ?x # suf",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_app (template_hole 7, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app (template_hole 7, template_var 2))
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_predicate (template_app (template_hole 4, t_empty))))]:
   (string * thm * template) list
### theory "Draft.UtilMoreTemplates"
### 0.316s elapsed time, 0.459s cpu time, 0.058s GC time
val it = (): unit
