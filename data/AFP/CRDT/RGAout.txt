Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.RGAMoreTemplates" via "Draft.RGA" via "Draft.Network" via "Draft.Convergence" via "Draft.Util" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.120s elapsed time, 0.498s cpu time, 0.036s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.RGAMoreTemplates" via "Draft.RGA" via "Draft.Network" via "Draft.Convergence" via "Draft.Util")
### theory "HOL-Library.Monad_Syntax"
### 0.031s elapsed time, 0.123s cpu time, 0.000s GC time
Loading theory "Draft.Util" (required by "Draft.RGAMoreTemplates" via "Draft.RGA" via "Draft.Network" via "Draft.Convergence")
### theory "HOL-Library.Function_Algebras"
### 0.152s elapsed time, 0.620s cpu time, 0.036s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.Util"
### 0.081s elapsed time, 0.321s cpu time, 0.000s GC time
Loading theory "Draft.Convergence" (required by "Draft.RGAMoreTemplates" via "Draft.RGA" via "Draft.Network")
### theory "HOL-Library.Set_Algebras"
### 0.256s elapsed time, 1.040s cpu time, 0.036s GC time
Loading theory "Draft.Ordered_List" (required by "Draft.RGAMoreTemplates" via "Draft.RGA")
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.330s cpu time, 0.116s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs")
locale happens_before
  fixes hb_weak :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
    and hb :: "'a => 'a => bool"  (infix \<open>\<prec>\<close> 50)
    and
    interp :: "'a => 'b => 'b option"
      (\<open>\<langle>_\<rangle>\<close> [0])
  assumes "happens_before (\<preceq>) (\<prec>)"
Proofs for inductive predicate(s) "hb_consistent"
  Proving monotonicity ...
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
locale strong_eventual_consistency
  fixes hb_weak :: "'a => 'a => bool"  (infix \<open>\<preceq>\<close> 50)
    and hb :: "'a => 'a => bool"  (infix \<open>\<prec>\<close> 50)
    and
    interp :: "'a => 'b => 'b option"
      (\<open>\<langle>_\<rangle>\<close> [0])
    and op_history :: "'a list => bool"
    and initial_state :: "'b"
  assumes
    "strong_eventual_consistency (\<preceq>) (\<prec>) interp op_history
      initial_state"
### theory "Draft.Convergence"
### 0.364s elapsed time, 1.425s cpu time, 0.159s GC time
Loading theory "Draft.Network" (required by "Draft.RGAMoreTemplates" via "Draft.RGA")
locale node_histories
  fixes history :: "nat => 'evt list"
  assumes "node_histories history"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst p)) <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Ordered_List"
### 1.043s elapsed time, 3.922s cpu time, 0.871s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale network
  fixes history :: "nat => 'msg event list"
    and msg_id :: "'msg => 'msgid"
  assumes "network history msg_id"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Proofs for inductive predicate(s) "hb"
  Proving monotonicity ...
### theory "HOL-Library.Stream"
### 1.115s elapsed time, 4.207s cpu time, 0.860s GC time
Found termination order: "size <*mlex*> {}"
locale causal_network
  fixes history :: "nat => 'a event list"
    and msg_id :: "'a => 'b"
  assumes "causal_network history msg_id"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale network_with_ops
  fixes history :: "nat => ('msgid * 'op) event list"
    and interp :: "'op => 'state => 'state option"
    and initial_state :: "'state"
  assumes "network_with_ops history"
locale network_with_ops
  fixes history :: "nat => ('msgid * 'op) event list"
    and interp :: "'op => 'state => 'state option"
    and initial_state :: "'state"
  assumes "network_with_ops history"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.797s elapsed time, 2.553s cpu time, 0.270s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.356s elapsed time, 8.007s cpu time, 1.826s GC time
Loading theory "Draft.Templates" (required by "Draft.RGAMoreTemplates" via "Draft.ExtrEqs")
locale network_with_constrained_ops
  fixes history :: "nat => ('a * 'b) event list"
    and interp :: "'b => 'c => 'c option"
    and initial_state :: "'c"
    and valid_msg :: "'c => 'a * 'b => bool"
  assumes
    "network_with_constrained_ops history interp initial_state valid_msg"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RGAMoreTemplates")
### theory "Draft.Network"
### 2.307s elapsed time, 7.025s cpu time, 1.645s GC time
Loading theory "Draft.RGA" (required by "Draft.RGAMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.554s elapsed time, 1.177s cpu time, 0.100s GC time
Found termination order: "{}"
locale rga
  fixes history :: "nat => ('a * ('a, 'b) operation) event list"
  assumes "rga history"
locale rga
  fixes history :: "nat => ('a * ('a, 'b) operation) event list"
  assumes "rga history"
### theory "Draft.RGA"
### 2.367s elapsed time, 2.726s cpu time, 0.224s GC time
Loading theory "Draft.RGAMoreTemplates"
val templateLemmas =
   [("RGA.indices_Broadcast_singleton", "indices [Broadcast ?b] = []",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1)),
       template_hole 0)),
    ("RGA.indices_append",
     "indices (?xs @ ?ys) = indices ?xs @ indices ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("RGA.indices_Deliver_Delete", "indices [Deliver (?i, Delete ?n)] = []",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 2, template_var 0)))),
           template_hole 1)),
       template_hole 0)),
    ("RGA.indices_Deliver_Insert",
     "indices [Deliver (?i, Insert ?e ?n)] = [fst ?e]",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0)))),
           template_hole 3)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_hole 0))),
    ("RGA.subset_reorder", "{?a, ?b} <= ?c ==> {?b, ?a} <= ?c",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 1, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_var 0)))]:
   (string * thm * template) list
### theory "Draft.RGAMoreTemplates"
### 0.343s elapsed time, 0.502s cpu time, 0.000s GC time
val it = (): unit
