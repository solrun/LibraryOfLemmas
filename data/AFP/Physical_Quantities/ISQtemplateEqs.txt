   [("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = 1",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("ISQ_Conversion.dconvfactor_id", "dconvfactor id\<^sub>C ?d = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>M",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>T",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>N",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>L",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>I",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>J",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>\<Theta>",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Proof.dimQ", "dimQ ?x = QD(?'d)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Algebra.scaleQ_one", "(1::?'a) *\<^sub>Q ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("ISQ_Algebra.scaleQ_zero", "(0::?'a) *\<^sub>Q ?x = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("ISQ_Conversion.qconv_id", "qconv id\<^sub>C ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("ISQ_Conversion.convinv_inverse", "inv\<^sub>C (inv\<^sub>C ?c) = ?c",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ISQ_Quantities.mmore", "mmore (| unit_sys = ?x, ... = ?y |) = ?y",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("ISQ_Proof.magQ_numeral",
     "\<lbrakk>numeral ?n\<rbrakk>\<^sub>Q = numeral ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?x = inverse QD(?'a)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("ISQ_Conversion.convcomp_inv",
     "?c \<circ>\<^sub>C inv\<^sub>C ?c = id\<^sub>C",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("ISQ_Conversion.inv_convcomp",
     "inv\<^sub>C ?c \<circ>\<^sub>C ?c = id\<^sub>C",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("ISQ_Quantities.mmore_ext",
     "(| unit_sys = unit, ... = mmore ?a |) = ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ISQ_Proof.magQ_qinverse",
     "\<lbrakk>?x\<^sup>-\<^sup>\<one>\<rbrakk>\<^sub>Q =
      inverse \<lbrakk>?x\<rbrakk>\<^sub>Q",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Proof.magQ_uminus",
     "\<lbrakk>- ?x\<rbrakk>\<^sub>Q = - \<lbrakk>?x\<rbrakk>\<^sub>Q",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("ISQ_Quantities.mag_inverse", "mag (inverse ?x) = inverse (mag ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("ISQ_Quantities.more_inverse",
     "Quantity.more (inverse ?x) = inverse (Quantity.more ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "AmountF (inv\<^sub>C ?x) = inverse (AmountF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "CurrentF (inv\<^sub>C ?x) = inverse (CurrentF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "IntensityF (inv\<^sub>C ?x) = inverse (IntensityF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "LengthF (inv\<^sub>C ?x) = inverse (LengthF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "MassF (inv\<^sub>C ?x) = inverse (MassF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "TemperatureF (inv\<^sub>C ?x) = inverse (TemperatureF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "TimeF (inv\<^sub>C ?x) = inverse (TimeF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Quantities.qeq_iff_same_dim",
     "(?x \<cong>\<^sub>Q ?y) = (?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("ISQ_Quantities.dim_inverse",
     "Quantity.dim (inverse ?x) = inverse (Quantity.dim ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("ISQ_Algebra.qinverse_nonzero_iff_nonzero",
     "(?x\<^sup>-\<^sup>\<one> = 0) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?x = QD(?'a) \<cdot> QD(?'b)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app (template_hole 1, template_hole 0)))),
    ("ISQ_Conversion.qconv_convinv",
     "qconv (inv\<^sub>C ?c) (qconv ?c ?x) = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("ISQ_Proof.magQ_scaleQ",
     "\<lbrakk>?x *\<^sub>Q ?y\<rbrakk>\<^sub>Q =
      ?x \<cdot> \<lbrakk>?y\<rbrakk>\<^sub>Q",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("ISQ_Conversion.dconvfactor_inverse",
     "dconvfactor ?c (inverse ?d) = inverse (dconvfactor ?c ?d)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ISQ_Conversion.dconvfactor_convinv",
     "dconvfactor (inv\<^sub>C ?c) ?d = inverse (dconvfactor ?c ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ISQ_Proof.quant_eq_iff_mag_eq",
     "(?x = ?y) =
      (\<lbrakk>?x\<rbrakk>\<^sub>Q = \<lbrakk>?y\<rbrakk>\<^sub>Q)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Proof.quant_less_iff_magn_less",
     "(?x < ?y) =
      (\<lbrakk>?x\<rbrakk>\<^sub>Q < \<lbrakk>?y\<rbrakk>\<^sub>Q)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Proof.quant_le_iff_magn_le",
     "(?x <= ?y) =
      (\<lbrakk>?x\<rbrakk>\<^sub>Q <= \<lbrakk>?y\<rbrakk>\<^sub>Q)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Algebra.scaleQ_inv", "- ?a *\<^sub>Q ?x = ?a *\<^sub>Q - ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.qconv_qinverse",
     "qconv ?c (?x\<^sup>-\<^sup>\<one>) =
      qconv ?c ?x\<^sup>-\<^sup>\<one>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ISQ_Proof.magQ_plus",
     "\<lbrakk>?x + ?y\<rbrakk>\<^sub>Q =
      \<lbrakk>?x\<rbrakk>\<^sub>Q + \<lbrakk>?y\<rbrakk>\<^sub>Q",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ISQ_Proof.magQ_minus",
     "\<lbrakk>?x - ?y\<rbrakk>\<^sub>Q =
      \<lbrakk>?x\<rbrakk>\<^sub>Q - \<lbrakk>?y\<rbrakk>\<^sub>Q",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ISQ_Quantities.mag_times",
     "mag (?x \<cdot> ?y) = mag ?x \<cdot> mag ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ISQ_Quantities.more_times",
     "Quantity.more (?x \<cdot> ?y) =
      Quantity.more ?x \<cdot> Quantity.more ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ISQ_Quantities.mag_divide", "mag (?x / ?y) = mag ?x / mag ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ISQ_Quantities.more_divide",
     "Quantity.more (?x / ?y) = Quantity.more ?x / Quantity.more ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ISQ_Proof.magQ_qtimes",
     "\<lbrakk>?x \<^bold>\<cdot> ?y\<rbrakk>\<^sub>Q =
      \<lbrakk>?x\<rbrakk>\<^sub>Q \<cdot> \<lbrakk>?y\<rbrakk>\<^sub>Q",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "AmountF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      AmountF ?c\<^sub>1 \<cdot> AmountF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "CurrentF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      CurrentF ?c\<^sub>1 \<cdot> CurrentF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "IntensityF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      IntensityF ?c\<^sub>1 \<cdot> IntensityF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "LengthF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      LengthF ?c\<^sub>1 \<cdot> LengthF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "MassF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      MassF ?c\<^sub>1 \<cdot> MassF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "TemperatureF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      TemperatureF ?c\<^sub>1 \<cdot> TemperatureF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "TimeF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      TimeF ?c\<^sub>1 \<cdot> TimeF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Quantities.dim_times",
     "Quantity.dim (?x \<cdot> ?y) =
      Quantity.dim ?x \<cdot> Quantity.dim ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ISQ_Quantities.dim_divide",
     "Quantity.dim (?x / ?y) = Quantity.dim ?x / Quantity.dim ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ISQ_Proof.magQ_qdivivide",
     "\<lbrakk>?x \<^bold>\<cdot> ?y\<^sup>-\<^sup>\<one>\<rbrakk>\<^sub>Q =
      \<lbrakk>?x\<rbrakk>\<^sub>Q / \<lbrakk>?y\<rbrakk>\<^sub>Q",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Algebra.scaleQ_scaleQ",
     "?a *\<^sub>Q ?b *\<^sub>Q ?x = ?a \<cdot> ?b *\<^sub>Q ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("ISQ_Algebra.mult_scaleQ_right",
     "?x \<^bold>\<cdot> (?a *\<^sub>Q ?y) =
      ?a *\<^sub>Q ?x \<^bold>\<cdot> ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ISQ_Algebra.mult_scaleQ_left",
     "(?a *\<^sub>Q ?x) \<^bold>\<cdot> ?y =
      ?a *\<^sub>Q ?x \<^bold>\<cdot> ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ISQ_Conversion.qconv_scaleQ",
     "qconv ?c (?d *\<^sub>Q ?x) = ?d *\<^sub>Q qconv ?c ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ISQ_Conversion.qconv_comp",
     "qconv (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) ?x =
      qconv ?c\<^sub>1 (qconv ?c\<^sub>2 ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ISQ_Dimensions.mk_BaseDim_code",
     "mk_BaseDim ?d =
      mk_dimvec ((replicate CARD(?'d) 0)[enum_ind ?d := 1])",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3)),
                 template_hole 2)),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Mass",
     "qconv ?c BUNIT(M, ?'b) = MassF ?c *\<^sub>Q BUNIT(M, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Time",
     "qconv ?c BUNIT(T, ?'b) = TimeF ?c *\<^sub>Q BUNIT(T, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Amount",
     "qconv ?c BUNIT(N, ?'b) = AmountF ?c *\<^sub>Q BUNIT(N, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Length",
     "qconv ?c BUNIT(L, ?'b) = LengthF ?c *\<^sub>Q BUNIT(L, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Current",
     "qconv ?c BUNIT(I, ?'b) = CurrentF ?c *\<^sub>Q BUNIT(I, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Intensity",
     "qconv ?c BUNIT(J, ?'b) = IntensityF ?c *\<^sub>Q BUNIT(J, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Temperature",
     "qconv ?c BUNIT(\<Theta>, ?'b) =
      TemperatureF ?c *\<^sub>Q BUNIT(\<Theta>, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.magQ_qconv",
     "\<lbrakk>qconv ?c ?q\<rbrakk>\<^sub>Q =
      of_rat (dconvfactor ?c (dimQ ?q)) \<cdot>
      \<lbrakk>?q\<rbrakk>\<^sub>Q",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)))),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.dconvfactor_times",
     "dconvfactor ?c (?x \<cdot> ?y) =
      dconvfactor ?c ?x \<cdot> dconvfactor ?c ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ISQ_Conversion.dconvfactor_compose",
     "dconvfactor (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) ?d =
      dconvfactor ?c\<^sub>1 ?d \<cdot> dconvfactor ?c\<^sub>2 ?d",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ISQ_Algebra.scaleQ_add_right",
     "?a *\<^sub>Q ?x + ?y = (?a *\<^sub>Q ?x) + (?a *\<^sub>Q ?y)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("ISQ_Algebra.scaleQ_add_left",
     "?a + ?b *\<^sub>Q ?x = (?a *\<^sub>Q ?x) + (?b *\<^sub>Q ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ISQ_Conversion.qconv_minus",
     "qconv ?c (?x - ?y) = qconv ?c ?x - qconv ?c ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ISQ_Conversion.qconv_plus",
     "qconv ?c (?x + ?y) = qconv ?c ?x + qconv ?c ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ISQ_Conversion.qconv_qmult",
     "qconv ?c (?x \<^bold>\<cdot> ?y) =
      qconv ?c ?x \<^bold>\<cdot> qconv ?c ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ISQ_Proof.quant_equiv_iff",
     "(?x \<cong>\<^sub>Q ?y) =
      (\<lbrakk>?x\<rbrakk>\<^sub>Q = \<lbrakk>?y\<rbrakk>\<^sub>Q &
       QD(?'u\<^sub>1) = QD(?'u\<^sub>2))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_dunno)),
    ("ISQ_Dimensions.inverse_mk_dimvec",
     "inverse (mk_dimvec ?xs) =
      (if length ?xs = CARD(?'a) then mk_dimvec (map uminus ?xs) else 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 0))
            )],
       template_dunno)),
    ("ISQ_Dimensions.power_mk_dimvec",
     "mk_dimvec ?xs ^ ?n =
      (if length ?xs = CARD(?'a)
       then mk_dimvec (map ((\<cdot>) (of_nat ?n)) ?xs)
       else mk_dimvec ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("ISQ_Dimensions.times_mk_dimvec",
     "mk_dimvec ?xs \<cdot> mk_dimvec ?ys =
      (if length ?xs = CARD(?'a) & length ?ys = CARD(?'a)
       then mk_dimvec (map2 (+) ?xs ?ys)
       else if length ?xs = CARD(?'a) then mk_dimvec ?xs
            else mk_dimvec ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_app (template_hole 10, template_var 0))
            )],
       template_dunno)),
    ("ISQ_Dimensions.divide_mk_dimvec",
     "mk_dimvec ?xs / mk_dimvec ?ys =
      (if length ?xs = CARD(?'a) & length ?ys = CARD(?'a)
       then mk_dimvec (map2 (-) ?xs ?ys)
       else if length ?ys = CARD(?'a) then mk_dimvec (map uminus ?ys)
            else mk_dimvec ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)),
              template_app (template_hole 12, template_var 0))
            )],
       template_dunno))]
