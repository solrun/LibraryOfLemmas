Loading theory "Draft.Groups_mult" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ISQ_Conversion" via "Draft.ISQ_Units" via "Draft.ISQ_Proof" via "Draft.ISQ_Quantities" via "Draft.ISQ_Dimensions")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ISQ_Conversion" via "Draft.ISQ_Units" via "Draft.ISQ_Proof" via "Draft.ISQ_Quantities" via "Draft.ISQ_Dimensions")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Library.Function_Algebras"
### 0.115s elapsed time, 0.440s cpu time, 0.033s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ISQ_Conversion" via "Draft.ISQ_Units" via "Draft.ISQ_Proof" via "Draft.ISQ_Quantities" via "Draft.ISQ_Dimensions" via "Draft.Enum_extra" via "HOL-Library.Code_Cardinality" via "HOL-Library.Cardinality")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
structure Eisbach_Rule_Insts: sig end
class group_mult = inverse + monoid_mult +
  assumes "left_inverse": "!!a. inverse a \<cdot> a = (1::'a)"
  assumes "multi_inverse_conv_div": "!!a b. a \<cdot> inverse b = a / b"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.297s cpu time, 0.096s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ExtrEqs")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
### theory "Draft.Groups_mult"
### 0.351s elapsed time, 1.375s cpu time, 0.096s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Eisbach.Eisbach"
### 0.423s elapsed time, 1.652s cpu time, 0.162s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.206s elapsed time, 0.851s cpu time, 0.066s GC time
Loading theory "Draft.Power_int" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ISQ_Conversion" via "Draft.ISQ_Units" via "Draft.ISQ_Proof" via "Draft.ISQ_Quantities" via "Draft.ISQ_Dimensions")
### theory "HOL-Library.Phantom_Type"
### 0.533s elapsed time, 2.150s cpu time, 0.228s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ISQ_Conversion" via "Draft.ISQ_Units" via "Draft.ISQ_Proof" via "Draft.ISQ_Quantities" via "Draft.ISQ_Dimensions" via "Draft.Enum_extra" via "HOL-Library.Code_Cardinality")
### theory "Draft.Power_int"
### 0.068s elapsed time, 0.272s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ExtrEqs")
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
### Additional type variable(s) in locale specification "card2": 'a
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
consts
  flat :: "'a list stream => 'a stream"
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
### theory "HOL-Library.Stream"
### 1.105s elapsed time, 4.269s cpu time, 0.765s GC time
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.901s elapsed time, 3.345s cpu time, 0.694s GC time
Loading theory "HOL-Library.Code_Cardinality" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ISQ_Conversion" via "Draft.ISQ_Units" via "Draft.ISQ_Proof" via "Draft.ISQ_Quantities" via "Draft.ISQ_Dimensions" via "Draft.Enum_extra")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Code generator: dropping subsumed code equation
### List.coset [] <= set [] == False
### theory "HOL-Library.Code_Cardinality"
### 0.105s elapsed time, 0.312s cpu time, 0.000s GC time
Loading theory "Draft.Enum_extra" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ISQ_Conversion" via "Draft.ISQ_Units" via "Draft.ISQ_Proof" via "Draft.ISQ_Quantities" via "Draft.ISQ_Dimensions")
### theory "HOL-Library.BigO"
### 1.008s elapsed time, 3.660s cpu time, 0.694s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.Enum_extra"
### 0.148s elapsed time, 0.347s cpu time, 0.079s GC time
Loading theory "Draft.ISQ_Dimensions" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ISQ_Conversion" via "Draft.ISQ_Units" via "Draft.ISQ_Proof" via "Draft.ISQ_Quantities")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.993s elapsed time, 6.238s cpu time, 0.994s GC time
Loading theory "Draft.Templates" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.115s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ISQ_ConversionMoreTemplates")
### Additional type variable(s) in locale specification "unitary": 'a
class unitary = finite +
  assumes "unitary_unit_pres": "CARD('a) = 1"
instantiation
  unit :: comm_monoid_add
  zero_unit == zero_class.zero :: unit
  plus_unit == plus :: unit => unit => unit
instantiation
  unit :: comm_monoid_mult
  one_unit == one_class.one :: unit
  times_unit == times :: unit => unit => unit
instantiation
  unit :: inverse
  inverse_unit == inverse :: unit => unit
  divide_unit == divide :: unit => unit => unit
instantiation
  dimvec :: (zero, enum) one
  one_dimvec == one_class.one :: ('a, 'b) dimvec
instantiation
  dimvec :: (plus, enum) times
  times_dimvec == times ::
    ('a, 'b) dimvec => ('a, 'b) dimvec => ('a, 'b) dimvec
instantiation
  dimvec :: ({plus,uminus}, enum) inverse
  inverse_dimvec == inverse :: ('a, 'b) dimvec => ('a, 'b) dimvec
  divide_dimvec == divide ::
    ('a, 'b) dimvec => ('a, 'b) dimvec => ('a, 'b) dimvec
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.533s elapsed time, 1.117s cpu time, 0.107s GC time
instantiation
  sdim :: enum
  enum_sdim == enum_class.enum :: sdim list
  enum_all_sdim == enum_class.enum_all :: (sdim => bool) => bool
  enum_ex_sdim == enum_class.enum_ex :: (sdim => bool) => bool
instantiation
  sdim :: card_UNIV
  card_UNIV_sdim == card_UNIV_class.card_UNIV :: (sdim, nat) phantom
  finite_UNIV_sdim == finite_UNIV :: (sdim, bool) phantom
"\<^bold>M \<cdot> inverse (\<^bold>L ^ 3)"
  :: "(int, sdim) dimvec"
"\<^bold>L \<cdot> \<^bold>M \<cdot> inverse (\<^bold>T\<^sup>2)"
  :: "(int, sdim) dimvec"
class dim_type = unitary +
  fixes dim_ty_sem :: "'a itself => (int, sdim) dimvec"
class basedim_type = dim_type +
  assumes "is_BaseDim": "is_BaseDim QD('a)"
"mk_dimvec [1, 1, - 2, 0, 0, 0, 0]"
  :: "(int, sdim) dimvec"
instantiation
  L :: basedim_type
  dim_ty_sem_Length == dim_ty_sem :: L itself => (int, sdim) dimvec
instantiation
  M :: basedim_type
  dim_ty_sem_Mass == dim_ty_sem :: M itself => (int, sdim) dimvec
instantiation
  T :: basedim_type
  dim_ty_sem_Time == dim_ty_sem :: T itself => (int, sdim) dimvec
instantiation
  I :: basedim_type
  dim_ty_sem_Current == dim_ty_sem :: I itself => (int, sdim) dimvec
instantiation
  \<Theta> :: basedim_type
  dim_ty_sem_Temperature == dim_ty_sem ::
    \<Theta> itself => (int, sdim) dimvec
instantiation
  N :: basedim_type
  dim_ty_sem_Amount == dim_ty_sem :: N itself => (int, sdim) dimvec
instantiation
  J :: basedim_type
  dim_ty_sem_Intensity == dim_ty_sem :: J itself => (int, sdim) dimvec
instantiation
  \<one> :: dim_type
  dim_ty_sem_NoDimension == dim_ty_sem ::
    \<one> itself => (int, sdim) dimvec
instantiation
  DimTimes :: (dim_type, dim_type) dim_type
  dim_ty_sem_DimTimes == dim_ty_sem ::
    ('a \<cdot> 'b) itself => (int, sdim) dimvec
instantiation
  DimInv :: (dim_type) dim_type
  dim_ty_sem_DimInv == dim_ty_sem ::
    ('a\<^sup>-\<^sup>1) itself => (int, sdim) dimvec
signature DIMENSION_TYPE =
  sig
    val dim_to_typ: int list -> typ
    val normalise: typ -> typ
    val typ_to_dim: typ -> int list
  end
structure Dimension_Type: DIMENSION_TYPE
val it = [~2, 0, 4, 2, 0, 0, 0]: int list
val it = "L\<^sup>-\<^sup>2 \<cdot> T\<^sup>4 \<cdot> I\<^sup>2": typ
### theory "Draft.ISQ_Dimensions"
### 2.394s elapsed time, 4.209s cpu time, 0.329s GC time
Loading theory "Draft.ISQ_Quantities" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ISQ_Conversion" via "Draft.ISQ_Units" via "Draft.ISQ_Proof")
instantiation
  Quantity_ext :: (times, enum, times) times
  times_Quantity_ext == times ::
    ('a, 'b, 'c) Quantity_scheme
    => ('a, 'b, 'c) Quantity_scheme => ('a, 'b, 'c) Quantity_scheme
instantiation
  Quantity_ext :: (zero, enum, zero) zero
  zero_Quantity_ext == zero_class.zero :: ('a, 'b, 'c) Quantity_scheme
instantiation
  Quantity_ext :: (one, enum, one) one
  one_Quantity_ext == one_class.one :: ('a, 'b, 'c) Quantity_scheme
instantiation
  Quantity_ext :: (inverse, enum, inverse) inverse
  inverse_Quantity_ext == inverse ::
    ('a, 'b, 'c) Quantity_scheme => ('a, 'b, 'c) Quantity_scheme
  divide_Quantity_ext == divide ::
    ('a, 'b, 'c) Quantity_scheme
    => ('a, 'b, 'c) Quantity_scheme => ('a, 'b, 'c) Quantity_scheme
instantiation
  Quantity_ext :: (ord, enum, ord) ord
  less_eq_Quantity_ext == less_eq ::
    ('a, 'b, 'c) Quantity_scheme => ('a, 'b, 'c) Quantity_scheme => bool
  less_Quantity_ext == less ::
    ('a, 'b, 'c) Quantity_scheme => ('a, 'b, 'c) Quantity_scheme => bool
instantiation
  Quantity_ext :: (plus, enum, plus) plus
  plus_Quantity_ext == plus ::
    ('a, 'b, 'c) Quantity_scheme
    => ('a, 'b, 'c) Quantity_scheme => ('a, 'b, 'c) Quantity_scheme
instantiation
  Quantity_ext :: (uminus, enum, uminus) uminus
  uminus_Quantity_ext == uminus ::
    ('a, 'b, 'c) Quantity_scheme => ('a, 'b, 'c) Quantity_scheme
instantiation
  Quantity_ext :: (minus, enum, minus) minus
  minus_Quantity_ext == minus ::
    ('a, 'b, 'c) Quantity_scheme
    => ('a, 'b, 'c) Quantity_scheme => ('a, 'b, 'c) Quantity_scheme
instantiation
  Measurement_System_ext :: (unit_system, zero) zero
  zero_Measurement_System_ext == zero_class.zero ::
    (| unit_sys :: 'a, ... :: 'b |)
instantiation
  Measurement_System_ext :: (unit_system, one) one
  one_Measurement_System_ext == one_class.one ::
    (| unit_sys :: 'a, ... :: 'b |)
instantiation
  Measurement_System_ext :: (unit_system, times) times
  times_Measurement_System_ext == times ::
    (| unit_sys :: 'a, ... :: 'b |)
    => (| unit_sys :: 'a, ... :: 'b |) => (| unit_sys :: 'a, ... :: 'b |)
instantiation
  Measurement_System_ext :: (unit_system, inverse) inverse
  inverse_Measurement_System_ext == inverse ::
    (| unit_sys :: 'a, ... :: 'b |) => (| unit_sys :: 'a, ... :: 'b |)
  divide_Measurement_System_ext == divide ::
    (| unit_sys :: 'a, ... :: 'b |)
    => (| unit_sys :: 'a, ... :: 'b |) => (| unit_sys :: 'a, ... :: 'b |)
instantiation
  Measurement_System_ext :: (unit_system, ord) ord
  less_eq_Measurement_System_ext == less_eq ::
    (| unit_sys :: 'a, ... :: 'b |)
    => (| unit_sys :: 'a, ... :: 'b |) => bool
  less_Measurement_System_ext == less ::
    (| unit_sys :: 'a, ... :: 'b |)
    => (| unit_sys :: 'a, ... :: 'b |) => bool
instantiation
  Measurement_System_ext :: (unit_system, plus) plus
  plus_Measurement_System_ext == plus ::
    (| unit_sys :: 'a, ... :: 'b |)
    => (| unit_sys :: 'a, ... :: 'b |) => (| unit_sys :: 'a, ... :: 'b |)
instantiation
  Measurement_System_ext :: (unit_system, uminus) uminus
  uminus_Measurement_System_ext == uminus ::
    (| unit_sys :: 'a, ... :: 'b |) => (| unit_sys :: 'a, ... :: 'b |)
instantiation
  Measurement_System_ext :: (unit_system, minus) minus
  minus_Measurement_System_ext == minus ::
    (| unit_sys :: 'a, ... :: 'b |)
    => (| unit_sys :: 'a, ... :: 'b |) => (| unit_sys :: 'a, ... :: 'b |)
### Generation of a parametrized correspondence relation failed.
### Reason:
###   No relator for the type "ISQ_Quantities.Measurement_System.Measurement_System_ext"
###     found.
instantiation
  QuantT :: (zero, dim_type, unit_system) zero
  zero_QuantT == zero_class.zero :: 'a['b, 'c]
instantiation
  QuantT :: (one, dim_type, unit_system) one
  one_QuantT == one_class.one :: 'a['b, 'c]
instantiation
  QuantT :: (plus, dim_type, unit_system) plus
  plus_QuantT == plus :: 'a['b, 'c] => 'a['b, 'c] => 'a['b, 'c]
instantiation
  QuantT :: (uminus, dim_type, unit_system) uminus
  uminus_QuantT == uminus :: 'a['b, 'c] => 'a['b, 'c]
instantiation
  QuantT :: (minus, dim_type, unit_system) minus
  minus_QuantT == minus :: 'a['b, 'c] => 'a['b, 'c] => 'a['b, 'c]
instantiation
  QuantT :: (order, dim_type, unit_system) order
  less_eq_QuantT == less_eq :: 'a['b, 'c] => 'a['b, 'c] => bool
  less_QuantT == less :: 'a['b, 'c] => 'a['b, 'c] => bool
instantiation
  QuantT :: (scaleR, dim_type, unit_system) scaleR
  scaleR_QuantT == scaleR :: real => 'a['b, 'c] => 'a['b, 'c]
instantiation
  QuantT :: (norm, dim_type, unit_system) norm
  norm_QuantT == norm :: 'a['b, 'c] => real
instantiation
  QuantT :: (sgn_div_norm, dim_type, unit_system) sgn_div_norm
  sgn_QuantT == sgn :: 'a['b, 'c] => 'a['b, 'c]
instantiation
  QuantT :: (dist_norm, dim_type, unit_system) dist_norm
  dist_QuantT == dist :: 'a['b, 'c] => 'a['b, 'c] => real
instantiation
  QuantT :: ({dist_norm,uniformity_dist}, dim_type, unit_system)
    uniformity_dist
  uniformity_QuantT == uniformity :: ('a['b, 'c] * 'a['b, 'c]) filter
instantiation
  QuantT ::
    ({dist_norm,uniformity_dist,open_uniformity}, dim_type, unit_system)
    open_uniformity
  open_QuantT == open :: ('a['b, 'c]) set => bool
### theory "Draft.ISQ_Quantities"
### 0.914s elapsed time, 0.979s cpu time, 0.087s GC time
Loading theory "Draft.ISQ_Proof" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ISQ_Conversion" via "Draft.ISQ_Units")
### theory "Draft.ISQ_Proof"
### 0.252s elapsed time, 0.288s cpu time, 0.046s GC time
Loading theory "Draft.ISQ_Units" (required by "Draft.ISQ_ConversionMoreTemplates" via "Draft.ISQ_Conversion")
### theory "Draft.ISQ_Units"
### 0.042s elapsed time, 0.042s cpu time, 0.000s GC time
Loading theory "Draft.ISQ_Conversion" (required by "Draft.ISQ_ConversionMoreTemplates")
### Generation of a parametrized correspondence relation failed.
### Reason:
###   No relator for the type "ISQ_Conversion.ConvSchema.ConvSchema_ext" found.
### theory "Draft.ISQ_Conversion"
### 0.524s elapsed time, 0.548s cpu time, 0.032s GC time
Loading theory "Draft.ISQ_ConversionMoreTemplates"
val templateLemmas =
   [("ISQ_Conversion.Conversion_props", "0 < AmountF ?c",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("ISQ_Conversion.Conversion_props", "0 < CurrentF ?c",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("ISQ_Conversion.Conversion_props", "0 < IntensityF ?c",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("ISQ_Conversion.Conversion_props", "0 < LengthF ?c",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("ISQ_Conversion.Conversion_props", "0 < MassF ?c",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("ISQ_Conversion.Conversion_props", "0 < TemperatureF ?c",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("ISQ_Conversion.Conversion_props", "0 < TimeF ?c",
     template_inequation
      (less_than, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("ISQ_Conversion.dconvfactor_id", "dconvfactor id\<^sub>C ?d = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("ISQ_Conversion.qconv_id", "qconv id\<^sub>C ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("ISQ_Conversion.convinv_inverse", "inv\<^sub>C (inv\<^sub>C ?c) = ?c",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("ISQ_Conversion.dconvfactor_pos", "0 < dconvfactor ?c ?d",
     template_inequation
      (less_than, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ISQ_Conversion.dconvfactor_nz", "dconvfactor ?c ?d ~= 0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("ISQ_Conversion.convcomp_inv",
     "?c \<circ>\<^sub>C inv\<^sub>C ?c = id\<^sub>C",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("ISQ_Conversion.inv_convcomp",
     "inv\<^sub>C ?c \<circ>\<^sub>C ?c = id\<^sub>C",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("ISQ_Conversion.Conversion_invs",
     "AmountF (inv\<^sub>C ?x) = inverse (AmountF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "CurrentF (inv\<^sub>C ?x) = inverse (CurrentF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "IntensityF (inv\<^sub>C ?x) = inverse (IntensityF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "LengthF (inv\<^sub>C ?x) = inverse (LengthF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "MassF (inv\<^sub>C ?x) = inverse (MassF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "TemperatureF (inv\<^sub>C ?x) = inverse (TemperatureF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_invs",
     "TimeF (inv\<^sub>C ?x) = inverse (TimeF ?x)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.qconv_convinv",
     "qconv (inv\<^sub>C ?c) (qconv ?c ?x) = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("ISQ_Conversion.dconvfactor_inverse",
     "dconvfactor ?c (inverse ?d) = inverse (dconvfactor ?c ?d)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("ISQ_Conversion.dconvfactor_convinv",
     "dconvfactor (inv\<^sub>C ?c) ?d = inverse (dconvfactor ?c ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ISQ_Conversion.qconv_qinverse",
     "qconv ?c (?x\<^sup>-\<^sup>\<one>) =
      qconv ?c ?x\<^sup>-\<^sup>\<one>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "AmountF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      AmountF ?c\<^sub>1 \<cdot> AmountF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "CurrentF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      CurrentF ?c\<^sub>1 \<cdot> CurrentF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "IntensityF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      IntensityF ?c\<^sub>1 \<cdot> IntensityF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "LengthF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      LengthF ?c\<^sub>1 \<cdot> LengthF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "MassF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      MassF ?c\<^sub>1 \<cdot> MassF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "TemperatureF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      TemperatureF ?c\<^sub>1 \<cdot> TemperatureF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.Conversion_comps",
     "TimeF (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) =
      TimeF ?c\<^sub>1 \<cdot> TimeF ?c\<^sub>2",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.qconv_scaleQ",
     "qconv ?c (?d *\<^sub>Q ?x) = ?d *\<^sub>Q qconv ?c ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ISQ_Conversion.qconv_comp",
     "qconv (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) ?x =
      qconv ?c\<^sub>1 (qconv ?c\<^sub>2 ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ISQ_Conversion.qconv_Mass",
     "qconv ?c BUNIT(M, ?'b) = MassF ?c *\<^sub>Q BUNIT(M, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Time",
     "qconv ?c BUNIT(T, ?'b) = TimeF ?c *\<^sub>Q BUNIT(T, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Amount",
     "qconv ?c BUNIT(N, ?'b) = AmountF ?c *\<^sub>Q BUNIT(N, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Length",
     "qconv ?c BUNIT(L, ?'b) = LengthF ?c *\<^sub>Q BUNIT(L, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Current",
     "qconv ?c BUNIT(I, ?'b) = CurrentF ?c *\<^sub>Q BUNIT(I, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Intensity",
     "qconv ?c BUNIT(J, ?'b) = IntensityF ?c *\<^sub>Q BUNIT(J, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.qconv_Temperature",
     "qconv ?c BUNIT(\<Theta>, ?'b) =
      TemperatureF ?c *\<^sub>Q BUNIT(\<Theta>, ?'a)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_hole 4)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("ISQ_Conversion.magQ_qconv",
     "\<lbrakk>qconv ?c ?q\<rbrakk>\<^sub>Q =
      of_rat (dconvfactor ?c (dimQ ?q)) \<cdot>
      \<lbrakk>?q\<rbrakk>\<^sub>Q",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)))),
         template_app (template_hole 0, template_var 0)))),
    ("ISQ_Conversion.dconvfactor_times",
     "dconvfactor ?c (?x \<cdot> ?y) =
      dconvfactor ?c ?x \<cdot> dconvfactor ?c ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ISQ_Conversion.dconvfactor_compose",
     "dconvfactor (?c\<^sub>1 \<circ>\<^sub>C ?c\<^sub>2) ?d =
      dconvfactor ?c\<^sub>1 ?d \<cdot> dconvfactor ?c\<^sub>2 ?d",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("ISQ_Conversion.qconv_minus",
     "qconv ?c (?x - ?y) = qconv ?c ?x - qconv ?c ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ISQ_Conversion.qconv_plus",
     "qconv ?c (?x + ?y) = qconv ?c ?x + qconv ?c ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("ISQ_Conversion.qconv_qmult",
     "qconv ?c (?x \<^bold>\<cdot> ?y) =
      qconv ?c ?x \<^bold>\<cdot> qconv ?c ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.ISQ_ConversionMoreTemplates"
### 0.454s elapsed time, 0.575s cpu time, 0.040s GC time
val it = (): unit
