Loading theory "Draft.Groups_mult" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ISQ_Dimensions")
Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ISQ_Dimensions")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.443s cpu time, 0.032s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ISQ_Dimensions" via "Draft.Enum_extra" via "HOL-Library.Code_Cardinality" via "HOL-Library.Cardinality")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
structure Eisbach_Rule_Insts: sig end
class group_mult = inverse + monoid_mult +
  assumes "left_inverse": "!!a. inverse a \<cdot> a = (1::'a)"
  assumes "multi_inverse_conv_div": "!!a b. a \<cdot> inverse b = a / b"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.345s elapsed time, 1.351s cpu time, 0.090s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ExtrEqs")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
### theory "Draft.Groups_mult"
### 0.364s elapsed time, 1.429s cpu time, 0.090s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "HOL-Eisbach.Eisbach"
### 0.425s elapsed time, 1.659s cpu time, 0.144s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Set_Algebras"
### 0.230s elapsed time, 0.933s cpu time, 0.134s GC time
Loading theory "Draft.Power_int" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ISQ_Dimensions")
### theory "Draft.Power_int"
### 0.053s elapsed time, 0.221s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Phantom_Type"
### 0.534s elapsed time, 2.150s cpu time, 0.192s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ISQ_Dimensions" via "Draft.Enum_extra" via "HOL-Library.Code_Cardinality")
### Additional type variable(s) in locale specification "CARD_1": 'a
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
### Additional type variable(s) in locale specification "card2": 'a
consts
  sdrop :: "nat => 'a stream => 'a stream"
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
### theory "HOL-Library.Stream"
### 1.105s elapsed time, 4.260s cpu time, 0.722s GC time
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Cardinality"
### 0.928s elapsed time, 3.438s cpu time, 0.678s GC time
Loading theory "HOL-Library.Code_Cardinality" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ISQ_Dimensions" via "Draft.Enum_extra")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.045s elapsed time, 3.798s cpu time, 0.751s GC time
### Code generator: dropping subsumed code equation
### List.coset [] <= set [] == False
### theory "HOL-Library.Code_Cardinality"
### 0.126s elapsed time, 0.382s cpu time, 0.073s GC time
Loading theory "Draft.Enum_extra" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ISQ_Dimensions")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Enum_extra"
### 0.124s elapsed time, 0.251s cpu time, 0.000s GC time
Loading theory "Draft.ISQ_Dimensions" (required by "Draft.ISQ_DimensionsMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.985s elapsed time, 6.232s cpu time, 0.947s GC time
Loading theory "Draft.Templates" (required by "Draft.ISQ_DimensionsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.120s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ISQ_DimensionsMoreTemplates")
### Additional type variable(s) in locale specification "unitary": 'a
class unitary = finite +
  assumes "unitary_unit_pres": "CARD('a) = 1"
instantiation
  unit :: comm_monoid_add
  zero_unit == zero_class.zero :: unit
  plus_unit == plus :: unit => unit => unit
instantiation
  unit :: comm_monoid_mult
  one_unit == one_class.one :: unit
  times_unit == times :: unit => unit => unit
instantiation
  unit :: inverse
  inverse_unit == inverse :: unit => unit
  divide_unit == divide :: unit => unit => unit
instantiation
  dimvec :: (zero, enum) one
  one_dimvec == one_class.one :: ('a, 'b) dimvec
instantiation
  dimvec :: (plus, enum) times
  times_dimvec == times ::
    ('a, 'b) dimvec => ('a, 'b) dimvec => ('a, 'b) dimvec
instantiation
  dimvec :: ({plus,uminus}, enum) inverse
  inverse_dimvec == inverse :: ('a, 'b) dimvec => ('a, 'b) dimvec
  divide_dimvec == divide ::
    ('a, 'b) dimvec => ('a, 'b) dimvec => ('a, 'b) dimvec
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.535s elapsed time, 1.121s cpu time, 0.107s GC time
instantiation
  sdim :: enum
  enum_sdim == enum_class.enum :: sdim list
  enum_all_sdim == enum_class.enum_all :: (sdim => bool) => bool
  enum_ex_sdim == enum_class.enum_ex :: (sdim => bool) => bool
instantiation
  sdim :: card_UNIV
  card_UNIV_sdim == card_UNIV_class.card_UNIV :: (sdim, nat) phantom
  finite_UNIV_sdim == finite_UNIV :: (sdim, bool) phantom
"\<^bold>M \<cdot> inverse (\<^bold>L ^ 3)"
  :: "(int, sdim) dimvec"
"\<^bold>L \<cdot> \<^bold>M \<cdot> inverse (\<^bold>T\<^sup>2)"
  :: "(int, sdim) dimvec"
class dim_type = unitary +
  fixes dim_ty_sem :: "'a itself => (int, sdim) dimvec"
class basedim_type = dim_type +
  assumes "is_BaseDim": "is_BaseDim QD('a)"
"mk_dimvec [1, 1, - 2, 0, 0, 0, 0]"
  :: "(int, sdim) dimvec"
instantiation
  L :: basedim_type
  dim_ty_sem_Length == dim_ty_sem :: L itself => (int, sdim) dimvec
instantiation
  M :: basedim_type
  dim_ty_sem_Mass == dim_ty_sem :: M itself => (int, sdim) dimvec
instantiation
  T :: basedim_type
  dim_ty_sem_Time == dim_ty_sem :: T itself => (int, sdim) dimvec
instantiation
  I :: basedim_type
  dim_ty_sem_Current == dim_ty_sem :: I itself => (int, sdim) dimvec
instantiation
  \<Theta> :: basedim_type
  dim_ty_sem_Temperature == dim_ty_sem ::
    \<Theta> itself => (int, sdim) dimvec
instantiation
  N :: basedim_type
  dim_ty_sem_Amount == dim_ty_sem :: N itself => (int, sdim) dimvec
instantiation
  J :: basedim_type
  dim_ty_sem_Intensity == dim_ty_sem :: J itself => (int, sdim) dimvec
instantiation
  \<one> :: dim_type
  dim_ty_sem_NoDimension == dim_ty_sem ::
    \<one> itself => (int, sdim) dimvec
instantiation
  DimTimes :: (dim_type, dim_type) dim_type
  dim_ty_sem_DimTimes == dim_ty_sem ::
    ('a \<cdot> 'b) itself => (int, sdim) dimvec
instantiation
  DimInv :: (dim_type) dim_type
  dim_ty_sem_DimInv == dim_ty_sem ::
    ('a\<^sup>-\<^sup>1) itself => (int, sdim) dimvec
signature DIMENSION_TYPE =
  sig
    val dim_to_typ: int list -> typ
    val normalise: typ -> typ
    val typ_to_dim: typ -> int list
  end
structure Dimension_Type: DIMENSION_TYPE
val it = [~2, 0, 4, 2, 0, 0, 0]: int list
val it = "L\<^sup>-\<^sup>2 \<cdot> T\<^sup>4 \<cdot> I\<^sup>2": typ
### theory "Draft.ISQ_Dimensions"
### 2.391s elapsed time, 4.184s cpu time, 0.345s GC time
Loading theory "Draft.ISQ_DimensionsMoreTemplates"
val templateLemmas =
   [("ISQ_Dimensions.is_BaseDim_mk", "is_BaseDim (mk_BaseDim ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = 1",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>M",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>T",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>N",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>L",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>I",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>J",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>\<Theta>",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?x = inverse QD(?'a)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?x = QD(?'a) \<cdot> QD(?'b)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app (template_hole 1, template_hole 0)))),
    ("ISQ_Dimensions.unitary_intro",
     "UNIV = {?a} ==> OFCLASS(?'s, unitary_class)",
     template_implication
      ([template_equation
         (template_hole 4,
          template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2))],
       template_predicate
        (template_app (template_hole 1, template_hole 0)))),
    ("ISQ_Dimensions.mk_BaseDim_code",
     "mk_BaseDim ?d =
      mk_dimvec ((replicate CARD(?'d) 0)[enum_ind ?d := 1])",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3)),
                 template_hole 2)),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("ISQ_Dimensions.mk_BaseDim_neq",
     "?x ~= ?y ==> mk_BaseDim ?x ~= mk_BaseDim ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("ISQ_Dimensions.inverse_mk_dimvec",
     "inverse (mk_dimvec ?xs) =
      (if length ?xs = CARD(?'a) then mk_dimvec (map uminus ?xs) else 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 0)),
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0))),
             template_hole 0)
           ))),
    ("ISQ_Dimensions.power_mk_dimvec",
     "mk_dimvec ?xs ^ ?n =
      (if length ?xs = CARD(?'a)
       then mk_dimvec (map ((\<cdot>) (of_nat ?n)) ?xs)
       else mk_dimvec ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_var 1)),
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 1,
                       template_app (template_hole 0, template_var 0))),
                   template_var 1))),
             template_app (template_hole 8, template_var 1))
           ))),
    ("ISQ_Dimensions.mk_dimvec_eq_iff",
     "[| length ?x = CARD(?'d); length ?y = CARD(?'d) |]
      ==> (mk_dimvec ?x = mk_dimvec ?y) = (?x = ?y)",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_hole 4)),
        template_equation
         (template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("ISQ_Dimensions.times_mk_dimvec",
     "mk_dimvec ?xs \<cdot> mk_dimvec ?ys =
      (if length ?xs = CARD(?'a) & length ?ys = CARD(?'a)
       then mk_dimvec (map2 (+) ?xs ?ys)
       else if length ?xs = CARD(?'a) then mk_dimvec ?xs
            else mk_dimvec ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_app (template_hole 10, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_var 1)),
                       template_app (template_hole 5, template_hole 4))),
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 0)),
                     template_app (template_hole 5, template_hole 4)))),
               template_app
                (template_hole 10,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 2, t_empty)),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))),
             template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 7,
                       template_app (template_hole 6, template_var 1)),
                     template_app (template_hole 5, template_hole 4))),
                 template_app (template_hole 10, template_var 1)),
               template_app (template_hole 10, template_var 0)))
           ))),
    ("ISQ_Dimensions.divide_mk_dimvec",
     "mk_dimvec ?xs / mk_dimvec ?ys =
      (if length ?xs = CARD(?'a) & length ?ys = CARD(?'a)
       then mk_dimvec (map2 (-) ?xs ?ys)
       else if length ?ys = CARD(?'a) then mk_dimvec (map uminus ?ys)
            else mk_dimvec ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)),
              template_app (template_hole 12, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app (template_hole 8, template_var 1)),
                       template_app (template_hole 7, template_hole 6))),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_var 0)),
                     template_app (template_hole 7, template_hole 6)))),
               template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, t_empty)),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)))),
             template_app
              (template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app (template_hole 8, template_var 0)),
                     template_app (template_hole 7, template_hole 6))),
                 template_app
                  (template_hole 12,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 0))),
               template_app (template_hole 12, template_var 1)))
           )))]:
   (string * thm * template) list
### theory "Draft.ISQ_DimensionsMoreTemplates"
### 0.398s elapsed time, 0.561s cpu time, 0.057s GC time
val it = (): unit
