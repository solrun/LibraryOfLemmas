   [("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = 1",
     template_equation
      (template_app (template_hole 1, template_var 0), template_hole 0)),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>M",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>T",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>N",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>L",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>I",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>J",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?uu = \<^bold>\<Theta>",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app (template_hole 1, template_hole 0))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?x = inverse QD(?'a)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app (template_hole 1, template_hole 0)))),
    ("ISQ_Dimensions.si_eq", "dim_ty_sem ?x = QD(?'a) \<cdot> QD(?'b)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app (template_hole 3, template_hole 2)),
         template_app (template_hole 1, template_hole 0)))),
    ("ISQ_Dimensions.mk_BaseDim_code",
     "mk_BaseDim ?d =
      mk_dimvec ((replicate CARD(?'d) 0)[enum_ind ?d := 1])",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3)),
                 template_hole 2)),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("ISQ_Dimensions.inverse_mk_dimvec",
     "inverse (mk_dimvec ?xs) =
      (if length ?xs = CARD(?'a) then mk_dimvec (map uminus ?xs) else 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 0))
            )],
       template_dunno)),
    ("ISQ_Dimensions.power_mk_dimvec",
     "mk_dimvec ?xs ^ ?n =
      (if length ?xs = CARD(?'a)
       then mk_dimvec (map ((\<cdot>) (of_nat ?n)) ?xs)
       else mk_dimvec ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 8, template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("ISQ_Dimensions.times_mk_dimvec",
     "mk_dimvec ?xs \<cdot> mk_dimvec ?ys =
      (if length ?xs = CARD(?'a) & length ?ys = CARD(?'a)
       then mk_dimvec (map2 (+) ?xs ?ys)
       else if length ?xs = CARD(?'a) then mk_dimvec ?xs
            else mk_dimvec ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 1)),
              template_app (template_hole 10, template_var 0))
            )],
       template_dunno)),
    ("ISQ_Dimensions.divide_mk_dimvec",
     "mk_dimvec ?xs / mk_dimvec ?ys =
      (if length ?xs = CARD(?'a) & length ?ys = CARD(?'a)
       then mk_dimvec (map2 (-) ?xs ?ys)
       else if length ?ys = CARD(?'a) then mk_dimvec (map uminus ?ys)
            else mk_dimvec ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)),
              template_app (template_hole 12, template_var 0))
            )],
       template_dunno))]
