Loading theory "Draft.Graph" (required by "Draft.GraphGATemplates" via "Draft.GraphGA" via "Draft.GraphSpec")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.GraphGATemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.GraphGATemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.GraphGATemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.161s elapsed time, 0.643s cpu time, 0.045s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.GraphGATemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
locale valid_graph
  fixes G :: "('v, 'w) graph"
  assumes "valid_graph G"
### theory "HOL-Library.Set_Algebras"
### 0.311s elapsed time, 1.220s cpu time, 0.126s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.GraphGATemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.352s elapsed time, 1.378s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.GraphGATemplates" via "Draft.ExtrEqs")
locale valid_graph
  fixes G :: "('v, 'w) graph"
  assumes "valid_graph G"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd p))) <*mlex*> {}"
locale valid_mgraph
  fixes G :: "('v, 'w) graph"
  assumes "valid_mgraph G"
### theory "Draft.Graph"
### 0.587s elapsed time, 2.294s cpu time, 0.205s GC time
Loading theory "Draft.GraphSpec" (required by "Draft.GraphGATemplates" via "Draft.GraphGA")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.042s elapsed time, 3.873s cpu time, 0.988s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.164s elapsed time, 4.234s cpu time, 1.085s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.128s elapsed time, 6.585s cpu time, 1.279s GC time
Loading theory "Draft.Templates" (required by "Draft.GraphGATemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.096s elapsed time, 0.273s cpu time, 0.121s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GraphGATemplates")
locale graph
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
  assumes "graph \<alpha> invar"
locale graph_empty
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and empty :: "unit => 'G"
  assumes "graph_empty \<alpha> invar empty"
locale graph_add_node
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and add_node :: "'V => 'G => 'G"
  assumes "graph_add_node \<alpha> invar add_node"
locale graph_delete_node
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and delete_node :: "'V => 'G => 'G"
  assumes "graph_delete_node \<alpha> invar delete_node"
locale graph_add_edge
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and add_edge :: "'V => 'W => 'V => 'G => 'G"
  assumes "graph_add_edge \<alpha> invar add_edge"
locale graph_delete_edge
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and delete_edge :: "'V => 'W => 'V => 'G => 'G"
  assumes "graph_delete_edge \<alpha> invar delete_edge"
locale graph_nodes_it_defs
  fixes
    nodes_list_it ::
      "'G => ('V list => bool)
             => ('V => 'V list => 'V list) => 'V list => 'V list"
locale graph_nodes_it
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    nodes_list_it ::
      "'G => ('V list => bool)
             => ('V => 'V list => 'V list) => 'V list => 'V list"
  assumes "graph_nodes_it \<alpha> invar nodes_list_it"
locale graph_edges_it_defs
  fixes
    edges_list_it ::
      "'G => (('V * 'W * 'V) list => bool)
             => ('V * 'W * 'V => ('V * 'W * 'V) list => ('V * 'W * 'V) list)
                => ('V * 'W * 'V) list => ('V * 'W * 'V) list"
locale graph_edges_it
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    edges_list_it ::
      "'G => (('V * 'W * 'V) list => bool)
             => ('V * 'W * 'V => ('V * 'W * 'V) list => ('V * 'W * 'V) list)
                => ('V * 'W * 'V) list => ('V * 'W * 'V) list"
  assumes "graph_edges_it \<alpha> invar edges_list_it"
locale graph_succ_it_defs
  fixes
    succ_list_it ::
      "'G => 'V => (('W * 'V) list => bool)
                   => ('W * 'V => ('W * 'V) list => ('W * 'V) list)
                      => ('W * 'V) list => ('W * 'V) list"
locale graph_succ_it
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    succ_list_it ::
      "'G => 'V => (('W * 'V) list => bool)
                   => ('W * 'V => ('W * 'V) list => ('W * 'V) list)
                      => ('W * 'V) list => ('W * 'V) list"
  assumes "graph_succ_it \<alpha> invar succ_list_it"
locale graph_from_list
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and from_list :: "'V list * ('V * 'W * 'V) list => 'G"
  assumes "graph_from_list \<alpha> invar from_list"
locale graph_to_list
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and to_list :: "'G => 'V list * ('V * 'W * 'V) list"
  assumes "graph_to_list \<alpha> invar to_list"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.795s elapsed time, 1.965s cpu time, 0.894s GC time
locale StdGraphDefs
  fixes ops :: "('V, 'W, 'G, 'm) graph_ops_scheme"
locale StdGraph
  fixes ops :: "('a, 'b, 'c, 'd) graph_ops_scheme"
  assumes "StdGraph ops"
### theory "Draft.GraphSpec"
### 3.348s elapsed time, 8.086s cpu time, 2.296s GC time
Loading theory "Draft.GraphGA" (required by "Draft.GraphGATemplates")
"map_iterator_product"
  :: "(('a => bool) => ('b * 'c => 'a => 'a) => 'a => 'a)
      => ('c => ('a => bool) => ('d => 'a => 'a) => 'a => 'a)
         => ('a => bool) => ('b * 'd => 'a => 'a) => 'a => 'a"
locale gga_edges_it_defs
  fixes
    nodes_list_it ::
      "'G => ('V list => bool)
             => ('V => 'V list => 'V list) => 'V list => 'V list"
    and
    succ_list_it ::
      "'G => 'V => (('W * 'V) list => bool)
                   => ('W * 'V => ('W * 'V) list => ('W * 'V) list)
                      => ('W * 'V) list => ('W * 'V) list"
locale gga_edges_it
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    nodes_list_it ::
      "'G => ('V list => bool)
             => ('V => 'V list => 'V list) => 'V list => 'V list"
    and
    succ_list_it ::
      "'G => 'V => (('W * 'V) list => bool)
                   => ('W * 'V => ('W * 'V) list => ('W * 'V) list)
                      => ('W * 'V) list => ('W * 'V) list"
  assumes "gga_edges_it \<alpha> invar nodes_list_it succ_list_it"
locale gga_to_list_defs_loc
  fixes
    nodes_list_it ::
      "'G => ('V list => bool)
             => ('V => 'V list => 'V list) => 'V list => 'V list"
    and
    edges_list_it ::
      "'G => (('V * 'W * 'V) list => bool)
             => ('V * 'W * 'V => ('V * 'W * 'V) list => ('V * 'W * 'V) list)
                => ('V * 'W * 'V) list => ('V * 'W * 'V) list"
locale gga_to_list_loc
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    nodes_list_it ::
      "'G => ('V list => bool)
             => ('V => 'V list => 'V list) => 'V list => 'V list"
    and
    edges_list_it ::
      "'G => (('V * 'W * 'V) list => bool)
             => ('V * 'W * 'V => ('V * 'W * 'V) list => ('V * 'W * 'V) list)
                => ('V * 'W * 'V) list => ('V * 'W * 'V) list"
  assumes "gga_to_list_loc \<alpha> invar nodes_list_it edges_list_it"
### theory "Draft.GraphGA"
### 0.176s elapsed time, 0.223s cpu time, 0.066s GC time
Loading theory "Draft.GraphGATemplates"
val templateLemmas =
   [("GraphGA.gga_from_list_correct",
     "[| graph_empty ?\<alpha> ?invar ?e;
         graph_add_node ?\<alpha> ?invar ?a;
         graph_add_edge ?\<alpha> ?invar ?u |]
      ==> graph_from_list ?\<alpha> ?invar (gga_from_list ?e ?a ?u)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.GraphGATemplates"
### 1.730s elapsed time, 2.138s cpu time, 0.259s GC time
val it = (): unit
