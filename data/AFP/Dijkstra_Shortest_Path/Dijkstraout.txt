Loading theory "Draft.Graph" (required by "Draft.DijkstraTemplates" via "Draft.Dijkstra")
Loading theory "Draft.Dijkstra_Misc" (required by "Draft.DijkstraTemplates" via "Draft.Dijkstra")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DijkstraTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DijkstraTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
Proofs for inductive predicate(s) "least_mapp"
  Proving monotonicity ...
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.536s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DijkstraTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
class semilattice_inf = inf + order +
  assumes "inf_le1": "!!x y. inf x y <= x"
    and "inf_le2": "!!x y. inf x y <= y"
    and "inf_greatest": "!!x y z. [| x <= y; x <= z |] ==> x <= inf y z"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "Draft.Dijkstra_Misc"
### 0.178s elapsed time, 0.719s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.DijkstraTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
locale valid_graph
  fixes G :: "('v, 'w) graph"
  assumes "valid_graph G"
locale valid_graph
  fixes G :: "('v, 'w) graph"
  assumes "valid_graph G"
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.871s cpu time, 0.079s GC time
Loading theory "Draft.Weight" (required by "Draft.DijkstraTemplates" via "Draft.Dijkstra")
### theory "HOL-Library.Nat_Bijection"
### 0.364s elapsed time, 1.436s cpu time, 0.121s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DijkstraTemplates" via "Draft.ExtrEqs")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd p))) <*mlex*> {}"
locale valid_mgraph
  fixes G :: "('v, 'w) graph"
  assumes "valid_mgraph G"
### theory "Draft.Graph"
### 0.604s elapsed time, 2.346s cpu time, 0.276s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DijkstraTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.092s elapsed time, 4.079s cpu time, 0.834s GC time
"top"
  :: "'a"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.034s elapsed time, 3.762s cpu time, 0.758s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class top_weight = order_top + weight +
  assumes "inf_add_right": "!!a. a + top = top"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Infty"
consts
  val :: "'a infty => 'a"
instantiation
  infty :: (weight) top_weight
  zero_infty == zero_class.zero :: 'a infty
  plus_infty == plus :: 'a infty => 'a infty => 'a infty
  top_infty == top :: 'a infty
  less_eq_infty == less_eq :: 'a infty => 'a infty => bool
  less_infty == less :: 'a infty => 'a infty => bool
### theory "HOL-Library.Tree"
### 2.109s elapsed time, 6.759s cpu time, 1.153s GC time
Loading theory "Draft.Templates" (required by "Draft.DijkstraTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.060s elapsed time, 0.146s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DijkstraTemplates")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Weight"
### 2.108s elapsed time, 6.475s cpu time, 1.131s GC time
Loading theory "Draft.Dijkstra" (required by "Draft.DijkstraTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.566s elapsed time, 1.193s cpu time, 0.144s GC time
locale weighted_graph
  fixes G :: "('V, 'W) graph"
  assumes "weighted_graph G"
locale weighted_graph
  fixes G :: "('V, 'W) graph"
  assumes "weighted_graph G"
Found termination order: "{}"
locale Dijkstra
  fixes G :: "('V, 'W) graph"
    and v0 :: "'V"
  assumes "Dijkstra G v0"
Proofs for inductive predicate(s) "update_spec"
  Proving monotonicity ...
[| trimono ?body; ?pre ?x;
   !!f x.
      [| !!x. ?pre x ==> f x <= SPEC (?post x); ?pre x |]
      ==> ?body f x <= SPEC (?post x);
   !!r. ?post ?x r ==> ?\<Phi> r |]
==> REC_annot ?pre ?post ?body ?x <= SPEC ?\<Phi>
[| finite ?S\<^sub>0; ?I {} ?S\<^sub>0 ?\<sigma>\<^sub>0;
   !!S1 S2 x \<sigma>.
      [| ?S\<^sub>0 = insert x (S1 Un S2); ?I S1 (insert x S2) \<sigma>;
         ?c \<sigma> |]
      ==> ?f x \<sigma> <= SPEC (?I (insert x S1) S2);
   !!S1 S2 \<sigma>.
      [| ?S\<^sub>0 = S1 Un S2; ?I S1 S2 \<sigma>; ~ ?c \<sigma> |]
      ==> ?\<Phi> \<sigma>;
   !!\<sigma>.
      [| ?I ?S\<^sub>0 {} \<sigma>; ?c \<sigma> |] ==> ?\<Phi> \<sigma> |]
==> FOREACHcdi ?I ?S\<^sub>0 ?c ?f ?\<sigma>\<^sub>0 <= SPEC ?\<Phi>
[| finite ?S; ?I ?S ?\<sigma>0.0;
   !!x it \<sigma>.
      [| x : it; it <= ?S; ?I it \<sigma>; ?c \<sigma> |]
      ==> ?f x \<sigma> <= SPEC (?I (it - {x}));
   !!\<sigma>. [| ?I {} \<sigma>; ?c \<sigma> |] ==> ?P \<sigma>;
   !!it \<sigma>.
      [| it <= ?S; ?I it \<sigma>; ~ ?c \<sigma> |] ==> ?P \<sigma> |]
==> FOREACH\<^sub>C\<^bsup>?I\<^esup> ?S ?c ?f ?\<sigma>0.0 <= SPEC ?P
[| finite ?S; ?I ?S ?\<sigma>0.0;
   !!x it \<sigma>.
      [| x : it; it <= ?S; ?I it \<sigma> |]
      ==> ?f x \<sigma> <= SPEC (?I (it - {x}));
   !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
==> FOREACH\<^bsup>?I\<^esup> ?S ?f ?\<sigma>0.0 <= SPEC ?P
[| finite ?S; ?I ?S ?\<sigma>0.0;
   !!x it \<sigma>.
      [| x : it; it <= ?S; ?I it \<sigma>; ?c \<sigma> |]
      ==> ?f x \<sigma> <= SPEC (?I (it - {x}));
   !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
   !!it \<sigma>.
      [| it ~= {}; it <= ?S; ?I it \<sigma>; ~ ?c \<sigma> |]
      ==> ?P \<sigma> |]
==> FOREACH\<^sub>C\<^bsup>?I\<^esup> ?S ?c ?f ?\<sigma>0.0 <= SPEC ?P
[| finite ?S; ?I ?S ?\<sigma>0.0;
   !!x it \<sigma>.
      [| x : it; it <= ?S; ?I it \<sigma>; ALL y:it - {x}. ?R x y;
         ALL y:?S - it. ?R y x |]
      ==> ?f x \<sigma> <= SPEC (?I (it - {x}));
   !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
==> FOREACH\<^sub>O\<^bsup>?R,?I\<^esup> ?S ?f ?\<sigma>0.0 <= SPEC ?P
[| finite ?S; ?I ?S ?\<sigma>0.0;
   !!x it \<sigma>.
      [| ?c \<sigma>; x : it; it <= ?S; ?I it \<sigma>;
         ALL y:it - {x}. ?R x y; ALL y:?S - it. ?R y x |]
      ==> ?f x \<sigma> <= SPEC (?I (it - {x}));
   !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
   !!it \<sigma>.
      [| it ~= {}; it <= ?S; ?I it \<sigma>; ~ ?c \<sigma>;
         ALL x:it. ALL y:?S - it. ?R y x |]
      ==> ?P \<sigma> |]
==> FOREACH\<^sub>O\<^sub>C\<^bsup>?R,?I\<^esup> ?S ?c ?f ?\<sigma>0.0
    <= SPEC ?P
[| wf ?R; ?I ?s;
   !!s. [| ?I s; ?b s |] ==> ?f s <= SPEC (%s'. ?I s' & (s', s) : ?R);
   !!s. [| ?I s; ~ ?b s |] ==> ?\<Phi> s |]
==> WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?f ?s <= SPEC ?\<Phi>
[| ?I ?s; !!s. [| ?I s; ?b s |] ==> ?f s <= SPEC ?I;
   !!s. [| ?I s; ~ ?b s |] ==> ?\<Phi> s |]
==> WHILE\<^bsup>?I\<^esup> ?b ?f ?s <= SPEC ?\<Phi>
[| !!x. ?P x ==> ?Q (Some x); ALL x. ~ ?P x ==> ?Q None |]
==> SELECT ?P <= SPEC ?Q
[| EX x. ?P x; !!x. ?P x ==> ?Q x |] ==> OBTAIN ?P <= SPEC ?Q
(?\<Phi> ==> ?\<Psi> ()) ==> ASSUME ?\<Phi> \<le>\<^sub>n SPEC ?\<Psi>
(?\<Phi> ==> ?m \<le>\<^sub>n ?m') ==>
?m \<le>\<^sub>n ASSERT ?\<Phi> >>= (%_. ?m')
(?\<Phi> ==> ?m \<le>\<^sub>n ?m') ==>
ASSERT ?\<Phi> >>= (%_. ?m) \<le>\<^sub>n ?m'
[| ?v = None ==> ?S1.0 \<le>\<^sub>n SPEC ?\<Phi>;
   !!x. ?v = Some x ==> ?f2.0 x \<le>\<^sub>n SPEC ?\<Phi> |]
==> (case ?v of None => ?S1.0 | Some x => ?f2.0 x) \<le>\<^sub>n
    SPEC ?\<Phi>
[| [| nofail ?a; nofail ?b |] ==> ?a \<le>\<^sub>n ?m;
   [| nofail ?a; nofail ?b |] ==> ?b \<le>\<^sub>n ?m |]
==> sup ?a ?b \<le>\<^sub>n ?m
(!!x. x : ?X ==> ?\<Phi> x) ==> RES ?X \<le>\<^sub>n SPEC ?\<Phi>
(!!x. ?\<Psi> x ==> ?\<Phi> x) ==> SPEC ?\<Psi> \<le>\<^sub>n SPEC ?\<Phi>
[| ?c ==> ?t \<le>\<^sub>n SPEC ?\<Phi>;
   ~ ?c ==> ?e \<le>\<^sub>n SPEC ?\<Phi> |]
==> (if ?c then ?t else ?e) \<le>\<^sub>n SPEC ?\<Phi>
?f ?x \<le>\<^sub>n SPEC ?\<Phi> ==> Let ?x ?f \<le>\<^sub>n SPEC ?\<Phi>
?m \<le>\<^sub>n SPEC (%x. ?f x \<le>\<^sub>n SPEC ?\<Phi>) ==>
?m >>= ?f \<le>\<^sub>n SPEC ?\<Phi>
?\<Phi> ?m ==> RETURN ?m \<le>\<^sub>n SPEC ?\<Phi>
?f ?x <= SPEC ?\<Phi> ==> Let ?x ?f <= SPEC ?\<Phi>
[| ?v = None ==> ?S1.0 <= SPEC ?\<Phi>;
   !!x. ?v = Some x ==> ?f2.0 x <= SPEC ?\<Phi> |]
==> (case ?v of None => ?S1.0 | Some x => ?f2.0 x) <= SPEC ?\<Phi>
[| ?b ==> ?S1.0 <= SPEC ?\<Phi>; ~ ?b ==> ?S2.0 <= SPEC ?\<Phi> |]
==> (if ?b then ?S1.0 else ?S2.0) <= SPEC ?\<Phi>
(!!a b c d.
    [| ?ab = (a, b); ?cd = (c, d) |] ==> ?f a b c d <= SPEC ?\<Phi>) ==>
(case ?ab of (a, b) => %(c, d). ?f a b c d) ?cd <= SPEC ?\<Phi>
(!!a b. ?p = (a, b) ==> ?S a b <= SPEC ?\<Phi>) ==>
(case ?p of (x, xa) => ?S x xa) <= SPEC ?\<Phi>
[| ?\<Phi>; ?\<Phi> ==> ?\<Psi> () |] ==> ASSERT ?\<Phi> <= SPEC ?\<Psi>
(?\<Phi> ==> ?\<Psi> ()) ==> ASSUME ?\<Phi> <= SPEC ?\<Psi>
?M <= SPEC (%x. ?f x <= SPEC ?\<Phi>) ==> ?M >>= ?f <= SPEC ?\<Phi>
(!!x. x : ?S ==> ?f x <= SPEC ?\<Phi>) ==> Sup (?f ` ?S) <= SPEC ?\<Phi>
?m <= SPEC ((=) ?v) ==> ?m <= RETURN ?v
(!!x. ?\<Phi> x ==> ?\<Phi>' x) ==> SPEC ?\<Phi> <= SPEC ?\<Phi>'
SUCCEED <= SPEC ?\<Phi>
(!!x. x : ?S ==> ?\<Phi> x) ==> RES ?S <= SPEC ?\<Phi>
?\<Phi> ?x ==> RETURN ?x <= SPEC ?\<Phi>
?m <= SPEC (%_. True) ==> ?m <= RES UNIV
(?\<Phi> ==> ?M <= ?M') ==> ASSUME ?\<Phi> >>= (%_. ?M) <= ?M'
(?\<Phi> ==> ?M <= ?M') ==> ?M <= ASSERT ?\<Phi> >>= (%_. ?M')
[| ?\<Phi>; ?\<Phi> ==> ?M <= ?M' |] ==> ?M <= ASSUME ?\<Phi> >>= (%_. ?M')
[| ?\<Phi>; ?\<Phi> ==> ?M <= ?M' |] ==> ASSERT ?\<Phi> >>= (%_. ?M) <= ?M'
Found termination order: "{}"
Found termination order: "{}"
locale Dijkstra
  fixes G :: "('V, 'W) graph"
    and v0 :: "'V"
  assumes "Dijkstra G v0"
### theory "Draft.Dijkstra"
### 3.157s elapsed time, 4.414s cpu time, 1.041s GC time
Loading theory "Draft.DijkstraTemplates"
val templateLemmas =
   [("Dijkstra_Misc.least_map_empty", "least_map ?f {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Dijkstra_Misc.least_map_subset", "least_map ?f ?S <= ?S",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_var 0)),
    ("Dijkstra_Misc.least_map_singleton", "least_map ?f {?x} = {?x}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Dijkstra_Misc.least_map_elemD", "?c : least_map ?f ?B ==> ?c : ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Dijkstra_Misc.least_mapp_least_map_eq",
     "least_mapp ?f (%x. x : ?S) = (%x. x : least_map ?f ?S)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), t_empty),
       t_empty)),
    ("Dijkstra_Misc.least_map_insert_min",
     "ALL y:?S. ?f ?x <= ?f y ==> ?x : least_map ?f (insert ?x ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("Dijkstra_Misc.least_map_leD",
     "[| ?x : least_map ?f ?S; ?y : ?S |] ==> ?f ?x <= ?f ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_app (template_var 2, template_var 3),
         template_app (template_var 2, template_var 0)))),
    ("Dijkstra_Misc.least_map_insert_nmin",
     "[| ?x : least_map ?f ?S; ?f ?x <= ?f ?a |]
      ==> ?x : least_map ?f (insert ?a ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_var 2, template_var 3),
          template_app (template_var 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           )))]:
   (string * thm * template) list
### theory "Draft.DijkstraTemplates"
### 2.206s elapsed time, 3.239s cpu time, 1.098s GC time
val it = (): unit
