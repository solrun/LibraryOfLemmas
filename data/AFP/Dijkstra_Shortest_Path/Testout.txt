Loading theory "Draft.Dijkstra_Misc" (required by "Draft.TestTemplates" via "Draft.Test" via "Draft.Dijkstra_Impl_Adet" via "Draft.Dijkstra")
Loading theory "Draft.Graph" (required by "Draft.TestTemplates" via "Draft.Test" via "Draft.Dijkstra_Impl_Adet" via "Draft.Dijkstra")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.TestTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.TestTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
Proofs for inductive predicate(s) "least_mapp"
  Proving monotonicity ...
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class semilattice_inf = inf + order +
  assumes "inf_le1": "!!x y. inf x y <= x"
    and "inf_le2": "!!x y. inf x y <= y"
    and "inf_greatest": "!!x y z. [| x <= y; x <= z |] ==> x <= inf y z"
### theory "Draft.Dijkstra_Misc"
### 0.153s elapsed time, 0.623s cpu time, 0.041s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.TestTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Function_Algebras"
### 0.162s elapsed time, 0.655s cpu time, 0.041s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.TestTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
locale valid_graph
  fixes G :: "('v, 'w) graph"
  assumes "valid_graph G"
### theory "HOL-Library.Nat_Bijection"
### 0.356s elapsed time, 1.400s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.TestTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.871s cpu time, 0.083s GC time
Loading theory "Draft.Weight" (required by "Draft.TestTemplates" via "Draft.Test" via "Draft.Dijkstra_Impl_Adet" via "Draft.Dijkstra")
locale valid_graph
  fixes G :: "('v, 'w) graph"
  assumes "valid_graph G"
Found termination order:
  "(%p. size_list (%p. size (snd p)) (fst (snd p))) <*mlex*> {}"
locale valid_mgraph
  fixes G :: "('v, 'w) graph"
  assumes "valid_mgraph G"
### theory "Draft.Graph"
### 0.645s elapsed time, 2.516s cpu time, 0.273s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.TestTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.025s elapsed time, 3.830s cpu time, 0.814s GC time
Loading theory "Draft.GraphSpec" (required by "Draft.TestTemplates" via "Draft.Test" via "Draft.Dijkstra_Impl_Adet")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.962s elapsed time, 3.580s cpu time, 0.797s GC time
"top"
  :: "'a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class top_weight = order_top + weight +
  assumes "inf_add_right": "!!a. a + top = top"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### No equation for constructor "Infty"
consts
  val :: "'a infty => 'a"
instantiation
  infty :: (weight) top_weight
  zero_infty == zero_class.zero :: 'a infty
  plus_infty == plus :: 'a infty => 'a infty => 'a infty
  top_infty == top :: 'a infty
  less_eq_infty == less_eq :: 'a infty => 'a infty => bool
  less_infty == less :: 'a infty => 'a infty => bool
### theory "HOL-Library.Tree"
### 2.069s elapsed time, 7.359s cpu time, 1.198s GC time
Loading theory "Draft.Templates" (required by "Draft.TestTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.082s elapsed time, 0.268s cpu time, 0.059s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.TestTemplates")
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Weight"
### 2.056s elapsed time, 7.160s cpu time, 1.174s GC time
Loading theory "Draft.Dijkstra" (required by "Draft.TestTemplates" via "Draft.Test" via "Draft.Dijkstra_Impl_Adet")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.580s elapsed time, 1.762s cpu time, 0.163s GC time
locale graph
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
  assumes "graph \<alpha> invar"
locale graph_empty
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and empty :: "unit => 'G"
  assumes "graph_empty \<alpha> invar empty"
locale graph_add_node
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and add_node :: "'V => 'G => 'G"
  assumes "graph_add_node \<alpha> invar add_node"
locale graph_delete_node
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and delete_node :: "'V => 'G => 'G"
  assumes "graph_delete_node \<alpha> invar delete_node"
locale graph_add_edge
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and add_edge :: "'V => 'W => 'V => 'G => 'G"
  assumes "graph_add_edge \<alpha> invar add_edge"
locale graph_delete_edge
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and delete_edge :: "'V => 'W => 'V => 'G => 'G"
  assumes "graph_delete_edge \<alpha> invar delete_edge"
locale graph_nodes_it_defs
  fixes
    nodes_list_it ::
      "'G => ('V list => bool)
             => ('V => 'V list => 'V list) => 'V list => 'V list"
locale graph_nodes_it
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    nodes_list_it ::
      "'G => ('V list => bool)
             => ('V => 'V list => 'V list) => 'V list => 'V list"
  assumes "graph_nodes_it \<alpha> invar nodes_list_it"
locale graph_edges_it_defs
  fixes
    edges_list_it ::
      "'G => (('V * 'W * 'V) list => bool)
             => ('V * 'W * 'V => ('V * 'W * 'V) list => ('V * 'W * 'V) list)
                => ('V * 'W * 'V) list => ('V * 'W * 'V) list"
locale graph_edges_it
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    edges_list_it ::
      "'G => (('V * 'W * 'V) list => bool)
             => ('V * 'W * 'V => ('V * 'W * 'V) list => ('V * 'W * 'V) list)
                => ('V * 'W * 'V) list => ('V * 'W * 'V) list"
  assumes "graph_edges_it \<alpha> invar edges_list_it"
locale graph_succ_it_defs
  fixes
    succ_list_it ::
      "'G => 'V => (('W * 'V) list => bool)
                   => ('W * 'V => ('W * 'V) list => ('W * 'V) list)
                      => ('W * 'V) list => ('W * 'V) list"
locale graph_succ_it
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    succ_list_it ::
      "'G => 'V => (('W * 'V) list => bool)
                   => ('W * 'V => ('W * 'V) list => ('W * 'V) list)
                      => ('W * 'V) list => ('W * 'V) list"
  assumes "graph_succ_it \<alpha> invar succ_list_it"
locale graph_from_list
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and from_list :: "'V list * ('V * 'W * 'V) list => 'G"
  assumes "graph_from_list \<alpha> invar from_list"
locale graph_to_list
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and to_list :: "'G => 'V list * ('V * 'W * 'V) list"
  assumes "graph_to_list \<alpha> invar to_list"
locale StdGraphDefs
  fixes ops :: "('V, 'W, 'G, 'm) graph_ops_scheme"
locale StdGraph
  fixes ops :: "('a, 'b, 'c, 'd) graph_ops_scheme"
  assumes "StdGraph ops"
### theory "Draft.GraphSpec"
### 3.207s elapsed time, 8.802s cpu time, 1.898s GC time
Loading theory "Draft.GraphGA" (required by "Draft.TestTemplates" via "Draft.Test" via "Draft.Dijkstra_Impl_Adet" via "Draft.HashGraphImpl" via "Draft.GraphByMap")
"map_iterator_product"
  :: "(('a => bool) => ('b * 'c => 'a => 'a) => 'a => 'a)
      => ('c => ('a => bool) => ('d => 'a => 'a) => 'a => 'a)
         => ('a => bool) => ('b * 'd => 'a => 'a) => 'a => 'a"
locale gga_edges_it_defs
  fixes
    nodes_list_it ::
      "'G => ('V list => bool)
             => ('V => 'V list => 'V list) => 'V list => 'V list"
    and
    succ_list_it ::
      "'G => 'V => (('W * 'V) list => bool)
                   => ('W * 'V => ('W * 'V) list => ('W * 'V) list)
                      => ('W * 'V) list => ('W * 'V) list"
locale gga_edges_it
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    nodes_list_it ::
      "'G => ('V list => bool)
             => ('V => 'V list => 'V list) => 'V list => 'V list"
    and
    succ_list_it ::
      "'G => 'V => (('W * 'V) list => bool)
                   => ('W * 'V => ('W * 'V) list => ('W * 'V) list)
                      => ('W * 'V) list => ('W * 'V) list"
  assumes "gga_edges_it \<alpha> invar nodes_list_it succ_list_it"
locale gga_to_list_defs_loc
  fixes
    nodes_list_it ::
      "'G => ('V list => bool)
             => ('V => 'V list => 'V list) => 'V list => 'V list"
    and
    edges_list_it ::
      "'G => (('V * 'W * 'V) list => bool)
             => ('V * 'W * 'V => ('V * 'W * 'V) list => ('V * 'W * 'V) list)
                => ('V * 'W * 'V) list => ('V * 'W * 'V) list"
locale gga_to_list_loc
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
    and
    nodes_list_it ::
      "'G => ('V list => bool)
             => ('V => 'V list => 'V list) => 'V list => 'V list"
    and
    edges_list_it ::
      "'G => (('V * 'W * 'V) list => bool)
             => ('V * 'W * 'V => ('V * 'W * 'V) list => ('V * 'W * 'V) list)
                => ('V * 'W * 'V) list => ('V * 'W * 'V) list"
  assumes "gga_to_list_loc \<alpha> invar nodes_list_it edges_list_it"
### theory "Draft.GraphGA"
### 0.179s elapsed time, 0.361s cpu time, 0.000s GC time
Loading theory "Draft.GraphByMap" (required by "Draft.TestTemplates" via "Draft.Test" via "Draft.Dijkstra_Impl_Adet" via "Draft.HashGraphImpl")
locale GraphByMapDefs
  fixes m1_ops :: "('V, 'm2, 'm1, 'a) map_ops_scheme"
    and m2_ops :: "('V, 's3, 'm2, 'b) map_ops_scheme"
    and s3_ops :: "('W, 's3, 'c) set_ops_scheme"
    and m1_mvif :: "('V => 'm2 => 'm2 option) => 'm1 => 'm1"
locale weighted_graph
  fixes G :: "('V, 'W) graph"
  assumes "weighted_graph G"
locale weighted_graph
  fixes G :: "('V, 'W) graph"
  assumes "weighted_graph G"
locale GraphByMapDefs
  fixes m1_ops :: "('V, 'm2, 'm1, 'a) map_ops_scheme"
    and m2_ops :: "('V, 's3, 'm2, 'b) map_ops_scheme"
    and s3_ops :: "('W, 's3, 'c) set_ops_scheme"
    and m1_mvif :: "('V => 'm2 => 'm2 option) => 'm1 => 'm1"
Found termination order: "{}"
locale Dijkstra
  fixes G :: "('V, 'W) graph"
    and v0 :: "'V"
  assumes "Dijkstra G v0"
Proofs for inductive predicate(s) "update_spec"
  Proving monotonicity ...
locale GraphByMap
  fixes m1_ops :: "('V, 'm2, 'm1, 'a) map_ops_scheme"
    and m2_ops :: "('V, 's3, 'm2, 'b) map_ops_scheme"
    and s3_ops :: "('W, 's3, 'c) set_ops_scheme"
    and m1_mvif :: "('V => 'm2 => 'm2 option) => 'm1 => 'm1"
  assumes "GraphByMap m1_ops m2_ops s3_ops m1_mvif"
[| trimono ?body; ?pre ?x;
   !!f x.
      [| !!x. ?pre x ==> f x <= SPEC (?post x); ?pre x |]
      ==> ?body f x <= SPEC (?post x);
   !!r. ?post ?x r ==> ?\<Phi> r |]
==> REC_annot ?pre ?post ?body ?x <= SPEC ?\<Phi>
[| finite ?S\<^sub>0; ?I {} ?S\<^sub>0 ?\<sigma>\<^sub>0;
   !!S1 S2 x \<sigma>.
      [| ?S\<^sub>0 = insert x (S1 Un S2); ?I S1 (insert x S2) \<sigma>;
         ?c \<sigma> |]
      ==> ?f x \<sigma> <= SPEC (?I (insert x S1) S2);
   !!S1 S2 \<sigma>.
      [| ?S\<^sub>0 = S1 Un S2; ?I S1 S2 \<sigma>; ~ ?c \<sigma> |]
      ==> ?\<Phi> \<sigma>;
   !!\<sigma>.
      [| ?I ?S\<^sub>0 {} \<sigma>; ?c \<sigma> |] ==> ?\<Phi> \<sigma> |]
==> FOREACHcdi ?I ?S\<^sub>0 ?c ?f ?\<sigma>\<^sub>0 <= SPEC ?\<Phi>
[| finite ?S; ?I ?S ?\<sigma>0.0;
   !!x it \<sigma>.
      [| x : it; it <= ?S; ?I it \<sigma>; ?c \<sigma> |]
      ==> ?f x \<sigma> <= SPEC (?I (it - {x}));
   !!\<sigma>. [| ?I {} \<sigma>; ?c \<sigma> |] ==> ?P \<sigma>;
   !!it \<sigma>.
      [| it <= ?S; ?I it \<sigma>; ~ ?c \<sigma> |] ==> ?P \<sigma> |]
==> FOREACH\<^sub>C\<^bsup>?I\<^esup> ?S ?c ?f ?\<sigma>0.0 <= SPEC ?P
[| finite ?S; ?I ?S ?\<sigma>0.0;
   !!x it \<sigma>.
      [| x : it; it <= ?S; ?I it \<sigma> |]
      ==> ?f x \<sigma> <= SPEC (?I (it - {x}));
   !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
==> FOREACH\<^bsup>?I\<^esup> ?S ?f ?\<sigma>0.0 <= SPEC ?P
[| finite ?S; ?I ?S ?\<sigma>0.0;
   !!x it \<sigma>.
      [| x : it; it <= ?S; ?I it \<sigma>; ?c \<sigma> |]
      ==> ?f x \<sigma> <= SPEC (?I (it - {x}));
   !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
   !!it \<sigma>.
      [| it ~= {}; it <= ?S; ?I it \<sigma>; ~ ?c \<sigma> |]
      ==> ?P \<sigma> |]
==> FOREACH\<^sub>C\<^bsup>?I\<^esup> ?S ?c ?f ?\<sigma>0.0 <= SPEC ?P
[| finite ?S; ?I ?S ?\<sigma>0.0;
   !!x it \<sigma>.
      [| x : it; it <= ?S; ?I it \<sigma>; ALL y:it - {x}. ?R x y;
         ALL y:?S - it. ?R y x |]
      ==> ?f x \<sigma> <= SPEC (?I (it - {x}));
   !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
==> FOREACH\<^sub>O\<^bsup>?R,?I\<^esup> ?S ?f ?\<sigma>0.0 <= SPEC ?P
[| finite ?S; ?I ?S ?\<sigma>0.0;
   !!x it \<sigma>.
      [| ?c \<sigma>; x : it; it <= ?S; ?I it \<sigma>;
         ALL y:it - {x}. ?R x y; ALL y:?S - it. ?R y x |]
      ==> ?f x \<sigma> <= SPEC (?I (it - {x}));
   !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
   !!it \<sigma>.
      [| it ~= {}; it <= ?S; ?I it \<sigma>; ~ ?c \<sigma>;
         ALL x:it. ALL y:?S - it. ?R y x |]
      ==> ?P \<sigma> |]
==> FOREACH\<^sub>O\<^sub>C\<^bsup>?R,?I\<^esup> ?S ?c ?f ?\<sigma>0.0
    <= SPEC ?P
[| wf ?R; ?I ?s;
   !!s. [| ?I s; ?b s |] ==> ?f s <= SPEC (%s'. ?I s' & (s', s) : ?R);
   !!s. [| ?I s; ~ ?b s |] ==> ?\<Phi> s |]
==> WHILE\<^sub>T\<^bsup>?I\<^esup> ?b ?f ?s <= SPEC ?\<Phi>
[| ?I ?s; !!s. [| ?I s; ?b s |] ==> ?f s <= SPEC ?I;
   !!s. [| ?I s; ~ ?b s |] ==> ?\<Phi> s |]
==> WHILE\<^bsup>?I\<^esup> ?b ?f ?s <= SPEC ?\<Phi>
[| !!x. ?P x ==> ?Q (Some x); ALL x. ~ ?P x ==> ?Q None |]
==> SELECT ?P <= SPEC ?Q
[| EX x. ?P x; !!x. ?P x ==> ?Q x |] ==> OBTAIN ?P <= SPEC ?Q
(?\<Phi> ==> ?\<Psi> ()) ==> ASSUME ?\<Phi> \<le>\<^sub>n SPEC ?\<Psi>
(?\<Phi> ==> ?m \<le>\<^sub>n ?m') ==>
?m \<le>\<^sub>n ASSERT ?\<Phi> >>= (%_. ?m')
(?\<Phi> ==> ?m \<le>\<^sub>n ?m') ==>
ASSERT ?\<Phi> >>= (%_. ?m) \<le>\<^sub>n ?m'
[| ?v = None ==> ?S1.0 \<le>\<^sub>n SPEC ?\<Phi>;
   !!x. ?v = Some x ==> ?f2.0 x \<le>\<^sub>n SPEC ?\<Phi> |]
==> (case ?v of None => ?S1.0 | Some x => ?f2.0 x) \<le>\<^sub>n
    SPEC ?\<Phi>
[| [| nofail ?a; nofail ?b |] ==> ?a \<le>\<^sub>n ?m;
   [| nofail ?a; nofail ?b |] ==> ?b \<le>\<^sub>n ?m |]
==> sup ?a ?b \<le>\<^sub>n ?m
(!!x. x : ?X ==> ?\<Phi> x) ==> RES ?X \<le>\<^sub>n SPEC ?\<Phi>
(!!x. ?\<Psi> x ==> ?\<Phi> x) ==> SPEC ?\<Psi> \<le>\<^sub>n SPEC ?\<Phi>
[| ?c ==> ?t \<le>\<^sub>n SPEC ?\<Phi>;
   ~ ?c ==> ?e \<le>\<^sub>n SPEC ?\<Phi> |]
==> (if ?c then ?t else ?e) \<le>\<^sub>n SPEC ?\<Phi>
?f ?x \<le>\<^sub>n SPEC ?\<Phi> ==> Let ?x ?f \<le>\<^sub>n SPEC ?\<Phi>
?m \<le>\<^sub>n SPEC (%x. ?f x \<le>\<^sub>n SPEC ?\<Phi>) ==>
?m >>= ?f \<le>\<^sub>n SPEC ?\<Phi>
?\<Phi> ?m ==> RETURN ?m \<le>\<^sub>n SPEC ?\<Phi>
?f ?x <= SPEC ?\<Phi> ==> Let ?x ?f <= SPEC ?\<Phi>
[| ?v = None ==> ?S1.0 <= SPEC ?\<Phi>;
   !!x. ?v = Some x ==> ?f2.0 x <= SPEC ?\<Phi> |]
==> (case ?v of None => ?S1.0 | Some x => ?f2.0 x) <= SPEC ?\<Phi>
[| ?b ==> ?S1.0 <= SPEC ?\<Phi>; ~ ?b ==> ?S2.0 <= SPEC ?\<Phi> |]
==> (if ?b then ?S1.0 else ?S2.0) <= SPEC ?\<Phi>
(!!a b c d.
    [| ?ab = (a, b); ?cd = (c, d) |] ==> ?f a b c d <= SPEC ?\<Phi>) ==>
(case ?ab of (a, b) => %(c, d). ?f a b c d) ?cd <= SPEC ?\<Phi>
(!!a b. ?p = (a, b) ==> ?S a b <= SPEC ?\<Phi>) ==>
(case ?p of (x, xa) => ?S x xa) <= SPEC ?\<Phi>
[| ?\<Phi>; ?\<Phi> ==> ?\<Psi> () |] ==> ASSERT ?\<Phi> <= SPEC ?\<Psi>
(?\<Phi> ==> ?\<Psi> ()) ==> ASSUME ?\<Phi> <= SPEC ?\<Psi>
?M <= SPEC (%x. ?f x <= SPEC ?\<Phi>) ==> ?M >>= ?f <= SPEC ?\<Phi>
(!!x. x : ?S ==> ?f x <= SPEC ?\<Phi>) ==> Sup (?f ` ?S) <= SPEC ?\<Phi>
?m <= SPEC ((=) ?v) ==> ?m <= RETURN ?v
(!!x. ?\<Phi> x ==> ?\<Phi>' x) ==> SPEC ?\<Phi> <= SPEC ?\<Phi>'
SUCCEED <= SPEC ?\<Phi>
(!!x. x : ?S ==> ?\<Phi> x) ==> RES ?S <= SPEC ?\<Phi>
?\<Phi> ?x ==> RETURN ?x <= SPEC ?\<Phi>
?m <= SPEC (%_. True) ==> ?m <= RES UNIV
(?\<Phi> ==> ?M <= ?M') ==> ASSUME ?\<Phi> >>= (%_. ?M) <= ?M'
(?\<Phi> ==> ?M <= ?M') ==> ?M <= ASSERT ?\<Phi> >>= (%_. ?M')
[| ?\<Phi>; ?\<Phi> ==> ?M <= ?M' |] ==> ?M <= ASSUME ?\<Phi> >>= (%_. ?M')
[| ?\<Phi>; ?\<Phi> ==> ?M <= ?M' |] ==> ASSERT ?\<Phi> >>= (%_. ?M) <= ?M'
locale GraphByMap
  fixes m1_ops :: "('V, 'm2, 'm1, 'a) map_ops_scheme"
    and m2_ops :: "('V, 's3, 'm2, 'b) map_ops_scheme"
    and s3_ops :: "('W, 's3, 'c) set_ops_scheme"
    and m1_mvif :: "('V => 'm2 => 'm2 option) => 'm1 => 'm1"
  assumes "GraphByMap m1_ops m2_ops s3_ops m1_mvif"
Found termination order: "{}"
Found termination order: "{}"
locale Dijkstra
  fixes G :: "('V, 'W) graph"
    and v0 :: "'V"
  assumes "Dijkstra G v0"
### theory "Draft.Dijkstra"
### 4.161s elapsed time, 10.129s cpu time, 3.011s GC time
locale GraphByMap
  fixes m1_ops :: "('V, 'm2, 'm1, 'a) map_ops_scheme"
    and m2_ops :: "('V, 's3, 'm2, 'b) map_ops_scheme"
    and s3_ops :: "('W, 's3, 'c) set_ops_scheme"
    and m1_mvif :: "('V => 'm2 => 'm2 option) => 'm1 => 'm1"
  assumes "GraphByMap m1_ops m2_ops s3_ops m1_mvif"
### theory "Draft.GraphByMap"
### 1.844s elapsed time, 4.390s cpu time, 1.473s GC time
Loading theory "Draft.HashGraphImpl" (required by "Draft.TestTemplates" via "Draft.Test" via "Draft.Dijkstra_Impl_Adet")
map_iterator_dom ?it = set_iterator_image fst ?it
set_iterator_image ?g == set_iterator_image_filter (%x. Some (?g x))
set_iterator_image_filter ?g ?it ==
%c f. ?it c
       (%x \<sigma>.
           case ?g x of None => \<sigma> | Some x' => f x' \<sigma>)
See theory exports
### theory "Draft.HashGraphImpl"
### 1.516s elapsed time, 1.569s cpu time, 0.077s GC time
Loading theory "Draft.Dijkstra_Impl_Adet" (required by "Draft.TestTemplates" via "Draft.Test")
is_map_to_sorted_list ?ordR ?Rk ?Rv ?Rm ?tsl ==
ALL m m'.
   (m, m') : \<langle>?Rk, ?Rv\<rangle>?Rm -->
   (EX l'.
       (?tsl m, l') : \<langle>?Rk \<times>\<^sub>r ?Rv\<rangle>list_rel &
       RETURN l' <= it_to_sorted_list (key_rel ?ordR) (map_to_set m'))
locale graph
  fixes \<alpha> :: "'G => ('V, 'W) graph"
    and invar :: "'G => bool"
  assumes "graph \<alpha> invar"
locale dijkstraC
  fixes g_ops :: "('V, 'W, 'G, 'moreg) graph_ops_scheme"
    and
    mr_ops :: "('V, ('V * 'W * 'V) list * 'W, 'mr, 'more_mr) map_ops_scheme"
    and qw_ops :: "('V, 'W infty, 'qw, 'more_qw) uprio_ops_scheme"
  assumes "dijkstraC g_ops mr_ops qw_ops"
locale dijkstraC_fixg
  fixes g_ops :: "('V, 'W, 'G, 'moreg) graph_ops_scheme"
    and
    mr_ops :: "('V, ('V * 'W * 'V) list * 'W, 'mr, 'more_mr) map_ops_scheme"
    and qw_ops :: "('V, 'W infty, 'qw, 'more_qw) uprio_ops_scheme"
    and ga :: "('V, 'W) graph"
    and v0 :: "'V"
    and g :: "'G"
  assumes "dijkstraC_fixg g_ops mr_ops qw_ops ga v0 g"
"mpath_weight'"
  :: "(('a * 'b * 'a) list * 'b) option => 'b infty"
"mdinit"
  :: "(('V => 'W infty option) *
       ('V => (('V * 'W * 'V) list * 'W) option)) nres"
### Cannot skip proof of schematic goal statement
Phase "id_op"
Failed to identify: op_map_lookup
Failed to identify: res
0.296s elapsed time, 0.296s cpu time, 0.000s GC time
Success (Phase "id_op")
Phase "rel_inf"
1.249s elapsed time, 1.305s cpu time, 0.085s GC time
Success (Phase "rel_inf")
Phase "fix_rel"
1.037s elapsed time, 1.038s cpu time, 0.000s GC time
Success (Phase "fix_rel")
Phase "trans"
1.561s elapsed time, 1.582s cpu time, 0.032s GC time
Success (Phase "trans")
locale dijkstraC
  fixes g_ops :: "('V, 'W, 'G, 'moreg) graph_ops_scheme"
    and
    mr_ops :: "('V, ('V * 'W * 'V) list * 'W, 'mr, 'more_mr) map_ops_scheme"
    and qw_ops :: "('V, 'W infty, 'qw, 'more_qw) uprio_ops_scheme"
  assumes "dijkstraC g_ops mr_ops qw_ops"
"cdijkstra"
  :: "'G => 'V => 'mr"
locale dijkstraC_fixg
  fixes g_ops :: "('V, 'W, 'G, 'moreg) graph_ops_scheme"
    and
    mr_ops :: "('V, ('V * 'W * 'V) list * 'W, 'mr, 'more_mr) map_ops_scheme"
    and qw_ops :: "('V, 'W infty, 'qw, 'more_qw) uprio_ops_scheme"
    and ga :: "('V, 'W) graph"
    and v0 :: "'V"
    and g :: "'G"
  assumes "dijkstraC_fixg g_ops mr_ops qw_ops ga v0 g"
"cdijkstra"
  :: "'G => 'V => 'mr"
"mdijkstra"
  :: "('V => (('V * 'W * 'V) list * 'W) option) nres"
### theory "Draft.Dijkstra_Impl_Adet"
### 7.691s elapsed time, 7.978s cpu time, 0.397s GC time
*** Failed to load theory "Draft.Test" (unresolved "Draft.Dijkstra_Impl_Adet")
*** Failed to load theory "Draft.TestTemplates" (unresolved "Draft.Test")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "200")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 392 of "$AFP/Dijkstra_Shortest_Path/Dijkstra_Impl_Adet.thy")
Exception- TOPLEVEL_ERROR raised
