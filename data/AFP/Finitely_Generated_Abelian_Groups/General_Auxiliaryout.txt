Loading theory "HOL-Library.Function_Algebras" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.FuncSet" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Algebra.QuotRing" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
Loading theory "HOL-Library.Cancellation" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.535s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Nat_Bijection"
### 0.317s elapsed time, 1.287s cpu time, 0.067s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Set_Algebras"
### 0.240s elapsed time, 0.933s cpu time, 0.132s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.FuncSet"
### 0.366s elapsed time, 1.469s cpu time, 0.132s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Algebra.QuotRing" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.430s elapsed time, 1.719s cpu time, 0.132s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
consts
  stake :: "nat => 'a stream => 'a list"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Algebra.Congruence"
### 0.811s elapsed time, 3.066s cpu time, 0.723s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Algebra.QuotRing" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 0.969s elapsed time, 3.686s cpu time, 0.787s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 1.053s elapsed time, 4.012s cpu time, 1.195s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Algebra.QuotRing" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.BigO"
### 0.978s elapsed time, 3.710s cpu time, 1.146s GC time
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "HOL-Library.Tree"
### 2.245s elapsed time, 8.311s cpu time, 2.111s GC time
Loading theory "Draft.Templates" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.191s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.General_AuxiliaryMoreTemplates")
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 0.788s elapsed time, 2.463s cpu time, 0.342s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Algebra.QuotRing" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.973s elapsed time, 3.077s cpu time, 1.294s GC time
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
### theory "HOL-Algebra.Complete_Lattice"
### 0.972s elapsed time, 2.710s cpu time, 1.211s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Algebra.QuotRing" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
### theory "HOL-Library.Multiset"
### 4.027s elapsed time, 13.031s cpu time, 3.694s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
### theory "HOL-Algebra.Group"
### 1.730s elapsed time, 4.366s cpu time, 1.901s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Algebra.QuotRing" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal" via "HOL-Algebra.AbelCoset")
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Algebra.QuotRing" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal" via "HOL-Algebra.Ring")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
### theory "HOL-Algebra.FiniteProduct"
### 0.477s elapsed time, 1.498s cpu time, 0.302s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Algebra.QuotRing" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
### theory "HOL-Algebra.Coset"
### 1.176s elapsed time, 3.659s cpu time, 0.575s GC time
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Ring"
### 2.360s elapsed time, 5.701s cpu time, 0.731s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Algebra.QuotRing" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 6.030s elapsed time, 14.560s cpu time, 3.072s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Computational_Algebra.Primes")
### theory "HOL-Algebra.AbelCoset"
### 2.145s elapsed time, 4.590s cpu time, 0.439s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Algebra.QuotRing" via "HOL-Algebra.RingHom")
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
### theory "HOL-Algebra.Ideal"
### 1.589s elapsed time, 3.330s cpu time, 0.306s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Algebra.QuotRing")
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
### theory "HOL-Algebra.RingHom"
### 0.666s elapsed time, 1.393s cpu time, 0.120s GC time
Loading theory "HOL-Algebra.QuotRing" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing")
### theory "HOL-Algebra.QuotRing"
### 1.696s elapsed time, 3.541s cpu time, 0.317s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 6.802s elapsed time, 11.604s cpu time, 0.983s GC time
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary" via "HOL-Algebra.IntRing")
### theory "HOL-Computational_Algebra.Primes"
### 0.196s elapsed time, 0.269s cpu time, 0.072s GC time
Loading theory "HOL-Algebra.IntRing" (required by "Draft.General_AuxiliaryMoreTemplates" via "Draft.General_Auxiliary")
### Cannot skip proof of schematic goal statement
### theory "HOL-Algebra.IntRing"
### 0.805s elapsed time, 0.931s cpu time, 0.156s GC time
Loading theory "Draft.General_Auxiliary" (required by "Draft.General_AuxiliaryMoreTemplates")
### theory "Draft.General_Auxiliary"
### 0.405s elapsed time, 0.673s cpu time, 0.134s GC time
Loading theory "Draft.General_AuxiliaryMoreTemplates"
val templateLemmas =
   [("General_Auxiliary.Inf_le", "?x : ?A ==> Inf ?A <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("General_Auxiliary.inter_imp_subset", "?A Int ?B = ?A ==> ?A <= ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_var 1)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("General_Auxiliary.transp_successively_remove1",
     "[| transp ?f; successively ?f ?l |]
      ==> successively ?f (remove1 ?a ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("General_Auxiliary.card_inter_eq",
     "[| finite ?A; card (?A Int ?B) = card ?A |] ==> ?A <= ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)),
          template_app (template_hole 2, template_var 1))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("General_Auxiliary.Sigma_insert",
     "Sigma (insert ?x ?A) ?B = Pair ?x ` ?B ?x Un Sigma ?A ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_var 0, template_var 2))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("General_Auxiliary.of_int_divide_in_Ints_iff",
     "?b ~= 0 ==> (of_int ?a / of_int ?b : \<int>) = (?b dvd ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app (template_hole 2, template_var 1))),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("General_Auxiliary.of_nat_divide_in_Ints_iff",
     "?b ~= 0 ==> (of_nat ?a / of_nat ?b : \<int>) = (?b dvd ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app (template_hole 2, template_var 1))),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("General_Auxiliary.exp_one_2pi_iff",
     "(exp (2 * complex_of_real pi * \<i> * complex_of_real ?x) = 1) =
      (?x : \<int>)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 7, template_hole 6))),
                       template_app (template_hole 5, template_hole 4))),
                   template_hole 3)),
               template_app (template_hole 5, template_var 0)))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("General_Auxiliary.switch_elem_card_le",
     "?a : ?A ==> card (?A - {?a} Un {?b}) <= card ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app (template_hole 4, template_var 1)))),
    ("General_Auxiliary.lcm_is_Min_multiple_nat",
     "[| ?c ~= 0; ?a dvd ?c; ?b dvd ?c |] ==> lcm ?a ?b <= ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("General_Auxiliary.diff_prime_power_imp_coprime",
     "[| ?p ~= ?q; prime ?p; prime ?q |] ==> coprime (?p ^ ?n) (?q ^ ?m)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("General_Auxiliary.powi_mod",
     "[| ?x ^ ?n = 1; 0 < ?n |] ==> ?x powi ?m = ?x powi (?m mod int ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_hole 5),
        template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("General_Auxiliary.coprime_eq_empty_prime_inter",
     "[| ?n ~= 0; ?m ~= 0 |]
      ==> coprime ?n ?m = (prime_factors ?n Int prime_factors ?m = {})",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0)
              )],
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("General_Auxiliary.pairwise_coprime_dvd",
     "[| finite ?A; pairwise coprime ?A; ?n = prod id ?A;
         ALL a:?A. a dvd ?j |]
      ==> ?n dvd ?j",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("General_Auxiliary.infinite_two_diff",
     "[| infinite ?A; !!x y. [| x : ?A; y : ?A; x ~= y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("General_Auxiliary.card_ge_1_two_diff",
     "[| 1 < card ?A; !!x y. [| x : ?A; y : ?A; x ~= y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("General_Auxiliary.finite_bij_betwI",
     "[| finite ?A; finite ?B; inj_on ?f ?A; ?f : ?A \<rightarrow> ?B;
         card ?A = card ?B |]
      ==> bij_betw ?f ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 2), t_empty))
            ),
        template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("General_Auxiliary.true_nth_unity_root",
     "(!!x. [| x ^ ?n = 1; !!m. [| 0 < m; m < ?n |] ==> x ^ m ~= 1 |]
            ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("General_Auxiliary.prime_factors_Prod",
     "[| finite ?S; !!a. a : ?S ==> ?f a ~= (0::?'b) |]
      ==> prime_factors (prod ?f ?S) = \<Union> (prime_factors ` ?f ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("General_Auxiliary.pairwise_coprime_dvd'",
     "[| finite ?A;
         !!i j. [| i : ?A; j : ?A; i ~= j |] ==> coprime (?f i) (?f j);
         ?n = prod ?f ?A; ALL a:?A. ?f a dvd ?j |]
      ==> ?n dvd ?j",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.General_AuxiliaryMoreTemplates"
### 0.492s elapsed time, 0.668s cpu time, 0.000s GC time
val it = (): unit
