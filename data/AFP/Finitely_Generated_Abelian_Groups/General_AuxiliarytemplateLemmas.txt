   [("General_Auxiliary.Inf_le", "?x : ?A ==> Inf ?A <= ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("General_Auxiliary.inter_imp_subset", "?A Int ?B = ?A ==> ?A <= ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 0),
          template_var 1)],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("General_Auxiliary.transp_successively_remove1",
     "[| transp ?f; successively ?f ?l |]
      ==> successively ?f (remove1 ?a ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("General_Auxiliary.card_inter_eq",
     "[| finite ?A; card (?A Int ?B) = card ?A |] ==> ?A <= ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app
           (template_hole 2,
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)),
          template_app (template_hole 2, template_var 1))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("General_Auxiliary.Sigma_insert",
     "Sigma (insert ?x ?A) ?B = Pair ?x ` ?B ?x Un Sigma ?A ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_var 0, template_var 2))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("General_Auxiliary.of_int_divide_in_Ints_iff",
     "?b ~= 0 ==> (of_int ?a / of_int ?b : \<int>) = (?b dvd ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app (template_hole 2, template_var 1))),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("General_Auxiliary.of_nat_divide_in_Ints_iff",
     "?b ~= 0 ==> (of_nat ?a / of_nat ?b : \<int>) = (?b dvd ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0)),
               template_app (template_hole 2, template_var 1))),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("General_Auxiliary.exp_one_2pi_iff",
     "(exp (2 * complex_of_real pi * \<i> * complex_of_real ?x) = 1) =
      (?x : \<int>)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 7, template_hole 6))),
                       template_app (template_hole 5, template_hole 4))),
                   template_hole 3)),
               template_app (template_hole 5, template_var 0)))),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("General_Auxiliary.switch_elem_card_le",
     "?a : ?A ==> card (?A - {?a} Un {?b}) <= card ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))),
         template_app (template_hole 4, template_var 1)))),
    ("General_Auxiliary.lcm_is_Min_multiple_nat",
     "[| ?c ~= 0; ?a dvd ?c; ?b dvd ?c |] ==> lcm ?a ?b <= ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("General_Auxiliary.diff_prime_power_imp_coprime",
     "[| ?p ~= ?q; prime ?p; prime ?q |] ==> coprime (?p ^ ?n) (?q ^ ?m)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate (template_app (template_hole 2, template_var 3)),
        template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("General_Auxiliary.powi_mod",
     "[| ?x ^ ?n = 1; 0 < ?n |] ==> ?x powi ?m = ?x powi (?m mod int ?n)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_hole 5),
        template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("General_Auxiliary.coprime_eq_empty_prime_inter",
     "[| ?n ~= 0; ?m ~= 0 |]
      ==> coprime ?n ?m = (prime_factors ?n Int prime_factors ?m = {})",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0)
              )],
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("General_Auxiliary.pairwise_coprime_dvd",
     "[| finite ?A; pairwise coprime ?A; ?n = prod id ?A;
         ALL a:?A. a dvd ?j |]
      ==> ?n dvd ?j",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 2)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 3, template_hole 2),
            template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("General_Auxiliary.infinite_two_diff",
     "[| infinite ?A; !!x y. [| x : ?A; y : ?A; x ~= y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("General_Auxiliary.card_ge_1_two_diff",
     "[| 1 < card ?A; !!x y. [| x : ?A; y : ?A; x ~= y |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("General_Auxiliary.finite_bij_betwI",
     "[| finite ?A; finite ?B; inj_on ?f ?A; ?f : ?A \<rightarrow> ?B;
         card ?A = card ?B |]
      ==> bij_betw ?f ?A ?B",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 2), t_empty))
            ),
        template_equation
         (template_app (template_hole 2, template_var 2),
          template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("General_Auxiliary.true_nth_unity_root",
     "(!!x. [| x ^ ?n = 1; !!m. [| 0 < m; m < ?n |] ==> x ^ m ~= 1 |]
            ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("General_Auxiliary.prime_factors_Prod",
     "[| finite ?S; !!a. a : ?S ==> ?f a ~= (0::?'b) |]
      ==> prime_factors (prod ?f ?S) = \<Union> (prime_factors ` ?f ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 1)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))))),
    ("General_Auxiliary.pairwise_coprime_dvd'",
     "[| finite ?A;
         !!i j. [| i : ?A; j : ?A; i ~= j |] ==> coprime (?f i) (?f j);
         ?n = prod ?f ?A; ALL a:?A. ?f a dvd ?j |]
      ==> ?n dvd ?j",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 3)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           )))]
