   [("Prover.is_env_model_ntou", "is_env (model ?s) ntou",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Prover.finite_f", "finite (set (f ?s ?x))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Prover.ss", "EX x. x = ?t",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Prover.ss", "EX x. ?t = x",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Prover.ss", "0 ~= Suc ?x2.0",
     template_negation
      (
         template_equation
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Prover.ss", "Suc ?x2.0 ~= 0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Prover.ss", "?P ~= (~ ?P)",
     template_negation
      (
         template_equation
          (template_var 0, template_app (template_hole 1, template_var 0))
         )),
    ("Prover.ss", "(~ ?P) ~= ?P",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_var 0)
         )),
    ("Prover.uton_ntou", "uton (ntou ?x) = ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Prover.ss", "(ALL x. ?P) = ?P",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("Prover.ss", "(EX x. ?P) = ?P",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("Prover.ss", "(~ ~ ?P) = ?P",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Prover.ss", "(False & ?P) = False",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Prover.ss", "(True & ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Prover.ss", "(?P & False) = False",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Prover.ss", "(?P & True) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Prover.ss", "(?P & ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Prover.ss", "(False | ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Prover.ss", "(True | ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Prover.ss", "(?P | False) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Prover.ss", "(?P | True) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Prover.ss", "(?P | ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("Prover.ss", "(?x = ?x) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Prover.ss", "(True = ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Prover.ss", "(?P = True) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Prover.ss", "(False --> ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Prover.ss", "(True --> ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Prover.ss", "(?P --> True) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Prover.ss", "(?P --> ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_var 0),
       template_hole 0)),
    ("Prover.ss", "[] @ ?ys = ?ys",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Prover.ss", "filter ?P [] = []",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Prover.ss", "map ?f [] = []",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Prover.ss", "FAll ?x5.0 ~= FEx ?x6.0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Prover.ss", "FEx ?x6.0 ~= FAll ?x5.0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Prover.newvar", "newvar ?vs ~: set ?vs",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_app (template_hole 0, template_var 0))
             )
         )),
    ("Prover.ss", "(if False then ?x else ?y) = ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 0)),
    ("Prover.ss", "(if True then ?x else ?y) = ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 1),
         template_var 0),
       template_var 1)),
    ("Prover.ss", "(case 0 of 0 => ?f1.0 | Suc x => ?f2.0 x) = ?f1.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Prover.ss", "fst (?x1.0, ?x2.0) = ?x1.0",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Prover.ss", "snd (?x1.0, ?x2.0) = ?x2.0",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Prover.ss", "rec_nat ?f1.0 ?f2.0 0 = ?f1.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_var 1)),
    ("Prover.finite_deriv_prove", "finite (deriv ?s) = prove ?s",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Prover.ss", "(False = ?P) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Prover.ss", "(?P = False) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Prover.ss", "(?P --> False) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Prover.ss", "(?P & ~ ?P) = False",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Prover.ss", "(~ ?P & ?P) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Prover.ss", "(?P | ~ ?P) = True",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Prover.ss", "(~ ?P | ?P) = True",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_hole 0)),
    ("Prover.ss", "(?x : set []) = False",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_hole 0)),
    ("Prover.ss", "fv (NAtom ?p ?vs) = ?vs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Prover.ss", "fv (PAtom ?p ?vs) = ?vs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Prover.ss", "s_of_ns ?ns = map snd ?ns",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Prover.ss", "FAll ?x5.0 ~= FConj ?x31.0 ?x32.0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FAll ?x5.0 ~= FDisj ?x41.0 ?x42.0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FAll ?x5.0 ~= NAtom ?x21.0 ?x22.0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FAll ?x5.0 ~= PAtom ?x11.0 ?x12.0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FEx ?x6.0 ~= FConj ?x31.0 ?x32.0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FEx ?x6.0 ~= FDisj ?x41.0 ?x42.0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FEx ?x6.0 ~= NAtom ?x21.0 ?x22.0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FEx ?x6.0 ~= PAtom ?x11.0 ?x12.0",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FConj ?x31.0 ?x32.0 ~= FAll ?x5.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Prover.ss", "FConj ?x31.0 ?x32.0 ~= FEx ?x6.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Prover.ss", "FDisj ?x41.0 ?x42.0 ~= FAll ?x5.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Prover.ss", "FDisj ?x41.0 ?x42.0 ~= FEx ?x6.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Prover.ss", "NAtom ?x21.0 ?x22.0 ~= FAll ?x5.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Prover.ss", "NAtom ?x21.0 ?x22.0 ~= FEx ?x6.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Prover.ss", "PAtom ?x11.0 ?x12.0 ~= FAll ?x5.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Prover.ss", "PAtom ?x11.0 ?x12.0 ~= FEx ?x6.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Prover.size_finst", "size (finst ?f ?m) = size ?f",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Prover.finite_inc", "finite (inc ` ?X) = finite ?X",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Prover.ss", "(?P --> ~ ?P) = (~ ?P)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Prover.ss", "sfv ?s = flatten (map fv ?s)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Prover.ss", "fv (FAll ?f) = preSuc (fv ?f)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Prover.ss", "fv (FEx ?f) = preSuc (fv ?f)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Prover.map_uton_ntou", "map uton (map ntou ?xs) = ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_var 0)),
    ("Prover.ss", "FConj ?x31.0 ?x32.0 ~= FDisj ?x41.0 ?x42.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FConj ?x31.0 ?x32.0 ~= NAtom ?x21.0 ?x22.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FConj ?x31.0 ?x32.0 ~= PAtom ?x11.0 ?x12.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FDisj ?x41.0 ?x42.0 ~= FConj ?x31.0 ?x32.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FDisj ?x41.0 ?x42.0 ~= NAtom ?x21.0 ?x22.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "FDisj ?x41.0 ?x42.0 ~= PAtom ?x11.0 ?x12.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "NAtom ?x21.0 ?x22.0 ~= FConj ?x31.0 ?x32.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "NAtom ?x21.0 ?x22.0 ~= FDisj ?x41.0 ?x42.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "NAtom ?x21.0 ?x22.0 ~= PAtom ?x11.0 ?x12.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "PAtom ?x11.0 ?x12.0 ~= FConj ?x31.0 ?x32.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "PAtom ?x11.0 ?x12.0 ~= FDisj ?x41.0 ?x42.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss", "PAtom ?x11.0 ?x12.0 ~= NAtom ?x21.0 ?x22.0",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Prover.ss",
     "(case Suc ?x2.0 of 0 => ?f1.0 | Suc x => ?f2.0 x) = ?f2.0 ?x2.0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Prover.fold_compose1", "(%x. ?f (?g x)) = ?f o ?g",
     template_equation
      (t_empty,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Prover.ss", "(ALL x. x ~= ?t) = False",
     template_equation
      (template_app (template_hole 3, t_empty), template_hole 0)),
    ("Prover.ss", "(ALL x. ?t ~= x) = False",
     template_equation
      (template_app (template_hole 3, t_empty), template_hole 0)),
    ("Prover.maxvar", "ALL v:set ?vs. v <= maxvar ?vs",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           t_empty)
         )),
    ("Prover.inj_inj_on", "inj ?f ==> inj_on ?f ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), template_var 0)
           ))),
    ("Prover.is_axiom_finite_deriv",
     "is_axiom (s_of_ns ?s) ==> finite (deriv ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Prover.soundness", "finite (deriv (ns_of_s ?s)) ==> Svalid ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Prover.size_subst", "ALL m. size (subst m ?f) = size ?f",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Prover.ss",
     "(case ?prod of (x, xa) => ?f x xa) = ?f (fst ?prod) (snd ?prod)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_var 1, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Prover.ss", "maxvar (?a # ?list) = max ?a (maxvar ?list)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Prover.set_flatten", "set (flatten ?xs) = \<Union> (set ` set ?xs)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 4),
           template_app (template_hole 0, template_var 0))))),
    ("Prover.ss", "(?P ~= ?Q) = (?P = (~ ?Q))",
     template_bimplication
      (template_negation
        (template_equation (template_var 1, template_var 0)),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Prover.ss", "(?P & ?P & ?Q) = (?P & ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Prover.ss", "(?P | ?P | ?Q) = (?P | ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Prover.ss", "(Suc ?x2.0 = Suc ?y2.0) = (?x2.0 = ?y2.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Prover.ss", "((~ ?P) = (~ ?Q)) = (?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Prover.ss", "(FAll ?x5.0 = FAll ?y5.0) = (?x5.0 = ?y5.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Prover.ss", "(FEx ?x6.0 = FEx ?y6.0) = (?x6.0 = ?y6.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Prover.ss", "flatten (?a # ?list) = ?a @ flatten ?list",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Prover.ss", "ns_of_s ?s = map (Pair 0) ?s",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, t_empty), template_var 0))),
    ("Prover.deriv0", "((0, ?x) : deriv ?y) = (?x = ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Prover.flatten_append",
     "flatten (?xs @ ?ys) = flatten ?xs @ flatten ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Prover.ss", "fv (FConj ?f ?g) = fv ?f @ fv ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Prover.ss", "fv (FDisj ?f ?g) = fv ?f @ fv ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Prover.sfv_cons", "sfv (?a # ?list) = fv ?a @ sfv ?list",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Prover.ss", "subst ?r (FAll ?f) = FAll (subst (bump ?r) ?f)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Prover.ss", "subst ?r (FEx ?f) = FEx (subst (bump ?r) ?f)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Prover.completeness", "infinite (deriv (ns_of_s ?s)) ==> ~ Svalid ?s",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 3,
                  template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 0)))
                )
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Prover.derivp_deriv_eq", "derivp ?s = (%x xa. (x, xa) : deriv ?s)",
     template_equation
      (template_app (template_hole 3, template_var 0), t_empty)),
    ("Prover.ss", "newvar ?vs = (if ?vs = [] then 0 else Suc (maxvar ?vs))",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_hole 3)),
               template_hole 2),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Prover.ss",
     "bump ?phi ?y = (case ?y of 0 => 0 | Suc n => Suc (?phi n))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), t_empty),
         template_var 0))),
    ("Prover.ss", "(ALL x. x = ?t --> ?P x) = ?P ?t",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 0, template_var 1))),
    ("Prover.ss", "(ALL x. ?t = x --> ?P x) = ?P ?t",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 0, template_var 1))),
    ("Prover.ss", "(EX x. x = ?t & ?P x) = ?P ?t",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 0, template_var 1))),
    ("Prover.ss", "(EX x. ?t = x & ?P x) = ?P ?t",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_var 0, template_var 1))),
    ("Prover.ss", "(?x # ?xs) @ ?ys = ?x # ?xs @ ?ys",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Prover.ss", "subst ?r (NAtom ?p ?vs) = NAtom ?p (map ?r ?vs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Prover.ss", "subst ?r (PAtom ?p ?vs) = PAtom ?p (map ?r ?vs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Prover.ss",
     "(case FAll ?x5.0 of PAtom x xa => ?f1.0 x xa
       | NAtom x xa => ?f2.0 x xa | FConj x xa => ?f3.0 x xa
       | FDisj x xa => ?f4.0 x xa | FAll x => ?f5.0 x | FEx x => ?f6.0 x) =
      ?f5.0 ?x5.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 2, template_var 0))),
    ("Prover.ss",
     "(case FEx ?x6.0 of PAtom x xa => ?f1.0 x xa | NAtom x xa => ?f2.0 x xa
       | FConj x xa => ?f3.0 x xa | FDisj x xa => ?f4.0 x xa
       | FAll x => ?f5.0 x | FEx x => ?f6.0 x) =
      ?f6.0 ?x6.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_var 1, template_var 0))),
    ("Prover.ss",
     "rec_nat ?f1.0 ?f2.0 (Suc ?nat) =
      ?f2.0 ?nat (rec_nat ?f1.0 ?f2.0 ?nat)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 1, template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Prover.ss", "map ?f (?x21.0 # ?x22.0) = ?f ?x21.0 # map ?f ?x22.0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Prover.ss",
     "finst ?body ?w = subst (%v. case v of 0 => ?w | Suc n => n) ?body",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 1, t_empty), template_var 1))),
    ("Prover.inj_finite_image_eq_finite",
     "inj_on ?f ?Z ==> finite (?f ` ?Z) = finite ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Prover.ntou_uton", "?x : range ntou ==> ntou (uton ?x) = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 2))
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Prover.finite_subs",
     "finite {w. ~ is_axiom (s_of_ns ?y) & w : set (subs ?y)}",
     template_predicate
      (
         template_app
          (template_hole 8, template_app (template_hole 7, t_empty))
         )),
    ("Prover.iter", "ALL a. iter ?g (?g a) ?n = ?g (iter ?g a ?n)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Prover.preSuc", "ALL n. (Suc n : set ?A) = (n : set (preSuc ?A))",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Prover.prove'",
     "prove' ?l =
      (if ?l = [] then True else prove' (flatten (map subs ?l)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4)),
               template_hole 3),
             template_app
              (template_hole 7,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))))
           ))),
    ("Prover.finite_deriv", "finite (deriv ?s) = (EX m. f [?s] m = [])",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Prover.prove'_Cons",
     "prove' (?x # ?l) = prove' (subs ?x @ flatten (map subs ?l))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 2),
               template_var 0)))))),
    ("Prover.ss",
     "subst ?r (FConj ?f ?g) = FConj (subst ?r ?f) (subst ?r ?g)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Prover.ss",
     "subst ?r (FDisj ?f ?g) = FDisj (subst ?r ?f) (subst ?r ?g)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Prover.deriv_is_axiom",
     "is_axiom (s_of_ns ?s) ==> deriv ?s = {(0, ?s)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 0))
            )],
       template_equation
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_hole 0)))),
    ("Prover.ss",
     "(case FConj ?x31.0 ?x32.0 of PAtom x xa => ?f1.0 x xa
       | NAtom x xa => ?f2.0 x xa | FConj x xa => ?f3.0 x xa
       | FDisj x xa => ?f4.0 x xa | FAll x => ?f5.0 x | FEx x => ?f6.0 x) =
      ?f3.0 ?x31.0 ?x32.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 5, template_var 1), template_var 0))),
    ("Prover.ss",
     "(case FDisj ?x41.0 ?x42.0 of PAtom x xa => ?f1.0 x xa
       | NAtom x xa => ?f2.0 x xa | FConj x xa => ?f3.0 x xa
       | FDisj x xa => ?f4.0 x xa | FAll x => ?f5.0 x | FEx x => ?f6.0 x) =
      ?f4.0 ?x41.0 ?x42.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 4, template_var 1), template_var 0))),
    ("Prover.ss",
     "(case NAtom ?x21.0 ?x22.0 of PAtom x xa => ?f1.0 x xa
       | NAtom x xa => ?f2.0 x xa | FConj x xa => ?f3.0 x xa
       | FDisj x xa => ?f4.0 x xa | FAll x => ?f5.0 x | FEx x => ?f6.0 x) =
      ?f2.0 ?x21.0 ?x22.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 6, template_var 1), template_var 0))),
    ("Prover.ss",
     "(case PAtom ?x11.0 ?x12.0 of PAtom x xa => ?f1.0 x xa
       | NAtom x xa => ?f2.0 x xa | FConj x xa => ?f3.0 x xa
       | FDisj x xa => ?f4.0 x xa | FAll x => ?f5.0 x | FEx x => ?f6.0 x) =
      ?f1.0 ?x11.0 ?x12.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 7, template_var 1), template_var 0))),
    ("Prover.ss",
     "rec_form ?f1.0 ?f2.0 ?f3.0 ?f4.0 ?f5.0 ?f6.0 (NAtom ?x21.0 ?x22.0) =
      ?f2.0 ?x21.0 ?x22.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 6, template_var 1), template_var 0))),
    ("Prover.ss",
     "rec_form ?f1.0 ?f2.0 ?f3.0 ?f4.0 ?f5.0 ?f6.0 (PAtom ?x11.0 ?x12.0) =
      ?f1.0 ?x11.0 ?x12.0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_var 7, template_var 1), template_var 0))),
    ("Prover.FEval_finst",
     "FEval ?mo ?e (finst ?A ?u) = FEval ?mo (case_nat (?e ?u) ?e) ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 0)),
             template_var 2)),
         template_var 1))),
    ("Prover.ss",
     "preSuc (?a # ?list) =
      (case ?a of 0 => preSuc ?list | Suc n => n # preSuc ?list)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           t_empty),
         template_var 1))),
    ("Prover.infinite_inj_infinite_image",
     "inj_on ?f ?Z ==> infinite (?f ` ?Z) = infinite ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app (template_hole 0, template_var 0))))),
    ("Prover.f_upwards", "f ?s ?n = [] ==> f ?s (?n + ?m) = []",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2), template_var 1),
          template_hole 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_hole 1))),
    ("Prover.ss", "(?x : set (?y # ?ys)) = (?x = ?y | ?x : set ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 3, template_var 0)))
           ))),
    ("Prover.ss",
     "(?x21.0 # ?x22.0 = ?y21.0 # ?y22.0) =
      (?x21.0 = ?y21.0 & ?x22.0 = ?y22.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0))
           ))),
    ("Prover.ss",
     "(FConj ?x31.0 ?x32.0 = FConj ?y31.0 ?y32.0) =
      (?x31.0 = ?y31.0 & ?x32.0 = ?y32.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))
           ))),
    ("Prover.ss",
     "(FDisj ?x41.0 ?x42.0 = FDisj ?y41.0 ?y42.0) =
      (?x41.0 = ?y41.0 & ?x42.0 = ?y42.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))
           ))),
    ("Prover.ss",
     "(NAtom ?x21.0 ?x22.0 = NAtom ?y21.0 ?y22.0) =
      (?x21.0 = ?y21.0 & ?x22.0 = ?y22.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Prover.ss",
     "(PAtom ?x11.0 ?x12.0 = PAtom ?y11.0 ?y12.0) =
      (?x11.0 = ?y11.0 & ?x12.0 = ?y12.0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Prover.t", "finite {w. ?P w} ==> finite {w. ?Q w & ?P w}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2, template_app (template_hole 1, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty))
           ))),
    ("Prover.deriv_f", "deriv ?s = (UN x. set (map (Pair x) (f [?s] x)))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, t_empty), template_hole 0)))),
    ("Prover.SEval_append",
     "SEval ?m ?e (?xs @ ?ys) = (SEval ?m ?e ?xs | SEval ?m ?e ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Prover.ball_maxscope",
     "ALL x:?m. ?P x | ?Q ==> (ALL x:?m. ?P x) | ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 2), t_empty)),
             template_var 0)
           ))),
    ("Prover.FEval_subst",
     "ALL e f. FEval ?MI e (subst f ?A) = FEval ?MI (e o f) ?A",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Prover.f", "ALL x. ((?n, x) : deriv ?s) = (x : set (f [?s] ?n))",
     template_predicate (template_app (template_hole 9, t_empty))),
    ("Prover.collect_disj", "{x. ?P x | ?Q x} = {x. ?P x} Un {x. ?Q x}",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Prover.all_conj",
     "(ALL x. ?A x & ?B x) = ((ALL x. ?A x) & (ALL x. ?B x))",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, t_empty)),
         template_app (template_hole 1, t_empty)))),
    ("Prover.ss",
     "filter ?P (?x # ?xs) =
      (if ?P ?x then ?x # filter ?P ?xs else filter ?P ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Prover.and_lem", "[| ?a = ?c; ?b = ?d |] ==> (?a & ?b) = (?c & ?d)",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Prover.or_lem", "[| ?a = ?c; ?b = ?d |] ==> (?a | ?b) = (?c | ?d)",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Prover.all_eq_all",
     "ALL x. ?P x = ?Q x ==> (ALL x. ?P x) = (ALL x. ?Q x)",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty))],
       template_equation
        (template_app (template_hole 1, t_empty),
         template_app (template_hole 1, t_empty)))),
    ("Prover.sound_FEx",
     "Svalid (?s @ [finst ?f ?u, FEx ?f]) ==> Svalid (FEx ?f # ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 2),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 1),
                      template_var 0)),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 1, template_var 1)),
                    template_hole 0))))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 1, template_var 1)),
               template_var 2))
           ))),
    ("Prover.ex_iter'",
     "(EX n. ?R (iter ?g ?a n)) = (?R ?a | (EX n. ?R (iter ?g (?g ?a) n)))",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app (template_hole 2, t_empty)))),
    ("Prover.ss",
     "rec_form ?f1.0 ?f2.0 ?f3.0 ?f4.0 ?f5.0 ?f6.0 (FAll ?x5.0) =
      ?f5.0 ?x5.0 (rec_form ?f1.0 ?f2.0 ?f3.0 ?f4.0 ?f5.0 ?f6.0 ?x5.0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 2, template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Prover.ss",
     "rec_form ?f1.0 ?f2.0 ?f3.0 ?f4.0 ?f5.0 ?f6.0 (FEx ?x6.0) =
      ?f6.0 ?x6.0 (rec_form ?f1.0 ?f2.0 ?f3.0 ?f4.0 ?f5.0 ?f6.0 ?x6.0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 1, template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("Prover.ex_iter",
     "(EX n. ?R (iter ?g ?a n)) =
      (if ?R ?a then True else EX n. ?R (iter ?g (?g ?a) n))",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 0)),
           template_hole 0),
         template_app (template_hole 3, t_empty)))),
    ("Prover.finite_deriv_deriv",
     "finite (deriv ?s) ==>
      finite (deriv ` {w. ~ is_axiom (s_of_ns ?s) & w : set (subs ?s)})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 10),
               template_app (template_hole 7, t_empty)))
           ))),
    ("Prover.ball_eq_ball",
     "ALL x:?m. ?P x = ?Q x ==> (ALL x:?m. ?P x) = (ALL x:?m. ?Q x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), t_empty),
         template_app
          (template_app (template_hole 1, template_var 2), t_empty)))),
    ("Prover.bex_eq_bex",
     "ALL x:?m. ?P x = ?Q x ==> (EX x:?m. ?P x) = (EX x:?m. ?Q x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("Prover.completeness'",
     "[| infinite (deriv ?s); init ?s |]
      ==> ALL mA:set ?s. ~ FEval (model ?s) ntou (snd mA)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 0))
                )
            ),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             t_empty)
           ))),
    ("Prover.infinite_union",
     "[| finite ?Y; infinite (\<Union> (?f ` ?Y)) |]
      ==> EX y. y : ?Y & infinite (?f y)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 3, template_var 0),
                      template_var 1)))
                )
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Prover.SEval_cong",
     "(ALL x. x : set (sfv ?s) --> ?e1.0 x = ?e2.0 x) -->
      SEval ?m ?e1.0 ?s = SEval ?m ?e2.0 ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7, template_app (template_hole 6, t_empty)),
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1),
               template_var 3)))
         )),
    ("Prover.list_decomp",
     "?v : set ?p ==> EX xs ys. ?p = xs @ ?v # ys & ?v ~: set xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Prover.deriv",
     "deriv ?y =
      insert (0, ?y)
       (inc `
        \<Union>
         (deriv ` {w. ~ is_axiom (s_of_ns ?y) & w : set (subs ?y)}))",
     template_equation
      (template_app (template_hole 15, template_var 0),
       template_app
        (template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_hole 12),
             template_var 0)),
         template_app
          (template_app (template_hole 11, template_hole 10),
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 15),
               template_app (template_hole 7, t_empty))))))),
    ("Prover.max_exists",
     "finite ?X ==>
      ?X ~= {} --> (EX x. x : ?X & (ALL y. y : ?X --> y <= x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 5))),
             template_app (template_hole 4, t_empty))
           ))),
    ("Prover.completeness''",
     "[| infinite (deriv (ns_of_s ?s)); init (ns_of_s ?s) |]
      ==> ALL A. A : set ?s --> ~ FEval (model (ns_of_s ?s)) ntou A",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 10,
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_var 0)))
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 8, template_var 0))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Prover.sound_FAll",
     "[| ?u ~: set (sfv (FAll ?f # ?s)); Svalid (?s @ [finst ?f ?u]) |]
      ==> Svalid (FAll ?f # ?s)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 2),
                  template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app
                       (template_app
                         (template_hole 5,
                          template_app (template_hole 4, template_var 1)),
                        template_var 0))))
                )
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 0),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 2)),
                  template_hole 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_var 0))
           ))),
    ("Prover.FEval_cong",
     "ALL e1 e2.
         (ALL x. x : set (fv ?A) --> e1 x = e2 x) -->
         FEval ?MI e1 ?A = FEval ?MI e2 ?A",
     template_predicate (template_app (template_hole 8, t_empty))),
    ("Prover.deriv_deriv_child",
     "((Suc ?n, ?x) : deriv ?y) =
      (EX z. z : set (subs ?y) &
             ~ is_axiom (s_of_ns ?y) & (?n, ?x) : deriv z)",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app (template_hole 9, template_var 2)),
             template_var 1)),
         template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Prover.is_FEx",
     "~ is_FEx (PAtom ?p ?vs) &
      ~ is_FEx (NAtom ?p ?vs) &
      ~ is_FEx (FConj ?f ?g) & ~ is_FEx (FDisj ?f ?g) & ~ is_FEx (FAll ?f)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2)))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_var 0)))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 0)))),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 0, template_var 1)))))))
         )),
    ("Prover.deriv_downwards",
     "(Suc ?n, ?x) : deriv ?s ==>
      EX y. (?n, y) : deriv ?s &
            ?x : set (subs y) & ~ is_axiom (s_of_ns y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 2)),
                  template_var 1)),
              template_app (template_hole 8, template_var 0))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Prover.deriv_upwards",
     "[| (?n, ?list) : deriv ?s; ~ is_axiom (s_of_ns ?list) |]
      ==> EX zs. (Suc ?n, zs) : deriv ?s & zs : set (subs ?list)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1)),
              template_app (template_hole 9, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 1))
                )
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Prover.deriv_progress",
     "[| (?n, ?a # ?list) : deriv ?s; ~ is_axiom (s_of_ns (?a # ?list)) |]
      ==> EX zs. (Suc ?n, ?list @ zs) : deriv ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app
                   (template_app (template_hole 7, template_var 2),
                    template_var 1))),
              template_app (template_hole 6, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_var 1)))
                )
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Prover.ss",
     "rec_form ?f1.0 ?f2.0 ?f3.0 ?f4.0 ?f5.0 ?f6.0 (FConj ?x31.0 ?x32.0) =
      ?f3.0 ?x31.0 ?x32.0
       (rec_form ?f1.0 ?f2.0 ?f3.0 ?f4.0 ?f5.0 ?f6.0 ?x31.0)
       (rec_form ?f1.0 ?f2.0 ?f3.0 ?f4.0 ?f5.0 ?f6.0 ?x32.0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_var 5, template_var 1), template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 0)))),
    ("Prover.ss",
     "rec_form ?f1.0 ?f2.0 ?f3.0 ?f4.0 ?f5.0 ?f6.0 (FDisj ?x41.0 ?x42.0) =
      ?f4.0 ?x41.0 ?x42.0
       (rec_form ?f1.0 ?f2.0 ?f3.0 ?f4.0 ?f5.0 ?f6.0 ?x41.0)
       (rec_form ?f1.0 ?f2.0 ?f3.0 ?f4.0 ?f5.0 ?f6.0 ?x42.0)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 7),
                   template_var 6),
                 template_var 5),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_var 4, template_var 1), template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 7),
                       template_var 6),
                     template_var 5),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4),
               template_var 3),
             template_var 2),
           template_var 0)))),
    ("Prover.index0",
     "init ?s ==>
      ALL u m A.
         (?n, u) : deriv ?s --> (m, A) : set u --> ~ is_FEx A --> m = 0",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 1))],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("Prover.ex_iter_fSucn",
     "(EX m. iter (%x. ?flat (map subs x)) ?l m = []) =
      (if ?l = [] then True
       else EX n. iter (%x. ?flat (map subs x)) (?flat (map subs ?l)) n =
                  [])",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_hole 2)),
               template_hole 0),
             template_app (template_hole 7, t_empty))
           ))),
    ("Prover.ss",
     "is_axiom (?a # ?list) =
      ((EX p vs. ?a = PAtom p vs & NAtom p vs : set ?list) |
       (EX p vs. ?a = NAtom p vs & PAtom p vs : set ?list))",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_app (template_hole 7, t_empty)))),
    ("Prover.fconj1",
     "[| (?n, (?m, FConj ?f ?g) # ?xs) : deriv ?nfs;
         ~ is_axiom (s_of_ns ((?m, FConj ?f ?g) # ?xs)) |]
      ==> (Suc ?n, ?xs @ [(0, ?f)]) : deriv ?nfs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 4),
                        template_app
                         (template_app (template_hole 8, template_var 3),
                          template_var 2))),
                    template_var 1))),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 4),
                          template_app
                           (template_app (template_hole 8, template_var 3),
                            template_var 2))),
                      template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 3, template_var 5)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_hole 1),
                         template_var 3)),
                     template_hole 0)))),
             template_app (template_hole 7, template_var 0))
           ))),
    ("Prover.fconj2",
     "[| (?n, (?m, FConj ?f ?g) # ?xs) : deriv ?nfs;
         ~ is_axiom (s_of_ns ((?m, FConj ?f ?g) # ?xs)) |]
      ==> (Suc ?n, ?xs @ [(0, ?g)]) : deriv ?nfs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 4),
                        template_app
                         (template_app (template_hole 8, template_var 3),
                          template_var 2))),
                    template_var 1))),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 4),
                          template_app
                           (template_app (template_hole 8, template_var 3),
                            template_var 2))),
                      template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 3, template_var 5)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_hole 1),
                         template_var 2)),
                     template_hole 0)))),
             template_app (template_hole 7, template_var 0))
           ))),
    ("Prover.natom",
     "[| (?n, (?m, NAtom ?p ?vs) # ?xs) : deriv ?nfs;
         ~ is_axiom (s_of_ns ((?m, NAtom ?p ?vs) # ?xs)) |]
      ==> (Suc ?n, ?xs @ [(0, NAtom ?p ?vs)]) : deriv ?nfs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 4),
                        template_app
                         (template_app (template_hole 8, template_var 3),
                          template_var 2))),
                    template_var 1))),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 4),
                          template_app
                           (template_app (template_hole 8, template_var 3),
                            template_var 2))),
                      template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 3, template_var 5)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_hole 1),
                         template_app
                          (template_app (template_hole 8, template_var 3),
                           template_var 2))),
                     template_hole 0)))),
             template_app (template_hole 7, template_var 0))
           ))),
    ("Prover.patom",
     "[| (?n, (?m, PAtom ?p ?vs) # ?xs) : deriv ?nfs;
         ~ is_axiom (s_of_ns ((?m, PAtom ?p ?vs) # ?xs)) |]
      ==> (Suc ?n, ?xs @ [(0, PAtom ?p ?vs)]) : deriv ?nfs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 4),
                        template_app
                         (template_app (template_hole 8, template_var 3),
                          template_var 2))),
                    template_var 1))),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 4),
                          template_app
                           (template_app (template_hole 8, template_var 3),
                            template_var 2))),
                      template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 3, template_var 5)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_hole 1),
                         template_app
                          (template_app (template_hole 8, template_var 3),
                           template_var 2))),
                     template_hole 0)))),
             template_app (template_hole 7, template_var 0))
           ))),
    ("Prover.fdisj",
     "[| (?n, (?m, FDisj ?f ?g) # ?xs) : deriv ?nfs;
         ~ is_axiom (s_of_ns ((?m, FDisj ?f ?g) # ?xs)) |]
      ==> (Suc ?n, ?xs @ [(0, ?f), (0, ?g)]) : deriv ?nfs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 5),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 4),
                        template_app
                         (template_app (template_hole 8, template_var 3),
                          template_var 2))),
                    template_var 1))),
              template_app (template_hole 7, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 10,
                        template_app
                         (template_app (template_hole 9, template_var 4),
                          template_app
                           (template_app (template_hole 8, template_var 3),
                            template_var 2))),
                      template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 3, template_var 5)),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 9, template_hole 1),
                         template_var 3)),
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app (template_hole 9, template_hole 1),
                           template_var 2)),
                       template_hole 0))))),
             template_app (template_hole 7, template_var 0))
           ))),
    ("Prover.fex",
     "[| (?n, (?m, FEx ?f) # ?xs) : deriv ?nfs;
         ~ is_axiom (s_of_ns ((?m, FEx ?f) # ?xs)) |]
      ==> (Suc ?n, ?xs @ [(0, finst ?f ?m), (Suc ?m, FEx ?f)])
          : deriv ?nfs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 4),
                  template_app
                   (template_app
                     (template_hole 11,
                      template_app
                       (template_app (template_hole 10, template_var 3),
                        template_app (template_hole 9, template_var 2))),
                    template_var 1))),
              template_app (template_hole 8, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app (template_hole 10, template_var 3),
                          template_app (template_hole 9, template_var 2))),
                      template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 4, template_var 4)),
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 10, template_hole 2),
                         template_app
                          (template_app (template_hole 1, template_var 2),
                           template_var 3))),
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_app
                            (template_hole 10,
                             template_app
                              (template_hole 4, template_var 3)),
                           template_app (template_hole 9, template_var 2))),
                       template_hole 0))))),
             template_app (template_hole 8, template_var 0))
           ))),
    ("Prover.fall",
     "[| (?n, (?m, FAll ?f) # ?xs) : deriv ?nfs;
         ~ is_axiom (s_of_ns ((?m, FAll ?f) # ?xs)) |]
      ==> (Suc ?n,
           ?xs @
           [(0, finst ?f (newvar (sfv (s_of_ns ((?m, FAll ?f) # ?xs)))))])
          : deriv ?nfs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 4),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app (template_hole 12, template_var 3),
                        template_app (template_hole 11, template_var 2))),
                    template_var 1))),
              template_app (template_hole 10, template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 13,
                        template_app
                         (template_app (template_hole 12, template_var 3),
                          template_app (template_hole 11, template_var 2))),
                      template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app
                  (template_hole 14,
                   template_app (template_hole 6, template_var 4)),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_app
                      (template_hole 13,
                       template_app
                        (template_app (template_hole 12, template_hole 4),
                         template_app
                          (template_app (template_hole 3, template_var 2),
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 7,
                                 template_app
                                  (template_app
                                    (template_hole 13,
                                     template_app
(template_app (template_hole 12, template_var 3),
 template_app (template_hole 11, template_var 2))),
                                   template_var 1))))))),
                     template_hole 0)))),
             template_app (template_hole 10, template_var 0))
           ))),
    ("Prover.soundness'",
     "[| init ?s; finite (deriv ?s); ?m : fst ` deriv ?s;
         ALL y u. (y, u) : deriv ?s --> y <= ?m |]
      ==> ALL n t. ?h = ?m - n & (n, t) : deriv ?s --> Svalid (s_of_ns t)",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 15,
              template_app (template_hole 14, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app (template_hole 12, template_hole 11),
                template_app (template_hole 14, template_var 2)))
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("Prover.ss",
     "subs (?x # ?xs) =
      (let (m, f) = ?x
       in case f of
          PAtom p vs =>
            if NAtom p vs : set (map snd ?xs) then []
            else [?xs @ [(0, PAtom p vs)]]
          | NAtom p vs =>
              if PAtom p vs : set (map snd ?xs) then []
              else [?xs @ [(0, NAtom p vs)]]
          | FConj f g => [?xs @ [(0, f)], ?xs @ [(0, g)]]
          | FDisj f g => [?xs @ [(0, f), (0, g)]]
          | FAll f =>
              [?xs @ [(0, finst f (newvar (sfv (s_of_ns (?x # ?xs)))))]]
          | FEx f => [?xs @ [(0, finst f m), (Suc m, FEx f)]])",
     template_equation
      (template_app
        (template_hole 23,
         template_app
          (template_app (template_hole 22, template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 21, template_var 1),
         template_app (template_hole 20, t_empty))))]
