Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation" via "Polynomial_Interpolation.Ring_Hom_Poly" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Cancellation" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.072s elapsed time, 0.305s cpu time, 0.009s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation")
### theory "HOL-Library.Monad_Syntax"
### 0.031s elapsed time, 0.122s cpu time, 0.000s GC time
Loading theory "Containers.Containers_Auxiliary" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization")
### theory "HOL-Combinatorics.Transposition"
### 0.117s elapsed time, 0.488s cpu time, 0.009s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "HOL-Combinatorics.Permutations" via "HOL-Library.Disjoint_Sets")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### Dropping global mixfix syntax: "less_eq_prod" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod" (infix \<open>\<sqsubset>\<close> 50)
### Dropping global mixfix syntax: "less_eq_prod'" (infix \<open>\<sqsubseteq>\<close> 50)
### Dropping global mixfix syntax: "less_prod'" (infix \<open>\<sqsubset>\<close> 50)
### theory "Containers.Containers_Auxiliary"
### 0.159s elapsed time, 0.629s cpu time, 0.049s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.106s elapsed time, 0.411s cpu time, 0.047s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" via "HOL-Computational_Algebra.Polynomial")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.390s elapsed time, 1.563s cpu time, 0.104s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Library.FuncSet"
### 0.523s elapsed time, 1.898s cpu time, 0.568s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "HOL-Algebra.Divisibility" via "HOL-Algebra.Coset" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
### theory "HOL-Library.Infinite_Set"
### 0.481s elapsed time, 1.724s cpu time, 0.592s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "HOL-Combinatorics.Permutations")
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.975s elapsed time, 3.709s cpu time, 0.696s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" via "HOL-Computational_Algebra.Polynomial")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Disjoint_Sets"
### 0.283s elapsed time, 1.129s cpu time, 0.102s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.More_List"
### 0.223s elapsed time, 0.874s cpu time, 0.212s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
Found termination order: "size_list size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.884s cpu time, 0.093s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Algebra.Congruence"
### 0.798s elapsed time, 3.135s cpu time, 0.424s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "HOL-Algebra.Divisibility" via "HOL-Algebra.Coset" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
### theory "HOL-Library.Nat_Bijection"
### 0.393s elapsed time, 1.542s cpu time, 0.301s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.ExtrEqs")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  mset :: "'a list => 'a multiset"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
consts
  flat :: "'a list stream => 'a stream"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Algebra.Order"
### 1.195s elapsed time, 4.529s cpu time, 1.141s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "HOL-Algebra.Divisibility" via "HOL-Algebra.Coset" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Stream"
### 1.207s elapsed time, 4.570s cpu time, 1.124s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
Found termination order: "size <*mlex*> {}"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
Found termination order: "size <*mlex*> {}"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 0.833s elapsed time, 3.295s cpu time, 0.291s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "HOL-Algebra.Divisibility" via "HOL-Algebra.Coset" via "HOL-Algebra.Group")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.901s elapsed time, 3.555s cpu time, 0.357s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Subresultants.More_Homomorphisms" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Conjugate")
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### theory "HOL-Library.Complex_Order"
### 0.063s elapsed time, 0.255s cpu time, 0.000s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Subresultants.More_Homomorphisms" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Tree"
### 2.388s elapsed time, 9.235s cpu time, 1.647s GC time
Loading theory "Draft.Templates" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.ExtrEqs")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.071s elapsed time, 0.285s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates")
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
### theory "HOL-Algebra.Complete_Lattice"
### 0.741s elapsed time, 2.919s cpu time, 0.317s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "HOL-Algebra.Divisibility" via "HOL-Algebra.Coset")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.187s elapsed time, 4.441s cpu time, 1.777s GC time
Loading theory "Sqrt_Babylonian.Sqrt_Babylonian_Auxiliary" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation" via "Polynomial_Interpolation.Is_Rat_To_Rat")
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
### theory "HOL-Library.Multiset"
### 4.653s elapsed time, 17.911s cpu time, 3.934s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" via "HOL-Computational_Algebra.Polynomial")
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
class linordered_idom = ring_char_0 + idom_abs_sgn +
  linordered_ring_strict + linordered_semidom +
  linordered_semiring_1_strict + ordered_comm_ring + ordered_ring_abs +
  assumes
    "sgn_if":
      "!!x. sgn x =
            (if x = (0::'a) then 0::'a
             else if (0::'a) < x then 1::'a else - (1::'a))"
### theory "Sqrt_Babylonian.Sqrt_Babylonian_Auxiliary"
### 0.501s elapsed time, 1.966s cpu time, 0.240s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization")
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "HOL-Algebra.Group"
### 2.141s elapsed time, 8.194s cpu time, 2.193s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "HOL-Algebra.Divisibility")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 1.567s elapsed time, 5.880s cpu time, 2.289s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Subresultants.More_Homomorphisms" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.515s elapsed time, 2.022s cpu time, 0.147s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Subresultants.More_Homomorphisms" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "Jordan_Normal_Form.Conjugate"
### 4.310s elapsed time, 16.453s cpu time, 4.591s GC time
Loading theory "HOL-Combinatorics.List_Permutation" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "HOL-Algebra.Divisibility")
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### theory "HOL-Combinatorics.List_Permutation"
### 0.111s elapsed time, 0.431s cpu time, 0.093s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Subresultants.More_Homomorphisms" via "Jordan_Normal_Form.Determinant")
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.098s elapsed time, 0.386s cpu time, 0.000s GC time
Loading theory "Polynomial_Interpolation.Is_Rat_To_Rat" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation")
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### theory "HOL-Algebra.Coset"
### 1.900s elapsed time, 7.188s cpu time, 2.362s GC time
Loading theory "HOL-Algebra.Divisibility" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization")
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale monoid_cancel
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "monoid_cancel G"
locale comm_monoid_cancel
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_monoid_cancel G"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
class is_rat = field_char_0 +
  fixes is_rat :: "'a => bool"
    and to_rat :: "'a => rat"
  assumes
    "is_rat":
      "!!x. is_rat x = (x : field_char_0.Rats (/) (1::'a) (+) (0::'a) (-))"
    and
    "to_rat":
      "!!x. to_rat x =
            (if x : field_char_0.Rats (/) (1::'a) (+) (0::'a) (-)
             then THE y.
                     x = field_char_0.of_rat (/) (1::'a) (+) (0::'a) (-) y
             else 0)"
instantiation
  rat :: is_rat
  is_rat_rat == is_rat :: rat => bool
  to_rat_rat == to_rat :: rat => rat
instantiation
  real :: is_rat
  is_rat_real == is_rat :: real => bool
  to_rat_real == to_rat :: real => rat
instantiation
  complex :: is_rat
  is_rat_complex == is_rat :: complex => bool
  to_rat_complex == to_rat :: complex => rat
### theory "Polynomial_Interpolation.Is_Rat_To_Rat"
### 1.038s elapsed time, 4.119s cpu time, 0.446s GC time
Loading theory "Matrix.Utility" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "Berlekamp_Zassenhaus.More_Missing_Multiset" via "Polynomial_Factorization.Missing_Multiset" via "Polynomial_Factorization.Missing_List")
locale factorial_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "factorial_monoid G"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "Matrix.Utility"
### 0.285s elapsed time, 1.125s cpu time, 0.119s GC time
Loading theory "Polynomial_Factorization.Missing_List" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "Berlekamp_Zassenhaus.More_Missing_Multiset" via "Polynomial_Factorization.Missing_Multiset")
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
Found termination order: "size_list length <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
Found termination order: "length <*mlex*> {}"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale gcd_condition_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "gcd_condition_monoid G"
consts
  list_union :: "'a list => 'a list => 'a list"
locale primeness_condition_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "primeness_condition_monoid G"
locale divisor_chain_condition_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "divisor_chain_condition_monoid G"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
consts
  list_diff :: "'a list => 'a list => 'a list"
### Ignoring duplicate rewrite rule:
### set ?xs1 <= set ?ys1 == list_all (%x. x : set ?ys1) ?xs1
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Algebra.Ring"
### 2.885s elapsed time, 11.432s cpu time, 1.152s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Subresultants.More_Homomorphisms" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### Missing patterns in function definition:
### min_list [] = undefined
Found termination order: "length <*mlex*> {}"
consts
  permut_aux :: "'a list => (nat => nat) => 'a list => 'a list"
### theory "HOL-Algebra.Divisibility"
### 2.470s elapsed time, 9.795s cpu time, 1.025s GC time
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Subresultants.More_Homomorphisms" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination" via "Jordan_Normal_Form.Matrix")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Polynomial_Factorization.Missing_List"
### 1.941s elapsed time, 7.700s cpu time, 0.810s GC time
Loading theory "Polynomial_Factorization.Missing_Multiset" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization" via "Berlekamp_Zassenhaus.More_Missing_Multiset")
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
### theory "Polynomial_Factorization.Missing_Multiset"
### 0.219s elapsed time, 0.880s cpu time, 0.000s GC time
Loading theory "Berlekamp_Zassenhaus.More_Missing_Multiset" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization")
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "Berlekamp_Zassenhaus.More_Missing_Multiset"
### 0.248s elapsed time, 0.983s cpu time, 0.112s GC time
Loading theory "Polynomial_Interpolation.Divmod_Int" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation")
### theory "Polynomial_Interpolation.Divmod_Int"
### 0.035s elapsed time, 0.143s cpu time, 0.000s GC time
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
essentially_equal ?G ?fs1.0 ?fs2.0 =
(EX fs1'. mset ?fs1.0 = mset fs1' & fs1' [\<sim>]\<^bsub>?G\<^esub> ?fs2.0)
### theory "HOL-Algebra.Module"
### 1.519s elapsed time, 6.044s cpu time, 0.498s GC time
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 7.538s elapsed time, 28.315s cpu time, 4.308s GC time
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation" via "Polynomial_Interpolation.Ring_Hom_Poly" via "Polynomial_Interpolation.Missing_Polynomial")
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation" via "Polynomial_Interpolation.Ring_Hom_Poly")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "HOL-Computational_Algebra.Fundamental_Theorem_Algebra")
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.263s elapsed time, 5.098s cpu time, 0.395s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation" via "Polynomial_Interpolation.Ring_Hom_Poly")
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Jordan_Normal_Form.Missing_Ring"
### 3.611s elapsed time, 13.197s cpu time, 0.938s GC time
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
### theory "Polynomial_Interpolation.Ring_Hom"
### 2.960s elapsed time, 9.391s cpu time, 0.786s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Subresultants.More_Homomorphisms" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations" via "Jordan_Normal_Form.Gauss_Jordan_Elimination")
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
### theory "HOL-Computational_Algebra.Polynomial"
### 5.499s elapsed time, 18.264s cpu time, 1.328s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim")
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.272s elapsed time, 0.846s cpu time, 0.160s GC time
Found termination order: "{}"
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "length <*mlex*> {}"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
### theory "Jordan_Normal_Form.Matrix"
### 3.135s elapsed time, 8.141s cpu time, 0.736s GC time
Loading theory "Jordan_Normal_Form.Gauss_Jordan_Elimination" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Subresultants.More_Homomorphisms" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 8.325s elapsed time, 24.732s cpu time, 2.176s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation" via "Polynomial_Interpolation.Ring_Hom_Poly" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Factorization.Gauss_Lemma")
Loading theory "HOL-Computational_Algebra.Field_as_Ring" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Factorization.Gauss_Lemma")
### theory "Jordan_Normal_Form.Gauss_Jordan_Elimination"
### 0.917s elapsed time, 1.957s cpu time, 0.258s GC time
Loading theory "Jordan_Normal_Form.Column_Operations" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Subresultants.More_Homomorphisms" via "Jordan_Normal_Form.Determinant")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Primes"
### 0.324s elapsed time, 1.296s cpu time, 0.198s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale fract_as_normalized_quot
### theory "Jordan_Normal_Form.Column_Operations"
### 0.405s elapsed time, 1.552s cpu time, 0.198s GC time
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.497s elapsed time, 1.737s cpu time, 0.198s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation" via "Polynomial_Interpolation.Ring_Hom_Poly" via "Polynomial_Interpolation.Missing_Polynomial")
class field = division_ring + idom_divide +
  assumes "field_inverse": "!!a. a ~= (0::'a) ==> inverse a * a = (1::'a)"
  assumes "field_divide_inverse": "!!a b. a / b = a * inverse b"
  assumes "field_inverse_zero": "inverse (0::'a) = (0::'a)"
instantiation
  real ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_real == division_segment :: real => real
  normalize_real == normalize :: real => real
  unit_factor_real == unit_factor :: real => real
  euclidean_size_real == euclidean_size :: real => nat
  modulo_real == modulo :: real => real => real
instantiation
  real :: euclidean_ring_gcd
  Gcd_real == Gcd :: real set => real
  Lcm_real == Lcm :: real set => real
  gcd_real == gcd :: real => real => real
  lcm_real == lcm :: real => real => real
instantiation
  rat ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_rat == division_segment :: rat => rat
  normalize_rat == normalize :: rat => rat
  unit_factor_rat == unit_factor :: rat => rat
  euclidean_size_rat == euclidean_size :: rat => nat
  modulo_rat == modulo :: rat => rat => rat
instantiation
  rat :: euclidean_ring_gcd
  Gcd_rat == Gcd :: rat set => rat
  Lcm_rat == Lcm :: rat set => rat
  gcd_rat == gcd :: rat => rat => rat
  lcm_rat == lcm :: rat => rat => rat
instantiation
  complex ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_complex == division_segment :: complex => complex
  normalize_complex == normalize :: complex => complex
  unit_factor_complex == unit_factor :: complex => complex
  euclidean_size_complex == euclidean_size :: complex => nat
  modulo_complex == modulo :: complex => complex => complex
### Cannot skip proof of schematic goal statement
instantiation
  complex :: euclidean_ring_gcd
  Gcd_complex == Gcd :: complex set => complex
  Lcm_complex == Lcm :: complex set => complex
  gcd_complex == gcd :: complex => complex => complex
  lcm_complex == lcm :: complex => complex => complex
### theory "HOL-Computational_Algebra.Field_as_Ring"
### 1.016s elapsed time, 2.929s cpu time, 0.313s GC time
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.832s elapsed time, 1.483s cpu time, 0.115s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation" via "Polynomial_Interpolation.Ring_Hom_Poly")
Loading theory "Jordan_Normal_Form.Determinant" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Subresultants.More_Homomorphisms")
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 0.722s elapsed time, 1.528s cpu time, 0.173s GC time
Loading theory "Polynomial_Factorization.Missing_Polynomial_Factorial" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Factorization.Gauss_Lemma")
Loading theory "Polynomial_Factorization.Order_Polynomial" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Factorization.Square_Free_Factorization")
Loading theory "Polynomial_Factorization.Polynomial_Divisibility" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly" via "Berlekamp_Zassenhaus.Unique_Factorization")
### theory "Polynomial_Factorization.Polynomial_Divisibility"
### 0.084s elapsed time, 0.337s cpu time, 0.000s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Interpolation.Newton_Interpolation")
### Ignoring duplicate rewrite rule:
### is_unit ?p1 == ?p1 ~= 0 & degree ?p1 = 0
### theory "Polynomial_Factorization.Order_Polynomial"
### 0.106s elapsed time, 0.427s cpu time, 0.000s GC time
Loading theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Polynomial_Factorization.Square_Free_Factorization")
### theory "Polynomial_Factorization.Missing_Polynomial_Factorial"
### 0.120s elapsed time, 0.475s cpu time, 0.000s GC time
### theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized"
### 0.367s elapsed time, 1.164s cpu time, 0.236s GC time
### theory "Jordan_Normal_Form.Determinant"
### 1.292s elapsed time, 3.371s cpu time, 0.409s GC time
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 2.799s elapsed time, 7.163s cpu time, 4.863s GC time
Loading theory "Berlekamp_Zassenhaus.Unique_Factorization" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly")
Loading theory "Polynomial_Factorization.Gauss_Lemma" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim")
Loading theory "Polynomial_Factorization.Square_Free_Factorization" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim")
Loading theory "Polynomial_Interpolation.Newton_Interpolation" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim")
locale yun_gcd
  fixes Gcd :: "'a poly => 'a poly => 'a poly"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "Polynomial_Factorization.Gauss_Lemma"
### 1.206s elapsed time, 4.807s cpu time, 0.270s GC time
Loading theory "Subresultants.More_Homomorphisms" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim" via "Berlekamp_Zassenhaus.Unique_Factorization_Poly")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### Missing patterns in function definition:
### !!v va b c. divided_differences_impl (v # va) b c [] = undefined
locale monic_factorization
  fixes as :: "('a poly * nat) set"
    and p :: "'a poly"
  assumes "monic_factorization as p"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
Found termination order: "(%p. length (snd (snd (snd p)))) <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order:
  "case_sum (case_sum size size) (case_sum size size) <*mlex*>
   case_sum (case_sum (%x. Suc 0) (%x. 0)) (%x. 0) <*mlex*>
   case_sum (%x. 0) (case_sum (%x. 0) (%x. Suc 0)) <*mlex*> {}"
### Rewrite rule not in simpset:
### [:?x1 * ?y1:] == [:?x1:] * [:?y1:]
### Rewrite rule not in simpset:
### [:?x1 + ?y1:] == [:?x1:] + [:?y1:]
### Rewrite rule not in simpset:
### [:- ?x1:] == - [:?x1:]
### Missing patterns in function definition:
### !!v va b c. divided_differences_impl_int (v # va) b c [] = undefined
### theory "Subresultants.More_Homomorphisms"
### 0.766s elapsed time, 3.045s cpu time, 0.427s GC time
Loading theory "Subresultants.Resultant_Prelim" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Resultant")
locale field_hom_0'
  fixes hom :: "'a => 'b"
  assumes "field_hom_0' hom"
Found termination order:
  "(%p. size_list (nat o abs) (snd (snd (snd p)))) <*mlex*> {}"
### theory "Polynomial_Factorization.Square_Free_Factorization"
### 2.135s elapsed time, 8.493s cpu time, 0.791s GC time
Found termination order: "(%p. size_list (nat o abs) (snd p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Newton_Interpolation"
### 2.371s elapsed time, 9.222s cpu time, 0.791s GC time
### theory "Subresultants.Resultant_Prelim"
### 0.465s elapsed time, 1.503s cpu time, 0.094s GC time
class ufd = idom +
  assumes
    "mset_factors_exist":
      "!!x. [| x ~= (0::'a); ~ x dvd (1::'a) |] ==> EX F. mset_factors F x"
    and
    "mset_factors_unique":
      "!!x F G.
          [| mset_factors F x; mset_factors G x |] ==> rel_mset (ddvd) F G"
class ufd = idom +
  assumes
    "mset_factors_exist":
      "!!x. [| x ~= (0::'a); ~ x dvd (1::'a) |] ==> EX F. mset_factors F x"
    and
    "mset_factors_unique":
      "!!x F G.
          [| mset_factors F x; mset_factors G x |] ==> rel_mset (ddvd) F G"
locale comm_semiring_1_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_1_hom hom"
locale irreducibility_hom
  fixes hom :: "'a => 'b"
  assumes "irreducibility_hom hom"
locale unit_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "unit_preserving_hom hom"
locale factor_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "factor_preserving_hom hom"
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
class comm_monoid_gcd = gcd + comm_semiring_1 +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
class comm_monoid_gcd = gcd + comm_semiring_1 +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
locale gcd_condition
  fixes ty :: "'a itself"
  assumes "gcd_condition TYPE('a)"
### Cannot skip proof of schematic goal statement
### theory "Berlekamp_Zassenhaus.Unique_Factorization"
### 5.974s elapsed time, 13.091s cpu time, 1.061s GC time
Loading theory "Berlekamp_Zassenhaus.Unique_Factorization_Poly" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Algebraic_Numbers_Prelim")
instantiation
  fract :: (idom) {normalization_euclidean_semiring,euclidean_ring}
  normalize_fract == normalize :: 'a fract => 'a fract
  unit_factor_fract == unit_factor :: 'a fract => 'a fract
  euclidean_size_fract == euclidean_size :: 'a fract => nat
  modulo_fract == modulo :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (idom) euclidean_ring_gcd
  Gcd_fract == Gcd :: 'a fract set => 'a fract
  Lcm_fract == Lcm :: 'a fract set => 'a fract
  gcd_fract == gcd :: 'a fract => 'a fract => 'a fract
  lcm_fract == lcm :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (idom) unique_euclidean_ring
  division_segment_fract == division_segment :: 'a fract => 'a fract
### theory "Berlekamp_Zassenhaus.Unique_Factorization_Poly"
### 1.081s elapsed time, 1.169s cpu time, 0.066s GC time
Loading theory "Algebraic_Numbers.Algebraic_Numbers_Prelim" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers")
Loading theory "Algebraic_Numbers.Bivariate_Polynomials" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers" via "Algebraic_Numbers.Resultant")
### theory "Algebraic_Numbers.Bivariate_Polynomials"
### 1.071s elapsed time, 2.289s cpu time, 0.310s GC time
Loading theory "Algebraic_Numbers.Resultant" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW" via "Algebraic_Numbers.Algebraic_Numbers")
### Ignoring duplicate rewrite rule:
### content (pCons ?a1 ?p1) == gcd ?a1 (content ?p1)
locale dvd_preserving_hom
  fixes hom :: "'a => 'b"
  assumes "dvd_preserving_hom hom"
Found termination order: "length <*mlex*> {}"
### theory "Algebraic_Numbers.Algebraic_Numbers_Prelim"
### 1.457s elapsed time, 3.133s cpu time, 0.464s GC time
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "Algebraic_Numbers.Resultant"
### 1.175s elapsed time, 1.670s cpu time, 0.154s GC time
Loading theory "Algebraic_Numbers.Algebraic_Numbers" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates" via "Draft.More_Algebraic_Numbers_HLW")
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
### theory "Algebraic_Numbers.Algebraic_Numbers"
### 0.994s elapsed time, 1.133s cpu time, 0.187s GC time
Loading theory "Draft.More_Algebraic_Numbers_HLW" (required by "Draft.More_Algebraic_Numbers_HLWMoreTemplates")
### Ignoring duplicate rewrite rule:
### algebraic (0::?'a1) == True
### Ignoring duplicate rewrite rule:
### algebraic (1::?'a1) == True
### theory "Draft.More_Algebraic_Numbers_HLW"
### 0.133s elapsed time, 0.275s cpu time, 0.165s GC time
Loading theory "Draft.More_Algebraic_Numbers_HLWMoreTemplates"
val templateLemmas =
   [("More_Algebraic_Numbers_HLW.algebraic_int_fact",
     "algebraic_int (fact ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("More_Algebraic_Numbers_HLW.algebraic_inverse_iff",
     "algebraic (inverse ?y) = algebraic ?y",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("More_Algebraic_Numbers_HLW.algebraic_uminus_iff",
     "algebraic (- ?x) = algebraic ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("More_Algebraic_Numbers_HLW.algebraic_csqrt_iff",
     "algebraic (csqrt ?x) = algebraic ?x",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("More_Algebraic_Numbers_HLW.algebraic_csqrt",
     "algebraic ?x ==> algebraic (csqrt ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("More_Algebraic_Numbers_HLW.in_Ints_imp_algebraic",
     "?x : \<int> ==> algebraic ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("More_Algebraic_Numbers_HLW.in_Rats_imp_algebraic",
     "?x : \<rat> ==> algebraic ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("More_Algebraic_Numbers_HLW.algebraic_power",
     "algebraic ?x ==> algebraic (?x ^ ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("More_Algebraic_Numbers_HLW.algebraic_diff_cancel_left",
     "algebraic ?x ==> algebraic (?x - ?y) = algebraic ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("More_Algebraic_Numbers_HLW.algebraic_add_cancel_left",
     "algebraic ?x ==> algebraic (?x + ?y) = algebraic ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("More_Algebraic_Numbers_HLW.algebraic_diff_cancel_right",
     "algebraic ?y ==> algebraic (?x - ?y) = algebraic ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("More_Algebraic_Numbers_HLW.algebraic_add_cancel_right",
     "algebraic ?y ==> algebraic (?x + ?y) = algebraic ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("More_Algebraic_Numbers_HLW.algebraic_power_iff",
     "0 < ?n ==> algebraic (?x ^ ?n) = algebraic ?x",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("More_Algebraic_Numbers_HLW.algebraic_minus",
     "[| algebraic ?x; algebraic ?y |] ==> algebraic (?x - ?y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("More_Algebraic_Numbers_HLW.algebraic_sum_list",
     "(!!x. x : set ?xs ==> algebraic x) ==> algebraic (sum_list ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("More_Algebraic_Numbers_HLW.algebraic_prod_list",
     "(!!x. x : set ?xs ==> algebraic x) ==> algebraic (prod_list ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("More_Algebraic_Numbers_HLW.algebraic_sum_mset",
     "(!!x. x :# ?A ==> algebraic x) ==> algebraic (\<Sum>\<^sub># ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("More_Algebraic_Numbers_HLW.algebraic_prod_mset",
     "(!!x. x :# ?A ==> algebraic x) ==> algebraic (\<Prod>\<^sub># ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("More_Algebraic_Numbers_HLW.algebraic_sum",
     "(!!x. x : ?A ==> algebraic (?f x)) ==> algebraic (sum ?f ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("More_Algebraic_Numbers_HLW.algebraic_prod",
     "(!!x. x : ?A ==> algebraic (?f x)) ==> algebraic (prod ?f ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("More_Algebraic_Numbers_HLW.algebraic_mult_cancel_left",
     "[| algebraic ?x; ?x ~= (0::?'a) |]
      ==> algebraic (?x * ?y) = algebraic ?y",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 5, template_var 0)))),
    ("More_Algebraic_Numbers_HLW.algebraic_divide_cancel_left",
     "[| algebraic ?x; ?x ~= (0::?'a) |]
      ==> algebraic (?x / ?y) = algebraic ?y",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 5, template_var 0)))),
    ("More_Algebraic_Numbers_HLW.algebraic_mult_cancel_right",
     "[| algebraic ?y; ?y ~= (0::?'a) |]
      ==> algebraic (?x * ?y) = algebraic ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 5, template_var 0)))),
    ("More_Algebraic_Numbers_HLW.algebraic_divide_cancel_right",
     "[| algebraic ?y; ?y ~= (0::?'a) |]
      ==> algebraic (?x / ?y) = algebraic ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 5, template_var 0)))),
    ("More_Algebraic_Numbers_HLW.algebraic_imp_algebraic_int",
     "[| ipoly ?p ?x = (0::?'a); ?p ~= 0 |]
      ==> algebraic_int (of_int (lead_coeff ?p) * ?x)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_var 1)),
            template_var 0),
          template_hole 7),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_app (template_hole 0, template_var 1)))),
               template_var 0))
           ))),
    ("More_Algebraic_Numbers_HLW.algebraic_imp_algebraic_int'",
     "[| ipoly ?p ?x = (0::?'a); ?p ~= 0; lead_coeff ?p dvd ?c |]
      ==> algebraic_int (of_int ?c * ?x)",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 2)),
            template_var 1),
          template_hole 8),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app (template_hole 2, template_var 2))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 9, template_var 0)),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.More_Algebraic_Numbers_HLWMoreTemplates"
### 0.823s elapsed time, 1.026s cpu time, 0.000s GC time
val it = (): unit
