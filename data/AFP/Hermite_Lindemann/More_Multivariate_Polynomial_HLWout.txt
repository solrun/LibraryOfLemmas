Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.Cancellation" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
  Proving monotonicity ...
### theory "HOL-Combinatorics.Transposition"
### 0.112s elapsed time, 0.476s cpu time, 0.000s GC time
Loading theory "HOL-Library.Fun_Lexorder" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
### theory "HOL-Library.Fun_Lexorder"
### 0.054s elapsed time, 0.216s cpu time, 0.000s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.399s elapsed time, 1.601s cpu time, 0.084s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.555s elapsed time, 2.189s cpu time, 0.167s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "HOL-Library.FuncSet"
### 0.441s elapsed time, 1.707s cpu time, 0.239s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "HOL-Combinatorics.Permutations")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.518s cpu time, 0.073s GC time
Loading theory "HOL-Library.Groups_Big_Fun" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type" via "HOL-Library.Poly_Mapping")
locale comm_monoid_fun
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_fun (\<^bold>*) \<^bold>1"
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### Cannot skip proof of schematic goal statement
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### Cannot skip proof of schematic goal statement
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.081s elapsed time, 4.125s cpu time, 0.737s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.Groups_Big_Fun"
### 0.420s elapsed time, 1.510s cpu time, 0.498s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
### theory "HOL-Library.Disjoint_Sets"
### 0.551s elapsed time, 2.035s cpu time, 0.498s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Library.More_List"
### 0.207s elapsed time, 0.816s cpu time, 0.107s GC time
Loading theory "HOL-Library.Poly_Mapping" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Polynomials.More_MPoly_Type" via "Polynomials.MPoly_Type")
### theory "HOL-Library.Infinite_Set"
### 0.336s elapsed time, 1.320s cpu time, 0.193s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Nat_Bijection"
### 0.351s elapsed time, 1.380s cpu time, 0.193s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.ExtrEqs")
class zero = type +
  fixes zero :: "'a"
### theory "HOL-Library.Set_Algebras"
### 0.238s elapsed time, 0.943s cpu time, 0.097s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class monoid_add = semigroup_add + zero +
  assumes "add_0_left": "!!a. (0::'a) + a = a"
    and "add_0_right": "!!a. a + (0::'a) = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
class group_add = cancel_semigroup_add + minus + monoid_add + uminus +
  assumes "left_minus": "!!a. - a + a = (0::'a)"
  assumes "add_uminus_conv_diff": "!!a b. a + - b = a - b"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
instantiation
  poly_mapping :: (type, zero) zero
  zero_poly_mapping == zero_class.zero :: 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (type, monoid_add) monoid_add
  plus_poly_mapping == plus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (type, cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly_mapping == minus ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
instantiation
  poly_mapping :: (type, ab_group_add) ab_group_add
  uminus_poly_mapping == uminus ::
    ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
consts
  shift :: "'a list => 'a stream => 'a stream"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
instantiation
  poly_mapping :: (zero, zero_neq_one) zero_neq_one
  one_poly_mapping == one_class.one :: 'a \<Rightarrow>\<^sub>0 'b
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  poly_mapping :: (monoid_add, semiring_0) semiring_0
  times_poly_mapping == times ::
    ('a \<Rightarrow>\<^sub>0 'b)
    => ('a \<Rightarrow>\<^sub>0 'b) => 'a \<Rightarrow>\<^sub>0 'b
consts
  snth :: "'a stream => nat => 'a"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  poly_mapping :: (linorder, {zero,linorder}) linorder
  less_eq_poly_mapping == less_eq ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
  less_poly_mapping == less ::
    ('a \<Rightarrow>\<^sub>0 'b) => ('a \<Rightarrow>\<^sub>0 'b) => bool
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  mset :: "'a list => 'a multiset"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.258s elapsed time, 4.769s cpu time, 1.331s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
instantiation
  poly_mapping :: (type, zero) size
  size_poly_mapping == size :: ('a \<Rightarrow>\<^sub>0 'b) => nat
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Poly_Mapping"
### 1.663s elapsed time, 6.368s cpu time, 1.505s GC time
Loading theory "Polynomials.MPoly_Type" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Polynomials.More_MPoly_Type")
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
### Generation of a parametrized correspondence relation failed.
### Reason:  No relator for the type "Poly_Mapping.poly_mapping" found.
instantiation
  mpoly :: (zero) zero
  zero_mpoly == zero_class.zero :: 'a mpoly
instantiation
  mpoly :: (monoid_add) monoid_add
  plus_mpoly == plus :: 'a mpoly => 'a mpoly => 'a mpoly
instantiation
  mpoly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_mpoly == minus :: 'a mpoly => 'a mpoly => 'a mpoly
Found termination order: "size <*mlex*> {}"
instantiation
  mpoly :: (ab_group_add) ab_group_add
  uminus_mpoly == uminus :: 'a mpoly => 'a mpoly
instantiation
  mpoly :: (zero_neq_one) zero_neq_one
  one_mpoly == one_class.one :: 'a mpoly
instantiation
  mpoly :: (semiring_0) semiring_0
  times_mpoly == times :: 'a mpoly => 'a mpoly => 'a mpoly
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Ambiguous input (line 494 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>div" ("_position" x) ("_position" y))
###     ("_The" ("_position" q')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" q')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" q)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 498 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^fixed>mod" ("_position" x) ("_position" y))
###     ("_The" ("_position" r')
###       ("\<^const>HOL.Ex_binder"
###         ("_idts" ("_position" a) ("_idts" ("_position" q) ("_position" r)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" pseudo_divmod_rel)
###             ("_cargs" ("_position" a)
###               ("_cargs" ("_position" x)
###                 ("_cargs" ("_position" y)
###                   ("_cargs" ("_position" q) ("_position" r))))))
###           ("\<^const>HOL.eq" ("_position" r')
###             ("_applC" ("_position" smult)
###               ("_cargs" ("_applC" ("_position" inverse) ("_position" a))
###                 ("_position" r)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 502 of "$AFP/Polynomials/MPoly_Type.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>Rings.modulo_class.modulo" ("_position" p)
###           ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple"
###       ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" divmod)
###       ("_cargs" ("_position" p) ("_position" q)))
###     ("_tuple" ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###       ("_tuple_arg"
###         ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 505 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.divide_class.divide" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.div" ("_position" p) ("_position" q))
###     ("_applC" ("_position" fst)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 509 of "$AFP/Polynomials/MPoly_Type.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Rings.modulo_class.modulo" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>MPoly_Type.mod" ("_position" p) ("_position" q))
###     ("_applC" ("_position" snd)
###       ("_applC" ("_position" divmod)
###         ("_cargs" ("_position" p) ("_position" q))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Polynomials.MPoly_Type"
### 0.874s elapsed time, 3.256s cpu time, 1.297s GC time
Loading theory "Polynomials.More_MPoly_Type" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.216s elapsed time, 4.597s cpu time, 1.491s GC time
MPoly (mapping_of ?x) = ?x
?y : UNIV ==> mapping_of (MPoly ?y) = ?y
(mapping_of ?x = mapping_of ?y) = (?x = ?y)
[| ?x : UNIV; ?y : UNIV |] ==> (MPoly ?x = MPoly ?y) = (?x = ?y)
[| ?y : UNIV; !!x. ?P (mapping_of x) |] ==> ?P ?y
(!!y. y : UNIV ==> ?P (MPoly y)) ==> ?P ?x
[| ?y : UNIV; !!x. ?y = mapping_of x ==> ?P |] ==> ?P
(!!y. [| ?x = MPoly y; y : UNIV |] ==> ?P) ==> ?P
### theory "Polynomials.More_MPoly_Type"
### 0.327s elapsed time, 1.309s cpu time, 0.196s GC time
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
"(Gcd (coeffs
        (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
          6 +
         M [(1::'b) + (1::'b), 0::'b,
            (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
          8)),
  sdiv
   (Gcd (coeffs
          (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
            6 +
           M [(1::'b) + (1::'b), 0::'b,
              (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
            8)))
   (M [1::'b, (1::'b) + (1::'b), (1::'b) + (1::'b) + (1::'b)] 4 +
    M [(1::'b) + (1::'b), 0::'b, (1::'b) + (1::'b) + ((1::'b) + (1::'b))]
     6 +
    M [(1::'b) + (1::'b), 0::'b,
       (1::'b) + (1::'b) + ((1::'b) + (1::'b)) + (1::'b)]
     8))"
  :: "'a * 'a mpoly"
### theory "HOL-Library.Tree"
### 2.775s elapsed time, 10.337s cpu time, 2.941s GC time
Loading theory "Draft.Templates" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates")
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 4.527s elapsed time, 16.088s cpu time, 3.895s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.597s elapsed time, 1.468s cpu time, 0.219s GC time
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 0.812s elapsed time, 1.959s cpu time, 0.366s GC time
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.552s elapsed time, 5.893s cpu time, 0.685s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 0.988s elapsed time, 3.184s cpu time, 0.382s GC time
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.611s elapsed time, 10.831s cpu time, 1.300s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.195s elapsed time, 0.391s cpu time, 0.000s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 6.881s elapsed time, 13.581s cpu time, 1.517s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial" via "HOL-Computational_Algebra.Polynomial_Factorial")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Nth_Powers")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Computational_Algebra.Primes"
### 0.197s elapsed time, 0.615s cpu time, 0.000s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Squarefree"
### 0.169s elapsed time, 0.658s cpu time, 0.198s GC time
### theory "HOL-Computational_Algebra.Nth_Powers"
### 0.199s elapsed time, 0.758s cpu time, 0.198s GC time
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.430s elapsed time, 1.494s cpu time, 0.272s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial" via "Polynomial_Interpolation.Missing_Polynomial")
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
### Cannot skip proof of schematic goal statement
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.901s elapsed time, 2.046s cpu time, 0.371s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" via "Polynomial_Factorization.Order_Polynomial")
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 0.755s elapsed time, 1.640s cpu time, 0.274s GC time
Loading theory "Polynomial_Factorization.Order_Polynomial" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
### theory "Polynomial_Factorization.Order_Polynomial"
### 0.760s elapsed time, 2.648s cpu time, 2.501s GC time
Loading theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized"
### 0.279s elapsed time, 0.596s cpu time, 0.065s GC time
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 3.605s elapsed time, 8.817s cpu time, 3.534s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.386s elapsed time, 0.399s cpu time, 0.000s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 1.443s elapsed time, 1.669s cpu time, 0.307s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials" via "Symmetric_Polynomials.Vieta")
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 0.923s elapsed time, 0.973s cpu time, 0.061s GC time
Loading theory "Symmetric_Polynomials.Vieta" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" via "Symmetric_Polynomials.Symmetric_Polynomials")
### theory "Symmetric_Polynomials.Vieta"
### 0.519s elapsed time, 0.520s cpu time, 0.000s GC time
Loading theory "Symmetric_Polynomials.Symmetric_Polynomials" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW" via "Power_Sum_Polynomials.Power_Sum_Polynomials_Library")
### Ignoring duplicate rewrite rule:
### length (sorted_list_of_set ?A1) == card ?A1
locale ring_closed
  fixes A :: "'a set"
  assumes "ring_closed A"
locale ring_homomorphism
  fixes f :: "'a => 'b"
  assumes "ring_homomorphism f"
### theory "Symmetric_Polynomials.Symmetric_Polynomials"
### 1.495s elapsed time, 1.728s cpu time, 0.316s GC time
Loading theory "Power_Sum_Polynomials.Power_Sum_Polynomials_Library" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates" via "Draft.More_Multivariate_Polynomial_HLW")
### theory "Power_Sum_Polynomials.Power_Sum_Polynomials_Library"
### 0.469s elapsed time, 0.529s cpu time, 0.082s GC time
Loading theory "Draft.More_Multivariate_Polynomial_HLW" (required by "Draft.More_Multivariate_Polynomial_HLWMoreTemplates")
### theory "Draft.More_Multivariate_Polynomial_HLW"
### 0.110s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.More_Multivariate_Polynomial_HLWMoreTemplates"
val templateLemmas =
   [("More_Multivariate_Polynomial_HLW.mpoly_of_poly_0",
     "mpoly_of_poly ?i 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("More_Multivariate_Polynomial_HLW.mpoly_of_poly_1",
     "mpoly_of_poly ?i 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("More_Multivariate_Polynomial_HLW.Const_conv_monom",
     "Const ?c = MPoly_Type.monom 0 ?c",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("More_Multivariate_Polynomial_HLW.Var_altdef",
     "Var ?i = MPoly_Type.monom (Poly_Mapping.single ?i 1) (1::?'a)",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("More_Multivariate_Polynomial_HLW.smult_conv_mult_Const",
     "MPoly_Type.smult ?c ?p = Const ?c * ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("More_Multivariate_Polynomial_HLW.mapping_of_mpoly_of_poly",
     "mapping_of (mpoly_of_poly ?i ?p) = mpoly_of_poly_aux ?i ?p",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("More_Multivariate_Polynomial_HLW.vars_mpoly_of_poly",
     "vars (mpoly_of_poly ?i ?p) <= {?i}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("More_Multivariate_Polynomial_HLW.poly_mapping_single_eq_0_iff",
     "(Poly_Mapping.single ?i ?n = 0) = (?n = (0::?'b))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("More_Multivariate_Polynomial_HLW.mpoly_of_poly_uminus",
     "mpoly_of_poly ?i (- ?p) = - mpoly_of_poly ?i ?p",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("More_Multivariate_Polynomial_HLW.insertion_mpoly_of_poly",
     "insertion ?f (mpoly_of_poly ?i ?p) = poly ?p (?f ?i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app (template_var 2, template_var 1)))),
    ("More_Multivariate_Polynomial_HLW.coeff_mpoly_of_poly1",
     "MPoly_Type.coeff (mpoly_of_poly ?i ?p) (Poly_Mapping.single ?i ?n) =
      poly.coeff ?p ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("More_Multivariate_Polynomial_HLW.mpoly_of_poly_smult",
     "mpoly_of_poly ?i (Polynomial.smult ?c ?p) =
      MPoly_Type.smult ?c (mpoly_of_poly ?i ?p)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("More_Multivariate_Polynomial_HLW.mpoly_of_poly_mult",
     "mpoly_of_poly ?i (?p * ?q) =
      mpoly_of_poly ?i ?p * mpoly_of_poly ?i ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("More_Multivariate_Polynomial_HLW.mpoly_of_poly_add",
     "mpoly_of_poly ?i (?p + ?q) =
      mpoly_of_poly ?i ?p + mpoly_of_poly ?i ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("More_Multivariate_Polynomial_HLW.mpoly_of_poly_diff",
     "mpoly_of_poly ?i (?p - ?q) =
      mpoly_of_poly ?i ?p - mpoly_of_poly ?i ?q",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("More_Multivariate_Polynomial_HLW.mpoly_map_vars_Var",
     "bij ?f ==> mpoly_map_vars ?f (Var ?i) = Var (?f ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_hole 3),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_var 1, template_var 0))))),
    ("More_Multivariate_Polynomial_HLW.mpoly_of_poly_pCons",
     "mpoly_of_poly ?i (pCons ?c ?p) =
      Const ?c + Var ?i * mpoly_of_poly ?i ?p",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0))))),
    ("More_Multivariate_Polynomial_HLW.mpoly_map_vars_mpoly_of_poly",
     "bij ?f ==>
      mpoly_map_vars ?f (mpoly_of_poly ?i ?p) = mpoly_of_poly (?f ?i) ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_hole 3),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 1)),
           template_var 0)))),
    ("More_Multivariate_Polynomial_HLW.coeff_mpoly_of_poly2",
     "~ keys ?x <= {?i} ==>
      MPoly_Type.coeff (mpoly_of_poly ?i ?p) ?x = (0::?'a)",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_hole 0))),
    ("More_Multivariate_Polynomial_HLW.coeff_mpoly_of_poly",
     "MPoly_Type.coeff (mpoly_of_poly ?i ?p) ?m =
      (poly.coeff ?p (lookup ?m ?i) when keys ?m <= {?i})",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("More_Multivariate_Polynomial_HLW.symmetric_mpoly_symmetric_prod'",
     "[| !!\<pi>. \<pi> permutes ?A ==> ?g \<pi> permutes ?X;
         !!x \<pi>.
            [| x : ?X; \<pi> permutes ?A |]
            ==> mpoly_map_vars \<pi> (?f x) = ?f (?g \<pi> x) |]
      ==> symmetric_mpoly ?A (prod ?f ?X)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app
              (template_app (template_hole 0, t_empty), template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.More_Multivariate_Polynomial_HLWMoreTemplates"
### 0.619s elapsed time, 0.817s cpu time, 0.097s GC time
val it = (): unit
