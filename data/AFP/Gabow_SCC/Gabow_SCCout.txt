Loading theory "HOL-Library.Tree" (required by "Draft.Gabow_SCCTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Gabow_SCCTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Gabow_SCCTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Gabow_SCCTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.171s elapsed time, 0.689s cpu time, 0.061s GC time
Loading theory "Draft.Gabow_Skeleton" (required by "Draft.Gabow_SCCTemplates" via "Draft.Gabow_SCC")
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
### theory "HOL-Library.Set_Algebras"
### 0.307s elapsed time, 1.232s cpu time, 0.061s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Gabow_SCCTemplates" via "Draft.ExtrEqs")
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale outer_invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and it :: "'v set"
    and D :: "'v set"
  assumes "outer_invar_loc G it D"
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
### theory "HOL-Library.Stream"
### 0.908s elapsed time, 3.533s cpu time, 0.373s GC time
pop PDPE ==
case PDPE of
(p, D, pE) => case (butlast p, last p) of (p, V) => (p, V Un D, pE)
select_edge ?PDPE ==
case ?PDPE of
(p, D, pE) =>
  SELECT (%e. e : pE Int last p \<times> UNIV) >>=
  case_option (RETURN (None, p, D, pE))
   (%(u, v). RETURN (Some v, p, D, pE - {(u, v)}))
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
Found termination order: "size <*mlex*> {}"
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
Found termination order: "size <*mlex*> {}"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
Found termination order: "size <*mlex*> {}"
[| invar v_0 D_0 (p, D, pE); p ~= []; pE Int last p \<times> UNIV = {} |]
==> invar v_0 D_0 (pop (p, D, pE))
### theory "HOL-Library.BigO"
### 0.930s elapsed time, 3.343s cpu time, 0.756s GC time
Found termination order: "size <*mlex*> {}"
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
Found termination order: "size <*mlex*> {}"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  find_max_nat :: "nat => (nat => bool) => nat"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.979s elapsed time, 6.174s cpu time, 1.114s GC time
Loading theory "Draft.Templates" (required by "Draft.Gabow_SCCTemplates" via "Draft.ExtrEqs")
locale oGS_invar
  fixes I :: "'v => node_state option"
  assumes "oGS_invar I"
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.132s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Gabow_SCCTemplates")
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
locale GS_invar
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
  assumes "GS_invar SBIP"
locale GS_invar
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
  assumes "GS_invar SBIP"
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
[| ?P 0; 0 < ?u |] ==> find_max_nat ?u ?P = Max {i. i < ?u & ?P i}
locale GS_invar
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
  assumes "GS_invar SBIP"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.523s elapsed time, 1.092s cpu time, 0.122s GC time
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
[| (s, p, D, pE) : GS_rel; p ~= []; pE Int last p \<times> UNIV = {} |]
==> pop_impl s <= \<Down> GS_rel (RETURN (pop (p, D, pE)))
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
### theory "Draft.Gabow_Skeleton"
### 2.692s elapsed time, 6.995s cpu time, 1.222s GC time
Loading theory "Draft.Gabow_SCC" (required by "Draft.Gabow_SCCTemplates")
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
locale cscc_invar_ext
  fixes G :: "('v, 'more) graph_rec_scheme"
    and l :: "'v set list"
    and D :: "'v set"
  assumes "cscc_invar_ext G l D"
locale cscc_outer_invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and it :: "'v set"
    and l :: "'v set list"
    and D :: "'v set"
  assumes "cscc_outer_invar_loc G it l D"
locale cscc_invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and l :: "'v set list"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "cscc_invar_loc G v0 D0 l p D pE"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
locale cscc_invar_ext
  fixes G :: "('v, 'more) graph_rec_scheme"
    and l :: "'v set list"
    and D :: "'v set"
  assumes "cscc_invar_ext G l D"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
[| invar v_0 D_0 s; invar v_0 D_0 s ==> cscc_invar_part (l, s) |]
==> cscc_invar v_0 D_0 (l, s)
[| cscc_invar v_0 D_0 (l, p, D, pE); invar v_0 D_0 (pop (p, D, pE));
   p ~= []; pE Int last p \<times> UNIV = {} |]
==> cscc_invar_part (last p # l, pop (p, D, pE))
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
### theory "Draft.Gabow_SCC"
### 0.530s elapsed time, 0.567s cpu time, 0.049s GC time
Loading theory "Draft.Gabow_SCCTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Gabow_SCCTemplates"
### 2.102s elapsed time, 3.014s cpu time, 0.934s GC time
val it = (): unit
