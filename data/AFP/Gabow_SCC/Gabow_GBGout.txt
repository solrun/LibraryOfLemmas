Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Gabow_GBGTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Gabow_GBGTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Gabow_GBGTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Gabow_GBGTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.148s elapsed time, 0.597s cpu time, 0.061s GC time
Loading theory "Draft.Gabow_Skeleton" (required by "Draft.Gabow_GBGTemplates" via "Draft.Gabow_GBG")
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
### theory "HOL-Library.Set_Algebras"
### 0.339s elapsed time, 1.336s cpu time, 0.179s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Gabow_GBGTemplates" via "Draft.ExtrEqs")
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
locale outer_invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and it :: "'v set"
    and D :: "'v set"
  assumes "outer_invar_loc G it D"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.918s elapsed time, 3.579s cpu time, 0.387s GC time
Loading theory "Draft.Find_Path" (required by "Draft.Gabow_GBGTemplates" via "Draft.Gabow_GBG")
Found termination order: "size <*mlex*> {}"
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Find_Path"
### 0.278s elapsed time, 0.964s cpu time, 0.590s GC time
pop PDPE ==
case PDPE of
(p, D, pE) => case (butlast p, last p) of (p, V) => (p, V Un D, pE)
select_edge ?PDPE ==
case ?PDPE of
(p, D, pE) =>
  SELECT (%e. e : pE Int last p \<times> UNIV) >>=
  case_option (RETURN (None, p, D, pE))
   (%(u, v). RETURN (Some v, p, D, pE - {(u, v)}))
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
[| invar v_0 D_0 (p, D, pE); p ~= []; pE Int last p \<times> UNIV = {} |]
==> invar v_0 D_0 (pop (p, D, pE))
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.017s elapsed time, 3.700s cpu time, 0.846s GC time
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
Found termination order: "size <*mlex*> {}"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  find_max_nat :: "nat => (nat => bool) => nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale oGS_invar
  fixes I :: "'v => node_state option"
  assumes "oGS_invar I"
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
### theory "HOL-Library.Tree"
### 2.176s elapsed time, 6.757s cpu time, 1.210s GC time
Loading theory "Draft.Templates" (required by "Draft.Gabow_GBGTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.130s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Gabow_GBGTemplates")
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
locale GS_invar
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
  assumes "GS_invar SBIP"
locale GS_invar
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
  assumes "GS_invar SBIP"
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
[| ?P 0; 0 < ?u |] ==> find_max_nat ?u ?P = Max {i. i < ?u & ?P i}
locale GS_invar
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
  assumes "GS_invar SBIP"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.778s elapsed time, 1.866s cpu time, 0.789s GC time
[| (s, p, D, pE) : GS_rel; p ~= []; pE Int last p \<times> UNIV = {} |]
==> pop_impl s <= \<Down> GS_rel (RETURN (pop (p, D, pE)))
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
### theory "Draft.Gabow_Skeleton"
### 3.147s elapsed time, 8.412s cpu time, 1.938s GC time
Loading theory "Draft.Gabow_GBG" (required by "Draft.Gabow_GBGTemplates")
locale igb_fr_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_fr_graph G"
locale igb_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_graph G"
locale igb_fr_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_fr_graph G"
locale fgl_invar_loc
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
    and v0 :: "'Q"
    and D0 :: "'Q set"
    and brk :: "('Q set * 'Q set) option"
    and p :: "'Q set list"
    and D :: "'Q set"
    and pE :: "('Q * 'Q) set"
  assumes "fgl_invar_loc G v0 D0 brk p D pE"
locale igb_fr_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_fr_graph G"
locale igb_fr_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_fr_graph G"
locale igb_fr_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_fr_graph G"
locale igb_fr_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_fr_graph G"
locale igb_fr_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_fr_graph G"
### Adding overloaded interface type to constant:
###   {} ::\<^sub>i \<langle>i_of_rel R\<rangle>\<^sub>ii_of_rel Rs
### Adding overloaded interface type to constant:
###   (Un) ::\<^sub>i
###   \<langle>i_of_rel R\<rangle>\<^sub>ii_of_rel Rs \<rightarrow>\<^sub>i
###   \<langle>i_of_rel R\<rangle>\<^sub>ii_of_rel Rs \<rightarrow>\<^sub>i
###   \<langle>i_of_rel R\<rangle>\<^sub>ii_of_rel Rs
### Cannot skip proof of schematic goal statement
Phase "id_op"
0.000s elapsed time, 0.000s cpu time, 0.000s GC time
Phase "id_op"
0.024s elapsed time, 0.024s cpu time, 0.000s GC time
Success (Phase "id_op")
Phase "rel_inf"
0.088s elapsed time, 0.122s cpu time, 0.052s GC time
Success (Phase "rel_inf")
Phase "fix_rel"
0.029s elapsed time, 0.029s cpu time, 0.000s GC time
Success (Phase "fix_rel")
Phase "trans"
0.034s elapsed time, 0.034s cpu time, 0.000s GC time
Success (Phase "trans")
### Cannot skip proof of schematic goal statement
locale igb_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_graph G"
locale igb_fr_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_fr_graph G"
[| (?s, ?p, ?D, ?pE) : GS_rel; ?p ~= [] |]
==> select_edge_impl ?s
    <= \<Down> (Id \<times>\<^sub>r GS_rel) (select_edge (?p, ?D, ?pE))
"GS.idx_of_impl"
  :: "'a list * nat list * ('a => node_state option) * (nat * 'a set) list
      => 'a => nat nres"
[| GS_invar ?SBIP; ?v : \<Union> (set (GS.p_\<alpha> ?SBIP)) |]
==> GS.idx_of_impl ?SBIP ?v
    <= SPEC
        (%x. x = idx_of (GS.p_\<alpha> ?SBIP) ?v & x < length (GS.B ?SBIP))
"collapse"
  :: "'a => 'a set list * 'a set * ('a * 'a) set
            => 'a set list * 'a set * ('a * 'a) set"
[| (?s, ?p, ?D, ?pE) : GS_rel; (?v, ?v') : Id; ?v' : \<Union> (set ?p) |]
==> collapse_impl ?v ?s
    <= \<Down> GS_rel (RETURN (collapse ?v' (?p, ?D, ?pE)))
"GS.B"
  :: "'a list * nat list * ('a => node_state option) * (nat * 'a set) list
      => nat list"
GS_invar ?s ==> is_done_impl ?v ?s = (?v : GS.D_\<alpha> ?s)
oGS_invar ?s ==> is_done_oimpl ?v ?s = (?v : oGS_\<alpha> ?s)
locale igb_fr_graph
  fixes G :: "('Q, 'more) igb_graph_rec_scheme"
  assumes "igb_fr_graph G"
### theory "Draft.Gabow_GBG"
### 4.288s elapsed time, 4.580s cpu time, 0.425s GC time
Loading theory "Draft.Gabow_GBGTemplates"
val templateLemmas =
   [("Gabow_GBG.Un_set_drop_impl_correct",
     "Un_set_drop_impl ?i ?A <= SPEC (%r. r = \<Union> (set (drop ?i ?A)))",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_hole 5, template_app (template_hole 4, t_empty)))),
    ("Gabow_GBG.igb_fr_graphI",
     "[| igb_graph ?G; finite ((g_E ?G)^* `` g_V0 ?G) |]
      ==> igb_fr_graph ?G",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 0))),
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Gabow_GBG.Un_set_drop_tr_aux",
     "RETURN
       (let x = while (%(xc, xd). xc < as_length ?A)
                 (%x. case x of
                      (a, b) =>
                        let xa = ?un_impl (as_get ?A a) b; xb = a + 1
                        in (xb, xa))
                 (?i, ?es_impl)
        in case x of (a, b) => b)
      <= Un_set_drop_code ?es_impl ?un_impl ?i ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 14,
         template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app
                (template_app
                  (template_hole 12,
                   template_app (template_hole 11, t_empty)),
                 t_empty),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           t_empty)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2),
           template_var 1),
         template_var 3))),
    ("Gabow_GBG.Un_set_drop_code_aux",
     "[| (?es_impl, {}) : \<langle>?R\<rangle>?Rs;
         (?un_impl, (Un))
         : \<langle>?R\<rangle>?Rs \<rightarrow>
           \<langle>?R\<rangle>?Rs \<rightarrow> \<langle>?R\<rangle>?Rs |]
      ==> (%x xa.
              WHILE\<^sub>T (%(xc, xd). xc < as_length xa)
               (%(xc, xd).
                   let y' = ?un_impl (as_get xa xc) xd; y'a = xc + 1
                   in RETURN (y'a, y'))
               (x, ?es_impl) >>=
              (%(xb, y). RETURN y),
           Un_set_drop_impl)
          : nat_rel \<rightarrow>
            \<langle>\<langle>?R\<rangle>?Rs\<rangle>as_rel \<rightarrow>
            \<langle>\<langle>?R\<rangle>?Rs\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 41,
                template_app
                 (template_app (template_hole 40, template_var 3),
                  template_hole 39)),
              template_app
               (template_app (template_hole 38, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 37,
                template_app
                 (template_app (template_hole 36, template_var 0),
                  template_hole 35)),
              template_app
               (template_app
                 (template_hole 34,
                  template_app
                   (template_app (template_hole 33, template_hole 32),
                    template_app
                     (template_app (template_hole 38, template_var 2),
                      template_var 1))),
                template_app
                 (template_app
                   (template_hole 31,
                    template_app
                     (template_app (template_hole 30, template_hole 29),
                      template_app
                       (template_app (template_hole 38, template_var 2),
                        template_var 1))),
                  template_app
                   (template_app (template_hole 38, template_var 2),
                    template_var 1))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 28,
               template_app
                (template_app (template_hole 27, t_empty),
                 template_hole 11)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_app
                        (template_app (template_hole 38, template_var 2),
                         template_var 1)))),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app
                    (template_app (template_hole 38, template_var 2),
                     template_var 1)))))
           ))),
    ("Gabow_GBG.Un_set_drop_autoref",
     "[| GEN_OP ?es_impl {} (\<langle>?R\<rangle>?Rs);
         GEN_OP ?un_impl (Un)
          (\<langle>?R\<rangle>?Rs \<rightarrow>
           \<langle>?R\<rangle>?Rs \<rightarrow> \<langle>?R\<rangle>?Rs) |]
      ==> (%i A. RETURN (Un_set_drop_tr ?es_impl ?un_impl i A),
           Un_set_drop_impl)
          : nat_rel \<rightarrow>
            \<langle>\<langle>?R\<rangle>?Rs\<rangle>as_rel \<rightarrow>
            \<langle>\<langle>?R\<rangle>?Rs\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 36,
              template_app
               (template_hole 35,
                template_app
                 (template_app
                   (template_hole 34,
                    template_app
                     (template_app (template_hole 33, template_var 3),
                      template_app
                       (template_app
                         (template_hole 32,
                          template_app
                           (template_hole 31, template_hole 30)),
                        template_app
                         (template_hole 29,
                          template_app
                           (template_app (template_hole 28, template_var 2),
                            template_var 1))))),
                  template_app
                   (template_app (template_hole 28, template_var 2),
                    template_var 1))))
            ),
        template_predicate
         (
            template_app
             (template_hole 36,
              template_app
               (template_hole 35,
                template_app
                 (template_app
                   (template_hole 27,
                    template_app
                     (template_app (template_hole 26, template_var 0),
                      template_app
                       (template_app
                         (template_hole 25,
                          template_app
                           (template_hole 24, template_hole 23)),
                        template_app
                         (template_hole 22,
                          template_app
                           (template_app
                             (template_hole 21,
                              template_app
                               (template_app
                                 (template_hole 20, template_hole 19),
                                template_app
                                 (template_app
                                   (template_hole 28, template_var 2),
                                  template_var 1))),
                            template_app
                             (template_app
                               (template_hole 18,
                                template_app
                                 (template_app
                                   (template_hole 17, template_hole 16),
                                  template_app
                                   (template_app
                                     (template_hole 28, template_var 2),
                                    template_var 1))),
                              template_app
                               (template_app
                                 (template_hole 28, template_var 2),
                                template_var 1))))))),
                  template_app
                   (template_app
                     (template_hole 21,
                      template_app
                       (template_app (template_hole 20, template_hole 19),
                        template_app
                         (template_app (template_hole 28, template_var 2),
                          template_var 1))),
                    template_app
                     (template_app
                       (template_hole 18,
                        template_app
                         (template_app (template_hole 17, template_hole 16),
                          template_app
                           (template_app (template_hole 28, template_var 2),
                            template_var 1))),
                      template_app
                       (template_app (template_hole 28, template_var 2),
                        template_var 1))))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, t_empty),
                 template_hole 11)),
             template_app
              (template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_app
                        (template_app (template_hole 28, template_var 2),
                         template_var 1)))),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app
                    (template_app (template_hole 28, template_var 2),
                     template_var 1)))))
           )))]:
   (string * thm * template) list
### theory "Draft.Gabow_GBGTemplates"
### 2.406s elapsed time, 3.552s cpu time, 1.238s GC time
val it = (): unit
