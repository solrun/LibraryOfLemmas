Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Gabow_Skeleton_CodeTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Gabow_Skeleton_CodeTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Stream" (required by "Draft.Gabow_Skeleton_CodeTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Gabow_Skeleton_CodeTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.135s elapsed time, 0.552s cpu time, 0.054s GC time
Loading theory "Draft.Gabow_Skeleton" (required by "Draft.Gabow_Skeleton_CodeTemplates" via "Draft.Gabow_Skeleton_Code")
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
### theory "HOL-Library.Set_Algebras"
### 0.228s elapsed time, 0.922s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Gabow_Skeleton_CodeTemplates" via "Draft.ExtrEqs")
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
locale outer_invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and it :: "'v set"
    and D :: "'v set"
  assumes "outer_invar_loc G it D"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
consts
  snth :: "'a stream => nat => 'a"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.912s elapsed time, 3.546s cpu time, 0.369s GC time
pop PDPE ==
case PDPE of
(p, D, pE) => case (butlast p, last p) of (p, V) => (p, V Un D, pE)
select_edge ?PDPE ==
case ?PDPE of
(p, D, pE) =>
  SELECT (%e. e : pE Int last p \<times> UNIV) >>=
  case_option (RETURN (None, p, D, pE))
   (%(u, v). RETURN (Some v, p, D, pE - {(u, v)}))
Found termination order: "size <*mlex*> {}"
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
Found termination order: "size <*mlex*> {}"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
### theory "HOL-Library.BigO"
### 0.996s elapsed time, 3.649s cpu time, 0.943s GC time
[| invar v_0 D_0 (p, D, pE); p ~= []; pE Int last p \<times> UNIV = {} |]
==> invar v_0 D_0 (pop (p, D, pE))
Found termination order: "size <*mlex*> {}"
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
Found termination order: "size <*mlex*> {}"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
Found termination order: "size <*mlex*> {}"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  find_max_nat :: "nat => (nat => bool) => nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale oGS_invar
  fixes I :: "'v => node_state option"
  assumes "oGS_invar I"
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
### theory "HOL-Library.Tree"
### 2.052s elapsed time, 6.307s cpu time, 1.177s GC time
Loading theory "Draft.Templates" (required by "Draft.Gabow_Skeleton_CodeTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.049s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Gabow_Skeleton_CodeTemplates")
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
locale GS_invar
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
  assumes "GS_invar SBIP"
locale GS_invar
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
  assumes "GS_invar SBIP"
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
[| ?P 0; 0 < ?u |] ==> find_max_nat ?u ?P = Max {i. i < ?u & ?P i}
locale GS_invar
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
  assumes "GS_invar SBIP"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.520s elapsed time, 1.090s cpu time, 0.139s GC time
[| (s, p, D, pE) : GS_rel; p ~= []; pE Int last p \<times> UNIV = {} |]
==> pop_impl s <= \<Down> GS_rel (RETURN (pop (p, D, pE)))
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
### theory "Draft.Gabow_Skeleton"
### 2.763s elapsed time, 7.243s cpu time, 1.308s GC time
Loading theory "Draft.Gabow_Skeleton_Code" (required by "Draft.Gabow_Skeleton_CodeTemplates")
consts
  is_DONE :: "node_state => bool"
locale fr_graph_impl_loc
  fixes mrel :: "('a * 'more) set"
    and node_rel :: "('vi * 'v) set"
    and node_eq_impl :: "'vi => 'vi => bool"
    and node_hash_impl :: "nat => 'vi => nat"
    and node_def_hash_size :: "nat"
    and
    G_impl ::
      "('vi => bool, 'vi => 'vi list, 'vi list, 'a) gen_g_impl_scheme"
    and G :: "('v, 'more) graph_rec_scheme"
  assumes
    "fr_graph_impl_loc mrel node_rel node_eq_impl node_hash_impl
      node_def_hash_size G_impl G"
locale fr_graph_impl_loc
  fixes mrel :: "('a * 'more) set"
    and node_rel :: "('vi * 'v) set"
    and node_eq_impl :: "'vi => 'vi => bool"
    and node_hash_impl :: "nat => 'vi => nat"
    and node_def_hash_size :: "nat"
    and
    G_impl ::
      "('vi => bool, 'vi => 'vi list, 'vi list, 'a) gen_g_impl_scheme"
    and G :: "('v, 'more) graph_rec_scheme"
  assumes
    "fr_graph_impl_loc mrel node_rel node_eq_impl node_hash_impl
      node_def_hash_size G_impl G"
[| GEN_ALGO_tag (is_valid_def_hm_size TYPE(?'a) ?n1.0);
   GEN_ALGO_tag (is_valid_def_hm_size TYPE(?'b) ?n2.0) |]
==> is_valid_def_hm_size TYPE(?'a * ?'b) (?n1.0 + ?n2.0)
[| GEN_ALGO_tag (is_bounded_hashcode ?R ?eq1.0 ?bhc1.0);
   GEN_ALGO_tag (is_bounded_hashcode ?S ?eq2.0 ?bhc2.0) |]
==> is_bounded_hashcode (?R \<times>\<^sub>r ?S) (prod_eq ?eq1.0 ?eq2.0)
     (prod_bhc ?bhc1.0 ?bhc2.0)
eq_linorder cmp_unit
GEN_ALGO_tag (is_map_to_list ?Rk unit_rel ?R ?it) ==>
is_set_to_list ?Rk (map2set_rel ?R)
 (it_to_list ((map_iterator_dom \<circ>\<circ>\<circ> (o)) foldli ?it))
GEN_ALGO_tag (is_map_to_sorted_list ?ordR ?Rk unit_rel ?R ?it) ==>
is_set_to_sorted_list ?ordR ?Rk (map2set_rel ?R)
 (it_to_list ((map_iterator_dom \<circ>\<circ>\<circ> (o)) foldli ?it))
GEN_ALGO_tag (is_bounded_hashcode ?Rk ?eq ?bhc) ==>
is_map_to_list ?Rk ?Rv (Impl_Array_Hash_Map.ahm_rel ?bhc)
 Impl_Array_Hash_Map.ahm_to_list
is_map_to_list ?Rk ?Rv list_map_rel list_map_to_list
finite_map_rel (\<langle>?Rk, ?Rv\<rangle>list_map_rel)
is_valid_def_hm_size TYPE(?'k) (def_hashmap_size TYPE(?'k))
[| STRUCT_EQ_tag ?eq (=); REL_FORCE_ID ?R |]
==> is_bounded_hashcode ?R ?eq bounded_hashcode_nat
is_map_to_sorted_list (%_ _. True) nat_rel ?Rv iam_map_rel
 Impl_Array_Map.iam_to_list
is_map_to_list nat_rel ?Rv iam_map_rel Impl_Array_Map.iam_to_list
GEN_ALGO_tag (eq_linorder ?cmpk) ==> eq_linorder (cmp_set ?cmpk)
[| GEN_ALGO_tag (eq_linorder ?cmpk); GEN_ALGO_tag (eq_linorder ?cmpv) |]
==> eq_linorder (cmp_map ?cmpk ?cmpv)
eq_linorder (dflt_cmp (<=) (<))
GEN_ALGO_tag (eq_linorder ?cmp') ==>
is_map_to_sorted_list (comp2le ?cmp') ?Rk ?Rv (rbt_map_rel (comp2lt ?cmp'))
 rbt_to_list
is_set_to_sorted_list (%_ _. True) ?R list_set_rel id
finite_set_rel (\<langle>?R\<rangle>list_set_rel)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_sorted_list (%x y. y <= x) ?Rk ?Rv rm.rel
     (it_to_list rm.reverse_iterateoi)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_sorted_list (%x y. y <= x) ?Rk ?Rv iam.rel
     (it_to_list iam.reverse_iterateoi)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_sorted_list (%x y. y <= x) ?Rk ?Rv rm_basic.rel
     (it_to_list rm_basic.reverse_iterateoi)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_sorted_list (%x y. y <= x) ?Rk ?Rv iam_basic.rel
     (it_to_list iam_basic.reverse_iterateoi)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_sorted_list (<=) ?Rk ?Rv rm.rel (it_to_list rm.iterateoi)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_sorted_list (<=) ?Rk ?Rv iam.rel (it_to_list iam.iterateoi)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_sorted_list (<=) ?Rk ?Rv rm_basic.rel
     (it_to_list rm_basic.iterateoi)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_sorted_list (<=) ?Rk ?Rv iam_basic.rel
     (it_to_list iam_basic.iterateoi)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv hm.rel (it_to_list hm.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv rm.rel (it_to_list rm.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv lm.rel (it_to_list lm.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv tm.rel (it_to_list tm.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv ahm.rel (it_to_list ahm.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv iam.rel (it_to_list iam.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv lmi.rel (it_to_list lmi.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv hm_basic.rel (it_to_list hm_basic.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv rm_basic.rel (it_to_list rm_basic.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv lm_basic.rel (it_to_list lm_basic.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv tm_basic.rel (it_to_list tm_basic.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv ahm_basic.rel (it_to_list ahm_basic.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv iam_basic.rel (it_to_list iam_basic.iteratei)
[| REL_IS_ID ?Rk; REL_IS_ID ?Rv |]
==> is_map_to_list ?Rk ?Rv lmi_basic.rel (it_to_list lmi_basic.iteratei)
REL_IS_ID ?Rk ==>
is_set_to_sorted_list (%x y. y <= x) ?Rk rs.rel
 (it_to_list rs.reverse_iterateoi)
REL_IS_ID ?Rk ==>
is_set_to_sorted_list (%x y. y <= x) ?Rk ias.rel
 (it_to_list ias.reverse_iterateoi)
REL_IS_ID ?Rk ==>
is_set_to_sorted_list (%x y. y <= x) ?Rk lss.rel
 (it_to_list lss.reverse_iterateoi)
REL_IS_ID ?Rk ==>
is_set_to_sorted_list (%x y. y <= x) ?Rk lss_basic.rel
 (it_to_list lss_basic.reverse_iterateoi)
REL_IS_ID ?Rk ==>
is_set_to_sorted_list (%x y. y <= x) ?Rk rs_sbm.obasic.rel
 (it_to_list rs_sbm.obasic.reverse_iterateoi)
REL_IS_ID ?Rk ==>
is_set_to_sorted_list (%x y. y <= x) ?Rk ias_sbm.obasic.rel
 (it_to_list ias_sbm.obasic.reverse_iterateoi)
REL_IS_ID ?Rk ==>
is_set_to_sorted_list (<=) ?Rk rs.rel (it_to_list rs.iterateoi)
REL_IS_ID ?Rk ==>
is_set_to_sorted_list (<=) ?Rk ias.rel (it_to_list ias.iterateoi)
REL_IS_ID ?Rk ==>
is_set_to_sorted_list (<=) ?Rk lss.rel (it_to_list lss.iterateoi)
REL_IS_ID ?Rk ==>
is_set_to_sorted_list (<=) ?Rk lss_basic.rel
 (it_to_list lss_basic.iterateoi)
REL_IS_ID ?Rk ==>
is_set_to_sorted_list (<=) ?Rk rs_sbm.obasic.rel
 (it_to_list rs_sbm.obasic.iterateoi)
REL_IS_ID ?Rk ==>
is_set_to_sorted_list (<=) ?Rk ias_sbm.obasic.rel
 (it_to_list ias_sbm.obasic.iterateoi)
REL_IS_ID ?Rk ==> is_set_to_list ?Rk hs.rel (it_to_list hs.iteratei)
REL_IS_ID ?Rk ==> is_set_to_list ?Rk rs.rel (it_to_list rs.iteratei)
REL_IS_ID ?Rk ==> is_set_to_list ?Rk ls.rel (it_to_list ls.iteratei)
REL_IS_ID ?Rk ==> is_set_to_list ?Rk ts.rel (it_to_list ts.iteratei)
REL_IS_ID ?Rk ==> is_set_to_list ?Rk ahs.rel (it_to_list ahs.iteratei)
REL_IS_ID ?Rk ==> is_set_to_list ?Rk ias.rel (it_to_list ias.iteratei)
REL_IS_ID ?Rk ==> is_set_to_list ?Rk lsi.rel (it_to_list lsi.iteratei)
REL_IS_ID ?Rk ==> is_set_to_list ?Rk lss.rel (it_to_list lss.iteratei)
REL_IS_ID ?Rk ==> is_set_to_list ?Rk lsnd.rel (it_to_list lsnd.iteratei)
REL_IS_ID ?Rk ==>
is_set_to_list ?Rk ls_basic.rel (it_to_list ls_basic.iteratei)
REL_IS_ID ?Rk ==>
is_set_to_list ?Rk lsi_basic.rel (it_to_list lsi_basic.iteratei)
REL_IS_ID ?Rk ==>
is_set_to_list ?Rk lss_basic.rel (it_to_list lss_basic.iteratei)
REL_IS_ID ?Rk ==>
is_set_to_list ?Rk lsnd_basic.rel (it_to_list lsnd_basic.iteratei)
REL_IS_ID ?Rk ==>
is_set_to_list ?Rk hs_sbm.basic.rel (it_to_list hs_sbm.basic.iteratei)
REL_IS_ID ?Rk ==>
is_set_to_list ?Rk rs_sbm.basic.rel (it_to_list rs_sbm.basic.iteratei)
REL_IS_ID ?Rk ==>
is_set_to_list ?Rk ts_sbm.basic.rel (it_to_list ts_sbm.basic.iteratei)
REL_IS_ID ?Rk ==>
is_set_to_list ?Rk ahs_sbm.basic.rel (it_to_list ahs_sbm.basic.iteratei)
REL_IS_ID ?Rk ==>
is_set_to_list ?Rk ias_sbm.basic.rel (it_to_list ias_sbm.basic.iteratei)
REL_IS_ID ?Rk ==>
is_set_to_list ?Rk rs_sbm.obasic.rel (it_to_list rs_sbm.obasic.iteratei)
REL_IS_ID ?Rk ==>
is_set_to_list ?Rk ias_sbm.obasic.rel (it_to_list ias_sbm.obasic.iteratei)
GEN_ALGO_tag (is_map_to_sorted_list ?ordR ?Rk ?Rv ?Rm ?tsl) ==>
is_map_to_list ?Rk ?Rv ?Rm ?tsl
GEN_ALGO_tag (is_set_to_sorted_list ?ordR ?Rk ?Rs ?tsl) ==>
is_set_to_list ?Rk ?Rs ?tsl
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
"select_edge_impl"
  :: "'b list * nat list * ('b => node_state option) * (nat * 'b set) list
      => ('b option *
          'b list *
          nat list * ('b => node_state option) * (nat * 'b set) list) nres"
### Cannot skip proof of schematic goal statement
Phase "id_op"
0.000s elapsed time, 0.000s cpu time, 0.000s GC time
Phase "id_op"
Failed to identify: op_map_lookup
0.119s elapsed time, 0.119s cpu time, 0.000s GC time
Success (Phase "id_op")
Phase "rel_inf"
0.464s elapsed time, 0.490s cpu time, 0.040s GC time
Success (Phase "rel_inf")
Phase "fix_rel"
0.263s elapsed time, 0.263s cpu time, 0.000s GC time
Success (Phase "fix_rel")
Phase "trans"
0.450s elapsed time, 0.457s cpu time, 0.016s GC time
Success (Phase "trans")
"pop_impl"
  :: "'b list * nat list * ('b => node_state option) * (nat * 'b set) list
      => ('b list *
          nat list * ('b => node_state option) * (nat * 'b set) list) nres"
### Cannot skip proof of schematic goal statement
Phase "id_op"
0.000s elapsed time, 0.000s cpu time, 0.000s GC time
Phase "id_op"
0.334s elapsed time, 0.368s cpu time, 0.051s GC time
Success (Phase "id_op")
Phase "rel_inf"
0.797s elapsed time, 0.806s cpu time, 0.018s GC time
Success (Phase "rel_inf")
Phase "fix_rel"
0.599s elapsed time, 0.669s cpu time, 0.100s GC time
Success (Phase "fix_rel")
Phase "trans"
1.131s elapsed time, 1.146s cpu time, 0.032s GC time
Success (Phase "trans")
fr_graph_impl_loc ?mrel ?node_rel ?node_eq_impl ?node_hash_impl
 ?node_def_hash_size ?G_impl ?G ==>
(skeleton_code ?node_hash_impl ?node_def_hash_size ?node_eq_impl ?G_impl,
 fr_graph.skeleton_impl ?G)
: \<langle>\<langle>?node_rel,
node_state_rel\<rangle>Impl_Array_Hash_Map.ahm_rel
                        ?node_hash_impl\<rangle>nres_rel
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
"skeleton_tr"
  :: "('a => 'a => bool)
      => (nat => 'a => nat)
         => nat
            => ('a => bool, 'a => 'a list, 'a list, 'b) gen_g_impl_scheme
               => ('a, int) Impl_Array_Hash_Map.hashmap"
### theory "Draft.Gabow_Skeleton_Code"
### 13.684s elapsed time, 14.828s cpu time, 1.671s GC time
*** Failed to load theory "Draft.Gabow_Skeleton_CodeTemplates" (unresolved "Draft.Gabow_Skeleton_Code")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "200")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 269 of "$AFP/Gabow_SCC/Gabow_Skeleton_Code.thy")
Exception- TOPLEVEL_ERROR raised
