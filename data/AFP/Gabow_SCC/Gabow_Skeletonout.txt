Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Gabow_SkeletonTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Stream" (required by "Draft.Gabow_SkeletonTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Gabow_SkeletonTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Gabow_SkeletonTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.595s cpu time, 0.057s GC time
Loading theory "Draft.Gabow_Skeleton" (required by "Draft.Gabow_SkeletonTemplates")
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
### theory "HOL-Library.Set_Algebras"
### 0.250s elapsed time, 1.018s cpu time, 0.057s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Gabow_SkeletonTemplates" via "Draft.ExtrEqs")
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
locale outer_invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and it :: "'v set"
    and D :: "'v set"
  assumes "outer_invar_loc G it D"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
### theory "HOL-Library.Stream"
### 0.901s elapsed time, 3.511s cpu time, 0.365s GC time
pop PDPE ==
case PDPE of
(p, D, pE) => case (butlast p, last p) of (p, V) => (p, V Un D, pE)
select_edge ?PDPE ==
case ?PDPE of
(p, D, pE) =>
  SELECT (%e. e : pE Int last p \<times> UNIV) >>=
  case_option (RETURN (None, p, D, pE))
   (%(u, v). RETURN (Some v, p, D, pE - {(u, v)}))
Found termination order: "size <*mlex*> {}"
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
Found termination order: "size <*mlex*> {}"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
### theory "HOL-Library.BigO"
### 0.968s elapsed time, 3.505s cpu time, 0.850s GC time
[| invar v_0 D_0 (p, D, pE); p ~= []; pE Int last p \<times> UNIV = {} |]
==> invar v_0 D_0 (pop (p, D, pE))
Found termination order: "size <*mlex*> {}"
locale invar_loc
  fixes G :: "('v, 'more) graph_rec_scheme"
    and v0 :: "'v"
    and D0 :: "'v set"
    and p :: "'v set list"
    and D :: "'v set"
    and pE :: "('v * 'v) set"
  assumes "invar_loc G v0 D0 p D pE"
Found termination order: "size <*mlex*> {}"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
Found termination order: "size <*mlex*> {}"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
consts
  find_max_nat :: "nat => (nat => bool) => nat"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale oGS_invar
  fixes I :: "'v => node_state option"
  assumes "oGS_invar I"
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
### theory "HOL-Library.Tree"
### 2.020s elapsed time, 6.199s cpu time, 1.081s GC time
Loading theory "Draft.Templates" (required by "Draft.Gabow_SkeletonTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Gabow_SkeletonTemplates")
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
locale GS_invar
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
  assumes "GS_invar SBIP"
locale GS_invar
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
  assumes "GS_invar SBIP"
locale GS
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
[| ?P 0; 0 < ?u |] ==> find_max_nat ?u ?P = Max {i. i < ?u & ?P i}
locale GS_invar
  fixes
    SBIP ::
      "'a list * nat list * ('a => node_state option) * (nat * 'a set) list"
  assumes "GS_invar SBIP"
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.752s elapsed time, 1.840s cpu time, 0.803s GC time
[| (s, p, D, pE) : GS_rel; p ~= []; pE Int last p \<times> UNIV = {} |]
==> pop_impl s <= \<Down> GS_rel (RETURN (pop (p, D, pE)))
locale fr_graph
  fixes G :: "('v, 'more) graph_rec_scheme"
  assumes "fr_graph G"
### theory "Draft.Gabow_Skeleton"
### 2.959s elapsed time, 7.816s cpu time, 1.827s GC time
Loading theory "Draft.Gabow_SkeletonTemplates"
val templateLemmas =
   [("Gabow_Skeleton.path_seg_simps", "path_seg ?p ?i (Suc ?i) = ?p ! ?i",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Gabow_Skeleton.GS_sel_simps", "GS.I (?S, ?B, ?I, ?P) = ?I",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_var 1)),
    ("Gabow_Skeleton.GS_sel_simps", "GS.S (?S, ?B, ?I, ?P) = ?S",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_var 3)),
    ("Gabow_Skeleton.GS_sel_simps", "GS.B (?S, ?B, ?I, ?P) = ?B",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_var 2)),
    ("Gabow_Skeleton.GS_sel_simps", "GS.P (?S, ?B, ?I, ?P) = ?P",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))),
       template_var 0)),
    ("Gabow_Skeleton.path_seg_drop",
     "\<Union> (set (drop ?i ?p)) = path_seg ?p ?i (length ?p)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Gabow_Skeleton.path_seg_simps", "?j <= ?i ==> path_seg ?p ?i ?j = {}",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_var 2),
         template_hole 0))),
    ("Gabow_Skeleton.discard_stat_refine",
     "?m1.0 <= ?m2.0 ==> stat_newnode_nres >>= (%_. ?m1.0) <= ?m2.0",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           t_empty),
         template_var 0))),
    ("Gabow_Skeleton.discard_stat_refine",
     "?m1.0 <= ?m2.0 ==> stat_start_nres >>= (%_. ?m1.0) <= ?m2.0",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           t_empty),
         template_var 0))),
    ("Gabow_Skeleton.discard_stat_refine",
     "?m1.0 <= ?m2.0 ==> stat_stop_nres >>= (%_. ?m1.0) <= ?m2.0",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))),
           t_empty),
         template_var 0))),
    ("Gabow_Skeleton.GS_initial_correct",
     "[| (?I, ?D) : oGS_rel; ?v0.0 ~: ?D |]
      ==> GS_invar (GS_initial_impl ?I ?v0.0 ?succs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_hole 4)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 2)
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0))
           ))),
    ("Gabow_Skeleton.path_seg_butlast",
     "?p ~= [] ==>
      path_seg ?p 0 (length ?p - Suc 0) = \<Union> (set (butlast ?p))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 0),
             template_hole 6),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0)),
             template_app (template_hole 3, template_hole 6))),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Gabow_Skeleton.find_max_nat_correct",
     "[| ?P 0; 0 < ?u |] ==> find_max_nat ?u ?P = Max {i. i < ?u & ?P i}",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 6)),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2, template_app (template_hole 1, t_empty))))),
    ("Gabow_Skeleton.GS_initial_correct",
     "[| (?I, ?D) : oGS_rel; ?v0.0 ~: ?D |]
      ==> GS.\<alpha> (GS_initial_impl ?I ?v0.0 ?succs) =
          ([{?v0.0}], ?D, {?v0.0} \<times> ?succs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 3),
                  template_var 2)),
              template_hole 12)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 2)
                )
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app (template_hole 7, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3)),
               template_hole 2)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_hole 3)),
               t_empty)))))),
    ("Gabow_Skeleton.find_max_nat_param",
     "[| (?n, ?n') : nat_rel;
         !!j j'.
            [| (j, j') : nat_rel; j' < ?n' |]
            ==> (?P j, ?P' j') : bool_rel |]
      ==> (find_max_nat ?n ?P, find_max_nat ?n' ?P') : nat_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_var 2)),
              template_hole 6)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 0))),
             template_hole 6)
           ))),
    ("Gabow_Skeleton.idx_of_props",
     "[| ALL i j v.
            i < length ?p & j < length ?p & v : ?p ! i & v : ?p ! j -->
            i = j;
         ?v : \<Union> (set ?p) |]
      ==> idx_of ?p ?v < length ?p",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app (template_hole 6, template_var 1)))),
    ("Gabow_Skeleton.idx_of_props",
     "[| ALL i j v.
            i < length ?p & j < length ?p & v : ?p ! i & v : ?p ! j -->
            i = j;
         ?v : \<Union> (set ?p) |]
      ==> ?v : ?p ! idx_of ?p ?v",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("Gabow_Skeleton.idx_of_uniq",
     "[| ALL i j v.
            i < length ?p & j < length ?p & v : ?p ! i & v : ?p ! j -->
            i = j;
         ?i < length ?p; ?v : ?p ! ?i |]
      ==> idx_of ?p ?v = ?i",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Gabow_Skeleton.find_max_nat_autoref",
     "[| (?n, ?n') : nat_rel;
         !!j j'.
            [| (j, j') : nat_rel; j' < ?n' |]
            ==> (?P j, ?P' $ j') : bool_rel |]
      ==> (find_max_nat ?n ?P,
           (Autoref_Tagging.OP find_max_nat :::
            nat_rel \<rightarrow>
            (nat_rel \<rightarrow> bool_rel) \<rightarrow> nat_rel) $
           ?n' $
           ?P')
          : nat_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_var 3),
                  template_var 2)),
              template_hole 21)
            ),
        template_predicate (template_app (template_hole 20, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 23,
               template_app
                (template_app
                  (template_hole 22,
                   template_app
                    (template_app (template_hole 14, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app
                      (template_app
                        (template_hole 12,
                         template_app
                          (template_app
                            (template_hole 11,
                             template_app
                              (template_hole 10, template_hole 14)),
                           template_app
                            (template_hole 9,
                             template_app
                              (template_app
                                (template_hole 8,
                                 template_app
                                  (template_app
                                    (template_hole 7, template_hole 6),
                                   template_hole 21)),
                               template_app
                                (template_app
                                  (template_hole 5,
                                   template_app
                                    (template_app
(template_hole 4, template_hole 3),
                                     template_app
(template_app
  (template_hole 2,
   template_app
    (template_app (template_hole 1, template_hole 0), template_hole 21)),
 template_hole 15))),
                                 template_hole 21))))),
                       template_var 2)),
                   template_var 0))),
             template_hole 21)
           )))]:
   (string * thm * template) list
### theory "Draft.Gabow_SkeletonTemplates"
### 2.107s elapsed time, 2.523s cpu time, 0.268s GC time
val it = (): unit
