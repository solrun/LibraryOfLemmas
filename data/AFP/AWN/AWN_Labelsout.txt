Loading theory "Draft.Lib" (required by "Draft.AWN_LabelsMoreTemplates" via "Draft.AWN_Labels" via "Draft.AWN")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AWN_LabelsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AWN_LabelsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AWN_LabelsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### theory "Draft.Lib"
### 0.040s elapsed time, 0.190s cpu time, 0.000s GC time
Loading theory "Draft.AWN" (required by "Draft.AWN_LabelsMoreTemplates" via "Draft.AWN_Labels")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.129s elapsed time, 0.530s cpu time, 0.055s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AWN_LabelsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
class msg = type +
  fixes newpkt :: "nat * nat => 'a"
    and eq_newpkt :: "'a => bool"
  assumes "eq_newpkt_eq": "!!d i. eq_newpkt (newpkt (d, i))"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.248s elapsed time, 0.997s cpu time, 0.055s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AWN_LabelsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.396s elapsed time, 1.561s cpu time, 0.197s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AWN_LabelsMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.161s elapsed time, 4.371s cpu time, 1.083s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.270s elapsed time, 4.595s cpu time, 1.006s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.312s elapsed time, 7.312s cpu time, 1.423s GC time
Loading theory "Draft.Templates" (required by "Draft.AWN_LabelsMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AWN_LabelsMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.547s elapsed time, 1.127s cpu time, 0.093s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class tau = type +
  fixes tau :: "'a"
instantiation
  seq_action :: (type) tau
  tau_seq_action == tau :: 'a seq_action
instantiation
  node_action :: (type) tau
  tau_node_action == tau :: 'a node_action
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AWN"
### 6.783s elapsed time, 13.145s cpu time, 2.146s GC time
Loading theory "Draft.AWN_Cterms" (required by "Draft.AWN_LabelsMoreTemplates" via "Draft.AWN_Labels")
Proofs for inductive predicate(s) "microstep"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "ctermsp"
  Proving monotonicity ...
### theory "Draft.AWN_Cterms"
### 2.015s elapsed time, 3.073s cpu time, 1.342s GC time
Loading theory "Draft.AWN_Labels" (required by "Draft.AWN_LabelsMoreTemplates")
consts
  labelfrom ::
    "int => int => ('s, 'm, 'p, 'a) seqp => int * ('s, 'm, 'p, int) seqp"
instantiation
  label :: (ord) ord
  less_eq_label == less_eq :: 'a label => 'a label => bool
  less_label == less :: 'a label => 'a label => bool
Found termination order: "{}"
### theory "Draft.AWN_Labels"
### 1.113s elapsed time, 2.029s cpu time, 1.245s GC time
Loading theory "Draft.AWN_LabelsMoreTemplates"
val templateLemmas =
   [("AWN_Labels.labels_termination",
     "wellformed ?\<Gamma> ==> labels_dom (?\<Gamma>, ?p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("AWN_Labels.labels_not_empty",
     "wellformed ?\<Gamma> ==> labels ?\<Gamma> ?p ~= {}",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("AWN_Labels.has_label",
     "wellformed ?\<Gamma> ==> EX l. l : labels ?\<Gamma> ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("AWN_Labels.less_label",
     "(?l1.0 < ?l2.0) = (?l1.0 <= ?l2.0 & ~ ?l1.0 <= ?l2.0)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("AWN_Labels.singleton_labels",
     "(?l : labels ?\<Gamma> ({?l'}\<langle>?f\<rangle>
                              ?p)) =
      (?l = ?l')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 4, template_var 2))),
    ("AWN_Labels.singleton_labels",
     "(?l : labels ?\<Gamma> ({?l'}\<lbrakk>?f\<rbrakk>
                              ?p)) =
      (?l = ?l')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 4, template_var 2))),
    ("AWN_Labels.singleton_labels",
     "(?l : labels ?\<Gamma> ({?l'}broadcast(?fmsg) .
                              ?p)) =
      (?l = ?l')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 4, template_var 2))),
    ("AWN_Labels.singleton_labels",
     "(?l : labels ?\<Gamma> ({?l'}send(?fmsg) .
                              ?p)) =
      (?l = ?l')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 4, template_var 2))),
    ("AWN_Labels.singleton_labels",
     "(?l : labels ?\<Gamma> ({?l'}deliver(?fdata) .
                              ?p)) =
      (?l = ?l')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 4, template_var 2))),
    ("AWN_Labels.singleton_labels",
     "(?l : labels ?\<Gamma> ({?l'}receive(?fmsg) .
                              ?p)) =
      (?l = ?l')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 4, template_var 2))),
    ("AWN_Labels.singleton_labels",
     "(?l : labels ?\<Gamma> ({?l'}groupcast(?fips, ?fmsg) .
                              ?p)) =
      (?l = ?l')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 5, template_var 3))),
    ("AWN_Labels.labels_psimps",
     "wellformed ?\<Gamma> ==>
      labels ?\<Gamma> (call(?pn)) = labels ?\<Gamma> (?\<Gamma> ?pn)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_var 1, template_var 0))))),
    ("AWN_Labels.in_labels_singletons",
     "?l : labels ?\<Gamma> ({?l'}\<langle>?f\<rangle>
                             ?p) ==>
      ?l = ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 4, template_var 2))),
    ("AWN_Labels.in_labels_singletons",
     "?l : labels ?\<Gamma> ({?l'}\<lbrakk>?f\<rbrakk>
                             ?p) ==>
      ?l = ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 4, template_var 2))),
    ("AWN_Labels.in_labels_singletons",
     "?l : labels ?\<Gamma> ({?l'}broadcast(?fmsg) .
                             ?p) ==>
      ?l = ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 4, template_var 2))),
    ("AWN_Labels.in_labels_singletons",
     "?l : labels ?\<Gamma> ({?l'}send(?fmsg) .
                             ?p) ==>
      ?l = ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 4, template_var 2))),
    ("AWN_Labels.in_labels_singletons",
     "?l : labels ?\<Gamma> ({?l'}deliver(?fdata) .
                             ?p) ==>
      ?l = ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 4, template_var 2))),
    ("AWN_Labels.in_labels_singletons",
     "?l : labels ?\<Gamma> ({?l'}receive(?fmsg) .
                             ?p) ==>
      ?l = ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 4),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 4, template_var 2))),
    ("AWN_Labels.labels_dom_basic",
     "[| not_call ?p; not_choice ?p |] ==> labels_dom (?\<Gamma>, ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("AWN_Labels.singleton_labels",
     "(?l : labels ?\<Gamma> ({?l'}unicast(?fip, ?fmsg) .
                                 ?p \<triangleright> ?q)) =
      (?l = ?l')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 6),
              template_app
               (template_app (template_hole 2, template_var 5),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 6, template_var 4))),
    ("AWN_Labels.labels_psimps",
     "wellformed ?\<Gamma> ==>
      labels ?\<Gamma> ({?l}\<lbrakk>?fa\<rbrakk>
                        ?p) =
      {?l}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("AWN_Labels.labels_psimps",
     "wellformed ?\<Gamma> ==>
      labels ?\<Gamma> ({?l}broadcast(?fmsg) .
                        ?p) =
      {?l}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("AWN_Labels.labels_psimps",
     "wellformed ?\<Gamma> ==>
      labels ?\<Gamma> ({?l}deliver(?fdata) .
                        ?p) =
      {?l}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("AWN_Labels.labels_psimps",
     "wellformed ?\<Gamma> ==>
      labels ?\<Gamma> ({?l}\<langle>?fg\<rangle>
                        ?p) =
      {?l}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("AWN_Labels.labels_psimps",
     "wellformed ?\<Gamma> ==>
      labels ?\<Gamma> ({?l}receive(?fmsg) .
                        ?p) =
      {?l}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("AWN_Labels.labels_psimps",
     "wellformed ?\<Gamma> ==> labels ?\<Gamma> ({?l}send(?fmsg) .
           ?p) =
                               {?l}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("AWN_Labels.in_labels_singletons",
     "?l : labels ?\<Gamma> ({?l'}groupcast(?fips, ?fmsg) .
                             ?p) ==>
      ?l = ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_app
               (template_app (template_hole 2, template_var 4),
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 5, template_var 3))),
    ("AWN_Labels.labels_psimps",
     "wellformed ?\<Gamma> ==>
      labels ?\<Gamma> ({?l}groupcast(?fips, ?fmsg) .
                        ?p) =
      {?l}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 4))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 3),
           template_hole 0)))),
    ("AWN_Labels.in_labels_singletons",
     "?l : labels ?\<Gamma> ({?l'}unicast(?fip, ?fmsg) .
                                ?p \<triangleright> ?q) ==>
      ?l = ?l'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 6),
              template_app
               (template_app (template_hole 2, template_var 5),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_equation (template_var 6, template_var 4))),
    ("AWN_Labels.labels_psimps",
     "wellformed ?\<Gamma> ==>
      labels ?\<Gamma> ({?l}unicast(?fip, ?fmsg) .
                           ?p \<triangleright> ?q) =
      {?l}",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 5))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 4),
           template_hole 0)))),
    ("AWN_Labels.labels_psimps",
     "wellformed ?\<Gamma> ==>
      labels ?\<Gamma> (?p1.0
                        \<oplus>
                        ?p2.0) =
      labels ?\<Gamma> ?p1.0 Un labels ?\<Gamma> ?p2.0",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("AWN_Labels.labels_in_sterms",
     "[| wellformed ?\<Gamma>; ?l : labels ?\<Gamma> ?p |]
      ==> EX p':sterms ?\<Gamma> ?p. ?l : labels ?\<Gamma> p'",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("AWN_Labels.labels_sterms_labels",
     "[| wellformed ?\<Gamma>; ?p' : sterms ?\<Gamma> ?p;
         ?l : labels ?\<Gamma> ?p' |]
      ==> ?l : labels ?\<Gamma> ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1))
           ))),
    ("AWN_Labels.simple_labelsI",
     "(!!pn p.
          p : subterms (?\<Gamma> pn) ==>
          EX! l. labels ?\<Gamma> p = {l}) ==>
      simple_labels ?\<Gamma>",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("AWN_Labels.simple_labels_in_sterms",
     "[| simple_labels ?\<Gamma>; wellformed ?\<Gamma>;
         EX pn. ?p : subterms (?\<Gamma> pn); ?l : labels ?\<Gamma> ?p |]
      ==> ALL p':sterms ?\<Gamma> ?p. ?l : labels ?\<Gamma> p'",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             t_empty)
           ))),
    ("AWN_Labels.labels_pinduct",
     "[| wellformed ?a0.0;
         !!\<Gamma> l fg p.
            labels_dom (\<Gamma>, {l}\<langle>fg\<rangle>
                        p) ==>
            ?P \<Gamma> ({l}\<langle>fg\<rangle>
                         p);
         !!\<Gamma> l fa p.
            labels_dom (\<Gamma>, {l}\<lbrakk>fa\<rbrakk>
                        p) ==>
            ?P \<Gamma> ({l}\<lbrakk>fa\<rbrakk>
                         p);
         !!\<Gamma> p1 p2.
            [| labels_dom (\<Gamma>, p1
                                     \<oplus>
                                     p2);
               ?P \<Gamma> p1; ?P \<Gamma> p2 |]
            ==> ?P \<Gamma> (p1
                             \<oplus>
                             p2);
         !!\<Gamma> l fip fmsg p q.
            labels_dom (\<Gamma>, {l}unicast(fip, fmsg) .
                                     p \<triangleright> q) ==>
            ?P \<Gamma> ({l}unicast(fip, fmsg) .
                            p \<triangleright> q);
         !!\<Gamma> l fmsg p.
            labels_dom (\<Gamma>, {l}broadcast(fmsg) .
                        p) ==>
            ?P \<Gamma> ({l}broadcast(fmsg) .
                         p);
         !!\<Gamma> l fips fmsg p.
            labels_dom (\<Gamma>, {l}groupcast(fips, fmsg) .
                        p) ==>
            ?P \<Gamma> ({l}groupcast(fips, fmsg) .
                         p);
         !!\<Gamma> l fmsg p.
            labels_dom (\<Gamma>, {l}send(fmsg) .
                        p) ==>
            ?P \<Gamma> ({l}send(fmsg) .
                         p);
         !!\<Gamma> l fdata p.
            labels_dom (\<Gamma>, {l}deliver(fdata) .
                        p) ==>
            ?P \<Gamma> ({l}deliver(fdata) .
                         p);
         !!\<Gamma> l fmsg p.
            labels_dom (\<Gamma>, {l}receive(fmsg) .
                        p) ==>
            ?P \<Gamma> ({l}receive(fmsg) .
                         p);
         !!\<Gamma> pn.
            [| labels_dom (\<Gamma>, call(pn)); ?P \<Gamma> (\<Gamma> pn) |]
            ==> ?P \<Gamma> (call(pn)) |]
      ==> ?P ?a0.0 ?a1.0",
     template_implication
      ([template_predicate
         (template_app (template_hole 23, template_var 2)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty)),
        template_predicate (template_app (template_hole 22, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 1, template_var 2), template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.AWN_LabelsMoreTemplates"
### 0.475s elapsed time, 0.672s cpu time, 0.058s GC time
val it = (): unit
