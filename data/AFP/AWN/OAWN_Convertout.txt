Loading theory "Draft.Lib" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert" via "Draft.AWN_SOS_Labels" via "Draft.AWN_SOS" via "Draft.AWN")
Loading theory "Draft.TransitionSystems" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert" via "Draft.AWN_SOS_Labels" via "Draft.AWN_SOS")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Lib"
### 0.050s elapsed time, 0.225s cpu time, 0.000s GC time
Loading theory "Draft.AWN" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert" via "Draft.AWN_SOS_Labels" via "Draft.AWN_SOS")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class msg = type +
  fixes newpkt :: "nat * nat => 'a"
    and eq_newpkt :: "'a => bool"
  assumes "eq_newpkt_eq": "!!d i. eq_newpkt (newpkt (d, i))"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.556s cpu time, 0.049s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "Draft.TransitionSystems"
### 0.316s elapsed time, 1.263s cpu time, 0.130s GC time
Loading theory "Draft.Invariants" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert" via "Draft.AWN_Invariants")
### theory "HOL-Library.Nat_Bijection"
### 0.339s elapsed time, 1.349s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.219s elapsed time, 0.854s cpu time, 0.081s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "reachablep"
  Proving monotonicity ...
### theory "Draft.Invariants"
### 0.289s elapsed time, 1.142s cpu time, 0.104s GC time
Loading theory "Draft.OInvariants" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert" via "Draft.OAWN_Invariants")
Proofs for inductive predicate(s) "oreachablep"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.OInvariants"
### 0.756s elapsed time, 2.837s cpu time, 0.798s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.193s elapsed time, 4.561s cpu time, 0.984s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.033s elapsed time, 3.320s cpu time, 1.020s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.353s elapsed time, 7.806s cpu time, 1.949s GC time
Loading theory "Draft.Templates" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.182s cpu time, 0.050s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.OAWN_ConvertMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.526s elapsed time, 1.071s cpu time, 0.043s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class tau = type +
  fixes tau :: "'a"
instantiation
  seq_action :: (type) tau
  tau_seq_action == tau :: 'a seq_action
instantiation
  node_action :: (type) tau
  tau_node_action == tau :: 'a node_action
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AWN"
### 7.204s elapsed time, 15.169s cpu time, 3.475s GC time
Loading theory "Draft.AWN_Cterms" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert" via "Draft.AWN_SOS_Labels" via "Draft.Inv_Cterms" via "Draft.AWN_Labels")
Loading theory "Draft.AWN_SOS" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert" via "Draft.AWN_SOS_Labels")
Loading theory "Draft.OAWN_SOS" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert")
Proofs for inductive predicate(s) "microstep"
  Proving monotonicity ...
Proofs for inductive predicate(s) "seqp_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "oseqp_sosp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "parp_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "oparp_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "node_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ctermsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "onode_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "pnet_sosp"
  Proving monotonicity ...
### theory "Draft.AWN_Cterms"
### 1.882s elapsed time, 5.869s cpu time, 0.400s GC time
Loading theory "Draft.AWN_Labels" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert" via "Draft.AWN_SOS_Labels" via "Draft.Inv_Cterms")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  labelfrom ::
    "int => int => ('s, 'm, 'p, 'a) seqp => int * ('s, 'm, 'p, int) seqp"
Proofs for inductive predicate(s) "cnet_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "opnet_sosp"
  Proving monotonicity ...
### theory "Draft.AWN_SOS"
### 2.621s elapsed time, 8.135s cpu time, 0.559s GC time
instantiation
  label :: (ord) ord
  less_eq_label == less_eq :: 'a label => 'a label => bool
  less_label == less :: 'a label => 'a label => bool
Found termination order: "{}"
### theory "Draft.AWN_Labels"
### 0.889s elapsed time, 2.573s cpu time, 0.205s GC time
Loading theory "Draft.Inv_Cterms" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert" via "Draft.AWN_SOS_Labels")
Loading theory "Draft.AWN_Invariants" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert")
val simp_only = fn: thm list -> Proof.context -> int -> tactic
val shallow_simp = fn: Proof.context -> int -> tactic
val create_vcs = fn: Proof.context -> int -> tactic
val try_invs = fn: Proof.context -> int -> tactic
val try_final = fn: Proof.context -> int -> tactic
val each = fn: Proof.context -> int -> tactic
val simp_all = fn: Proof.context -> tactic
val intro_and_invs = fn: Proof.context -> int -> tactic
val process_vcs = fn: Proof.context -> 'a -> tactic
### theory "Draft.Inv_Cterms"
### 0.614s elapsed time, 1.848s cpu time, 0.045s GC time
Loading theory "Draft.AWN_SOS_Labels" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "ocnet_sosp"
  Proving monotonicity ...
### theory "Draft.AWN_Invariants"
### 0.799s elapsed time, 2.428s cpu time, 0.117s GC time
### theory "Draft.AWN_SOS_Labels"
### 0.317s elapsed time, 0.851s cpu time, 0.073s GC time
### theory "Draft.OAWN_SOS"
### 3.945s elapsed time, 11.409s cpu time, 0.723s GC time
Loading theory "Draft.OAWN_Invariants" (required by "Draft.OAWN_ConvertMoreTemplates" via "Draft.OAWN_Convert")
### theory "Draft.OAWN_Invariants"
### 0.693s elapsed time, 0.730s cpu time, 0.052s GC time
Loading theory "Draft.OAWN_Convert" (required by "Draft.OAWN_ConvertMoreTemplates")
### theory "Draft.OAWN_Convert"
### 0.266s elapsed time, 0.266s cpu time, 0.000s GC time
Loading theory "Draft.OAWN_ConvertMoreTemplates"
val templateLemmas =
   [("OAWN_Convert.other_steps_resp_local", "other_steps (other ?A ?I) ?I",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 0)
         )),
    ("OAWN_Convert.oseqp_sos_resp_local_steps",
     "local_steps (oseqp_sos ?\<Gamma> ?i) {?i}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("OAWN_Convert.seql_onl_swap",
     "seql ?i (onl ?\<Gamma> ?P) = onl ?\<Gamma> (seql ?i ?P)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("OAWN_Convert.seqll_onll_swap",
     "seqll ?i (onll ?\<Gamma> ?P) = onll ?\<Gamma> (seqll ?i ?P)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("OAWN_Convert.seqlsimp",
     "seql ?i ?P (?\<sigma>, ?p) = ?P (?\<sigma> ?i, ?p)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_var 2,
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 1, template_var 3)),
           template_var 0)))),
    ("OAWN_Convert.seqlI", "?P (fst ?s ?i, snd ?s) ==> seql ?i ?P ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 2,
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 1),
                    template_var 0)),
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("OAWN_Convert.oseqp_sos_subreachable",
     "automaton.trans ?OA = oseqp_sos ?\<Gamma> ?i ==>
      subreachable ?OA (other ?ANY {?i}) {?i}",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 3),
          template_app
           (template_app (template_hole 4, template_var 2),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("OAWN_Convert.seqllsimp",
     "seqll ?i ?P ((?\<sigma>, ?p), ?a, ?\<sigma>', ?p') =
      ?P ((?\<sigma> ?i, ?p), ?a, ?\<sigma>' ?i, ?p')",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 6), template_var 5),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 4),
               template_var 3)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0)))),
       template_app
        (template_var 5,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_var 4, template_var 6)),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_var 1, template_var 6)),
               template_var 0)))))),
    ("OAWN_Convert.closed_from_initialiD",
     "[| initiali ?i ?OI ?CI; (?\<xi>, ?p) : ?CI |]
      ==> EX \<sigma>. \<sigma> ?i = ?\<xi> & (\<sigma>, ?p) : ?OI",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_var 2)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("OAWN_Convert.open_from_initialiD",
     "[| initiali ?i ?OI ?CI; (?\<sigma>, ?p) : ?OI |]
      ==> EX \<xi>. ?\<sigma> ?i = \<xi> & (\<xi>, ?p) : ?CI",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("OAWN_Convert.seqllD",
     "seqll ?i ?P ((?\<sigma>, ?p), ?a, ?\<sigma>', ?p') ==>
      ?P ((?\<sigma> ?i, ?p), ?a, ?\<sigma>' ?i, ?p')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_var 3)),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_var 5,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_var 4, template_var 6)),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_var 1, template_var 6)),
                   template_var 0))))
           ))),
    ("OAWN_Convert.seqllI",
     "?P ((?\<sigma> ?i, ?p), ?a, ?\<sigma>' ?i, ?p') ==>
      seqll ?i ?P ((?\<sigma>, ?p), ?a, ?\<sigma>', ?p')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 6,
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_var 5, template_var 4)),
                    template_var 3)),
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app (template_var 1, template_var 4)),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 4),
               template_var 6),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 3)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))))
           ))),
    ("OAWN_Convert.same_seql",
     "[| ALL j:{?i}. ?\<sigma>' j = ?\<sigma> j;
         seql ?i ?P (?\<sigma>', ?s) |]
      ==> seql ?i ?P (?\<sigma>, ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_hole 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 4),
                template_var 1),
              template_app
               (template_app (template_hole 0, template_var 3),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("OAWN_Convert.oseq_step_is_seq_step",
     "[| ((?\<sigma>, ?p), ?a, ?\<sigma>', ?p') : oseqp_sos ?\<Gamma> ?i;
         ?\<sigma> ?i = ?\<xi> |]
      ==> EX \<xi>'.
             ?\<sigma>' ?i = \<xi>' &
             ((?\<xi>, ?p), ?a, \<xi>', ?p') : seqp_sos ?\<Gamma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 7),
                      template_var 6)),
                  template_app
                   (template_app (template_hole 9, template_var 5),
                    template_app
                     (template_app (template_hole 10, template_var 4),
                      template_var 3)))),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1))
            ),
        template_equation
         (template_app (template_var 7, template_var 1), template_var 0)],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("OAWN_Convert.open_seq_invariant",
     "[| ?A \<TTurnstile> (?I \<rightarrow>) ?P;
         initiali ?i (init ?OA) (init ?A);
         automaton.trans ?OA = oseqp_sos ?\<Gamma> ?i;
         automaton.trans ?A = seqp_sos ?\<Gamma> |]
      ==> ?OA \<Turnstile> (act ?I, other ?ANY {?i} \<rightarrow>)
                            seql ?i ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 3),
                template_app (template_hole 13, template_var 2)),
              template_app (template_hole 12, template_var 6))
            ),
        template_equation
         (template_app (template_hole 10, template_var 2),
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 3)),
        template_equation
         (template_app (template_hole 7, template_var 6),
          template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_app (template_hole 4, template_var 5)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_hole 1))),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 4))
           ))),
    ("OAWN_Convert.open_seq_step_invariant",
     "[| ?A \<TTurnstile>\<^sub>A (?I \<rightarrow>) ?P;
         initiali ?i (init ?OA) (init ?A);
         automaton.trans ?OA = oseqp_sos ?\<Gamma> ?i;
         automaton.trans ?A = seqp_sos ?\<Gamma> |]
      ==> ?OA \<Turnstile>\<^sub>A (act ?I, other ?ANY {?i} \<rightarrow>)
                                    seqll ?i ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 3),
                template_app (template_hole 13, template_var 2)),
              template_app (template_hole 12, template_var 6))
            ),
        template_equation
         (template_app (template_hole 10, template_var 2),
          template_app
           (template_app (template_hole 9, template_var 1),
            template_var 3)),
        template_equation
         (template_app (template_hole 7, template_var 6),
          template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_app (template_hole 4, template_var 5)),
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_hole 1))),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 4))
           ))),
    ("OAWN_Convert.reachable_oseq_seqp_sos'",
     "[| ?s : reachable ?OA ?I; initiali ?i (init ?OA) (init ?A);
         automaton.trans ?OA = oseqp_sos ?\<Gamma> ?i;
         automaton.trans ?A = seqp_sos ?\<Gamma> |]
      ==> EX \<xi>. fst ?s ?i = \<xi> & (\<xi>, snd ?s) : reachable ?A ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 5),
              template_app
               (template_app (template_hole 17, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 2),
                template_app (template_hole 15, template_var 4)),
              template_app (template_hole 14, template_var 1))
            ),
        template_equation
         (template_app (template_hole 12, template_var 4),
          template_app
           (template_app (template_hole 11, template_var 0),
            template_var 2)),
        template_equation
         (template_app (template_hole 9, template_var 1),
          template_app (template_hole 8, template_var 0))],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("OAWN_Convert.reachable_oseq_seqp_sos",
     "[| (?\<sigma>, ?p) : reachable ?OA ?I;
         initiali ?i (init ?OA) (init ?A);
         automaton.trans ?OA = oseqp_sos ?\<Gamma> ?i;
         automaton.trans ?A = seqp_sos ?\<Gamma> |]
      ==> EX \<xi>. ?\<sigma> ?i = \<xi> & (\<xi>, ?p) : reachable ?A ?I",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 6),
                  template_var 5)),
              template_app
               (template_app (template_hole 15, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 2),
                template_app (template_hole 13, template_var 4)),
              template_app (template_hole 12, template_var 1))
            ),
        template_equation
         (template_app (template_hole 10, template_var 4),
          template_app
           (template_app (template_hole 9, template_var 0),
            template_var 2)),
        template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("OAWN_Convert.initialiI",
     "[| !!\<sigma> p. (\<sigma>, p) : ?OI ==> (\<sigma> ?i, p) : ?CI;
         !!\<xi> p.
            (\<xi>, p) : ?CI ==>
            EX \<sigma>. \<xi> = \<sigma> ?i & (\<sigma>, p) : ?OI |]
      ==> initiali ?i ?OI ?CI",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           ))),
    ("OAWN_Convert.same_seqll",
     "[| ALL j:{?i}. ?\<sigma>\<^sub>1' j = ?\<sigma>\<^sub>1 j;
         ALL j:{?i}. ?\<sigma>\<^sub>2' j = ?\<sigma>\<^sub>2 j;
         seqll ?i ?P
          ((?\<sigma>\<^sub>1', ?s), ?a, ?\<sigma>\<^sub>2', ?s') |]
      ==> seqll ?i ?P
           ((?\<sigma>\<^sub>1, ?s), ?a, ?\<sigma>\<^sub>2, ?s')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_hole 5)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 8),
                  template_hole 5)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 8),
                template_var 3),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 7),
                    template_var 2)),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_app
                   (template_app (template_hole 1, template_var 5),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 8),
               template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 6),
                   template_var 2)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 0))))
           )))]:
   (string * thm * template) list
### theory "Draft.OAWN_ConvertMoreTemplates"
### 0.472s elapsed time, 0.710s cpu time, 0.103s GC time
val it = (): unit
