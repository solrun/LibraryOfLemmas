Loading theory "Draft.TransitionSystems" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.AWN_SOS")
Loading theory "Draft.Lib" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.AWN_SOS" via "Draft.AWN")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ToyMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ToyMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "Draft.Lib"
### 0.050s elapsed time, 0.226s cpu time, 0.000s GC time
Loading theory "Draft.AWN" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.AWN_SOS")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.589s cpu time, 0.037s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ToyMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
class msg = type +
  fixes newpkt :: "nat * nat => 'a"
    and eq_newpkt :: "'a => bool"
  assumes "eq_newpkt_eq": "!!d i. eq_newpkt (newpkt (d, i))"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.TransitionSystems"
### 0.274s elapsed time, 1.104s cpu time, 0.037s GC time
Loading theory "Draft.Invariants" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.AWN_Invariants")
### theory "HOL-Library.Nat_Bijection"
### 0.329s elapsed time, 1.304s cpu time, 0.107s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ToyMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.252s elapsed time, 0.994s cpu time, 0.071s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ToyMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "reachablep"
  Proving monotonicity ...
### theory "Draft.Invariants"
### 0.323s elapsed time, 1.264s cpu time, 0.164s GC time
Loading theory "Draft.OInvariants" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.OAWN_Convert" via "Draft.OAWN_Invariants")
Proofs for inductive predicate(s) "oreachablep"
  Proving monotonicity ...
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.OInvariants"
### 0.771s elapsed time, 2.897s cpu time, 0.731s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ToyMoreTemplates" via "Draft.ExtrEqs")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 1.118s elapsed time, 4.262s cpu time, 0.906s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.077s elapsed time, 3.375s cpu time, 1.122s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.360s elapsed time, 7.711s cpu time, 1.978s GC time
Loading theory "Draft.Templates" (required by "Draft.ToyMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.176s cpu time, 0.058s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ToyMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.515s elapsed time, 1.051s cpu time, 0.048s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class tau = type +
  fixes tau :: "'a"
instantiation
  seq_action :: (type) tau
  tau_seq_action == tau :: 'a seq_action
instantiation
  node_action :: (type) tau
  tau_node_action == tau :: 'a node_action
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AWN"
### 6.991s elapsed time, 14.969s cpu time, 3.487s GC time
Loading theory "Draft.AWN_Cterms" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.AWN_SOS_Labels" via "Draft.Inv_Cterms" via "Draft.AWN_Labels")
Loading theory "Draft.AWN_SOS" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main")
Loading theory "Draft.OAWN_SOS" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.OAWN_SOS_Labels")
Proofs for inductive predicate(s) "microstep"
  Proving monotonicity ...
Proofs for inductive predicate(s) "seqp_sosp"
Proofs for inductive predicate(s) "oseqp_sosp"
  Proving monotonicity ...
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "parp_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "oparp_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "node_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ctermsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "onode_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "pnet_sosp"
  Proving monotonicity ...
### theory "Draft.AWN_Cterms"
### 2.088s elapsed time, 6.532s cpu time, 0.575s GC time
Loading theory "Draft.AWN_Labels" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.AWN_SOS_Labels" via "Draft.Inv_Cterms")
consts
  labelfrom ::
    "int => int => ('s, 'm, 'p, 'a) seqp => int * ('s, 'm, 'p, int) seqp"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "cnet_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "opnet_sosp"
  Proving monotonicity ...
### theory "Draft.AWN_SOS"
### 2.972s elapsed time, 9.250s cpu time, 0.803s GC time
Loading theory "Draft.Pnet" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.OClosed_Transfer" via "Draft.Closed")
instantiation
  label :: (ord) ord
  less_eq_label == less_eq :: 'a label => 'a label => bool
  less_label == less :: 'a label => 'a label => bool
Found termination order: "{}"
### theory "Draft.AWN_Labels"
### 1.033s elapsed time, 3.170s cpu time, 0.308s GC time
Loading theory "Draft.Inv_Cterms" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.AWN_SOS_Labels")
Loading theory "Draft.AWN_Invariants" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main")
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
### theory "Draft.Pnet"
### 0.670s elapsed time, 2.537s cpu time, 0.161s GC time
Loading theory "Draft.Closed" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.OClosed_Transfer")
### theory "Draft.Closed"
### 0.122s elapsed time, 0.483s cpu time, 0.110s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
val simp_only = fn: thm list -> Proof.context -> int -> tactic
val shallow_simp = fn: Proof.context -> int -> tactic
val create_vcs = fn: Proof.context -> int -> tactic
val try_invs = fn: Proof.context -> int -> tactic
val try_final = fn: Proof.context -> int -> tactic
val each = fn: Proof.context -> int -> tactic
val simp_all = fn: Proof.context -> tactic
val intro_and_invs = fn: Proof.context -> int -> tactic
val process_vcs = fn: Proof.context -> 'a -> tactic
### theory "Draft.Inv_Cterms"
### 0.777s elapsed time, 2.964s cpu time, 0.192s GC time
Loading theory "Draft.AWN_SOS_Labels" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main")
Proofs for inductive predicate(s) "ocnet_sosp"
  Proving monotonicity ...
### theory "Draft.AWN_Invariants"
### 0.936s elapsed time, 3.447s cpu time, 0.192s GC time
### theory "Draft.AWN_SOS_Labels"
### 0.328s elapsed time, 0.868s cpu time, 0.087s GC time
Loading theory "Draft.Qmsg" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.Qmsg_Lifting")
### theory "Draft.OAWN_SOS"
### 4.448s elapsed time, 14.003s cpu time, 1.160s GC time
Loading theory "Draft.OAWN_Invariants" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.OAWN_Convert")
Loading theory "Draft.OAWN_SOS_Labels" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main")
Loading theory "Draft.ONode_Lifting" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.OClosed_Transfer" via "Draft.OClosed_Lifting" via "Draft.OPnet_Lifting")
Found termination order: "{}"
### theory "Draft.Qmsg"
### 0.301s elapsed time, 0.778s cpu time, 0.000s GC time
Loading theory "Draft.OPnet" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.OClosed_Transfer" via "Draft.OClosed_Lifting" via "Draft.OPnet_Lifting")
### theory "Draft.OAWN_SOS_Labels"
### 0.324s elapsed time, 1.288s cpu time, 0.092s GC time
### theory "Draft.OPnet"
### 0.245s elapsed time, 0.974s cpu time, 0.092s GC time
### theory "Draft.ONode_Lifting"
### 0.385s elapsed time, 1.425s cpu time, 0.092s GC time
Loading theory "Draft.OPnet_Lifting" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.OClosed_Transfer" via "Draft.OClosed_Lifting")
### theory "Draft.OPnet_Lifting"
### 0.377s elapsed time, 0.816s cpu time, 0.132s GC time
Loading theory "Draft.OClosed_Lifting" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main" via "Draft.OClosed_Transfer")
### theory "Draft.OClosed_Lifting"
### 0.057s elapsed time, 0.116s cpu time, 0.000s GC time
Loading theory "Draft.OClosed_Transfer" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main")
### theory "Draft.OAWN_Invariants"
### 0.866s elapsed time, 2.452s cpu time, 0.224s GC time
Loading theory "Draft.OAWN_Convert" (required by "Draft.ToyMoreTemplates" via "Draft.Toy" via "Draft.AWN_Main")
Loading theory "Draft.Qmsg_Lifting" (required by "Draft.ToyMoreTemplates" via "Draft.Toy")
locale openproc
  fixes np :: "nat => ('s, 'm seq_action) automaton"
    and onp :: "nat => ((nat => 'g) * 'l, 'm seq_action) automaton"
    and sr :: "'s => 'g * 'l"
  assumes "openproc np onp sr"
### theory "Draft.Qmsg_Lifting"
### 0.348s elapsed time, 1.070s cpu time, 0.153s GC time
### theory "Draft.OAWN_Convert"
### 0.355s elapsed time, 1.090s cpu time, 0.153s GC time
locale openproc_parq
  fixes np :: "nat => ('s, 'm seq_action) automaton"
    and onp :: "nat => ((nat => 'a) * 'b, 'm seq_action) automaton"
    and sr :: "'s => 'a * 'b"
    and qp :: "('t, 'm seq_action) automaton"
  assumes "openproc_parq np onp sr qp"
### theory "Draft.OClosed_Transfer"
### 0.555s elapsed time, 1.313s cpu time, 0.153s GC time
Loading theory "Draft.AWN_Main" (required by "Draft.ToyMoreTemplates" via "Draft.Toy")
### theory "Draft.AWN_Main"
### 0.287s elapsed time, 0.288s cpu time, 0.000s GC time
Loading theory "Draft.Toy" (required by "Draft.ToyMoreTemplates")
instantiation
  msg :: msg
  newpkt_msg == newpkt :: nat * nat => msg
  eq_newpkt_msg == eq_newpkt :: msg => bool
Found termination order: "{}"
instantiation
  pseqp :: ord
  less_eq_pseqp == less_eq :: pseqp => pseqp => bool
  less_pseqp == less :: pseqp => pseqp => bool
Found termination order: "{}"
Found termination order: "{}"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "Draft.Toy"
### 1.641s elapsed time, 1.750s cpu time, 0.148s GC time
Loading theory "Draft.ToyMoreTemplates"
val templateLemmas =
   [("Toy.not_eq_newpkt_pkt", "~ eq_newpkt (Pkt ?no ?sid)",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))
             )
         )),
    ("Toy.msg_ok_Newpkt", "msg_ok ?\<sigma> (Newpkt ?data ?dst)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Toy.toy_labels_not_empty",
     "labels \<Gamma>\<^sub>T\<^sub>O\<^sub>Y ?p ~= {}",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0),
           template_hole 0)
         )),
    ("Toy.clear_locals_but_not_globals",
     "state.id (clear_locals ?\<xi>) = state.id ?\<xi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Toy.clear_locals_but_not_globals",
     "nhid (clear_locals ?\<xi>) = nhid ?\<xi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Toy.clear_locals_but_not_globals",
     "no (clear_locals ?\<xi>) = no ?\<xi>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Toy.msg_sender_simps", "msg_sender (Pkt ?d ?sid) = ?sid",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Toy.msg_ok_newpkt", "msg_ok ?\<sigma> (newpkt (?data, ?dst))",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Toy.toy_ex_label",
     "EX l. l : labels \<Gamma>\<^sub>T\<^sub>O\<^sub>Y ?p",
     template_predicate (template_app (template_hole 3, t_empty))),
    ("Toy.pkt_simp", "pkt (?no, ?sid) = Pkt ?no ?sid",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Toy.oaodv_control_within",
     "control_within \<Gamma>\<^sub>T\<^sub>O\<^sub>Y (init (optoy ?i))",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_hole 5),
                   template_var 0)),
               template_hole 0)))
         )),
    ("Toy.toy_control_within",
     "control_within \<Gamma>\<^sub>T\<^sub>O\<^sub>Y (init (ptoy ?i))",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 0)),
                 template_app (template_hole 1, template_hole 5)),
               template_hole 0)))
         )),
    ("Toy.some_neq_not_eq", "(SOME x. x ~= ?i) ~= ?i",
     template_negation
      (
         template_equation
          (template_app (template_hole 0, t_empty), template_var 0)
         )),
    ("Toy.less_seqp",
     "(?l1.0 < ?l2.0) = (nat_of_seqp ?l1.0 < nat_of_seqp ?l2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.less_eq_seqp",
     "(?l1.0 <= ?l2.0) = (nat_of_seqp ?l1.0 <= nat_of_seqp ?l2.0)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.nos_inc_simp",
     "nos_inc ?\<xi> ?\<xi>' = (no ?\<xi> <= no ?\<xi>')",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.toy_trans",
     "automaton.trans (ptoy ?i) =
      seqp_sos \<Gamma>\<^sub>T\<^sub>O\<^sub>Y",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app (template_hole 2, template_hole 1)),
           template_hole 0)),
       template_app (template_hole 2, template_hole 1))),
    ("Toy.nos_incD", "nos_inc ?\<xi> ?\<xi>' ==> no ?\<xi> <= no ?\<xi>'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.otoy_trans",
     "automaton.trans (optoy ?i) =
      oseqp_sos \<Gamma>\<^sub>T\<^sub>O\<^sub>Y ?i",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_hole 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Toy.msg_ok_Pkt",
     "msg_ok ?\<sigma> (Pkt ?data ?src) = (?data <= no (?\<sigma> ?src))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 0,
           template_app (template_var 2, template_var 0))))),
    ("Toy.is_msg_inv_id",
     "?\<xi>' : is_newpkt ?\<xi> ==> state.id ?\<xi>' = state.id ?\<xi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.is_msg_inv_nhid",
     "?\<xi>' : is_newpkt ?\<xi> ==> nhid ?\<xi>' = nhid ?\<xi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.is_msg_inv_no",
     "?\<xi>' : is_newpkt ?\<xi> ==> no ?\<xi>' = no ?\<xi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.is_msg_inv_sid",
     "?\<xi>' : is_newpkt ?\<xi> ==> sid ?\<xi>' = sid ?\<xi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.is_msg_inv_msg",
     "?\<xi>' : is_newpkt ?\<xi> ==> msg ?\<xi>' = msg ?\<xi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.is_msg_inv_id",
     "?\<xi>' : is_pkt ?\<xi> ==> state.id ?\<xi>' = state.id ?\<xi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.is_msg_inv_nhid",
     "?\<xi>' : is_pkt ?\<xi> ==> nhid ?\<xi>' = nhid ?\<xi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.is_msg_inv_no",
     "?\<xi>' : is_pkt ?\<xi> ==> no ?\<xi>' = no ?\<xi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.is_msg_inv_msg",
     "?\<xi>' : is_pkt ?\<xi> ==> msg ?\<xi>' = msg ?\<xi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Toy.msg_ok_pkt",
     "msg_ok ?\<sigma> (pkt (?data, ?src)) =
      (?data <= no (?\<sigma> ?src))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 0,
           template_app (template_var 2, template_var 0))))),
    ("Toy.toy_proc_cases",
     "?p : ctermsl (\<Gamma>\<^sub>T\<^sub>O\<^sub>Y ?pn) ==>
      ?p : ctermsl (\<Gamma>\<^sub>T\<^sub>O\<^sub>Y PToy)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Toy.initiali_toy", "initiali ?i (init (optoy ?i)) (init (ptoy ?i))",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 10, template_var 0),
             template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_var 0)),
                 template_hole 4))),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 1, template_var 0)),
                 template_app (template_hole 0, template_hole 5)),
               template_hole 4)))
         )),
    ("Toy.\<sigma>\<^sub>O\<^sub>T\<^sub>O\<^sub>Y_labels",
     "(?\<sigma>, ?p) : \<sigma>\<^sub>O\<^sub>T\<^sub>O\<^sub>Y ==>
      labels \<Gamma>\<^sub>T\<^sub>O\<^sub>Y ?p = {PToy-:0}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)),
              template_hole 8)
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1)),
           template_hole 0)))),
    ("Toy.id_constant",
     "ptoy
       ?i \<TTurnstile> onl \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                         (%(\<xi>, uu_). state.id \<xi> = ?i)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_var 0)),
                   template_app (template_hole 7, template_hole 6)),
                 template_hole 5)),
             template_hole 4),
           template_app
            (template_app (template_hole 3, template_hole 6),
             template_app (template_hole 2, t_empty)))
         )),
    ("Toy.\<sigma>\<^sub>T\<^sub>O\<^sub>Y_labels",
     "(?\<xi>, ?p) : \<sigma>\<^sub>T\<^sub>O\<^sub>Y ?i ==>
      labels \<Gamma>\<^sub>T\<^sub>O\<^sub>Y ?p = {PToy-:0}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)),
              template_app (template_hole 8, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 6, template_hole 5), template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1)),
           template_hole 0)))),
    ("Toy.msg_ok_other_nos_inc",
     "[| msg_ok ?\<sigma> ?m; other nos_inc {?i} ?\<sigma> ?\<sigma>' |]
      ==> msg_ok ?\<sigma>' ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_hole 0)),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0), template_var 2)
           ))),
    ("Toy.anycast_weakenE",
     "[| anycast ?P ?a; !!m. ?P m ==> ?Q m |] ==> anycast ?Q ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), template_var 1)
           ))),
    ("Toy.msg_ok_no_leq_no",
     "[| msg_ok ?\<sigma> ?m;
         ALL j. no (?\<sigma> j) <= no (?\<sigma>' j) |]
      ==> msg_ok ?\<sigma>' ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0), template_var 1)
           ))),
    ("Toy.seq_nos_incs'",
     "ptoy
       ?i \<TTurnstile>\<^sub>A (%((\<xi>, uu_), uu_, \<xi>', uu_).
                                    nos_inc \<xi> \<xi>')",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_app
                    (template_hole 10,
                     template_app (template_hole 9, template_var 0)),
                   template_app (template_hole 8, template_hole 7)),
                 template_hole 6)),
             template_hole 5),
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty)))
         )),
    ("Toy.msg_okI",
     "(!!num' sid'. ?m = Pkt num' sid' ==> num' <= no (?\<sigma> sid')) ==>
      msg_ok ?\<sigma> ?m",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Toy.fst_initmissing_netgmap_pair_fst",
     "fst (initmissing
            (netgmap (%(p, q). (fst (Fun.id p), snd (Fun.id p), q)) ?s)) =
      fst (initmissing (netgmap fst ?s))",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10, template_app (template_hole 9, t_empty)),
             template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Toy.seq_nos_incs",
     "ptoy
       ?i \<TTurnstile>\<^sub>A onll \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                                 (%((\<xi>, uu_), uu_, \<xi>', uu_).
                                     nos_inc \<xi> \<xi>')",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_app
                    (template_hole 11,
                     template_app (template_hole 10, template_var 0)),
                   template_app (template_hole 9, template_hole 8)),
                 template_hole 7)),
             template_hole 6),
           template_app
            (template_app (template_hole 5, template_hole 8),
             template_app
              (template_hole 4, template_app (template_hole 3, t_empty))))
         )),
    ("Toy.toy_ex_labelE",
     "[| ALL l:labels \<Gamma>\<^sub>T\<^sub>O\<^sub>Y ?p. ?P l ?p;
         EX p l. ?P l p ==> ?Q |]
      ==> ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_var 2)),
              t_empty)
            ),
        template_implication
         ([template_predicate (template_app (template_hole 1, t_empty))],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Toy.oseq_msg_ok",
     "optoy
       ?i \<Turnstile>\<^sub>A (act TT, other ?U {?i} \<rightarrow>)
                                globala
                                 (%(\<sigma>, a, uu_).
                                     anycast (msg_ok \<sigma>) a)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_app (template_hole 14, template_hole 13),
                     template_app
                      (template_app (template_hole 12, template_hole 11),
                       template_var 1)),
                   template_hole 10)),
               template_app (template_hole 9, template_hole 8)),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5))),
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty)))
         )),
    ("Toy.sender_ip_valid",
     "ptoy
       ?i \<TTurnstile>\<^sub>A onll \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                                 (%((\<xi>, uu_), a, uu_).
                                     anycast
(%m. msg_sender m = state.id \<xi>) a)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_app
                    (template_hole 13,
                     template_app (template_hole 12, template_var 0)),
                   template_app (template_hole 11, template_hole 10)),
                 template_hole 9)),
             template_hole 8),
           template_app
            (template_app (template_hole 7, template_hole 10),
             template_app
              (template_hole 6, template_app (template_hole 5, t_empty))))
         )),
    ("Toy.oseq_id_constant",
     "optoy
       ?i \<Turnstile> (act TT, other ?ANY {?i} \<rightarrow>)
                        onl \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                         (seql ?i (%(\<xi>, uu_). state.id \<xi> = ?i))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app
                    (template_app (template_hole 14, template_hole 13),
                     template_app
                      (template_app (template_hole 12, template_hole 11),
                       template_var 1)),
                   template_hole 10)),
               template_app (template_hole 9, template_hole 8)),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5))),
           template_app
            (template_app (template_hole 4, template_hole 11),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, t_empty))))
         )),
    ("Toy.not_in_net_ips_fst_init_missing",
     "?i ~: net_ips ?\<sigma> ==>
      fst (initmissing (netgmap fst ?\<sigma>)) ?i = toy_init ?i",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_app (template_hole 11, template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 0))),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 5, template_var 1),
                     template_hole 4),
                   template_var 1),
                 template_app (template_hole 3, t_empty)),
               template_app (template_hole 1, t_empty)),
             template_app (template_hole 1, t_empty)),
           template_hole 0)))),
    ("Toy.oseq_bigger_than_next",
     "optoy
       ?i \<Turnstile> (otherwith nos_inc {?i} (orecvmsg msg_ok),
                        other nos_inc {?i} \<rightarrow>)
                        global
                         (%\<sigma>.
                             no (\<sigma> ?i)
                             <= no (\<sigma> (nhid (\<sigma> ?i))))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_app
                    (template_app (template_hole 15, template_hole 14),
                     template_app
                      (template_app (template_hole 13, template_hole 12),
                       template_var 0)),
                   template_hole 11)),
               template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_hole 7)),
                 template_app (template_hole 6, template_hole 5))),
             template_app
              (template_app (template_hole 4, template_hole 9),
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_hole 7))),
           template_app (template_hole 3, t_empty))
         )),
    ("Toy.oseq_nos_incs",
     "optoy
       ?i \<Turnstile>\<^sub>A (act TT, other ?ANY {?i} \<rightarrow>)
                                onll \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                                 (seqll ?i
                                   (%((\<xi>, uu_), uu_, \<xi>', uu_).
 nos_inc \<xi> \<xi>'))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 17,
                 template_app
                  (template_app
                    (template_app (template_hole 16, template_hole 15),
                     template_app
                      (template_app (template_hole 14, template_hole 13),
                       template_var 1)),
                   template_hole 12)),
               template_app (template_hole 11, template_hole 10)),
             template_app
              (template_app (template_hole 9, template_var 0),
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_hole 7))),
           template_app
            (template_app (template_hole 6, template_hole 13),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_hole 4,
                 template_app (template_hole 3, t_empty)))))
         )),
    ("Toy.nhid_eq_i",
     "ptoy
       ?i \<TTurnstile> onl \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                         (%(\<xi>, l).
                             l : {PToy-:2..PToy-:8} --> nhid \<xi> = ?i)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 18,
               template_app
                (template_app
                  (template_app
                    (template_hole 17,
                     template_app (template_hole 16, template_var 0)),
                   template_app (template_hole 15, template_hole 14)),
                 template_hole 13)),
             template_hole 12),
           template_app
            (template_app (template_hole 11, template_hole 14),
             template_app (template_hole 10, t_empty)))
         )),
    ("Toy.nhid_eq_id",
     "ptoy
       ?i \<TTurnstile> onl \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                         (%(\<xi>, l).
                             l : {PToy-:2..PToy-:8} -->
                             nhid \<xi> = state.id \<xi>)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_app
                    (template_hole 18,
                     template_app (template_hole 17, template_var 0)),
                   template_app (template_hole 16, template_hole 15)),
                 template_hole 14)),
             template_hole 13),
           template_app
            (template_app (template_hole 12, template_hole 15),
             template_app (template_hole 11, t_empty)))
         )),
    ("Toy.seq_no_leq_num",
     "ptoy
       ?i \<TTurnstile> onl \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                         (%(\<xi>, l).
                             l : {PToy-:7..PToy-:8} -->
                             no \<xi> <= num \<xi>)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 20,
               template_app
                (template_app
                  (template_app
                    (template_hole 19,
                     template_app (template_hole 18, template_var 0)),
                   template_app (template_hole 17, template_hole 16)),
                 template_hole 15)),
             template_hole 14),
           template_app
            (template_app (template_hole 13, template_hole 16),
             template_app (template_hole 12, t_empty)))
         )),
    ("Toy.seq_msg_ok",
     "ptoy
       ?i \<TTurnstile>\<^sub>A onll \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                                 (%((\<xi>, uu_), a, uu_).
                                     anycast
(%m. case m of Pkt num' sid' => num' = no \<xi> & sid' = ?i
     | Newpkt nat1 nat2 => True)
a)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_app
                    (template_hole 15,
                     template_app (template_hole 14, template_var 0)),
                   template_app (template_hole 13, template_hole 12)),
                 template_hole 11)),
             template_hole 10),
           template_app
            (template_app (template_hole 9, template_hole 12),
             template_app
              (template_hole 8, template_app (template_hole 7, t_empty))))
         )),
    ("Toy.oreceived_msg_ok",
     "optoy
       ?i \<Turnstile> (otherwith nos_inc {?i} (orecvmsg msg_ok),
                        other nos_inc {?i} \<rightarrow>)
                        onl \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                         (%(\<sigma>, l).
                             l : {PToy-:1..} -->
                             msg_ok \<sigma> (msg (\<sigma> ?i)))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 21,
                 template_app
                  (template_app
                    (template_app (template_hole 20, template_hole 19),
                     template_app
                      (template_app (template_hole 18, template_hole 17),
                       template_var 0)),
                   template_hole 16)),
               template_app
                (template_app
                  (template_app (template_hole 15, template_hole 14),
                   template_app
                    (template_app (template_hole 13, template_var 0),
                     template_hole 12)),
                 template_app (template_hole 11, template_hole 10))),
             template_app
              (template_app (template_hole 9, template_hole 14),
               template_app
                (template_app (template_hole 13, template_var 0),
                 template_hole 12))),
           template_app
            (template_app (template_hole 8, template_hole 17),
             template_app (template_hole 7, t_empty)))
         )),
    ("Toy.all_nos_inc",
     "optoy
       ?i \<Turnstile>\<^sub>A (otherwith nos_inc {?i} ?S,
                                other nos_inc {?i} \<rightarrow>)
                                onll \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                                 (%((\<sigma>, uu_), a, \<sigma>', uu_).
                                     ALL j.
  nos_inc (\<sigma> j) (\<sigma>' j))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 16,
                 template_app
                  (template_app
                    (template_app (template_hole 15, template_hole 14),
                     template_app
                      (template_app (template_hole 13, template_hole 12),
                       template_var 1)),
                   template_hole 11)),
               template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_hole 7)),
                 template_var 0)),
             template_app
              (template_app (template_hole 6, template_hole 9),
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_hole 7))),
           template_app
            (template_app (template_hole 5, template_hole 12),
             template_app
              (template_hole 4, template_app (template_hole 3, t_empty))))
         )),
    ("Toy.opar_bigger_than_next",
     "optoy
       ?i \<langle>\<langle>\<^bsub>?i\<^esub> qmsg \<Turnstile> (otherwith
                             nos_inc {?i} (orecvmsg msg_ok),
                            other nos_inc {?i} \<rightarrow>)
                            global
                             (%\<sigma>.
                                 no (\<sigma> ?i)
                                 <= no (\<sigma> (nhid (\<sigma> ?i))))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 21,
                 template_app
                  (template_app
                    (template_app
                      (template_hole 20,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 19, template_hole 18),
                           template_app
                            (template_app
                              (template_hole 17, template_hole 16),
                             template_var 0)),
                         template_hole 15)),
                     template_var 0),
                   template_app
                    (template_app
                      (template_app (template_hole 14, template_hole 13),
                       template_app (template_hole 12, template_hole 11)),
                     template_hole 15))),
               template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app
                    (template_app (template_hole 8, template_var 0),
                     template_hole 7)),
                 template_app (template_hole 6, template_hole 5))),
             template_app
              (template_app (template_hole 4, template_hole 9),
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_hole 7))),
           template_app (template_hole 3, t_empty))
         )),
    ("Toy.onode_bigger_than_next",
     "\<langle>?i : optoy
                     ?i \<langle>\<langle>\<^bsub>?i\<^esub> qmsg : ?R\<^sub>i\<rangle>\<^sub>o \<Turnstile> (otherwith
                                   nos_inc {?i} (oarrivemsg msg_ok),
                                  other nos_inc {?i} \<rightarrow>)
                                  global
                                   (%\<sigma>.
 no (\<sigma> ?i) <= no (\<sigma> (nhid (\<sigma> ?i))))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 22,
                 template_app
                  (template_app
                    (template_app (template_hole 21, template_var 1),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 20,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 19, template_hole 18),
                               template_app
                                (template_app
                                  (template_hole 17, template_hole 16),
                                 template_var 1)),
                             template_hole 15)),
                         template_var 1),
                       template_app
                        (template_app
                          (template_app
                            (template_hole 14, template_hole 13),
                           template_app
                            (template_hole 12, template_hole 11)),
                         template_hole 15))),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_hole 7)),
                 template_app (template_hole 6, template_hole 5))),
             template_app
              (template_app (template_hole 4, template_hole 9),
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_hole 7))),
           template_app (template_hole 3, t_empty))
         )),
    ("Toy.oseq_nhid_eq_i",
     "optoy
       ?i \<Turnstile> (act TT, other ?ANY {?i} \<rightarrow>)
                        onl \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                         (seql ?i
                           (%(\<xi>, l).
                               l : {PToy-:2..PToy-:8} -->
                               nhid \<xi> = ?i))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 23,
                 template_app
                  (template_app
                    (template_app (template_hole 22, template_hole 21),
                     template_app
                      (template_app (template_hole 20, template_hole 19),
                       template_var 1)),
                   template_hole 18)),
               template_app (template_hole 17, template_hole 16)),
             template_app
              (template_app (template_hole 15, template_var 0),
               template_app
                (template_app (template_hole 14, template_var 1),
                 template_hole 13))),
           template_app
            (template_app (template_hole 12, template_hole 19),
             template_app
              (template_app (template_hole 11, template_var 1),
               template_app (template_hole 10, t_empty))))
         )),
    ("Toy.oseq_nhid_eq_id",
     "optoy
       ?i \<Turnstile> (act TT, other ?ANY {?i} \<rightarrow>)
                        onl \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                         (seql ?i
                           (%(\<xi>, l).
                               l : {PToy-:2..PToy-:8} -->
                               nhid \<xi> = state.id \<xi>))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 24,
                 template_app
                  (template_app
                    (template_app (template_hole 23, template_hole 22),
                     template_app
                      (template_app (template_hole 21, template_hole 20),
                       template_var 1)),
                   template_hole 19)),
               template_app (template_hole 18, template_hole 17)),
             template_app
              (template_app (template_hole 16, template_var 0),
               template_app
                (template_app (template_hole 15, template_var 1),
                 template_hole 14))),
           template_app
            (template_app (template_hole 13, template_hole 20),
             template_app
              (template_app (template_hole 12, template_var 1),
               template_app (template_hole 11, t_empty))))
         )),
    ("Toy.opnet_bigger_than_next",
     "opnet (%i. optoy i \<langle>\<langle>\<^bsub>i\<^esub> qmsg)
       ?n \<Turnstile> (otherwith nos_inc (net_tree_ips ?n)
                         (oarrivemsg msg_ok),
                        other nos_inc (net_tree_ips ?n) \<rightarrow>)
                        global
                         (%\<sigma>.
                             ALL i:net_tree_ips ?n.
                                no (\<sigma> i)
                                <= no (\<sigma> (nhid (\<sigma> i))))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 22,
                 template_app
                  (template_app (template_hole 21, t_empty),
                   template_var 0)),
               template_app
                (template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app (template_hole 8, template_var 0)),
                 template_app (template_hole 7, template_hole 6))),
             template_app
              (template_app (template_hole 5, template_hole 9),
               template_app (template_hole 8, template_var 0))),
           template_app (template_hole 4, t_empty))
         )),
    ("Toy.node_local_nos_inc",
     "\<langle>?i : optoy
                     ?i \<langle>\<langle>\<^bsub>?i\<^esub> qmsg : ?R\<^sub>i\<rangle>\<^sub>o \<Turnstile>\<^sub>A (%\<sigma>
       _. oarrivemsg (%_ _. True) \<sigma>,
    other (%_ _. True) {?i} \<rightarrow>)
    globala
     (%(\<sigma>, uu_, \<sigma>'). nos_inc (\<sigma> ?i) (\<sigma>' ?i))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 20,
                 template_app
                  (template_app
                    (template_app (template_hole 19, template_var 1),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 18,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 17, template_hole 16),
                               template_app
                                (template_app
                                  (template_hole 15, template_hole 14),
                                 template_var 1)),
                             template_hole 13)),
                         template_var 1),
                       template_app
                        (template_app
                          (template_app
                            (template_hole 12, template_hole 11),
                           template_app
                            (template_hole 10, template_hole 9)),
                         template_hole 13))),
                   template_var 0)),
               t_empty),
             template_app
              (template_app (template_hole 6, t_empty),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_hole 4))),
           template_app
            (template_hole 3, template_app (template_hole 2, t_empty)))
         )),
    ("Toy.oseq_no_leq_num",
     "optoy
       ?i \<Turnstile> (act TT, other ?ANY {?i} \<rightarrow>)
                        onl \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                         (seql ?i
                           (%(\<xi>, l).
                               l : {PToy-:7..PToy-:8} -->
                               no \<xi> <= num \<xi>))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 25,
                 template_app
                  (template_app
                    (template_app (template_hole 24, template_hole 23),
                     template_app
                      (template_app (template_hole 22, template_hole 21),
                       template_var 1)),
                   template_hole 20)),
               template_app (template_hole 19, template_hole 18)),
             template_app
              (template_app (template_hole 17, template_var 0),
               template_app
                (template_app (template_hole 16, template_var 1),
                 template_hole 15))),
           template_app
            (template_app (template_hole 14, template_hole 21),
             template_app
              (template_app (template_hole 13, template_var 1),
               template_app (template_hole 12, t_empty))))
         )),
    ("Toy.is_pkt_handler_num_leq_no",
     "optoy
       ?i \<Turnstile> (otherwith nos_inc {?i} (orecvmsg msg_ok),
                        other nos_inc {?i} \<rightarrow>)
                        onl \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                         (%(\<sigma>, l).
                             l : {PToy-:6..PToy-:10} -->
                             num (\<sigma> ?i)
                             <= no (\<sigma> (sid (\<sigma> ?i))))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 27,
                 template_app
                  (template_app
                    (template_app (template_hole 26, template_hole 25),
                     template_app
                      (template_app (template_hole 24, template_hole 23),
                       template_var 0)),
                   template_hole 22)),
               template_app
                (template_app
                  (template_app (template_hole 21, template_hole 20),
                   template_app
                    (template_app (template_hole 19, template_var 0),
                     template_hole 18)),
                 template_app (template_hole 17, template_hole 16))),
             template_app
              (template_app (template_hole 15, template_hole 20),
               template_app
                (template_app (template_hole 19, template_var 0),
                 template_hole 18))),
           template_app
            (template_app (template_hole 14, template_hole 23),
             template_app (template_hole 13, t_empty)))
         )),
    ("Toy.bigger_than_next",
     "wf_net_tree ?n ==>
      AWN_SOS.closed
       (pnet (%i. ptoy i \<langle>\<langle> qmsg)
         ?n) \<TTurnstile> netglobal
                            (%\<sigma>.
                                ALL i.
                                   no (\<sigma> i)
                                   <= no (\<sigma> (nhid (\<sigma> i))))",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 20,
                 template_app
                  (template_app (template_hole 19, t_empty),
                   template_app
                    (template_app (template_hole 16, t_empty),
                     template_var 0))),
               template_hole 5),
             template_app (template_hole 4, t_empty))
           ))),
    ("Toy.ocnet_bigger_than_next",
     "oclosed
       (opnet (%i. optoy i \<langle>\<langle>\<^bsub>i\<^esub> qmsg)
         ?n) \<Turnstile> (%_ _ _. True,
                           other nos_inc (net_tree_ips ?n) \<rightarrow>)
                           global
                            (%\<sigma>.
                                ALL i:net_tree_ips ?n.
                                   no (\<sigma> i)
                                   <= no (\<sigma> (nhid (\<sigma> i))))",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 23,
                 template_app
                  (template_app (template_hole 22, t_empty),
                   template_app
                    (template_app (template_hole 19, t_empty),
                     template_var 0))),
               t_empty),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app (template_hole 5, template_var 0))),
           template_app (template_hole 4, t_empty))
         )),
    ("Toy.oreceived_msg_inv",
     "[| !!\<sigma> \<sigma>' m.
            [| ?P \<sigma> m; other ?Q {?i} \<sigma> \<sigma>' |]
            ==> ?P \<sigma>' m;
         !!\<sigma> m.
            ?P \<sigma> m ==>
            ?P (\<sigma>(?i := \<sigma> ?i(| msg := m |))) m |]
      ==> optoy
           ?i \<Turnstile> (otherwith ?Q {?i} (orecvmsg ?P),
                            other ?Q {?i} \<rightarrow>)
                            onl \<Gamma>\<^sub>T\<^sub>O\<^sub>Y
                             (%(\<sigma>, l).
                                 l : {PToy-:1} -->
                                 ?P \<sigma> (msg (\<sigma> ?i)))",
     template_implication
      ([template_predicate (template_app (template_hole 25, t_empty)),
        template_predicate (template_app (template_hole 25, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 17,
                   template_app
                    (template_app
                      (template_app (template_hole 16, template_hole 15),
                       template_app
                        (template_app (template_hole 14, template_hole 13),
                         template_var 0)),
                     template_hole 12)),
                 template_app
                  (template_app
                    (template_app (template_hole 11, template_var 1),
                     template_app
                      (template_app (template_hole 21, template_var 0),
                       template_hole 20)),
                   template_app (template_hole 10, template_var 2))),
               template_app
                (template_app (template_hole 22, template_var 1),
                 template_app
                  (template_app (template_hole 21, template_var 0),
                   template_hole 20))),
             template_app
              (template_app (template_hole 9, template_hole 13),
               template_app (template_hole 8, t_empty)))
           )))]:
   (string * thm * template) list
### theory "Draft.ToyMoreTemplates"
### 0.524s elapsed time, 0.786s cpu time, 0.118s GC time
val it = (): unit
