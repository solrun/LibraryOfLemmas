Loading theory "Draft.Lib" (required by "Draft.PnetMoreTemplates" via "Draft.Pnet" via "Draft.AWN_SOS" via "Draft.AWN")
Loading theory "Draft.TransitionSystems" (required by "Draft.PnetMoreTemplates" via "Draft.Pnet" via "Draft.AWN_SOS")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PnetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PnetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "Draft.Lib"
### 0.053s elapsed time, 0.237s cpu time, 0.000s GC time
Loading theory "Draft.AWN" (required by "Draft.PnetMoreTemplates" via "Draft.Pnet" via "Draft.AWN_SOS")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.146s elapsed time, 0.590s cpu time, 0.044s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PnetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
class msg = type +
  fixes newpkt :: "nat * nat => 'a"
    and eq_newpkt :: "'a => bool"
  assumes "eq_newpkt_eq": "!!d i. eq_newpkt (newpkt (d, i))"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.TransitionSystems"
### 0.260s elapsed time, 1.052s cpu time, 0.044s GC time
Loading theory "Draft.Invariants" (required by "Draft.PnetMoreTemplates" via "Draft.Pnet")
### theory "HOL-Library.Nat_Bijection"
### 0.332s elapsed time, 1.321s cpu time, 0.129s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PnetMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "reachablep"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.278s elapsed time, 1.099s cpu time, 0.085s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PnetMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "Draft.Invariants"
### 0.335s elapsed time, 1.318s cpu time, 0.200s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PnetMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 1.113s elapsed time, 4.194s cpu time, 0.960s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.067s elapsed time, 3.820s cpu time, 0.950s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.041s elapsed time, 6.243s cpu time, 1.358s GC time
Loading theory "Draft.Templates" (required by "Draft.PnetMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PnetMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.528s elapsed time, 1.094s cpu time, 0.094s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class tau = type +
  fixes tau :: "'a"
instantiation
  seq_action :: (type) tau
  tau_seq_action == tau :: 'a seq_action
instantiation
  node_action :: (type) tau
  tau_node_action == tau :: 'a node_action
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.AWN"
### 7.180s elapsed time, 14.752s cpu time, 3.843s GC time
Loading theory "Draft.AWN_SOS" (required by "Draft.PnetMoreTemplates" via "Draft.Pnet")
Proofs for inductive predicate(s) "seqp_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "parp_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "node_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "pnet_sosp"
  Proving monotonicity ...
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "cnet_sosp"
  Proving monotonicity ...
### theory "Draft.AWN_SOS"
### 2.328s elapsed time, 2.627s cpu time, 0.204s GC time
Loading theory "Draft.Pnet" (required by "Draft.PnetMoreTemplates")
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
### theory "Draft.Pnet"
### 0.470s elapsed time, 0.546s cpu time, 0.082s GC time
Loading theory "Draft.PnetMoreTemplates"
val templateLemmas =
   [("Pnet.pnet_init_net_ips_net_tree_ips",
     "?s : init (pnet ?np ?p) ==> net_ips ?s = net_tree_ips ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_app (template_hole 1, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Pnet.pnet_net_ips_net_tree_ips",
     "?s : reachable (pnet ?np ?p) ?I ==> net_ips ?s = net_tree_ips ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 3),
         template_app (template_hole 0, template_var 1)))),
    ("Pnet.pnet_maintains_dom",
     "(?s, ?a, ?s') : automaton.trans (pnet ?np ?p) ==>
      net_ips ?s = net_ips ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_app (template_hole 0, template_var 4),
         template_app (template_hole 0, template_var 2)))),
    ("Pnet.pnet_init_in_net_ips_in_net_tree_ips",
     "[| ?s : init (pnet ?np ?p); ?i : net_ips ?s |]
      ==> ?i : net_tree_ips ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Pnet.pnet_init_in_net_tree_ips_in_net_ips",
     "[| ?s : init (pnet ?np ?p); ?i : net_tree_ips ?p |]
      ==> ?i : net_ips ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Pnet.net_par_reachable_is_subnet",
     "?st : reachable (pnet ?np (?p1.0 \<parallel> ?p2.0)) ?I ==>
      EX s t. ?st = SubnetS s t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_app
                     (template_app (template_hole 3, template_var 2),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Pnet.subnet_reachable",
     "SubnetS ?s1.0 ?s2.0
      : reachable (pnet ?np (?p1.0 \<parallel> ?p2.0)) TT ==>
      ?s1.0 : reachable (pnet ?np ?p1.0) TT",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 0))),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 4),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_hole 0))
           ))),
    ("Pnet.subnet_reachable",
     "SubnetS ?s1.0 ?s2.0
      : reachable (pnet ?np (?p1.0 \<parallel> ?p2.0)) TT ==>
      ?s2.0 : reachable (pnet ?np ?p2.0) TT",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_app
                     (template_app (template_hole 1, template_var 1),
                      template_var 0))),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 0)),
               template_hole 0))
           ))),
    ("Pnet.pnet_init_not_in_net_tree_ips_not_in_net_ips",
     "[| ?s : init (pnet ?np ?p); ?i ~: net_tree_ips ?p |]
      ==> ?i ~: net_ips ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app (template_hole 1, template_var 1))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_app (template_hole 0, template_var 3))
               )
           ))),
    ("Pnet.net_node_reachable_is_node",
     "?st : reachable (pnet ?np \<langle>?ii; ?R\<^sub>i\<rangle>) ?I ==>
      EX ns R. ?st = NodeS ?ii ns R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 3),
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Pnet.init_mapstate_Some_aodv_init",
     "[| ?s : init (pnet ?np ?p); netmap ?s ?i = Some ?v |]
      ==> ?v : init (?np ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 4), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_hole 0,
               template_app (template_var 3, template_var 1)))
           ))),
    ("Pnet.delivered_to_net_ips",
     "[| ?s : reachable (pnet ?np ?p) TT;
         (?s, ?i:deliver(?d), ?s') : automaton.trans (pnet ?np ?p) |]
      ==> ?i : net_ips ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 5),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3)),
                template_hole 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_var 1)),
                    template_var 0))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 5))
           ))),
    ("Pnet.partial_net_preserves_subnets",
     "(SubnetS ?s ?t, ?a, ?st')
      : pnet_sos (automaton.trans (pnet ?np ?p1.0))
         (automaton.trans (pnet ?np ?p2.0)) ==>
      EX s' t'. ?st' = SubnetS s' t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 6),
                      template_var 5)),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1))),
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Pnet.reachable_connect_netmap",
     "[| ?s : reachable (pnet ?np ?n) TT;
         (?s, connect(?i, ?i'), ?s') : automaton.trans (pnet ?np ?n) |]
      ==> netmap ?s' = netmap ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 5),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3)),
                template_hole 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_var 1)),
                    template_var 0))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)))
            )],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 5)))),
    ("Pnet.reachable_disconnect_netmap",
     "[| ?s : reachable (pnet ?np ?n) TT;
         (?s, disconnect(?i, ?i'), ?s') : automaton.trans (pnet ?np ?n) |]
      ==> netmap ?s' = netmap ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 5),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_var 3)),
                template_hole 7))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 5),
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_var 1)),
                    template_var 0))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 8, template_var 4),
                  template_var 3)))
            )],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 5)))),
    ("Pnet.delivered_to_node",
     "[| ?s : reachable (pnet ?np \<langle>?ii; ?R\<^sub>i\<rangle>) TT;
         (?s, ?i:deliver(?d), ?s')
         : automaton.trans (pnet ?np \<langle>?ii; ?R\<^sub>i\<rangle>) |]
      ==> ?i = ?ii",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 5),
                    template_app
                     (template_app (template_hole 7, template_var 4),
                      template_var 3))),
                template_hole 6))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 6),
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app
                       (template_app (template_hole 2, template_var 2),
                        template_var 1)),
                    template_var 0))),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 8, template_var 5),
                  template_app
                   (template_app (template_hole 7, template_var 4),
                    template_var 3))))
            )],
       template_equation (template_var 2, template_var 4))),
    ("Pnet.wf_net_tree_net_ips_disjoint",
     "[| wf_net_tree (?p1.0 \<parallel> ?p2.0);
         ?s1.0 : reachable (pnet ?np ?p1.0) ?S;
         ?s2.0 : reachable (pnet ?np ?p2.0) ?S |]
      ==> net_ips ?s1.0 Int net_ips ?s2.0 = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 5)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 4)),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 3)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Pnet.pnet_tau_single_node",
     "[| wf_net_tree ?p; ?s : reachable (pnet ?np ?p) TT;
         (?s, \<tau>, ?s') : automaton.trans (pnet ?np ?p) |]
      ==> EX i:net_ips ?s.
             (ALL j. j ~= i --> netmap ?s' j = netmap ?s j) &
             net_ip_action ?np \<tau> i ?p ?s ?s'",
     template_implication
      ([template_predicate
         (template_app (template_hole 19, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 2),
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app (template_hole 16, template_var 1),
                    template_var 3)),
                template_hole 15))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 2),
                  template_app
                   (template_app (template_hole 12, template_hole 11),
                    template_var 0))),
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 16, template_var 1),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 2)),
             t_empty)
           ))),
    ("Pnet.pnet_deliver_single_node",
     "[| wf_net_tree ?p; ?s : reachable (pnet ?np ?p) TT;
         (?s, ?i:deliver(?d), ?s') : automaton.trans (pnet ?np ?p) |]
      ==> (ALL j. j ~= ?i --> netmap ?s' j = netmap ?s j) &
          net_ip_action ?np (?i:deliver(?d)) ?i ?p ?s ?s'",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 5)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 4),
              template_app
               (template_app
                 (template_hole 15,
                  template_app
                   (template_app (template_hole 14, template_var 3),
                    template_var 5)),
                template_hole 13))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 4),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 2),
                        template_var 1)),
                    template_var 0))),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 14, template_var 3),
                  template_var 5)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7, template_app (template_hole 6, t_empty)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_app
                        (template_app (template_hole 9, template_var 2),
                         template_var 1)),
                     template_var 2),
                   template_var 5),
                 template_var 4),
               template_var 0))
           ))),
    ("Pnet.reachable_par_subnet_induct",
     "[| SubnetS ?s ?t : reachable (pnet ?np (?p1.0 \<parallel> ?p2.0)) ?I;
         !!s t.
            SubnetS s t : init (pnet ?np (?p1.0 \<parallel> ?p2.0)) ==>
            ?P s t;
         !!s t s' t' a.
            [| SubnetS s t
               : reachable (pnet ?np (?p1.0 \<parallel> ?p2.0)) ?I;
               ?P s t;
               (SubnetS s t, a, SubnetS s' t')
               : automaton.trans (pnet ?np (?p1.0 \<parallel> ?p2.0));
               ?I a |]
            ==> ?P s' t' |]
      ==> ?P ?s ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 6),
                  template_var 5)),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app (template_hole 8, template_var 4),
                    template_app
                     (template_app (template_hole 7, template_var 3),
                      template_var 2))),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 6), template_var 5)
           )))]:
   (string * thm * template) list
### theory "Draft.PnetMoreTemplates"
### 0.392s elapsed time, 0.528s cpu time, 0.000s GC time
val it = (): unit
