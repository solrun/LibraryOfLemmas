Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BrentMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Tree" (required by "Draft.BrentMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BrentMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BrentMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.127s elapsed time, 0.528s cpu time, 0.043s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.BrentMoreTemplates" via "Draft.Brent" via "Draft.Basis")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.210s elapsed time, 0.860s cpu time, 0.043s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BrentMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.318s cpu time, 0.149s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BrentMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.While_Combinator"
### 0.415s elapsed time, 1.636s cpu time, 0.196s GC time
Loading theory "Draft.Basis" (required by "Draft.BrentMoreTemplates" via "Draft.Brent")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale fx0
  fixes f :: "'a => 'a"
    and x0 :: "'a"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
locale properties
  fixes f :: "'a => 'a"
    and x0 :: "'a"
    and lambda :: "nat"
    and mu :: "nat"
  assumes "Basis.properties f x0 lambda mu"
class height = type +
  fixes height :: "'a => nat"
### theory "Draft.Basis"
### 0.244s elapsed time, 0.974s cpu time, 0.074s GC time
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Loading theory "Draft.Brent" (required by "Draft.BrentMoreTemplates")
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
### Rewrite rule not in simpset:
### Wellfounded.accp lg_rel ?x1 ==>
### lg ?x1 == if ?x1 <= 1 then 0 else 1 + lg (?x1 div 2)
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.049s elapsed time, 3.970s cpu time, 0.923s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale properties
  fixes f :: "'a => 'a"
    and x0 :: "'a"
    and lambda :: "nat"
    and mu :: "nat"
  assumes "Basis.properties f x0 lambda mu"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.076s elapsed time, 3.955s cpu time, 0.817s GC time
### Cannot skip proof of schematic goal statement
Found termination order: "size <*mlex*> {}"
See theory exports
### theory "Draft.Brent"
### 0.722s elapsed time, 2.390s cpu time, 0.730s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.972s elapsed time, 6.049s cpu time, 1.097s GC time
Loading theory "Draft.Templates" (required by "Draft.BrentMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BrentMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.469s elapsed time, 0.525s cpu time, 0.068s GC time
Loading theory "Draft.BrentMoreTemplates"
val templateLemmas =
   [("Brent.lg_inv", "0 < ?x ==> lg (2 ^ ?x) = ?x",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)),
         template_var 0))),
    ("Brent.lg_safe", "0 < ?x ==> lg (?x + ?x) = 1 + lg ?x",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 2, template_var 0))))),
    ("Brent.brent_correct",
     "?s' = fx0.brent ?f ?x ?arbitrary ==>
      fx0.properties ?f ?x (l ?s') (m ?s')",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1),
               template_app (template_hole 1, template_var 3)),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Brent.lg_inv2", "2 ^ ?i = ?x ==> 2 ^ lg ?x = ?x",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_hole 1))),
            template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))),
           template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Brent.brent_code",
     "fx0.brent ?f ?x =
      while (%s. hare s ~= tortoise s)
       (%s. s(| tortoise := ?f (tortoise s), hare := ?f (hare s),
                m := m s + 1 |)) o
      (%s. s(| m := 0, tortoise := ?x, hare := fx0.seq' ?f ?x (l s) |)) o
      (while (%s. hare s ~= tortoise s)
        ((%s. s(| hare := ?f (hare s), l := l s + 1 |)) o
         (%s. if carrots s = l s
              then s(| tortoise := hare s, carrots := 2 * carrots s,
                       l := 0 |)
              else id s)) o
       (%s. s(| carrots := 1, l := 1, tortoise := ?x, hare := ?f ?x |)))",
     template_equation
      (template_app
        (template_app (template_hole 25, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 24,
           template_app
            (template_app
              (template_hole 24,
               template_app
                (template_app (template_hole 23, t_empty), t_empty)),
             t_empty)),
         template_app
          (template_app
            (template_hole 24,
             template_app
              (template_app (template_hole 23, t_empty),
               template_app
                (template_app (template_hole 24, t_empty), t_empty))),
           t_empty))))]:
   (string * thm * template) list
### theory "Draft.BrentMoreTemplates"
### 0.321s elapsed time, 0.447s cpu time, 0.044s GC time
val it = (): unit
