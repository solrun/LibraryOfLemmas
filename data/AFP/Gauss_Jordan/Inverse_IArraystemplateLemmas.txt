   [("Inverse_IArrays.matrix_to_iarray_invertible",
     "invertible ?A = invertible_iarray (matrix_to_iarray ?A)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Inverse_IArrays.matrix_to_iarray_option_inverse_matrix",
     "matrix_to_iarray_option (inverse_matrix ?A) =
      inverse_matrix_iarray (matrix_to_iarray ?A)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Inverse_IArrays.matrix_inv_Gauss_Jordan_iarrays_PA",
     "invertible ?A ==>
      matrix_to_iarray (matrix_inv ?A) =
      fst (Gauss_Jordan_iarrays_PA (matrix_to_iarray ?A))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 0)))))),
    ("Inverse_IArrays.matrix_to_iarray_option_inverse_matrix_code",
     "matrix_to_iarray_option (inverse_matrix ?A) =
      (let matrix_to_iarray_A = matrix_to_iarray ?A;
           GJ = Gauss_Jordan_iarrays_PA matrix_to_iarray_A
       in if nrows_iarray matrix_to_iarray_A =
             length
              (filter (%x. ~ is_zero_iarray x) (IArray.list_of (snd GJ)))
          then Some (fst GJ) else None)",
     template_equation
      (template_app
        (template_hole 17, template_app (template_hole 16, template_var 0)),
       template_app
        (template_app
          (template_hole 15,
           template_app (template_hole 14, template_var 0)),
         t_empty)))]
