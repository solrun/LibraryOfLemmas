Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Miscellaneous" via "HOL-Analysis.Determinants" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.535s cpu time, 0.032s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set")
### theory "HOL-Combinatorics.Transposition"
### 0.171s elapsed time, 0.700s cpu time, 0.032s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.FuncSet"
### 0.415s elapsed time, 1.646s cpu time, 0.166s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
### theory "HOL-Library.Infinite_Set"
### 0.288s elapsed time, 1.125s cpu time, 0.134s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.462s elapsed time, 1.838s cpu time, 0.166s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Miscellaneous" via "HOL-Analysis.Determinants" via "HOL-Combinatorics.Permutations")
### theory "HOL-Library.Nat_Bijection"
### 0.323s elapsed time, 1.257s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Disjoint_Sets"
### 0.280s elapsed time, 1.112s cpu time, 0.098s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.423s elapsed time, 1.664s cpu time, 0.169s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Analysis.Product_Vector")
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
### theory "HOL-Library.Product_Plus"
### 0.287s elapsed time, 0.980s cpu time, 0.582s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
consts
  shift :: "'a list => 'a stream => 'a stream"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.Set_Algebras"
### 0.239s elapsed time, 0.944s cpu time, 0.089s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  cycle :: "'a list => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.Phantom_Type"
### 0.813s elapsed time, 3.044s cpu time, 0.880s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Library.Numeral_Type")
consts
  flat :: "'a list stream => 'a stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.200s elapsed time, 4.556s cpu time, 1.094s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
### Additional type variable(s) in locale specification "card2": 'a
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
consts
  left :: "'a tree => 'a tree"
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
consts
  right :: "'a tree => 'a tree"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
### Additional type variable(s) in locale specification "countable": 'a
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
consts
  mset :: "'a list => 'a multiset"
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.785s elapsed time, 3.083s cpu time, 0.368s GC time
Loading theory "HOL-Library.Code_Cardinality" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Elementary_Operations" via "Draft.Code_Matrix" via "Draft.Code_Set")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### Code generator: dropping subsumed code equation
### List.coset [] <= set [] == False
### theory "HOL-Library.Code_Cardinality"
### 0.114s elapsed time, 0.461s cpu time, 0.000s GC time
Loading theory "Draft.Code_Set" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Elementary_Operations" via "Draft.Code_Matrix")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Code_Set"
### 0.059s elapsed time, 0.227s cpu time, 0.071s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type")
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.240s elapsed time, 4.874s cpu time, 0.551s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms")
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Numeral_Type"
### 0.775s elapsed time, 3.043s cpu time, 0.370s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable_Set"
### 0.494s elapsed time, 1.936s cpu time, 0.238s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
### theory "HOL-Library.Tree"
### 2.191s elapsed time, 8.589s cpu time, 1.041s GC time
Loading theory "Draft.Templates" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.083s elapsed time, 0.312s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Set_Idioms"
### 0.217s elapsed time, 0.853s cpu time, 0.060s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
### theory "HOL-Analysis.Metric_Arith"
### 0.687s elapsed time, 2.659s cpu time, 0.321s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
### theory "HOL-Library.Multiset"
### 4.424s elapsed time, 17.032s cpu time, 3.390s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Miscellaneous" via "HOL-Analysis.Determinants")
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
bundle inner_syntax
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.448s elapsed time, 5.664s cpu time, 1.498s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
### theory "HOL-Analysis.L2_Norm"
### 0.110s elapsed time, 0.429s cpu time, 0.063s GC time
Loading theory "HOL-Analysis.Operator_Norm" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Analysis.Operator_Norm"
### 0.121s elapsed time, 0.471s cpu time, 0.075s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2" via "HOL-Analysis.Elementary_Topology")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 0.990s elapsed time, 3.993s cpu time, 0.488s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.ExtrEqs")
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.592s elapsed time, 10.107s cpu time, 2.050s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
### theory "HOL-Library.Discrete"
### 0.176s elapsed time, 0.683s cpu time, 0.089s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
instantiation
  prod :: (metric_space, metric_space) metric_space
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 0.990s elapsed time, 3.864s cpu time, 0.459s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### theory "HOL-Library.Indicator_Function"
### 0.511s elapsed time, 1.977s cpu time, 0.289s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 1.383s elapsed time, 5.236s cpu time, 2.068s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Gauss_JordanMoreTemplates")
### theory "HOL-Analysis.Abstract_Topology"
### 3.530s elapsed time, 13.622s cpu time, 3.913s GC time
Loading theory "HOL-Analysis.Abstract_Limits" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Function_Topology")
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
### theory "HOL-Analysis.Abstract_Limits"
### 0.239s elapsed time, 0.941s cpu time, 0.108s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 1.183s elapsed time, 4.426s cpu time, 1.957s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Liminf_Limsup"
### 1.018s elapsed time, 3.777s cpu time, 1.901s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Norm_Arith")
### theory "HOL-Library.Order_Continuity"
### 0.617s elapsed time, 2.418s cpu time, 0.268s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
class infinity = type +
  fixes infinity :: "'a"
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Euclidean_Space"
### 2.689s elapsed time, 10.173s cpu time, 4.023s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
### theory "HOL-Analysis.Elementary_Topology"
### 2.962s elapsed time, 11.239s cpu time, 4.132s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.751s elapsed time, 2.935s cpu time, 0.289s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 1.348s elapsed time, 5.289s cpu time, 0.528s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
bundle vec_syntax
bundle no_vec_syntax
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
### theory "HOL-Analysis.Linear_Algebra"
### 1.069s elapsed time, 4.189s cpu time, 0.493s GC time
Loading theory "HOL-Analysis.Affine" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment" via "HOL-Analysis.Convex")
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 1.780s elapsed time, 6.960s cpu time, 0.887s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
### theory "HOL-Analysis.Affine"
### 0.518s elapsed time, 2.013s cpu time, 0.358s GC time
Loading theory "HOL-Analysis.Convex" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Line_Segment")
### theory "HOL-Analysis.Abstract_Topology_2"
### 1.455s elapsed time, 5.674s cpu time, 0.911s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
### theory "HOL-Analysis.Connected"
### 0.315s elapsed time, 1.231s cpu time, 0.139s GC time
Loading theory "HOL-Analysis.Function_Topology" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
instantiation
  fun :: (type, topological_space) topological_space
  open_fun == open :: ('a => 'b) set => bool
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
### theory "HOL-Analysis.Convex"
### 1.052s elapsed time, 4.054s cpu time, 0.660s GC time
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Elementary_Normed_Spaces")
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
### theory "HOL-Analysis.Function_Topology"
### 0.796s elapsed time, 3.040s cpu time, 0.638s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
### theory "HOL-Analysis.Norm_Arith"
### 0.345s elapsed time, 1.291s cpu time, 0.269s GC time
Loading theory "Rank_Nullity_Theorem.Dual_Order" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type")
### Abstraction on left hand side of equation, in theorem:
### linorder.Min (%x y. y <= x) (set (?x # ?xs)) ==
### fold dual_wellorder.min ?xs ?x
### Abstraction on left hand side of equation, in theorem:
### linorder.Max (%x y. y <= x) (set (?x # ?xs)) ==
### fold dual_wellorder.max ?xs ?x
### Abstraction on left hand side of equation, in theorem:
### dual_wellorder.sorted [] == True
### Abstraction on left hand side of equation, in theorem:
### dual_wellorder.sorted [?x] == True
### Abstraction on left hand side of equation, in theorem:
### dual_wellorder.sorted (?x # ?y # ?zs) ==
### ?y <= ?x & dual_wellorder.sorted (?y # ?zs)
### Abstraction on left hand side of equation, in theorem:
### dual_wellorder.sorted_list_of_set (set ?xs) ==
### dual_wellorder.sort (remdups ?xs)
### theory "HOL-Analysis.Cartesian_Space"
### 1.913s elapsed time, 7.230s cpu time, 1.487s GC time
Loading theory "HOL-Analysis.Determinants" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Miscellaneous")
### theory "Rank_Nullity_Theorem.Dual_Order"
### 1.298s elapsed time, 4.739s cpu time, 3.485s GC time
### theory "HOL-Library.Extended_Real"
### 4.073s elapsed time, 15.410s cpu time, 5.467s GC time
Loading theory "HOL-Library.Extended_Nonnegative_Real" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Analysis.Extended_Real_Limits")
"{False, True}"
  :: "bool set"
"{False, True}"
  :: "bool set"
"{a\<^sub>1, a\<^sub>2}"
  :: "Enum.finite_2 set"
"{a\<^sub>1, a\<^sub>2}"
  :: "Enum.finite_2 set"
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
"{a\<^sub>1, a\<^sub>2, a\<^sub>3, a\<^sub>4, a\<^sub>5}"
  :: "Enum.finite_5 set"
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
"- \<infinity>"
  :: "ereal"
"\<infinity>"
  :: "ereal"
instantiation
  ennreal :: complete_linorder
  Inf_ennreal == Inf :: ennreal set => ennreal
  Sup_ennreal == Sup :: ennreal set => ennreal
  bot_ennreal == bot :: ennreal
  sup_ennreal == sup :: ennreal => ennreal => ennreal
  top_ennreal == top :: ennreal
  inf_ennreal == inf :: ennreal => ennreal => ennreal
  less_eq_ennreal == less_eq :: ennreal => ennreal => bool
  less_ennreal == less :: ennreal => ennreal => bool
instantiation
  ennreal :: infinity
  infinity_ennreal == infinity :: ennreal
instantiation
  ennreal :: {comm_semiring_1,semiring_1_no_zero_divisors}
  zero_ennreal == zero_class.zero :: ennreal
  plus_ennreal == plus :: ennreal => ennreal => ennreal
  one_ennreal == one_class.one :: ennreal
  times_ennreal == times :: ennreal => ennreal => ennreal
### theory "HOL-Analysis.Determinants"
### 1.860s elapsed time, 7.003s cpu time, 3.689s GC time
"True"
  :: "bool"
"ereal (13 / 4)"
  :: "ereal"
instantiation
  ennreal :: minus
  minus_ennreal == minus :: ennreal => ennreal => ennreal
"True"
  :: "bool"
instantiation
  ennreal :: inverse
  inverse_ennreal == inverse :: ennreal => ennreal
  divide_ennreal == divide :: ennreal => ennreal => ennreal
structure Cancel_Ennreal_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 2.955s elapsed time, 10.768s cpu time, 4.542s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Topology_Euclidean_Space")
instantiation
  ennreal :: linear_continuum_topology
  open_ennreal == open :: ennreal set => bool
### theory "HOL-Library.Extended_Nonnegative_Real"
### 1.563s elapsed time, 4.984s cpu time, 0.843s GC time
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 0.997s elapsed time, 1.596s cpu time, 0.333s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 12.136s elapsed time, 36.150s cpu time, 34.624s GC time
Loading theory "HOL-Analysis.Convex_Euclidean_Space" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative")
Loading theory "HOL-Analysis.Extended_Real_Limits" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
Loading theory "HOL-Analysis.Line_Segment" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative")
### theory "HOL-Analysis.Line_Segment"
### 0.784s elapsed time, 2.419s cpu time, 0.361s GC time
### theory "HOL-Analysis.Convex_Euclidean_Space"
### 0.869s elapsed time, 2.581s cpu time, 0.361s GC time
### theory "HOL-Analysis.Extended_Real_Limits"
### 0.929s elapsed time, 2.753s cpu time, 0.511s GC time
Loading theory "HOL-Analysis.Summation_Tests" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Uniform_Limit")
### theory "HOL-Analysis.Summation_Tests"
### 0.617s elapsed time, 0.686s cpu time, 0.094s GC time
Loading theory "HOL-Analysis.Uniform_Limit" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative" via "HOL-Analysis.Bounded_Linear_Function")
### theory "HOL-Analysis.Uniform_Limit"
### 0.392s elapsed time, 0.393s cpu time, 0.000s GC time
Loading theory "HOL-Analysis.Bounded_Linear_Function" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space" via "HOL-Analysis.Derivative")
instantiation
  blinfun :: (real_normed_vector, real_normed_vector) real_normed_vector
  uminus_blinfun == uminus ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  zero_blinfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>L 'b
  minus_blinfun == minus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  plus_blinfun == plus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  sgn_blinfun == sgn ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  norm_blinfun == norm :: 'a \<Rightarrow>\<^sub>L 'b => real
  scaleR_blinfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  dist_blinfun == dist ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b => real
  uniformity_blinfun == uniformity ::
    ('a \<Rightarrow>\<^sub>L 'b * 'a \<Rightarrow>\<^sub>L 'b) filter
  open_blinfun == open :: ('a \<Rightarrow>\<^sub>L 'b) set => bool
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
### theory "HOL-Analysis.Bounded_Linear_Function"
### 1.298s elapsed time, 1.393s cpu time, 0.132s GC time
Loading theory "HOL-Analysis.Derivative" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type" via "HOL-Analysis.Cartesian_Euclidean_Space")
### theory "HOL-Analysis.Derivative"
### 1.307s elapsed time, 1.479s cpu time, 0.236s GC time
Loading theory "HOL-Analysis.Cartesian_Euclidean_Space" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref" via "Rank_Nullity_Theorem.Mod_Type")
### theory "HOL-Analysis.Cartesian_Euclidean_Space"
### 0.234s elapsed time, 0.299s cpu time, 0.089s GC time
Loading theory "Rank_Nullity_Theorem.Mod_Type" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref")
class mod_type = times + neg_numeral + wellorder +
  fixes Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "type": "type_definition Rep Abs {0..<int CARD('a)}"
    and "size1": "1 < int CARD('a)"
    and "zero_def": "(0::'a) = Abs 0"
    and "one_def": "(1::'a) = Abs 1"
    and "add_def": "!!x y. x + y = Abs ((Rep x + Rep y) mod int CARD('a))"
    and "mult_def": "!!x y. x * y = Abs (Rep x * Rep y mod int CARD('a))"
    and "diff_def": "!!x y. x - y = Abs ((Rep x - Rep y) mod int CARD('a))"
    and "minus_def": "!!x. - x = Abs (- Rep x mod int CARD('a))"
    and "strict_mono_Rep": "strict_mono Rep"
instantiation
  bit0 :: (finite) mod_type
  bit1 :: (finite) mod_type
  Rep_bit0 == Rep :: 'a bit0 => int
  Abs_bit0 == Abs :: int => 'a bit0
  Rep_bit1 == Rep :: 'a bit1 => int
  Abs_bit1 == Abs :: int => 'a bit1
### theory "Rank_Nullity_Theorem.Mod_Type"
### 1.364s elapsed time, 1.484s cpu time, 0.122s GC time
Loading theory "Rank_Nullity_Theorem.Miscellaneous" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rref")
locale Vector_Spaces.linear
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and f :: "'b => 'c"
  assumes "Vector_Spaces.linear (*a) (*b) f"
locale finite_dimensional_vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
    and Basis :: "'b set"
  assumes "finite_dimensional_vector_space (*s) Basis"
locale Vector_Spaces.linear
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and f :: "'b => 'c"
  assumes "linear (*a) (*b) f"
instantiation
  fun :: (real_vector, real_vector) real_vector
  scaleR_fun == scaleR :: real => ('a => 'b) => 'a => 'b
instantiation
  vec :: (type, finite) equal
  equal_vec == equal_class.equal :: ('a, 'b) vec => ('a, 'b) vec => bool
### theory "Rank_Nullity_Theorem.Miscellaneous"
### 0.822s elapsed time, 0.886s cpu time, 0.055s GC time
Loading theory "Draft.Code_Matrix" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Elementary_Operations")
Loading theory "Draft.Rref" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan")
Loading theory "Rank_Nullity_Theorem.Fundamental_Subspaces" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Elementary_Operations")
### theory "Rank_Nullity_Theorem.Fundamental_Subspaces"
### 0.131s elapsed time, 0.428s cpu time, 0.062s GC time
Loading theory "Rank_Nullity_Theorem.Dim_Formula" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan" via "Draft.Rank")
locale vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "vector_space (*s)"
locale finite_dimensional_vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
    and Basis :: "'b set"
  assumes "finite_dimensional_vector_space (*s) Basis"
locale vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "vector_space (*s)"
### theory "Draft.Rref"
### 0.255s elapsed time, 0.803s cpu time, 0.109s GC time
locale finite_dimensional_vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
    and Basis :: "'b set"
  assumes "finite_dimensional_vector_space (*s) Basis"
### theory "Rank_Nullity_Theorem.Dim_Formula"
### 0.145s elapsed time, 0.420s cpu time, 0.048s GC time
Loading theory "Draft.Rank" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan")
### theory "Draft.Code_Matrix"
### 0.337s elapsed time, 0.974s cpu time, 0.109s GC time
Loading theory "Draft.Elementary_Operations" (required by "Draft.Gauss_JordanMoreTemplates" via "Draft.Gauss_Jordan")
### theory "Draft.Rank"
### 0.056s elapsed time, 0.115s cpu time, 0.000s GC time
### theory "Draft.Elementary_Operations"
### 0.417s elapsed time, 0.462s cpu time, 0.062s GC time
Loading theory "Draft.Gauss_Jordan" (required by "Draft.Gauss_JordanMoreTemplates")
consts
  row_add_iterate ::
    "(('a, 'n) vec, 'm) vec => nat => 'm => 'n => (('a, 'n) vec, 'm) vec"
### theory "Draft.Gauss_Jordan"
### 0.982s elapsed time, 1.213s cpu time, 0.318s GC time
Loading theory "Draft.Gauss_JordanMoreTemplates"
val templateLemmas =
   [("Gauss_Jordan.rref_Gauss_Jordan",
     "reduced_row_echelon_form (Gauss_Jordan ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Gauss_Jordan.rank_col_rank", "rank ?A = col_rank ?A",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Gauss_Jordan.row_rank_eq_col_rank", "row_rank ?A = col_rank ?A",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Gauss_Jordan.rank_le_ncols", "rank ?A <= ncols ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Gauss_Jordan.rank_le_nrows", "rank ?A <= nrows ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Gauss_Jordan.rank_Gauss_Jordan", "rank ?A = rank (Gauss_Jordan ?A)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Gauss_Jordan.rank_transpose",
     "rank (Finite_Cartesian_Product.transpose ?A) = rank ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gauss_Jordan.rank_eq_dim_col_space",
     "rank ?A = vec.dim (col_space ?A)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Gauss_Jordan.rank_eq_dim_col_space'",
     "vec.dim (col_space ?A) = rank ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Gauss_Jordan.row_rank_eq_col_rank_rref",
     "reduced_row_echelon_form ?A ==> row_rank ?A = col_rank ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Gauss_Jordan.A_0_imp_Gauss_Jordan_0",
     "?A = 0 ==> Gauss_Jordan ?A = 0",
     template_implication
      ([template_equation (template_var 0, template_hole 1)],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("Gauss_Jordan.dim_null_space",
     "vec.dim (null_space ?A) =
      finite_dimensional_vector_space.dimension cart_basis - rank ?A",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Gauss_Jordan.dim_left_null_space",
     "vec.dim (left_null_space ?A) =
      finite_dimensional_vector_space.dimension cart_basis - rank ?A",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Gauss_Jordan.rank_greater_zero", "?A ~= 0 ==> 0 < rank ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 0)))),
    ("Gauss_Jordan.invertible_Gauss_Jordan",
     "EX P. invertible P & Gauss_Jordan ?A = P ** ?A",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Gauss_Jordan.rank_eq_dim_image",
     "rank ?A = vec.dim (range ((*v) ?A))",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Gauss_Jordan.Gauss_Jordan_not_0", "?A ~= 0 ==> Gauss_Jordan ?A ~= 0",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app (template_hole 0, template_var 0),
             template_hole 1)
           ))),
    ("Gauss_Jordan.invertible_Gauss_Jordan_up_to_k",
     "EX P. invertible P & Gauss_Jordan_upt_k ?A ?k = P ** ?A",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Gauss_Jordan.rref_Gauss_Jordan_upt_k",
     "?k < ncols ?A ==>
      reduced_row_echelon_form_upt_k (Gauss_Jordan_upt_k ?A ?k) (Suc ?k)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Gauss_Jordan.rank_less_row_i_imp_i_is_zero",
     "rank ?A <= mod_type_class.to_nat ?i ==> Gauss_Jordan ?A $ ?i = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Gauss_Jordan.Gauss_Jordan",
     "EX P. invertible P &
            Gauss_Jordan ?A = P ** ?A &
            reduced_row_echelon_form (Gauss_Jordan ?A)",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("Gauss_Jordan.invertible_Gauss_Jordan_column_k",
     "EX P. invertible P &
            snd (Gauss_Jordan_column_k (?i, ?A) ?k) = P ** ?A",
     template_predicate (template_app (template_hole 7, t_empty))),
    ("Gauss_Jordan.row_greater_greatest_is_zero",
     "(GREATEST m. ~ is_zero_row_upt_k m ?k ?A) < ?i ==>
      is_zero_row_upt_k ?i ?k ?A",
     template_implication
      ([template_inequation
         (less_than, template_app (template_hole 2, t_empty),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("Gauss_Jordan.greatest_ge_nonzero_row",
     "~ is_zero_row_upt_k ?i ?k ?A ==>
      ?i <= (GREATEST m. ~ is_zero_row_upt_k m ?k ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 0, t_empty)))),
    ("Gauss_Jordan.rref_suc_if_all_rows_not_zero",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         ALL n. ~ is_zero_row_upt_k n ?k ?A |]
      ==> reduced_row_echelon_form_upt_k ?A (Suc ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gauss_Jordan.rank_eq_suc_to_nat_greatest",
     "?A ~= 0 ==>
      rank ?A =
      mod_type_class.to_nat
       (GREATEST a. ~ is_zero_row a (Gauss_Jordan ?A)) +
      1",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 8))],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4, template_app (template_hole 3, t_empty))),
           template_hole 0)))),
    ("Gauss_Jordan.from_nat_to_nat_greatest",
     "mod_type_class.from_nat
       (Suc (mod_type_class.to_nat
              (GREATEST n. ~ is_zero_row_upt_k n ?k ?A))) =
      (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_hole 6,
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty)))),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, t_empty)),
         template_hole 0))),
    ("Gauss_Jordan.invertible_row_add_iterate",
     "?n < nrows ?A ==>
      EX P. invertible P & row_add_iterate ?A ?n ?i ?j = P ** ?A",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 6, template_var 2))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Gauss_Jordan.rank_Gauss_Jordan_code",
     "rank ?A =
      (if ?A = 0 then 0
       else let A' = Gauss_Jordan ?A
            in mod_type_class.to_nat (GREATEST a. row a A' ~= 0) + 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 14, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 0),
                   template_hole 11)),
               template_hole 10),
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 0)),
               t_empty))
           ))),
    ("Gauss_Jordan.independent_not_zero_rows_rref",
     "reduced_row_echelon_form ?A ==>
      vec.independent {row i ?A |i. row i ?A ~= 0}",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app (template_hole 5, t_empty))
               )
           ))),
    ("Gauss_Jordan.rank_Gauss_Jordan_eq",
     "rank ?A =
      (let A' = Gauss_Jordan ?A in card {row i A' |i. row i A' ~= 0})",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app
        (template_app
          (template_hole 9, template_app (template_hole 8, template_var 0)),
         t_empty))),
    ("Gauss_Jordan.rref_rank",
     "reduced_row_echelon_form ?A ==>
      rank ?A = card {row i ?A |i. row i ?A ~= 0}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_equation
        (template_app (template_hole 8, template_var 0),
         template_app
          (template_hole 7, template_app (template_hole 6, t_empty))))),
    ("Gauss_Jordan.greatest_plus_one_eq_0",
     "Suc (mod_type_class.to_nat
            (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) =
      nrows ?A ==>
      (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows) =
      (0::?'rows)",
     template_implication
      ([template_equation
         (template_app
           (template_hole 9,
            template_app
             (template_hole 8, template_app (template_hole 7, t_empty))),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 7, t_empty)),
           template_hole 1),
         template_hole 0))),
    ("Gauss_Jordan.Gauss_Jordan_in_ij_1",
     "EX n. ?A $ n $ ?j ~= (0::?'a) & ?i <= n ==>
      Gauss_Jordan_in_ij ?A ?i ?j $ ?i $ ?j = (1::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0),
                   template_var 1)),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("Gauss_Jordan.row_add_iterate_preserves_greater_than_n",
     "[| ?n < nrows ?A; ?n < mod_type_class.to_nat ?a |]
      ==> row_add_iterate ?A ?n ?i ?j $ ?a $ ?b = ?A $ ?a $ ?b",
     template_implication
      ([template_inequation
         (less_than, template_var 5,
          template_app (template_hole 5, template_var 4)),
        template_inequation
         (less_than, template_var 5,
          template_app (template_hole 4, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 4),
                       template_var 5),
                     template_var 2),
                   template_var 1)),
               template_var 3)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_var 0)))),
    ("Gauss_Jordan.row_add_iterate_preserves_pivot_row",
     "[| ?n < nrows ?A; mod_type_class.to_nat ?i <= ?n |]
      ==> row_add_iterate ?A ?n ?i ?j $ ?i $ ?b = ?A $ ?i $ ?b",
     template_implication
      ([template_inequation
         (less_than, template_var 4,
          template_app (template_hole 6, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 2),
          template_var 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 4),
                     template_var 2),
                   template_var 1)),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 0)))),
    ("Gauss_Jordan.foldl_Gauss_condition_1",
     "[| ALL m. is_zero_row_upt_k m ?k ?A;
         ALL m>=0::?'rows. ?A $ m $ mod_type_class.from_nat ?k = (0::?'a) |]
      ==> is_zero_row_upt_k ?m (Suc ?k) ?A",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_var 0),
               template_app (template_hole 0, template_var 2)),
             template_var 1)
           ))),
    ("Gauss_Jordan.greatest_less_zero_row",
     "[| reduced_row_echelon_form_upt_k ?A ?k; is_zero_row_upt_k ?i ?k ?A;
         ~ (ALL a. is_zero_row_upt_k a ?k ?A) |]
      ==> (GREATEST m. ~ is_zero_row_upt_k m ?k ?A) < ?i",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_var 1),
              template_var 2)
            ),
        template_negation
         (template_predicate (template_app (template_hole 2, t_empty)))],
       template_inequation
        (less_than, template_app (template_hole 0, t_empty),
         template_var 0))),
    ("Gauss_Jordan.condition_1_part_1",
     "[| ALL m>=mod_type_class.from_nat 0.
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'a);
         ALL m. is_zero_row_upt_k m ?k ?A |]
      ==> is_zero_row_upt_k ?j (Suc ?k) ?A",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1)),
             template_var 2)
           ))),
    ("Gauss_Jordan.greatest_ge_nonzero_row'",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         ?i <= (GREATEST m. ~ is_zero_row_upt_k m ?k ?A);
         ~ (ALL a. is_zero_row_upt_k a ?k ?A) |]
      ==> ~ is_zero_row_upt_k ?i ?k ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 3, t_empty)),
        template_negation
         (template_predicate (template_app (template_hole 0, t_empty)))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1),
                 template_var 2)
               )
           ))),
    ("Gauss_Jordan.reduced_row_echelon_form_upt_k_Gauss_Jordan_column_k",
     "reduced_row_echelon_form_upt_k ?A ?k ==>
      reduced_row_echelon_form_upt_k
       (snd (Gauss_Jordan_column_k
              (if ALL m. is_zero_row_upt_k m ?k ?A then 0
               else mod_type_class.to_nat
                     (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                    1,
               ?A)
              ?k))
       (Suc ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 11,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_app
                            (template_app
                              (template_hole 9,
                               template_app (template_hole 8, t_empty)),
                             template_hole 6),
                           template_app
                            (template_app
                              (template_hole 5,
                               template_app
                                (template_hole 4,
                                 template_app (template_hole 3, t_empty))),
                             template_hole 1))),
                       template_var 1)),
                   template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gauss_Jordan.Gauss_Jordan_in_ij_0",
     "[| EX n. ?A $ n $ ?j ~= (0::?'a) & ?i <= n; ?a ~= ?i |]
      ==> Gauss_Jordan_in_ij ?A ?i ?j $ ?a $ ?j = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 1),
                   template_var 2)),
               template_var 0)),
           template_var 2),
         template_hole 3))),
    ("Gauss_Jordan.rref_row_rank",
     "reduced_row_echelon_form ?A ==>
      row_rank ?A =
      card {column (LEAST n. ?A $ i $ n ~= (0::?'a)) ?A |i. row i ?A ~= 0}",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 0))],
       template_equation
        (template_app (template_hole 15, template_var 0),
         template_app
          (template_hole 14, template_app (template_hole 13, t_empty))))),
    ("Gauss_Jordan.rref_col_rank",
     "reduced_row_echelon_form ?A ==>
      col_rank ?A =
      card {column (LEAST n. ?A $ i $ n ~= (0::?'a)) ?A |i. row i ?A ~= 0}",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 0))],
       template_equation
        (template_app (template_hole 15, template_var 0),
         template_app
          (template_hole 14, template_app (template_hole 13, t_empty))))),
    ("Gauss_Jordan.Gauss_Jordan_in_ij_0'",
     "EX n. ?A $ n $ ?j ~= (0::?'a) & ?i <= n ==>
      ALL a. a ~= ?i --> Gauss_Jordan_in_ij ?A ?i ?j $ a $ ?j = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Gauss_Jordan.foldl_Gauss_condition_6",
     "[| ~ is_zero_row_upt_k ?m ?k ?A;
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) =
         nrows ?A |]
      ==> nrows ?A =
          Suc (mod_type_class.to_nat
                (GREATEST n. ~ is_zero_row_upt_k n (Suc ?k) ?A))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1),
                  template_var 0)
                )
            ),
        template_equation
         (template_app
           (template_hole 3,
            template_app
             (template_hole 2, template_app (template_hole 1, t_empty))),
          template_app (template_hole 0, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2, template_app (template_hole 1, t_empty)))))),
    ("Gauss_Jordan.condition_1_part_2",
     "[| ?j ~= (0::?'rows); ALL m. is_zero_row_upt_k m ?k ?A;
         ?A $ ?m $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> is_zero_row_upt_k ?j (Suc ?k)
           (Gauss_Jordan_in_ij ?A (mod_type_class.from_nat 0)
             (mod_type_class.from_nat ?k))",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 11)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0)),
                template_app (template_hole 5, template_var 2)),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_app (template_hole 3, template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_app (template_hole 1, template_hole 0)),
               template_app (template_hole 5, template_var 2)))
           ))),
    ("Gauss_Jordan.rref_suc_if_zero_below_greatest",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         ~ (ALL a. is_zero_row_upt_k a ?k ?A);
         ALL a>GREATEST m. ~ is_zero_row_upt_k m ?k ?A.
            is_zero_row_upt_k a (Suc ?k) ?A |]
      ==> reduced_row_echelon_form_upt_k ?A (Suc ?k)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_predicate (template_app (template_hole 5, t_empty))),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gauss_Jordan.foldl_Gauss_condition_2",
     "[| ?k < ncols ?A; ALL m. is_zero_row_upt_k m ?k ?A;
         ?A $ ?m $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> EX m. ~ is_zero_row_upt_k m (Suc ?k)
                   (Gauss_Jordan_in_ij ?A (0::?'rows)
                     (mod_type_class.from_nat ?k))",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 12, template_var 1)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0)),
                template_app (template_hole 5, template_var 2)),
              template_hole 4)
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Gauss_Jordan.inj_index_independent_rows",
     "[| reduced_row_echelon_form ?A;
         row ?x ?A : {row i ?A |i. row i ?A ~= 0}; ?A $ ?x = ?A $ ?y |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_var 2)),
              template_app (template_hole 7, t_empty))
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 1, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Gauss_Jordan.Gauss_Jordan_in_ij_preserves_previous_elements'",
     "[| ALL n. is_zero_row_upt_k n ?k ?A; mod_type_class.to_nat ?j < ?k;
         ?A $ ?n $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> Gauss_Jordan_in_ij ?A (0::?'rows) (mod_type_class.from_nat ?k) $
          ?i $
          ?j =
          ?A $ ?i $ ?j",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_inequation
         (less_than, template_app (template_hole 8, template_var 2),
          template_var 4),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 1)),
                template_app (template_hole 3, template_var 4)),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 3),
                     template_hole 0),
                   template_app (template_hole 3, template_var 4))),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 0)),
           template_var 2)))),
    ("Gauss_Jordan.condition_2_part_4",
     "[| reduced_row_echelon_form_upt_k ?A ?k; ~ is_zero_row_upt_k ?m ?k ?A;
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) =
         nrows ?A |]
      ==> ?A $ ?i $ (LEAST k. ?A $ ?i $ k ~= (0::?'a)) = (1::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 11, template_var 1),
                    template_var 2),
                  template_var 3)
                )
            ),
        template_equation
         (template_app
           (template_hole 9,
            template_app
             (template_hole 8, template_app (template_hole 7, t_empty))),
          template_app (template_hole 6, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0)),
           template_app (template_hole 2, t_empty)),
         template_hole 0))),
    ("Gauss_Jordan.row_add_iterate_eq_row_add",
     "[| ?a ~= ?i; ?n < nrows ?A; mod_type_class.to_nat ?a <= ?n |]
      ==> row_add_iterate ?A ?n ?i ?j $ ?a $ ?b =
          row_add ?A ?a ?i (- ?A $ ?a $ ?j) $ ?a $ ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4)),
        template_inequation
         (less_than, template_var 3,
          template_app (template_hole 8, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 5),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 3),
                     template_var 4),
                   template_var 1)),
               template_var 5)),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 5),
                     template_var 4),
                   template_app
                    (template_hole 0,
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_var 2),
                           template_var 5)),
                       template_var 1)))),
               template_var 5)),
           template_var 0)))),
    ("Gauss_Jordan.column_leading_coefficient_component_1",
     "[| reduced_row_echelon_form ?A;
         ?v : {column (LEAST n. ?A $ i $ n ~= (0::?'a)) ?A |i.
               row i ?A ~= 0};
         ?v $ ?x ~= (0::?'a) |]
      ==> ?v $ ?x = (1::?'a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 1),
              template_app (template_hole 15, t_empty))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0),
              template_hole 5)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0))),
    ("Gauss_Jordan.foldl_Gauss_condition_5",
     "[| reduced_row_echelon_form_upt_k ?A ?k; ~ is_zero_row_upt_k ?a ?k ?A;
         ALL m>=(GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'a) |]
      ==> (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) =
          (GREATEST n. ~ is_zero_row_upt_k n (Suc ?k) ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 13, template_var 0),
                    template_var 1),
                  template_var 2)
                )
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app (template_hole 8, t_empty),
         template_app (template_hole 8, t_empty)))),
    ("Gauss_Jordan.all_zero_imp_Gauss_Jordan_column_not_zero_in_row_0",
     "[| ALL n. is_zero_row_upt_k n ?k ?A;
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ?A $ ?m $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> ?i = (0::?'rows)",
     template_implication
      ([template_predicate (template_app (template_hole 19, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 18, template_var 1),
                    template_app (template_hole 16, template_var 3)),
                  template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_hole 14,
                        template_app
                         (template_app
                           (template_hole 13,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 12,
                                  template_app (template_hole 19, t_empty)),
                                template_hole 11),
                              template_app
                               (template_app
                                 (template_hole 10,
                                  template_app
                                   (template_hole 9,
                                    template_app
                                     (template_hole 8, t_empty))),
                                template_hole 7))),
                          template_var 2)),
                      template_var 3)))
                )
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 0)),
                template_app (template_hole 3, template_var 3)),
              template_hole 2)
            )],
       template_equation (template_var 1, template_hole 0))),
    ("Gauss_Jordan.column_leading_coefficient_component_0",
     "[| reduced_row_echelon_form ?A;
         ?v : {column (LEAST n. ?A $ i $ n ~= (0::?'a)) ?A |i.
               row i ?A ~= 0};
         ?v $ ?x ~= (0::?'a); ?x ~= ?y |]
      ==> ?v $ ?y = (0::?'a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_app (template_hole 15, t_empty))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_hole 5)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 5))),
    ("Gauss_Jordan.column_leading_coefficient_component_eq",
     "[| reduced_row_echelon_form ?A;
         ?v : {column (LEAST n. ?A $ i $ n ~= (0::?'a)) ?A |i.
               row i ?A ~= 0};
         ?v $ ?x ~= (0::?'a); ?v $ ?y ~= (0::?'a) |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_app (template_hole 15, t_empty))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_hole 5)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 0),
              template_hole 5)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Gauss_Jordan.foldl_Gauss_condition_3",
     "[| ?k < ncols ?A; ALL m. is_zero_row_upt_k m ?k ?A;
         ?A $ ?m $ mod_type_class.from_nat ?k ~= (0::?'a);
         ~ is_zero_row_upt_k ?ma (Suc ?k)
            (Gauss_Jordan_in_ij ?A (0::?'rows)
              (mod_type_class.from_nat ?k)) |]
      ==> mod_type_class.to_nat
           (GREATEST n.
               ~ is_zero_row_upt_k n (Suc ?k)
                  (Gauss_Jordan_in_ij ?A (0::?'rows)
                    (mod_type_class.from_nat ?k))) =
          0",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 15, template_var 2)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_var 1)),
                template_app (template_hole 8, template_var 3)),
              template_hole 7)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 13, template_var 0),
                    template_app (template_hole 6, template_var 3)),
                  template_app
                   (template_app
                     (template_app (template_hole 5, template_var 2),
                      template_hole 4),
                    template_app (template_hole 8, template_var 3)))
                )
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_hole 0))),
    ("Gauss_Jordan.row_add_iterate_eq_Gauss_Jordan_in_ij",
     "row_add_iterate
       (mult_row
         (interchange_rows ?A ?i
           (LEAST n. ?A $ n $ ?j ~= (0::?'a) & ?i <= n))
         ?i ((1::?'a) /
             interchange_rows ?A ?i
              (LEAST n. ?A $ n $ ?j ~= (0::?'a) & ?i <= n) $
             ?i $
             ?j))
       (nrows ?A - 1) ?i ?j =
      Gauss_Jordan_in_ij ?A ?i ?j",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app
                  (template_app
                    (template_hole 15,
                     template_app
                      (template_app
                        (template_app (template_hole 14, template_var 2),
                         template_var 1),
                       template_app (template_hole 13, t_empty))),
                   template_var 1),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 14, template_var 2),
                               template_var 1),
                             template_app (template_hole 13, t_empty))),
                         template_var 1)),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_hole 1)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Gauss_Jordan.foldl_Gauss_condition_8",
     "[| ?k < ncols ?A; ~ is_zero_row_upt_k ?m ?k ?A;
         ?A $ ?ma $ mod_type_class.from_nat ?k ~= (0::?'a);
         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows) <= ?ma |]
      ==> EX m. ~ is_zero_row_upt_k m (Suc ?k)
                   (Gauss_Jordan_in_ij ?A
                     ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                      (1::?'rows))
                     (mod_type_class.from_nat ?k))",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 14, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 12, template_var 1),
                    template_var 3),
                  template_var 2)
                )
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 2),
                    template_var 0)),
                template_app (template_hole 8, template_var 3)),
              template_hole 7)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 5, template_app (template_hole 4, t_empty)),
            template_hole 3),
          template_var 0)],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Gauss_Jordan.is_zero_after_Gauss",
     "[| is_zero_row_upt_k ?a ?k ?A; ~ is_zero_row_upt_k ?m ?k ?A;
         reduced_row_echelon_form_upt_k ?A ?k;
         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'m) <= ?ma;
         ?A $ ?ma $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> is_zero_row_upt_k ?a ?k
           (Gauss_Jordan_in_ij ?A
             ((GREATEST m. ~ is_zero_row_upt_k m ?k ?A) + (1::?'m))
             (mod_type_class.from_nat ?k))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 12, template_var 1),
                    template_var 3),
                  template_var 2)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 3)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 8, template_app (template_hole 7, t_empty)),
            template_hole 6),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 0)),
                template_app (template_hole 2, template_var 3)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 12, template_var 4),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, t_empty)),
                   template_hole 6)),
               template_app (template_hole 2, template_var 3)))
           ))),
    ("Gauss_Jordan.snd_Gauss_Jordan_upt_k",
     "?k < ncols ?A ==>
      foldl Gauss_Jordan_column_k (0, ?A) [0..<Suc ?k] =
      (if ALL m.
             is_zero_row_upt_k m (Suc ?k)
              (snd (foldl Gauss_Jordan_column_k (0, ?A) [0..<Suc ?k]))
       then 0
       else mod_type_class.to_nat
             (GREATEST n.
                 ~ is_zero_row_upt_k n (Suc ?k)
                    (snd (foldl Gauss_Jordan_column_k (0, ?A)
                           [0..<Suc ?k]))) +
            1,
       snd (foldl Gauss_Jordan_column_k (0, ?A) [0..<Suc ?k]))",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 16, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 14, template_hole 13),
             template_app
              (template_app (template_hole 12, template_hole 11),
               template_var 0)),
           template_app
            (template_app (template_hole 10, template_hole 11),
             template_app (template_hole 9, template_var 1))),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, t_empty)),
                 template_hole 11),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, t_empty))),
                 template_hole 0))),
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_app (template_hole 14, template_hole 13),
                 template_app
                  (template_app (template_hole 12, template_hole 11),
                   template_var 0)),
               template_app
                (template_app (template_hole 10, template_hole 11),
                 template_app (template_hole 9, template_var 1)))))))),
    ("Gauss_Jordan.condition_1_part_4",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         is_zero_row_upt_k ?i (Suc ?k)
          (snd (Gauss_Jordan_column_k
                 (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                  else mod_type_class.to_nat
                        (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                       1,
                  ?A)
                 ?k));
         ?i < ?j; ~ is_zero_row_upt_k ?m ?k ?A;
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) =
         nrows ?A |]
      ==> is_zero_row_upt_k ?j (Suc ?k) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 2),
                template_app (template_hole 14, template_var 3)),
              template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app
                       (template_hole 11,
                        template_app
                         (template_app
                           (template_app
                             (template_hole 10,
                              template_app (template_hole 9, t_empty)),
                            template_hole 8),
                          template_app
                           (template_app
                             (template_hole 7,
                              template_app
                               (template_hole 6,
                                template_app (template_hole 5, t_empty))),
                            template_hole 3))),
                      template_var 4)),
                  template_var 3)))
            ),
        template_inequation (less_than, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 15, template_var 0),
                    template_var 3),
                  template_var 4)
                )
            ),
        template_equation
         (template_app
           (template_hole 14,
            template_app
             (template_hole 6, template_app (template_hole 5, t_empty))),
          template_app (template_hole 0, template_var 4))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 15, template_var 1),
               template_app (template_hole 14, template_var 3)),
             template_var 4)
           ))),
    ("Gauss_Jordan.condition_1",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         is_zero_row_upt_k ?i (Suc ?k)
          (snd (Gauss_Jordan_column_k
                 (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                  else mod_type_class.to_nat
                        (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                       1,
                  ?A)
                 ?k));
         ?i < ?j |]
      ==> is_zero_row_upt_k ?j (Suc ?k)
           (snd (Gauss_Jordan_column_k
                  (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                   else mod_type_class.to_nat
                         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                        1,
                   ?A)
                  ?k))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 1),
                template_app (template_hole 12, template_var 2)),
              template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app
                           (template_app
                             (template_hole 8,
                              template_app (template_hole 7, t_empty)),
                            template_hole 6),
                          template_app
                           (template_app
                             (template_hole 5,
                              template_app
                               (template_hole 4,
                                template_app (template_hole 3, t_empty))),
                            template_hole 1))),
                      template_var 3)),
                  template_var 2)))
            ),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 13, template_var 0),
               template_app (template_hole 12, template_var 2)),
             template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 10,
                   template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app
                          (template_app
                            (template_hole 8,
                             template_app (template_hole 7, t_empty)),
                           template_hole 6),
                         template_app
                          (template_app
                            (template_hole 5,
                             template_app
                              (template_hole 4,
                               template_app (template_hole 3, t_empty))),
                           template_hole 1))),
                     template_var 3)),
                 template_var 2)))
           ))),
    ("Gauss_Jordan.condition_2_part_1",
     "[| ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ALL m. is_zero_row_upt_k m ?k ?A;
         ALL m. ?A $ m $ mod_type_class.from_nat ?k = (0::?'a) |]
      ==> ?A $ ?i $ (LEAST k. ?A $ ?i $ k ~= (0::?'a)) = (1::?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 18, template_var 2),
                    template_app (template_hole 17, template_var 1)),
                  template_app
                   (template_hole 16,
                    template_app
                     (template_app
                       (template_hole 15,
                        template_app
                         (template_app
                           (template_hole 14,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 13,
                                  template_app (template_hole 12, t_empty)),
                                template_hole 11),
                              template_app
                               (template_app
                                 (template_hole 10,
                                  template_app
                                   (template_hole 9,
                                    template_app
                                     (template_hole 8, t_empty))),
                                template_hole 7))),
                          template_var 0)),
                      template_var 1)))
                )
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)),
           template_app (template_hole 1, t_empty)),
         template_hole 0))),
    ("Gauss_Jordan.condition_4_part_1",
     "[| ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ALL m. is_zero_row_upt_k m ?k ?A;
         ALL m. ?A $ m $ mod_type_class.from_nat ?k = (0::?'a) |]
      ==> ?A $ ?j $ (LEAST n. ?A $ ?i $ n ~= (0::?'a)) = (0::?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 17, template_var 3),
                    template_app (template_hole 16, template_var 2)),
                  template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_hole 14,
                        template_app
                         (template_app
                           (template_hole 13,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 12,
                                  template_app (template_hole 11, t_empty)),
                                template_hole 10),
                              template_app
                               (template_app
                                 (template_hole 9,
                                  template_app
                                   (template_hole 8,
                                    template_app
                                     (template_hole 7, t_empty))),
                                template_hole 6))),
                          template_var 1)),
                      template_var 2)))
                )
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app (template_hole 0, t_empty)),
         template_hole 1))),
    ("Gauss_Jordan.condition_2_part_2",
     "[| ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ALL m. is_zero_row_upt_k m ?k ?A;
         ?A $ ?m $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> Gauss_Jordan_in_ij ?A (0::?'rows) (mod_type_class.from_nat ?k) $
          ?i $
          (LEAST ka.
              Gauss_Jordan_in_ij ?A (0::?'rows)
               (mod_type_class.from_nat ?k) $
              ?i $
              ka ~=
              (0::?'a)) =
          (1::?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 20, template_var 3),
                    template_app (template_hole 19, template_var 2)),
                  template_app
                   (template_hole 18,
                    template_app
                     (template_app
                       (template_hole 17,
                        template_app
                         (template_app
                           (template_hole 16,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 15,
                                  template_app (template_hole 14, t_empty)),
                                template_hole 13),
                              template_app
                               (template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11,
                                    template_app
                                     (template_hole 10, t_empty))),
                                template_hole 9))),
                          template_var 1)),
                      template_var 2)))
                )
            ),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0)),
                template_app (template_hole 5, template_var 2)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_app (template_hole 3, template_var 1),
                     template_hole 2),
                   template_app (template_hole 5, template_var 2))),
               template_var 3)),
           template_app (template_hole 1, t_empty)),
         template_hole 0))),
    ("Gauss_Jordan.condition_3_part_1",
     "[| ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ALL m. is_zero_row_upt_k m ?k ?A;
         ALL m. ?A $ m $ mod_type_class.from_nat ?k = (0::?'a) |]
      ==> (LEAST n. ?A $ ?i $ n ~= (0::?'a))
          < (LEAST n. ?A $ (?i + (1::?'rows)) $ n ~= (0::?'a))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 20, template_var 2),
                    template_app (template_hole 19, template_var 1)),
                  template_app
                   (template_hole 18,
                    template_app
                     (template_app
                       (template_hole 17,
                        template_app
                         (template_app
                           (template_hole 16,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 15,
                                  template_app (template_hole 14, t_empty)),
                                template_hole 13),
                              template_app
                               (template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11,
                                    template_app
                                     (template_hole 10, t_empty))),
                                template_hole 9))),
                          template_var 0)),
                      template_var 1)))
                )
            ),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_inequation
        (less_than, template_app (template_hole 2, t_empty),
         template_app (template_hole 2, t_empty)))),
    ("Gauss_Jordan.condition_1_part_3",
     "[| reduced_row_echelon_form_upt_k ?A ?k; ?i < ?j;
         ~ is_zero_row_upt_k ?m ?k ?A;
         ALL m>=(GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'a);
         is_zero_row_upt_k ?i (Suc ?k)
          (snd (Gauss_Jordan_column_k
                 (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                  else mod_type_class.to_nat
                        (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                       1,
                  ?A)
                 ?k)) |]
      ==> is_zero_row_upt_k ?j (Suc ?k) ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 23, template_var 4),
              template_var 3)
            ),
        template_inequation (less_than, template_var 2, template_var 1),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 20, template_var 0),
                    template_var 3),
                  template_var 4)
                )
            ),
        template_predicate (template_app (template_hole 19, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 2),
                template_app (template_hole 8, template_var 3)),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app
                           (template_app
                             (template_hole 4,
                              template_app (template_hole 19, t_empty)),
                            template_hole 3),
                          template_app
                           (template_app
                             (template_hole 2,
                              template_app
                               (template_hole 1,
                                template_app (template_hole 15, t_empty))),
                            template_hole 0))),
                      template_var 4)),
                  template_var 3)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 20, template_var 1),
               template_app (template_hole 8, template_var 3)),
             template_var 4)
           ))),
    ("Gauss_Jordan.condition_4_part_4",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ?i ~= ?j; ~ is_zero_row_upt_k ?m ?k ?A;
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) =
         nrows ?A |]
      ==> ?A $ ?j $ (LEAST n. ?A $ ?i $ n ~= (0::?'a)) = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 19, template_var 2),
                    template_app (template_hole 18, template_var 3)),
                  template_app
                   (template_hole 17,
                    template_app
                     (template_app
                       (template_hole 16,
                        template_app
                         (template_app
                           (template_hole 15,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 14,
                                  template_app (template_hole 13, t_empty)),
                                template_hole 12),
                              template_app
                               (template_app
                                 (template_hole 11,
                                  template_app
                                   (template_hole 10,
                                    template_app
                                     (template_hole 9, t_empty))),
                                template_hole 8))),
                          template_var 4)),
                      template_var 3)))
                )
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 19, template_var 0),
                    template_var 3),
                  template_var 4)
                )
            ),
        template_equation
         (template_app
           (template_hole 18,
            template_app
             (template_hole 10, template_app (template_hole 9, t_empty))),
          template_app (template_hole 5, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 4),
               template_var 1)),
           template_app (template_hole 1, t_empty)),
         template_hole 0))),
    ("Gauss_Jordan.condition_4_part_2",
     "[| ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ?i ~= ?j; ALL m. is_zero_row_upt_k m ?k ?A;
         ?A $ ?m $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> Gauss_Jordan_in_ij ?A (0::?'rows) (mod_type_class.from_nat ?k) $
          ?j $
          (LEAST n.
              Gauss_Jordan_in_ij ?A (0::?'rows)
               (mod_type_class.from_nat ?k) $
              ?i $
              n ~=
              (0::?'a)) =
          (0::?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 20, template_var 4),
                    template_app (template_hole 19, template_var 3)),
                  template_app
                   (template_hole 18,
                    template_app
                     (template_app
                       (template_hole 17,
                        template_app
                         (template_app
                           (template_hole 16,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 15,
                                  template_app (template_hole 14, t_empty)),
                                template_hole 13),
                              template_app
                               (template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11,
                                    template_app
                                     (template_hole 10, t_empty))),
                                template_hole 9))),
                          template_var 2)),
                      template_var 3)))
                )
            ),
        template_negation
         (template_equation (template_var 4, template_var 1)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 0)),
                template_app (template_hole 4, template_var 3)),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 2),
                     template_hole 1),
                   template_app (template_hole 4, template_var 3))),
               template_var 1)),
           template_app (template_hole 0, t_empty)),
         template_hole 3))),
    ("Gauss_Jordan.Gauss_Jordan_in_ij_preserves_previous_elements",
     "[| reduced_row_echelon_form_upt_k ?A ?k; ~ is_zero_row_upt_k ?a ?k ?A;
         EX m. ?A $ m $ mod_type_class.from_nat ?k ~= (0::?'a) &
               (GREATEST m. ~ is_zero_row_upt_k m ?k ?A) + (1::?'rows) <= m;
         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows) ~=
         (0::?'rows);
         mod_type_class.to_nat ?j < ?k |]
      ==> Gauss_Jordan_in_ij ?A
           ((GREATEST m. ~ is_zero_row_upt_k m ?k ?A) + (1::?'rows))
           (mod_type_class.from_nat ?k) $
          ?i $
          ?j =
          ?A $ ?i $ ?j",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 18, template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 16, template_var 2),
                    template_var 3),
                  template_var 4)
                )
            ),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7, template_app (template_hole 6, t_empty)),
                template_hole 5),
              template_hole 3)
            ),
        template_inequation
         (less_than, template_app (template_hole 1, template_var 1),
          template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_app
                      (template_app
                        (template_hole 7,
                         template_app (template_hole 6, t_empty)),
                       template_hole 5)),
                   template_app (template_hole 10, template_var 3))),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 12,
             template_app
              (template_app (template_hole 11, template_var 4),
               template_var 0)),
           template_var 1)))),
    ("Gauss_Jordan.condition_2_part_3",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ~ is_zero_row_upt_k ?m ?k ?A;
         ALL m>=(GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'a) |]
      ==> ?A $ ?i $ (LEAST k. ?A $ ?i $ k ~= (0::?'a)) = (1::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 22, template_var 1),
                    template_app (template_hole 21, template_var 2)),
                  template_app
                   (template_hole 20,
                    template_app
                     (template_app
                       (template_hole 19,
                        template_app
                         (template_app
                           (template_hole 18,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 17,
                                  template_app (template_hole 16, t_empty)),
                                template_hole 15),
                              template_app
                               (template_app
                                 (template_hole 14,
                                  template_app
                                   (template_hole 13,
                                    template_app
                                     (template_hole 12, t_empty))),
                                template_hole 11))),
                          template_var 3)),
                      template_var 2)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 22, template_var 0),
                    template_var 2),
                  template_var 3)
                )
            ),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 1)),
           template_app (template_hole 1, t_empty)),
         template_hole 0))),
    ("Gauss_Jordan.condition_4_part_3",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ?i ~= ?j; ~ is_zero_row_upt_k ?m ?k ?A;
         ALL m>=(GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'a) |]
      ==> ?A $ ?j $ (LEAST n. ?A $ ?i $ n ~= (0::?'a)) = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 22, template_var 2),
                    template_app (template_hole 21, template_var 3)),
                  template_app
                   (template_hole 20,
                    template_app
                     (template_app
                       (template_hole 19,
                        template_app
                         (template_app
                           (template_hole 18,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 17,
                                  template_app (template_hole 16, t_empty)),
                                template_hole 15),
                              template_app
                               (template_app
                                 (template_hole 14,
                                  template_app
                                   (template_hole 13,
                                    template_app
                                     (template_hole 12, t_empty))),
                                template_hole 11))),
                          template_var 4)),
                      template_var 3)))
                )
            ),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 22, template_var 0),
                    template_var 3),
                  template_var 4)
                )
            ),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 1)),
           template_app (template_hole 0, t_empty)),
         template_hole 1))),
    ("Gauss_Jordan.foldl_Gauss_condition_9",
     "[| ?k < ncols ?A; reduced_row_echelon_form_upt_k ?A ?k;
         ~ is_zero_row_upt_k ?m ?k ?A;
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) ~=
         nrows ?A;
         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows) <= ?ma;
         ?A $ ?ma $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> Suc (mod_type_class.to_nat
                (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) =
          mod_type_class.to_nat
           (GREATEST n.
               ~ is_zero_row_upt_k n (Suc ?k)
                  (Gauss_Jordan_in_ij ?A
                    ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                     (1::?'rows))
                    (mod_type_class.from_nat ?k)))",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 17, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 2),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 14, template_var 1),
                    template_var 3),
                  template_var 2)
                )
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app (template_hole 10, t_empty))),
              template_app (template_hole 9, template_var 2))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 7, template_app (template_hole 10, t_empty)),
            template_hole 6),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 2),
                    template_var 0)),
                template_app (template_hole 2, template_var 3)),
              template_hole 1)
            )],
       template_equation
        (template_app
          (template_hole 12,
           template_app
            (template_hole 11, template_app (template_hole 10, t_empty))),
         template_app
          (template_hole 11, template_app (template_hole 10, t_empty))))),
    ("Gauss_Jordan.condition_2",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k)) |]
      ==> snd (Gauss_Jordan_column_k
                (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                 else mod_type_class.to_nat
                       (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                      1,
                 ?A)
                ?k) $
          ?i $
          (LEAST k.
              snd (Gauss_Jordan_column_k
                    (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                     else mod_type_class.to_nat
                           (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                          1,
                     ?A)
                    ?k) $
              ?i $
              k ~=
              (0::?'a)) =
          (1::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 2),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 17, template_var 0),
                    template_app (template_hole 16, template_var 1)),
                  template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_hole 14,
                        template_app
                         (template_app
                           (template_hole 13,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 12,
                                  template_app (template_hole 11, t_empty)),
                                template_hole 10),
                              template_app
                               (template_app
                                 (template_hole 9,
                                  template_app
                                   (template_hole 8,
                                    template_app
                                     (template_hole 7, t_empty))),
                                template_hole 6))),
                          template_var 2)),
                      template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_app
                          (template_hole 13,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 12,
                                 template_app (template_hole 11, t_empty)),
                               template_hole 10),
                             template_app
                              (template_app
                                (template_hole 9,
                                 template_app
                                  (template_hole 8,
                                   template_app
                                    (template_hole 7, t_empty))),
                               template_hole 6))),
                         template_var 2)),
                     template_var 1))),
               template_var 0)),
           template_app (template_hole 2, t_empty)),
         template_hole 0))),
    ("Gauss_Jordan.condition_4",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ?i ~= ?j |]
      ==> snd (Gauss_Jordan_column_k
                (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                 else mod_type_class.to_nat
                       (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                      1,
                 ?A)
                ?k) $
          ?j $
          (LEAST n.
              snd (Gauss_Jordan_column_k
                    (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                     else mod_type_class.to_nat
                           (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                          1,
                     ?A)
                    ?k) $
              ?i $
              n ~=
              (0::?'a)) =
          (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 19, template_var 3),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 17, template_var 1),
                    template_app (template_hole 16, template_var 2)),
                  template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_hole 14,
                        template_app
                         (template_app
                           (template_hole 13,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 12,
                                  template_app (template_hole 11, t_empty)),
                                template_hole 10),
                              template_app
                               (template_app
                                 (template_hole 9,
                                  template_app
                                   (template_hole 8,
                                    template_app
                                     (template_hole 7, t_empty))),
                                template_hole 6))),
                          template_var 3)),
                      template_var 2)))
                )
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 15,
                   template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_app
                          (template_hole 13,
                           template_app
                            (template_app
                              (template_app
                                (template_hole 12,
                                 template_app (template_hole 11, t_empty)),
                               template_hole 10),
                             template_app
                              (template_app
                                (template_hole 9,
                                 template_app
                                  (template_hole 8,
                                   template_app
                                    (template_hole 7, t_empty))),
                               template_hole 6))),
                         template_var 3)),
                     template_var 2))),
               template_var 0)),
           template_app (template_hole 1, t_empty)),
         template_hole 0))),
    ("Gauss_Jordan.condition_1_part_5",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         is_zero_row_upt_k ?i (Suc ?k)
          (snd (Gauss_Jordan_column_k
                 (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                  else mod_type_class.to_nat
                        (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                       1,
                  ?A)
                 ?k));
         ?i < ?j; ~ is_zero_row_upt_k ?m ?k ?A;
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) ~=
         nrows ?A;
         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows) <= ?ma;
         ?A $ ?ma $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> is_zero_row_upt_k ?j (Suc ?k)
           (Gauss_Jordan_in_ij ?A
             ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows))
             (mod_type_class.from_nat ?k))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 24, template_var 3),
                template_app (template_hole 23, template_var 4)),
              template_app
               (template_hole 22,
                template_app
                 (template_app
                   (template_hole 21,
                    template_app
                     (template_app
                       (template_hole 20,
                        template_app
                         (template_app
                           (template_app
                             (template_hole 19,
                              template_app (template_hole 18, t_empty)),
                            template_hole 17),
                          template_app
                           (template_app
                             (template_hole 16,
                              template_app
                               (template_hole 15,
                                template_app (template_hole 14, t_empty))),
                            template_hole 12))),
                      template_var 5)),
                  template_var 4)))
            ),
        template_inequation (less_than, template_var 3, template_var 2),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 24, template_var 1),
                    template_var 4),
                  template_var 5)
                )
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 23,
                template_app
                 (template_hole 15,
                  template_app (template_hole 14, t_empty))),
              template_app (template_hole 9, template_var 5))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 7, template_app (template_hole 14, t_empty)),
            template_hole 6),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 0)),
                template_app (template_hole 2, template_var 4)),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 24, template_var 2),
               template_app (template_hole 23, template_var 4)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 5),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app (template_hole 14, t_empty)),
                   template_hole 6)),
               template_app (template_hole 2, template_var 4)))
           ))),
    ("Gauss_Jordan.Gauss_Jordan_in_ij_unfold",
     "[| EX n. ?A $ n $ ?j ~= (0::?'a) & ?i <= n;
         !!n interchange_A A'.
            [| (LEAST n. ?A $ n $ ?j ~= (0::?'a) & ?i <= n) = n;
               ?A $ n $ ?j ~= (0::?'a); ?i <= n;
               interchange_A = interchange_rows ?A ?i n;
               A' =
               mult_row interchange_A ?i
                ((1::?'a) / interchange_A $ ?i $ ?j);
               Gauss_Jordan_in_ij ?A ?i ?j =
               (\<chi>s.
                   if s = ?i then A' $ s
                   else row_add A' s ?i (- interchange_A $ s $ ?j) $ s) |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 21, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate (template_var 0))),
    ("Gauss_Jordan.condition_3_part_4",
     "[| reduced_row_echelon_form_upt_k ?A ?k; ?i < ?i + (1::?'rows);
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ~ is_zero_row_upt_k (?i + (1::?'rows)) (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ~ is_zero_row_upt_k ?m ?k ?A;
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) =
         nrows ?A |]
      ==> (LEAST n. ?A $ ?i $ n ~= (0::?'a))
          < (LEAST n. ?A $ (?i + (1::?'rows)) $ n ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 24, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 22, template_var 1),
            template_hole 21)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 19, template_var 1),
                    template_app (template_hole 18, template_var 2)),
                  template_app
                   (template_hole 17,
                    template_app
                     (template_app
                       (template_hole 16,
                        template_app
                         (template_app
                           (template_hole 15,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 14,
                                  template_app (template_hole 13, t_empty)),
                                template_hole 12),
                              template_app
                               (template_app
                                 (template_hole 11,
                                  template_app
                                   (template_hole 10,
                                    template_app
                                     (template_hole 9, t_empty))),
                                template_hole 8))),
                          template_var 3)),
                      template_var 2)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 19,
                      template_app
                       (template_app (template_hole 22, template_var 1),
                        template_hole 21)),
                    template_app (template_hole 18, template_var 2)),
                  template_app
                   (template_hole 17,
                    template_app
                     (template_app
                       (template_hole 16,
                        template_app
                         (template_app
                           (template_hole 15,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 14,
                                  template_app (template_hole 13, t_empty)),
                                template_hole 12),
                              template_app
                               (template_app
                                 (template_hole 11,
                                  template_app
                                   (template_hole 10,
                                    template_app
                                     (template_hole 9, t_empty))),
                                template_hole 8))),
                          template_var 3)),
                      template_var 2)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 19, template_var 0),
                    template_var 2),
                  template_var 3)
                )
            ),
        template_equation
         (template_app
           (template_hole 18,
            template_app
             (template_hole 10, template_app (template_hole 9, t_empty))),
          template_app (template_hole 6, template_var 3))],
       template_inequation
        (less_than, template_app (template_hole 4, t_empty),
         template_app (template_hole 4, t_empty)))),
    ("Gauss_Jordan.condition_3_part_2",
     "[| ?i < ?i + (1::?'rows);
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ~ is_zero_row_upt_k (?i + (1::?'rows)) (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ALL m. is_zero_row_upt_k m ?k ?A;
         ?A $ ?m $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> (LEAST n.
              Gauss_Jordan_in_ij ?A (0::?'rows)
               (mod_type_class.from_nat ?k) $
              ?i $
              n ~=
              (0::?'a))
          < (LEAST n.
                Gauss_Jordan_in_ij ?A (0::?'rows)
                 (mod_type_class.from_nat ?k) $
                (?i + (1::?'rows)) $
                n ~=
                (0::?'a))",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app
           (template_app (template_hole 23, template_var 3),
            template_hole 22)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 20, template_var 3),
                    template_app (template_hole 19, template_var 2)),
                  template_app
                   (template_hole 18,
                    template_app
                     (template_app
                       (template_hole 17,
                        template_app
                         (template_app
                           (template_hole 16,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 15,
                                  template_app (template_hole 14, t_empty)),
                                template_hole 13),
                              template_app
                               (template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11,
                                    template_app
                                     (template_hole 10, t_empty))),
                                template_hole 9))),
                          template_var 1)),
                      template_var 2)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 20,
                      template_app
                       (template_app (template_hole 23, template_var 3),
                        template_hole 22)),
                    template_app (template_hole 19, template_var 2)),
                  template_app
                   (template_hole 18,
                    template_app
                     (template_app
                       (template_hole 17,
                        template_app
                         (template_app
                           (template_hole 16,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 15,
                                  template_app (template_hole 14, t_empty)),
                                template_hole 13),
                              template_app
                               (template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11,
                                    template_app
                                     (template_hole 10, t_empty))),
                                template_hole 9))),
                          template_var 1)),
                      template_var 2)))
                )
            ),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0)),
                template_app (template_hole 5, template_var 2)),
              template_hole 4)
            )],
       template_inequation
        (less_than, template_app (template_hole 2, t_empty),
         template_app (template_hole 2, t_empty)))),
    ("Gauss_Jordan.condition_2_part_5",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ~ is_zero_row_upt_k ?m ?k ?A;
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) ~=
         nrows ?A;
         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows) <= ?ma;
         ?A $ ?ma $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> Gauss_Jordan_in_ij ?A
           ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows))
           (mod_type_class.from_nat ?k) $
          ?i $
          (LEAST ka.
              Gauss_Jordan_in_ij ?A
               ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows))
               (mod_type_class.from_nat ?k) $
              ?i $
              ka ~=
              (0::?'a)) =
          (1::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 26, template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 24, template_var 2),
                    template_app (template_hole 23, template_var 3)),
                  template_app
                   (template_hole 22,
                    template_app
                     (template_app
                       (template_hole 21,
                        template_app
                         (template_app
                           (template_hole 20,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 19,
                                  template_app (template_hole 18, t_empty)),
                                template_hole 17),
                              template_app
                               (template_app
                                 (template_hole 16,
                                  template_app
                                   (template_hole 15,
                                    template_app
                                     (template_hole 14, t_empty))),
                                template_hole 13))),
                          template_var 4)),
                      template_var 3)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 24, template_var 1),
                    template_var 3),
                  template_var 4)
                )
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 23,
                template_app
                 (template_hole 15,
                  template_app (template_hole 14, t_empty))),
              template_app (template_hole 11, template_var 4))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 9, template_app (template_hole 14, t_empty)),
            template_hole 8),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 0)),
                template_app (template_hole 4, template_var 3)),
              template_hole 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 4),
                     template_app
                      (template_app
                        (template_hole 9,
                         template_app (template_hole 14, t_empty)),
                       template_hole 8)),
                   template_app (template_hole 4, template_var 3))),
               template_var 2)),
           template_app (template_hole 1, t_empty)),
         template_hole 0))),
    ("Gauss_Jordan.condition_4_part_5",
     "[| reduced_row_echelon_form_upt_k ?A ?k;
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ?i ~= ?j; ~ is_zero_row_upt_k ?m ?k ?A;
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) ~=
         nrows ?A;
         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows) <= ?ma;
         ?A $ ?ma $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> Gauss_Jordan_in_ij ?A
           ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows))
           (mod_type_class.from_nat ?k) $
          ?j $
          (LEAST n.
              Gauss_Jordan_in_ij ?A
               ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows))
               (mod_type_class.from_nat ?k) $
              ?i $
              n ~=
              (0::?'a)) =
          (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 26, template_var 5),
              template_var 4)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 24, template_var 3),
                    template_app (template_hole 23, template_var 4)),
                  template_app
                   (template_hole 22,
                    template_app
                     (template_app
                       (template_hole 21,
                        template_app
                         (template_app
                           (template_hole 20,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 19,
                                  template_app (template_hole 18, t_empty)),
                                template_hole 17),
                              template_app
                               (template_app
                                 (template_hole 16,
                                  template_app
                                   (template_hole 15,
                                    template_app
                                     (template_hole 14, t_empty))),
                                template_hole 13))),
                          template_var 5)),
                      template_var 4)))
                )
            ),
        template_negation
         (template_equation (template_var 3, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 24, template_var 1),
                    template_var 4),
                  template_var 5)
                )
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 23,
                template_app
                 (template_hole 15,
                  template_app (template_hole 14, t_empty))),
              template_app (template_hole 10, template_var 5))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 8, template_app (template_hole 14, t_empty)),
            template_hole 7),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_var 0)),
                template_app (template_hole 3, template_var 4)),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 5),
                     template_app
                      (template_app
                        (template_hole 8,
                         template_app (template_hole 14, t_empty)),
                       template_hole 7)),
                   template_app (template_hole 3, template_var 4))),
               template_var 2)),
           template_app (template_hole 0, t_empty)),
         template_hole 2))),
    ("Gauss_Jordan.condition_3_part_3",
     "[| reduced_row_echelon_form_upt_k ?A ?k; ?i < ?i + (1::?'rows);
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ~ is_zero_row_upt_k (?i + (1::?'rows)) (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ~ is_zero_row_upt_k ?m ?k ?A;
         ALL m>=(GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows).
            ?A $ m $ mod_type_class.from_nat ?k = (0::?'a) |]
      ==> (LEAST n. ?A $ ?i $ n ~= (0::?'a))
          < (LEAST n. ?A $ (?i + (1::?'rows)) $ n ~= (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_app (template_hole 23, template_var 1),
            template_hole 22)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 20, template_var 1),
                    template_app (template_hole 19, template_var 2)),
                  template_app
                   (template_hole 18,
                    template_app
                     (template_app
                       (template_hole 17,
                        template_app
                         (template_app
                           (template_hole 16,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 15,
                                  template_app (template_hole 14, t_empty)),
                                template_hole 13),
                              template_app
                               (template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11,
                                    template_app
                                     (template_hole 10, t_empty))),
                                template_hole 9))),
                          template_var 3)),
                      template_var 2)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 20,
                      template_app
                       (template_app (template_hole 23, template_var 1),
                        template_hole 22)),
                    template_app (template_hole 19, template_var 2)),
                  template_app
                   (template_hole 18,
                    template_app
                     (template_app
                       (template_hole 17,
                        template_app
                         (template_app
                           (template_hole 16,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 15,
                                  template_app (template_hole 14, t_empty)),
                                template_hole 13),
                              template_app
                               (template_app
                                 (template_hole 12,
                                  template_app
                                   (template_hole 11,
                                    template_app
                                     (template_hole 10, t_empty))),
                                template_hole 9))),
                          template_var 3)),
                      template_var 2)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 20, template_var 0),
                    template_var 2),
                  template_var 3)
                )
            ),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_inequation
        (less_than, template_app (template_hole 0, t_empty),
         template_app (template_hole 0, t_empty)))),
    ("Gauss_Jordan.condition_3",
     "[| reduced_row_echelon_form_upt_k ?A ?k; ?i < ?i + (1::?'rows);
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ~ is_zero_row_upt_k (?i + (1::?'rows)) (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k)) |]
      ==> (LEAST n.
              snd (Gauss_Jordan_column_k
                    (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                     else mod_type_class.to_nat
                           (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                          1,
                     ?A)
                    ?k) $
              ?i $
              n ~=
              (0::?'a))
          < (LEAST n.
                snd (Gauss_Jordan_column_k
                      (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                       else mod_type_class.to_nat
                             (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                            1,
                       ?A)
                      ?k) $
                (?i + (1::?'rows)) $
                n ~=
                (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_than, template_var 0,
          template_app
           (template_app (template_hole 20, template_var 0),
            template_hole 19)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 17, template_var 0),
                    template_app (template_hole 16, template_var 1)),
                  template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_hole 14,
                        template_app
                         (template_app
                           (template_hole 13,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 12,
                                  template_app (template_hole 11, t_empty)),
                                template_hole 10),
                              template_app
                               (template_app
                                 (template_hole 9,
                                  template_app
                                   (template_hole 8,
                                    template_app
                                     (template_hole 7, t_empty))),
                                template_hole 6))),
                          template_var 2)),
                      template_var 1)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 17,
                      template_app
                       (template_app (template_hole 20, template_var 0),
                        template_hole 19)),
                    template_app (template_hole 16, template_var 1)),
                  template_app
                   (template_hole 15,
                    template_app
                     (template_app
                       (template_hole 14,
                        template_app
                         (template_app
                           (template_hole 13,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 12,
                                  template_app (template_hole 11, t_empty)),
                                template_hole 10),
                              template_app
                               (template_app
                                 (template_hole 9,
                                  template_app
                                   (template_hole 8,
                                    template_app
                                     (template_hole 7, t_empty))),
                                template_hole 6))),
                          template_var 2)),
                      template_var 1)))
                )
            )],
       template_inequation
        (less_than, template_app (template_hole 4, t_empty),
         template_app (template_hole 4, t_empty)))),
    ("Gauss_Jordan.condition_3_part_5",
     "[| reduced_row_echelon_form_upt_k ?A ?k; ?i < ?i + (1::?'rows);
         ~ is_zero_row_upt_k ?i (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ~ is_zero_row_upt_k (?i + (1::?'rows)) (Suc ?k)
            (snd (Gauss_Jordan_column_k
                   (if ALL m. is_zero_row_upt_k m ?k ?A then 0
                    else mod_type_class.to_nat
                          (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) +
                         1,
                    ?A)
                   ?k));
         ~ is_zero_row_upt_k ?m ?k ?A;
         Suc (mod_type_class.to_nat
               (GREATEST n. ~ is_zero_row_upt_k n ?k ?A)) ~=
         nrows ?A;
         (GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows) <= ?ma;
         ?A $ ?ma $ mod_type_class.from_nat ?k ~= (0::?'a) |]
      ==> (LEAST n.
              Gauss_Jordan_in_ij ?A
               ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows))
               (mod_type_class.from_nat ?k) $
              ?i $
              n ~=
              (0::?'a))
          < (LEAST n.
                Gauss_Jordan_in_ij ?A
                 ((GREATEST n. ~ is_zero_row_upt_k n ?k ?A) + (1::?'rows))
                 (mod_type_class.from_nat ?k) $
                (?i + (1::?'rows)) $
                n ~=
                (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 27, template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app
           (template_app (template_hole 25, template_var 2),
            template_hole 24)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 22, template_var 2),
                    template_app (template_hole 21, template_var 3)),
                  template_app
                   (template_hole 20,
                    template_app
                     (template_app
                       (template_hole 19,
                        template_app
                         (template_app
                           (template_hole 18,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 17,
                                  template_app (template_hole 16, t_empty)),
                                template_hole 15),
                              template_app
                               (template_app
                                 (template_hole 14,
                                  template_app
                                   (template_hole 13,
                                    template_app
                                     (template_hole 12, t_empty))),
                                template_hole 11))),
                          template_var 4)),
                      template_var 3)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_hole 22,
                      template_app
                       (template_app (template_hole 25, template_var 2),
                        template_hole 24)),
                    template_app (template_hole 21, template_var 3)),
                  template_app
                   (template_hole 20,
                    template_app
                     (template_app
                       (template_hole 19,
                        template_app
                         (template_app
                           (template_hole 18,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 17,
                                  template_app (template_hole 16, t_empty)),
                                template_hole 15),
                              template_app
                               (template_app
                                 (template_hole 14,
                                  template_app
                                   (template_hole 13,
                                    template_app
                                     (template_hole 12, t_empty))),
                                template_hole 11))),
                          template_var 4)),
                      template_var 3)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 22, template_var 1),
                    template_var 3),
                  template_var 4)
                )
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_hole 21,
                template_app
                 (template_hole 13,
                  template_app (template_hole 12, t_empty))),
              template_app (template_hole 9, template_var 4))
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 25, template_app (template_hole 12, t_empty)),
            template_hole 24),
          template_var 0),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 0)),
                template_app (template_hole 4, template_var 3)),
              template_hole 3)
            )],
       template_inequation
        (less_than, template_app (template_hole 1, t_empty),
         template_app (template_hole 1, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Gauss_JordanMoreTemplates"
### 0.837s elapsed time, 1.144s cpu time, 0.110s GC time
val it = (): unit
