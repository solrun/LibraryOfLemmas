   [("Linear_Maps.finite_set_of_vector", "finite (set_of_vector ?X)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Linear_Maps.cart_basis'_i", "cart_basis' $ ?i = axis ?i (1::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Linear_Maps.matrix'_eq_matrix",
     "matrix' cart_basis' cart_basis' ?f = matrix ?f",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Linear_Maps.inj_op_nth",
     "is_basis (set_of_vector ?X) ==> inj (($) ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Linear_Maps.invertible_lf_imp_invertible_matrix",
     "invertible_lf (*s) (*s) ?f ==> invertible (matrix ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Linear_Maps.invertible_matrix_iff_invertible_lf",
     "invertible ?A = invertible_lf (*s) (*s) ((*v) ?A)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 1),
         t_empty))),
    ("Linear_Maps.bij_coord",
     "is_basis (set_of_vector ?X) ==> bij (coord ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0),
             template_hole 0)
           ))),
    ("Linear_Maps.linear_coord",
     "is_basis (set_of_vector ?X) ==>
      Miscellaneous.linear (*s) (*s) (coord ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Linear_Maps.invertible_imp_bijective",
     "invertible_lf ?scaleB ?scaleC ?f ==> bij ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1),
             template_hole 0)
           ))),
    ("Linear_Maps.invertible_matrix_mult_left_rank",
     "invertible ?P ==> rank (?P ** ?A) = rank ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Linear_Maps.invertible_matrix_imp_invertible_lf",
     "invertible ?A ==> invertible_lf (*s) (*s) ((*v) ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 1),
             t_empty)
           ))),
    ("Linear_Maps.invertible_matrix_mult_right_rank",
     "invertible ?Q ==> rank (?A ** ?Q) = rank ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Linear_Maps.matrix_change_of_basis_mat_1",
     "is_basis (set_of_vector ?X) ==>
      matrix_change_of_basis ?X ?X = mat (1::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 0),
         template_app (template_hole 1, template_hole 0)))),
    ("Linear_Maps.basis_expansion_cart_basis'",
     "(SUM i:UNIV. ?x $ i *s cart_basis' $ i) = ?x",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty), template_hole 0),
       template_var 0)),
    ("Linear_Maps.invertible_matrix_iff_invertible_lf'",
     "Miscellaneous.linear (*s) (*s) ?f ==>
      invertible (matrix ?f) = invertible_lf (*s) (*s) ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 4),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_hole 4),
             template_hole 4),
           template_var 0)))),
    ("Linear_Maps.invertible_matrix_change_of_basis",
     "[| is_basis (set_of_vector ?X); is_basis (set_of_vector ?Y) |]
      ==> invertible (matrix_change_of_basis ?X ?Y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Linear_Maps.rank_matrix_dim_range",
     "Miscellaneous.linear (*s) (*s) ?f ==>
      rank (matrix ?f) = vec.dim (range ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 6),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Linear_Maps.invertible_matrix_mult_left_rank'",
     "[| invertible ?P; ?B = ?P ** ?A |] ==> rank ?B = rank ?A",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 2, template_var 2),
            template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Maps.invertible_matrix_mult_right_rank'",
     "[| invertible ?Q; ?B = ?A ** ?Q |] ==> rank ?B = rank ?A",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 2))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Maps.basis_image_linear",
     "[| invertible_lf (*s) (*s) ?f; is_basis (set_of_vector ?X) |]
      ==> is_basis (?f ` set_of_vector ?X)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_hole 3),
                template_hole 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_hole 1, template_var 0)))
           ))),
    ("Linear_Maps.linear_injective_rank_eq_ncols",
     "Miscellaneous.linear (*s) (*s) ?f ==>
      inj ?f = (rank (matrix ?f) = ncols (matrix ?f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_hole 8),
                template_hole 7),
              template_var 0)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 0),
                template_hole 4)
              )],
         template_equation
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("Linear_Maps.subspace_image_invertible_mat",
     "[| invertible ?P; vec.subspace ?W |] ==> vec.subspace ((*v) ?P ` ?W)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 1, t_empty), template_var 0))
           ))),
    ("Linear_Maps.invertible_matrices_mult_rank",
     "[| invertible ?P; invertible ?Q |]
      ==> rank (?P ** ?A ** ?Q) = rank ?A",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Linear_Maps.matrix'_surj",
     "[| is_basis (set_of_vector ?X); is_basis (set_of_vector ?Y) |]
      ==> surj (matrix' ?X ?Y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("Linear_Maps.coord_eq",
     "[| is_basis (set_of_vector ?X); coord ?X ?v = coord ?X ?w |]
      ==> ?v = ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 2))
            ),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Linear_Maps.linear_bij_rank_eq_ncols",
     "Miscellaneous.linear (*s) (*s) ?f ==>
      bij ?f = (rank (matrix ?f) = ncols (matrix ?f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 7),
              template_var 0)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 0),
                  template_hole 4),
                template_hole 4)
              )],
         template_equation
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("Linear_Maps.matrix_inv_matrix_change_of_basis",
     "[| is_basis (set_of_vector ?X); is_basis (set_of_vector ?Y) |]
      ==> matrix_change_of_basis ?Y ?X =
          matrix_inv (matrix_change_of_basis ?X ?Y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("Linear_Maps.matrix'_id_eq_matrix_change_of_basis",
     "[| is_basis (set_of_vector ?X); is_basis (set_of_vector ?Y) |]
      ==> matrix' ?X ?Y id = matrix_change_of_basis ?X ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Linear_Maps.linear_surjective_rank_eq_ncols",
     "Miscellaneous.linear (*s) (*s) ?f ==>
      surj ?f = (rank (matrix ?f) = nrows (matrix ?f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_hole 10),
                template_hole 9),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 6, template_var 0),
             template_hole 5),
           template_hole 4),
         template_equation
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 0)))))),
    ("Linear_Maps.basis_expansion_cart_basis'_unique'",
     "((SUM i:UNIV. ?f i *s cart_basis' $ i) = ?x) =
      (ALL i. ?f i = ?x $ i)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty), template_hole 3)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Linear_Maps.basis_expansion_unique",
     "((SUM i:UNIV. ?f i *s axis i (1::?'a)) = ?x) =
      (ALL i. ?f i = ?x $ i)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, t_empty), template_hole 3)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Linear_Maps.invertible_matrix_is_change_of_basis",
     "[| invertible ?P; is_basis (set_of_vector ?X) |]
      ==> EX! Y.
             matrix_change_of_basis Y ?X = ?P & is_basis (set_of_vector Y)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Linear_Maps.dim_image_invertible_mat",
     "[| invertible ?P; vec.subspace ?W |]
      ==> vec.dim ((*v) ?P ` ?W) = vec.dim ?W",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 4),
           template_app
            (template_app (template_hole 1, t_empty), template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 4),
           template_var 0)))),
    ("Linear_Maps.matrix_change_of_basis_works",
     "[| is_basis (set_of_vector ?X); is_basis (set_of_vector ?Y) |]
      ==> matrix_change_of_basis ?X ?Y *v coord ?X ?v = coord ?Y ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Linear_Maps.invertible_lf_imp_invertible_matrix'",
     "[| invertible_lf (*s) (*s) ?f; is_basis (set_of_vector ?X);
         is_basis (set_of_vector ?Y) |]
      ==> invertible (matrix' ?X ?Y ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_hole 4),
                template_hole 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Linear_Maps.basis_UNIV",
     "is_basis (set_of_vector ?X) ==>
      UNIV = {x. EX g. (SUM i:UNIV. g i *s ?X $ i) = x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 0))
            )],
       template_equation
        (template_hole 7, template_app (template_hole 6, t_empty)))),
    ("Linear_Maps.invertible_matrices_rank'",
     "[| invertible ?P; invertible ?Q; ?B = ?P ** ?A ** ?Q |]
      ==> rank ?B = rank ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 3),
                template_var 0)),
            template_var 2))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Linear_Maps.exists_linear_eq_matrix'",
     "[| is_basis (set_of_vector ?X); is_basis (set_of_vector ?Y) |]
      ==> EX f. matrix' ?X ?Y f = ?A & Miscellaneous.linear (*s) (*s) f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1))
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Linear_Maps.basis_expansion_cart_basis'_unique",
     "((SUM i:UNIV. ?f (cart_basis' $ i) *s cart_basis' $ i) = ?x) =
      (ALL i. ?f (cart_basis' $ i) = ?x $ i)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, t_empty), template_hole 3)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Linear_Maps.sum_basis_eq",
     "is_basis (set_of_vector ?X) ==>
      (SUM x:set_of_vector ?X. ?f x *s x) =
      (SUM i:UNIV. ?f (?X $ i) *s ?X $ i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 6, template_var 1)),
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Linear_Maps.scalars_zero_if_basis",
     "[| is_basis (set_of_vector ?X); (SUM i:UNIV. ?f i *s ?X $ i) = 0 |]
      ==> ALL i:UNIV. ?f i = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 7, t_empty), template_hole 4),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 4), t_empty)
           ))),
    ("Linear_Maps.sum_basis_eq2",
     "is_basis (set_of_vector ?X) ==>
      (SUM x:set_of_vector ?X. ?f x *s x) =
      (SUM i:UNIV. (?f o ($) ?X) i *s ?X $ i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, t_empty),
           template_app (template_hole 7, template_var 1)),
         template_app
          (template_app (template_hole 3, t_empty), template_hole 0)))),
    ("Linear_Maps.invertible_matrix'_imp_invertible_lf",
     "[| invertible (matrix' ?X ?Y ?f); is_basis (set_of_vector ?X);
         Miscellaneous.linear (*s) (*s) ?f; is_basis (set_of_vector ?Y) |]
      ==> invertible_lf (*s) (*s) ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_hole 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_hole 1),
               template_hole 1),
             template_var 0)
           ))),
    ("Linear_Maps.basis_combination_unique",
     "[| is_basis (set_of_vector ?X);
         (SUM i:UNIV. ?g i *s ?X $ i) = (SUM i:UNIV. ?f i *s ?X $ i) |]
      ==> ?f = ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, t_empty), template_hole 1),
          template_app
           (template_app (template_hole 4, t_empty), template_hole 1))],
       template_equation (template_var 0, template_var 1))),
    ("Linear_Maps.coord_matrix'",
     "[| is_basis (set_of_vector ?X); is_basis (set_of_vector ?Y);
         Miscellaneous.linear (*s) (*s) ?f |]
      ==> coord ?Y (?f ?v) = matrix' ?X ?Y ?f *v coord ?X ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 9,
              template_app (template_hole 8, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 6),
                template_hole 5),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_var 1, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0))))),
    ("Linear_Maps.matrix'",
     "[| is_basis (set_of_vector ?X); is_basis (set_of_vector ?Y) |]
      ==> ?f (?X $ ?i) = (SUM j:UNIV. matrix' ?X ?Y ?f $ j $ ?i *s ?Y $ j)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2))
            )],
       template_equation
        (template_app
          (template_var 1,
           template_app
            (template_app (template_hole 7, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 6, t_empty), template_hole 0)))),
    ("Linear_Maps.exist_matrix'_implies_similar",
     "[| Miscellaneous.linear (*s) (*s) ?f; matrix' ?X ?X ?f = ?A;
         matrix' ?Y ?Y ?f = ?B; is_basis (set_of_vector ?X);
         is_basis (set_of_vector ?Y) |]
      ==> similar_matrices ?A ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_hole 5),
                template_hole 5),
              template_var 4)
            ),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 3),
              template_var 3),
            template_var 4),
          template_var 2),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 1),
              template_var 1),
            template_var 4),
          template_var 0),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Linear_Maps.similar_iff_exist_matrix'",
     "similar_matrices ?A ?B =
      (EX X Y f.
          Miscellaneous.linear (*s) (*s) f &
          matrix' X X f = ?A &
          matrix' Y Y f = ?B &
          is_basis (set_of_vector X) & is_basis (set_of_vector Y))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Linear_Maps.similar_implies_exist_matrix'",
     "similar_matrices ?A ?B ==>
      EX X Y f.
         Miscellaneous.linear (*s) (*s) f &
         matrix' X X f = ?A &
         matrix' Y Y f = ?B &
         is_basis (set_of_vector X) & is_basis (set_of_vector Y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Linear_Maps.matrix'2",
     "[| is_basis (set_of_vector ?X); is_basis (set_of_vector ?Y);
         ALL i. ?f (?X $ i) = (SUM j:UNIV. ?A $ j $ i *s ?Y $ j) |]
      ==> matrix' ?X ?Y ?f = ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0))),
    ("Linear_Maps.matrix'_matrix_change_of_basis",
     "[| is_basis (set_of_vector ?B); is_basis (set_of_vector ?B');
         is_basis (set_of_vector ?C); is_basis (set_of_vector ?C');
         Miscellaneous.linear (*s) (*s) ?f |]
      ==> matrix' ?B' ?C' ?f =
          matrix_change_of_basis ?C ?C' ** matrix' ?B ?C ?f **
          matrix_change_of_basis ?B' ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 10,
              template_app (template_hole 9, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_hole 6),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 4))))),
    ("Linear_Maps.matrix'_compose",
     "[| is_basis (set_of_vector ?X); is_basis (set_of_vector ?Y);
         is_basis (set_of_vector ?Z); Miscellaneous.linear (*s) (*s) ?f;
         Miscellaneous.linear (*s) (*s) ?g |]
      ==> matrix' ?X ?Z (?g o ?f) = matrix' ?Y ?Z ?g ** matrix' ?X ?Y ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 16,
              template_app (template_hole 15, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_hole 14,
              template_app (template_hole 13, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_hole 9),
                template_hole 8),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_hole 8),
                template_hole 6),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 2),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 3),
             template_var 1))))),
    ("Linear_Maps.exist_matrix'_implies_equivalent",
     "[| matrix' ?X ?Y ?f = ?A; matrix' ?X' ?Y' ?f = ?B;
         is_basis (set_of_vector ?X); is_basis (set_of_vector ?Y);
         is_basis (set_of_vector ?X'); is_basis (set_of_vector ?Y');
         Miscellaneous.linear (*s) (*s) ?f |]
      ==> equivalent_matrices ?A ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, template_var 6),
              template_var 5),
            template_var 4),
          template_var 3),
        template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, template_var 2),
              template_var 1),
            template_var 4),
          template_var 0),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 6))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_hole 1),
              template_var 4)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 3), template_var 0)
           ))),
    ("Linear_Maps.equivalent_iff_exist_matrix'",
     "equivalent_matrices ?A ?B =
      (EX X Y X' Y' f.
          Miscellaneous.linear (*s) (*s) f &
          matrix' X Y f = ?A &
          matrix' X' Y' f = ?B &
          is_basis (set_of_vector X) &
          is_basis (set_of_vector Y) &
          is_basis (set_of_vector X') & is_basis (set_of_vector Y'))",
     template_equation
      (template_app
        (template_app (template_hole 13, template_var 1), template_var 0),
       template_app (template_hole 12, t_empty))),
    ("Linear_Maps.equivalent_implies_exist_matrix'",
     "equivalent_matrices ?A ?B ==>
      EX X Y X' Y' f.
         Miscellaneous.linear (*s) (*s) f &
         matrix' X Y f = ?A &
         matrix' X' Y' f = ?B &
         is_basis (set_of_vector X) &
         is_basis (set_of_vector Y) &
         is_basis (set_of_vector X') & is_basis (set_of_vector Y')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 12, t_empty))))]
