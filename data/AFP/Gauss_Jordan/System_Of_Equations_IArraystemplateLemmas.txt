   [("System_Of_Equations_IArrays.iarray_exhaust2",
     "(?xs = ?ys) = (IArray.list_of ?xs = IArray.list_of ?ys)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("System_Of_Equations_IArrays.matrix_to_iarray_consistent",
     "consistent ?A ?b =
      consistent_iarrays (matrix_to_iarray ?A) (vec_to_iarray ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("System_Of_Equations_IArrays.matrix_to_iarray_dependent_and_consistent",
     "dependent_and_consistent ?A ?b =
      dependent_and_consistent_iarrays (matrix_to_iarray ?A)
       (vec_to_iarray ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("System_Of_Equations_IArrays.matrix_to_iarray_inconsistent",
     "inconsistent ?A ?b =
      inconsistent_iarrays (matrix_to_iarray ?A) (vec_to_iarray ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("System_Of_Equations_IArrays.matrix_to_iarray_independent_and_consistent",
     "independent_and_consistent ?A ?b =
      independent_and_consistent_iarrays (matrix_to_iarray ?A)
       (vec_to_iarray ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("System_Of_Equations_IArrays.pair_vec_vecset_solve",
     "pair_vec_vecset (solve ?A ?b) =
      solve_iarrays (matrix_to_iarray ?A) (vec_to_iarray ?b)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("System_Of_Equations_IArrays.vec_to_iarray_snd_solve_system",
     "vec_to_iarray (snd (solve_system ?A ?b)) =
      snd (solve_system_iarrays (matrix_to_iarray ?A) (vec_to_iarray ?b))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 5, template_var 0))))),
    ("System_Of_Equations_IArrays.matrix_to_iarray_fst_solve_system",
     "matrix_to_iarray (fst (solve_system ?A ?b)) =
      fst (solve_system_iarrays (matrix_to_iarray ?A) (vec_to_iarray ?b))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 5, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("System_Of_Equations_IArrays.not_is_zero_iarray_eq_iff",
     "(EX b. ?A $ b ~= (0::?'b)) = (~ is_zero_iarray (vec_to_iarray ?A))",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_hole 5,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("System_Of_Equations_IArrays.vec_to_iarray_solve_consistent_rref",
     "reduced_row_echelon_form ?A ==>
      vec_to_iarray (solve_consistent_rref ?A ?b) =
      solve_consistent_rref_iarrays (matrix_to_iarray ?A)
       (vec_to_iarray ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("System_Of_Equations_IArrays.vec_to_iarray_greatest_not_zero",
     "EX b. ?A $ b ~= (0::?'b) ==>
      greatest_not_zero (vec_to_iarray ?A) =
      mod_type_class.to_nat (GREATEST b. ?A $ b ~= (0::?'b))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1, template_app (template_hole 0, t_empty))))),
    ("System_Of_Equations_IArrays.vec_to_iarray_exists",
     "(EX b. ?A $ b ~= (0::?'b)) =
      IArray.exists (%b. vec_to_iarray ?A !! b ~= (0::?'b))
       (IArray [0..<IArray.length (vec_to_iarray ?A)])",
     template_equation
      (template_app (template_hole 11, t_empty),
       template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_hole 0,
               template_app (template_hole 4, template_var 0))))))),
    ("System_Of_Equations_IArrays.vec_to_iarray_exists'",
     "(EX b. ?A $ b ~= (0::?'b)) =
      IArray.exists (%b. vec_to_iarray ?A !! b ~= (0::?'b))
       (IArray (rev [0..<IArray.length (vec_to_iarray ?A)]))",
     template_equation
      (template_app (template_hole 12, t_empty),
       template_app
        (template_app (template_hole 7, t_empty),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_hole 0,
                 template_app (template_hole 5, template_var 0)))))))),
    ("System_Of_Equations_IArrays.to_nat_the_solve_consistent_rref",
     "[| reduced_row_echelon_form ?A;
         EX i. ?A $ i $ ?j = (1::?'a) &
               ?j = (LEAST n. ?A $ i $ n ~= (0::?'a)) |]
      ==> mod_type_class.to_nat (THE i. ?A $ i $ ?j = (1::?'a)) =
          least_non_zero_position_of_vector
           (column_iarray (mod_type_class.to_nat ?j)
             (matrix_to_iarray ?A))",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 1)))))),
    ("System_Of_Equations_IArrays.exists_solve_consistent_rref",
     "reduced_row_echelon_form ?A ==>
      (EX i. ?A $ i $ ?j = (1::?'a) &
             ?j = (LEAST n. ?A $ i $ n ~= (0::?'a))) =
      IArray.exists
       (%i. matrix_to_iarray ?A !! i !! mod_type_class.to_nat ?j =
            (1::?'a) &
            mod_type_class.to_nat ?j =
            least_non_zero_position_of_vector
             (row_iarray i (matrix_to_iarray ?A)))
       (IArray [0..<nrows_iarray (matrix_to_iarray ?A)])",
     template_implication
      ([template_predicate
         (template_app (template_hole 23, template_var 1))],
       template_equation
        (template_app (template_hole 21, t_empty),
         template_app
          (template_app (template_hole 11, t_empty),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_hole 0,
                 template_app (template_hole 8, template_var 1))))))))]
