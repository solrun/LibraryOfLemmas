Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.Equivalence_Relation_Enumeration" via "Card_Equiv_Relations.Card_Equiv_Relations" via "Card_Partitions.Card_Partitions" via "Card_Partitions.Injectivity_Solver")
Loading theory "HOL-Combinatorics.Stirling" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.Equivalence_Relation_Enumeration" via "Card_Equiv_Relations.Card_Equiv_Relations" via "Card_Partitions.Card_Partitions")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.Equivalence_Relation_Enumeration" via "Card_Equiv_Relations.Card_Equiv_Relations" via "Card_Partitions.Card_Partitions" via "Card_Partitions.Injectivity_Solver" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.Equivalence_Relation_Enumeration" via "HOL-Library.Disjoint_Sets")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.093s elapsed time, 0.354s cpu time, 0.029s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.Equivalence_Relation_Enumeration" via "Card_Equiv_Relations.Card_Equiv_Relations" via "Card_Partitions.Card_Partitions" via "Card_Partitions.Injectivity_Solver")
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Monad_Syntax"
### 0.036s elapsed time, 0.145s cpu time, 0.000s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
structure Eisbach_Rule_Insts: sig end
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order:
  "(%p. size (snd p)) <*mlex*> (%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.503s cpu time, 0.068s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
consts
  stirling_row_aux :: "'a => 'a => 'a list => 'a list"
### theory "HOL-Combinatorics.Stirling"
### 0.282s elapsed time, 1.095s cpu time, 0.096s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
### theory "HOL-Library.FuncSet"
### 0.424s elapsed time, 1.650s cpu time, 0.152s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.Equivalence_Relation_Enumeration")
### theory "HOL-Eisbach.Eisbach"
### 0.442s elapsed time, 1.720s cpu time, 0.152s GC time
Loading theory "HOL-Library.Sublist" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.Equivalence_Relation_Enumeration")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.884s cpu time, 0.056s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Nat_Bijection"
### 0.328s elapsed time, 1.321s cpu time, 0.152s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Disjoint_Sets"
### 0.300s elapsed time, 1.212s cpu time, 0.200s GC time
Loading theory "Card_Partitions.Injectivity_Solver" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.Equivalence_Relation_Enumeration" via "Card_Equiv_Relations.Card_Equiv_Relations" via "Card_Partitions.Card_Partitions")
consts
  prefixes :: "'a list => 'a list list"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
### theory "Card_Partitions.Injectivity_Solver"
### 0.626s elapsed time, 2.309s cpu time, 0.626s GC time
Loading theory "Card_Partitions.Set_Partition" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.Equivalence_Relation_Enumeration" via "Card_Equiv_Relations.Card_Equiv_Relations" via "Card_Partitions.Card_Partitions")
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  suffixes :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Proofs for inductive predicate(s) "list_emb"
### theory "Card_Partitions.Set_Partition"
### 0.158s elapsed time, 0.627s cpu time, 0.089s GC time
Loading theory "Card_Partitions.Card_Partitions" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.Equivalence_Relation_Enumeration" via "Card_Equiv_Relations.Card_Equiv_Relations")
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.146s elapsed time, 4.350s cpu time, 0.944s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Card_Partitions.Card_Partitions"
### 0.400s elapsed time, 1.574s cpu time, 0.208s GC time
Loading theory "Bell_Numbers_Spivey.Bell_Numbers" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.Equivalence_Relation_Enumeration" via "Card_Equiv_Relations.Card_Equiv_Relations")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Bell_Numbers_Spivey.Bell_Numbers"
### 0.211s elapsed time, 0.834s cpu time, 0.126s GC time
Loading theory "Card_Equiv_Relations.Card_Equiv_Relations" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.Equivalence_Relation_Enumeration")
consts
  sublists :: "'a list => 'a list list"
Found termination order: "size <*mlex*> {}"
### theory "Card_Equiv_Relations.Card_Equiv_Relations"
### 0.089s elapsed time, 0.349s cpu time, 0.114s GC time
### theory "HOL-Library.Sublist"
### 1.859s elapsed time, 7.116s cpu time, 1.364s GC time
Loading theory "Draft.Equivalence_Relation_Enumeration" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.192s elapsed time, 4.192s cpu time, 1.383s GC time
Found termination order: "size <*mlex*> {}"
### theory "Draft.Equivalence_Relation_Enumeration"
### 0.725s elapsed time, 2.222s cpu time, 1.061s GC time
### theory "HOL-Library.Tree"
### 2.517s elapsed time, 9.043s cpu time, 2.328s GC time
Loading theory "Draft.Templates" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.071s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Equivalence_Relation_EnumerationMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.489s elapsed time, 0.553s cpu time, 0.079s GC time
Loading theory "Draft.Equivalence_Relation_EnumerationMoreTemplates"
val templateLemmas =
   [("Equivalence_Relation_Enumeration.kernel_of_equiv",
     "equiv {..<length ?xs} (kernel_of ?xs)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 0, template_var 0))
         )),
    ("Equivalence_Relation_Enumeration.len_equiv_rels",
     "length (equiv_rels ?n) = Bell ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equivalence_Relation_Enumeration.count_list_expand",
     "count_list ?xs ?x = length (filter ((=) ?x) ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Equivalence_Relation_Enumeration.quotient_of_kernel_is_induced_par",
     "{..<length ?xs} // kernel_of ?xs = induced_par ?xs",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Equivalence_Relation_Enumeration.enum_rgfs_returns_rgfs",
     "?x : set (enum_rgfs ?n) ==> rgf ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Equivalence_Relation_Enumeration.rgf_imp_initial_segment",
     "rgf ?xs ==> set ?xs = {..<rgf_limit ?xs}",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Equivalence_Relation_Enumeration.rgf_limit_ge",
     "?y : set ?xs ==> ?y < rgf_limit ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_inequation
        (less_than, template_var 1,
         template_app (template_hole 0, template_var 0)))),
    ("Equivalence_Relation_Enumeration.map_list_to_rgf",
     "EX f. inj_on f (set ?x) & rgf (map f ?x)",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("Equivalence_Relation_Enumeration.equiv_rels_enum",
     "rgf ?x ==> count_list (enum_rgfs (length ?x)) ?x = 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_var 0),
         template_hole 0))),
    ("Equivalence_Relation_Enumeration.equiv_rels_set",
     "?x : set (equiv_rels ?n) ==> equiv {..<?n} ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Equivalence_Relation_Enumeration.enum_rgfs_len",
     "?x : set (enum_rgfs ?n) ==> length ?x = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Equivalence_Relation_Enumeration.length_filter",
     "length (filter ?p ?xs) = (SUM x<-?xs. of_bool (?p x))",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Equivalence_Relation_Enumeration.equiv_rels",
     "equiv {..<?n} ?r ==> count_list (equiv_rels ?n) ?r = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0))),
    ("Equivalence_Relation_Enumeration.kernel_of_eq_len",
     "kernel_of ?x = kernel_of ?y ==> length ?x = length ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Equivalence_Relation_Enumeration.rgf_limit_snoc",
     "rgf_limit (?x @ [?y]) = max (?y + 1) (rgf_limit ?x)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 3))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_app (template_hole 6, template_var 1)))),
    ("Equivalence_Relation_Enumeration.kernel_of_under_inj_map",
     "inj_on ?f (set ?x) ==> kernel_of ?x = kernel_of (map ?f ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Equivalence_Relation_Enumeration.equiv_on_unique",
     "[| equiv ?A ?p; equiv ?B ?p |] ==> ?A = ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Equivalence_Relation_Enumeration.rgf_snoc",
     "rgf (?xs @ [?x]) = (rgf ?xs & ?x < rgf_limit ?xs + 1)",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 1),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_hole 5))),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 8, template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_hole 0))))),
    ("Equivalence_Relation_Enumeration.all_rels_are_kernels",
     "equiv {..<?n} ?p ==> EX x. kernel_of x = ?p & length x = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Equivalence_Relation_Enumeration.kernel_of_snoc",
     "kernel_of ?xs = Restr (kernel_of (?xs @ [?x])) {..<length ?xs}",
     template_equation
      (template_app (template_hole 7, template_var 1),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1))),
           t_empty)))),
    ("Equivalence_Relation_Enumeration.equiv_rels_2",
     "?n = length ?xs ==>
      (SUM x<-equiv_rels ?n. of_bool (kernel_of ?xs = x)) = (1::?'a)",
     template_implication
      ([template_equation
         (template_var 1, template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 1, template_var 1))),
         template_hole 0))),
    ("Equivalence_Relation_Enumeration.equiv_subset",
     "[| ?B <= ?A; equiv ?A ?p |] ==> equiv ?B (Restr ?p ?B)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app
                (template_app (template_hole 0, template_var 2), t_empty)))
           ))),
    ("Equivalence_Relation_Enumeration.rgf_exists",
     "equiv {..<?n} ?r ==> EX x. rgf x & length x = ?n & kernel_of x = ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app (template_hole 7, template_var 1)),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Equivalence_Relation_Enumeration.count_list_inj_map",
     "[| inj_on ?f (set ?x); ?y : set ?x |]
      ==> count_list (map ?f ?x) (?f ?y) = count_list ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 5, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Equivalence_Relation_Enumeration.kernel_of_inj_on_rgfs_aux",
     "[| length ?x = length ?y; rgf ?x; rgf ?y;
         kernel_of ?x = kernel_of ?y |]
      ==> ?x = ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 3, template_var 0)),
        template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Equivalence_Relation_Enumeration.kernel_of_eq_imp_bij",
     "kernel_of ?x = kernel_of ?y ==>
      EX f. bij_betw f (set ?x) (set ?y) &
            (ALL z:set ?x. count_list ?x z = count_list ?y (f z))",
     template_implication
      ([template_equation
         (template_app (template_hole 10, template_var 1),
          template_app (template_hole 9, template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Equivalence_Relation_Enumeration.sum_collapse",
     "[| finite ?A; ?z : ?A;
         !!y. [| y : ?A; y ~= ?z |] ==> ?f y = (0::?'b) |]
      ==> sum ?f ?A = ?f ?z",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Equivalence_Relation_Enumeration.kernel_of_eq",
     "(kernel_of ?x = kernel_of ?y) =
      (length ?x = length ?y &
       (ALL j<length ?x. ALL i<j. (?x ! i = ?x ! j) = (?y ! i = ?y ! j)))",
     template_bimplication
      (template_equation
        (template_app (template_hole 12, template_var 1),
         template_app (template_hole 11, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 1)),
                 template_app (template_hole 7, template_var 0))),
             template_app (template_hole 6, t_empty))
           ))),
    ("Equivalence_Relation_Enumeration.list_induct_2_rev",
     "[| length ?x = length ?y; ?P [] [];
         !!x xs y ys.
            [| length xs = length ys; ?P xs ys |]
            ==> ?P (xs @ [x]) (ys @ [y]) |]
      ==> ?P ?x ?y",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 2),
          template_app (template_hole 10, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_var 0, template_hole 9),
              template_hole 8)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 0, template_var 2), template_var 1)
           )))]:
   (string * thm * template) list
### theory "Draft.Equivalence_Relation_EnumerationMoreTemplates"
### 0.364s elapsed time, 0.560s cpu time, 0.070s GC time
val it = (): unit
