Loading theory "Draft.Code_Target_Rat" (required by "Draft.Buchberger_ExamplesTemplates" via "Draft.Buchberger_Examples")
Loading theory "Draft.Confluence" (required by "Draft.Buchberger_ExamplesTemplates" via "Draft.Buchberger_Examples" via "Draft.Buchberger" via "Draft.Algorithm_Schema" via "Draft.Groebner_Bases" via "Draft.Reduction")
Loading theory "Draft.General" (required by "Draft.Buchberger_ExamplesTemplates" via "Draft.Buchberger_Examples" via "Draft.Buchberger" via "Draft.Algorithm_Schema")
Loading theory "Draft.Templates" (required by "Draft.Buchberger_ExamplesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.131s elapsed time, 0.453s cpu time, 0.072s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Buchberger_ExamplesTemplates")
### Missing patterns in function definition:
### max_list [] = undefined
locale relation
  fixes r :: "'a => 'a => bool"  (infixl \<open>\<rightarrow>\<close> 50)
### theory "Draft.Code_Target_Rat"
### 0.259s elapsed time, 0.976s cpu time, 0.072s GC time
Loading theory "Draft.Benchmarks" (required by "Draft.Buchberger_ExamplesTemplates" via "Draft.Buchberger_Examples" via "Draft.Algorithm_Schema_Impl")
Found termination order: "length <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  insort_wrt :: "('c => 'c => bool) => 'c => 'c list => 'c list"
### theory "Draft.Benchmarks"
### 0.197s elapsed time, 0.698s cpu time, 0.079s GC time
locale relation_order
  fixes r :: "'a => 'a => bool"  (infixl \<open>\<rightarrow>\<close> 50)
    and ord :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "relation_order (\<rightarrow>) ord A"
### theory "Draft.Confluence"
### 0.481s elapsed time, 1.731s cpu time, 0.151s GC time
Loading theory "Draft.Reduction" (required by "Draft.Buchberger_ExamplesTemplates" via "Draft.Buchberger_Examples" via "Draft.Buchberger" via "Draft.Algorithm_Schema" via "Draft.Groebner_Bases")
consts
  remdups_wrt :: "('a => 'b) => 'a list => 'a list"
consts
  map_idx :: "('a => nat => 'b) => 'a list => nat => 'b list"
consts
  map_dup :: "('a => 'b) => ('a => 'b) => 'a list => 'b list"
consts
  filter_min_aux :: "'a list => 'a list => 'a list"
### theory "Draft.General"
### 0.660s elapsed time, 2.215s cpu time, 0.235s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.600s elapsed time, 1.929s cpu time, 0.163s GC time
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
consts
  find_adds ::
    "('t \<Rightarrow>\<^sub>0 'b) list
     => 't => ('t \<Rightarrow>\<^sub>0 'b) option"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.Reduction"
### 3.910s elapsed time, 5.123s cpu time, 1.532s GC time
Loading theory "Draft.Groebner_Bases" (required by "Draft.Buchberger_ExamplesTemplates" via "Draft.Buchberger_Examples" via "Draft.Buchberger" via "Draft.Algorithm_Schema")
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale od_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "od_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.Groebner_Bases"
### 5.121s elapsed time, 5.670s cpu time, 1.054s GC time
Loading theory "Draft.Algorithm_Schema" (required by "Draft.Buchberger_ExamplesTemplates" via "Draft.Buchberger_Examples" via "Draft.Buchberger")
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
consts
  gb_schema_incr ::
    "((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
      => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
         => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
             ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
            => nat * 'd
               => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                   ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list)
     => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
         => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
            => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
               => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => nat * 'd
                     => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                         ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list)
        => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
            => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
               => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => nat * 'd
                     => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list)
           => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
               => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                      ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                     => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                         ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                        => nat * 'd
                           => (('t \<Rightarrow>\<^sub>0 'b) * 'c) list *
                              'd)
              => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c => 'd => 'd)
                 => (('t \<Rightarrow>\<^sub>0 'b) * 'c) list
                    => 'd => (('t \<Rightarrow>\<^sub>0 'b) * 'c) list"
Found termination order:
  "(%p. size_list (%p. size (fst (snd (snd (snd p))))) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (fst (snd p)))
         (fst (snd (snd (snd p))))) <*mlex*>
   (%p. size_list (%p. size (fst (snd p))) (fst (snd (snd p)))) <*mlex*> {}"
consts
  pairs ::
    "(bool
      => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
         => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
            => ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c
               => (bool *
                   (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                   ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => (bool *
                      (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                      ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list)
     => bool
        => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
           => (bool *
               (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
               ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list"
locale gd_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "gd_powerprod (\<preceq>) (\<prec>)"
### theory "Draft.Algorithm_Schema"
### 21.934s elapsed time, 27.825s cpu time, 10.280s GC time
Loading theory "Draft.Buchberger" (required by "Draft.Buchberger_ExamplesTemplates" via "Draft.Buchberger_Examples")
Loading theory "Draft.Algorithm_Schema_Impl" (required by "Draft.Buchberger_ExamplesTemplates" via "Draft.Buchberger_Examples")
### theory "Draft.Algorithm_Schema_Impl"
### 0.473s elapsed time, 0.875s cpu time, 0.247s GC time
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
consts
  gb_sel ::
    "(('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
     => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
        => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
            ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
           => nat * 'd
              => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                  ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list"
### theory "Draft.Buchberger"
### 5.042s elapsed time, 7.814s cpu time, 4.109s GC time
Loading theory "Draft.Buchberger_Examples" (required by "Draft.Buchberger_ExamplesTemplates")
### Partially applied constant "MPoly_Type_Class.to_pair_unit" on left hand side of equation, in theorem:
### gd_term.trd_aux to_pair_unit fst (le_of_nat_term_order ?cmp_term) ?fs ?p
###  ?r ==
### if is_zero ?p then ?r
### else case ordered_term.find_adds to_pair_unit fst
###            (le_of_nat_term_order ?cmp_term) ?fs (lt_punit ?cmp_term ?p) of
###      None =>
###        gd_term.trd_aux to_pair_unit fst (le_of_nat_term_order ?cmp_term) ?fs
###         (tail_punit ?cmp_term ?p)
###         (plus_monomial_less ?r (lc_punit ?cmp_term ?p)
###           (lt_punit ?cmp_term ?p))
###      | Some f =>
###          gd_term.trd_aux to_pair_unit fst (le_of_nat_term_order ?cmp_term)
###           ?fs
###           (tail_punit ?cmp_term ?p -
###            monom_mult_punit (lc_punit ?cmp_term ?p / lc_punit ?cmp_term f)
###             (lt_punit ?cmp_term ?p - lt_punit ?cmp_term f)
###             (tail_punit ?cmp_term f))
###           ?r
### Partially applied constant "MPoly_Type_Class.to_pair_unit" on left hand side of equation, in theorem:
### gd_term.trd_aux to_pair_unit fst
###  (%s t. le_of_nat_term_order ?cmp_term (fst (s, the_min))
###          (fst (t, the_min)))
###  ?fs ?p ?r ==
### if is_zero ?p then ?r
### else case ordered_term.find_adds to_pair_unit fst
###            (%s t. le_of_nat_term_order ?cmp_term (fst (s, the_min))
###                    (fst (t, the_min)))
###            ?fs (punit0.punit.lt ?cmp_term ?p) of
###      None =>
###        gd_term.trd_aux to_pair_unit fst
###         (%s t. le_of_nat_term_order ?cmp_term (fst (s, the_min))
###                 (fst (t, the_min)))
###         ?fs (punit0.punit.tail ?cmp_term ?p)
###         (plus_monomial_less ?r (punit0.punit.lc ?cmp_term ?p)
###           (punit0.punit.lt ?cmp_term ?p))
###      | Some f =>
###          gd_term.trd_aux to_pair_unit fst
###           (%s t. le_of_nat_term_order ?cmp_term (fst (s, the_min))
###                   (fst (t, the_min)))
###           ?fs
###           (punit0.punit.tail ?cmp_term ?p -
###            monom_mult_punit
###             (punit0.punit.lc ?cmp_term ?p / punit0.punit.lc ?cmp_term f)
###             (punit0.punit.lt ?cmp_term ?p - punit0.punit.lt ?cmp_term f)
###             (punit0.punit.tail ?cmp_term f))
###           ?r
### Cannot skip proof of schematic goal statement
### Partially applied constant "MPoly_Type_Class_OAlist.ord_pp_punit" on left hand side of equation, in theorem:
### linorder.Min (ord_pp_punit ?cmp_term) (set (?x # ?xs)) ==
### fold (punit'.ordered_powerprod_lin.min ?cmp_term) ?xs ?x
### Partially applied constant "MPoly_Type_Class_OAlist.ord_pp_punit" on left hand side of equation, in theorem:
### linorder.Max (ord_pp_punit ?cmp_term) (set (?x # ?xs)) ==
### fold (punit'.ordered_powerprod_lin.max ?cmp_term) ?xs ?x
### Partially applied constant "MPoly_Type_Class_OAlist.ord_pp_punit" on left hand side of equation, in theorem:
### punit'.ordered_powerprod_lin.sorted ?cmp_term [] == True
### Partially applied constant "MPoly_Type_Class_OAlist.ord_pp_punit" on left hand side of equation, in theorem:
### punit'.ordered_powerprod_lin.sorted ?cmp_term [?x] == True
### Partially applied constant "MPoly_Type_Class_OAlist.ord_pp_punit" on left hand side of equation, in theorem:
### punit'.ordered_powerprod_lin.sorted ?cmp_term (?x # ?y # ?zs) ==
### ord_pp_punit ?cmp_term ?x ?y &
### punit'.ordered_powerprod_lin.sorted ?cmp_term (?y # ?zs)
### Partially applied constant "MPoly_Type_Class_OAlist.ord_pp_punit" on left hand side of equation, in theorem:
### punit'.ordered_powerprod_lin.sorted_list_of_set ?cmp_term (set ?xs) ==
### punit'.ordered_powerprod_lin.sort ?cmp_term (remdups ?xs)
### Type
### (?'a::nat, ?'ba::nat) pp nat_term_order
### => ((?'a::nat, ?'ba::nat) pp \<Rightarrow>\<^sub>0 ?'b::zero)
###    => ((?'a::nat, ?'ba::nat) pp \<Rightarrow>\<^sub>0 ?'b::zero) => bool
### of constant "MPoly_Type_Class_OAlist.ord_strict_p_punit"
### is too specific compared to declared type
### ?'a::{} nat_term_order
### => (?'a::{} \<Rightarrow>\<^sub>0 ?'l::{})
###    => (?'a::{} \<Rightarrow>\<^sub>0 ?'l::{}) => bool, in theorem:
### ord_strict_p_punit ?cmp_term ?p ?q ==
### ?q ~= 0 &
### (?p = 0 |
###  (let v1 = lt_punit ?cmp_term ?p; v2 = lt_punit ?cmp_term ?q
###   in ord_pp_strict_punit ?cmp_term v1 v2 |
###      v1 = v2 &
###      lookup ?p v1 = lookup ?q v2 &
###      ord_strict_p_punit ?cmp_term (punit'.punit.lower ?cmp_term ?p v1)
###       (punit'.punit.lower ?cmp_term ?q v2)))
### Partially applied constant "MPoly_Type_Class.to_pair_unit" on left hand side of equation, in theorem:
### punit'.punit.gb_schema_aux ?cmp_term ?sel ?ap ?ab ?compl ?gs ?data ?bs [] ==
### ?gs @ ?bs
### Partially applied constant "MPoly_Type_Class.to_pair_unit" on left hand side of equation, in theorem:
### punit'.punit.gb_aux ?cmp_term ?gs ?data ?bs ?ps ==
### if ?ps = [] then ?gs @ ?bs
### else let sps = gb_sel_punit ?gs ?bs ?ps (snd ?data); ps0 = ?ps -- sps;
###          aux = gb_red_punit ?cmp_term ?gs ?bs ps0 sps (snd ?data);
###          remcomps =
###            fst ?data - count_const_lt_components_punit ?cmp_term (fst aux)
###      in if remcomps = 0 then full_gb_punit ?cmp_term (?gs @ ?bs)
###         else let (hs, data') = add_indices aux (snd ?data)
###              in punit'.punit.gb_aux ?cmp_term ?gs (remcomps, data')
###                  (add_basis_sorted (canon_basis_order_punit ?cmp_term) ?gs
###                    ?bs hs data')
###                  (add_pairs_punit
###                    (new_pairs_sorted_punit
###                      (%data p q.
###                          canon_pair_order_aux_punit ?cmp_term (snd p)
###                           (snd q)))
###                    (punit'.punit.component_crit ?cmp_term)
###                    (chain_ncrit_punit ?cmp_term)
###                    (chain_ocrit_punit ?cmp_term)
###                    (merge_wrt (canon_pair_order_aux_punit ?cmp_term)) ?gs
###                    ?bs ps0 hs data')
### Partially applied constant "MPoly_Type_Class.to_pair_unit" on left hand side of equation, in theorem:
### punit'.punit.gb ?cmp_term ?bs0.0 ?data0.0 ==
### let data = (length ?bs0.0, ?data0.0);
###     bs1 = fst (add_indices (?bs0.0, ?data0.0) (0, ?data0.0));
###     bs = add_basis_sorted (canon_basis_order_punit ?cmp_term) [] [] bs1 data
### in map (%(f, uu_, y). (f, y))
###     (punit'.punit.gb_aux ?cmp_term []
###       (count_rem_components_punit ?cmp_term bs, data) bs
###       (add_pairs_punit
###         (new_pairs_sorted_punit
###           (%data p q. canon_pair_order_aux_punit ?cmp_term (snd p) (snd q)))
###         (punit'.punit.component_crit ?cmp_term)
###         (chain_ncrit_punit ?cmp_term) (chain_ocrit_punit ?cmp_term)
###         (merge_wrt (canon_pair_order_aux_punit ?cmp_term)) [] [] [] bs1
###         data))
locale experiment16402270
### Cannot skip proof of schematic goal statement
### Abstraction on left hand side of equation, in theorem:
### linorder.Min
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (set (?x # ?xs)) ==
### fold
###  (ord.min (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)))
###  ?xs ?x
### Abstraction on left hand side of equation, in theorem:
### linorder.Max
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (set (?x # ?xs)) ==
### fold
###  (ord.max (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)))
###  ?xs ?x
### Abstraction on left hand side of equation, in theorem:
### sorted_wrt (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  [] ==
### True
### Abstraction on left hand side of equation, in theorem:
### sorted_wrt (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  [?x] ==
### True
### Abstraction on left hand side of equation, in theorem:
### sorted_wrt (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (?x # ?y # ?zs) ==
### le_of_nat_term_order ?cmp_term (?x, the_min) (?y, the_min) &
### sorted_wrt (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (?y # ?zs)
### Abstraction on left hand side of equation, in theorem:
### linorder.sorted_list_of_set
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (set ?xs) ==
### linorder.sort_key
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) (%x. x)
###  (remdups ?xs)
### Abstraction on left hand side of equation, in theorem:
### ordered_term.ord_strict_p
###  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?p ?q ==
### ?q ~= 0 &
### (?p = 0 |
###  (let v1 = ordered_term.lt fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             ?p;
###       v2 = ordered_term.lt fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             ?q
###   in lt_of_nat_term_order ?cmp_term (v1, the_min) (v2, the_min) |
###      v1 = v2 &
###      lookup ?p v1 = lookup ?q v2 &
###      ordered_term.ord_strict_p
###       (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###       (ordered_term.lower
###         (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?p
###         v1)
###       (ordered_term.lower
###         (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?q
###         v2)))
"46"
  :: "nat"
### Partially applied constant "OAlist_Poly_Mapping.le_of_nat_term_order" on left hand side of equation, in theorem:
### linorder.Min (le_of_nat_term_order ?cmp_term) (set (?x # ?xs)) ==
### fold (pprod'.ord_term_lin.min ?cmp_term) ?xs ?x
### Partially applied constant "OAlist_Poly_Mapping.le_of_nat_term_order" on left hand side of equation, in theorem:
### linorder.Max (le_of_nat_term_order ?cmp_term) (set (?x # ?xs)) ==
### fold (pprod'.ord_term_lin.max ?cmp_term) ?xs ?x
"6"
  :: "nat"
### Partially applied constant "OAlist_Poly_Mapping.le_of_nat_term_order" on left hand side of equation, in theorem:
### pprod'.ord_term_lin.sorted ?cmp_term [] == True
### Partially applied constant "OAlist_Poly_Mapping.le_of_nat_term_order" on left hand side of equation, in theorem:
### pprod'.ord_term_lin.sorted ?cmp_term [?x] == True
### Partially applied constant "OAlist_Poly_Mapping.le_of_nat_term_order" on left hand side of equation, in theorem:
### pprod'.ord_term_lin.sorted ?cmp_term (?x # ?y # ?zs) ==
### le_of_nat_term_order ?cmp_term ?x ?y &
### pprod'.ord_term_lin.sorted ?cmp_term (?y # ?zs)
### Partially applied constant "OAlist_Poly_Mapping.le_of_nat_term_order" on left hand side of equation, in theorem:
### pprod'.ord_term_lin.sorted_list_of_set ?cmp_term (set ?xs) ==
### pprod'.ord_term_lin.sort ?cmp_term (remdups ?xs)
### Partially applied constant "MPoly_Type_Class.to_pair_unit" on left hand side of equation, in theorem:
### gd_term.gb_schema_aux to_pair_unit fst
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?sel ?ap
###  ?ab ?compl ?gs ?data ?bs [] ==
### ?gs @ ?bs
### Partially applied constant "MPoly_Type_Class.to_pair_unit" on left hand side of equation, in theorem:
### gd_term.gb_aux to_pair_unit fst
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?gs ?data
###  ?bs ?ps ==
### if ?ps = [] then ?gs @ ?bs
### else let sps = pprod'.punit.gb_sel ?gs ?bs ?ps (snd ?data);
###          ps0 = ?ps -- sps;
###          aux =
###            gd_term.gb_red to_pair_unit fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             ?gs ?bs ps0 sps (snd ?data);
###          remcomps =
###            fst ?data -
###            gd_term.count_const_lt_components to_pair_unit fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             (fst aux)
###      in if remcomps = 0
###         then gd_term.full_gb to_pair_unit fst
###               (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                       (t, the_min))
###               (%s t. lt_of_nat_term_order ?cmp_term (s, the_min)
###                       (t, the_min))
###               (?gs @ ?bs)
###         else let (hs, data') = add_indices aux (snd ?data)
###              in gd_term.gb_aux to_pair_unit fst
###                  (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                          (t, the_min))
###                  (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                          (t, the_min))
###                  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min)
###                          (t, the_min))
###                  ?gs (remcomps, data')
###                  (add_basis_sorted
###                    (ordered_term.canon_basis_order fst
###                      (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min))
###                      (%s t. lt_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min)))
###                    ?gs ?bs hs data')
###                  (pprod'.punit.add_pairs
###                    (pprod'.punit.new_pairs_sorted
###                      (%data p q.
###                          gd_term.canon_pair_order_aux to_pair_unit fst
###                           (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                                   (t, the_min))
###                           (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                                   (t, the_min))
###                           (snd p) (snd q)))
###                    (gd_term.component_crit to_pair_unit fst
###                      (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min)))
###                    (gd_term.chain_ncrit to_pair_unit fst
###                      (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min)))
###                    (gd_term.chain_ocrit to_pair_unit fst
###                      (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min)))
###                    (merge_wrt
###                      (gd_term.canon_pair_order_aux to_pair_unit fst
###                        (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                                (t, the_min))
###                        (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                                (t, the_min))))
###                    ?gs ?bs ps0 hs data')
### Partially applied constant "MPoly_Type_Class.to_pair_unit" on left hand side of equation, in theorem:
### gd_term.gb to_pair_unit fst
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?bs0.0
###  ?data0.0 ==
### let data = (length ?bs0.0, ?data0.0);
###     bs1 = fst (add_indices (?bs0.0, ?data0.0) (0, ?data0.0));
###     bs = add_basis_sorted
###           (ordered_term.canon_basis_order fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             (%s t. lt_of_nat_term_order ?cmp_term (s, the_min)
###                     (t, the_min)))
###           [] [] bs1 data
### in map (%(f, uu_, y). (f, y))
###     (gd_term.gb_aux to_pair_unit fst
###       (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###       (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###       (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) []
###       (gd_term.count_rem_components to_pair_unit fst
###         (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###         (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) bs,
###        data)
###       bs (pprod'.punit.add_pairs
###            (pprod'.punit.new_pairs_sorted
###              (%data p q.
###                  gd_term.canon_pair_order_aux to_pair_unit fst
###                   (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                           (t, the_min))
###                   (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                           (t, the_min))
###                   (snd p) (snd q)))
###            (gd_term.component_crit to_pair_unit fst
###              (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                      (t, the_min)))
###            (gd_term.chain_ncrit to_pair_unit fst
###              (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                      (t, the_min)))
###            (gd_term.chain_ocrit to_pair_unit fst
###              (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                      (t, the_min)))
###            (merge_wrt
###              (gd_term.canon_pair_order_aux to_pair_unit fst
###                (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                        (t, the_min))
###                (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                        (t, the_min))))
###            [] [] [] bs1 data))
### Abstraction on left hand side of equation, in theorem:
### gd_term.gb_aux_punit
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?gs ?data
###  ?bs ?ps ==
### if ?ps = [] then ?gs @ ?bs
### else let sps = pprod'.punit.gb_sel ?gs ?bs ?ps (snd ?data);
###          ps0 = ?ps -- sps;
###          aux =
###            gd_term.gb_red to_pair_unit fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             ?gs ?bs ps0 sps (snd ?data);
###          remcomps =
###            fst ?data -
###            gd_term.count_const_lt_components to_pair_unit fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             (fst aux)
###      in if remcomps = 0
###         then gd_term.full_gb to_pair_unit fst
###               (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                       (t, the_min))
###               (%s t. lt_of_nat_term_order ?cmp_term (s, the_min)
###                       (t, the_min))
###               (?gs @ ?bs)
###         else let (hs, data') = add_indices aux (snd ?data)
###              in gd_term.gb_aux_punit
###                  (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                          (t, the_min))
###                  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min)
###                          (t, the_min))
###                  ?gs (remcomps, data')
###                  (add_basis_sorted
###                    (ordered_term.canon_basis_order fst
###                      (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min))
###                      (%s t. lt_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min)))
###                    ?gs ?bs hs data')
###                  (pprod'.punit.add_pairs
###                    (pprod'.punit.new_pairs_sorted
###                      (%data p q.
###                          gd_term.canon_pair_order_aux to_pair_unit fst
###                           (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                                   (t, the_min))
###                           (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                                   (t, the_min))
###                           (snd p) (snd q)))
###                    (gd_term.product_crit
###                      (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min)))
###                    (gd_term.chain_ncrit to_pair_unit fst
###                      (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min)))
###                    (gd_term.chain_ocrit to_pair_unit fst
###                      (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min)))
###                    (merge_wrt
###                      (gd_term.canon_pair_order_aux to_pair_unit fst
###                        (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                                (t, the_min))
###                        (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                                (t, the_min))))
###                    ?gs ?bs ps0 hs data')
### Abstraction on left hand side of equation, in theorem:
### gd_term.gb_punit
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?bs0.0
###  ?data0.0 ==
### let data = (length ?bs0.0, ?data0.0);
###     bs1 = fst (add_indices (?bs0.0, ?data0.0) (0, ?data0.0));
###     bs = add_basis_sorted
###           (ordered_term.canon_basis_order fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             (%s t. lt_of_nat_term_order ?cmp_term (s, the_min)
###                     (t, the_min)))
###           [] [] bs1 data
### in map (%(f, uu_, y). (f, y))
###     (gd_term.gb_aux_punit
###       (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###       (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) []
###       (gd_term.count_rem_components to_pair_unit fst
###         (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###         (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) bs,
###        data)
###       bs (pprod'.punit.add_pairs
###            (pprod'.punit.new_pairs_sorted
###              (%data p q.
###                  gd_term.canon_pair_order_aux to_pair_unit fst
###                   (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                           (t, the_min))
###                   (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                           (t, the_min))
###                   (snd p) (snd q)))
###            (gd_term.product_crit
###              (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                      (t, the_min)))
###            (gd_term.chain_ncrit to_pair_unit fst
###              (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                      (t, the_min)))
###            (gd_term.chain_ocrit to_pair_unit fst
###              (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                      (t, the_min)))
###            (merge_wrt
###              (gd_term.canon_pair_order_aux to_pair_unit fst
###                (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                        (t, the_min))
###                (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                        (t, the_min))))
###            [] [] [] bs1 data))
### Partially applied constant "MPoly_Type_Class.to_pair_unit" on left hand side of equation, in theorem:
### gd_term.trd_aux to_pair_unit fst
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?fs ?p
###  ?r ==
### if is_zero ?p then ?r
### else case ordered_term.find_adds to_pair_unit fst
###            (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###            ?fs
###            (ordered_term.lt fst
###              (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                      (t, the_min))
###              ?p) of
###      None =>
###        gd_term.trd_aux to_pair_unit fst
###         (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?fs
###         (ordered_term.tail fst
###           (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###           ?p)
###         (plus_monomial_less ?r
###           (ordered_term.lc fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             ?p)
###           (ordered_term.lt fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             ?p))
###      | Some f =>
###          gd_term.trd_aux to_pair_unit fst
###           (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###           ?fs
###           (ordered_term.tail fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             ?p -
###            punit.monom_mult
###             (ordered_term.lc fst
###               (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                       (t, the_min))
###               ?p /
###              ordered_term.lc fst
###               (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                       (t, the_min))
###               f)
###             (punit.pp_of_term
###               (ordered_term.lt fst
###                 (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                         (t, the_min))
###                 ?p) -
###              punit.pp_of_term
###               (ordered_term.lt fst
###                 (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                         (t, the_min))
###                 f))
###             (ordered_term.tail fst
###               (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                       (t, the_min))
###               f))
###           ?r
### Partially applied constant "MPoly_Type_Class.to_pair_unit" on left hand side of equation, in theorem:
### gd_term.count_const_lt_components to_pair_unit fst
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?hs ==
### if EX h:set ?hs.
###       ordered_term.const_lt_component to_pair_unit fst
###        (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###        (fst h) =
###       Some ()
### then 1 else 0
### Partially applied constant "MPoly_Type_Class.to_pair_unit" on left hand side of equation, in theorem:
### gd_term.count_rem_components to_pair_unit fst
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?bs ==
### if ALL b:set ?bs. fst b = 0 then 0
### else if EX b:set ?bs.
###            fst b ~= 0 &
###            ordered_term.const_lt_component to_pair_unit fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             (fst b) =
###            Some ()
###      then 0 else 1
### Partially applied constant "MPoly_Type_Class.to_pair_unit" on left hand side of equation, in theorem:
### gd_term.full_gb to_pair_unit fst
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?bs ==
### if ALL b:set ?bs. fst b = 0 then [] else [(1, 0, default)]
### Abstraction on left hand side of equation, in theorem:
### pprod'.gb_schema_aux ?cmp_term ?sel ?ap ?ab ?compl ?gs ?data ?bs [] ==
### ?gs @ ?bs
### Abstraction on left hand side of equation, in theorem:
### gd_term.gb_aux_punit
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?gs ?data
###  ?bs ?ps ==
### if ?ps = [] then ?gs @ ?bs
### else let sps = pprod'.punit.gb_sel ?gs ?bs ?ps (snd ?data);
###          ps0 = ?ps -- sps;
###          aux =
###            gd_term.gb_red to_pair_unit fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             ?gs ?bs ps0 sps (snd ?data);
###          remcomps =
###            fst ?data -
###            gd_term.count_const_lt_components to_pair_unit fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             (fst aux)
###      in if remcomps = 0
###         then gd_term.full_gb to_pair_unit fst
###               (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                       (t, the_min))
###               (%s t. lt_of_nat_term_order ?cmp_term (s, the_min)
###                       (t, the_min))
###               (?gs @ ?bs)
###         else let (hs, data') = add_indices aux (snd ?data)
###              in gd_term.gb_aux_punit
###                  (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                          (t, the_min))
###                  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min)
###                          (t, the_min))
###                  ?gs (remcomps, data')
###                  (add_basis_sorted
###                    (ordered_term.canon_basis_order fst
###                      (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min))
###                      (%s t. lt_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min)))
###                    ?gs ?bs hs data')
###                  (pprod'.punit.add_pairs
###                    (pprod'.punit.new_pairs_sorted
###                      (%data p q.
###                          gd_term.canon_pair_order_aux to_pair_unit fst
###                           (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                                   (t, the_min))
###                           (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                                   (t, the_min))
###                           (snd p) (snd q)))
###                    (gd_term.product_crit
###                      (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min)))
###                    (gd_term.chain_ncrit to_pair_unit fst
###                      (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min)))
###                    (gd_term.chain_ocrit to_pair_unit fst
###                      (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                              (t, the_min)))
###                    (merge_wrt
###                      (gd_term.canon_pair_order_aux to_pair_unit fst
###                        (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                                (t, the_min))
###                        (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                                (t, the_min))))
###                    ?gs ?bs ps0 hs data')
### Abstraction on left hand side of equation, in theorem:
### gd_term.gb_punit
###  (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###  (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) ?bs0.0
###  ?data0.0 ==
### let data = (length ?bs0.0, ?data0.0);
###     bs1 = fst (add_indices (?bs0.0, ?data0.0) (0, ?data0.0));
###     bs = add_basis_sorted
###           (ordered_term.canon_basis_order fst
###             (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###             (%s t. lt_of_nat_term_order ?cmp_term (s, the_min)
###                     (t, the_min)))
###           [] [] bs1 data
### in map (%(f, uu_, y). (f, y))
###     (gd_term.gb_aux_punit
###       (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###       (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) []
###       (gd_term.count_rem_components to_pair_unit fst
###         (%s t. le_of_nat_term_order ?cmp_term (s, the_min) (t, the_min))
###         (%s t. lt_of_nat_term_order ?cmp_term (s, the_min) (t, the_min)) bs,
###        data)
###       bs (pprod'.punit.add_pairs
###            (pprod'.punit.new_pairs_sorted
###              (%data p q.
###                  gd_term.canon_pair_order_aux to_pair_unit fst
###                   (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                           (t, the_min))
###                   (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                           (t, the_min))
###                   (snd p) (snd q)))
###            (gd_term.product_crit
###              (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                      (t, the_min)))
###            (gd_term.chain_ncrit to_pair_unit fst
###              (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                      (t, the_min)))
###            (gd_term.chain_ocrit to_pair_unit fst
###              (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                      (t, the_min)))
###            (merge_wrt
###              (gd_term.canon_pair_order_aux to_pair_unit fst
###                (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                        (t, the_min))
###                (%s t. le_of_nat_term_order ?cmp_term (s, the_min)
###                        (t, the_min))))
###            [] [] [] bs1 data))
### Code generator: dropping subsumed code equation
### ord_strict_p_pprod ?cmp_term ?p ?q ==
### ?q ~= 0 &
### (?p = 0 |
###  (let v1 = lt_pprod ?cmp_term ?p; v2 = lt_pprod ?cmp_term ?q
###   in lt_of_nat_term_order ?cmp_term v1 v2 |
###      v1 = v2 &
###      lookup ?p v1 = lookup ?q v2 &
###      ord_strict_p_pprod ?cmp_term (pprod'.lower ?cmp_term ?p v1)
###       (pprod'.lower ?cmp_term ?q v2)))
locale experiment16608414
### theory "Draft.Buchberger_Examples"
### 47.017s elapsed time, 82.930s cpu time, 47.922s GC time
Loading theory "Draft.Buchberger_ExamplesTemplates"
val templateLemmas =
   [("Buchberger_Examples.compute_splus_pprod",
     "splus_pprod ?t (?s, ?i) = (?t + ?s, ?i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Buchberger_Examples.compute_trd_punit",
     "trd_punit ?to ?fs ?p = trd_aux_punit ?to ?fs ?p (change_ord ?to 0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("Buchberger_Examples.compute_trd_pprod",
     "trd_pprod ?to ?fs ?p = trd_aux_pprod ?to ?fs ?p (change_ord ?to 0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("Buchberger_Examples.compute_adds_term_pprod",
     "adds_term_pprod ?u ?v =
      (snd ?u = snd ?v & adds_pp_add_linorder (fst ?u) (fst ?v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Buchberger_Examples.compute_shift_map_keys_pprod",
     "list_of_oalist_ntm (shift_map_keys_pprod ?t ?f ?xs) =
      map_raw (%(k, v). (splus_pprod ?t k, ?f v)) (list_of_oalist_ntm ?xs)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app (template_hole 5, template_var 0)))),
    ("Buchberger_Examples.compute_spoly_punit",
     "spoly_punit ?to ?p ?q =
      (let t1 = lt_punit ?to ?p; t2 = lt_punit ?to ?q; l = lcs t1 t2
       in monom_mult_punit ((1::?'c) / lc_punit ?to ?p) (l - t1) ?p -
          monom_mult_punit ((1::?'c) / lc_punit ?to ?q) (l - t2) ?q)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         t_empty)))]:
   (string * thm * template) list
### theory "Draft.Buchberger_ExamplesTemplates"
### 4.492s elapsed time, 13.314s cpu time, 6.328s GC time
val it = (): unit
