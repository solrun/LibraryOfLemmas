Loading theory "Draft.General" (required by "Draft.GeneralTemplates")
Loading theory "Draft.Templates" (required by "Draft.GeneralTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.163s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.GeneralTemplates")
### Missing patterns in function definition:
### max_list [] = undefined
Found termination order: "length <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  insort_wrt :: "('c => 'c => bool) => 'c => 'c list => 'c list"
consts
  remdups_wrt :: "('a => 'b) => 'a list => 'a list"
consts
  map_idx :: "('a => nat => 'b) => 'a list => nat => 'b list"
consts
  map_dup :: "('a => 'b) => ('a => 'b) => 'a list => 'b list"
consts
  filter_min_aux :: "'a list => 'a list => 'a list"
### theory "Draft.General"
### 0.604s elapsed time, 1.216s cpu time, 0.160s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.591s elapsed time, 1.122s cpu time, 0.160s GC time
Loading theory "Draft.GeneralTemplates"
val templateLemmas =
   [("General.distinct_remdups_wrt", "distinct (remdups_wrt ?f ?xs)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("General.insort_wrt_not_Nil", "insort_wrt ?r ?x ?xs ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0),
           template_hole 0)
         )),
    ("General.filter_min_subset", "set (filter_min ?rel ?xs) <= set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("General.subset_remdups_wrt", "set (remdups_wrt ?f ?xs) <= set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("General.length_map_dup", "length (map_dup ?f ?g ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("General.length_map_idx", "length (map_idx ?f ?xs ?n) = length ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("General.filter_min_aux_supset",
     "set ?ys <= set (filter_min_aux ?rel ?xs ?ys)",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 2),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("General.filter_min_distinct",
     "reflp ?rel ==> distinct (filter_min ?rel ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("General.length_insort_wrt",
     "length (insort_wrt ?r ?x ?xs) = Suc (length ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("General.set_insert_list",
     "set (insert_list ?x ?xs) = insert ?x (set ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("General.diff_list_disjoint", "set ?ys Int set (?xs -- ?ys) = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))),
       template_hole 0)),
    ("General.set_diff_list", "set (?xs -- ?ys) = set ?xs - set ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("General.set_insort_wrt",
     "set (insort_wrt ?r ?x ?xs) = insert ?x (set ?xs)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("General.map_remdups_wrt",
     "map ?f (remdups_wrt ?f ?xs) = remdups (map ?f ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("General.set_remdups_wrt",
     "?f ` set (remdups_wrt ?f ?xs) = ?f ` set ?xs",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("General.map_idx_no_idx", "map_idx (%x _. ?f x) ?xs ?n = map ?f ?xs",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), template_var 1))),
    ("General.filter_min_append_subset",
     "set (filter_min_append ?rel ?xs ?ys) <= set ?xs Un set ?ys",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("General.filter_min_aux_subset",
     "set (filter_min_aux ?rel ?xs ?ys) <= set ?xs Un set ?ys",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("General.sorted_wrt_insort_wrt_imp_sorted_wrt",
     "sorted_wrt ?r (insort_wrt ?s ?x ?xs) ==> sorted_wrt ?r ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 0, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3), template_var 0)
           ))),
    ("General.map_dup_distinct",
     "distinct ?xs ==> map_dup ?f ?g ?xs = map ?f ?xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("General.set_reorder", "set (?xs @ ?y # ?ys) = set (?y # ?xs @ ?ys)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("General.distinct_reorder",
     "distinct (?xs @ ?y # ?ys) = distinct (?y # ?xs @ ?ys)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("General.map_idx_map",
     "map_idx ?f (map ?g ?xs) ?n = map_idx (?f o ?g) ?xs ?n",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0))),
    ("General.filter_min_aux_distinct",
     "[| reflp ?rel; distinct ?ys |]
      ==> distinct (filter_min_aux ?rel ?xs ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("General.map_idx_no_elem",
     "map_idx (%_. ?f) ?xs ?n = map ?f [?n..<?n + length ?xs]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, t_empty), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1)))))),
    ("General.set_zip_map2",
     "set (zip ?xs (map ?f ?xs)) = (%x. (x, ?f x)) ` set ?xs",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1))),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 0, template_var 1)))),
    ("General.set_zip_map1",
     "set (zip (map ?f ?xs) ?xs) = (%x. (?f x, x)) ` set ?xs",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_var 0)),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("General.map_map_idx",
     "map ?f (map_idx ?g ?xs ?n) = map_idx (%x i. ?f (?g x i)) ?xs ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty), template_var 1),
         template_var 0))),
    ("General.subset_append_diff_cancel",
     "set ?ys <= set ?xs ==> set (?ys @ ?xs -- ?ys) = set ?xs",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app (template_hole 3, template_var 0)))),
    ("General.filter_min_append_distinct",
     "[| reflp ?rel; distinct ?xs; distinct ?ys |]
      ==> distinct (filter_min_append ?rel ?xs ?ys)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("General.set_zip_map",
     "set (zip (map ?f ?xs) (map ?g ?xs)) = (%x. (?f x, ?g x)) ` set ?xs",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1))),
       template_app
        (template_app (template_hole 2, t_empty),
         template_app (template_hole 0, template_var 1)))),
    ("General.map_idx_eq_map",
     "map_idx ?f ?xs ?n = map (%i. ?f (?xs ! i) (i + ?n)) [0..<length ?xs]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1))))),
    ("General.set_map_idx",
     "set (map_idx ?f ?xs ?n) =
      (%i. ?f (?xs ! i) (i + ?n)) ` {0..<length ?xs}",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 1))))),
    ("General.UN_upt",
     "(UN i:{0..<length ?xs}. ?f (?xs ! i)) = \<Union> (?f ` set ?xs)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 0)))),
       template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("General.map_idx_append",
     "map_idx ?f (?xs @ ?ys) ?n =
      map_idx ?f ?xs ?n @ map_idx ?f ?ys (?n + length ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 3),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2)))))),
    ("General.sum_list_zeroI'",
     "(!!i. i < length ?xs ==> ?xs ! i = (0::?'a)) ==>
      sum_list ?xs = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("General.map_idx_eq_map2",
     "map_idx ?f ?xs ?n = map2 ?f ?xs [?n..<?n + length ?xs]",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, t_empty)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 1))))))),
    ("General.map_idx_nth",
     "?i < length ?xs ==> map_idx ?f ?xs ?n ! ?i = ?f (?xs ! ?i) (?n + ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 3,
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_var 1,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3))))),
    ("General.filter_map_dup_const",
     "filter (%x. x ~= ?c) (map_dup ?f (%_. ?c) ?xs) =
      filter (%x. x ~= ?c) (map ?f (remdups ?xs))",
     template_equation
      (template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1), t_empty),
           template_var 0)),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("General.remdups_wrt_append",
     "remdups_wrt ?f (?xs @ ?ys) =
      filter (%a. ?f a ~: ?f ` set ?ys) (remdups_wrt ?f ?xs) @
      remdups_wrt ?f ?ys",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1))),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_var 0)))),
    ("General.sum_list_map2_plus",
     "length ?xs = length ?ys ==>
      sum_list (map2 (+) ?xs ?ys) = sum_list ?xs + sum_list ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 4, template_var 0))))),
    ("General.sorted_wrt_insort_wrt",
     "[| transp ?r; !!a. ?r a ?x | ?r ?x a |]
      ==> sorted_wrt ?r (insort_wrt ?r ?x ?xs) = sorted_wrt ?r ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("General.sorted_wrt_imp_sorted_wrt_insort_wrt",
     "[| transp ?r; !!a. ?r a ?x | ?r ?x a; sorted_wrt ?r ?xs |]
      ==> sorted_wrt ?r (insort_wrt ?r ?x ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("General.remdups_wrt_distinct_wrt",
     "[| ?x : set (remdups_wrt ?f ?xs); ?y : set (remdups_wrt ?f ?xs);
         ?x ~= ?y |]
      ==> ?f ?x ~= ?f ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)))
            ),
        template_negation
         (template_equation (template_var 3, template_var 0))],
       template_negation
        (
           template_equation
            (template_app (template_var 2, template_var 3),
             template_app (template_var 2, template_var 0))
           ))),
    ("General.filter_min_minimal",
     "[| transp ?rel; ?x : set (filter_min ?rel ?xs);
         ?y : set (filter_min ?rel ?xs); ?rel ?x ?y |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 2), template_var 0)
            )],
       template_equation (template_var 2, template_var 0))),
    ("General.filter_zip_map_dup_const",
     "filter (%(a, b). a ~= ?c) (zip (map_dup ?f (%_. ?c) ?xs) ?xs) =
      filter (%(a, b). a ~= ?c) (zip (map ?f (remdups ?xs)) (remdups ?xs))",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 1), t_empty),
               template_var 0)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0))),
           template_app (template_hole 0, template_var 0))))),
    ("General.distinctI",
     "(!!i j.
          [| i < j; i < length ?xs; j < length ?xs |]
          ==> ?xs ! i ~= ?xs ! j) ==>
      distinct ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("General.sum_list_eq_nthI",
     "[| ?i < length ?xs;
         !!j. [| j < length ?xs; j ~= ?i |] ==> ?xs ! j = (0::?'a) |]
      ==> sum_list ?xs = ?xs ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_var 0)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_var 1)))),
    ("General.filter_min_relE",
     "[| transp ?rel; reflp ?rel; ?x : set ?xs;
         !!y. [| y : set (filter_min ?rel ?xs); ?rel y ?x |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("General.filter_min_append_relE",
     "[| transp ?rel; reflp ?rel; ?x : set ?xs Un set ?ys;
         !!y. [| y : set (filter_min_append ?rel ?xs ?ys); ?rel y ?x |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2)),
                template_app (template_hole 2, template_var 1)))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("General.filter_min_aux_relE",
     "[| transp ?rel; ?x : set ?xs; ?x ~: set (filter_min_aux ?rel ?xs ?ys);
         !!y. [| y : set (filter_min_aux ?rel ?xs ?ys); ?rel y ?x |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app
                       (template_app (template_hole 1, template_var 4),
                        template_var 2),
                      template_var 1)))
                )
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0))),
    ("General.distinct_filterI",
     "(!!i j.
          [| i < j; i < length ?xs; j < length ?xs; ?P (?xs ! i);
             ?P (?xs ! j) |]
          ==> ?xs ! i ~= ?xs ! j) ==>
      distinct (filter ?P ?xs)",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("General.filter_min_cases",
     "[| transp ?rel; ?x : set ?xs;
         ?x : set (filter_min ?rel ?xs) ==> ?thesis;
         !!y. [| y : set (filter_min ?rel ?xs);
                 ?x ~: set (filter_min ?rel ?xs); ?rel y ?x |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 1)))
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("General.filter_min_append_cases",
     "[| transp ?rel; ?x : set ?xs Un set ?ys;
         ?x : set (filter_min_append ?rel ?xs ?ys) ==> ?thesis;
         !!y. [| y : set (filter_min_append ?rel ?xs ?ys);
                 ?x ~: set (filter_min_append ?rel ?xs ?ys); ?rel y ?x |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 2)),
                template_app (template_hole 3, template_var 1)))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 4),
                       template_var 2),
                     template_var 1)))
               )],
          template_predicate (template_var 0)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("General.filter_min_aux_minimal",
     "[| transp ?rel; ?x : set (filter_min_aux ?rel ?xs ?ys);
         ?y : set (filter_min_aux ?rel ?xs ?ys); ?rel ?x ?y;
         !!a b.
            [| a : set ?xs Un set ?ys; b : set ?ys; ?rel a b |] ==> a = b |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app (template_hole 3, template_var 4),
                    template_var 2),
                  template_var 1)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 3), template_var 0)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation (template_var 3, template_var 0))),
    ("General.filter_nth_pairE",
     "[| ?i < ?j; ?i < length (filter ?P ?xs); ?j < length (filter ?P ?xs);
         !!i' j'.
            [| i' < j'; i' < length ?xs; j' < length ?xs;
               filter ?P ?xs ! ?i = ?xs ! i';
               filter ?P ?xs ! ?j = ?xs ! j' |]
            ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_inequation (less_than, template_var 4, template_var 3),
        template_inequation
         (less_than, template_var 4,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1))),
        template_inequation
         (less_than, template_var 3,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1))),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("General.filter_min_append_minimal",
     "[| !!x' y'. [| x' : set ?xs; y' : set ?xs; ?rel x' y' |] ==> x' = y';
         !!x' y'. [| x' : set ?ys; y' : set ?ys; ?rel x' y' |] ==> x' = y';
         ?x : set (filter_min_append ?rel ?xs ?ys);
         ?y : set (filter_min_append ?rel ?xs ?ys); ?rel ?x ?y |]
      ==> ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 4),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 4),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 1), template_var 0)
            )],
       template_equation (template_var 1, template_var 0)))]:
   (string * thm * template) list
### theory "Draft.GeneralTemplates"
### 0.387s elapsed time, 0.556s cpu time, 0.089s GC time
val it = (): unit
