Loading theory "Draft.General" (required by "Draft.Macaulay_MatrixTemplates" via "Draft.Macaulay_Matrix" via "Draft.More_MPoly_Type_Class")
Loading theory "Draft.Templates" (required by "Draft.Macaulay_MatrixTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.165s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Macaulay_MatrixTemplates")
### Missing patterns in function definition:
### max_list [] = undefined
Found termination order: "length <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  insort_wrt :: "('c => 'c => bool) => 'c => 'c list => 'c list"
consts
  remdups_wrt :: "('a => 'b) => 'a list => 'a list"
consts
  map_idx :: "('a => nat => 'b) => 'a list => nat => 'b list"
consts
  map_dup :: "('a => 'b) => ('a => 'b) => 'a list => 'b list"
consts
  filter_min_aux :: "'a list => 'a list => 'a list"
### theory "Draft.General"
### 0.581s elapsed time, 1.181s cpu time, 0.149s GC time
Loading theory "Draft.More_MPoly_Type_Class" (required by "Draft.Macaulay_MatrixTemplates" via "Draft.Macaulay_Matrix")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.568s elapsed time, 1.131s cpu time, 0.149s GC time
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.More_MPoly_Type_Class"
### 0.943s elapsed time, 1.096s cpu time, 0.181s GC time
Loading theory "Draft.Macaulay_Matrix" (required by "Draft.Macaulay_MatrixTemplates")
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
[| Keys (set ?ps) <= set ?ts; ?v : carrier_vec (length ?ps) |]
==> row_to_poly ?ts (?v \<^sub>v* polys_to_mat ?ts ?ps) =
    sum_list (map2 (\<cdot>) (list_of_vec ?v) ?ps)
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.Macaulay_Matrix"
### 1.658s elapsed time, 2.080s cpu time, 0.699s GC time
Loading theory "Draft.Macaulay_MatrixTemplates"
val templateLemmas =
   [("Macaulay_Matrix.distinct_nzrows_row_echelon",
     "distinct (nzrows (row_echelon ?A))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Macaulay_Matrix.dim_row_echelon",
     "dim_col (row_echelon ?A) = dim_col ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Macaulay_Matrix.dim_row_echelon",
     "dim_row (row_echelon ?A) = dim_row ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Macaulay_Matrix.dim_resize_vec", "dim_vec (resize_vec ?n ?v) = ?n",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 1)),
    ("Macaulay_Matrix.row_space_row_echelon",
     "row_space (row_echelon ?A) = row_space ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Macaulay_Matrix.resize_vec_dim", "resize_vec (dim_vec ?v) ?v = ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0),
       template_var 0)),
    ("Macaulay_Matrix.length_nzrows", "length (nzrows ?A) <= dim_row ?A",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Macaulay_Matrix.resize_vec_carrier",
     "resize_vec ?n ?v : carrier_vec ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app (template_hole 0, template_var 1))
         )),
    ("Macaulay_Matrix.dim_poly_to_row",
     "dim_vec (poly_to_row ?ts ?p) = length ?ts",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Macaulay_Matrix.vec_of_list_alt",
     "vec_of_list ?xs = vec (length ?xs) ((!) ?xs)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Macaulay_Matrix.row_space_alt",
     "row_space ?A = range (%v. v \<^sub>v* ?A)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, t_empty), template_hole 0))),
    ("Macaulay_Matrix.mult_mat_vec_resize",
     "?v \<^sub>v* ?A = resize_vec (dim_row ?A) ?v \<^sub>v* ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)),
         template_var 0))),
    ("Macaulay_Matrix.row_spaceI",
     "?x = ?v \<^sub>v* ?A ==> ?x : row_space ?A",
     template_implication
      ([template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Macaulay_Matrix.set_nzrows",
     "set (nzrows ?A) = set (rows ?A) - {0\<^sub>v (dim_col ?A)}",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 7,
             template_app (template_hole 4, template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("Macaulay_Matrix.vec_scalar_mult_fun",
     "vec ?n (%x. ?c * ?f x) = ?c \<cdot>\<^sub>v vec ?n ?f",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Macaulay_Matrix.row_echelon_carrier",
     "?A : carrier_mat ?nr ?nc ==> row_echelon ?A : carrier_mat ?nr ?nc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("Macaulay_Matrix.resize_vec_index",
     "?i < ?n ==> resize_vec ?n ?v $ ?i = ?v $ ?i",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Macaulay_Matrix.scalar_prod_comm",
     "dim_vec ?v = dim_vec ?w ==> ?v \<bullet> ?w = ?w \<bullet> ?v",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Macaulay_Matrix.mult_vec_mat_transpose",
     "dim_vec ?v = dim_row ?A ==>
      ?v \<^sub>v* ?A = ?A\<^sup>T *\<^sub>v ?v",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1),
          template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Macaulay_Matrix.row_echelon_pivot_fun",
     "(!!f. pivot_fun (row_echelon ?A) f (dim_col (row_echelon ?A)) ==>
            ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Macaulay_Matrix.nzrows_nth_not_zero",
     "?i < length (nzrows ?A) ==> nzrows ?A ! ?i ~= 0\<^sub>v (dim_col ?A)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 6,
            template_app (template_hole 5, template_var 0)))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 5, template_var 0)),
               template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Macaulay_Matrix.poly_to_row_index",
     "?i < length ?ts ==> poly_to_row ?ts ?p $ ?i = lookup ?p (?ts ! ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("Macaulay_Matrix.row_space_mult_unit",
     "?P : Units (ring_mat TYPE(?'a) (dim_row ?A) ?b) ==>
      row_space (?P * ?A) = row_space ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app (template_hole 3, template_var 1)),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 1)))),
    ("Macaulay_Matrix.row_space_mult",
     "[| ?A : carrier_mat ?nr ?nc; ?B : carrier_mat ?nr ?nr |]
      ==> row_space (?B * ?A) <= row_space ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 2))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3)),
         template_app (template_hole 1, template_var 3)))),
    ("Macaulay_Matrix.pivot_fun_mono",
     "[| pivot_fun ?A ?f ?nc; ?i1.0 <= ?i2.0; ?i2.0 < dim_row ?A |]
      ==> ?f ?i1.0 <= ?f ?i2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 0, template_var 4))],
       template_inequation
        (less_equals, template_app (template_var 3, template_var 1),
         template_app (template_var 3, template_var 0)))),
    ("Macaulay_Matrix.row_echelon_transform",
     "(!!P. [| P : Units (ring_mat TYPE(?'a) (dim_row ?A) ?b);
               row_echelon ?A = P * ?A |]
            ==> ?thesis) ==>
      ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_var 0))),
    ("Macaulay_Matrix.vec_cong",
     "[| ?n = ?m; !!i. i < ?m ==> ?f i = ?g i |] ==> vec ?n ?f = vec ?m ?g",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Macaulay_Matrix.row_spaceE",
     "[| ?x : row_space ?A;
         !!v. [| v : carrier_vec (dim_row ?A); ?x = v \<^sub>v* ?A |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("Macaulay_Matrix.row_eq_zero_iff_pivot_fun",
     "[| pivot_fun ?A ?f (dim_col ?A); ?i < dim_row ?A |]
      ==> (row ?A ?i = 0\<^sub>v (dim_col ?A)) = (?f ?i = dim_col ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_app (template_hole 7, template_var 2))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 2))],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0),
           template_app
            (template_hole 1,
             template_app (template_hole 7, template_var 2))),
         template_equation
          (template_app (template_var 1, template_var 0),
           template_app (template_hole 7, template_var 2))))),
    ("Macaulay_Matrix.row_not_zero_iff_pivot_fun",
     "[| pivot_fun ?A ?f (dim_col ?A); ?i < dim_row ?A |]
      ==> (row ?A ?i ~= 0\<^sub>v (dim_col ?A)) = (?f ?i < dim_col ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 2),
                template_var 1),
              template_app (template_hole 7, template_var 2))
            ),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 0,
               template_app (template_hole 7, template_var 2)))),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_var 1, template_var 0)),
           template_app (template_hole 7, template_var 2))))),
    ("Macaulay_Matrix.pivot_fun_stabilizes",
     "[| pivot_fun ?A ?f ?nc; ?i1.0 <= ?i2.0; ?i2.0 < dim_row ?A;
         ?nc <= ?f ?i1.0 |]
      ==> ?f ?i2.0 = ?nc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 1, template_var 4)),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_var 3, template_var 1))],
       template_equation
        (template_app (template_var 3, template_var 0), template_var 2))),
    ("Macaulay_Matrix.pivot_fun_mono_strict",
     "[| pivot_fun ?A ?f ?nc; ?i1.0 < ?i2.0; ?i2.0 < dim_row ?A;
         ?f ?i1.0 < ?nc |]
      ==> ?f ?i1.0 < ?f ?i2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_than, template_var 1, template_var 0),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 0, template_var 4)),
        template_inequation
         (less_than, template_app (template_var 3, template_var 1),
          template_var 2)],
       template_inequation
        (less_than, template_app (template_var 3, template_var 1),
         template_app (template_var 3, template_var 0)))),
    ("Macaulay_Matrix.assoc_mult_vec_mat",
     "[| ?v : carrier_vec ?n1.0; ?A : carrier_mat ?n1.0 ?n2.0;
         ?B : carrier_mat ?n2.0 ?n3.0 |]
      ==> ?v \<^sub>v* (?A * ?B) = ?v \<^sub>v* ?A \<^sub>v* ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 5),
              template_app (template_hole 5, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 4),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 5),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 5),
               template_var 3)),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.Macaulay_MatrixTemplates"
### 0.642s elapsed time, 0.848s cpu time, 0.109s GC time
val it = (): unit
