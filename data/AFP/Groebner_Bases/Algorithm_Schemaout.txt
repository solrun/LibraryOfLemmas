Loading theory "Draft.Confluence" (required by "Draft.Algorithm_SchemaTemplates" via "Draft.Algorithm_Schema" via "Draft.Groebner_Bases" via "Draft.Reduction")
Loading theory "Draft.General" (required by "Draft.Algorithm_SchemaTemplates" via "Draft.Algorithm_Schema")
Loading theory "Draft.Templates" (required by "Draft.Algorithm_SchemaTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.251s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Algorithm_SchemaTemplates")
### Missing patterns in function definition:
### max_list [] = undefined
locale relation
  fixes r :: "'a => 'a => bool"  (infixl \<open>\<rightarrow>\<close> 50)
Found termination order: "length <*mlex*> {}"
locale relation_order
  fixes r :: "'a => 'a => bool"  (infixl \<open>\<rightarrow>\<close> 50)
    and ord :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "relation_order (\<rightarrow>) ord A"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "Draft.Confluence"
### 0.462s elapsed time, 1.310s cpu time, 0.163s GC time
Loading theory "Draft.Reduction" (required by "Draft.Algorithm_SchemaTemplates" via "Draft.Algorithm_Schema" via "Draft.Groebner_Bases")
consts
  insort_wrt :: "('c => 'c => bool) => 'c => 'c list => 'c list"
consts
  remdups_wrt :: "('a => 'b) => 'a list => 'a list"
consts
  map_idx :: "('a => nat => 'b) => 'a list => nat => 'b list"
consts
  map_dup :: "('a => 'b) => ('a => 'b) => 'a list => 'b list"
consts
  filter_min_aux :: "'a list => 'a list => 'a list"
### theory "Draft.General"
### 0.677s elapsed time, 1.908s cpu time, 0.284s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.685s elapsed time, 1.839s cpu time, 0.284s GC time
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
consts
  find_adds ::
    "('t \<Rightarrow>\<^sub>0 'b) list
     => 't => ('t \<Rightarrow>\<^sub>0 'b) option"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.Reduction"
### 3.737s elapsed time, 4.704s cpu time, 1.089s GC time
Loading theory "Draft.Groebner_Bases" (required by "Draft.Algorithm_SchemaTemplates" via "Draft.Algorithm_Schema")
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale od_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "od_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.Groebner_Bases"
### 5.327s elapsed time, 6.408s cpu time, 1.857s GC time
Loading theory "Draft.Algorithm_Schema" (required by "Draft.Algorithm_SchemaTemplates")
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
consts
  gb_schema_incr ::
    "((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
      => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
         => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
             ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
            => nat * 'd
               => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                   ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list)
     => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
         => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
            => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
               => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => nat * 'd
                     => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                         ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list)
        => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
            => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
               => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => nat * 'd
                     => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list)
           => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
               => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                      ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                     => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                         ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                        => nat * 'd
                           => (('t \<Rightarrow>\<^sub>0 'b) * 'c) list *
                              'd)
              => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c => 'd => 'd)
                 => (('t \<Rightarrow>\<^sub>0 'b) * 'c) list
                    => 'd => (('t \<Rightarrow>\<^sub>0 'b) * 'c) list"
Found termination order:
  "(%p. size_list (%p. size (fst (snd (snd (snd p))))) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (fst (snd p)))
         (fst (snd (snd (snd p))))) <*mlex*>
   (%p. size_list (%p. size (fst (snd p))) (fst (snd (snd p)))) <*mlex*> {}"
consts
  pairs ::
    "(bool
      => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
         => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
            => ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c
               => (bool *
                   (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                   ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => (bool *
                      (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                      ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list)
     => bool
        => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
           => (bool *
               (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
               ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list"
locale gd_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "gd_powerprod (\<preceq>) (\<prec>)"
### theory "Draft.Algorithm_Schema"
### 21.047s elapsed time, 28.282s cpu time, 11.643s GC time
Loading theory "Draft.Algorithm_SchemaTemplates"
val templateLemmas =
   [("Algorithm_Schema.ab_spec_add_basis_sorted",
     "ab_spec (add_basis_sorted ?rel)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Algorithm_Schema.unique_idx_Nil", "unique_idx [] ?data",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Algorithm_Schema.fst_snd_Pair", "snd o Pair ?x = id",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Algorithm_Schema.fst_snd_Pair", "fst o Pair ?x = (%_. ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       t_empty)),
    ("Algorithm_Schema.ab_specD2",
     "ab_spec ?ab ==> ?ab ?gs ?bs [] ?data = ?bs",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_var 3, template_var 2),
               template_var 1),
             template_hole 0),
           template_var 0),
         template_var 1))),
    ("Algorithm_Schema.in_pair_alt",
     "(?p \<in>\<^sub>p ?A) = (?p : ?A | prod.swap ?p : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Algorithm_Schema.processedD1",
     "processed (?a, ?b) ?xs ?ps ==> ?a : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 3),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Algorithm_Schema.processedD2",
     "processed (?a, ?b) ?xs ?ps ==> ?b : set ?xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Algorithm_Schema.in_pair_Int_pairs",
     "(?p \<in>\<^sub>p ?A \<inter>\<^sub>p ?B) =
      (?p \<in>\<^sub>p ?A & ?p \<in>\<^sub>p ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Algorithm_Schema.in_pair_Un",
     "(?p \<in>\<^sub>p ?A Un ?B) =
      (?p \<in>\<^sub>p ?A | ?p \<in>\<^sub>p ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Algorithm_Schema.in_pair_same",
     "(?p \<in>\<^sub>p ?A \<times> ?A) = (?p : ?A \<times> ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0), t_empty)))),
    ("Algorithm_Schema.in_pair_trans",
     "[| ?p \<in>\<^sub>p ?A; ?A <= ?B |] ==> ?p \<in>\<^sub>p ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Algorithm_Schema.subset_pairsD",
     "[| ?x \<in>\<^sub>p ?A; ?A \<subseteq>\<^sub>p ?B |]
      ==> ?x \<in>\<^sub>p ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Algorithm_Schema.in_pair_minus_pairs",
     "(?p \<in>\<^sub>p ?A -\<^sub>p ?B) =
      (?p \<in>\<^sub>p ?A & ?p \<notin>\<^sub>p ?B)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0))))),
    ("Algorithm_Schema.in_minus_pairs",
     "(?p : ?A -\<^sub>p ?B) = (?p : ?A & ?p \<notin>\<^sub>p ?B)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0))))),
    ("Algorithm_Schema.processedD3",
     "processed (?a, ?b) ?xs ?ps ==> (?a, ?b) \<notin>\<^sub>p set ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_var 2)),
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Algorithm_Schema.subset_pairsI",
     "(!!x. x \<in>\<^sub>p ?A ==> x \<in>\<^sub>p ?B) ==>
      ?A \<subseteq>\<^sub>p ?B",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Algorithm_Schema.unique_idx_subset",
     "[| unique_idx ?bs ?data; set ?bs' <= set ?bs |]
      ==> unique_idx ?bs' ?data",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 0),
          template_app (template_hole 0, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0), template_var 1)
           ))),
    ("Algorithm_Schema.fst_set_drop_indices",
     "fst ` (%(f, uu_, d). (f, d)) ` ?A = fst ` ?A",
     template_equation
      (template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Algorithm_Schema.processed_Nil",
     "processed (?a, ?b) ?xs [] = (?a : set ?xs & ?b : set ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 3),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Algorithm_Schema.ab_specD1",
     "ab_spec ?ab ==> set (?ab ?gs ?bs ?ns ?data) = set ?bs Un set ?ns",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 4))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_app (template_var 4, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 1, template_var 2)),
           template_app (template_hole 1, template_var 1))))),
    ("Algorithm_Schema.in_pair_iff",
     "((?a, ?b) \<in>\<^sub>p ?A) = ((?a, ?b) : ?A | (?b, ?a) : ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Algorithm_Schema.unique_idxD2",
     "[| unique_idx ?bs ?data; ?f : set ?bs |]
      ==> fst (snd ?f) < fst ?data",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 2))
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Algorithm_Schema.sel_specD1",
     "[| sel_spec ?sel; ?ps ~= [] |] ==> ?sel ?gs ?bs ?ps ?data ~= []",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_hole 0))],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_app
                  (template_app (template_var 4, template_var 2),
                   template_var 1),
                 template_var 3),
               template_var 0),
             template_hole 0)
           ))),
    ("Algorithm_Schema.sel_specD2",
     "[| sel_spec ?sel; ?ps ~= [] |]
      ==> set (?sel ?gs ?bs ?ps ?data) <= set ?ps",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 4)),
        template_negation
         (template_equation (template_var 3, template_hole 2))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_var 4, template_var 2),
                 template_var 1),
               template_var 3),
             template_var 0)),
         template_app (template_hole 0, template_var 3)))),
    ("Algorithm_Schema.setE",
     "[| ?x : set ?xs; !!ys zs. ?xs = ys @ ?x # zs ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Algorithm_Schema.processed_alt",
     "processed (?a, ?b) ?xs ?ps =
      (?a : set ?xs & ?b : set ?xs & (?a, ?b) \<notin>\<^sub>p set ?ps)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app (template_hole 3, template_var 1))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app (template_hole 3, template_var 1))),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 2)),
               template_app (template_hole 0, template_var 0))))))),
    ("Algorithm_Schema.add_indices_code",
     "add_indices (?ns, ?data) (?n, ?data') =
      (map_idx (%(h, d) i. (h, i, d)) ?ns ?n, ?n + length ?ns, ?data)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 7, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_hole 5, template_app (template_hole 4, t_empty)),
               template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 3))),
           template_var 2)))),
    ("Algorithm_Schema.processedI",
     "[| ?a : set ?xs; ?b : set ?xs; (?a, ?b) \<notin>\<^sub>p set ?ps |]
      ==> processed (?a, ?b) ?xs ?ps",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app (template_hole 5, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 2))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 1)),
                  template_app (template_hole 1, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 1)),
               template_var 2),
             template_var 0)
           ))),
    ("Algorithm_Schema.unique_idxD1",
     "[| unique_idx ?bs ?data; ?f : set ?bs; ?g : set ?bs;
         fst (snd ?f) = fst (snd ?g) |]
      ==> ?f = ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 3))
            ),
        template_equation
         (template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 1)),
          template_app
           (template_hole 2,
            template_app (template_hole 1, template_var 0)))],
       template_equation (template_var 1, template_var 0))),
    ("Algorithm_Schema.processed_minus",
     "[| processed (?a, ?b) ?xs (?ps -- ?qs);
         (?a, ?b) \<in>\<^sub>p set ?qs ==> ?thesis;
         processed (?a, ?b) ?xs ?ps ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 5),
                    template_var 4)),
                template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4)),
                 template_app (template_hole 0, template_var 1))
               )],
          template_predicate (template_var 0)),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 3, template_var 5),
                       template_var 4)),
                   template_var 3),
                 template_var 2)
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0))),
    ("Algorithm_Schema.sel_specI",
     "(!!gs bs ps data.
          ps ~= [] ==>
          ?sel gs bs ps data ~= [] & set (?sel gs bs ps data) <= set ps) ==>
      sel_spec ?sel",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algorithm_Schema.pair_in_listE",
     "[| pair_in_list ?ps ?i ?j;
         !!p q a b.
            ((p, ?i, a), q, ?j, b) \<in>\<^sub>p snd ` set ?ps ==>
            ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate (template_var 0))),
    ("Algorithm_Schema.ab_specI",
     "[| !!gs bs ns data.
            ns ~= [] ==> set (?ab gs bs ns data) = set bs Un set ns;
         !!gs bs data. ?ab gs bs [] data = bs |]
      ==> ab_spec ?ab",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Algorithm_Schema.unique_idxI",
     "[| !!f g.
            [| f : set ?bs; g : set ?bs; fst (snd f) = fst (snd g) |]
            ==> f = g;
         !!f. f : set ?bs ==> fst (snd f) < fst ?data |]
      ==> unique_idx ?bs ?data",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Algorithm_Schema.processed_Cons",
     "[| processed (?a, ?b) ?xs ?ps; [| ?a = ?p; ?b = ?q |] ==> ?thesis;
         [| ?a = ?q; ?b = ?p |] ==> ?thesis;
         processed (?a, ?b) ?xs ((?p, ?q) # ?ps) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 6),
                    template_var 5)),
                template_var 4),
              template_var 3)
            ),
        template_implication
         ([template_equation (template_var 6, template_var 2)],
          template_implication
           ([template_equation (template_var 5, template_var 1)],
            template_predicate (template_var 0))),
        template_implication
         ([template_equation (template_var 6, template_var 1)],
          template_implication
           ([template_equation (template_var 5, template_var 2)],
            template_predicate (template_var 0))),
        template_implication
         ([template_predicate
            (
               template_app
                (template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 6),
                       template_var 5)),
                   template_var 4),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 1)),
                   template_var 3))
               )],
          template_predicate (template_var 0))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Algorithm_SchemaTemplates"
### 0.499s elapsed time, 0.692s cpu time, 0.163s GC time
val it = (): unit
