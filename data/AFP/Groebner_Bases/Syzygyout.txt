Loading theory "Draft.Confluence" (required by "Draft.SyzygyTemplates" via "Draft.Syzygy" via "Draft.Groebner_Bases" via "Draft.Reduction")
Loading theory "Draft.General" (required by "Draft.SyzygyTemplates" via "Draft.Syzygy" via "Draft.More_MPoly_Type_Class")
Loading theory "Draft.Templates" (required by "Draft.SyzygyTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.087s elapsed time, 0.292s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SyzygyTemplates")
### Missing patterns in function definition:
### max_list [] = undefined
locale relation
  fixes r :: "'a => 'a => bool"  (infixl \<open>\<rightarrow>\<close> 50)
Found termination order: "length <*mlex*> {}"
locale relation_order
  fixes r :: "'a => 'a => bool"  (infixl \<open>\<rightarrow>\<close> 50)
    and ord :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "relation_order (\<rightarrow>) ord A"
### theory "Draft.Confluence"
### 0.440s elapsed time, 1.248s cpu time, 0.152s GC time
Loading theory "Draft.Reduction" (required by "Draft.SyzygyTemplates" via "Draft.Syzygy" via "Draft.Groebner_Bases")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  insort_wrt :: "('c => 'c => bool) => 'c => 'c list => 'c list"
consts
  remdups_wrt :: "('a => 'b) => 'a list => 'a list"
consts
  map_idx :: "('a => nat => 'b) => 'a list => nat => 'b list"
consts
  map_dup :: "('a => 'b) => ('a => 'b) => 'a list => 'b list"
consts
  filter_min_aux :: "'a list => 'a list => 'a list"
### theory "Draft.General"
### 0.668s elapsed time, 1.888s cpu time, 0.266s GC time
Loading theory "Draft.More_MPoly_Type_Class" (required by "Draft.SyzygyTemplates" via "Draft.Syzygy")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.643s elapsed time, 1.790s cpu time, 0.266s GC time
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.More_MPoly_Type_Class"
### 1.312s elapsed time, 2.790s cpu time, 0.753s GC time
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
consts
  find_adds ::
    "('t \<Rightarrow>\<^sub>0 'b) list
     => 't => ('t \<Rightarrow>\<^sub>0 'b) option"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.Reduction"
### 3.944s elapsed time, 6.365s cpu time, 1.812s GC time
Loading theory "Draft.Groebner_Bases" (required by "Draft.SyzygyTemplates" via "Draft.Syzygy")
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale od_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "od_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.Groebner_Bases"
### 5.432s elapsed time, 7.292s cpu time, 2.874s GC time
Loading theory "Draft.Syzygy" (required by "Draft.SyzygyTemplates")
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale gd_inf_term
  fixes pair_of_term :: "'t => 'a * nat"
    and term_of_pair :: "'a * nat => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_inf_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.Syzygy"
### 2.739s elapsed time, 3.002s cpu time, 0.511s GC time
Loading theory "Draft.SyzygyTemplates"
val templateLemmas =
   [("Syzygy.pm_of_idx_pm_zero", "pm_of_idx_pm ?xs 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Syzygy.idx_pm_of_pm_zero", "idx_pm_of_pm ?xs 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Syzygy.keys_pm_of_idx_pm_subset",
     "keys (pm_of_idx_pm ?xs ?f) <= set ?xs",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Syzygy.range_pm_of_idx_pm_subset'",
     "Poly_Mapping.range (pm_of_idx_pm ?xs ?f) <= Poly_Mapping.range ?f",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Syzygy.pm_of_idx_pm_uminus",
     "pm_of_idx_pm ?xs (- ?f) = - pm_of_idx_pm ?xs ?f",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Syzygy.keys_idx_pm_of_pm_subset",
     "keys (idx_pm_of_pm ?xs ?f) <= {0..<length ?xs}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 1)))),
    ("Syzygy.pm_of_idx_pm_plus",
     "pm_of_idx_pm ?xs (?f + ?g) =
      pm_of_idx_pm ?xs ?f + pm_of_idx_pm ?xs ?g",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Syzygy.pm_of_idx_pm_minus",
     "pm_of_idx_pm ?xs (?f - ?g) =
      pm_of_idx_pm ?xs ?f - pm_of_idx_pm ?xs ?g",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Syzygy.idx_pm_of_pm_plus",
     "idx_pm_of_pm ?xs (?f + ?g) =
      idx_pm_of_pm ?xs ?f + idx_pm_of_pm ?xs ?g",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Syzygy.idx_pm_of_pm_minus",
     "idx_pm_of_pm ?xs (?f - ?g) =
      idx_pm_of_pm ?xs ?f - idx_pm_of_pm ?xs ?g",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Syzygy.pm_of_idx_pm_of_pm",
     "keys ?f <= set ?xs ==> pm_of_idx_pm ?xs (idx_pm_of_pm ?xs ?f) = ?f",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Syzygy.lookup_idx_pm_of_pm",
     "lookup (idx_pm_of_pm ?xs ?f) =
      (%i. lookup ?f (?xs ! i) when i < length ?xs)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       t_empty)),
    ("Syzygy.range_pm_of_idx_pm_subset",
     "Poly_Mapping.range (pm_of_idx_pm ?xs ?f)
      <= lookup ?f ` {0..<length ?xs} - {0::?'a}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 10,
         template_app
          (template_app (template_hole 9, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_hole 3, template_var 1)))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Syzygy.pm_of_idx_pm_monom_mult",
     "pm_of_idx_pm ?xs (punit.monom_mult ?c 0 ?f) =
      punit.monom_mult ?c (0::?'a) (pm_of_idx_pm ?xs ?f)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 2),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 7, template_hole 6),
                 template_hole 5),
               template_var 1),
             template_hole 4),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_var 1),
           template_hole 0),
         template_app
          (template_app (template_hole 8, template_var 2),
           template_var 0)))),
    ("Syzygy.pm_of_idx_pm_take",
     "keys ?f <= {0..<?j} ==>
      pm_of_idx_pm (take ?j ?xs) ?f = pm_of_idx_pm ?xs ?f",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 2)))),
    ("Syzygy.pm_of_idx_pm_monomial",
     "distinct ?xs ==>
      pm_of_idx_pm ?xs (monomial ?c ?i) =
      (monomial ?c (?xs ! ?i) when ?i < length ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 2)))))),
    ("Syzygy.idx_pm_of_pm_of_idx_pm",
     "[| distinct ?xs; keys ?f <= {0..<length ?xs} |]
      ==> idx_pm_of_pm ?xs (pm_of_idx_pm ?xs ?f) = ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 0),
          template_app
           (template_app (template_hole 5, template_hole 4),
            template_app (template_hole 3, template_var 1)))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Syzygy.lookup_pm_of_idx_pm_distinct",
     "[| distinct ?xs; ?i < length ?xs |]
      ==> lookup (pm_of_idx_pm ?xs ?f) (?xs ! ?i) = lookup ?f ?i",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Syzygy.lookup_pm_of_idx_pm",
     "lookup (pm_of_idx_pm ?xs ?f) =
      (%x. lookup ?f (Min {i. i < length ?xs & ?xs ! i = x}) when
           x : set ?xs)",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app (template_hole 11, template_var 1),
           template_var 0)),
       t_empty))]:
   (string * thm * template) list
### theory "Draft.SyzygyTemplates"
### 0.426s elapsed time, 0.586s cpu time, 0.000s GC time
val it = (): unit
