Loading theory "Draft.Code_Target_Rat" (required by "Draft.F4_ExamplesTemplates" via "Draft.F4_Examples")
Loading theory "Draft.Confluence" (required by "Draft.F4_ExamplesTemplates" via "Draft.F4_Examples" via "Draft.F4" via "Draft.Algorithm_Schema" via "Draft.Groebner_Bases" via "Draft.Reduction")
Loading theory "Draft.General" (required by "Draft.F4_ExamplesTemplates" via "Draft.F4_Examples" via "Draft.F4" via "Draft.Macaulay_Matrix" via "Draft.More_MPoly_Type_Class")
Loading theory "Draft.Templates" (required by "Draft.F4_ExamplesTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.085s elapsed time, 0.408s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.F4_ExamplesTemplates")
### Missing patterns in function definition:
### max_list [] = undefined
locale relation
  fixes r :: "'a => 'a => bool"  (infixl \<open>\<rightarrow>\<close> 50)
### theory "Draft.Code_Target_Rat"
### 0.321s elapsed time, 1.253s cpu time, 0.063s GC time
Loading theory "Draft.Benchmarks" (required by "Draft.F4_ExamplesTemplates" via "Draft.F4_Examples" via "Draft.Algorithm_Schema_Impl")
Found termination order: "length <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale relation_order
  fixes r :: "'a => 'a => bool"  (infixl \<open>\<rightarrow>\<close> 50)
    and ord :: "'a => 'a => bool"
    and A :: "'a set"
  assumes "relation_order (\<rightarrow>) ord A"
consts
  insort_wrt :: "('c => 'c => bool) => 'c => 'c list => 'c list"
### theory "Draft.Confluence"
### 0.480s elapsed time, 1.798s cpu time, 0.149s GC time
Loading theory "Draft.Reduction" (required by "Draft.F4_ExamplesTemplates" via "Draft.F4_Examples" via "Draft.F4" via "Draft.Algorithm_Schema" via "Draft.Groebner_Bases")
consts
  remdups_wrt :: "('a => 'b) => 'a list => 'a list"
### theory "Draft.Benchmarks"
### 0.252s elapsed time, 0.814s cpu time, 0.212s GC time
consts
  map_idx :: "('a => nat => 'b) => 'a list => nat => 'b list"
consts
  map_dup :: "('a => 'b) => ('a => 'b) => 'a list => 'b list"
consts
  filter_min_aux :: "'a list => 'a list => 'a list"
### theory "Draft.General"
### 0.687s elapsed time, 2.391s cpu time, 0.274s GC time
Loading theory "Draft.More_MPoly_Type_Class" (required by "Draft.F4_ExamplesTemplates" via "Draft.F4_Examples" via "Draft.F4" via "Draft.Macaulay_Matrix")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.757s elapsed time, 2.423s cpu time, 0.376s GC time
locale module
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "module (*s)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.More_MPoly_Type_Class"
### 1.404s elapsed time, 3.088s cpu time, 1.001s GC time
Loading theory "Draft.Macaulay_Matrix" (required by "Draft.F4_ExamplesTemplates" via "Draft.F4_Examples" via "Draft.F4")
locale term_powerprod
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
  assumes "term_powerprod pair_of_term term_of_pair"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
[| Keys (set ?ps) <= set ?ts; ?v : carrier_vec (length ?ps) |]
==> row_to_poly ?ts (?v \<^sub>v* polys_to_mat ?ts ?ps) =
    sum_list (map2 (\<cdot>) (list_of_vec ?v) ?ps)
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
consts
  find_adds ::
    "('t \<Rightarrow>\<^sub>0 'b) list
     => 't => ('t \<Rightarrow>\<^sub>0 'b) option"
### theory "Draft.Macaulay_Matrix"
### 1.948s elapsed time, 4.113s cpu time, 1.202s GC time
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.Reduction"
### 4.270s elapsed time, 8.495s cpu time, 2.387s GC time
Loading theory "Draft.Groebner_Bases" (required by "Draft.F4_ExamplesTemplates" via "Draft.F4_Examples" via "Draft.F4" via "Draft.Algorithm_Schema")
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale od_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "od_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
### theory "Draft.Groebner_Bases"
### 5.044s elapsed time, 6.278s cpu time, 1.977s GC time
Loading theory "Draft.Algorithm_Schema" (required by "Draft.F4_ExamplesTemplates" via "Draft.F4_Examples" via "Draft.F4")
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
consts
  gb_schema_incr ::
    "((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
      => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
         => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
             ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
            => nat * 'd
               => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                   ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list)
     => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
         => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
            => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
               => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => nat * 'd
                     => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                         ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list)
        => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
            => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
               => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => nat * 'd
                     => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list)
           => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
               => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                      ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                     => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                         ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                        => nat * 'd
                           => (('t \<Rightarrow>\<^sub>0 'b) * 'c) list *
                              'd)
              => ((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c => 'd => 'd)
                 => (('t \<Rightarrow>\<^sub>0 'b) * 'c) list
                    => 'd => (('t \<Rightarrow>\<^sub>0 'b) * 'c) list"
Found termination order:
  "(%p. size_list (%p. size (fst (snd (snd (snd p))))) (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size_list (%p. size (fst (snd p)))
         (fst (snd (snd (snd p))))) <*mlex*>
   (%p. size_list (%p. size (fst (snd p))) (fst (snd (snd p)))) <*mlex*> {}"
consts
  pairs ::
    "(bool
      => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
         => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
            => ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c
               => (bool *
                   (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                   ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
                  => (bool *
                      (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
                      ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list)
     => bool
        => (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
           => (bool *
               (('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
               ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list"
locale gd_powerprod
  fixes ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
  assumes "gd_powerprod (\<preceq>) (\<prec>)"
### theory "Draft.Algorithm_Schema"
### 20.724s elapsed time, 26.787s cpu time, 10.379s GC time
Loading theory "Draft.F4" (required by "Draft.F4_ExamplesTemplates" via "Draft.F4_Examples")
Loading theory "Draft.Algorithm_Schema_Impl" (required by "Draft.F4_ExamplesTemplates" via "Draft.F4_Examples")
### theory "Draft.Algorithm_Schema_Impl"
### 0.401s elapsed time, 0.795s cpu time, 0.148s GC time
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
consts
  sym_preproc_addnew ::
    "('t \<Rightarrow>\<^sub>0 'b) list
     => 't list
        => ('t \<Rightarrow>\<^sub>0 'b) list
           => 't => 't list * ('t \<Rightarrow>\<^sub>0 'b) list"
locale ordered_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "ordered_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
locale gd_term
  fixes pair_of_term :: "'t => 'a * 'k"
    and term_of_pair :: "'a * 'k => 't"
    and ord :: "'a => 'a => bool"  (infixl \<open>\<preceq>\<close> 50)
    and ord_strict :: "'a => 'a => bool"  (infixl \<open>\<prec>\<close> 50)
    and
    ord_term :: "'t => 't => bool"
      (infixl \<open>\<preceq>\<^sub>t\<close> 50)
    and
    ord_term_strict :: "'t => 't => bool"
      (infixl \<open>\<prec>\<^sub>t\<close> 50)
  assumes
    "gd_term pair_of_term term_of_pair (\<preceq>) (\<prec>)
      (\<preceq>\<^sub>t) (\<prec>\<^sub>t)"
consts
  pdata_pairs_to_list ::
    "((('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) *
      ('t \<Rightarrow>\<^sub>0 'b) * nat * 'c) list
     => ('t \<Rightarrow>\<^sub>0 'b) list"
### theory "Draft.F4"
### 18.042s elapsed time, 43.254s cpu time, 38.257s GC time
*** Failed to load theory "Draft.F4_Examples" (unresolved "Draft.F4")
*** Failed to load theory "Draft.F4_ExamplesTemplates" (unresolved "Draft.F4_Examples")
*** Unknown ancestor theory "Groebner_Bases.Algorithm_Schema" (line 1363 of "$AFP/Groebner_Bases/F4.thy")
*** At command "text" (line 1361 of "$AFP/Groebner_Bases/F4.thy")
Exception- TOPLEVEL_ERROR raised
