Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.Social_Choice_Functions" via "Randomised_Social_Choice.Preference_Profile_Cmd" via "Randomised_Social_Choice.Elections" via "Randomised_Social_Choice.Preference_Profiles" via "Randomised_Social_Choice.Order_Predicates" via "HOL-Combinatorics.Permutations")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.Social_Choice_Functions" via "Randomised_Social_Choice.Preference_Profile_Cmd" via "Randomised_Social_Choice.Elections" via "Randomised_Social_Choice.Preference_Profiles" via "Randomised_Social_Choice.Order_Predicates" via "HOL-Combinatorics.Permutations" via "HOL-Library.Multiset")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.Social_Choice_Functions" via "Randomised_Social_Choice.Preference_Profile_Cmd" via "Randomised_Social_Choice.Elections" via "Randomised_Social_Choice.Preference_Profiles" via "Randomised_Social_Choice.Order_Predicates" via "HOL-Library.Disjoint_Sets")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.524s cpu time, 0.036s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Combinatorics.Transposition"
### 0.141s elapsed time, 0.582s cpu time, 0.036s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.208s elapsed time, 0.820s cpu time, 0.068s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.FuncSet"
### 0.404s elapsed time, 1.620s cpu time, 0.103s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.Social_Choice_Functions" via "Randomised_Social_Choice.Preference_Profile_Cmd" via "Randomised_Social_Choice.Elections" via "Randomised_Social_Choice.Preference_Profiles" via "Randomised_Social_Choice.Order_Predicates")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.454s elapsed time, 1.811s cpu time, 0.166s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.Social_Choice_Functions" via "Randomised_Social_Choice.Preference_Profile_Cmd" via "Randomised_Social_Choice.Elections" via "Randomised_Social_Choice.Preference_Profiles" via "Randomised_Social_Choice.Order_Predicates" via "HOL-Combinatorics.Permutations")
### theory "HOL-Library.Nat_Bijection"
### 0.326s elapsed time, 1.275s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Disjoint_Sets"
### 0.255s elapsed time, 1.008s cpu time, 0.096s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.092s elapsed time, 4.166s cpu time, 0.848s GC time
Loading theory "List-Index.List_Index" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.Social_Choice_Functions" via "Randomised_Social_Choice.Preference_Profile_Cmd" via "Randomised_Social_Choice.Elections" via "Randomised_Social_Choice.Preference_Profiles" via "Randomised_Social_Choice.Order_Predicates")
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
### theory "HOL-Library.BigO"
### 1.014s elapsed time, 3.857s cpu time, 0.822s GC time
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
Found termination order: "size <*mlex*> {}"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
### theory "List-Index.List_Index"
### 0.414s elapsed time, 1.399s cpu time, 0.137s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Tree"
### 2.088s elapsed time, 7.012s cpu time, 1.209s GC time
Loading theory "Draft.Templates" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.ExtrEqs")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.055s elapsed time, 0.111s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Social_Choice_FunctionsMoreTemplates")
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.535s elapsed time, 1.113s cpu time, 0.107s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.176s elapsed time, 8.413s cpu time, 1.341s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.Social_Choice_Functions" via "Randomised_Social_Choice.Preference_Profile_Cmd" via "Randomised_Social_Choice.Elections" via "Randomised_Social_Choice.Preference_Profiles" via "Randomised_Social_Choice.Order_Predicates")
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Combinatorics.Permutations"
### 0.628s elapsed time, 0.773s cpu time, 0.126s GC time
Loading theory "Randomised_Social_Choice.Order_Predicates" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.Social_Choice_Functions" via "Randomised_Social_Choice.Preference_Profile_Cmd" via "Randomised_Social_Choice.Elections" via "Randomised_Social_Choice.Preference_Profiles")
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
locale total_preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "total_preorder_on carrier le"
"R b a = R b a"
  :: "bool"
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
locale order_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "order_on carrier le"
locale linorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "linorder_on carrier le"
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
locale total_preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "total_preorder_on carrier le"
Proofs for inductive predicate(s) "of_weak_ranking"
  Proving monotonicity ...
### Not an equation, in theorem:
### is_weak_ranking []
### Not an equation, in theorem:
### is_finite_weak_ranking []
consts
  is_weak_ranking_aux :: "'a set => 'a set list => bool"
### Code generator: dropping subsumed code equation
### is_weak_ranking (?x # ?xs) ==
### ?x ~= {} & is_weak_ranking ?xs & ?x Int \<Union> (set ?xs) = {}
locale finite_total_preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "finite_total_preorder_on carrier le"
locale finite_linorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "finite_linorder_on carrier le"
### theory "Randomised_Social_Choice.Order_Predicates"
### 0.815s elapsed time, 1.499s cpu time, 0.934s GC time
Loading theory "Randomised_Social_Choice.Preference_Profiles" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.Social_Choice_Functions" via "Randomised_Social_Choice.Preference_Profile_Cmd" via "Randomised_Social_Choice.Elections")
locale preorder_family
  fixes dom :: "'a set"
    and carrier :: "'b set"
    and R :: "'a => 'b => 'b => bool"
  assumes "preorder_family dom carrier R"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale preorder_family
  fixes dom :: "'a set"
    and carrier :: "'b set"
    and R :: "'a => 'b => 'b => bool"
  assumes "preorder_family dom carrier R"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale pref_profile_wf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_wf agents alts R"
locale pref_profile_unique_favorites
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and R :: "'agent => 'alt => 'alt => bool"
  assumes "pref_profile_unique_favorites agents alts R"
### theory "Randomised_Social_Choice.Preference_Profiles"
### 0.291s elapsed time, 0.328s cpu time, 0.051s GC time
Loading theory "Randomised_Social_Choice.Elections" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.Social_Choice_Functions" via "Randomised_Social_Choice.Preference_Profile_Cmd")
locale election
  fixes agents :: "'agent set"
    and alts :: "'alt set"
  assumes "election agents alts"
### theory "Randomised_Social_Choice.Elections"
### 0.039s elapsed time, 0.040s cpu time, 0.000s GC time
Loading theory "Randomised_Social_Choice.Preference_Profile_Cmd" (required by "Draft.Social_Choice_FunctionsMoreTemplates" via "Draft.Social_Choice_Functions")
signature PREFERENCE_PROFILES =
  sig
    val agentT: profile -> typ
    val agents_of_profile: profile -> term list
    val altT: profile -> typ
    val alts_of_profile: profile -> term list
    val apply_permutation: ('a * 'a -> bool) -> 'a permutation -> 'a -> 'a
    val apply_reverse_permutation:
       ('a * 'a -> bool) -> 'a permutation -> 'a -> 'a
    val cycles: ('a * 'a -> bool) -> 'a permutation -> 'a list list
    val derive_orbit_equations:
       profile -> ((term * term) * term permutation) list
    val eq_prefs: prefs * prefs -> bool
    val equiv_profile_anonymity: profile * profile -> bool
    val find_an_automorphisms:
       profile -> ((term * term) * term permutation) list
    val find_an_isomorphism: profile * profile -> term permutation option
    val find_an_isomorphisms: profile * profile -> term permutation Seq.seq
    val find_manipulations:
       profile * profile -> (term * term * int * term permutation) list
    val find_pareto_witness: profile -> term -> (term * term * term) option
    val fixpoints: ('a * 'a -> bool) -> 'a permutation -> 'a list
    val is_identity: ('a * 'a -> bool) -> 'a permutation -> bool
    val manipulation_distance: prefs * prefs -> int
    val pareto: profile -> term * term -> bool
    val pareto_losers: profile -> (term * term * term) list
    val pareto_pairs: profile -> (term * term * term) list
    type 'a permutation
    val permutations: ('a * 'a -> bool) -> 'a list -> 'a permutation Seq.seq
    val permute_profile: term permutation -> profile -> profile
    val pref_profileT: typ -> typ -> typ
    val preferred_alts: prefs -> term -> term list
    type prefs
    type profile
    val ranking: prefs -> term * term -> bool
    val relation_of_prefs: prefs -> (term * term) list
    val strict_pareto: profile -> term * term -> bool
    val strict_ranking: prefs -> term * term -> bool
    type support
  end
structure Preference_Profiles: PREFERENCE_PROFILES
locale election
  fixes agents :: "'agent set"
    and alts :: "'alt set"
  assumes "election agents alts"
signature PREFERENCE_PROFILES_CMD =
  sig
    val add_info: term -> info -> Context.generic -> Context.generic
    val get_info: term -> Proof.context -> info
    type info
    val preference_profile:
       (term * term) * (binding * (term * term list list) list) list ->
         Proof.context -> Proof.state
    val preference_profile_cmd:
       (string * string) * (binding * (string * string list list) list) list
         -> Proof.context -> Proof.state
    val transform_info: info -> morphism -> info
  end
structure Preference_Profiles_Cmd: PREFERENCE_PROFILES_CMD
### theory "Randomised_Social_Choice.Preference_Profile_Cmd"
### 0.496s elapsed time, 0.555s cpu time, 0.086s GC time
Loading theory "Draft.Social_Choice_Functions" (required by "Draft.Social_Choice_FunctionsMoreTemplates")
locale election
  fixes agents :: "'agent set"
    and alts :: "'alt set"
  assumes "election agents alts"
locale social_choice_function
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and scf :: "('agent => 'alt => 'alt => bool) => 'alt set"
  assumes "social_choice_function agents alts scf"
locale anonymous_scf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and scf :: "('agent => 'alt => 'alt => bool) => 'alt set"
  assumes "anonymous_scf agents alts scf"
locale neutral_scf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and scf :: "('agent => 'alt => 'alt => bool) => 'alt set"
  assumes "neutral_scf agents alts scf"
locale an_scf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and scf :: "('agent => 'alt => 'alt => bool) => 'alt set"
  assumes "an_scf agents alts scf"
locale pairwise_scf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and scf :: "('agent => 'alt => 'alt => bool) => 'alt set"
  assumes "pairwise_scf agents alts scf"
locale pareto_efficient_scf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and scf :: "('agent => 'alt => 'alt => bool) => 'alt set"
  assumes "pareto_efficient_scf agents alts scf"
locale strategyproof_scf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and scf :: "('agent => 'alt => 'alt => bool) => 'alt set"
    and set_ext :: "('alt => 'alt => bool) => 'alt set => 'alt set => bool"
  assumes "strategyproof_scf agents alts scf set_ext"
locale strategyproof_anonymous_scf
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and scf :: "('agent => 'alt => 'alt => bool) => 'alt set"
    and set_ext :: "('alt => 'alt => bool) => 'alt set => 'alt set => bool"
  assumes "strategyproof_anonymous_scf agents alts scf set_ext"
locale preorder_on
  fixes carrier :: "'a set"
    and le :: "'a => 'a => bool"
  assumes "Order_Predicates.preorder_on carrier le"
locale scf_lowering
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and scf :: "('agent => 'alt => 'alt => bool) => 'alt set"
    and agents' :: "'agent set"
    and alts' :: "'alt set"
  assumes "scf_lowering agents alts scf agents' alts'"
locale scf_lowering_anonymous
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and scf :: "('agent => 'alt => 'alt => bool) => 'alt set"
    and agents' :: "'agent set"
    and alts' :: "'alt set"
  assumes "scf_lowering_anonymous agents alts scf agents' alts'"
locale scf_lowering_neutral
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and scf :: "('agent => 'alt => 'alt => bool) => 'alt set"
    and agents' :: "'agent set"
    and alts' :: "'alt set"
  assumes "scf_lowering_neutral agents alts scf agents' alts'"
locale liftable_set_extension
  fixes alts' :: "'alt set"
    and alts :: "'alt set"
    and set_ext :: "('alt => 'alt => bool) => 'alt set => 'alt set => bool"
  assumes "liftable_set_extension alts' alts set_ext"
locale scf_lowering_strategyproof
  fixes agents :: "'agent set"
    and alts :: "'alt set"
    and scf :: "('agent => 'alt => 'alt => bool) => 'alt set"
    and agents' :: "'agent set"
    and alts' :: "'alt set"
    and set_ext :: "('alt => 'alt => bool) => 'alt set => 'alt set => bool"
  assumes "scf_lowering_strategyproof agents alts scf agents' alts' set_ext"
### theory "Draft.Social_Choice_Functions"
### 0.415s elapsed time, 0.439s cpu time, 0.033s GC time
Loading theory "Draft.Social_Choice_FunctionsMoreTemplates"
val templateLemmas =
   [("Social_Choice_Functions.eval_set_filter", "Set.filter ?P {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Social_Choice_Functions.weighted_majority_refl",
     "weighted_majority ?R ?x ?x = 0",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_var 0),
       template_hole 0)),
    ("Social_Choice_Functions.Fishburn_liftable",
     "?alts' <= ?alts ==> liftable_set_extension ?alts' ?alts Fishb",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Social_Choice_Functions.Kelly_liftable",
     "?alts' <= ?alts ==> liftable_set_extension ?alts' ?alts Kelly",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0),
             template_hole 0)
           ))),
    ("Social_Choice_Functions.weighted_majority_swap",
     "weighted_majority ?R ?x ?y = - weighted_majority ?R ?y ?x",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_var 1)))),
    ("Social_Choice_Functions.supporters_auxdef",
     "supporters ?R ?x ?y = {i. ?R i ?y ?x}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 0, t_empty))),
    ("Social_Choice_Functions.Kelly_eval",
     "Kelly ?R ?B ?A = (ALL a:?A. ALL b:?B. ?R b a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Social_Choice_Functions.eval_set_filter",
     "~ ?P ?x ==> Set.filter ?P (insert ?x ?A) = Set.filter ?P ?A",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 2, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Social_Choice_Functions.eval_set_filter",
     "?P ?x ==>
      Set.filter ?P (insert ?x ?A) = insert ?x (Set.filter ?P ?A)",
     template_implication
      ([template_predicate (template_app (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Social_Choice_Functions.lift_prefs_wf",
     "[| total_preorder_on ?alts ?R; ?alts <= ?alts' |]
      ==> total_preorder_on ?alts' (lift_prefs ?alts ?alts' ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0),
               template_var 1))
           ))),
    ("Social_Choice_Functions.lift_pref_profile_conv_vector",
     "[| ?i : ?agents; ?i : ?agents' |]
      ==> lift_pref_profile ?agents ?alts ?agents' ?alts' ?R ?i =
          lift_prefs ?alts ?alts' (?R ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 5),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_var 3),
               template_var 1),
             template_var 0),
           template_var 5),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app (template_var 0, template_var 5))))),
    ("Social_Choice_Functions.Kelly_strict_iff",
     "?B \<prec>[Kelly ?R] ?A =
      ((ALL a:?A. ALL b:?B. ?R b a) & ~ (ALL a:?B. ALL b:?A. ?R b a))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2), t_empty))))),
    ("Social_Choice_Functions.lift_pref_profile_permute_agents",
     "[| ?\<pi> permutes ?agents; ?agents <= ?agents' |]
      ==> lift_pref_profile ?agents ?alts ?agents' ?alts' (?R o ?\<pi>) =
          lift_pref_profile ?agents ?alts ?agents' ?alts' ?R o ?\<pi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_var 4)
            ),
        template_inequation (less_equals, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 2),
               template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 5)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 1, template_var 4),
                     template_var 2),
                   template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 5)))),
    ("Social_Choice_Functions.lift_pref_profile_permute_alts",
     "[| ?\<sigma> permutes ?alts; ?alts <= ?alts' |]
      ==> lift_pref_profile ?agents ?alts ?agents' ?alts'
           (permute_profile ?\<sigma> ?R) =
          permute_profile ?\<sigma>
           (lift_pref_profile ?agents ?alts ?agents' ?alts' ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 5),
              template_var 4)
            ),
        template_inequation (less_equals, template_var 4, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 4),
               template_var 1),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 5),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 5),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 4),
                 template_var 1),
               template_var 3),
             template_var 0))))),
    ("Social_Choice_Functions.Fishb_eval",
     "Fishb ?R ?B ?A =
      ((ALL a:?A. ALL b:?B - ?A. ?R b a) &
       (ALL a:?A - ?B. ALL b:?B. ?R b a))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           t_empty)))),
    ("Social_Choice_Functions.lift_pref_profile_wf",
     "[| pref_profile_wf ?agents ?alts ?R; ?agents <= ?agents';
         ?alts <= ?alts'; finite ?alts' |]
      ==> pref_profile_wf ?agents' ?alts'
           (lift_pref_profile ?agents ?alts ?agents' ?alts' ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 4, template_var 1),
        template_inequation (less_equals, template_var 3, template_var 0),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Social_Choice_Functions.pareto_losers_lift_pref_profile",
     "[| pref_profile_wf ?agents ?alts ?R; ?agents <= ?agents';
         ?alts <= ?alts'; ?alts ~= {}; ?agents ~= {}; finite ?alts' |]
      ==> pareto_losers
           (lift_pref_profile ?agents ?alts ?agents' ?alts' ?R) =
          pareto_losers ?R Un (?alts' - ?alts)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_equals, template_var 4, template_var 1),
        template_inequation (less_equals, template_var 3, template_var 0),
        template_negation
         (template_equation (template_var 3, template_hole 7)),
        template_negation
         (template_equation (template_var 4, template_hole 5)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 3))))),
    ("Social_Choice_Functions.liftable_set_extensionI_weak",
     "(!!R A B.
          [| total_preorder_on ?alts' R; A ~= {}; B ~= {}; A <= ?alts';
             B <= ?alts' |]
          ==> ?set_ext R A B = ?set_ext (lift_prefs ?alts' ?alts R) A B) ==>
      liftable_set_extension ?alts' ?alts ?set_ext",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0),
             template_var 1)
           ))),
    ("Social_Choice_Functions.Fishb_strict_iff",
     "?B \<prec>[Fishb ?R] ?A =
      (((ALL a:?A. ALL b:?B - ?A. ?R b a) &
        (ALL a:?A - ?B. ALL b:?B. ?R b a)) &
       ~ ((ALL a:?B. ALL b:?A - ?B. ?R b a) &
          (ALL a:?B - ?A. ALL b:?A. ?R b a)))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2),
           template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 0), t_empty)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2)),
               t_empty))),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2), t_empty)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               t_empty)))))),
    ("Social_Choice_Functions.lift_pref_profile_Pareto_iff",
     "[| pref_profile_wf ?agents ?alts ?R; ?agents <= ?agents';
         ?alts <= ?alts'; ?alts ~= {}; ?agents ~= {}; finite ?alts' |]
      ==> Pareto (lift_pref_profile ?agents ?alts ?agents' ?alts' ?R) ?x
           ?y =
          (?x : ?alts' & ?y : ?alts' & (?x ~: ?alts | Pareto ?R ?x ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_inequation (less_equals, template_var 6, template_var 3),
        template_inequation (less_equals, template_var 5, template_var 2),
        template_negation
         (template_equation (template_var 5, template_hole 9)),
        template_negation
         (template_equation (template_var 6, template_hole 7)),
        template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 6),
                       template_var 5),
                     template_var 3),
                   template_var 2),
                 template_var 4)),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 5))),
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 1),
                 template_var 0))))))),
    ("Social_Choice_Functions.lift_pref_profile_strict_iff",
     "[| pref_profile_wf ?agents ?alts ?R; ?agents <= ?agents';
         ?alts <= ?alts'; ?alts ~= {}; ?agents ~= {}; finite ?alts' |]
      ==> ?x \<prec>[lift_pref_profile ?agents ?alts ?agents' ?alts' ?R
                      ?i] ?y =
          (?i : ?agents &
           (?y : ?alts & ?x : ?alts' - ?alts | ?x \<prec>[?R ?i] ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_inequation (less_equals, template_var 7, template_var 4),
        template_inequation (less_equals, template_var 6, template_var 3),
        template_negation
         (template_equation (template_var 6, template_hole 11)),
        template_negation
         (template_equation (template_var 7, template_hole 9)),
        template_predicate
         (template_app (template_hole 8, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 7),
                       template_var 6),
                     template_var 4),
                   template_var 3),
                 template_var 5),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 7)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 6)),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 6)))),
             template_app
              (template_app
                (template_app (template_hole 6, template_var 2),
                 template_app (template_var 5, template_var 1)),
               template_var 0)))))),
    ("Social_Choice_Functions.lift_pref_profile_Pareto_strict_iff",
     "[| pref_profile_wf ?agents ?alts ?R; ?agents <= ?agents';
         ?alts <= ?alts'; ?alts ~= {}; ?agents ~= {}; finite ?alts' |]
      ==> ?x \<prec>[Pareto
                      (lift_pref_profile ?agents ?alts ?agents' ?alts'
                        ?R)] ?y =
          (?x : ?alts' &
           ?y : ?alts' &
           (?x ~: ?alts & ?y : ?alts | ?x \<prec>[Pareto ?R] ?y))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_inequation (less_equals, template_var 6, template_var 3),
        template_inequation (less_equals, template_var 5, template_var 2),
        template_negation
         (template_equation (template_var 5, template_hole 10)),
        template_negation
         (template_equation (template_var 6, template_hole 8)),
        template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 3, template_var 6),
                       template_var 5),
                     template_var 3),
                   template_var 2),
                 template_var 4))),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 12,
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 5))),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 5))),
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app (template_hole 4, template_var 4)),
                 template_var 0))))))),
    ("Social_Choice_Functions.preferred_alts_lift_pref_profile",
     "[| pref_profile_wf ?agents ?alts ?R; ?agents <= ?agents';
         ?alts <= ?alts'; ?alts ~= {}; ?agents ~= {}; finite ?alts';
         ?i : ?agents'; ?x : ?alts' |]
      ==> preferred_alts
           (lift_pref_profile ?agents ?alts ?agents' ?alts' ?R ?i) ?x =
          (if ?i : ?agents & ?x : ?alts then preferred_alts (?R ?i) ?x
           else ?alts')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_inequation (less_equals, template_var 6, template_var 3),
        template_inequation (less_equals, template_var 5, template_var 2),
        template_negation
         (template_equation (template_var 5, template_hole 9)),
        template_negation
         (template_equation (template_var 6, template_hole 7)),
        template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 2, template_var 6),
                       template_var 5),
                     template_var 3),
                   template_var 2),
                 template_var 4),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 6)),
                 template_app
                  (template_app (template_hole 4, template_var 0),
                   template_var 5))),
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_var 4, template_var 1)),
               template_var 0)),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.Social_Choice_FunctionsMoreTemplates"
### 0.697s elapsed time, 1.675s cpu time, 1.197s GC time
val it = (): unit
