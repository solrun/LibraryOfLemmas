Loading theory "Draft.Definitions" (required by "Draft.AnonymityMoreTemplates" via "Draft.Anonymity" via "Draft.Authentication")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.118s elapsed time, 0.486s cpu time, 0.036s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.234s elapsed time, 0.957s cpu time, 0.036s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.343s elapsed time, 1.374s cpu time, 0.115s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.967s elapsed time, 3.666s cpu time, 0.812s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.062s elapsed time, 3.874s cpu time, 0.814s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.951s elapsed time, 6.180s cpu time, 1.070s GC time
Loading theory "Draft.Templates" (required by "Draft.AnonymityMoreTemplates" via "Draft.ExtrEqs")
consts
  InvK :: "key => key"
Proofs for inductive predicate(s) "partsp"
  Proving monotonicity ...
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.AnonymityMoreTemplates")
Proofs for inductive predicate(s) "cryptsp"
  Proving monotonicity ...
Found termination order: "{}"
### theory "Draft.Definitions"
### 2.547s elapsed time, 7.630s cpu time, 1.154s GC time
Loading theory "Draft.Authentication" (required by "Draft.AnonymityMoreTemplates" via "Draft.Anonymity")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.546s elapsed time, 1.154s cpu time, 0.121s GC time
### theory "Draft.Authentication"
### 0.608s elapsed time, 0.778s cpu time, 0.128s GC time
Loading theory "Draft.Anonymity" (required by "Draft.AnonymityMoreTemplates")
### theory "Draft.Anonymity"
### 0.416s elapsed time, 0.904s cpu time, 0.686s GC time
Loading theory "Draft.AnonymityMoreTemplates"
val templateLemmas =
   [("Anonymity.key_sets_empty", "key_sets ?X {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Anonymity.key_sets_msg_eq", "key_sets_msg ?X ?X = {{}}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("Anonymity.crypts_msg_agent", "crypts_msg (Agent ?n) = {Agent ?n}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Anonymity.crypts_msg_key", "crypts_msg (Key ?K) = {Key ?K}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Anonymity.crypts_msg_num", "crypts_msg (Num ?n) = {Num ?n}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Anonymity.crypts_msg_pwd", "crypts_msg (Pwd ?n) = {Pwd ?n}",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Anonymity.crypts_msg_hash",
     "crypts_msg (Hash ?X) = insert (Hash ?X) (crypts_msg ?X)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("Anonymity.crypts_union",
     "crypts (?H Un ?H') = crypts ?H Un crypts ?H'",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Anonymity.crypts_insert",
     "crypts (insert ?X ?H) = crypts_msg ?X Un crypts ?H",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Anonymity.crypts_msg_crypt",
     "crypts_msg (Crypt ?K ?X) = Crypt ?K ` crypts_msg ?X",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Anonymity.crypts_msg_mult",
     "crypts_msg (?A \<otimes> ?B) = {?A \<otimes> ?B}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Anonymity.key_sets_crypts_hash",
     "key_sets (Hash ?X) (crypts ?H) <= key_sets ?X (crypts ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Anonymity.crypts_union_1",
     "crypts (?H Un ?H') <= crypts ?H Un crypts ?H'",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Anonymity.crypts_union_2",
     "crypts ?H Un crypts ?H' <= crypts (?H Un ?H')",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Anonymity.crypts_mono", "?H <= ?H' ==> crypts ?H <= crypts ?H'",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Anonymity.foldr_crypt_size",
     "size (foldr Crypt ?KS ?X) = size ?X + length ?KS",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Anonymity.key_sets_crypts_fst",
     "key_sets \<lbrace>?X, ?Y\<rbrace> (crypts ?H)
      <= key_sets ?X (crypts ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app (template_hole 0, template_var 0)))),
    ("Anonymity.key_sets_crypts_snd",
     "key_sets \<lbrace>?X, ?Y\<rbrace> (crypts ?H)
      <= key_sets ?Y (crypts ?H)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Anonymity.key_sets_mono",
     "?H <= ?H' ==> key_sets ?X ?H <= key_sets ?X ?H'",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Anonymity.key_sets_range", "?U : key_sets ?X ?H ==> ?U <= range Key",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals, template_var 2,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Anonymity.key_sets_union",
     "key_sets ?X (?H Un ?H') = key_sets ?X ?H Un key_sets ?X ?H'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Anonymity.key_sets_insert",
     "key_sets ?X (insert ?Y ?H) = key_sets_msg ?X ?Y Un key_sets ?X ?H",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Anonymity.crypts_hash_1",
     "crypts {Hash ?X} <= insert (Hash ?X) (crypts {?X})",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))))),
    ("Anonymity.crypts_hash_2",
     "insert (Hash ?X) (crypts {?X}) <= crypts {Hash ?X}",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 0)))),
    ("Anonymity.key_sets_msg_agent",
     "key_sets_msg ?X (Agent ?n) = (if ?X = Agent ?n then {{}} else {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 5, template_var 0))),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)),
             template_hole 0)
           ))),
    ("Anonymity.key_sets_msg_hash",
     "key_sets_msg ?X (Hash ?Y) = (if ?X = Hash ?Y then {{}} else {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 5, template_var 0))),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)),
             template_hole 0)
           ))),
    ("Anonymity.key_sets_msg_key",
     "key_sets_msg ?X (Key ?K) = (if ?X = Key ?K then {{}} else {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 5, template_var 0))),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)),
             template_hole 0)
           ))),
    ("Anonymity.key_sets_msg_num",
     "key_sets_msg ?X (Num ?n) = (if ?X = Num ?n then {{}} else {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 5, template_var 0))),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)),
             template_hole 0)
           ))),
    ("Anonymity.key_sets_msg_pwd",
     "key_sets_msg ?X (Pwd ?n) = (if ?X = Pwd ?n then {{}} else {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 5, template_var 0))),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)),
             template_hole 0)
           ))),
    ("Anonymity.crypts_msg_mpair",
     "crypts_msg \<lbrace>?X, ?Y\<rbrace> =
      insert \<lbrace>?X, ?Y\<rbrace> (crypts_msg ?X Un crypts_msg ?Y)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 3, template_var 0))))),
    ("Anonymity.crypts_crypt_1",
     "crypts {Crypt ?K ?X} <= Crypt ?K ` crypts {?X}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 1))))),
    ("Anonymity.crypts_crypt_2",
     "Crypt ?K ` crypts {?X} <= crypts {Crypt ?K ?X}",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Anonymity.crypts_comp",
     "?X : crypts ?H ==> Crypt ?K ?X : crypts (Crypt ?K ` ?H)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 1, template_var 0)),
                 template_var 1)))
           ))),
    ("Anonymity.key_sets_msg_mpair",
     "key_sets_msg ?X \<lbrace>?Y, ?Z\<rbrace> =
      (if ?X = \<lbrace>?Y, ?Z\<rbrace> then {{}} else {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)),
             template_hole 0)
           ))),
    ("Anonymity.key_sets_msg_mult",
     "key_sets_msg ?X (?A \<otimes> ?B) =
      (if ?X = ?A \<otimes> ?B then {{}} else {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)),
             template_hole 0)
           ))),
    ("Anonymity.key_sets_crypt_2",
     "insert (InvKey ?K) ` key_sets ?X {?Y} <= key_sets ?X {Crypt ?K ?Y}",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_hole 3),
               template_var 2))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 6, template_var 0),
             template_hole 1))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_hole 1)))),
    ("Anonymity.crypts_mpair_1",
     "crypts {\<lbrace>?X, ?Y\<rbrace>}
      <= insert \<lbrace>?X, ?Y\<rbrace> (crypts {?X} Un crypts {?Y})",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 0)),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1)))))),
    ("Anonymity.crypts_mpair_2",
     "insert \<lbrace>?X, ?Y\<rbrace> (crypts {?X} Un crypts {?Y})
      <= crypts {\<lbrace>?X, ?Y\<rbrace>}",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_hole 0))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_hole 0)))),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Anonymity.key_sets_msg_crypt",
     "key_sets_msg ?X (Crypt ?K ?Y) =
      (if ?X = Crypt ?K ?Y then {{}}
       else insert (InvKey ?K) ` key_sets_msg ?X ?Y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_app
                    (template_app (template_hole 10, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_hole 5)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_hole 0),
                     template_var 1))),
               template_app
                (template_app (template_hole 11, template_var 2),
                 template_var 0)))
           ))),
    ("Anonymity.parts_agent_start",
     "[| ?s \<turnstile> ?s'; Agent ?n : parts (used ?s');
         Agent ?n ~: parts (used ?s) |]
      ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 1)),
              template_hole 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 0)),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 0)),
                  template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 2)))
                )
            )],
       template_predicate (template_hole 0))),
    ("Anonymity.key_sets_crypt_1",
     "?X ~= Crypt ?K ?Y ==>
      key_sets ?X {Crypt ?K ?Y} <= insert (InvKey ?K) ` key_sets ?X {?Y}",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 2,
              template_app
               (template_app (template_hole 8, template_var 1),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 6, template_var 2),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_var 0)),
             template_hole 4)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 6, template_var 2),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 4)))))),
    ("Anonymity.log_spied_1",
     "[| ?s \<turnstile> ?s';
         Log ?X : parts (used ?s) --> Log ?X : spied ?s;
         Log ?X : parts (used ?s') |]
      ==> Log ?X : spied ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 1)),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, template_var 0)),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)))),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 0)),
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_hole 0))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 0)),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)))
           ))),
    ("Anonymity.idinfo_spied_1",
     "[| ?s \<turnstile> ?s';
         \<langle>?n, ?X\<rangle> : parts (used ?s) -->
         \<langle>?n, ?X\<rangle> : spied ?s;
         \<langle>?n, ?X\<rangle> : parts (used ?s') |]
      ==> \<langle>?n, ?X\<rangle> : spied ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2)),
              template_hole 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 1),
                      template_var 0)),
                  template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 3)))),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0)),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_hole 0))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)))
           ))),
    ("Anonymity.parts_agent",
     "[| s\<^sub>0 \<Turnstile> ?s; ?n ~: bad_agent |]
      ==> Agent ?n ~: parts (used ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 49,
                template_app
                 (template_app
                   (template_hole 48,
                    template_app
                     (template_app
                       (template_hole 47,
                        template_app
                         (template_app (template_hole 46, t_empty),
                          template_hole 38)),
                      template_app
                       (template_app
                         (template_hole 37,
                          template_app
                           (template_app
                             (template_hole 36, template_hole 35),
                            template_hole 34)),
                        t_empty))),
                  template_var 1)),
              template_app (template_hole 6, template_hole 5))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_hole 22)
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 23, template_var 0)),
                 template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 1)))
               )
           ))),
    ("Anonymity.log_spied",
     "[| s\<^sub>0 \<Turnstile> ?s; Log ?X : parts (used ?s) |]
      ==> Log ?X : spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 49,
                template_app
                 (template_app
                   (template_hole 48,
                    template_app
                     (template_app
                       (template_hole 47,
                        template_app
                         (template_app (template_hole 46, t_empty),
                          template_hole 38)),
                      template_app
                       (template_app
                         (template_hole 37,
                          template_app
                           (template_app
                             (template_hole 36, template_hole 35),
                            template_hole 34)),
                        t_empty))),
                  template_var 1)),
              template_app (template_hole 6, template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app
                (template_app (template_hole 36, template_hole 35),
                 template_hole 34)))
           ))),
    ("Anonymity.idinfo_spied",
     "[| s\<^sub>0 \<Turnstile> ?s;
         \<langle>?n, ?X\<rangle> : parts (used ?s) |]
      ==> \<langle>?n, ?X\<rangle> : spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 48,
                template_app
                 (template_app
                   (template_hole 47,
                    template_app
                     (template_app
                       (template_hole 46,
                        template_app
                         (template_app (template_hole 45, t_empty),
                          template_hole 37)),
                      template_app
                       (template_app
                         (template_hole 36,
                          template_app
                           (template_app
                             (template_hole 35, template_hole 34),
                            template_hole 33)),
                        t_empty))),
                  template_var 2)),
              template_app (template_hole 5, template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 15, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 15, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app (template_hole 35, template_hole 34),
                 template_hole 33)))
           ))),
    ("Anonymity.idinfo_msg",
     "[| s\<^sub>0 \<Turnstile> ?s; \<langle>?n, ?X\<rangle> : spied ?s |]
      ==> ?X : spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 46,
                template_app
                 (template_app
                   (template_hole 45,
                    template_app
                     (template_app
                       (template_hole 44,
                        template_app
                         (template_app (template_hole 43, t_empty),
                          template_hole 35)),
                      template_app
                       (template_app
                         (template_hole 34,
                          template_app
                           (template_app
                             (template_hole 33, template_hole 32),
                            template_hole 31)),
                        t_empty))),
                  template_var 2)),
              template_app (template_hole 3, template_hole 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 13, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_app
                 (template_app (template_hole 33, template_hole 32),
                  template_hole 31)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app (template_hole 33, template_hole 32),
                 template_hole 31)))
           ))),
    ("Anonymity.idinfo_mpair",
     "[| s\<^sub>0 \<Turnstile> ?s;
         \<langle>?n, \<lbrace>?X, ?Y\<rbrace>\<rangle> : spied ?s |]
      ==> key_sets \<lbrace>?X, ?Y\<rbrace> (crypts (Log -` spied ?s)) ~=
          {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 53,
                template_app
                 (template_app
                   (template_hole 52,
                    template_app
                     (template_app
                       (template_hole 51,
                        template_app
                         (template_app (template_hole 50, t_empty),
                          template_hole 42)),
                      template_app
                       (template_app
                         (template_hole 41,
                          template_app
                           (template_app
                             (template_hole 40, template_hole 39),
                            template_hole 38)),
                        t_empty))),
                  template_var 3)),
              template_app (template_hole 10, template_hole 9))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 20, template_var 2),
                  template_app
                   (template_app (template_hole 29, template_var 1),
                    template_var 0))),
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app (template_hole 40, template_hole 39),
                  template_hole 38)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 29, template_var 1),
                   template_var 0)),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_app
                      (template_app (template_hole 40, template_hole 39),
                       template_hole 38))))),
             template_hole 0)
           ))),
    ("Anonymity.idinfo_init",
     "[| s\<^sub>0 \<Turnstile> ?s;
         ?n ~: bad_id_password Un bad_id_pubkey Un bad_id_shakey |]
      ==> \<langle>?n, ?X\<rangle> ~: spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 48,
                template_app
                 (template_app
                   (template_hole 47,
                    template_app
                     (template_app
                       (template_hole 46,
                        template_app
                         (template_app (template_hole 45, t_empty),
                          template_hole 37)),
                      template_app
                       (template_app
                         (template_hole 36,
                          template_app
                           (template_app
                             (template_hole 35, template_hole 34),
                            template_hole 33)),
                        t_empty))),
                  template_var 2)),
              template_app (template_hole 5, template_hole 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_app
                   (template_app
                     (template_hole 12,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app
                             (template_hole 14, template_hole 13),
                            template_hole 19)),
                        template_app
                         (template_app
                           (template_hole 12,
                            template_app
                             (template_app
                               (template_hole 12, template_hole 21),
                              template_hole 11)),
                          template_app
                           (template_app
                             (template_hole 14, template_hole 10),
                            template_app
                             (template_app
                               (template_hole 9, template_hole 38),
                              template_hole 18))))),
                    template_app
                     (template_app (template_hole 14, template_hole 6),
                      template_app
                       (template_app (template_hole 9, template_hole 7),
                        template_hole 16))))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 15, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app (template_hole 35, template_hole 34),
                     template_hole 33)))
               )
           ))),
    ("Anonymity.idinfo_dec",
     "[| s\<^sub>0 \<Turnstile> ?s;
         ?s' = insert (Spy, ?X) ?s &
         (Spy, Crypt ?K ?X) : ?s & (Spy, Key (InvK ?K)) : ?s;
         \<langle>?n, ?Y\<rangle> = ?X |]
      ==> \<langle>?n, ?Y\<rangle> : spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 52,
                template_app
                 (template_app
                   (template_hole 51,
                    template_app
                     (template_app
                       (template_hole 50,
                        template_app
                         (template_app (template_hole 49, t_empty),
                          template_hole 41)),
                      template_app
                       (template_app
                         (template_hole 40,
                          template_app
                           (template_app
                             (template_hole 39, template_hole 38),
                            template_hole 37)),
                        t_empty))),
                  template_var 5)),
              template_app (template_hole 9, template_hole 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 48, template_hole 38),
                        template_var 3)),
                    template_var 5))),
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app
                       (template_app (template_hole 48, template_hole 38),
                        template_app
                         (template_app (template_hole 30, template_var 2),
                          template_var 3))),
                    template_var 5)),
                template_app
                 (template_app
                   (template_hole 4,
                    template_app
                     (template_app (template_hole 48, template_hole 38),
                      template_app
                       (template_hole 44,
                        template_app (template_hole 3, template_var 2)))),
                  template_var 5)))
            ),
        template_equation
         (template_app
           (template_app (template_hole 19, template_var 1),
            template_var 0),
          template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 19, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 5),
               template_app
                (template_app (template_hole 39, template_hole 38),
                 template_hole 37)))
           ))),
    ("Anonymity.idinfo_sep",
     "[| s\<^sub>0 \<Turnstile> ?s;
         ?s' = insert (Spy, ?X) (insert (Spy, ?Y) ?s) &
         (Spy, \<lbrace>?X, ?Y\<rbrace>) : ?s;
         \<langle>?n, ?Z\<rangle> = ?X | \<langle>?n, ?Z\<rangle> = ?Y |]
      ==> \<langle>?n, ?Z\<rangle> : spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 52,
                template_app
                 (template_app
                   (template_hole 51,
                    template_app
                     (template_app
                       (template_hole 50,
                        template_app
                         (template_app (template_hole 49, t_empty),
                          template_hole 41)),
                      template_app
                       (template_app
                         (template_hole 40,
                          template_app
                           (template_app
                             (template_hole 39, template_hole 38),
                            template_hole 37)),
                        t_empty))),
                  template_var 5)),
              template_app (template_hole 9, template_hole 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_app
                     (template_hole 5,
                      template_app
                       (template_app (template_hole 48, template_hole 38),
                        template_var 3)),
                    template_app
                     (template_app
                       (template_hole 5,
                        template_app
                         (template_app (template_hole 48, template_hole 38),
                          template_var 2)),
                      template_var 5)))),
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 48, template_hole 38),
                    template_app
                     (template_app (template_hole 28, template_var 3),
                      template_var 2))),
                template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app
                     (template_app (template_hole 19, template_var 1),
                      template_var 0)),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 19, template_var 1),
                    template_var 0)),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 19, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 5),
               template_app
                (template_app (template_hole 39, template_hole 38),
                 template_hole 37)))
           ))),
    ("Anonymity.idinfo_msg_1",
     "[| s\<^sub>0 \<Turnstile> ?s; ?s \<turnstile> ?s';
         \<langle>?n, ?X\<rangle> : spied ?s --> ?X : spied ?s;
         \<langle>?n, ?X\<rangle> : spied ?s' |]
      ==> ?X : spied ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 47,
                template_app
                 (template_app
                   (template_hole 46,
                    template_app
                     (template_app
                       (template_hole 45,
                        template_app
                         (template_app (template_hole 44, t_empty),
                          template_hole 36)),
                      template_app
                       (template_app
                         (template_hole 35,
                          template_app
                           (template_app
                             (template_hole 34, template_hole 33),
                            template_hole 32)),
                        t_empty))),
                  template_var 3)),
              template_app (template_hole 4, template_hole 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 47,
                template_app
                 (template_app (template_hole 46, template_var 3),
                  template_var 2)),
              template_hole 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app
                   (template_hole 1,
                    template_app
                     (template_app (template_hole 14, template_var 1),
                      template_var 0)),
                  template_app
                   (template_app (template_hole 0, template_var 3),
                    template_app
                     (template_app (template_hole 34, template_hole 33),
                      template_hole 32)))),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_app
                 (template_app (template_hole 0, template_var 3),
                  template_app
                   (template_app (template_hole 34, template_hole 33),
                    template_hole 32))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 0, template_var 2),
                template_app
                 (template_app (template_hole 34, template_hole 33),
                  template_hole 32)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_app
                (template_app (template_hole 34, template_hole 33),
                 template_hole 32)))
           ))),
    ("Anonymity.log_dec",
     "[| s\<^sub>0 \<Turnstile> ?s;
         ?s' = insert (Spy, ?X) ?s &
         (Spy, Crypt ?K ?X) : ?s & (Spy, Key (InvK ?K)) : ?s |]
      ==> key_sets ?Y (crypts {Y. Log Y = ?X})
          <= key_sets ?Y (crypts (Log -` spied ?s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 57,
                template_app
                 (template_app
                   (template_hole 56,
                    template_app
                     (template_app
                       (template_hole 55,
                        template_app
                         (template_app (template_hole 54, t_empty),
                          template_hole 46)),
                      template_app
                       (template_app
                         (template_hole 45,
                          template_app
                           (template_app
                             (template_hole 44, template_hole 43),
                            template_hole 42)),
                        t_empty))),
                  template_var 4)),
              template_app (template_hole 14, template_hole 13))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 53, template_hole 43),
                        template_var 2)),
                    template_var 4))),
              template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 53, template_hole 43),
                        template_app
                         (template_app (template_hole 35, template_var 1),
                          template_var 2))),
                    template_var 4)),
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 53, template_hole 43),
                      template_app
                       (template_hole 49,
                        template_app (template_hole 8, template_var 1)))),
                  template_var 4)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 5, template_app (template_hole 4, t_empty))),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_hole 2),
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_app
                  (template_app (template_hole 44, template_hole 43),
                   template_hole 42)))))))),
    ("Anonymity.pwd_anonymous",
     "[| s\<^sub>0 \<Turnstile> ?s; ?n ~: bad_id_password;
         ?n ~: bad_shakey Int (bad_pwd Un bad_prikey) Int
               (bad_id_pubkey Un bad_id_shak) |]
      ==> \<langle>?n, Pwd ?n\<rangle> ~: spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 48,
                template_app
                 (template_app
                   (template_hole 47,
                    template_app
                     (template_app
                       (template_hole 46,
                        template_app
                         (template_app (template_hole 45, t_empty),
                          template_hole 37)),
                      template_app
                       (template_app
                         (template_hole 36,
                          template_app
                           (template_app
                             (template_hole 35, template_hole 34),
                            template_hole 33)),
                        t_empty))),
                  template_var 1)),
              template_app (template_hole 5, template_hole 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app
                   (template_app (template_hole 14, template_hole 13),
                    template_hole 19))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app
                         (template_hole 14,
                          template_app
                           (template_app (template_hole 9, template_hole 7),
                            template_hole 16)),
                        template_app
                         (template_app (template_hole 12, template_hole 19),
                          template_app
                           (template_app
                             (template_hole 9, template_hole 38),
                            template_hole 18)))),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app
                           (template_hole 12,
                            template_app
                             (template_app
                               (template_hole 12, template_hole 21),
                              template_hole 11)),
                          template_app
                           (template_app
                             (template_hole 14, template_hole 10),
                            template_app
                             (template_app
                               (template_hole 9, template_hole 38),
                              template_hole 18)))),
                      template_hole 6)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 15, template_var 0),
                     template_app (template_hole 20, template_var 0))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app
                    (template_app (template_hole 35, template_hole 34),
                     template_hole 33)))
               )
           ))),
    ("Anonymity.key_sets_pwd_empty",
     "s\<^sub>0 \<Turnstile> ?s ==>
      key_sets (Hash (Pwd ?n)) (crypts (Log -` spied ?s)) = {} &
      key_sets \<lbrace>Pwd ?n, ?X\<rbrace> (crypts (Log -` spied ?s)) =
      {} &
      key_sets \<lbrace>?X, Pwd ?n\<rbrace> (crypts (Log -` spied ?s)) =
      {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 52,
                template_app
                 (template_app
                   (template_hole 51,
                    template_app
                     (template_app
                       (template_hole 50,
                        template_app
                         (template_app (template_hole 49, t_empty),
                          template_hole 41)),
                      template_app
                       (template_app
                         (template_hole 40,
                          template_app
                           (template_app
                             (template_hole 39, template_hole 38),
                            template_hole 37)),
                        t_empty))),
                  template_var 2)),
              template_app (template_hole 9, template_hole 8))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 27,
                         template_app (template_hole 24, template_var 1))),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_hole 2),
                         template_app
                          (template_app (template_hole 1, template_var 2),
                           template_app
                            (template_app
                              (template_hole 39, template_hole 38),
                             template_hole 37)))))),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_app
                            (template_hole 28,
                             template_app
                              (template_hole 24, template_var 1)),
                           template_var 0)),
                       template_app
                        (template_hole 4,
                         template_app
                          (template_app (template_hole 3, template_hole 2),
                           template_app
                            (template_app (template_hole 1, template_var 2),
                             template_app
                              (template_app
                                (template_hole 39, template_hole 38),
                               template_hole 37)))))),
                   template_hole 0)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 28, template_var 0),
                         template_app (template_hole 24, template_var 1))),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_app (template_hole 3, template_hole 2),
                         template_app
                          (template_app (template_hole 1, template_var 2),
                           template_app
                            (template_app
                              (template_hole 39, template_hole 38),
                             template_hole 37)))))),
                 template_hole 0)))
           ))),
    ("Anonymity.auth_shakey_anonymous",
     "[| s\<^sub>0 \<Turnstile> ?s; ?n ~: bad_id_shakey;
         ?n ~: bad_shakey Int (bad_id_password Un bad_id_pubkey) |]
      ==> \<langle>?n, Key (Auth_ShaKey ?n)\<rangle> ~: spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 48,
                template_app
                 (template_app
                   (template_hole 47,
                    template_app
                     (template_app
                       (template_hole 46,
                        template_app
                         (template_app (template_hole 45, t_empty),
                          template_hole 37)),
                      template_app
                       (template_app
                         (template_hole 36,
                          template_app
                           (template_app
                             (template_hole 35, template_hole 34),
                            template_hole 33)),
                        t_empty))),
                  template_var 1)),
              template_app (template_hole 5, template_hole 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app
                   (template_app (template_hole 14, template_hole 6),
                    template_app
                     (template_app (template_hole 9, template_hole 7),
                      template_hole 16)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app (template_hole 9, template_hole 7),
                        template_hole 16)),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app (template_hole 14, template_hole 13),
                          template_hole 19)),
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app
                             (template_hole 12, template_hole 21),
                            template_hole 11)),
                        template_app
                         (template_app (template_hole 14, template_hole 10),
                          template_app
                           (template_app
                             (template_hole 9, template_hole 38),
                            template_hole 18))))))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 15, template_var 0),
                     template_app
                      (template_hole 40,
                       template_app
                        (template_app
                          (template_app (template_hole 8, template_hole 17),
                           template_hole 7),
                         template_var 0)))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app
                    (template_app (template_hole 35, template_hole 34),
                     template_hole 33)))
               )
           ))),
    ("Anonymity.key_sets_pwd_seskey",
     "[| s\<^sub>0 \<Turnstile> ?s;
         ?U : key_sets (Pwd ?n) (crypts (Log -` spied ?s)) |]
      ==> EX SK.
             ?U = {SesKey SK} &
             ((Owner ?n, Crypt (SesK SK) (Pwd ?n)) : ?s |
              (Asset ?n, Crypt (SesK SK) (Num 0)) : ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 60,
                template_app
                 (template_app
                   (template_hole 59,
                    template_app
                     (template_app
                       (template_hole 58,
                        template_app
                         (template_app (template_hole 57, t_empty),
                          template_hole 49)),
                      template_app
                       (template_app
                         (template_hole 48,
                          template_app
                           (template_app
                             (template_hole 47, template_hole 46),
                            template_hole 45)),
                        t_empty))),
                  template_var 2)),
              template_app (template_hole 17, template_hole 16))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 32, template_var 0)),
                template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 12, template_hole 11),
                    template_app
                     (template_app (template_hole 10, template_var 2),
                      template_app
                       (template_app (template_hole 47, template_hole 46),
                        template_hole 45))))))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Anonymity.auth_prikey_anonymous",
     "[| s\<^sub>0 \<Turnstile> ?s; ?n ~: bad_id_prikey;
         ?n ~: bad_shakey Int bad_prikey Int
               (bad_id_password Un bad_id_shak) |]
      ==> \<langle>?n, Auth_PriKey ?n\<rangle> ~: spied ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 48,
                template_app
                 (template_app
                   (template_hole 47,
                    template_app
                     (template_app
                       (template_hole 46,
                        template_app
                         (template_app (template_hole 45, t_empty),
                          template_hole 37)),
                      template_app
                       (template_app
                         (template_hole 36,
                          template_app
                           (template_app
                             (template_hole 35, template_hole 34),
                            template_hole 33)),
                        t_empty))),
                  template_var 1)),
              template_app (template_hole 5, template_hole 4))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app
                         (template_hole 12,
                          template_app
                           (template_app
                             (template_hole 12, template_hole 21),
                            template_hole 11)),
                        template_hole 10)),
                    template_app
                     (template_app (template_hole 9, template_hole 38),
                      template_hole 18)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app
                         (template_hole 14,
                          template_app
                           (template_app (template_hole 9, template_hole 7),
                            template_hole 16)),
                        template_app
                         (template_app (template_hole 9, template_hole 38),
                          template_hole 18))),
                    template_app
                     (template_app
                       (template_hole 12,
                        template_app
                         (template_app (template_hole 14, template_hole 13),
                          template_hole 19)),
                      template_hole 6)))
                )
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 15, template_var 0),
                     template_app
                      (template_app
                        (template_app
                          (template_hole 42,
                           template_app
                            (template_app
                              (template_hole 41, template_hole 40),
                             template_hole 39)),
                         template_hole 38),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_app
                    (template_app (template_hole 35, template_hole 34),
                     template_hole 33)))
               )
           ))),
    ("Anonymity.pwd_anonymous_1",
     "[| s\<^sub>0 \<Turnstile> ?s; ?n ~: bad_id_password;
         \<langle>?n, Pwd ?n\<rangle> : spied ?s |]
      ==> EX SK.
             SesKey SK : spied ?s &
             ((Owner ?n, Crypt (SesK SK) (Pwd ?n)) : ?s |
              (Asset ?n, Crypt (SesK SK) (Num 0)) : ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 56,
                template_app
                 (template_app
                   (template_hole 55,
                    template_app
                     (template_app
                       (template_hole 54,
                        template_app
                         (template_app (template_hole 53, t_empty),
                          template_hole 45)),
                      template_app
                       (template_app
                         (template_hole 44,
                          template_app
                           (template_app
                             (template_hole 43, template_hole 42),
                            template_hole 41)),
                        t_empty))),
                  template_var 1)),
              template_app (template_hole 13, template_hole 12))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 0),
                  template_app
                   (template_app (template_hole 22, template_hole 21),
                    template_hole 27))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 23, template_var 0),
                  template_app (template_hole 28, template_var 0))),
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 43, template_hole 42),
                  template_hole 41)))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Anonymity.idinfo_init_1",
     "[| s\<^sub>0 \<Turnstile> ?s; ?s \<turnstile> ?s';
         ?n ~: bad_id_password Un bad_id_pubkey Un bad_id_shakey;
         !!X. \<langle>?n, X\<rangle> ~: spied ?s |]
      ==> \<langle>?n, ?X\<rangle> ~: spied ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 49,
                template_app
                 (template_app
                   (template_hole 48,
                    template_app
                     (template_app
                       (template_hole 47,
                        template_app
                         (template_app (template_hole 46, t_empty),
                          template_hole 38)),
                      template_app
                       (template_app
                         (template_hole 37,
                          template_app
                           (template_app
                             (template_hole 36, template_hole 35),
                            template_hole 34)),
                        t_empty))),
                  template_var 3)),
              template_app (template_hole 6, template_hole 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 49,
                template_app
                 (template_app (template_hole 48, template_var 3),
                  template_var 2)),
              template_hole 5)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_hole 13,
                          template_app
                           (template_app
                             (template_hole 15, template_hole 14),
                            template_hole 20)),
                        template_app
                         (template_app
                           (template_hole 13,
                            template_app
                             (template_app
                               (template_hole 13, template_hole 22),
                              template_hole 12)),
                          template_app
                           (template_app
                             (template_hole 15, template_hole 11),
                            template_app
                             (template_app
                               (template_hole 10, template_hole 39),
                              template_hole 19))))),
                    template_app
                     (template_app (template_hole 15, template_hole 7),
                      template_app
                       (template_app (template_hole 10, template_hole 8),
                        template_hole 17))))
                )
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 16, template_var 1),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app (template_hole 36, template_hole 35),
                     template_hole 34)))
               )
           ))),
    ("Anonymity.log_sep",
     "[| s\<^sub>0 \<Turnstile> ?s;
         ?s' = insert (Spy, ?X) (insert (Spy, ?Y) ?s) &
         (Spy, \<lbrace>?X, ?Y\<rbrace>) : ?s |]
      ==> key_sets ?Z (crypts {Z. Log Z = ?X})
          <= key_sets ?Z (crypts (Log -` spied ?s)) &
          key_sets ?Z (crypts {Z. Log Z = ?Y})
          <= key_sets ?Z (crypts (Log -` spied ?s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 56,
                template_app
                 (template_app
                   (template_hole 55,
                    template_app
                     (template_app
                       (template_hole 54,
                        template_app
                         (template_app (template_hole 53, t_empty),
                          template_hole 45)),
                      template_app
                       (template_app
                         (template_hole 44,
                          template_app
                           (template_app
                             (template_hole 43, template_hole 42),
                            template_hole 41)),
                        t_empty))),
                  template_var 4)),
              template_app (template_hole 13, template_hole 12))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 52, template_hole 42),
                        template_var 2)),
                    template_app
                     (template_app
                       (template_hole 9,
                        template_app
                         (template_app (template_hole 52, template_hole 42),
                          template_var 1)),
                      template_var 4)))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 52, template_hole 42),
                    template_app
                     (template_app (template_hole 32, template_var 2),
                      template_var 1))),
                template_var 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 0),
                     template_app
                      (template_hole 5,
                       template_app (template_hole 4, t_empty)))),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 1, template_hole 2),
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_app
                          (template_app
                            (template_hole 43, template_hole 42),
                           template_hole 41))))))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, t_empty)))),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 1, template_hole 2),
                     template_app
                      (template_app (template_hole 0, template_var 4),
                       template_app
                        (template_app (template_hole 43, template_hole 42),
                         template_hole 41)))))))
           ))),
    ("Anonymity.idinfo_pwd",
     "[| s\<^sub>0 \<Turnstile> ?s;
         EX X. \<langle>?n, X\<rangle> : spied ?s & X ~= Pwd ?n;
         ?n ~: bad_id_pubkey Un bad_id_shakey |]
      ==> EX SK.
             SesKey SK : spied ?s &
             ((Owner ?n, Crypt (SesK SK) (Pwd ?n)) : ?s |
              (Asset ?n, Crypt (SesK SK) (Num 0)) : ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 58,
                template_app
                 (template_app
                   (template_hole 57,
                    template_app
                     (template_app
                       (template_hole 56,
                        template_app
                         (template_app (template_hole 55, t_empty),
                          template_hole 47)),
                      template_app
                       (template_app
                         (template_hole 46,
                          template_app
                           (template_app
                             (template_hole 45, template_hole 44),
                            template_hole 43)),
                        t_empty))),
                  template_var 1)),
              template_app (template_hole 15, template_hole 14))
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 0),
                  template_app
                   (template_app
                     (template_hole 22,
                      template_app
                       (template_app
                         (template_hole 22,
                          template_app
                           (template_app
                             (template_hole 22, template_hole 31),
                            template_hole 21)),
                        template_app
                         (template_app (template_hole 24, template_hole 20),
                          template_app
                           (template_app
                             (template_hole 19, template_hole 48),
                            template_hole 28)))),
                    template_app
                     (template_app (template_hole 24, template_hole 16),
                      template_app
                       (template_app (template_hole 19, template_hole 17),
                        template_hole 26))))
                )
            )],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Anonymity.idinfo_pwd_start",
     "[| s\<^sub>0 \<Turnstile> ?s; ?n ~: bad_agent; ?s \<turnstile> ?s';
         EX X. \<langle>?n, X\<rangle> : spied ?s' & X ~= Pwd ?n;
         \<nexists>X. \<langle>?n, X\<rangle> : spied ?s & X ~= Pwd ?n |]
      ==> EX SK.
             SesKey SK : spied ?s &
             ((Owner ?n, Crypt (SesK SK) (Pwd ?n)) : ?s |
              (Asset ?n, Crypt (SesK SK) (Num 0)) : ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 58,
                template_app
                 (template_app
                   (template_hole 57,
                    template_app
                     (template_app
                       (template_hole 56,
                        template_app
                         (template_app (template_hole 55, t_empty),
                          template_hole 47)),
                      template_app
                       (template_app
                         (template_hole 46,
                          template_app
                           (template_app
                             (template_hole 45, template_hole 44),
                            template_hole 43)),
                        t_empty))),
                  template_var 2)),
              template_app (template_hole 15, template_hole 14))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_hole 31)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 58,
                template_app
                 (template_app (template_hole 57, template_var 2),
                  template_var 0)),
              template_hole 14)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_negation
         (template_predicate (template_app (template_hole 11, t_empty)))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Anonymity.idinfo_mpair_1",
     "[| (?s, ?s')
         : rel_id_hash Un rel_id_crypt Un rel_id_sep Un rel_id_con;
         !!X Y.
            \<langle>?n, \<lbrace>X, Y\<rbrace>\<rangle> : spied ?s ==>
            key_sets \<lbrace>X, Y\<rbrace> (crypts (Log -` spied ?s)) ~=
            {};
         \<langle>?n, \<lbrace>?X, ?Y\<rbrace>\<rangle> : spied ?s' |]
      ==> key_sets \<lbrace>?X, ?Y\<rbrace> (crypts (Log -` spied ?s')) ~=
          {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 38,
                template_app
                 (template_app (template_hole 37, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 36,
                  template_app
                   (template_app
                     (template_hole 36,
                      template_app
                       (template_app
                         (template_hole 36,
                          template_app (template_hole 35, t_empty)),
                        template_app (template_hole 35, t_empty))),
                    template_app (template_hole 35, t_empty))),
                template_app (template_hole 35, t_empty)))
            ),
        template_predicate (template_app (template_hole 3, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 21, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))),
              template_app
               (template_app (template_hole 16, template_var 3),
                template_app
                 (template_app (template_hole 25, template_hole 24),
                  template_hole 23)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0)),
               template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app
                    (template_app (template_hole 16, template_var 3),
                     template_app
                      (template_app (template_hole 25, template_hole 24),
                       template_hole 23))))),
             template_hole 0)
           ))),
    ("Anonymity.idinfo_mpair_2",
     "[| s\<^sub>0 \<Turnstile> ?s; ?s \<turnstile> ?s';
         (?s, ?s')
         ~: rel_id_hash Un rel_id_crypt Un rel_id_sep Un rel_id_con;
         !!X Y.
            \<langle>?n, \<lbrace>X, Y\<rbrace>\<rangle> : spied ?s ==>
            key_sets \<lbrace>X, Y\<rbrace> (crypts (Log -` spied ?s)) ~=
            {};
         \<langle>?n, \<lbrace>?X, ?Y\<rbrace>\<rangle> : spied ?s' |]
      ==> key_sets \<lbrace>?X, ?Y\<rbrace> (crypts (Log -` spied ?s')) ~=
          {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 70,
                template_app
                 (template_app
                   (template_hole 69,
                    template_app
                     (template_app
                       (template_hole 68,
                        template_app
                         (template_app (template_hole 67, t_empty),
                          template_hole 59)),
                      template_app
                       (template_app
                         (template_hole 58,
                          template_app
                           (template_app
                             (template_hole 57, template_hole 56),
                            template_hole 55)),
                        t_empty))),
                  template_var 4)),
              template_app (template_hole 27, template_hole 26))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 70,
                template_app
                 (template_app (template_hole 69, template_var 4),
                  template_var 3)),
              template_hole 26)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 70,
                    template_app
                     (template_app (template_hole 69, template_var 4),
                      template_var 3)),
                  template_app
                   (template_app
                     (template_hole 24,
                      template_app
                       (template_app
                         (template_hole 24,
                          template_app
                           (template_app
                             (template_hole 24,
                              template_app (template_hole 23, t_empty)),
                            template_app (template_hole 23, t_empty))),
                        template_app (template_hole 23, t_empty))),
                    template_app (template_hole 23, t_empty)))
                )
            ),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 37, template_var 2),
                  template_app
                   (template_app (template_hole 46, template_var 1),
                    template_var 0))),
              template_app
               (template_app (template_hole 13, template_var 3),
                template_app
                 (template_app (template_hole 57, template_hole 56),
                  template_hole 55)))
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 46, template_var 1),
                   template_var 0)),
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_app (template_hole 13, template_var 3),
                     template_app
                      (template_app (template_hole 57, template_hole 56),
                       template_hole 55))))),
             template_hole 0)
           )))]:
   (string * thm * template) list
### theory "Draft.AnonymityMoreTemplates"
### 0.432s elapsed time, 0.557s cpu time, 0.035s GC time
val it = (): unit
