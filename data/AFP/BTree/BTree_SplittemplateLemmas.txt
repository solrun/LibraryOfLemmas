   [("BTree_Split.linear_split_append",
     "linear_split_help ?xs ?p ?ys = (?ls, ?rs) ==> ?ls @ ?rs = ?ys @ ?xs",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 3, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 4)))),
    ("BTree_Split.some_child_sm",
     "linear_split_help ?t ?y ?xs = (?ls, (?sub, ?sep) # ?rs) ==>
      ?y <= ?sep",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 4, template_var 6),
              template_var 5),
            template_var 4),
          template_app
           (template_app (template_hole 3, template_var 3),
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)))],
       template_inequation (less_equals, template_var 5, template_var 1))),
    ("BTree_Split.linear_split_alt",
     "linear_split ?xs ?x =
      (takeWhile (%(uu_, s). s < ?x) ?xs,
       dropWhile (%(uu_, s). s < ?x) ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0, template_app (template_hole 2, t_empty)),
           template_var 1)))),
    ("BTree_Split.linear_split_req",
     "[| linear_split ?xs ?p = (?ls, (?sub, ?sep) # ?rs);
         sorted_less (separators ?xs) |]
      ==> ?p <= ?sep",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 5), template_var 4),
          template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_var 0))),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 5))
            )],
       template_inequation (less_equals, template_var 4, template_var 1))),
    ("BTree_Split.linear_split_req2",
     "[| linear_split ?xs ?p = (?ls @ [(?sub, ?sep)], ?rs);
         sorted_less (separators ?xs) |]
      ==> ?sep < ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 5), template_var 4),
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 3),
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_var 1)),
                  template_hole 4))),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app
               (template_app (template_hole 1, template_hole 0),
                template_var 5))
            )],
       template_inequation (less_than, template_var 1, template_var 4))),
    ("BTree_Split.linear_split_sm",
     "[| linear_split_help ?xs ?p ?ys = (?ls, ?rs);
         sorted_less (separators (?ys @ ?xs));
         ALL sep:set (separators ?ys). sep < ?p |]
      ==> ALL sep:set (separators ?ls). sep < ?p",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 8, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 7, template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_hole 0,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 2))),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 1))),
             t_empty)
           ))),
    ("BTree_Split.linear_split_gr",
     "[| linear_split_help ?xs ?p ?ys = (?ls, ?rs);
         sorted_less (separators (?ys @ ?xs));
         ALL (sub, sep):set ?ys. sep < ?p |]
      ==> case ?rs of [] => True | (x, sep) # xa => ?p <= sep",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app (template_hole 12, template_var 4),
              template_var 3),
            template_var 2),
          template_app
           (template_app (template_hole 11, template_var 1),
            template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_app
                 (template_app (template_hole 6, template_var 2),
                  template_var 4)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              template_app (template_hole 3, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1), t_empty),
             template_var 0)
           )))]
