Loading theory "HOL-Eisbach.Eisbach" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Assertions" via "Automatic_Refinement.Misc")
Loading theory "HOL-Library.Adhoc_Overloading" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Run" via "HOL-Imperative_HOL.Imperative_HOL" via "HOL-Imperative_HOL.Array" via "HOL-Imperative_HOL.Heap_Monad" via "HOL-Library.Monad_Syntax")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Assertions" via "Automatic_Refinement.Misc" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "HOL-Library.Code_Target_Numeral" via "HOL-Library.Code_Target_Nat")
signature PARSE_TOOLS =
  sig
    val is_real_val: ('a, 'b) parse_val -> bool
    val name_term: (term, string) parse_val parser
    val parse_term_val: 'a parser -> (term, 'a) parse_val parser
    val parse_thm_val: 'a parser -> (thm, 'a) parse_val parser
    datatype ('a, 'b) parse_val
    = Parse_Val of 'b * ('a -> unit) | Real_Val of 'a
    val parse_val_cases:
       ('a -> 'b) -> ('b, 'a) parse_val -> 'b * ('b -> unit)
    val the_parse_fun: ('a, 'b) parse_val -> 'a -> unit
    val the_parse_val: ('a, 'b) parse_val -> 'b
    val the_real_val: ('a, 'b) parse_val -> 'a
  end
structure Parse_Tools: PARSE_TOOLS
### theory "HOL-Library.Code_Abstract_Nat"
### 0.062s elapsed time, 0.245s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "HOL-Library.Code_Target_Numeral")
signature METHOD_CLOSURE =
  sig
    val apply_method:
       Proof.context ->
         string ->
           term list ->
             thm list list ->
               (Proof.context -> Method.method) list ->
                 Proof.context -> thm list -> context_tactic
    val method:
       binding ->
         (binding * typ option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
    val method_cmd:
       binding ->
         (binding * string option * mixfix) list ->
           binding list ->
             binding list ->
               binding list ->
                 Token.src -> local_theory -> string * local_theory
  end
structure Method_Closure: METHOD_CLOSURE
signature ADHOC_OVERLOADING =
  sig
    val generic_add_overloaded: string -> Context.generic -> Context.generic
    val generic_add_variant:
       string -> term -> Context.generic -> Context.generic
    val generic_remove_overloaded:
       string -> Context.generic -> Context.generic
    val generic_remove_variant:
       string -> term -> Context.generic -> Context.generic
    val is_overloaded: Proof.context -> string -> bool
    val show_variants: bool Config.T
  end
structure Adhoc_Overloading: ADHOC_OVERLOADING
### theory "HOL-Library.Adhoc_Overloading"
### 0.115s elapsed time, 0.446s cpu time, 0.022s GC time
Loading theory "HOL-Library.Monad_Syntax" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Run" via "HOL-Imperative_HOL.Imperative_HOL" via "HOL-Imperative_HOL.Array" via "HOL-Imperative_HOL.Heap_Monad")
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
structure Eisbach_Rule_Insts: sig end
### theory "HOL-Library.Monad_Syntax"
### 0.042s elapsed time, 0.164s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Int" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "HOL-Library.Code_Target_Numeral")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
### theory "HOL-Library.Code_Target_Nat"
### 0.130s elapsed time, 0.511s cpu time, 0.022s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Code generator: dropping subsumed code equation
### 1 == Int.Pos num.One
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Neg ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m + Int.Pos ?n == Int.sub ?n ?m
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Neg ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### Int.Pos ?m + Int.Pos ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### 0 + ?l == ?l
### Code generator: dropping subsumed code equation
### ?k + 0 == ?k
### Code generator: dropping subsumed code equation
### - Int.Neg ?m == Int.Pos ?m
### Code generator: dropping subsumed code equation
### - Int.Pos ?m == Int.Neg ?m
### Code generator: dropping subsumed code equation
### - 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Neg ?n == Int.sub ?n ?m
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Code generator: dropping subsumed code equation
### Int.Neg ?m - Int.Pos ?n == Int.Neg (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Neg ?n == Int.Pos (?m + ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m - Int.Pos ?n == Int.sub ?m ?n
### Code generator: dropping subsumed code equation
### 0 - ?l == - ?l
### Code generator: dropping subsumed code equation
### ?k - 0 == ?k
### Code generator: dropping subsumed code equation
### Int.dup (Int.Neg ?n) == Int.Neg (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup (Int.Pos ?n) == Int.Pos (num.Bit0 ?n)
### Code generator: dropping subsumed code equation
### Int.dup 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Neg ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m * Int.Pos ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Neg ?n == Int.Neg (?m * ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m * Int.Pos ?n == Int.Pos (?m * ?n)
### Code generator: dropping subsumed code equation
### 0 * ?l == 0
### Code generator: dropping subsumed code equation
### ?k * 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Neg ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Neg ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Neg ?m div Int.Pos ?n == - Divides.adjust_div (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m div Int.Pos ?n == fst (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k div Int.Neg num.One == - ?k
### Code generator: dropping subsumed code equation
### ?k div Int.Pos num.One == ?k
### Code generator: dropping subsumed code equation
### 0 div ?k == 0
### Code generator: dropping subsumed code equation
### ?k div 0 == 0
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Neg ?n == - snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Neg ?n ==
### - Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Neg ?m mod Int.Pos ?n ==
### Divides.adjust_mod (Int.Pos ?n) (snd (divmod ?m ?n))
### Code generator: dropping subsumed code equation
### Int.Pos ?m mod Int.Pos ?n == snd (divmod ?m ?n)
### Code generator: dropping subsumed code equation
### ?k mod Int.Neg num.One == 0
### Code generator: dropping subsumed code equation
### ?k mod Int.Pos num.One == 0
### Code generator: dropping subsumed code equation
### 0 mod ?k == 0
### Code generator: dropping subsumed code equation
### ?k mod 0 == ?k
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### equal_class.equal ?k ?k == True
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Neg ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Neg ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) (Int.Pos ?l) == equal_class.equal ?k ?l
### Code generator: dropping subsumed code equation
### equal_class.equal (Int.Pos ?k) 0 == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Neg ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 (Int.Pos ?l) == False
### Code generator: dropping subsumed code equation
### equal_class.equal 0 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Neg ?l == ?l <= ?k
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= Int.Pos ?l == ?k <= ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k <= 0 == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 <= Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 <= 0 == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Neg ?l == ?l < ?k
### Code generator: dropping subsumed code equation
### Int.Neg ?k < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### Int.Neg ?k < 0 == True
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### Int.Pos ?k < Int.Pos ?l == ?k < ?l
### Code generator: dropping subsumed code equation
### Int.Pos ?k < 0 == False
### Code generator: dropping subsumed code equation
### 0 < Int.Neg ?l == False
### Code generator: dropping subsumed code equation
### 0 < Int.Pos ?l == True
### Code generator: dropping subsumed code equation
### 0 < 0 == False
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### of_int (Int.Pos ?k) == numeral ?k
### Code generator: dropping subsumed code equation
### of_int 0 == 0::?'a
### Code generator: dropping subsumed code equation
### of_int (Int.Neg ?k) == - numeral ?k
### Code generator: dropping subsumed code equation
### nat (Int.Pos ?k) == nat_of_num ?k
### Code generator: dropping subsumed code equation
### nat 0 == 0
### Code generator: dropping subsumed code equation
### nat (Int.Neg ?k) == 0
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.490s cpu time, 0.043s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Assertions" via "Automatic_Refinement.Misc")
### theory "HOL-Library.Code_Target_Int"
### 0.170s elapsed time, 0.662s cpu time, 0.043s GC time
Loading theory "HOL-Library.Code_Target_Numeral" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit")
### ML warning (line 170 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 187 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
### ML warning (line 309 of "~~/src/HOL/Eisbach/match_method.ML"):
### Pattern is not exhaustive.
signature MATCH_METHOD =
  sig
    val focus_params: Proof.context -> term list
    val focus_schematics: Proof.context -> Envir.tenv
  end
structure Match_Method: MATCH_METHOD
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
val method_evaluate = fn: Method.text -> Proof.context -> thm list -> tactic
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Eisbach.Eisbach"
### 0.418s elapsed time, 1.644s cpu time, 0.064s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.Code_Target_Numeral"
### 0.121s elapsed time, 0.478s cpu time, 0.052s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Run" via "HOL-Imperative_HOL.Imperative_HOL" via "HOL-Imperative_HOL.Array" via "HOL-Imperative_HOL.Heap_Monad" via "HOL-Imperative_HOL.Heap" via "HOL-Library.Countable")
consts
  enumerate :: "'a set => nat => 'a"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.493s elapsed time, 1.967s cpu time, 0.117s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Assertions" via "Automatic_Refinement.Misc")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Infinite_Set"
### 0.280s elapsed time, 1.136s cpu time, 0.139s GC time
Loading theory "HOL-Library.Option_ord" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Assertions" via "Automatic_Refinement.Misc")
instantiation
  option :: (preorder) preorder
  less_eq_option == less_eq :: 'a option => 'a option => bool
  less_option == less :: 'a option => 'a option => bool
Found termination order: "size_list size <*mlex*> {}"
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  option :: (order) order_bot
  bot_option == bot :: 'a option
instantiation
  option :: (order_top) order_top
  top_option == top :: 'a option
instantiation
  option :: (inf) inf
  inf_option == inf :: 'a option => 'a option => 'a option
instantiation
  option :: (sup) sup
  sup_option == sup :: 'a option => 'a option => 'a option
instantiation
  option :: (complete_lattice) complete_lattice
  Inf_option == Inf :: 'a option set => 'a option
  Sup_option == Sup :: 'a option set => 'a option
### theory "HOL-Library.Nat_Bijection"
### 0.359s elapsed time, 1.446s cpu time, 0.212s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.416s elapsed time, 1.662s cpu time, 0.159s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "HOL-Library.Option_ord"
### 0.471s elapsed time, 1.735s cpu time, 0.554s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Set_Algebras"
### 0.238s elapsed time, 0.944s cpu time, 0.049s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Run" via "HOL-Imperative_HOL.Imperative_HOL" via "HOL-Imperative_HOL.Array" via "HOL-Imperative_HOL.Heap_Monad" via "HOL-Imperative_HOL.Heap")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### Additional type variable(s) in locale specification "countable": 'a
consts
  flat :: "'a list stream => 'a stream"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.121s elapsed time, 4.278s cpu time, 0.850s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Proofs for inductive predicate(s) "finite_item"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.271s elapsed time, 4.990s cpu time, 0.589s GC time
Loading theory "HOL-Imperative_HOL.Heap" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Run" via "HOL-Imperative_HOL.Imperative_HOL" via "HOL-Imperative_HOL.Array" via "HOL-Imperative_HOL.Heap_Monad")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
### theory "HOL-Library.BigO"
### 0.876s elapsed time, 3.440s cpu time, 0.345s GC time
Loading theory "Separation_Logic_Imperative_HOL.Syntax_Match" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Assertions")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### ML warning (line 40 of "$AFP/Separation_Logic_Imperative_HOL/Tools/Syntax_Match.thy"):
### Pattern is not exhaustive.
### ML warning (line 53 of "$AFP/Separation_Logic_Imperative_HOL/Tools/Syntax_Match.thy"):
### Pattern is not exhaustive.
structure Syntax_Match:
  sig
    val fo_nomatch_simproc: Proof.context -> cterm -> thm option
    val fo_nomatch_thm: thm
    val nomatch_simproc: Proof.context -> cterm -> thm option
    val nomatch_thm: thm
  end
locale ac_operator
  fixes f :: "'a => 'a => 'a"
  assumes "ac_operator f"
### theory "Separation_Logic_Imperative_HOL.Syntax_Match"
### 0.092s elapsed time, 0.356s cpu time, 0.065s GC time
\<Sqinter> (Sup ` ?A) = \<Squnion> (Inf ` {f ` ?A |f. ALL Y:?A. f Y : Y})
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.174s elapsed time, 8.201s cpu time, 0.930s GC time
Loading theory "Draft.Templates" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.061s elapsed time, 0.181s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Array_SBlitMoreTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  addr_of_array :: "'a array => nat"
consts
  addr_of_ref :: "'a ref => nat"
### theory "HOL-Imperative_HOL.Heap"
### 1.109s elapsed time, 3.667s cpu time, 0.370s GC time
Loading theory "HOL-Imperative_HOL.Heap_Monad" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Run" via "HOL-Imperative_HOL.Imperative_HOL" via "HOL-Imperative_HOL.Array")
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.653s elapsed time, 1.972s cpu time, 0.192s GC time
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.762s elapsed time, 13.091s cpu time, 1.868s GC time
Loading theory "HOL-ex.Quicksort" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Assertions" via "Automatic_Refinement.Misc")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  execute :: "'a Heap => heap => ('a * heap) option"
Found termination order: "length <*mlex*> {}"
### theory "HOL-ex.Quicksort"
### 0.721s elapsed time, 2.008s cpu time, 1.188s GC time
Loading theory "Automatic_Refinement.Misc" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Assertions")
consts
  fold_map :: "('a => 'b Heap) => 'a list => 'b list Heap"
### Cannot skip proof of schematic goal statement
### theory "HOL-Imperative_HOL.Heap_Monad"
### 1.700s elapsed time, 4.389s cpu time, 1.470s GC time
Loading theory "HOL-Imperative_HOL.Array" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Run" via "HOL-Imperative_HOL.Imperative_HOL")
(0 < length ?xs) = (?xs ~= [])
locale Assoc
  fixes f :: "'a => 'a => 'a"
  assumes "Assoc f"
locale AC
  fixes f :: "'a => 'a => 'a"
  assumes "AC f"
locale su_rel_fun
  fixes F :: "('a * 'b) set"
    and f :: "'a => 'b"
  assumes "su_rel_fun F f"
### theory "HOL-Imperative_HOL.Array"
### 0.304s elapsed time, 0.655s cpu time, 0.107s GC time
Loading theory "HOL-Imperative_HOL.Ref" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Run" via "HOL-Imperative_HOL.Imperative_HOL")
### Ambiguous input (line 211 of "~~/src/HOL/Imperative_HOL/Ref.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Ref.lookup" ("_thenM" ("_position" r) ("_position" f)))
###     ("_position" f)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_thenM" ("\<^const>Ref.lookup" ("_position" r)) ("_position" f))
###     ("_position" f)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 215 of "~~/src/HOL/Imperative_HOL/Ref.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Ref.update" ("_position" r)
###     ("\<^const>HOL.eq" ("_position" e)
###       ("_thenM"
###         ("_applC" ("_position" change)
###           ("_cargs" ("_lambda" ("_idtdummy") ("_position" e))
###             ("_position" r)))
###         ("_applC" ("_position" return) ("\<^const>Product_Type.Unity"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("\<^const>Ref.update" ("_position" r) ("_position" e))
###     ("_thenM"
###       ("_applC" ("_position" change)
###         ("_cargs" ("_lambda" ("_idtdummy") ("_position" e))
###           ("_position" r)))
###       ("_applC" ("_position" return) ("\<^const>Product_Type.Unity")))))
### ("\<^const>HOL.Trueprop"
###   ("_thenM"
###     ("\<^const>Ref.update" ("_position" r)
###       ("\<^const>HOL.eq" ("_position" e)
###         ("_applC" ("_position" change)
###           ("_cargs" ("_lambda" ("_idtdummy") ("_position" e))
###             ("_position" r)))))
###     ("_applC" ("_position" return) ("\<^const>Product_Type.Unity"))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Imperative_HOL.Ref"
### 0.538s elapsed time, 1.650s cpu time, 1.333s GC time
Loading theory "HOL-Imperative_HOL.Imperative_HOL" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Run")
### theory "HOL-Imperative_HOL.Imperative_HOL"
### 0.029s elapsed time, 0.057s cpu time, 0.000s GC time
Loading theory "Separation_Logic_Imperative_HOL.Imperative_HOL_Add" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple" via "Separation_Logic_Imperative_HOL.Assertions")
Loading theory "Separation_Logic_Imperative_HOL.Run" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple")
Array.update ?a ?i ?x ?h = Array.set ?a ((Array.get ?h ?a)[?i := ?x]) ?h
### theory "Separation_Logic_Imperative_HOL.Imperative_HOL_Add"
### 0.042s elapsed time, 0.125s cpu time, 0.000s GC time
consts
  is_exn :: "'a option => bool"
### No equation for constructor "None"
consts
  the_state :: "'a option => 'a"
Proofs for inductive predicate(s) "run"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
### theory "Separation_Logic_Imperative_HOL.Run"
### 0.289s elapsed time, 0.638s cpu time, 0.041s GC time
### Ignoring duplicate rewrite rule:
### dom (%x. Some (?f1 x)) == UNIV
consts
  filter_rev_aux :: "'a list => ('a => bool) => 'a list => 'a list"
### Missing patterns in function definition:
### !!a v va. zipf a (v # va) [] = undefined
### !!a v va. zipf a [] (v # va) = undefined
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
### Code generator: dropping subsumed code equation
### quicksort (?x # ?xs) ==
### quicksort (filter (%y. y < ?x) ?xs) @
### [?x] @ quicksort (filter ((<=) ?x) ?xs)
### Code generator: dropping subsumed code equation
### quicksort [] == []
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. length (snd (snd p))) <*mlex*>
   (%p. length (fst (snd p))) <*mlex*> {}"
"merge"
  :: "'a"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "{}"
consts
  the_default :: "'a => 'a option => 'a"
class ccpo = Sup + order +
  assumes
    "ccpo_Sup_upper":
      "!!A x.
          [| Complete_Partial_Order.chain (<=) A; x : A |] ==> x <= Sup A"
  assumes
    "ccpo_Sup_least":
      "!!A z.
          [| Complete_Partial_Order.chain (<=) A; !!x. x : A ==> x <= z |]
          ==> Sup A <= z"
### theory "Automatic_Refinement.Misc"
### 3.329s elapsed time, 5.902s cpu time, 2.049s GC time
Loading theory "Separation_Logic_Imperative_HOL.Assertions" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation" via "Separation_Logic_Imperative_HOL.Hoare_Triple")
Found termination order: "{}"
instantiation
  assn :: one
  one_assn == one_class.one :: assn
Found termination order: "{}"
instantiation
  assn :: times
  times_assn == times :: assn => assn => assn
Found termination order: "{}"
instantiation
  assn :: comm_monoid_mult
Found termination order: "{}"
instantiation
  assn :: boolean_algebra
  minus_assn == minus :: assn => assn => assn
  uminus_assn == uminus :: assn => assn
  bot_assn == bot :: assn
  top_assn == top :: assn
  inf_assn == inf :: assn => assn => assn
  sup_assn == sup :: assn => assn => assn
  less_eq_assn == less_eq :: assn => assn => bool
  less_assn == less :: assn => assn => bool
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Separation_Logic_Imperative_HOL.Assertions"
### 1.007s elapsed time, 1.150s cpu time, 0.149s GC time
Loading theory "Separation_Logic_Imperative_HOL.Hoare_Triple" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main" via "Separation_Logic_Imperative_HOL.Automation")
### theory "Separation_Logic_Imperative_HOL.Hoare_Triple"
### 0.263s elapsed time, 0.264s cpu time, 0.000s GC time
Loading theory "Separation_Logic_Imperative_HOL.Automation" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit" via "Separation_Logic_Imperative_HOL.Sep_Main")
(EX x xa. ?P \<Longrightarrow>\<^sub>A ?Q1 x xa) -->
(?P \<Longrightarrow>\<^sub>A \<exists>\<^sub>Ax xa. ?Q1 x xa)
### ML warning (line 401 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Pattern is not exhaustive.
### ML warning (line 407 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Pattern is not exhaustive.
### ML warning (line 418 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Matches are not exhaustive.
### ML warning (line 424 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Matches are not exhaustive.
### ML warning (line 489 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Handler catches all exceptions.
infix 1 THEN_IGNORE_NEWGOALS
structure Seplogic_Auto:
  sig
    val REPEAT_DETERM': ('a -> tactic) -> 'a -> thm -> thm Seq.seq
    val THEN_IGNORE_NEWGOALS:
       (int -> tactic) * (int -> thm -> thm Seq.seq) ->
         int -> thm -> thm Seq.seq
    val assn_simproc: simproc
    val assn_simproc_fun: Proof.context -> cterm -> thm option
    val decon_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val dflt_simps_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val dflt_tac: Proof.context -> int -> tactic
    val dfs_opr:
       string ->
         ('a -> term -> 'a * term option) -> 'a -> term -> 'a * term option
    val dfs_replace_atomic: string -> term -> term -> term -> term option
    val eintros_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val extract_ex_tac: Proof.context -> int -> thm -> thm Seq.seq
    val find_similar: (term -> term) -> term list -> (term * term) option
    val frame_inference_tac: Proof.context -> int -> tactic
    val heap_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val heap_rule_tac: Proof.context -> thm list -> int -> tactic
    val match_frame_tac: (int -> tactic) -> Proof.context -> int -> tactic
    val sep_auto_modifiers: Method.modifier parser list
    val sep_autosolve_tac:
       bool -> bool -> Proof.context -> int -> thm -> thm Seq.seq
    val solve_entails_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val solve_entails_tac: Proof.context -> int -> tactic
    val tr_term: term -> string
    val vcg_modifiers: (Token.T list -> Method.modifier * Token.T list) list
    val vcg_step_tac: Proof.context -> int -> tactic
    val vcg_tac: Proof.context -> int -> thm -> thm Seq.seq
  end
### Cannot skip proof of schematic goal statement
?i < length ?xs ==>
<?a \<mapsto>\<^sub>a ?xs> Array.nth ?a ?i
<%r. ?a \<mapsto>\<^sub>a ?xs * \<up> (r = ?xs ! ?i)>
### theory "Separation_Logic_Imperative_HOL.Automation"
### 0.596s elapsed time, 0.673s cpu time, 0.101s GC time
Loading theory "Separation_Logic_Imperative_HOL.Sep_Main" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit" via "Separation_Logic_Imperative_HOL.Array_Blit")
### theory "Separation_Logic_Imperative_HOL.Sep_Main"
### 0.022s elapsed time, 0.024s cpu time, 0.000s GC time
Loading theory "Separation_Logic_Imperative_HOL.Array_Blit" (required by "Draft.Array_SBlitMoreTemplates" via "Draft.Array_SBlit")
consts
  blit :: "'a array => nat => 'a array => nat => nat => unit Heap"
val it = fn: 'a array * int * 'a -> unit
### theory "Separation_Logic_Imperative_HOL.Array_Blit"
### 0.283s elapsed time, 0.317s cpu time, 0.047s GC time
*** Failed to load theory "Draft.Array_SBlit" (unresolved "Separation_Logic_Imperative_HOL.Array_Blit")
*** Failed to load theory "Draft.Array_SBlitMoreTemplates" (unresolved "Draft.Array_SBlit")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "2")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 166 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Array_Blit.thy")
Exception- TOPLEVEL_ERROR raised
