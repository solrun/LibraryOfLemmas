Loading theory "HOL-Data_Structures.Cmp" (required by "Draft.BTreeMoreTemplates" via "Draft.BTree")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.BTreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Data_Structures.Less_False" (required by "Draft.BTreeMoreTemplates" via "Draft.BTree" via "HOL-Data_Structures.Sorted_Less")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.BTreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "HOL-Data_Structures.Less_False"
### 0.047s elapsed time, 0.217s cpu time, 0.000s GC time
Loading theory "HOL-Data_Structures.Sorted_Less" (required by "Draft.BTreeMoreTemplates" via "Draft.BTree")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Data_Structures.Sorted_Less"
### 0.078s elapsed time, 0.303s cpu time, 0.043s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.BTreeMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.537s cpu time, 0.043s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.BTreeMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.329s elapsed time, 1.313s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.BTreeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.204s elapsed time, 0.796s cpu time, 0.075s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.BTreeMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Data_Structures.Cmp"
### 0.354s elapsed time, 1.411s cpu time, 0.119s GC time
Loading theory "Draft.BTree" (required by "Draft.BTreeMoreTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  btree :: (type) height
  height_btree == height :: 'a btree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.952s elapsed time, 3.582s cpu time, 0.765s GC time
set_btree Leaf = {}
set_btree (Node ?x21.0 ?x22.0) =
(UN uu:set ?x21.0.
    \<Union> (set_btree ` Basic_BNFs.fsts uu) Un Basic_BNFs.snds uu) Un
set_btree ?x22.0
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.036s elapsed time, 3.921s cpu time, 0.765s GC time
inorder Leaf = []
inorder (Node ?ts ?t) = inorder_list ?ts @ inorder ?t
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"[0, 1, 10, 12, 30, 100]"
  :: "nat list"
Found termination order: "size <*mlex*> {}"
"{0, 1, 10, 12, 30, 100}"
  :: "nat set"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
"2"
  :: "nat"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.BTree"
### 1.378s elapsed time, 4.908s cpu time, 0.875s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.947s elapsed time, 6.175s cpu time, 1.000s GC time
Loading theory "Draft.Templates" (required by "Draft.BTreeMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.BTreeMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.444s elapsed time, 0.479s cpu time, 0.042s GC time
Loading theory "Draft.BTreeMoreTemplates"
val templateLemmas =
   [("BTree.set_btree_inorder", "set (BTree.inorder ?t) = set_btree ?t",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("BTree.height_Leaf",
     "(BTree.height_class.height ?t = 0) = (?t = btree.Leaf)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("BTree.bal_split_right",
     "bal (btree.Node (?ls @ ?rs) ?t) ==> bal (btree.Node ?rs ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ))),
    ("BTree.sorted_inorder_induct_last",
     "sorted_less (BTree.inorder (btree.Node ?ts ?t)) ==>
      sorted_less (BTree.inorder ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 0))
           ))),
    ("BTree.sorted_inorder_separators",
     "sorted_less (BTree.inorder (btree.Node ?ts ?t)) ==>
      sorted_less (separators ?ts)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 1))
           ))),
    ("BTree.order_impl_root_order",
     "[| 0 < ?k; order ?k ?t |] ==> root_order ?k ?t",
     template_implication
      ([template_inequation (less_than, template_hole 2, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("BTree.height_bal_tree",
     "bal (btree.Node ?ts ?t) ==>
      BTree.height_class.height (btree.Node ?ts ?t) =
      Suc (BTree.height_class.height ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("BTree.child_subset",
     "?p : set ?t ==> set_btree (fst ?p) <= set_btree (btree.Node ?t ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2, template_app (template_hole 1, template_var 2)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("BTree.some_child_sub",
     "(?sub, ?sep) : set ?t ==> ?sub : set (BTree.subtrees ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("BTree.some_child_sub",
     "(?sub, ?sep) : set ?t ==> ?sep : set (separators ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0)))
           ))),
    ("BTree.height_btree_order",
     "BTree.height_class.height (btree.Node (?ls @ [?a]) ?t) =
      BTree.height_class.height (btree.Node (?a # ?ls) ?t)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0))),
           template_var 0)),
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("BTree.finite_set_in_idem",
     "finite ?A ==> max ?a (Max (insert ?a ?A)) = Max (insert ?a ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("BTree.fold_max_set", "ALL x:set ?t. x = ?f ==> fold max ?t ?f = ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1),
           template_var 0),
         template_var 0))),
    ("BTree.bal_split_left",
     "bal (btree.Node (?ls @ (?a, ?b) # ?rs) ?t) ==>
      bal (btree.Node ?ls ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_app
                     (template_app
                       (template_hole 1,
                        template_app
                         (template_app (template_hole 0, template_var 3),
                          template_var 2)),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 4),
               template_var 3))
           ))),
    ("BTree.height_btree_sub",
     "BTree.height_class.height (btree.Node ((?sub, ?x) # ?ls) ?t) =
      max (BTree.height_class.height (btree.Node ?ls ?t))
       (Suc (BTree.height_class.height ?sub))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app (template_hole 5, template_var 3))))),
    ("BTree.height_btree_last",
     "BTree.height_class.height (btree.Node ((?sub, ?x) # ?ts) ?t) =
      max (BTree.height_class.height (btree.Node ?ts ?sub))
       (Suc (BTree.height_class.height ?t))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_var 3))),
         template_app
          (template_hole 0,
           template_app (template_hole 5, template_var 0))))),
    ("BTree.finite_set_ins_swap",
     "finite ?A ==>
      max ?a (Max (insert ?b ?A)) = max ?b (Max (insert ?a ?A))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)))))),
    ("BTree.sorted_inorder_subtrees",
     "sorted_less (BTree.inorder (btree.Node ?ts ?t)) ==>
      ALL sub:set (BTree.subtrees ?ts). sorted_less (BTree.inorder sub)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1))),
             t_empty)
           ))),
    ("BTree.bal_split_last",
     "bal (btree.Node (?ls @ (?sub, ?sep) # ?rs) ?t) ==>
      bal (btree.Node (?ls @ ?rs) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 4),
                    template_app
                     (template_app
                       (template_hole 1,
                        template_app
                         (template_app (template_hole 0, template_var 3),
                          template_var 2)),
                      template_var 1))),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 1)),
               template_var 0))
           ))),
    ("BTree.sorted_inorder_induct_subtree",
     "sorted_less
       (BTree.inorder (btree.Node (?ls @ (?sub, ?sep) # ?rs) ?t)) ==>
      sorted_less (BTree.inorder ?sub)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 4),
                      template_app
                       (template_app
                         (template_hole 1,
                          template_app
                           (template_app (template_hole 0, template_var 3),
                            template_var 2)),
                        template_var 1))),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app (template_hole 4, template_var 3))
           ))),
    ("BTree.bal_split_right",
     "bal (btree.Node (?ls @ ?rs) ?t) ==>
      BTree.height_class.height (btree.Node ?rs ?t) =
      BTree.height_class.height (btree.Node (?ls @ ?rs) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("BTree.sorted_inorder_list_separators",
     "sorted_less (inorder_list ?ts) ==> sorted_less (separators ?ts)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app (template_hole 6, t_empty)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, template_hole 9),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("BTree.bal_substitute_separator",
     "bal (btree.Node (?ls @ (?a, ?b) # ?rs) ?t) ==>
      bal (btree.Node (?ls @ (?a, ?c) # ?rs) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 5),
                    template_app
                     (template_app
                       (template_hole 1,
                        template_app
                         (template_app (template_hole 0, template_var 4),
                          template_var 3)),
                      template_var 2))),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 0)),
                     template_var 2))),
               template_var 1))
           ))),
    ("BTree.bal_all_subtrees_equal",
     "bal (btree.Node ?ts ?t) ==>
      ALL s1:set (BTree.subtrees ?ts).
         ALL s2:set (BTree.subtrees ?ts).
            BTree.height_class.height s1 = BTree.height_class.height s2",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 1))),
             t_empty)
           ))),
    ("BTree.subtrees_split",
     "set (BTree.subtrees (?l @ (?a, ?b) # ?r)) =
      set (BTree.subtrees ?l) Un set (BTree.subtrees ?r) Un {?a}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 3))),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 0)))),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_hole 0)))),
    ("BTree.separators_split",
     "set (separators (?l @ (?a, ?b) # ?r)) =
      set (separators ?l) Un set (separators ?r) Un {?b}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_app (template_hole 5, template_var 3),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 0)))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_var 3))),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 0)))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("BTree.sorted_inorder_list_subtrees",
     "sorted_less (inorder_list ?ts) ==>
      ALL sub:set (BTree.subtrees ?ts). sorted_less (BTree.inorder sub)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_hole 11),
              template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app (template_hole 8, t_empty)),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 0))),
             t_empty)
           ))),
    ("BTree.sorted_inorder_list_induct_subtree",
     "sorted_less (inorder_list (?ls @ (?sub, ?sep) # ?rs)) ==>
      sorted_less (BTree.inorder ?sub)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_hole 10),
              template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, t_empty)),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_app
                     (template_app
                       (template_hole 1,
                        template_app
                         (template_app (template_hole 0, template_var 2),
                          template_var 1)),
                      template_var 0)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 11, template_hole 10),
             template_app (template_hole 5, template_var 2))
           ))),
    ("BTree.bal_split_left",
     "bal (btree.Node (?ls @ (?a, ?b) # ?rs) ?t) ==>
      BTree.height_class.height (btree.Node ?ls ?a) =
      BTree.height_class.height (btree.Node (?ls @ (?a, ?b) # ?rs) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_var 3),
                          template_var 2)),
                      template_var 1))),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 5, template_var 4),
             template_var 3)),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2)),
                   template_var 1))),
             template_var 0))))),
    ("BTree.bal_split_last",
     "bal (btree.Node (?ls @ (?sub, ?sep) # ?rs) ?t) ==>
      BTree.height_class.height (btree.Node (?ls @ (?sub, ?sep) # ?rs) ?t) =
      BTree.height_class.height (btree.Node (?ls @ ?rs) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 4),
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_var 3),
                          template_var 2)),
                      template_var 1))),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2)),
                   template_var 1))),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 4),
                 template_var 1)),
             template_var 0))))),
    ("BTree.bal_substitute_subtree",
     "[| bal (btree.Node (?ls @ (?a, ?b) # ?rs) ?t);
         BTree.height_class.height ?a = BTree.height_class.height ?c;
         bal ?c |]
      ==> bal (btree.Node (?ls @ (?c, ?b) # ?rs) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_var 4),
                          template_var 3)),
                      template_var 2))),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 0, template_var 4),
          template_app (template_hole 0, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 5),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 3)),
                     template_var 2))),
               template_var 1))
           ))),
    ("BTree.bal_substitute",
     "[| bal (btree.Node (?ls @ (?a, ?b) # ?rs) ?t);
         BTree.height_class.height ?t = BTree.height_class.height ?c;
         bal ?c |]
      ==> bal (btree.Node (?ls @ (?c, ?b) # ?rs) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 5),
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app
                         (template_app (template_hole 2, template_var 4),
                          template_var 3)),
                      template_var 2))),
                template_var 1))
            ),
        template_equation
         (template_app (template_hole 0, template_var 1),
          template_app (template_hole 0, template_var 0)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 5),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 0),
                         template_var 3)),
                     template_var 2))),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.BTreeMoreTemplates"
### 0.299s elapsed time, 0.438s cpu time, 0.051s GC time
val it = (): unit
