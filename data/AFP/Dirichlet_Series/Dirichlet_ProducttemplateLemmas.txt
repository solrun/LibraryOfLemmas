   [("Dirichlet_Product.dirichlet_prod_0",
     "dirichlet_prod ?f ?g 0 = (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_hole 0)),
    ("Dirichlet_Product.dirichlet_inverse_0",
     "dirichlet_inverse ?f ?i 0 = (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_hole 0)),
    ("Dirichlet_Product.dirichlet_inverse_Suc_0",
     "dirichlet_inverse ?f ?i (Suc 0) = ?i",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("Dirichlet_Product.dirichlet_prod_commutes",
     "dirichlet_prod ?f ?g = dirichlet_prod ?g ?f",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Dirichlet_Product.multiplicative_dirichlet_inverse",
     "multiplicative_function ?f ==>
      multiplicative_function (dirichlet_inverse ?f (1::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Dirichlet_Product.dirichlet_prod_assoc",
     "dirichlet_prod (dirichlet_prod ?f ?g) ?h =
      dirichlet_prod ?f (dirichlet_prod ?g ?h)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Dirichlet_Product.multiplicative_dirichlet_prod",
     "[| multiplicative_function ?f; multiplicative_function ?g |]
      ==> multiplicative_function (dirichlet_prod ?f ?g)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Dirichlet_Product.dirichlet_prod_Suc_0",
     "dirichlet_prod ?f ?g (Suc 0) = ?f (Suc 0) * ?g (Suc 0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_var 1,
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_var 0,
           template_app (template_hole 2, template_hole 1))))),
    ("Dirichlet_Product.of_int_dirichlet_inverse",
     "of_int (dirichlet_inverse ?f ?i ?n) =
      dirichlet_inverse (%n. of_int (?f n)) (of_int ?i) ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, t_empty),
           template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Dirichlet_Product.finite_divisors_nat'",
     "0 < ?n ==> finite {(a, b). a * b = ?n}",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3, template_app (template_hole 2, t_empty)))
           ))),
    ("Dirichlet_Product.of_int_dirichlet_prod",
     "of_int (dirichlet_prod ?f ?g ?n) =
      dirichlet_prod (%n. of_int (?f n)) (%n. of_int (?g n)) ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_app (template_hole 0, t_empty), t_empty),
         template_var 0))),
    ("Dirichlet_Product.dirichlet_inverse_noninvertible",
     "[| ?f (Suc 0) = (0::?'a); ?i = (0::?'a) |]
      ==> dirichlet_inverse ?f ?i ?n = (0::?'a)",
     template_implication
      ([template_equation
         (template_app
           (template_var 2,
            template_app (template_hole 3, template_hole 2)),
          template_hole 1),
        template_equation (template_var 1, template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0),
         template_hole 1))),
    ("Dirichlet_Product.multiplicative_dirichlet_prodD1",
     "[| multiplicative_function (dirichlet_prod ?f ?g);
         multiplicative_function ?f; ?g 0 = (0::?'a) |]
      ==> multiplicative_function ?g",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_equation
         (template_app (template_var 0, template_hole 1), template_hole 0)],
       template_predicate
        (template_app (template_hole 4, template_var 0)))),
    ("Dirichlet_Product.multiplicative_dirichlet_prodD2",
     "[| multiplicative_function (dirichlet_prod ?f ?g);
         multiplicative_function ?g; ?f 0 = (0::?'a) |]
      ==> multiplicative_function ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            ),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app (template_var 1, template_hole 1), template_hole 0)],
       template_predicate
        (template_app (template_hole 4, template_var 1)))),
    ("Dirichlet_Product.dirichlet_prod_altdef1",
     "dirichlet_prod ?f ?g = (%n. SUM d | d dvd n. ?f (n div d) * ?g d)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       t_empty)),
    ("Dirichlet_Product.dirichlet_prod_prime",
     "prime ?p ==> dirichlet_prod ?f ?g ?p = ?f 1 * ?g ?p + ?f ?p * ?g 1",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_var 1, template_hole 0)),
               template_app (template_var 0, template_var 2))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_var 1, template_var 2)),
             template_app (template_var 0, template_hole 0)))))),
    ("Dirichlet_Product.dirichlet_prod_const_right",
     "0 < ?n ==>
      dirichlet_prod ?f (%n. if n = Suc 0 then ?c else (0::?'a)) ?n =
      ?f ?n * ?c",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 1), t_empty),
           template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 1, template_var 2)),
           template_var 0)))),
    ("Dirichlet_Product.dirichlet_prod_const_left",
     "0 < ?n ==>
      dirichlet_prod (%n. if n = Suc 0 then ?c else (0::?'a)) ?g ?n =
      ?c * ?g ?n",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, t_empty), template_var 0),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 0, template_var 2))))),
    ("Dirichlet_Product.dirichlet_prod_inverse",
     "?f 1 * ?i = (1::?'a) ==>
      dirichlet_prod ?f (dirichlet_inverse ?f ?i) =
      (%n. if n = 1 then 1::?'a else (0::?'a))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_var 1, template_hole 7)),
            template_var 0),
          template_hole 6)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         t_empty))),
    ("Dirichlet_Product.dirichlet_prod_inverse'",
     "?f 1 * ?i = (1::?'a) ==>
      dirichlet_prod (dirichlet_inverse ?f ?i) ?f =
      (%n. if n = 1 then 1::?'a else (0::?'a))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 8,
              template_app (template_var 1, template_hole 7)),
            template_var 0),
          template_hole 6)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_var 1),
         t_empty))),
    ("Dirichlet_Product.dirichlet_prod_altdef2",
     "dirichlet_prod ?f ?g =
      (%n. SUM (r, d):{(r, d). r * d = n}. ?f r * ?g d)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       t_empty)),
    ("Dirichlet_Product.dirichlet_prod_prime_power",
     "prime ?p ==>
      dirichlet_prod ?f ?g (?p ^ ?k) =
      (SUM i<=?k. ?f (?p ^ i) * ?g (?p ^ (?k - i)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("Dirichlet_Product.dirichlet_inverse_gt_1'",
     "1 < ?n ==>
      dirichlet_inverse ?f ?i ?n =
      - ?i *
      dirichlet_prod (%n. if n = 1 then 0::?'a else ?f n)
       (dirichlet_inverse ?f ?i) ?n",
     template_implication
      ([template_inequation (less_than, template_hole 8, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 6, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)),
             template_var 2))))),
    ("Dirichlet_Product.dirichlet_prod_code",
     "dirichlet_prod ?f ?g ?n =
      (if ?n = 0 then 0::?'a
       else fold_atLeastAtMost_nat
             (%d acc. if d dvd ?n then ?f d * ?g (?n div d) + acc else acc)
             1 ?n (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 0),
                   template_hole 7)),
               template_hole 6),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 5, t_empty),
                   template_hole 0),
                 template_var 0),
               template_hole 6))
           ))),
    ("Dirichlet_Product.sum_divisors_code",
     "0 < ?n ==>
      (SUM d | d dvd ?n. ?f d) =
      fold_atLeastAtMost_nat (%d acc. if d dvd ?n then ?f d + acc else acc)
       1 ?n (0::?'a)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 6, t_empty)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, t_empty), template_hole 1),
             template_var 1),
           template_hole 0)))),
    ("Dirichlet_Product.dirichlet_inverse_gt_1",
     "1 < ?n ==>
      dirichlet_inverse ?f ?i ?n =
      - ?i *
      (SUM d | d dvd ?n & d < ?n.
          ?f (?n div d) * dirichlet_inverse ?f ?i d)",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app (template_hole 4, t_empty),
             template_app (template_hole 2, t_empty)))))),
    ("Dirichlet_Product.dirichlet_inverse_induct",
     "[| ?P 0; ?P (Suc 0); !!n. [| 1 < n; !!k. k < n ==> ?P k |] ==> ?P n |]
      ==> ?P ?n",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 4)),
        template_predicate
         (
            template_app
             (template_var 1,
              template_app (template_hole 3, template_hole 4))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Dirichlet_Product.dirichlet_inverse_cong",
     "[| !!n. 0 < n ==> ?f n = ?f' n; ?i = ?i'; ?n = ?n' |]
      ==> dirichlet_inverse ?f ?i ?n = dirichlet_inverse ?f' ?i' ?n'",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_equation (template_var 3, template_var 2),
        template_equation (template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Dirichlet_Product.dirichlet_prod_cong",
     "[| !!n. 0 < n ==> ?f n = ?f' n; !!n. 0 < n ==> ?g n = ?g' n |]
      ==> dirichlet_prod ?f ?g = dirichlet_prod ?f' ?g'",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Dirichlet_Product.dirichlet_prod_assoc_aux1",
     "0 < ?n ==>
      dirichlet_prod ?f (dirichlet_prod ?g ?h) ?n =
      (SUM (a, b, c):{(a, b, c). a * b * c = ?n}. ?f a * ?g b * ?h c)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_app
              (template_app (template_hole 9, template_var 1),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_hole 8, template_app (template_hole 7, t_empty)),
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty)))))),
    ("Dirichlet_Product.dirichlet_prod_assoc_aux2",
     "0 < ?n ==>
      dirichlet_prod (dirichlet_prod ?f ?g) ?h ?n =
      (SUM (a, b, c):{(a, b, c). a * b * c = ?n}. ?f a * ?g b * ?h c)",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 9, template_var 2),
                 template_var 1)),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_hole 8, template_app (template_hole 7, t_empty)),
           template_app
            (template_hole 4, template_app (template_hole 3, t_empty)))))),
    ("Dirichlet_Product.dirichlet_inverse_code",
     "dirichlet_inverse ?f ?i ?n =
      (if ?n = 0 then 0::?'a
       else if ?n = 1 then ?i
            else - ?i *
                 fold_atLeastAtMost_nat
                  (%d acc.
                      if d dvd ?n
                      then ?f (?n div d) * dirichlet_inverse ?f ?i d + acc
                      else acc)
                  1 (?n - 1) (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 12, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_var 0),
                   template_hole 9)),
               template_hole 8),
             template_app
              (template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 0),
                     template_hole 7)),
                 template_var 1),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, t_empty),
                       template_hole 7),
                     template_app
                      (template_app (template_hole 0, template_var 0),
                       template_hole 7)),
                   template_hole 8))))
           ))),
    ("Dirichlet_Product.sum_coprime_dvd_cong",
     "[| coprime ?a ?b;
         !!r s. [| coprime r s; r dvd ?a; s dvd ?b |] ==> ?f r s = ?g r s |]
      ==> (SUM r | r dvd ?a. SUM s | s dvd ?b. ?f r s) =
          (SUM r | r dvd ?a. SUM s | s dvd ?b. ?g r s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, t_empty)),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, t_empty)))))]
