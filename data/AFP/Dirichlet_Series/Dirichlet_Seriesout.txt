Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
  Proving monotonicity ...
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.FuncSet"
### 0.340s elapsed time, 1.361s cpu time, 0.071s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.429s elapsed time, 1.724s cpu time, 0.126s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.537s elapsed time, 2.132s cpu time, 0.202s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.111s elapsed time, 0.446s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Elementary_Groups")
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.084s elapsed time, 4.124s cpu time, 0.678s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
consts
  enumerate :: "'a set => nat => 'a"
### theory "HOL-Algebra.Congruence"
### 0.885s elapsed time, 3.319s cpu time, 0.693s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
### theory "HOL-Library.Infinite_Set"
### 0.426s elapsed time, 1.683s cpu time, 0.127s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.More_List"
### 0.230s elapsed time, 0.902s cpu time, 0.180s GC time
Loading theory "HOL-Library.Power_By_Squaring" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Mod_Exp")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size_list size <*mlex*> {}"
class monoid_mult = semigroup_mult + power +
  assumes "mult_1_left": "!!a. (1::'a) * a = a"
    and "mult_1_right": "!!a. a * (1::'a) = a"
### theory "HOL-Library.Power_By_Squaring"
### 0.194s elapsed time, 0.770s cpu time, 0.091s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Nat_Bijection"
### 0.345s elapsed time, 1.358s cpu time, 0.185s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.ExtrEqs")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.885s cpu time, 0.092s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  mset :: "'a list => 'a multiset"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
consts
  snth :: "'a stream => nat => 'a"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 1.227s elapsed time, 4.662s cpu time, 1.193s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
consts
  flat :: "'a list stream => 'a stream"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.Stream"
### 1.213s elapsed time, 4.604s cpu time, 1.171s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
Found termination order: "size <*mlex*> {}"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Algebra.Lattice"
### 1.166s elapsed time, 4.374s cpu time, 1.253s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group")
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.BigO"
### 1.141s elapsed time, 4.287s cpu time, 1.262s GC time
Loading theory "HOL-Number_Theory.Fib" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
### theory "HOL-Number_Theory.Fib"
### 0.298s elapsed time, 1.170s cpu time, 0.161s GC time
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
### theory "HOL-Algebra.Complete_Lattice"
### 0.771s elapsed time, 2.902s cpu time, 0.443s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
### theory "HOL-Library.Tree"
### 2.726s elapsed time, 10.172s cpu time, 2.613s GC time
Loading theory "Draft.Templates" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.442s elapsed time, 1.464s cpu time, 1.274s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Dirichlet_SeriesMoreTemplates")
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
### theory "HOL-Library.Multiset"
### 4.877s elapsed time, 17.842s cpu time, 4.984s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.714s elapsed time, 2.313s cpu time, 0.294s GC time
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
### theory "HOL-Algebra.Group"
### 1.814s elapsed time, 5.239s cpu time, 1.802s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
### theory "HOL-Algebra.FiniteProduct"
### 0.447s elapsed time, 1.379s cpu time, 0.181s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module")
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
### theory "HOL-Algebra.Coset"
### 1.145s elapsed time, 3.524s cpu time, 0.455s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### theory "HOL-Algebra.Generated_Groups"
### 0.664s elapsed time, 2.051s cpu time, 0.291s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "HOL-Algebra.Elementary_Groups"
### 0.503s elapsed time, 1.551s cpu time, 0.200s GC time
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Ring"
### 2.499s elapsed time, 7.080s cpu time, 0.851s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
Loading theory "HOL-Algebra.Module" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.334s elapsed time, 4.096s cpu time, 0.448s GC time
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 5.901s elapsed time, 16.337s cpu time, 1.901s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong" via "HOL-Computational_Algebra.Primes")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Algebra.AbelCoset"
### 2.343s elapsed time, 6.567s cpu time, 0.682s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom")
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
### theory "HOL-Algebra.Ideal"
### 1.839s elapsed time, 5.645s cpu time, 0.608s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
### theory "HOL-Algebra.RingHom"
### 0.791s elapsed time, 2.440s cpu time, 0.299s GC time
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Algebra.Multiplicative_Group")
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Polynomial"
### 5.455s elapsed time, 16.801s cpu time, 1.848s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.228s elapsed time, 0.686s cpu time, 0.000s GC time
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 8.167s elapsed time, 22.951s cpu time, 2.683s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues" via "HOL-Number_Theory.Cong")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Computational_Algebra.Primes"
### 0.295s elapsed time, 1.187s cpu time, 0.167s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
locale fract_as_normalized_quot
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 1.478s elapsed time, 5.472s cpu time, 3.634s GC time
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Nth_Powers"
### 1.179s elapsed time, 4.271s cpu time, 3.467s GC time
Loading theory "HOL-Number_Theory.Cong" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
### theory "HOL-Computational_Algebra.Squarefree"
### 0.171s elapsed time, 0.671s cpu time, 0.069s GC time
Loading theory "HOL-Number_Theory.Eratosthenes" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
class unique_euclidean_semiring = euclidean_semiring_cancel +
  fixes division_segment :: "'a => 'a"
  assumes
    "euclidean_size_mult":
      "!!a b. euclidean_size (a * b) = euclidean_size a * euclidean_size b"
  assumes "is_unit_division_segment": "!!a. is_unit (division_segment a)"
    and
    "division_segment_mult":
      "!!a b.
          [| a ~= (0::'a); b ~= (0::'a) |]
          ==> division_segment (a * b) =
              division_segment a * division_segment b"
    and
    "division_segment_mod":
      "!!b a.
          [| b ~= (0::'a); ~ b dvd a |]
          ==> division_segment (a mod b) = division_segment b"
  assumes
    "div_bounded":
      "!!b r q.
          [| b ~= (0::'a); division_segment r = division_segment b;
             euclidean_size r < euclidean_size b |]
          ==> (q * b + r) div b = q"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Number_Theory.Eratosthenes"
### 0.269s elapsed time, 1.055s cpu time, 0.109s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Number_Theory.Cong"
### 0.971s elapsed time, 3.840s cpu time, 0.439s GC time
Loading theory "HOL-Number_Theory.Mod_Exp" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
### Cannot skip proof of schematic goal statement
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
class euclidean_semiring_cancel = euclidean_semiring +
  assumes
    "div_mult_self1":
      "!!b a c. b ~= (0::'a) ==> (a + c * b) div b = c + a div b"
    and
    "div_mult_mult1":
      "!!c a b. c ~= (0::'a) ==> c * a div (c * b) = a div b"
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
### theory "HOL-Number_Theory.Mod_Exp"
### 0.562s elapsed time, 2.224s cpu time, 0.256s GC time
Loading theory "HOL-Number_Theory.Prime_Powers" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.152s elapsed time, 4.559s cpu time, 0.518s GC time
Loading theory "HOL-Number_Theory.Totient" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  totient_naive :: "nat => nat => nat => nat"
### theory "HOL-Number_Theory.Totient"
### 0.548s elapsed time, 2.167s cpu time, 0.271s GC time
### theory "HOL-Number_Theory.Prime_Powers"
### 0.867s elapsed time, 3.259s cpu time, 0.404s GC time
### theory "HOL-Algebra.UnivPoly"
### 9.167s elapsed time, 28.791s cpu time, 6.351s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Residues")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 4.757s elapsed time, 16.958s cpu time, 5.101s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.480s elapsed time, 1.029s cpu time, 0.156s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 2.310s elapsed time, 5.301s cpu time, 0.805s GC time
Loading theory "HOL-Number_Theory.Residues" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 1.700s elapsed time, 3.667s cpu time, 0.491s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series")
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
### theory "HOL-Number_Theory.Residues"
### 1.392s elapsed time, 2.968s cpu time, 0.306s GC time
Loading theory "HOL-Number_Theory.Euler_Criterion" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity" via "HOL-Number_Theory.Gauss")
Loading theory "HOL-Number_Theory.Pocklington" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Number_Theory.Euler_Criterion"
### 0.131s elapsed time, 0.405s cpu time, 0.060s GC time
Loading theory "HOL-Number_Theory.Gauss" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity")
locale GAUSS
  fixes p :: "nat"
    and a :: "int"
  assumes "GAUSS p a"
### theory "HOL-Number_Theory.Pocklington"
### 0.290s elapsed time, 0.897s cpu time, 0.179s GC time
Loading theory "HOL-Number_Theory.Residue_Primitive_Roots" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Number_Theory.Gauss"
### 0.199s elapsed time, 0.619s cpu time, 0.119s GC time
Loading theory "HOL-Number_Theory.Quadratic_Reciprocity" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
Proofs for inductive predicate(s) "residue_primroot"
  Proving monotonicity ...
locale QR
  fixes p :: "nat"
    and q :: "nat"
  assumes "QR p q"
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 1.182s elapsed time, 3.005s cpu time, 0.371s GC time
### theory "HOL-Number_Theory.Residue_Primitive_Roots"
### 0.260s elapsed time, 0.776s cpu time, 0.094s GC time
### theory "HOL-Number_Theory.Quadratic_Reciprocity"
### 0.319s elapsed time, 0.796s cpu time, 0.094s GC time
Loading theory "HOL-Number_Theory.Number_Theory" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function")
### theory "HOL-Number_Theory.Number_Theory"
### 1.005s elapsed time, 1.061s cpu time, 0.074s GC time
Loading theory "Draft.Dirichlet_Misc" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product" via "Draft.Multiplicative_Function")
### theory "Draft.Dirichlet_Misc"
### 0.067s elapsed time, 0.067s cpu time, 0.000s GC time
Loading theory "Draft.Multiplicative_Function" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series" via "Draft.Dirichlet_Product")
locale multiplicative_function
  fixes f :: "nat => 'a"
  assumes "multiplicative_function f"
locale multiplicative_function'
  fixes f :: "nat => 'a"
    and f_prime_power :: "nat => nat => 'a"
    and f_prime :: "nat => 'a"
  assumes "multiplicative_function' f f_prime_power f_prime"
locale completely_multiplicative_function
  fixes f :: "nat => 'a"
  assumes "completely_multiplicative_function f"
locale completely_multiplicative_function'
  fixes f :: "nat => 'a"
    and f_prime :: "nat => 'a"
  assumes "completely_multiplicative_function' f f_prime"
### theory "Draft.Multiplicative_Function"
### 0.158s elapsed time, 0.206s cpu time, 0.067s GC time
Loading theory "Draft.Dirichlet_Product" (required by "Draft.Dirichlet_SeriesMoreTemplates" via "Draft.Dirichlet_Series")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale multiplicative_dirichlet_prod
  fixes f :: "nat => 'a"
    and g :: "nat => 'a"
  assumes "multiplicative_dirichlet_prod f g"
locale multiplicative_dirichlet_prod'
  fixes f :: "nat => 'a"
    and g :: "nat => 'a"
    and f_prime_power :: "nat => nat => 'a"
    and g_prime_power :: "nat => nat => 'a"
    and f_prime :: "nat => 'a"
    and g_prime :: "nat => 'a"
  assumes
    "multiplicative_dirichlet_prod' f g f_prime_power g_prime_power f_prime
      g_prime"
### theory "Draft.Dirichlet_Product"
### 0.235s elapsed time, 0.235s cpu time, 0.000s GC time
Loading theory "Draft.Dirichlet_Series" (required by "Draft.Dirichlet_SeriesMoreTemplates")
bundle fds_syntax
instantiation
  fds :: (zero) zero
  zero_fds == zero_class.zero :: 'a fds
instantiation
  fds :: ({one,zero}) one
  one_fds == one_class.one :: 'a fds
instantiation
  fds :: ({plus,zero}) plus
  plus_fds == plus :: 'a fds => 'a fds => 'a fds
instantiation
  fds :: (semiring_0) times
  times_fds == times :: 'a fds => 'a fds => 'a fds
instantiation
  fds :: ({uminus,zero}) uminus
  uminus_fds == uminus :: 'a fds => 'a fds
instantiation
  fds :: ({minus,zero}) minus
  minus_fds == minus :: 'a fds => 'a fds => 'a fds
instantiation
  fds :: (real_vector) real_vector
  scaleR_fds == scaleR :: real => 'a fds => 'a fds
instantiation
  fds :: ({inverse,comm_ring_1}) inverse
  inverse_fds == inverse :: 'a fds => 'a fds
  divide_fds == divide :: 'a fds => 'a fds => 'a fds
class nat_power = semiring_1 +
  fixes nat_power :: "nat => 'a => 'a"
  assumes
    "nat_power_0_left": "!!x. x ~= (0::'a) ==> nat_power 0 x = (0::'a)"
  assumes
    "nat_power_0_right": "!!n. 0 < n ==> nat_power n (0::'a) = (1::'a)"
  assumes "nat_power_1_left": "!!x. nat_power (Suc 0) x = (1::'a)"
  assumes "nat_power_1_right": "!!n. nat_power n (1::'a) = of_nat n"
  assumes
    "nat_power_add":
      "!!n a b.
          0 < n ==> nat_power n (a + b) = nat_power n a * nat_power n b"
  assumes
    "nat_power_mult_distrib":
      "!!m n a.
          [| 0 < m; 0 < n |]
          ==> nat_power (m * n) a = nat_power m a * nat_power n a"
  assumes
    "nat_power_power":
      "!!n a m. 0 < n ==> nat_power n (a * of_nat m) = nat_power n a ^ m"
class nat_power_field = nat_power + field +
  assumes "nat_power_nonzero": "!!n z. 0 < n ==> nat_power n z ~= (0::'a)"
instantiation
  nat :: nat_power
  nat_power_nat == nat_power :: nat => nat => nat
instantiation
  real :: nat_power_field
  nat_power_real == nat_power :: nat => real => real
### theory "Draft.Dirichlet_Series"
### 3.361s elapsed time, 6.718s cpu time, 4.590s GC time
Loading theory "Draft.Dirichlet_SeriesMoreTemplates"
val templateLemmas =
   [("Dirichlet_Series.fds_one_abs_converges", "fds_abs_converges 1 ?s",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Dirichlet_Series.fds_zero_abs_converges", "fds_abs_converges 0 ?s",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Dirichlet_Series.fds_one_converges", "fds_converges 1 ?s",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Dirichlet_Series.fds_zero_converges", "fds_converges 0 ?s",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Dirichlet_Series.fds_const_abs_converges",
     "fds_abs_converges (fds_const ?c) ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Dirichlet_Series.fds_const_converges",
     "fds_converges (fds_const ?c) ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)
         )),
    ("Dirichlet_Series.fds_abs_converges_truncate",
     "fds_abs_converges (fds_truncate ?n ?f) ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)
         )),
    ("Dirichlet_Series.fds_converges_truncate",
     "fds_converges (fds_truncate ?n ?f) ?s",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)
         )),
    ("Dirichlet_Series.fds_nth_0", "fds_nth ?f 0 = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Dirichlet_Series.fds_fds_nth", "fds (fds_nth ?f) = ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Dirichlet_Series.fds_scale_1", "fds_scale 1 ?f = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Dirichlet_Series.fds_scale_0", "fds_scale 0 ?f = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Dirichlet_Series.fds_scale_zero", "fds_scale ?c 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Dirichlet_Series.fds_truncate_0", "fds_truncate 0 ?f = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Dirichlet_Series.fds_truncate_zero", "fds_truncate ?m 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Dirichlet_Series.fds_subseries_0", "fds_subseries ?P 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Dirichlet_Series.fds_shift_by_0", "fds_shift (0::?'a) ?f = ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Dirichlet_Series.fds_shift_1", "fds_shift ?a 1 = 1",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Dirichlet_Series.fds_shift_zero", "fds_shift ?c 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Dirichlet_Series.fds_deriv_const", "fds_deriv (fds_const ?c) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Dirichlet_Series.fds_deriv_of_int", "fds_deriv (of_int ?n) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Dirichlet_Series.fds_deriv_of_nat", "fds_deriv (of_nat ?n) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Dirichlet_Series.fds_deriv_of_real", "fds_deriv (of_real ?n) = 0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Dirichlet_Series.eval_fds_const",
     "eval_fds (fds_const ?c) = (%_. ?c)",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       t_empty)),
    ("Dirichlet_Series.fds_const_of_int",
     "fds_const (of_int ?c) = of_int ?c",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Dirichlet_Series.numeral_fds", "numeral ?n = fds_const (numeral ?n)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_const_of_nat",
     "fds_const (of_nat ?c) = of_nat ?c",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Dirichlet_Series.fds_integral_0", "fds_integral ?a 0 = fds_const ?a",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Dirichlet_Series.fds_const_of_real",
     "fds_const (of_real ?c) = of_real ?c",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Dirichlet_Series.fds_ln_1", "fds_ln ?l 1 = fds_const ?l",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Dirichlet_Series.fds_ln_0", "fds_ln ?l 0 = fds_const ?l",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Dirichlet_Series.fds_nth_const_Suc_0",
     "fds_nth (fds_const ?c) (Suc 0) = ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 1, template_hole 0)),
       template_var 0)),
    ("Dirichlet_Series.fds_nth_Suc_0_fds_deriv",
     "fds_nth (fds_deriv ?f) (Suc 0) = (0::?'a)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 2, template_hole 1)),
       template_hole 0)),
    ("Dirichlet_Series.inverse_const_fds",
     "inverse (fds_const ?c) = fds_const (inverse ?c)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_zeta_commutes", "fds_zeta * ?f = ?f * fds_zeta",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Dirichlet_Series.fds_const_uminus",
     "fds_const (- ?b) = - fds_const ?b",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Dirichlet_Series.fds_exp_const",
     "fds_exp (fds_const ?c) = fds_const (exp ?c)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_shift_const",
     "fds_shift ?a (fds_const ?c) = fds_const ?c",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Dirichlet_Series.fds_deriv_uminus",
     "fds_deriv (- ?f) = - fds_deriv ?f",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 1, template_var 0)))),
    ("Dirichlet_Series.fds_ln_const",
     "fds_ln ?l (fds_const ?c) = fds_const ?l",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 1))),
    ("Dirichlet_Series.fds_of_real_const",
     "fds_of_real (fds_const ?c) = fds_const (of_real ?c)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_of_real_minus",
     "fds_of_real (- ?f) = - fds_of_real ?f",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Dirichlet_Series.fds_of_real_deriv",
     "fds_of_real (fds_deriv ?f) = fds_deriv (fds_of_real ?f)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Dirichlet_Series.fds_nth_Suc_0_fds_ln",
     "fds_nth (fds_ln ?l ?f) (Suc 0) = ?l",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_hole 0)),
       template_var 1)),
    ("Dirichlet_Series.fds_exp_numeral",
     "fds_exp (numeral ?n) = fds_const (exp (numeral ?n))",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Dirichlet_Series.fds_integral_fds_deriv",
     "fds_integral (fds_nth ?f 1) (fds_deriv ?f) = ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Dirichlet_Series.fds_abs_converges_imp_converges",
     "fds_abs_converges ?f ?s ==> fds_converges ?f ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Dirichlet_Series.eval_fds_at_0",
     "eval_fds ?f (0::?'a) = (\<Sum>n. fds_nth ?f n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app (template_hole 1, t_empty))),
    ("Dirichlet_Series.fds_nth_of_real",
     "fds_nth (fds_of_real ?f) ?n = of_real (fds_nth ?f ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_nth_uminus",
     "fds_nth (- ?g) = (%n. - fds_nth ?g n)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       t_empty)),
    ("Dirichlet_Series.dirichlet_prod_fds_nth_fds_right",
     "dirichlet_prod ?f (fds_nth (fds ?g)) = dirichlet_prod ?f ?g",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Dirichlet_Series.dirichlet_prod_fds_nth_fds_left",
     "dirichlet_prod (fds_nth (fds ?f)) ?g = dirichlet_prod ?f ?g",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Dirichlet_Series.fds_nth_norm",
     "fds_nth (fds_norm ?f) ?n = norm (fds_nth ?f ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_truncate_truncate'",
     "fds_truncate ?m (fds_truncate ?m ?f) = fds_truncate ?m ?f",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Dirichlet_Series.fds_subseries_minus",
     "fds_subseries ?P (- ?f) = - fds_subseries ?P ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_scale_uminus",
     "fds_scale ?c (- ?f) = - fds_scale ?c ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_shift_uminus",
     "fds_shift ?c (- ?f) = - fds_shift ?c ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_shift_inverse",
     "fds_shift ?a (inverse ?f) = inverse (fds_shift ?a ?f)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_deriv_shift",
     "fds_deriv (fds_shift ?c ?f) = fds_shift ?c (fds_deriv ?f)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Dirichlet_Series.fds_truncate_deriv",
     "fds_truncate ?m (fds_deriv ?f) = fds_deriv (fds_truncate ?m ?f)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_subseries_deriv",
     "fds_subseries ?P (fds_deriv ?f) = fds_deriv (fds_subseries ?P ?f)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_deriv_fds_ln",
     "fds_deriv (fds_ln ?l ?f) = fds_deriv ?f / ?f",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 0)),
         template_var 0))),
    ("Dirichlet_Series.fds_nth_norm_mult_nonneg",
     "0 <= fds_nth (fds_norm ?f * fds_norm ?g) ?n",
     template_inequation
      (less_equals, template_hole 4,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Dirichlet_Series.fds_subseries_1", "?P 1 ==> fds_subseries ?P 1 = 1",
     template_implication
      ([template_predicate
         (template_app (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Dirichlet_Series.fds_abs_converges_uminus",
     "fds_abs_converges ?f ?s ==> fds_abs_converges (- ?f) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Dirichlet_Series.fds_converges_uminus",
     "fds_converges ?f ?s ==> fds_converges (- ?f) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Dirichlet_Series.fds_nth_exp_Suc_0",
     "fds_nth (fds_exp ?f) (Suc 0) = exp (fds_nth ?f 1)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app (template_hole 3, template_hole 2)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 5, template_var 0),
           template_hole 0)))),
    ("Dirichlet_Series.fds_nth_mult",
     "fds_nth (?f * ?g) = dirichlet_prod (fds_nth ?f) (fds_nth ?g)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Dirichlet_Series.inverse_mult_fds",
     "inverse (?f * ?g) = inverse ?f * inverse ?g",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Dirichlet_Series.fds_const_mult",
     "fds_const (?a * ?b) = fds_const ?a * fds_const ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Dirichlet_Series.fds_const_add",
     "fds_const (?a + ?b) = fds_const ?a + fds_const ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Dirichlet_Series.fds_const_minus",
     "fds_const (?a - ?b) = fds_const ?a - fds_const ?b",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Dirichlet_Series.fds_deriv_minus",
     "fds_deriv (?f - ?g) = fds_deriv ?f - fds_deriv ?g",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Dirichlet_Series.fds_deriv_add",
     "fds_deriv (?f + ?g) = fds_deriv ?f + fds_deriv ?g",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)))),
    ("Dirichlet_Series.fds_integral_minus",
     "fds_integral (- ?a) (- ?f) = - fds_integral ?a ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_of_real_add",
     "fds_of_real (?f + ?g) = fds_of_real ?f + fds_of_real ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Dirichlet_Series.fds_of_real_mult",
     "fds_of_real (?f * ?g) = fds_of_real ?f * fds_of_real ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Dirichlet_Series.fds_abs_converges_integral",
     "fds_abs_converges ?f ?s ==>
      fds_abs_converges (fds_integral ?c ?f) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Dirichlet_Series.fds_abs_converges_subseries",
     "fds_abs_converges ?f ?s ==>
      fds_abs_converges (fds_subseries ?P ?f) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Dirichlet_Series.fds_scale_one", "0 < ?c ==> fds_scale ?c 1 = 1",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Dirichlet_Series.fds_truncate_one",
     "0 < ?m ==> fds_truncate ?m 1 = 1",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_hole 0))),
    ("Dirichlet_Series.fds_nth_zeta_pos",
     "0 < ?n ==> fds_nth fds_zeta ?n = (1::?'a)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("Dirichlet_Series.fds_nth_Suc_0_exp",
     "fds_nth (fds_exp ?f) (Suc 0) = exp (fds_nth ?f (Suc 0))",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 2, template_hole 1))))),
    ("Dirichlet_Series.fds_eval_shift",
     "eval_fds (fds_shift ?c ?f) ?z = eval_fds ?f (?z - ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Dirichlet_Series.fds_nth_const",
     "fds_nth (fds_const ?c) = (%n. if n = 1 then ?c else (0::?'a))",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       t_empty)),
    ("Dirichlet_Series.fds_nth_inverse",
     "fds_nth (inverse ?f) =
      dirichlet_inverse (fds_nth ?f) (inverse (fds_nth ?f 1))",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 0),
             template_hole 0))))),
    ("Dirichlet_Series.fds_nth_scaleR",
     "fds_nth (?c *\<^sub>R ?f) = (%n. ?c *\<^sub>R fds_nth ?f n)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       t_empty)),
    ("Dirichlet_Series.fds_abs_converges_shift",
     "fds_abs_converges (fds_shift ?c ?f) ?z =
      fds_abs_converges ?f (?z - ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Dirichlet_Series.fds_converges_shift",
     "fds_converges (fds_shift ?c ?f) ?z = fds_converges ?f (?z - ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Dirichlet_Series.fds_scale_scale",
     "fds_scale ?c (fds_scale ?c' ?f) = fds_scale (?c * ?c') ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Dirichlet_Series.fds_truncate_truncate",
     "fds_truncate ?m (fds_truncate ?n ?f) = fds_truncate (min ?m ?n) ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Dirichlet_Series.fds_truncate_inverse",
     "fds_truncate ?m (inverse (fds_truncate ?m ?f)) =
      fds_truncate ?m (inverse ?f)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_truncate_exp",
     "fds_truncate ?m (fds_exp (fds_truncate ?m ?f)) =
      fds_truncate ?m (fds_exp ?f)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_shift_shift",
     "fds_shift ?c (fds_shift ?c' ?f) = fds_shift (?c' + ?c) ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Dirichlet_Series.fds_subseries_shift",
     "fds_subseries ?P (fds_shift ?c ?f) =
      fds_shift ?c (fds_subseries ?P ?f)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_truncate_shift",
     "fds_truncate ?m (fds_shift ?a ?f) =
      fds_shift ?a (fds_truncate ?m ?f)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_shift_power",
     "fds_shift ?c (?f ^ ?n) = fds_shift ?c ?f ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Dirichlet_Series.fds_shift_integral",
     "fds_shift ?b (fds_integral ?a ?f) =
      fds_integral ?a (fds_shift ?b ?f)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_shift_ln",
     "fds_shift ?a (fds_ln ?l ?f) = fds_ln ?l (fds_shift ?a ?f)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_of_real_higher_deriv",
     "(fds_deriv ^^ ?n) (fds_of_real ?f) =
      fds_of_real ((fds_deriv ^^ ?n) ?f)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 1), template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)))),
    ("Dirichlet_Series.fds_subseries_const",
     "?P 1 ==> fds_subseries ?P (fds_const ?c) = fds_const ?c",
     template_implication
      ([template_predicate
         (template_app (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_nth_fds'",
     "?f 0 = (0::?'a) ==> fds_nth (fds ?f) = ?f",
     template_implication
      ([template_equation
         (template_app (template_var 0, template_hole 4), template_hole 3)],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Dirichlet_Series.inverse_fds_nonunit",
     "fds_nth ?f 1 = (0::?'a) ==> inverse ?f = 0",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 0),
            template_hole 4),
          template_hole 3)],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Dirichlet_Series.fds_left_inverse_unique",
     "?f * ?g = 1 ==> ?f = inverse ?g",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1)],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_right_inverse_unique",
     "?f * ?g = 1 ==> ?g = inverse ?f",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 1), template_var 0),
          template_hole 1)],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Dirichlet_Series.fds_nth_fds",
     "fds_nth (fds ?f) ?n = (if ?n = 0 then 0::?'a else ?f ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1)),
               template_hole 0),
             template_app (template_var 1, template_var 0))
           ))),
    ("Dirichlet_Series.fds_nth_mult_const_right",
     "fds_nth (?f * fds_const ?c) ?n = fds_nth ?f ?n * ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Dirichlet_Series.fds_nth_mult_const_left",
     "fds_nth (fds_const ?c * ?f) ?n = ?c * fds_nth ?f ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.eval_fds_at_1",
     "eval_fds ?f (1::?'a) = (\<Sum>n. fds_nth ?f n / of_nat n)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("Dirichlet_Series.fds_deriv_scale",
     "fds_deriv (fds_scale ?c ?f) =
      of_nat ?c * fds_scale ?c (fds_deriv ?f)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 3, template_var 0))))),
    ("Dirichlet_Series.fds_scale_const",
     "0 < ?c ==> fds_scale ?c (fds_const ?c') = fds_const ?c'",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_scale_of_int",
     "0 < ?c ==> fds_scale ?c (of_int ?n) = of_int ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_scale_of_nat",
     "0 < ?c ==> fds_scale ?c (of_nat ?n) = of_nat ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_scale_numeral",
     "0 < ?c ==> fds_scale ?c (numeral ?n) = numeral ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_truncate_const",
     "0 < ?m ==> fds_truncate ?m (fds_const ?c) = fds_const ?c",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_nth_fds_pos",
     "0 < ?n ==> fds_nth (fds ?f) ?n = ?f ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1),
         template_app (template_var 0, template_var 1)))),
    ("Dirichlet_Series.fds_nth_const_not_Suc_0",
     "?n ~= 1 ==> fds_nth (fds_const ?c) ?n = (0::?'a)",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("Dirichlet_Series.fds_nth_one_not_Suc_0",
     "?n ~= Suc 0 ==> fds_nth 1 ?n = (0::?'a)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 0,
              template_app (template_hole 5, template_hole 4))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0))),
    ("Dirichlet_Series.fds_nth_subseries",
     "fds_nth (fds_subseries ?P ?f) ?n =
      (if ?P ?n then fds_nth ?f ?n else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 2, template_var 0)),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Dirichlet_Series.fds_nth_power_Suc_0",
     "fds_nth (?f ^ ?n) (Suc 0) = fds_nth ?f (Suc 0) ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 2, template_hole 1))),
         template_var 0))),
    ("Dirichlet_Series.fds_nth_sum",
     "fds_nth (sum ?f ?A) ?n = (SUM x:?A. fds_nth (?f x) ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Dirichlet_Series.fds_nth_shift",
     "fds_nth (fds_shift ?c ?f) ?n = fds_nth ?f ?n * nat_power ?n ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Dirichlet_Series.fds_nth_deriv",
     "fds_nth (fds_deriv ?f) ?n = - ln (real ?n) *\<^sub>R fds_nth ?f ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_nth_plus",
     "fds_nth (?f + ?g) = (%n. fds_nth ?f n + fds_nth ?g n)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       t_empty)),
    ("Dirichlet_Series.fds_nth_minus",
     "fds_nth (?f - ?g) = (%n. fds_nth ?f n - fds_nth ?g n)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       t_empty)),
    ("Dirichlet_Series.fds_subseries_diff",
     "fds_subseries ?P (?f - ?g) =
      fds_subseries ?P ?f - fds_subseries ?P ?g",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_scale_mult",
     "fds_scale ?c (?f * ?g) = fds_scale ?c ?f * fds_scale ?c ?g",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_subseries_add",
     "fds_subseries ?P (?f + ?g) =
      fds_subseries ?P ?f + fds_subseries ?P ?g",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_truncate_power",
     "fds_truncate ?m (fds_truncate ?m ?f ^ ?n) =
      fds_truncate ?m (?f ^ ?n)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_scale_add",
     "fds_scale ?c (?f + ?g) = fds_scale ?c ?f + fds_scale ?c ?g",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_truncate_add_strong",
     "fds_truncate ?m (?f + ?g) = fds_truncate ?m ?f + fds_truncate ?m ?g",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_shift_add",
     "fds_shift ?c (?f + ?g) = fds_shift ?c ?f + fds_shift ?c ?g",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_shift_divide",
     "fds_shift ?a (?f / ?g) = fds_shift ?a ?f / fds_shift ?a ?g",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_shift_mult",
     "fds_shift ?c (?f * ?g) = fds_shift ?c ?f * fds_shift ?c ?g",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_shift_minus",
     "fds_shift ?c (?f - ?g) = fds_shift ?c ?f - fds_shift ?c ?g",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_scale_minus",
     "fds_scale ?c (?f - ?g) = fds_scale ?c ?f - fds_scale ?c ?g",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_truncate_ln",
     "fds_truncate ?m (fds_ln ?l (fds_truncate ?m ?f)) =
      fds_truncate ?m (fds_ln ?l ?f)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_scale_shift",
     "fds_shift ?d (fds_scale ?c ?f) =
      fds_scale ?c (fds_shift (?c * ?d) ?f)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Dirichlet_Series.fds_ind_nth_power",
     "0 < ?k ==> fds_ind (is_nth_power ?k) = fds_scale ?k fds_zeta",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Dirichlet_Series.fds_nth_scale_nonpower",
     "~ is_nth_power ?c ?n ==> fds_nth (fds_scale ?c ?f) ?n = (0::?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("Dirichlet_Series.fds_abs_converges_ln",
     "fds_abs_converges (fds_deriv ?f / ?f) ?s ==>
      fds_abs_converges (fds_ln ?l ?f) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 2)),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Dirichlet_Series.fds_nth_truncate",
     "fds_nth (fds_truncate ?m ?f) ?n =
      (if ?n <= ?m then fds_nth ?f ?n else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Dirichlet_Series.fds_deriv_times",
     "fds_deriv (?f * ?g) = fds_deriv ?f * ?g + ?f * fds_deriv ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 2, template_var 0))))),
    ("Dirichlet_Series.fds_nth_norm_mult_le",
     "norm (fds_nth (?f * ?g) ?n)
      <= fds_nth (fds_norm ?f * fds_norm ?g) ?n",
     template_inequation
      (less_equals,
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Dirichlet_Series.eval_fds_uminus",
     "fds_converges ?f ?s ==> eval_fds (- ?f) ?s = - eval_fds ?f ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0))))),
    ("Dirichlet_Series.fds_right_inverse",
     "fds_nth ?f 1 ~= (0::?'a) ==> ?f * inverse ?f = 1",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Dirichlet_Series.fds_left_inverse",
     "fds_nth ?f 1 ~= (0::?'a) ==> inverse ?f * ?f = 1",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 0),
                template_hole 5),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Dirichlet_Series.fds_deriv_fds_integral",
     "fds_nth ?f (Suc 0) = (0::?'a) ==>
      fds_deriv (fds_integral ?c ?f) = ?f",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1),
            template_app (template_hole 5, template_hole 4)),
          template_hole 3)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Dirichlet_Series.The_cong", "(!!x. ?P x = ?Q x) ==> The ?P = The ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_nth_prod_Suc_0",
     "fds_nth (prod ?f ?A) (Suc 0) = (PROD x:?A. fds_nth (?f x) (Suc 0))",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Dirichlet_Series.eval_fds_at_nat",
     "eval_fds ?f (of_nat ?k) = (\<Sum>n. fds_nth ?f n / of_nat n ^ ?k)",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Dirichlet_Series.fds_truncate_divide",
     "fds_truncate ?m (fds_truncate ?m ?f / fds_truncate ?m ?g) =
      fds_truncate ?m (?f / ?g)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_truncate_mult",
     "fds_truncate ?m (fds_truncate ?m ?f * fds_truncate ?m ?g) =
      fds_truncate ?m (?f * ?g)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_subseries_sum",
     "fds_subseries ?P (sum ?f ?A) = (SUM x:?A. fds_subseries ?P (?f x))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Dirichlet_Series.fds_truncate_add",
     "fds_truncate ?m (fds_truncate ?m ?f + fds_truncate ?m ?g) =
      fds_truncate ?m (?f + ?g)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.sum_fds",
     "(SUM x:?A. fds (?f x)) = fds (%n. SUM x:?A. ?f x n)",
     template_equation
      (template_app
        (template_app (template_hole 2, t_empty), template_var 0),
       template_app (template_hole 1, t_empty))),
    ("Dirichlet_Series.fds_shift_sum",
     "fds_shift ?a (sum ?f ?A) = (SUM x:?A. fds_shift ?a (?f x))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Dirichlet_Series.fds_shift_prod",
     "fds_shift ?a (prod ?f ?A) = (PROD x:?A. fds_shift ?a (?f x))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Dirichlet_Series.fds_integral_diff",
     "fds_integral (?a - ?b) (?f - ?g) =
      fds_integral ?a ?f - fds_integral ?b ?g",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_integral_add",
     "fds_integral (?a + ?b) (?f + ?g) =
      fds_integral ?a ?f + fds_integral ?b ?g",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_abs_converges_diff",
     "[| fds_abs_converges ?f ?s; fds_abs_converges ?g ?s |]
      ==> fds_abs_converges (?f - ?g) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Dirichlet_Series.fds_abs_converges_add",
     "[| fds_abs_converges ?f ?s; fds_abs_converges ?g ?s |]
      ==> fds_abs_converges (?f + ?g) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Dirichlet_Series.fds_converges_diff",
     "[| fds_converges ?f ?s; fds_converges ?g ?s |]
      ==> fds_converges (?f - ?g) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Dirichlet_Series.fds_converges_add",
     "[| fds_converges ?f ?s; fds_converges ?g ?s |]
      ==> fds_converges (?f + ?g) ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Dirichlet_Series.fds_nth_mult_Suc_0",
     "fds_nth (?f * ?g) (Suc 0) = fds_nth ?f (Suc 0) * fds_nth ?g (Suc 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app (template_hole 2, template_hole 1)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app (template_hole 2, template_hole 1))))),
    ("Dirichlet_Series.eval_fds_at_numeral",
     "eval_fds ?f (numeral ?k) =
      (\<Sum>n. fds_nth ?f n / of_nat n ^ numeral ?k)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1),
         template_app (template_hole 6, template_var 0)),
       template_app (template_hole 5, t_empty))),
    ("Dirichlet_Series.fds_converges_iff",
     "fds_converges ?f ?s =
      (%n. fds_nth ?f n / nat_power n ?s) sums eval_fds ?f ?s",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_nth_scale_power",
     "0 < ?c ==> fds_nth (fds_scale ?c ?f) (?n ^ ?c) = fds_nth ?f ?n",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_eq_fds_iff'",
     "?f 0 = ?g 0 ==> (fds ?f = fds ?g) = (?f = ?g)",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_hole 4),
          template_app (template_var 0, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_equation (template_var 1, template_var 0)))),
    ("Dirichlet_Series.fds_eq_iff",
     "(?f = ?g) = (ALL n>0. fds_nth ?f n = fds_nth ?g n)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Dirichlet_Series.fds_eq_fds_iff",
     "(fds ?f = fds ?g) = (ALL n>0. ?f n = ?g n)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Dirichlet_Series.completely_multiplicative_function_only_pows",
     "completely_multiplicative_function (fds_nth ?f) ==>
      completely_multiplicative_function
       (fds_nth (fds_primepow_subseries ?p ?f))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, t_empty), template_var 1)))
           ))),
    ("Dirichlet_Series.eval_fds_scale",
     "0 < ?c ==>
      eval_fds (fds_scale ?c ?f) ?z = eval_fds ?f (of_nat ?c * ?z)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Dirichlet_Series.fds_abs_converges_scale",
     "0 < ?c ==>
      fds_abs_converges (fds_scale ?c ?f) ?z =
      fds_abs_converges ?f (of_nat ?c * ?z)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Dirichlet_Series.fds_converges_scale",
     "0 < ?c ==>
      fds_converges (fds_scale ?c ?f) ?z =
      fds_converges ?f (of_nat ?c * ?z)",
     template_implication
      ([template_inequation (less_than, template_hole 5, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Dirichlet_Series.eval_fds_truncate",
     "eval_fds (fds_truncate ?n ?f) ?s =
      (SUM k = 1..?n. fds_nth ?f k / nat_power k ?s)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 2)))),
    ("Dirichlet_Series.fds_converges_altdef",
     "fds_converges ?f ?s =
      (%n. fds_nth ?f (Suc n) / nat_power (Suc n) ?s) sums eval_fds ?f ?s",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 5, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_exp_times_fds_nth_0",
     "fds_const (exp (fds_nth ?f (Suc 0))) *
      fds_exp (?f - fds_const (fds_nth ?f (Suc 0))) =
      fds_exp ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_hole 2))))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app (template_hole 3, template_hole 2)))))),
       template_app (template_hole 1, template_var 0))),
    ("Dirichlet_Series.completely_multiplicative_fds_deriv",
     "completely_multiplicative_function ?f ==>
      fds_deriv (fds ?f) = - fds (%n. ?f n * mangoldt n) * fds ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2, template_app (template_hole 4, t_empty))),
           template_app (template_hole 4, template_var 0))))),
    ("Dirichlet_Series.completely_multiplicative_fds_deriv'",
     "completely_multiplicative_function (fds_nth ?f) ==>
      fds_deriv ?f = - fds (%n. fds_nth ?f n * mangoldt n) * ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app (template_hole 7, template_var 0))
            )],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3, template_app (template_hole 2, t_empty))),
           template_var 0)))),
    ("Dirichlet_Series.fds_subseries_integral",
     "?P 1 | ?c = (0::?'a) ==>
      fds_subseries ?P (fds_integral ?c ?f) =
      fds_integral ?c (fds_subseries ?P ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_var 2, template_hole 5)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Dirichlet_Series.eval_fds_eqI",
     "(%n. fds_nth ?f (Suc n) / nat_power (Suc n) ?s) sums ?L ==>
      eval_fds ?f ?s = ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Dirichlet_Series.fds_cong",
     "(!!n. 0 < n ==> ?f n = ?g n) ==> fds ?f = fds ?g",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Dirichlet_Series.fds_eqI",
     "(!!n. 0 < n ==> fds_nth ?f n = fds_nth ?g n) ==> ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Dirichlet_Series.fds_eqI_truncate",
     "(!!m. 0 < m ==> fds_truncate m ?f = fds_truncate m ?g) ==> ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Dirichlet_Series.fds_nth_scale",
     "fds_nth (fds_scale ?c ?f) ?n =
      (if 0 < ?n & is_nth_power ?c ?n then fds_nth ?f (nth_root_nat ?c ?n)
       else (0::?'a))",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 0)),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0))),
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_hole 0))),
    ("Dirichlet_Series.fds_truncate_integral",
     "0 < ?m | ?c = (0::?'a) ==>
      fds_truncate ?m (fds_integral ?c ?f) =
      fds_integral ?c (fds_truncate ?m ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_hole 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Dirichlet_Series.suminf_fds_zeta_aux",
     "?f 0 = (0::?'a) ==>
      (\<Sum>n. fds_nth fds_zeta n / ?f n) = (\<Sum>n. (1::?'a) / ?f n)",
     template_implication
      ([template_equation
         (template_app (template_var 0, template_hole 6), template_hole 5)],
       template_equation
        (template_app (template_hole 4, t_empty),
         template_app (template_hole 4, t_empty)))),
    ("Dirichlet_Series.fds_deriv_eq_imp_eq",
     "[| fds_deriv ?f = fds_deriv ?g;
         fds_nth ?f (Suc 0) = fds_nth ?g (Suc 0) |]
      ==> ?f = ?g",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1),
            template_app (template_hole 1, template_hole 0)),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_app (template_hole 1, template_hole 0)))],
       template_equation (template_var 1, template_var 0))),
    ("Dirichlet_Series.fds_deriv_inverse",
     "fds_nth ?f (Suc 0) ~= (0::?'a) ==>
      fds_deriv (inverse ?f) = - fds_deriv ?f / ?f\<^sup>2",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 12, template_var 0),
                template_app (template_hole 11, template_hole 10)),
              template_hole 9)
            )],
       template_equation
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 7, template_var 0))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0))))))),
    ("Dirichlet_Series.finite_extensional_prod_nat",
     "[| finite ?A; 0 < ?b |]
      ==> finite {d: extensional ?A. prod d ?A = ?b}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_inequation (less_than, template_hole 7, template_var 0)],
       template_predicate
        (
           template_app
            (template_hole 6, template_app (template_hole 5, t_empty))
           ))),
    ("Dirichlet_Series.eval_fds_diff",
     "[| fds_converges ?f ?s; fds_converges ?g ?s |]
      ==> eval_fds (?f - ?g) ?s = eval_fds ?f ?s - eval_fds ?g ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("Dirichlet_Series.eval_fds_add",
     "[| fds_converges ?f ?s; fds_converges ?g ?s |]
      ==> eval_fds (?f + ?g) ?s = eval_fds ?f ?s + eval_fds ?g ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))))),
    ("Dirichlet_Series.fds_nth_power_eq_0",
     "[| ?n < 2 ^ ?k; fds_nth ?f 1 = (0::?'a) |]
      ==> fds_nth (?f ^ ?k) ?n = (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_hole 5))),
            template_var 1)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2),
          template_hole 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 2),
         template_hole 1))),
    ("Dirichlet_Series.fds_primepow_subseries_power",
     "fds_primepow_subseries ?p (?f ^ ?n) =
      fds_primepow_subseries ?p ?f ^ ?n",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, t_empty), template_var 1)),
         template_var 0))),
    ("Dirichlet_Series.fds_ln_power",
     "[| fds_nth ?f 1 ~= (0::?'a); ?l = of_nat ?n * ?l' |]
      ==> fds_ln ?l (?f ^ ?n) = of_nat ?n * fds_ln ?l' ?f",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_hole 8),
              template_hole 7)
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 1)),
            template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 3))))),
    ("Dirichlet_Series.fds_primepow_subseries_prod",
     "fds_primepow_subseries ?p (prod ?f ?A) =
      (PROD x:?A. fds_primepow_subseries ?p (?f x))",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Dirichlet_Series.fds_truncate_cong",
     "(!!n. [| 0 < ?m; 0 < n; n <= ?m |]
            ==> fds_nth ?f n = fds_nth ?f' n) ==>
      fds_truncate ?m ?f = fds_truncate ?m ?f'",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Dirichlet_Series.fds_primepow_subseries_mult",
     "fds_primepow_subseries ?p (?f * ?g) =
      fds_primepow_subseries ?p ?f * fds_primepow_subseries ?p ?g",
     template_equation
      (template_app
        (template_app (template_hole 6, t_empty),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 6, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 6, t_empty), template_var 0)))),
    ("Dirichlet_Series.fds_ln_mult",
     "[| fds_nth ?f 1 ~= (0::?'a); fds_nth ?g 1 ~= (0::?'a);
         ?l' + ?l'' = ?l |]
      ==> fds_ln ?l (?f * ?g) = fds_ln ?l' ?f + fds_ln ?l'' ?g",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_hole 6),
              template_hole 5)
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 7, template_var 3),
                template_hole 6),
              template_hole 5)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 4)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 3))))),
    ("Dirichlet_Series.fds_commutes",
     "(!!m n.
          [| 0 < m; 0 < n |]
          ==> fds_nth ?f m * fds_nth ?g n = fds_nth ?g n * fds_nth ?f m) ==>
      ?f * ?g = ?g * ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Dirichlet_Series.dirichlet_inverse_cong_simp",
     "[| !!m. [| 0 < m; m <= ?n |] ==> ?f m = ?f' m; ?i = ?i'; ?n = ?n' |]
      ==> dirichlet_inverse ?f ?i ?n = dirichlet_inverse ?f' ?i' ?n'",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_equation (template_var 2, template_var 1),
        template_equation (template_var 5, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 5),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0)))),
    ("Dirichlet_Series.fds_ln_prod",
     "[| !!x. x : ?A ==> fds_nth (?f x) 1 ~= (0::?'b); sum ?l' ?A = ?l |]
      ==> fds_ln ?l (prod ?f ?A) = (SUM x:?A. fds_ln (?l' x) (?f x))",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 4, t_empty), template_var 3),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, t_empty), template_var 3)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 3)))),
    ("Dirichlet_Series.fds_nth_prod",
     "[| finite ?A; ?A ~= {}; 0 < ?n |]
      ==> fds_nth (prod ?f ?A) ?n =
          (SUM d | d : extensional ?A & prod d ?A = ?n.
              PROD x:?A. fds_nth (?f x) (d x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 2)),
        template_negation
         (template_equation (template_var 2, template_hole 13)),
        template_inequation (less_than, template_hole 11, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, t_empty), template_var 2)),
           template_var 1),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 5, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.Dirichlet_SeriesMoreTemplates"
### 0.849s elapsed time, 1.187s cpu time, 0.119s GC time
val it = (): unit
