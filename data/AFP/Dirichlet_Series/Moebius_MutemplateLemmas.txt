   [("Moebius_Mu.abs_moebius_mu_le",
     "\<bar>moebius_mu ?n\<bar> <= (1::?'a)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Moebius_Mu.of_int_moebius_mu",
     "of_int (moebius_mu ?n) = moebius_mu ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Moebius_Mu.minus_1_power_ring_neq_zero",
     "(- (1::?'a)) ^ ?n ~= (0::?'a)",
     template_negation
      (
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)),
             template_var 0),
           template_hole 0)
         )),
    ("Moebius_Mu.dirichlet_prod_moebius_commute",
     "dirichlet_prod ?f moebius_mu = dirichlet_prod moebius_mu ?f",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Moebius_Mu.moebius_mu_formula",
     "moebius_mu ?n = dirichlet_inverse (%_. 1::?'a) (1::?'a) ?n",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_hole 0),
         template_var 0))),
    ("Moebius_Mu.moebius_mu_formula_int",
     "moebius_mu ?n = dirichlet_inverse (%_. 1) 1 ?n",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_hole 0),
         template_var 0))),
    ("Moebius_Mu.moebius_mu_eq_zero_iff",
     "(moebius_mu ?n = (0::?'a)) = (~ squarefree ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Moebius_Mu.moebius_mu_formula_real",
     "moebius_mu ?n = dirichlet_inverse (%_. 1) 1 ?n",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_hole 0),
         template_var 0))),
    ("Moebius_Mu.moebius_mu_code",
     "moebius_mu ?n = of_int (dirichlet_inverse (%_. 1) 1 ?n)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_hole 0),
           template_var 0)))),
    ("Moebius_Mu.moebius_commute",
     "?x * moebius_mu ?n = moebius_mu ?n * ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Moebius_Mu.fds_moebius_commute",
     "?x * fds moebius_mu = fds moebius_mu * ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, template_hole 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Moebius_Mu.moebius_mu_not_squarefree",
     "~ squarefree ?n ==> moebius_mu ?n = (0::?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Moebius_Mu.fds_moebius_inversion",
     "(?f = fds moebius_mu * ?g) = (?g = ?f * fds_zeta)",
     template_bimplication
      (template_equation
        (template_var 1,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1)),
           template_var 0)),
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 3, template_var 1),
           template_hole 0)))),
    ("Moebius_Mu.moebius_mu_squarefree_eq'",
     "squarefree ?n ==>
      moebius_mu ?n = (- (1::?'a)) ^ size (prime_factorization ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app (template_hole 5, template_var 0),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Moebius_Mu.moebius_mu_squarefree_eq",
     "squarefree ?n ==>
      moebius_mu ?n = (- (1::?'a)) ^ card (prime_factors ?n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)),
           template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))))),
    ("Moebius_Mu.completely_multiplicative_fds_inverse",
     "completely_multiplicative_function ?f ==>
      inverse (fds ?f) = fds (%n. moebius_mu n * ?f n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app (template_hole 2, t_empty)))),
    ("Moebius_Mu.sum_moebius_mu_divisors'",
     "(SUM d | d dvd ?n. moebius_mu d) =
      (if ?n = 1 then 1::?'a else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty),
              template_app (template_hole 6, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_hole 1),
             template_hole 0)
           ))),
    ("Moebius_Mu.completely_multiplicative_fds_inverse'",
     "completely_multiplicative_function (fds_nth ?f) ==>
      inverse ?f = fds (%n. moebius_mu n * fds_nth ?f n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0))
            )],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, t_empty)))),
    ("Moebius_Mu.sum_moebius_mu_divisors",
     "1 < ?n ==> (SUM d | d dvd ?n. moebius_mu d) = (0::?'a)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 2, t_empty)),
         template_hole 0))),
    ("Moebius_Mu.moebius_mu_power",
     "[| 1 < ?a; 1 < ?n |] ==> moebius_mu (?a ^ ?n) = (0::?'a)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation (less_than, template_hole 4, template_var 0)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Moebius_Mu.completely_multiplicative_iff_inverse_moebius_mu",
     "multiplicative_function ?f ==>
      completely_multiplicative_function ?f =
      (ALL n. dirichlet_inverse ?f (1::?'a) n = moebius_mu n * ?f n)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app (template_hole 6, template_var 0),
         template_app (template_hole 5, t_empty)))),
    ("Moebius_Mu.moebius_mu_power'",
     "moebius_mu (?a ^ ?n) =
      (if ?a = 1 | ?n = 0 then 1::?'a
       else if ?n = 1 then moebius_mu ?a else (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_hole 3)),
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 2))),
               template_hole 1),
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 4, template_var 0),
                     template_hole 3)),
                 template_app (template_hole 8, template_var 1)),
               template_hole 0))
           ))),
    ("Moebius_Mu.selberg_aux'",
     "0 < ?n ==>
      mangoldt ?n * of_real (ln (real ?n)) +
      dirichlet_prod mangoldt mangoldt ?n =
      dirichlet_prod moebius_mu (%b. (of_real (ln (real b)))\<^sup>2) ?n",
     template_implication
      ([template_inequation (less_than, template_hole 13, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 0)),
               template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 0))))),
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 9),
               template_hole 9),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4), t_empty),
           template_var 0)))),
    ("Moebius_Mu.sum_divisors_moebius_mu_times_multiplicative",
     "[| multiplicative_function ?f; 0 < ?n |]
      ==> (SUM d | d dvd ?n. moebius_mu d * ?f d) =
          (PROD p:prime_factors ?n. (1::?'a) - ?f p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_inequation (less_than, template_hole 11, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 9, t_empty),
           template_app (template_hole 6, t_empty)),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Moebius_Mu.moebius_inversion",
     "[| !!n. 0 < n ==> ?g n = (SUM d | d dvd n. ?f d); 0 < ?n |]
      ==> ?f ?n = dirichlet_prod moebius_mu ?g ?n",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_inequation (less_than, template_hole 6, template_var 0)],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2),
           template_var 0))))]
