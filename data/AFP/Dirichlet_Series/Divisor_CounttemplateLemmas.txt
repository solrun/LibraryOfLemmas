   [("Divisor_Count.divisor_sigma_1", "divisor_sigma ?x 1 = (1::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Divisor_Count.divisor_sigma_0", "divisor_sigma ?x 0 = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Divisor_Count.divisor_sigma_Suc_0",
     "divisor_sigma ?x (Suc 0) = (1::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app (template_hole 2, template_hole 1)),
       template_hole 0)),
    ("Divisor_Count.divisor_count_altdef",
     "divisor_count ?n = divisor_sigma 0 ?n",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Divisor_Count.divisor_sum_altdef",
     "divisor_sum ?n = divisor_sigma 1 ?n",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Divisor_Count.divisor_sigma_0_left_nat",
     "divisor_sigma 0 ?n = divisor_count ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Divisor_Count.divisor_sigma_1_left",
     "divisor_sigma (1::?'a) ?n = of_nat (divisor_sum ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Divisor_Count.divisor_sigma_0_left",
     "divisor_sigma (0::?'a) ?n = of_nat (divisor_count ?n)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_hole 2), template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Divisor_Count.divisor_sigma_1_left_nat",
     "divisor_sigma (Suc 0) ?n = divisor_sum ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Divisor_Count.divisor_sigma_of_nat",
     "divisor_sigma (of_nat ?x) ?n = of_nat (divisor_sigma ?x ?n)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Divisor_Count.fds_divisor_sigma",
     "fds (divisor_sigma ?x) = fds_zeta * fds_shift ?x fds_zeta",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_hole 1)))),
    ("Divisor_Count.inverse_divisor_sigma",
     "inverse (fds (divisor_sigma ?a)) =
      fds_shift ?a (fds moebius_mu) * fds moebius_mu",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 4, template_hole 0))),
         template_app (template_hole 4, template_hole 0)))),
    ("Divisor_Count.divisor_sigma_prime",
     "prime ?p ==> divisor_sigma ?x ?p = nat_power ?p ?x + (1::?'a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_hole 0)))),
    ("Divisor_Count.divisor_count_dvd_mono",
     "[| ?a dvd ?b; ?b ~= 0 |] ==> divisor_count ?a <= divisor_count ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Divisor_Count.divisor_sum_dvd_mono",
     "[| ?a dvd ?b; ?b ~= 0 |] ==> divisor_sum ?a <= divisor_sum ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Divisor_Count.divisor_count_naive",
     "divisor_count ?n =
      (if ?n = 0 then 0
       else fold_atLeastAtMost_nat
             (%d acc. if d dvd ?n then Suc acc else acc) 1 ?n 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 4)),
               template_hole 4),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, t_empty),
                   template_hole 0),
                 template_var 0),
               template_hole 4))
           ))),
    ("Divisor_Count.divisor_sum_naive",
     "divisor_sum ?n =
      (if ?n = 0 then 0
       else fold_atLeastAtMost_nat
             (%d acc. if d dvd ?n then d + acc else acc) 1 ?n 0)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 4)),
               template_hole 4),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 3, t_empty),
                   template_hole 0),
                 template_var 0),
               template_hole 4))
           ))),
    ("Divisor_Count.divisor_sigma_naive",
     "divisor_sigma ?x ?n =
      (if ?n = 0 then 0::?'a
       else fold_atLeastAtMost_nat
             (%d acc. if d dvd ?n then nat_power d ?x + acc else acc) 1 ?n
             (0::?'a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 0),
                   template_hole 6)),
               template_hole 5),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, t_empty),
                   template_hole 0),
                 template_var 0),
               template_hole 5))
           ))),
    ("Divisor_Count.divisor_sigma_prime_power_nat",
     "prime ?p ==>
      divisor_sigma ?x (?p ^ ?k) =
      (if ?x = 0 then Suc ?k
       else (?p ^ (?x * Suc ?k) - 1) div (?p ^ ?x - 1))",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 8, template_var 1),
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 9, template_var 1),
                     template_hole 5)),
                 template_app (template_hole 4, template_var 0)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 7, template_var 2),
                         template_app
                          (template_app (template_hole 1, template_var 1),
                           template_app
                            (template_hole 4, template_var 0)))),
                     template_hole 0)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 7, template_var 2),
                       template_var 1)),
                   template_hole 0)))
             )))),
    ("Divisor_Count.divisor_sigma_prime_power_field",
     "prime ?p ==>
      divisor_sigma ?x (?p ^ ?k) =
      (if nat_power ?p ?x = (1::?'a) then of_nat (?k + 1)
       else (nat_power ?p ?x ^ Suc ?k - (1::?'a)) /
            (nat_power ?p ?x - (1::?'a)))",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 11, template_var 1),
                template_app
                 (template_app (template_hole 10, template_var 2),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 12,
                       template_app
                        (template_app (template_hole 8, template_var 2),
                         template_var 1)),
                     template_hole 7)),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_hole 4))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app
                          (template_hole 1,
                           template_app
                            (template_app (template_hole 8, template_var 2),
                             template_var 1)),
                         template_app (template_hole 0, template_var 0))),
                     template_hole 7)),
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 8, template_var 2),
                       template_var 1)),
                   template_hole 7)))
             ))))]
