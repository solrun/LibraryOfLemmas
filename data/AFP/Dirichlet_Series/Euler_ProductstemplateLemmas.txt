   [("Euler_Products.prime_factors_power_subset",
     "prime_factors (?x ^ ?n) <= prime_factors ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2, template_app (template_hole 1, template_var 1)))),
    ("Euler_Products.completely_multiplicative_summable_norm",
     "[| summable (%n. norm (?f n)); completely_multiplicative_function ?f;
         prime ?p |]
      ==> norm (?f ?p) < 1",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_hole 4, template_app (template_var 1, template_var 0)),
         template_hole 0))),
    ("Euler_Products.abs_convergent_euler_product'",
     "[| summable (%n. norm (?f n));
         completely_multiplicative_function ?f |]
      ==> abs_convergent_prod
           (%p. if prime p then inverse ((1::?'a) - ?f p) else (1::?'a))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Euler_Products.abs_convergent_euler_product",
     "[| summable (%n. norm (?f n)); multiplicative_function ?f |]
      ==> abs_convergent_prod
           (%p. if prime p then \<Sum>n. ?f (p ^ n) else (1::?'a))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Euler_Products.euler_product_LIMSEQ'",
     "[| summable (%n. norm (?f n));
         completely_multiplicative_function ?f |]
      ==> (%n. PROD p<=n.
               if prime p then inverse ((1::?'a) - ?f p) else (1::?'a))
          \<longlonglongrightarrow> (\<Sum>n. ?f n)",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate
         (template_app (template_hole 11, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 10, t_empty),
               template_app
                (template_hole 2, template_app (template_hole 1, t_empty))),
             template_hole 0)
           ))),
    ("Euler_Products.euler_product_LIMSEQ",
     "[| summable (%n. norm (?f n)); multiplicative_function ?f |]
      ==> (%n. PROD p<=n. if prime p then \<Sum>n. ?f (p ^ n) else (1::?'a))
          \<longlonglongrightarrow> (\<Sum>n. ?f n)",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 9, t_empty),
               template_app
                (template_hole 1, template_app (template_hole 5, t_empty))),
             template_hole 0)
           ))),
    ("Euler_Products.bij_betw_prime_powers",
     "bij_betw (%g. PROD p:{p. p <= ?n & prime p}. p ^ g p)
       ({p. p <= ?n & prime p} \<rightarrow>\<^sub>E UNIV)
       {m. 0 < m & prime_factors m <= {..?n}}",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 14, t_empty),
             template_app
              (template_app
                (template_hole 7, template_app (template_hole 11, t_empty)),
               t_empty)),
           template_app (template_hole 11, t_empty))
         )),
    ("Euler_Products.prime_power_product_in_Pi",
     "(%g. PROD p:{p. p <= ?n & prime p}. p ^ g p)
      : ({p. p <= ?n & prime p} \<rightarrow>\<^sub>E UNIV) \<rightarrow>
        {m. 0 < m & prime_factors m <= {..?n}}",
     template_predicate
      (
         template_app
          (template_app (template_hole 15, t_empty),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 12, t_empty)),
                 t_empty)),
             t_empty))
         ))]
