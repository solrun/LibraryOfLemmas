   [("Assertions_ext.idem_FD", "?P \<sqsubseteq>\<^sub>F\<^sub>D ?P",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Assertions_ext.bot_FD", "\<bottom> \<sqsubseteq>\<^sub>F\<^sub>D ?Q",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Assertions_ext.idem_F", "?P \<sqsubseteq>\<^sub>F ?P",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Assertions_ext.bot_F", "\<bottom> \<sqsubseteq>\<^sub>F ?Q",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Assertions_ext.idem_T", "?P \<sqsubseteq>\<^sub>T ?P",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Assertions_ext.bot_T", "\<bottom> \<sqsubseteq>\<^sub>T ?Q",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Assertions_ext.idem_D", "?P \<sqsubseteq>\<^sub>D ?P",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Assertions_ext.bot_D", "\<bottom> \<sqsubseteq>\<^sub>D ?Q",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Assertions_ext.idem_DT", "?P \<sqsubseteq>\<^sub>D\<^sub>T ?P",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Assertions_ext.STOP_leDT", "?P \<sqsubseteq>\<^sub>D\<^sub>T STOP",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Assertions_ext.bot_DT", "\<bottom> \<sqsubseteq>\<^sub>D\<^sub>T ?Q",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 0)
         )),
    ("Assertions_ext.CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P_has_all_failures_Un",
     "CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P UNIV \<sqsubseteq>\<^sub>F ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)
         )),
    ("Assertions_ext.DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_has_all_traces",
     "DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P UNIV \<sqsubseteq>\<^sub>T ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)
         )),
    ("Assertions_ext.CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P_has_all_traces",
     "CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P UNIV \<sqsubseteq>\<^sub>T ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 0)
         )),
    ("Assertions_ext.CHAOS_DF_refine_FD",
     "CHAOS ?A \<sqsubseteq>\<^sub>F\<^sub>D DF ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Assertions_ext.DF_RUN_refine_FD",
     "DF ?A \<sqsubseteq>\<^sub>F\<^sub>D RUN ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Assertions_ext.DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_DF_refine_FD",
     "DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A \<sqsubseteq>\<^sub>F\<^sub>D
      DF ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Assertions_ext.CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P_CHAOS_refine_FD",
     "CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A \<sqsubseteq>\<^sub>F\<^sub>D
      CHAOS ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Assertions_ext.CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P_DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_refine_FD",
     "CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A \<sqsubseteq>\<^sub>F\<^sub>D
      DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Assertions_ext.CHAOS_DF_refine_F",
     "CHAOS ?A \<sqsubseteq>\<^sub>F DF ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Assertions_ext.DF_RUN_refine_F", "DF ?A \<sqsubseteq>\<^sub>F RUN ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Assertions_ext.DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_DF_refine_F",
     "DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A \<sqsubseteq>\<^sub>F DF ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Assertions_ext.CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P_CHAOS_refine_F",
     "CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A \<sqsubseteq>\<^sub>F
      CHAOS ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Assertions_ext.CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P_DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_refine_F",
     "CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A \<sqsubseteq>\<^sub>F
      DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Assertions_ext.CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P_has_all_failures_ev",
     "CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P
       (events_of ?P) \<sqsubseteq>\<^sub>F
      ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))),
           template_var 0)
         )),
    ("Assertions_ext.events_CHAOS", "events_of (CHAOS ?A) = ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Assertions_ext.events_DF", "events_of (DF ?A) = ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Assertions_ext.events_DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P",
     "events_of (DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A) = ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Assertions_ext.events_RUN", "events_of (RUN ?A) = ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Assertions_ext.events_CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P",
     "events_of (CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A) = ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Assertions_ext.div_free_CHAOS", "D (CHAOS ?A) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Assertions_ext.div_free_DF", "D (DF ?A) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Assertions_ext.div_free_DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P",
     "D (DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Assertions_ext.div_free_RUN", "D (RUN ?A) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Assertions_ext.div_free_CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P",
     "D (CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A) = {}",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Assertions_ext.Mprefix_refines_Mndet_FD",
     "mndet ?A ?P \<sqsubseteq>\<^sub>F\<^sub>D Mprefix ?A ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Assertions_ext.mono_ndet_det_FD",
     "(?P |-| ?S) \<sqsubseteq>\<^sub>F\<^sub>D (?P [+] ?S)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Assertions_ext.Mprefix_refines_Mndet_F",
     "mndet ?A ?P \<sqsubseteq>\<^sub>F Mprefix ?A ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Assertions_ext.mono_ndet_det_F",
     "(?P |-| ?S) \<sqsubseteq>\<^sub>F (?P [+] ?S)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Assertions_ext.Mprefix_refines_Mndet_T",
     "mndet ?A ?P \<sqsubseteq>\<^sub>T Mprefix ?A ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Assertions_ext.mono_ndet_det_T",
     "(?P |-| ?S) \<sqsubseteq>\<^sub>T (?P [+] ?S)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Assertions_ext.Mprefix_refines_Mndet_D",
     "mndet ?A ?P \<sqsubseteq>\<^sub>D Mprefix ?A ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Assertions_ext.mono_ndet_det_D",
     "(?P |-| ?S) \<sqsubseteq>\<^sub>D (?P [+] ?S)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Assertions_ext.Mprefix_refines_Mndet_DT",
     "mndet ?A ?P \<sqsubseteq>\<^sub>D\<^sub>T Mprefix ?A ?P",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Assertions_ext.mono_ndet_det_DT",
     "(?P |-| ?S) \<sqsubseteq>\<^sub>D\<^sub>T (?P [+] ?S)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Assertions_ext.RUN_unfold", "RUN ?A = Mprefix ?A (%z. RUN ?A)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Assertions_ext.FD_F",
     "?P \<sqsubseteq>\<^sub>F\<^sub>D ?Q ==> ?P \<sqsubseteq>\<^sub>F ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Assertions_ext.FD_D",
     "?P \<sqsubseteq>\<^sub>F\<^sub>D ?Q ==> ?P \<sqsubseteq>\<^sub>D ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Assertions_ext.le_F_T",
     "?P \<sqsubseteq>\<^sub>F ?Q ==> ?P \<sqsubseteq>\<^sub>T ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Assertions_ext.DT_T",
     "?P \<sqsubseteq>\<^sub>D\<^sub>T ?Q ==> ?P \<sqsubseteq>\<^sub>T ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Assertions_ext.DT_D",
     "?P \<sqsubseteq>\<^sub>D\<^sub>T ?Q ==> ?P \<sqsubseteq>\<^sub>D ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Assertions_ext.DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_all_front_tickfree_traces2",
     "front_tickFree ?s ==>
      ?s : T (DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P UNIV)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Assertions_ext.CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P_all_front_tickfree_traces2",
     "front_tickFree ?s ==>
      ?s : T (CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P UNIV)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Assertions_ext.CHAOS_all_tickfree_trace2",
     "tickFree ?s ==> ?s : T (CHAOS UNIV)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Assertions_ext.DF_all_tickfree_traces2",
     "tickFree ?s ==> ?s : T (DF UNIV)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Assertions_ext.RUN_all_tickfree_traces2",
     "tickFree ?s ==> ?s : T (RUN UNIV)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)))
           ))),
    ("Assertions_ext.CHAOS_unfold",
     "CHAOS ?A = (STOP |-| Mprefix ?A (%z. CHAOS ?A))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 0), t_empty)))),
    ("Assertions_ext.DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_unfold",
     "DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A =
      ((\<sqinter>z\<in>?A \<rightarrow> 
           DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A) |-|
       SKIP)",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)),
         template_hole 0))),
    ("Assertions_ext.mono_ndet_FD_left",
     "?P \<sqsubseteq>\<^sub>F\<^sub>D ?Q ==>
      (?P |-| ?S) \<sqsubseteq>\<^sub>F\<^sub>D ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Assertions_ext.mono_ndet_FD_right",
     "?P \<sqsubseteq>\<^sub>F\<^sub>D ?Q ==>
      (?S |-| ?P) \<sqsubseteq>\<^sub>F\<^sub>D ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Assertions_ext.mono_ndet_F_left",
     "?P \<sqsubseteq>\<^sub>F ?Q ==> (?P |-| ?S) \<sqsubseteq>\<^sub>F ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Assertions_ext.mono_ndet_F_right",
     "?P \<sqsubseteq>\<^sub>F ?Q ==> (?S |-| ?P) \<sqsubseteq>\<^sub>F ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Assertions_ext.mono_ndet_T_left",
     "?P \<sqsubseteq>\<^sub>T ?Q ==> (?P |-| ?S) \<sqsubseteq>\<^sub>T ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Assertions_ext.mono_ndet_T_right",
     "?P \<sqsubseteq>\<^sub>T ?Q ==> (?S |-| ?P) \<sqsubseteq>\<^sub>T ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Assertions_ext.mono_ndet_D_left",
     "?P \<sqsubseteq>\<^sub>D ?Q ==> (?P |-| ?S) \<sqsubseteq>\<^sub>D ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Assertions_ext.mono_ndet_D_right",
     "?P \<sqsubseteq>\<^sub>D ?Q ==> (?S |-| ?P) \<sqsubseteq>\<^sub>D ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Assertions_ext.mono_ndet_DT_left",
     "?P \<sqsubseteq>\<^sub>D\<^sub>T ?Q ==>
      (?P |-| ?S) \<sqsubseteq>\<^sub>D\<^sub>T ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_var 1)
           ))),
    ("Assertions_ext.mono_ndet_DT_right",
     "?P \<sqsubseteq>\<^sub>D\<^sub>T ?Q ==>
      (?S |-| ?P) \<sqsubseteq>\<^sub>D\<^sub>T ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_var 1)
           ))),
    ("Assertions_ext.CHAOS_subset_FD",
     "?A <= ?B ==> CHAOS ?B \<sqsubseteq>\<^sub>F\<^sub>D CHAOS ?A",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Assertions_ext.CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P_subset_FD",
     "?A <= ?B ==>
      CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?B \<sqsubseteq>\<^sub>F\<^sub>D
      CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Assertions_ext.RUN_subset_DT",
     "?A <= ?B ==> RUN ?B \<sqsubseteq>\<^sub>D\<^sub>T RUN ?A",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Assertions_ext.CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P_has_all_failures",
     "events_of ?P <= ?A ==>
      CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A \<sqsubseteq>\<^sub>F ?P",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Assertions_ext.events_div", "D ?P ~= {} ==> events_of ?P = UNIV",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Assertions_ext.CHAOS_all_tickfree_traces1",
     "T (CHAOS ?A) = {s. set s <= ev ` ?A}",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Assertions_ext.DF_all_tickfree_traces1",
     "T (DF ?A) = {s. set s <= ev ` ?A}",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Assertions_ext.RUN_all_tickfree_traces1",
     "T (RUN ?A) = {s. set s <= ev ` ?A}",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Assertions_ext.traces_CHAOS_sub",
     "T (CHAOS ?A) <= {s. set s <= ev ` ?A}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app (template_hole 4, t_empty))),
    ("Assertions_ext.traces_RUN_sub", "{s. set s <= ev ` ?A} <= T (RUN ?A)",
     template_inequation
      (less_equals, template_app (template_hole 6, t_empty),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Assertions_ext.mono_hide_FD",
     "?P \<sqsubseteq>\<^sub>F\<^sub>D ?Q ==>
      ?P \ ?A \<sqsubseteq>\<^sub>F\<^sub>D ?Q \ ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Assertions_ext.mono_hide_F",
     "?P \<sqsubseteq>\<^sub>F ?Q ==>
      ?P \ ?A \<sqsubseteq>\<^sub>F ?Q \ ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Assertions_ext.mono_seq_F_right",
     "?S \<sqsubseteq>\<^sub>F ?S' ==>
      (?P `;` ?S) \<sqsubseteq>\<^sub>F (?P `;` ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Assertions_ext.mono_hide_T",
     "?P \<sqsubseteq>\<^sub>T ?Q ==>
      ?P \ ?A \<sqsubseteq>\<^sub>T ?Q \ ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Assertions_ext.mono_seq_T_right",
     "?S \<sqsubseteq>\<^sub>T ?S' ==>
      (?P `;` ?S) \<sqsubseteq>\<^sub>T (?P `;` ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Assertions_ext.mono_seq_D_right",
     "?S \<sqsubseteq>\<^sub>D ?S' ==>
      (?P `;` ?S) \<sqsubseteq>\<^sub>D (?P `;` ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Assertions_ext.mono_seq_DT_left",
     "?P \<sqsubseteq>\<^sub>D\<^sub>T ?P' ==>
      (?P `;` ?S) \<sqsubseteq>\<^sub>D\<^sub>T (?P' `;` ?S)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Assertions_ext.mono_hide_DT",
     "?P \<sqsubseteq>\<^sub>D\<^sub>T ?Q ==>
      ?P \ ?A \<sqsubseteq>\<^sub>D\<^sub>T ?Q \ ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Assertions_ext.mono_seq_DT_right",
     "?S \<sqsubseteq>\<^sub>D\<^sub>T ?S' ==>
      (?P `;` ?S) \<sqsubseteq>\<^sub>D\<^sub>T (?P `;` ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Assertions_ext.mono_mprefix_T_set",
     "?A <= ?B ==> Mprefix ?B ?P \<sqsubseteq>\<^sub>T Mprefix ?A ?P",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_mprefix_D_set",
     "?A <= ?B ==> Mprefix ?B ?P \<sqsubseteq>\<^sub>D Mprefix ?A ?P",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_mprefix_DT_set",
     "?A <= ?B ==>
      Mprefix ?B ?P \<sqsubseteq>\<^sub>D\<^sub>T Mprefix ?A ?P",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.trans_FD",
     "[| ?P \<sqsubseteq>\<^sub>F\<^sub>D ?Q;
         ?Q \<sqsubseteq>\<^sub>F\<^sub>D ?S |]
      ==> ?P \<sqsubseteq>\<^sub>F\<^sub>D ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Assertions_ext.trans_F",
     "[| ?P \<sqsubseteq>\<^sub>F ?Q; ?Q \<sqsubseteq>\<^sub>F ?S |]
      ==> ?P \<sqsubseteq>\<^sub>F ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Assertions_ext.F_D_FD",
     "[| ?P \<sqsubseteq>\<^sub>F ?Q; ?P \<sqsubseteq>\<^sub>D ?Q |]
      ==> ?P \<sqsubseteq>\<^sub>F\<^sub>D ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Assertions_ext.trans_T",
     "[| ?P \<sqsubseteq>\<^sub>T ?Q; ?Q \<sqsubseteq>\<^sub>T ?S |]
      ==> ?P \<sqsubseteq>\<^sub>T ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Assertions_ext.D_T_DT",
     "[| ?P \<sqsubseteq>\<^sub>D ?Q; ?P \<sqsubseteq>\<^sub>T ?Q |]
      ==> ?P \<sqsubseteq>\<^sub>D\<^sub>T ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Assertions_ext.trans_D",
     "[| ?P \<sqsubseteq>\<^sub>D ?Q; ?Q \<sqsubseteq>\<^sub>D ?S |]
      ==> ?P \<sqsubseteq>\<^sub>D ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Assertions_ext.trans_DT",
     "[| ?P \<sqsubseteq>\<^sub>D\<^sub>T ?Q;
         ?Q \<sqsubseteq>\<^sub>D\<^sub>T ?S |]
      ==> ?P \<sqsubseteq>\<^sub>D\<^sub>T ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Assertions_ext.le_FD_adm",
     "[| cont ?u; monofun ?v |]
      ==> adm (%x. ?u x \<sqsubseteq>\<^sub>F\<^sub>D ?v x)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Assertions_ext.le_F_adm",
     "[| cont ?u; monofun ?v |]
      ==> adm (%x. ?u x \<sqsubseteq>\<^sub>F ?v x)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Assertions_ext.le_T_adm",
     "[| cont ?u; monofun ?v |]
      ==> adm (%x. ?u x \<sqsubseteq>\<^sub>T ?v x)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Assertions_ext.le_D_adm",
     "[| cont ?u; monofun ?v |]
      ==> adm (%x. ?u x \<sqsubseteq>\<^sub>D ?v x)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Assertions_ext.le_DT_adm",
     "[| cont ?u; monofun ?v |]
      ==> adm (%x. ?u x \<sqsubseteq>\<^sub>D\<^sub>T ?v x)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Assertions_ext.mono_mprefix_F_process",
     "ALL x. ?P x \<sqsubseteq>\<^sub>F ?Q x ==>
      Mprefix ?A ?P \<sqsubseteq>\<^sub>F Mprefix ?A ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Assertions_ext.mono_mprefix_T_process",
     "ALL x. ?P x \<sqsubseteq>\<^sub>T ?Q x ==>
      Mprefix ?A ?P \<sqsubseteq>\<^sub>T Mprefix ?A ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Assertions_ext.mono_mprefix_D_process",
     "ALL x. ?P x \<sqsubseteq>\<^sub>D ?Q x ==>
      Mprefix ?A ?P \<sqsubseteq>\<^sub>D Mprefix ?A ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Assertions_ext.mono_mprefix_DT_process",
     "ALL x. ?P x \<sqsubseteq>\<^sub>D\<^sub>T ?Q x ==>
      Mprefix ?A ?P \<sqsubseteq>\<^sub>D\<^sub>T Mprefix ?A ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Assertions_ext.DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_subset_FD",
     "[| ?A ~= {}; ?A <= ?B |]
      ==> DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P
           ?B \<sqsubseteq>\<^sub>F\<^sub>D
          DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Assertions_ext.mono_mndet_FD_process",
     "ALL x:?A. ?P x \<sqsubseteq>\<^sub>F\<^sub>D ?P' x ==>
      mndet ?A ?P \<sqsubseteq>\<^sub>F\<^sub>D mndet ?A ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_mprefix_FD_process",
     "ALL x:?A. ?P x \<sqsubseteq>\<^sub>F\<^sub>D ?P' x ==>
      Mprefix ?A ?P \<sqsubseteq>\<^sub>F\<^sub>D Mprefix ?A ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_mndet_F_process",
     "ALL x:?A. ?P x \<sqsubseteq>\<^sub>F ?Q x ==>
      mndet ?A ?P \<sqsubseteq>\<^sub>F mndet ?A ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_mndet_T_process",
     "ALL x:?A. ?P x \<sqsubseteq>\<^sub>T ?Q x ==>
      mndet ?A ?P \<sqsubseteq>\<^sub>T mndet ?A ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_mndet_D_process",
     "ALL x:?A. ?P x \<sqsubseteq>\<^sub>D ?Q x ==>
      mndet ?A ?P \<sqsubseteq>\<^sub>D mndet ?A ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_mndet_DT_process",
     "ALL x:?A. ?P x \<sqsubseteq>\<^sub>D\<^sub>T ?Q x ==>
      mndet ?A ?P \<sqsubseteq>\<^sub>D\<^sub>T mndet ?A ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_det_FD",
     "[| ?P \<sqsubseteq>\<^sub>F\<^sub>D ?P';
         ?S \<sqsubseteq>\<^sub>F\<^sub>D ?S' |]
      ==> (?P [+] ?S) \<sqsubseteq>\<^sub>F\<^sub>D (?P' [+] ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_ndet_FD",
     "[| ?P \<sqsubseteq>\<^sub>F\<^sub>D ?P';
         ?S \<sqsubseteq>\<^sub>F\<^sub>D ?S' |]
      ==> (?P |-| ?S) \<sqsubseteq>\<^sub>F\<^sub>D (?P' |-| ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_seq_FD",
     "[| ?P \<sqsubseteq>\<^sub>F\<^sub>D ?P';
         ?S \<sqsubseteq>\<^sub>F\<^sub>D ?S' |]
      ==> (?P `;` ?S) \<sqsubseteq>\<^sub>F\<^sub>D (?P' `;` ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_ndet_F",
     "[| ?P \<sqsubseteq>\<^sub>F ?P'; ?S \<sqsubseteq>\<^sub>F ?S' |]
      ==> (?P |-| ?S) \<sqsubseteq>\<^sub>F (?P' |-| ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_det_T",
     "[| ?P \<sqsubseteq>\<^sub>T ?P'; ?S \<sqsubseteq>\<^sub>T ?S' |]
      ==> (?P [+] ?S) \<sqsubseteq>\<^sub>T (?P' [+] ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_ndet_T",
     "[| ?P \<sqsubseteq>\<^sub>T ?P'; ?S \<sqsubseteq>\<^sub>T ?S' |]
      ==> (?P |-| ?S) \<sqsubseteq>\<^sub>T (?P' |-| ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_det_D",
     "[| ?P \<sqsubseteq>\<^sub>D ?P'; ?S \<sqsubseteq>\<^sub>D ?S' |]
      ==> (?P [+] ?S) \<sqsubseteq>\<^sub>D (?P' [+] ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_ndet_D",
     "[| ?P \<sqsubseteq>\<^sub>D ?P'; ?S \<sqsubseteq>\<^sub>D ?S' |]
      ==> (?P |-| ?S) \<sqsubseteq>\<^sub>D (?P' |-| ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_det_DT",
     "[| ?P \<sqsubseteq>\<^sub>D\<^sub>T ?P';
         ?S \<sqsubseteq>\<^sub>D\<^sub>T ?S' |]
      ==> (?P [+] ?S) \<sqsubseteq>\<^sub>D\<^sub>T (?P' [+] ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_ndet_DT",
     "[| ?P \<sqsubseteq>\<^sub>D\<^sub>T ?P';
         ?S \<sqsubseteq>\<^sub>D\<^sub>T ?S' |]
      ==> (?P |-| ?S) \<sqsubseteq>\<^sub>D\<^sub>T (?P' |-| ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_seq_DT",
     "[| ?P \<sqsubseteq>\<^sub>D\<^sub>T ?P';
         ?S \<sqsubseteq>\<^sub>D\<^sub>T ?S' |]
      ==> (?P `;` ?S) \<sqsubseteq>\<^sub>D\<^sub>T (?P' `;` ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_mndet_FD_set",
     "[| ?A ~= {}; ?A <= ?B |]
      ==> mndet ?B ?P \<sqsubseteq>\<^sub>F\<^sub>D mndet ?A ?P",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_mndet_F_set",
     "[| ?A ~= {}; ?A <= ?B |]
      ==> mndet ?B ?P \<sqsubseteq>\<^sub>F mndet ?A ?P",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_mndet_T_set",
     "[| ?A ~= {}; ?A <= ?B |]
      ==> mndet ?B ?P \<sqsubseteq>\<^sub>T mndet ?A ?P",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_mndet_D_set",
     "[| ?A ~= {}; ?A <= ?B |]
      ==> mndet ?B ?P \<sqsubseteq>\<^sub>D mndet ?A ?P",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.mono_mndet_DT_set",
     "[| ?A ~= {}; ?A <= ?B |]
      ==> mndet ?B ?P \<sqsubseteq>\<^sub>D\<^sub>T mndet ?A ?P",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Assertions_ext.DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_all_front_tickfree_traces1",
     "T (DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A) =
      {s. front_tickFree s & set s <= ev ` ?A Un {tick}}",
     template_equation
      (template_app
        (template_hole 12, template_app (template_hole 11, template_var 0)),
       template_app (template_hole 10, t_empty))),
    ("Assertions_ext.CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P_all_front_tickfree_traces1",
     "T (CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A) =
      {s. front_tickFree s & set s <= ev ` ?A Un {tick}}",
     template_equation
      (template_app
        (template_hole 12, template_app (template_hole 11, template_var 0)),
       template_app (template_hole 10, t_empty))),
    ("Assertions_ext.traces_CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P_sub",
     "T (CHAOS\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A)
      <= {s. front_tickFree s & set s <= ev ` ?A Un {tick}}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 12, template_app (template_hole 11, template_var 0)),
       template_app (template_hole 10, t_empty))),
    ("Assertions_ext.traces_DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P_sub",
     "{s. front_tickFree s & set s <= ev ` ?A Un {tick}}
      <= T (DF\<^sub>S\<^sub>K\<^sub>I\<^sub>P ?A)",
     template_inequation
      (less_equals, template_app (template_hole 12, t_empty),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Assertions_ext.mono_sync_FD",
     "[| ?P \<sqsubseteq>\<^sub>F\<^sub>D ?P';
         ?Q \<sqsubseteq>\<^sub>F\<^sub>D ?Q' |]
      ==> (?P \<lbrakk>?A\<rbrakk> ?Q) \<sqsubseteq>\<^sub>F\<^sub>D
          (?P' \<lbrakk>?A\<rbrakk> ?Q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("Assertions_ext.mono_sync_DT",
     "[| ?P \<sqsubseteq>\<^sub>D\<^sub>T ?P';
         ?Q \<sqsubseteq>\<^sub>D\<^sub>T ?Q' |]
      ==> (?P \<lbrakk>?A\<rbrakk> ?Q) \<sqsubseteq>\<^sub>D\<^sub>T
          (?P' \<lbrakk>?A\<rbrakk> ?Q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("Assertions_ext.CHAOS_has_all_tickFree_failures",
     "[| tickFree ?a; {x. ev x : set ?a} <= ?A |]
      ==> (?a, ?b) : F (CHAOS ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 7, t_empty),
          template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           )))]
