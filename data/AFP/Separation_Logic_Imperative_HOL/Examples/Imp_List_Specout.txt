Loading theory "Draft.Syntax_Match" (required by "Draft.Imp_List_SpecTemplates" via "Draft.Imp_List_Spec" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple" via "Draft.Assertions")
Loading theory "Draft.Run" (required by "Draft.Imp_List_SpecTemplates" via "Draft.Imp_List_Spec" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple")
Loading theory "Draft.Imperative_HOL_Add" (required by "Draft.Imp_List_SpecTemplates" via "Draft.Imp_List_Spec" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple" via "Draft.Assertions")
Loading theory "Draft.Templates" (required by "Draft.Imp_List_SpecTemplates" via "Draft.ExtrEqs")
consts
  is_exn :: "'a option => bool"
### No equation for constructor "None"
consts
  the_state :: "'a option => 'a"
### ML warning (line 40 of "$AFP/Separation_Logic_Imperative_HOL/Tools/Syntax_Match.thy"):
### Pattern is not exhaustive.
### ML warning (line 53 of "$AFP/Separation_Logic_Imperative_HOL/Tools/Syntax_Match.thy"):
### Pattern is not exhaustive.
structure Syntax_Match:
  sig
    val fo_nomatch_simproc: Proof.context -> cterm -> thm option
    val fo_nomatch_thm: thm
    val nomatch_simproc: Proof.context -> cterm -> thm option
    val nomatch_thm: thm
  end
Proofs for inductive predicate(s) "run"
locale ac_operator
  fixes f :: "'a => 'a => 'a"
  assumes "ac_operator f"
  Proving monotonicity ...
### theory "Draft.Imperative_HOL_Add"
### 0.059s elapsed time, 0.262s cpu time, 0.000s GC time
Array.update ?a ?i ?x ?h = Array.set ?a ((Array.get ?h ?a)[?i := ?x]) ?h
### theory "Draft.Syntax_Match"
### 0.077s elapsed time, 0.313s cpu time, 0.000s GC time
Loading theory "Draft.Assertions" (required by "Draft.Imp_List_SpecTemplates" via "Draft.Imp_List_Spec" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.087s elapsed time, 0.354s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Imp_List_SpecTemplates")
### theory "Draft.Run"
### 0.270s elapsed time, 0.882s cpu time, 0.041s GC time
Found termination order: "{}"
instantiation
  assn :: one
  one_assn == one_class.one :: assn
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.556s elapsed time, 1.311s cpu time, 0.120s GC time
Found termination order: "{}"
instantiation
  assn :: times
  times_assn == times :: assn => assn => assn
Found termination order: "{}"
instantiation
  assn :: comm_monoid_mult
Found termination order: "{}"
instantiation
  assn :: boolean_algebra
  minus_assn == minus :: assn => assn => assn
  uminus_assn == uminus :: assn => assn
  bot_assn == bot :: assn
  top_assn == top :: assn
  inf_assn == inf :: assn => assn => assn
  sup_assn == sup :: assn => assn => assn
  less_eq_assn == less_eq :: assn => assn => bool
  less_assn == less :: assn => assn => bool
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Assertions"
### 1.050s elapsed time, 1.846s cpu time, 0.173s GC time
Loading theory "Draft.Hoare_Triple" (required by "Draft.Imp_List_SpecTemplates" via "Draft.Imp_List_Spec" via "Draft.Sep_Main" via "Draft.Automation")
### theory "Draft.Hoare_Triple"
### 0.270s elapsed time, 0.335s cpu time, 0.090s GC time
Loading theory "Draft.Automation" (required by "Draft.Imp_List_SpecTemplates" via "Draft.Imp_List_Spec" via "Draft.Sep_Main")
(EX x xa. ?P \<Longrightarrow>\<^sub>A ?Q1 x xa) -->
(?P \<Longrightarrow>\<^sub>A \<exists>\<^sub>Ax xa. ?Q1 x xa)
### ML warning (line 401 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Pattern is not exhaustive.
### ML warning (line 407 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Pattern is not exhaustive.
### ML warning (line 418 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Matches are not exhaustive.
### ML warning (line 424 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Matches are not exhaustive.
### ML warning (line 489 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Handler catches all exceptions.
infix 1 THEN_IGNORE_NEWGOALS
structure Seplogic_Auto:
  sig
    val REPEAT_DETERM': ('a -> tactic) -> 'a -> thm -> thm Seq.seq
    val THEN_IGNORE_NEWGOALS:
       (int -> tactic) * (int -> thm -> thm Seq.seq) ->
         int -> thm -> thm Seq.seq
    val assn_simproc: simproc
    val assn_simproc_fun: Proof.context -> cterm -> thm option
    val decon_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val dflt_simps_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val dflt_tac: Proof.context -> int -> tactic
    val dfs_opr:
       string ->
         ('a -> term -> 'a * term option) -> 'a -> term -> 'a * term option
    val dfs_replace_atomic: string -> term -> term -> term -> term option
    val eintros_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val extract_ex_tac: Proof.context -> int -> thm -> thm Seq.seq
    val find_similar: (term -> term) -> term list -> (term * term) option
    val frame_inference_tac: Proof.context -> int -> tactic
    val heap_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val heap_rule_tac: Proof.context -> thm list -> int -> tactic
    val match_frame_tac: (int -> tactic) -> Proof.context -> int -> tactic
    val sep_auto_modifiers: Method.modifier parser list
    val sep_autosolve_tac:
       bool -> bool -> Proof.context -> int -> thm -> thm Seq.seq
    val solve_entails_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val solve_entails_tac: Proof.context -> int -> tactic
    val tr_term: term -> string
    val vcg_modifiers: (Token.T list -> Method.modifier * Token.T list) list
    val vcg_step_tac: Proof.context -> int -> tactic
    val vcg_tac: Proof.context -> int -> thm -> thm Seq.seq
  end
### Cannot skip proof of schematic goal statement
?i < length ?xs ==>
<?a \<mapsto>\<^sub>a ?xs> Array.nth ?a ?i
<%r. ?a \<mapsto>\<^sub>a ?xs * \<up> (r = ?xs ! ?i)>
### theory "Draft.Automation"
### 0.546s elapsed time, 0.587s cpu time, 0.059s GC time
Loading theory "Draft.Sep_Main" (required by "Draft.Imp_List_SpecTemplates" via "Draft.Imp_List_Spec")
### theory "Draft.Sep_Main"
### 0.021s elapsed time, 0.022s cpu time, 0.000s GC time
Loading theory "Draft.Imp_List_Spec" (required by "Draft.Imp_List_SpecTemplates")
locale imp_list
  fixes is_list :: "'a list => 'l => assn"
  assumes "imp_list is_list"
locale imp_list_empty
  fixes is_list :: "'a list => 'l => assn"
    and empty :: "'l Heap"
  assumes "imp_list_empty is_list empty"
locale imp_list_is_empty
  fixes is_list :: "'a list => 'l => assn"
    and is_empty :: "'l => bool Heap"
  assumes "imp_list_is_empty is_list is_empty"
locale imp_list_append
  fixes is_list :: "'a list => 'l => assn"
    and append :: "'a => 'l => 'l Heap"
  assumes "imp_list_append is_list append"
locale imp_list_prepend
  fixes is_list :: "'a list => 'l => assn"
    and prepend :: "'a => 'l => 'l Heap"
  assumes "imp_list_prepend is_list prepend"
locale imp_list_head
  fixes is_list :: "'a list => 'l => assn"
    and head :: "'l => 'a Heap"
  assumes "imp_list_head is_list head"
locale imp_list_pop
  fixes is_list :: "'a list => 'l => assn"
    and pop :: "'l => ('a * 'l) Heap"
  assumes "imp_list_pop is_list pop"
locale imp_list_rotate
  fixes is_list :: "'a list => 'l => assn"
    and rotate :: "'l => 'l Heap"
  assumes "imp_list_rotate is_list rotate"
locale imp_list_reverse
  fixes is_list :: "'a list => 'l => assn"
    and reverse :: "'l => 'l Heap"
  assumes "imp_list_reverse is_list reverse"
locale imp_list_iterate
  fixes is_list :: "'a list => 'l => assn"
    and is_it :: "'a list => 'l => 'a list => 'it => assn"
    and it_init :: "'l => 'it Heap"
    and it_has_next :: "'it => bool Heap"
    and it_next :: "'it => ('a * 'it) Heap"
  assumes "imp_list_iterate is_list is_it it_init it_has_next it_next"
### theory "Draft.Imp_List_Spec"
### 0.107s elapsed time, 0.107s cpu time, 0.000s GC time
Loading theory "Draft.Imp_List_SpecTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Imp_List_SpecTemplates"
### 0.576s elapsed time, 1.044s cpu time, 0.482s GC time
val it = (): unit
