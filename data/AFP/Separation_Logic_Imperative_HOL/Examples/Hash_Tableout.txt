Loading theory "Draft.Syntax_Match" (required by "Draft.Hash_TableTemplates" via "Draft.Hash_Table" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple" via "Draft.Assertions")
Loading theory "Draft.Imperative_HOL_Add" (required by "Draft.Hash_TableTemplates" via "Draft.Hash_Table" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple" via "Draft.Assertions")
Loading theory "Draft.Templates" (required by "Draft.Hash_TableTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Run" (required by "Draft.Hash_TableTemplates" via "Draft.Hash_Table" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple")
consts
  is_exn :: "'a option => bool"
### No equation for constructor "None"
consts
  the_state :: "'a option => 'a"
### ML warning (line 40 of "$AFP/Separation_Logic_Imperative_HOL/Tools/Syntax_Match.thy"):
### Pattern is not exhaustive.
### ML warning (line 53 of "$AFP/Separation_Logic_Imperative_HOL/Tools/Syntax_Match.thy"):
### Pattern is not exhaustive.
structure Syntax_Match:
  sig
    val fo_nomatch_simproc: Proof.context -> cterm -> thm option
    val fo_nomatch_thm: thm
    val nomatch_simproc: Proof.context -> cterm -> thm option
    val nomatch_thm: thm
  end
### theory "Draft.Imperative_HOL_Add"
### 0.045s elapsed time, 0.215s cpu time, 0.000s GC time
Array.update ?a ?i ?x ?h = Array.set ?a ((Array.get ?h ?a)[?i := ?x]) ?h
Proofs for inductive predicate(s) "run"
  Proving monotonicity ...
locale ac_operator
  fixes f :: "'a => 'a => 'a"
  assumes "ac_operator f"
### theory "Draft.Syntax_Match"
### 0.077s elapsed time, 0.310s cpu time, 0.000s GC time
Loading theory "Draft.Assertions" (required by "Draft.Hash_TableTemplates" via "Draft.Hash_Table" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.327s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Hash_TableTemplates")
### theory "Draft.Run"
### 0.267s elapsed time, 0.881s cpu time, 0.036s GC time
Found termination order: "{}"
instantiation
  assn :: one
  one_assn == one_class.one :: assn
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.548s elapsed time, 1.309s cpu time, 0.112s GC time
Found termination order: "{}"
instantiation
  assn :: times
  times_assn == times :: assn => assn => assn
Found termination order: "{}"
instantiation
  assn :: comm_monoid_mult
Found termination order: "{}"
instantiation
  assn :: boolean_algebra
  minus_assn == minus :: assn => assn => assn
  uminus_assn == uminus :: assn => assn
  bot_assn == bot :: assn
  top_assn == top :: assn
  inf_assn == inf :: assn => assn => assn
  sup_assn == sup :: assn => assn => assn
  less_eq_assn == less_eq :: assn => assn => bool
  less_assn == less :: assn => assn => bool
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Assertions"
### 1.057s elapsed time, 1.823s cpu time, 0.132s GC time
Loading theory "Draft.Hoare_Triple" (required by "Draft.Hash_TableTemplates" via "Draft.Hash_Table" via "Draft.Sep_Main" via "Draft.Automation")
### theory "Draft.Hoare_Triple"
### 0.289s elapsed time, 0.355s cpu time, 0.092s GC time
Loading theory "Draft.Automation" (required by "Draft.Hash_TableTemplates" via "Draft.Hash_Table" via "Draft.Sep_Main")
(EX x xa. ?P \<Longrightarrow>\<^sub>A ?Q1 x xa) -->
(?P \<Longrightarrow>\<^sub>A \<exists>\<^sub>Ax xa. ?Q1 x xa)
### ML warning (line 401 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Pattern is not exhaustive.
### ML warning (line 407 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Pattern is not exhaustive.
### ML warning (line 418 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Matches are not exhaustive.
### ML warning (line 424 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Matches are not exhaustive.
### ML warning (line 489 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Handler catches all exceptions.
infix 1 THEN_IGNORE_NEWGOALS
structure Seplogic_Auto:
  sig
    val REPEAT_DETERM': ('a -> tactic) -> 'a -> thm -> thm Seq.seq
    val THEN_IGNORE_NEWGOALS:
       (int -> tactic) * (int -> thm -> thm Seq.seq) ->
         int -> thm -> thm Seq.seq
    val assn_simproc: simproc
    val assn_simproc_fun: Proof.context -> cterm -> thm option
    val decon_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val dflt_simps_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val dflt_tac: Proof.context -> int -> tactic
    val dfs_opr:
       string ->
         ('a -> term -> 'a * term option) -> 'a -> term -> 'a * term option
    val dfs_replace_atomic: string -> term -> term -> term -> term option
    val eintros_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val extract_ex_tac: Proof.context -> int -> thm -> thm Seq.seq
    val find_similar: (term -> term) -> term list -> (term * term) option
    val frame_inference_tac: Proof.context -> int -> tactic
    val heap_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val heap_rule_tac: Proof.context -> thm list -> int -> tactic
    val match_frame_tac: (int -> tactic) -> Proof.context -> int -> tactic
    val sep_auto_modifiers: Method.modifier parser list
    val sep_autosolve_tac:
       bool -> bool -> Proof.context -> int -> thm -> thm Seq.seq
    val solve_entails_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val solve_entails_tac: Proof.context -> int -> tactic
    val tr_term: term -> string
    val vcg_modifiers: (Token.T list -> Method.modifier * Token.T list) list
    val vcg_step_tac: Proof.context -> int -> tactic
    val vcg_tac: Proof.context -> int -> thm -> thm Seq.seq
  end
### Cannot skip proof of schematic goal statement
?i < length ?xs ==>
<?a \<mapsto>\<^sub>a ?xs> Array.nth ?a ?i
<%r. ?a \<mapsto>\<^sub>a ?xs * \<up> (r = ?xs ! ?i)>
### theory "Draft.Automation"
### 0.585s elapsed time, 0.640s cpu time, 0.077s GC time
Loading theory "Draft.Sep_Main" (required by "Draft.Hash_TableTemplates" via "Draft.Hash_Table")
### theory "Draft.Sep_Main"
### 0.022s elapsed time, 0.023s cpu time, 0.000s GC time
Loading theory "Draft.Hash_Table" (required by "Draft.Hash_TableTemplates")
consts
  the_array :: "('k, 'v) hashtable => ('k * 'v) list array"
consts
  the_size :: "('k, 'v) hashtable => nat"
Found termination order: "{}"
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### Ambiguous input (line 211 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" abs_update)
###       ("_cargs" ("_position" k) ("_cargs" ("_position" v) ("_position" l))))
###     ("_applC" ("_position" l)
###       ("_list"
###         ("\<^const>Ref.update"
###           ("_applC" ("_position" bounded_hashcode_nat)
###             ("_cargs" ("_applC" ("_position" length) ("_position" l))
###               ("_position" k)))
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_update)
###               ("_cargs" ("_position" k)
###                 ("_cargs" ("_position" v)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_applC" ("_position" bounded_hashcode_nat)
###                       ("_cargs"
###                         ("_applC" ("_position" length) ("_position" l))
###                         ("_position" k)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" abs_update)
###       ("_cargs" ("_position" k) ("_cargs" ("_position" v) ("_position" l))))
###     ("_LUpdate" ("_position" l)
###       ("_lupdbind"
###         ("_applC" ("_position" bounded_hashcode_nat)
###           ("_cargs" ("_applC" ("_position" length) ("_position" l))
###             ("_position" k)))
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" ls_update)
###             ("_cargs" ("_position" k)
###               ("_cargs" ("_position" v)
###                 ("\<^const>List.nth" ("_position" l)
###                   ("_applC" ("_position" bounded_hashcode_nat)
###                     ("_cargs"
###                       ("_applC" ("_position" length) ("_position" l))
###                       ("_position" k))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 351 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind" ("_position" i)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_update)
###               ("_cargs" ("_position" k)
###                 ("_cargs" ("_position" v)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_position" i))))))))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update" ("_position" i)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" ls_update)
###                 ("_cargs" ("_position" k)
###                   ("_cargs" ("_position" v)
###                     ("\<^const>List.nth" ("_position" l)
###                       ("_position" i)))))))))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 369 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind" ("_position" i)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_update)
###               ("_cargs" ("_position" k)
###                 ("_cargs" ("_position" v)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_position" i))))))))
###       ("_applC" ("_position" Suc) ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update" ("_position" i)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" ls_update)
###                 ("_cargs" ("_position" k)
###                   ("_cargs" ("_position" v)
###                     ("\<^const>List.nth" ("_position" l)
###                       ("_position" i)))))))))
###       ("_applC" ("_position" Suc) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### Ambiguous input (line 511 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_hash)
###     ("_LUpdate" ("_position" ls)
###       ("_lupdbind"
###         ("_applC" ("_position" bounded_hashcode_nat)
###           ("_cargs" ("_applC" ("_position" length) ("_position" ls))
###             ("_position" k)))
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" ls_delete)
###             ("_cargs" ("_position" k)
###               ("\<^const>List.nth" ("_position" ls)
###                 ("_applC" ("_position" bounded_hashcode_nat)
###                   ("_cargs" ("_applC" ("_position" length) ("_position" ls))
###                     ("_position" k)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_hash)
###     ("_applC" ("_position" ls)
###       ("_list"
###         ("\<^const>Ref.update"
###           ("_applC" ("_position" bounded_hashcode_nat)
###             ("_cargs" ("_applC" ("_position" length) ("_position" ls))
###               ("_position" k)))
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" ls)
###                   ("_applC" ("_position" bounded_hashcode_nat)
###                     ("_cargs"
###                       ("_applC" ("_position" length) ("_position" ls))
###                       ("_position" k))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 551 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_distinct)
###     ("_LUpdate" ("_position" l)
###       ("_lupdbind"
###         ("_applC" ("_position" bounded_hashcode_nat)
###           ("_cargs" ("_applC" ("_position" length) ("_position" l))
###             ("_position" k)))
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" ls_delete)
###             ("_cargs" ("_position" k)
###               ("\<^const>List.nth" ("_position" l)
###                 ("_applC" ("_position" bounded_hashcode_nat)
###                   ("_cargs" ("_applC" ("_position" length) ("_position" l))
###                     ("_position" k)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_distinct)
###     ("_applC" ("_position" l)
###       ("_list"
###         ("\<^const>Ref.update"
###           ("_applC" ("_position" bounded_hashcode_nat)
###             ("_cargs" ("_applC" ("_position" length) ("_position" l))
###               ("_position" k)))
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" l)
###                   ("_applC" ("_position" bounded_hashcode_nat)
###                     ("_cargs"
###                       ("_applC" ("_position" length) ("_position" l))
###                       ("_position" k))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 575 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind" ("_position" i)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" l) ("_position" i)))))))
###       ("\<^const>Groups.minus_class.minus" ("_position" n)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update" ("_position" i)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" ls_delete)
###                 ("_cargs" ("_position" k)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_position" i))))))))
###       ("\<^const>Groups.minus_class.minus" ("_position" n)
###         ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 593 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind" ("_position" i)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" l) ("_position" i)))))))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update" ("_position" i)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" ls_delete)
###                 ("_cargs" ("_position" k)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_position" i))))))))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 607 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple"
###     ("_applC" ("_position" is_hashtable)
###       ("_cargs" ("_position" l) ("_position" ht)))
###     ("_applC" ("_position" ht_delete)
###       ("_cargs" ("_position" k) ("_position" ht)))
###     ("_applC" ("_position" is_hashtable)
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update"
###             ("_applC" ("_position" bounded_hashcode_nat)
###               ("_cargs" ("_applC" ("_position" length) ("_position" l))
###                 ("_position" k)))
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" ls_delete)
###                 ("_cargs" ("_position" k)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_applC" ("_position" bounded_hashcode_nat)
###                       ("_cargs"
###                         ("_applC" ("_position" length) ("_position" l))
###                         ("_position" k)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple"
###     ("_applC" ("_position" is_hashtable)
###       ("_cargs" ("_position" l) ("_position" ht)))
###     ("_applC" ("_position" ht_delete)
###       ("_cargs" ("_position" k) ("_position" ht)))
###     ("_applC" ("_position" is_hashtable)
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind"
###           ("_applC" ("_position" bounded_hashcode_nat)
###             ("_cargs" ("_applC" ("_position" length) ("_position" l))
###               ("_position" k)))
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" l)
###                   ("_applC" ("_position" bounded_hashcode_nat)
###                     ("_cargs"
###                       ("_applC" ("_position" length) ("_position" l))
###                       ("_position" k))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 632 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple"
###     ("_applC" ("_position" is_hashtable)
###       ("_cargs" ("_position" l) ("_position" ht)))
###     ("_applC" ("_position" ht_delete)
###       ("_cargs" ("_position" k) ("_position" ht)))
###     ("_applC" ("_position" is_hashtable)
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update"
###             ("_applC" ("_position" bounded_hashcode_nat)
###               ("_cargs" ("_applC" ("_position" length) ("_position" l))
###                 ("_position" k)))
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" ls_delete)
###                 ("_cargs" ("_position" k)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_applC" ("_position" bounded_hashcode_nat)
###                       ("_cargs"
###                         ("_applC" ("_position" length) ("_position" l))
###                         ("_position" k)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple"
###     ("_applC" ("_position" is_hashtable)
###       ("_cargs" ("_position" l) ("_position" ht)))
###     ("_applC" ("_position" ht_delete)
###       ("_cargs" ("_position" k) ("_position" ht)))
###     ("_applC" ("_position" is_hashtable)
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind"
###           ("_applC" ("_position" bounded_hashcode_nat)
###             ("_cargs" ("_applC" ("_position" length) ("_position" l))
###               ("_position" k)))
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" l)
###                   ("_applC" ("_position" bounded_hashcode_nat)
###                     ("_cargs"
###                       ("_applC" ("_position" length) ("_position" l))
###                       ("_position" k))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Hash_Table"
### 2.099s elapsed time, 2.544s cpu time, 0.623s GC time
Loading theory "Draft.Hash_TableTemplates"
val templateLemmas =
   [("Hash_Table.ht_distinct_ls_rehash", "ht_distinct (ls_rehash ?l)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Hash_Table.ht_hash_ls_rehash", "ht_hash (ls_rehash ?l)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Hash_Table.ht_distinct_replicate", "ht_distinct (replicate ?n [])",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Hash_Table.ht_hash_replicate", "ht_hash (replicate ?n [])",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("Hash_Table.ht_size_replicate", "ht_size (replicate ?n []) 0",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)
         )),
    ("Hash_Table.ls_delete_fst_set",
     "set (fst (ls_delete ?k ?l)) <= set ?l",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app (template_hole 2, template_var 0))),
    ("Hash_Table.ht_distinct_ls_insls",
     "ht_distinct ?l ==> ht_distinct (ls_insls ?ls ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Hash_Table.ht_hash_ls_insls",
     "ht_hash ?l ==> ht_hash (ls_insls ?ls ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Hash_Table.ht_distinct_update",
     "ht_distinct ?l ==> ht_distinct (abs_update ?k ?v ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Hash_Table.ht_distinct_ls_copy",
     "ht_distinct ?l ==> ht_distinct (ls_copy ?n ?ss ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Hash_Table.ht_hash_ls_copy",
     "ht_hash ?l ==> ht_hash (ls_copy ?n ?ss ?l)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Hash_Table.ht_hash_update",
     "ht_hash ?ls ==> ht_hash (abs_update ?k ?v ?ls)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Hash_Table.ls_delete_snd_set",
     "snd (ls_delete ?k ?l) = (?k : set (map fst ?l))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Hash_Table.complete_ht_insls",
     "<is_hashtable ?ls ?ht> ht_insls ?xs ?ht
      <is_hashtable (ls_insls ?xs ?ls)>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)))
         )),
    ("Hash_Table.length_ls_rehash",
     "1 < length ?l ==> 1 < length (ls_rehash ?l)",
     template_implication
      ([template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Hash_Table.ls_update_snd_set",
     "snd (ls_update ?k ?v ?l) = (?k : set (map fst ?l))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Hash_Table.length_ls_insls",
     "1 < length ?l ==> 1 < length (ls_insls ?ls ?l)",
     template_implication
      ([template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Hash_Table.ht_imp_len",
     "is_hashtable ?l ?ht \<Longrightarrow>\<^sub>A
      is_hashtable ?l ?ht * \<up> (0 < length ?l)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 1)))))
         )),
    ("Hash_Table.complete_ht_upd",
     "<is_hashtable ?l ?ht> ht_upd ?k ?v ?ht
      <is_hashtable (abs_update ?k ?v ?l)>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_var 2)),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 3)))
         )),
    ("Hash_Table.ls_update_fst_set",
     "set (fst (ls_update ?k ?v ?l)) <= insert (?k, ?v) (set ?l)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app (template_hole 4, template_var 0)))),
    ("Hash_Table.complete_ht_new_sz",
     "1 < ?n ==> <emp> ht_new_sz ?n <is_hashtable (replicate ?n [])>",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_hole 3, template_var 0)),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)))
           ))),
    ("Hash_Table.ls_delete_distinct",
     "distinct (map fst ?l) ==> distinct (map fst (fst (ls_delete ?k ?l)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))))
           ))),
    ("Hash_Table.length_update",
     "1 < length ?l ==> 1 < length (abs_update ?k ?v ?l)",
     template_implication
      ([template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 2))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2))))),
    ("Hash_Table.length_ls_copy",
     "1 < length ?l ==> 1 < length (ls_copy ?n ?ss ?l)",
     template_implication
      ([template_inequation
         (less_than, template_hole 2,
          template_app (template_hole 1, template_var 2))],
       template_inequation
        (less_than, template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2))))),
    ("Hash_Table.ls_update_distinct",
     "distinct (map fst ?l) ==>
      distinct (map fst (fst (ls_update ?k ?v ?l)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0),
                   template_var 2))))
           ))),
    ("Hash_Table.ls_update_fst_map_set",
     "set (map fst (fst (ls_update ?k ?v ?l))) =
      insert ?k (set (map fst ?l))",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1),
               template_var 0)))),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0))))),
    ("Hash_Table.complete_ht_rehash",
     "<is_hashtable ?l ?ht> ht_rehash ?ht
      <%r. is_hashtable ?l ?ht * is_hashtable (ls_rehash ?l) r>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)),
             template_app (template_hole 2, template_var 0)),
           t_empty)
         )),
    ("Hash_Table.ls_delete_length_snd_False",
     "~ snd (ls_delete ?k ?l) ==>
      length (fst (ls_delete ?k ?l)) = length ?l",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_var 0)))),
    ("Hash_Table.complete_ht_to_list",
     "<is_hashtable ?l ?ht> ht_to_list ?ht
      <%r. is_hashtable ?l ?ht * \<up> (r = concat ?l)>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0)),
             template_app (template_hole 4, template_var 0)),
           t_empty)
         )),
    ("Hash_Table.ls_delete_length_snd_True",
     "snd (ls_delete ?k ?l) ==>
      length (fst (ls_delete ?k ?l)) = length ?l - 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_hole 0)))),
    ("Hash_Table.ls_update_length_snd_True",
     "snd (ls_update ?k ?v ?l) ==>
      length (fst (ls_update ?k ?v ?l)) = length ?l",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app (template_hole 1, template_var 0)))),
    ("Hash_Table.ht_array_length_rule",
     "<is_hashtable ?l ?ht> Array.len (the_array ?ht)
      <%r. is_hashtable ?l ?ht * \<up> (r = length ?l)>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 0))),
           t_empty)
         )),
    ("Hash_Table.ls_update_length_snd_False",
     "~ snd (ls_update ?k ?v ?l) ==>
      length (fst (ls_update ?k ?v ?l)) = Suc (length ?l)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_app (template_hole 4, template_var 2),
                      template_var 1),
                    template_var 0))
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 1),
               template_var 0))),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Hash_Table.ls_delete_length",
     "length (fst (ls_delete ?k ?l)) =
      (if ?k : set (map fst ?l) then length ?l - 1 else length ?l)",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0)))),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 9, template_var 0)),
             template_hole 0)),
         template_app (template_hole 9, template_var 0)))),
    ("Hash_Table.ls_update_length",
     "length (fst (ls_update ?k ?v ?l)) =
      (if ?k : set (map fst ?l) then length ?l else Suc (length ?l))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0)))),
           template_app (template_hole 8, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 8, template_var 0))))),
    ("Hash_Table.ht_distinct_delete",
     "ht_distinct ?l ==>
      ht_distinct
       (?l[bounded_hashcode_nat (length ?l) ?k :=
             fst (ls_delete ?k
                   (?l ! bounded_hashcode_nat (length ?l) ?k))])",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_var 0)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 1)),
                       template_var 0))))))
           ))),
    ("Hash_Table.ht_hash_delete",
     "ht_hash ?ls ==>
      ht_hash
       (?ls[bounded_hashcode_nat (length ?ls) ?k :=
              fst (ls_delete ?k
                    (?ls ! bounded_hashcode_nat (length ?ls) ?k))])",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_var 0)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 1)),
                       template_var 0))))))
           ))),
    ("Hash_Table.ls_delete_fst_map_set",
     "distinct (map fst ?l) ==>
      set (map fst (fst (ls_delete ?k ?l))) = set (map fst ?l) - {?k}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 1))),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Hash_Table.complete_ht_lookup",
     "<is_hashtable ?l ?ht> ht_lookup ?x ?ht
      <%r. is_hashtable ?l ?ht *
           \<up>
            (r = ls_lookup ?x (?l ! bounded_hashcode_nat (length ?l) ?x))>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 1)),
           t_empty)
         )),
    ("Hash_Table.complete_ht_delete",
     "<is_hashtable ?l ?ht> ht_delete ?k ?ht
      <is_hashtable
        (?l[bounded_hashcode_nat (length ?l) ?k :=
              fst (ls_delete ?k
                    (?l ! bounded_hashcode_nat (length ?l) ?k))])>",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_var 1)),
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 5, template_var 2),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 2)),
                   template_var 0)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app (template_hole 3, template_var 2)),
                       template_var 0)))))))
         )),
    ("Hash_Table.ht_array_nth_rule",
     "?i < length ?l ==>
      <is_hashtable ?l ?ht> Array.nth (the_array ?ht) ?i
      <%r. is_hashtable ?l ?ht * \<up> (r = ?l ! ?i)>",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_var 2)),
             t_empty)
           ))),
    ("Hash_Table.complete_ht_copy",
     "?n <= length ?ss ==>
      <is_hashtable ?ss ?src * is_hashtable ?ds ?dst> ht_copy ?n ?src ?dst
      <%r. is_hashtable ?ss ?src * is_hashtable (ls_copy ?n ?ss ?ds) r>",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app (template_hole 5, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 2)),
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0))),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_var 0)),
             t_empty)
           ))),
    ("Hash_Table.ht_size_delete2",
     "[| ht_size ?l ?n; ?i < length ?l; ~ snd (ls_delete ?k (?l ! ?i)) |]
      ==> ht_size (?l[?i := fst (ls_delete ?k (?l ! ?i))]) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 3)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 0),
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_var 1)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 1),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 0),
                     template_app
                      (template_app (template_hole 2, template_var 3),
                       template_var 1))))),
             template_var 2)
           ))),
    ("Hash_Table.complete_ht_update_normal",
     "~ length ?l * load_factor <= the_size ?ht * 100 ==>
      <is_hashtable ?l ?ht> ht_update ?k ?v ?ht
      <is_hashtable (abs_update ?k ?v ?l)>",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals,
              template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 3)),
                template_hole 9),
              template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 8, template_var 2)),
                template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 6,
                          template_app
                           (template_hole 6,
                            template_app
                             (template_hole 5, template_hole 4)))))))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0),
                 template_var 2)),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)))
           ))),
    ("Hash_Table.ht_size_delete1",
     "[| ht_size ?l ?n; ?i < length ?l; snd (ls_delete ?k (?l ! ?i)) |]
      ==> ht_size (?l[?i := fst (ls_delete ?k (?l ! ?i))]) (?n - 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_var 3)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 0),
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 3),
                   template_var 1),
                 template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_var 1))))),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("Hash_Table.ht_size_update1",
     "[| ht_size ?l ?n; ?i < length ?l; snd (ls_update ?k ?v (?l ! ?i)) |]
      ==> ht_size (?l[?i := fst (ls_update ?k ?v (?l ! ?i))]) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 5, template_var 4)),
        template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0),
                template_app
                 (template_app (template_hole 2, template_var 4),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_var 1),
                       template_var 0),
                     template_app
                      (template_app (template_hole 2, template_var 4),
                       template_var 2))))),
             template_var 3)
           ))),
    ("Hash_Table.ht_size_update2",
     "[| ht_size ?l ?n; ?i < length ?l; ~ snd (ls_update ?k ?v (?l ! ?i)) |]
      ==> ht_size (?l[?i := fst (ls_update ?k ?v (?l ! ?i))]) (Suc ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_var 3)
            ),
        template_inequation
         (less_than, template_var 2,
          template_app (template_hole 7, template_var 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_app (template_hole 4, template_var 1),
                      template_var 0),
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_var 2)))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 2),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app (template_hole 4, template_var 1),
                       template_var 0),
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_var 2))))),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Hash_Table.complete_ht_update_rehash",
     "length ?l * load_factor <= the_size ?ht * 100 ==>
      <is_hashtable ?l ?ht> ht_update ?k ?v ?ht
      <%r. is_hashtable ?l ?ht *
           is_hashtable (abs_update ?k ?v (ls_rehash ?l)) r>",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 13,
              template_app (template_hole 12, template_var 3)),
            template_hole 11),
          template_app
           (template_app
             (template_hole 13,
              template_app (template_hole 10, template_var 2)),
            template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app
                     (template_hole 8,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_hole 7, template_hole 6)))))))))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2)),
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 0),
                 template_var 2)),
             t_empty)
           )))]:
   (string * thm * template) list
### theory "Draft.Hash_TableTemplates"
### 0.678s elapsed time, 0.838s cpu time, 0.072s GC time
val it = (): unit
