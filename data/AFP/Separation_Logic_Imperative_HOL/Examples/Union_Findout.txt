Loading theory "Draft.Syntax_Match" (required by "Draft.Union_FindTemplates" via "Draft.Union_Find" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple" via "Draft.Assertions")
Loading theory "Draft.Imperative_HOL_Add" (required by "Draft.Union_FindTemplates" via "Draft.Union_Find" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple" via "Draft.Assertions")
Loading theory "Draft.Run" (required by "Draft.Union_FindTemplates" via "Draft.Union_Find" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple")
Loading theory "Draft.Templates" (required by "Draft.Union_FindTemplates" via "Draft.ExtrEqs")
consts
  is_exn :: "'a option => bool"
### No equation for constructor "None"
consts
  the_state :: "'a option => 'a"
### theory "Draft.Imperative_HOL_Add"
### 0.044s elapsed time, 0.203s cpu time, 0.000s GC time
Array.update ?a ?i ?x ?h = Array.set ?a ((Array.get ?h ?a)[?i := ?x]) ?h
### ML warning (line 40 of "$AFP/Separation_Logic_Imperative_HOL/Tools/Syntax_Match.thy"):
### Pattern is not exhaustive.
### ML warning (line 53 of "$AFP/Separation_Logic_Imperative_HOL/Tools/Syntax_Match.thy"):
### Pattern is not exhaustive.
structure Syntax_Match:
  sig
    val fo_nomatch_simproc: Proof.context -> cterm -> thm option
    val fo_nomatch_thm: thm
    val nomatch_simproc: Proof.context -> cterm -> thm option
    val nomatch_thm: thm
  end
Proofs for inductive predicate(s) "run"
  Proving monotonicity ...
locale ac_operator
  fixes f :: "'a => 'a => 'a"
  assumes "ac_operator f"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Syntax_Match"
### 0.086s elapsed time, 0.329s cpu time, 0.000s GC time
Loading theory "Draft.Assertions" (required by "Draft.Union_FindTemplates" via "Draft.Union_Find" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple")
### theory "Draft.Templates"
### 0.088s elapsed time, 0.334s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Union_FindTemplates")
### theory "Draft.Run"
### 0.276s elapsed time, 0.891s cpu time, 0.036s GC time
Found termination order: "{}"
instantiation
  assn :: one
  one_assn == one_class.one :: assn
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.578s elapsed time, 1.364s cpu time, 0.107s GC time
Found termination order: "{}"
instantiation
  assn :: times
  times_assn == times :: assn => assn => assn
Found termination order: "{}"
instantiation
  assn :: comm_monoid_mult
Found termination order: "{}"
instantiation
  assn :: boolean_algebra
  minus_assn == minus :: assn => assn => assn
  uminus_assn == uminus :: assn => assn
  bot_assn == bot :: assn
  top_assn == top :: assn
  inf_assn == inf :: assn => assn => assn
  sup_assn == sup :: assn => assn => assn
  less_eq_assn == less_eq :: assn => assn => bool
  less_assn == less :: assn => assn => bool
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Assertions"
### 1.093s elapsed time, 1.873s cpu time, 0.119s GC time
Loading theory "Draft.Hoare_Triple" (required by "Draft.Union_FindTemplates" via "Draft.Union_Find" via "Draft.Sep_Main" via "Draft.Automation")
### theory "Draft.Hoare_Triple"
### 0.286s elapsed time, 0.341s cpu time, 0.079s GC time
Loading theory "Draft.Automation" (required by "Draft.Union_FindTemplates" via "Draft.Union_Find" via "Draft.Sep_Main")
(EX x xa. ?P \<Longrightarrow>\<^sub>A ?Q1 x xa) -->
(?P \<Longrightarrow>\<^sub>A \<exists>\<^sub>Ax xa. ?Q1 x xa)
### ML warning (line 401 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Pattern is not exhaustive.
### ML warning (line 407 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Pattern is not exhaustive.
### ML warning (line 418 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Matches are not exhaustive.
### ML warning (line 424 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Matches are not exhaustive.
### ML warning (line 489 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Handler catches all exceptions.
infix 1 THEN_IGNORE_NEWGOALS
structure Seplogic_Auto:
  sig
    val REPEAT_DETERM': ('a -> tactic) -> 'a -> thm -> thm Seq.seq
    val THEN_IGNORE_NEWGOALS:
       (int -> tactic) * (int -> thm -> thm Seq.seq) ->
         int -> thm -> thm Seq.seq
    val assn_simproc: simproc
    val assn_simproc_fun: Proof.context -> cterm -> thm option
    val decon_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val dflt_simps_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val dflt_tac: Proof.context -> int -> tactic
    val dfs_opr:
       string ->
         ('a -> term -> 'a * term option) -> 'a -> term -> 'a * term option
    val dfs_replace_atomic: string -> term -> term -> term -> term option
    val eintros_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val extract_ex_tac: Proof.context -> int -> thm -> thm Seq.seq
    val find_similar: (term -> term) -> term list -> (term * term) option
    val frame_inference_tac: Proof.context -> int -> tactic
    val heap_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val heap_rule_tac: Proof.context -> thm list -> int -> tactic
    val match_frame_tac: (int -> tactic) -> Proof.context -> int -> tactic
    val sep_auto_modifiers: Method.modifier parser list
    val sep_autosolve_tac:
       bool -> bool -> Proof.context -> int -> thm -> thm Seq.seq
    val solve_entails_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val solve_entails_tac: Proof.context -> int -> tactic
    val tr_term: term -> string
    val vcg_modifiers: (Token.T list -> Method.modifier * Token.T list) list
    val vcg_step_tac: Proof.context -> int -> tactic
    val vcg_tac: Proof.context -> int -> thm -> thm Seq.seq
  end
### Cannot skip proof of schematic goal statement
?i < length ?xs ==>
<?a \<mapsto>\<^sub>a ?xs> Array.nth ?a ?i
<%r. ?a \<mapsto>\<^sub>a ?xs * \<up> (r = ?xs ! ?i)>
### theory "Draft.Automation"
### 0.582s elapsed time, 0.620s cpu time, 0.055s GC time
Loading theory "Draft.Sep_Main" (required by "Draft.Union_FindTemplates" via "Draft.Union_Find")
### theory "Draft.Sep_Main"
### 0.022s elapsed time, 0.023s cpu time, 0.000s GC time
Loading theory "Draft.Union_Find" (required by "Draft.Union_FindTemplates")
### Ambiguous input (line 102 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ufa_invar) ("_position" l)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" x)
###           ("_applC" ("_position" length) ("_position" l))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" l)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rep_of)
###         ("_cargs"
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update"
###                 ("_applC" ("_position" rep_of)
###                   ("_cargs" ("_position" l) ("_position" x)))
###                 ("_applC" ("_position" rep_of)
###                   ("_cargs" ("_position" l) ("_position" x))))))
###           ("_position" i)))
###       ("_applC" ("_position" rep_of)
###         ("_cargs" ("_position" l) ("_position" i))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ufa_invar) ("_position" l)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" x)
###           ("_applC" ("_position" length) ("_position" l))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" l)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rep_of)
###         ("_cargs"
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind"
###               ("_applC" ("_position" rep_of)
###                 ("_cargs" ("_position" l) ("_position" x)))
###               ("_applC" ("_position" rep_of)
###                 ("_cargs" ("_position" l) ("_position" x)))))
###           ("_position" i)))
###       ("_applC" ("_position" rep_of)
###         ("_cargs" ("_position" l) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ufa_union)
###     ("_cargs" ("_position" l) ("_cargs" ("_position" x) ("_position" y))))
###   ("_applC" ("_position" l)
###     ("_list"
###       ("\<^const>Ref.update"
###         ("_applC" ("_position" rep_of)
###           ("_cargs" ("_position" l) ("_position" x)))
###         ("_applC" ("_position" rep_of)
###           ("_cargs" ("_position" l) ("_position" y)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ufa_union)
###     ("_cargs" ("_position" l) ("_cargs" ("_position" x) ("_position" y))))
###   ("_LUpdate" ("_position" l)
###     ("_lupdbind"
###       ("_applC" ("_position" rep_of)
###         ("_cargs" ("_position" l) ("_position" x)))
###       ("_applC" ("_position" rep_of)
###         ("_cargs" ("_position" l) ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 267 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ufa_invar)
###     ("_applC" ("_position" l)
###       ("_list"
###         ("\<^const>Ref.update" ("_position" x)
###           ("_applC" ("_position" rep_of)
###             ("_cargs" ("_position" l) ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ufa_invar)
###     ("_LUpdate" ("_position" l)
###       ("_lupdbind" ("_position" x)
###         ("_applC" ("_position" rep_of)
###           ("_cargs" ("_position" l) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 268 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" i)
###     ("_applC" ("_position" length) ("_position" l))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rep_of)
###         ("_cargs"
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind" ("_position" x)
###               ("_applC" ("_position" rep_of)
###                 ("_cargs" ("_position" l) ("_position" x)))))
###           ("_position" i)))
###       ("_applC" ("_position" rep_of)
###         ("_cargs" ("_position" l) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" i)
###     ("_applC" ("_position" length) ("_position" l))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rep_of)
###         ("_cargs"
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update" ("_position" x)
###                 ("_applC" ("_position" rep_of)
###                   ("_cargs" ("_position" l) ("_position" x))))))
###           ("_position" i)))
###       ("_applC" ("_position" rep_of)
###         ("_cargs" ("_position" l) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 317 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ufa_invar)
###     ("_applC" ("_position" l)
###       ("_list"
###         ("\<^const>Ref.update" ("_position" x)
###           ("_applC" ("_position" rep_of)
###             ("_cargs" ("_position" l) ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ufa_invar)
###     ("_LUpdate" ("_position" l)
###       ("_lupdbind" ("_position" x)
###         ("_applC" ("_position" rep_of)
###           ("_cargs" ("_position" l) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 323 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ufa_\<alpha>)
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update" ("_position" x)
###             ("_applC" ("_position" rep_of)
###               ("_cargs" ("_position" l) ("_position" x)))))))
###     ("_applC" ("_position" ufa_\<alpha>) ("_position" l))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ufa_\<alpha>)
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind" ("_position" x)
###           ("_applC" ("_position" rep_of)
###             ("_cargs" ("_position" l) ("_position" x))))))
###     ("_applC" ("_position" ufa_\<alpha>) ("_position" l))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.Union_Find"
### 0.771s elapsed time, 1.042s cpu time, 0.391s GC time
*** Failed to load theory "Draft.Union_FindTemplates" (unresolved "Draft.Union_Find")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "76")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 508 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy")
Exception- TOPLEVEL_ERROR raised
