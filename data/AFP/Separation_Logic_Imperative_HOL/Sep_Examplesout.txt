Loading theory "Draft.Syntax_Match" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple" via "Draft.Assertions")
Loading theory "Draft.Imperative_HOL_Add" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple" via "Draft.Assertions")
Loading theory "Draft.Run" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple")
Loading theory "Draft.Templates" (required by "Draft.Sep_ExamplesTemplates" via "Draft.ExtrEqs")
### ML warning (line 40 of "$AFP/Separation_Logic_Imperative_HOL/Tools/Syntax_Match.thy"):
### Pattern is not exhaustive.
### ML warning (line 53 of "$AFP/Separation_Logic_Imperative_HOL/Tools/Syntax_Match.thy"):
### Pattern is not exhaustive.
structure Syntax_Match:
  sig
    val fo_nomatch_simproc: Proof.context -> cterm -> thm option
    val fo_nomatch_thm: thm
    val nomatch_simproc: Proof.context -> cterm -> thm option
    val nomatch_thm: thm
  end
consts
  is_exn :: "'a option => bool"
### theory "Draft.Imperative_HOL_Add"
### 0.045s elapsed time, 0.212s cpu time, 0.000s GC time
Array.update ?a ?i ?x ?h = Array.set ?a ((Array.get ?h ?a)[?i := ?x]) ?h
### No equation for constructor "None"
consts
  the_state :: "'a option => 'a"
locale ac_operator
  fixes f :: "'a => 'a => 'a"
  assumes "ac_operator f"
Proofs for inductive predicate(s) "run"
  Proving monotonicity ...
### theory "Draft.Syntax_Match"
### 0.071s elapsed time, 0.289s cpu time, 0.000s GC time
Loading theory "Draft.Assertions" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples" via "Draft.Sep_Main" via "Draft.Automation" via "Draft.Hoare_Triple")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.083s elapsed time, 0.337s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Sep_ExamplesTemplates")
### theory "Draft.Run"
### 0.272s elapsed time, 0.890s cpu time, 0.029s GC time
Found termination order: "{}"
instantiation
  assn :: one
  one_assn == one_class.one :: assn
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.569s elapsed time, 1.344s cpu time, 0.098s GC time
Found termination order: "{}"
instantiation
  assn :: times
  times_assn == times :: assn => assn => assn
Found termination order: "{}"
instantiation
  assn :: comm_monoid_mult
Found termination order: "{}"
instantiation
  assn :: boolean_algebra
  minus_assn == minus :: assn => assn => assn
  uminus_assn == uminus :: assn => assn
  bot_assn == bot :: assn
  top_assn == top :: assn
  inf_assn == inf :: assn => assn => assn
  sup_assn == sup :: assn => assn => assn
  less_eq_assn == less_eq :: assn => assn => bool
  less_assn == less :: assn => assn => bool
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Assertions"
### 1.095s elapsed time, 1.907s cpu time, 0.147s GC time
Loading theory "Draft.Hoare_Triple" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples" via "Draft.Sep_Main" via "Draft.Automation")
### theory "Draft.Hoare_Triple"
### 0.287s elapsed time, 0.346s cpu time, 0.082s GC time
Loading theory "Draft.Automation" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples" via "Draft.Sep_Main")
(EX x xa. ?P \<Longrightarrow>\<^sub>A ?Q1 x xa) -->
(?P \<Longrightarrow>\<^sub>A \<exists>\<^sub>Ax xa. ?Q1 x xa)
### ML warning (line 401 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Pattern is not exhaustive.
### ML warning (line 407 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Pattern is not exhaustive.
### ML warning (line 418 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Matches are not exhaustive.
### ML warning (line 424 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Matches are not exhaustive.
### ML warning (line 489 of "$AFP/Separation_Logic_Imperative_HOL/Automation.thy"):
### Handler catches all exceptions.
infix 1 THEN_IGNORE_NEWGOALS
structure Seplogic_Auto:
  sig
    val REPEAT_DETERM': ('a -> tactic) -> 'a -> thm -> thm Seq.seq
    val THEN_IGNORE_NEWGOALS:
       (int -> tactic) * (int -> thm -> thm Seq.seq) ->
         int -> thm -> thm Seq.seq
    val assn_simproc: simproc
    val assn_simproc_fun: Proof.context -> cterm -> thm option
    val decon_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val dflt_simps_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val dflt_tac: Proof.context -> int -> tactic
    val dfs_opr:
       string ->
         ('a -> term -> 'a * term option) -> 'a -> term -> 'a * term option
    val dfs_replace_atomic: string -> term -> term -> term -> term option
    val eintros_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val extract_ex_tac: Proof.context -> int -> thm -> thm Seq.seq
    val find_similar: (term -> term) -> term list -> (term * term) option
    val frame_inference_tac: Proof.context -> int -> tactic
    val heap_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val heap_rule_tac: Proof.context -> thm list -> int -> tactic
    val match_frame_tac: (int -> tactic) -> Proof.context -> int -> tactic
    val sep_auto_modifiers: Method.modifier parser list
    val sep_autosolve_tac:
       bool -> bool -> Proof.context -> int -> thm -> thm Seq.seq
    val solve_entails_modifiers:
       (Token.T list -> Method.modifier * Token.T list) list
    val solve_entails_tac: Proof.context -> int -> tactic
    val tr_term: term -> string
    val vcg_modifiers: (Token.T list -> Method.modifier * Token.T list) list
    val vcg_step_tac: Proof.context -> int -> tactic
    val vcg_tac: Proof.context -> int -> thm -> thm Seq.seq
  end
### Cannot skip proof of schematic goal statement
?i < length ?xs ==>
<?a \<mapsto>\<^sub>a ?xs> Array.nth ?a ?i
<%r. ?a \<mapsto>\<^sub>a ?xs * \<up> (r = ?xs ! ?i)>
### theory "Draft.Automation"
### 0.582s elapsed time, 0.626s cpu time, 0.063s GC time
Loading theory "Draft.Sep_Main" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples")
### theory "Draft.Sep_Main"
### 0.023s elapsed time, 0.024s cpu time, 0.000s GC time
Loading theory "Draft.Array_Blit" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples" via "Draft.Array_Map_Impl")
Loading theory "Draft.Imp_List_Spec" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples")
Loading theory "Draft.Imp_Map_Spec" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples")
Loading theory "Draft.Imp_Set_Spec" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples")
locale imp_list
  fixes is_list :: "'a list => 'l => assn"
  assumes "imp_list is_list"
locale imp_list_empty
  fixes is_list :: "'a list => 'l => assn"
    and empty :: "'l Heap"
  assumes "imp_list_empty is_list empty"
locale imp_set
  fixes is_set :: "'a set => 's => assn"
  assumes "imp_set is_set"
locale imp_map
  fixes is_map :: "('k => 'v option) => 'm => assn"
  assumes "imp_map is_map"
locale imp_list_is_empty
  fixes is_list :: "'a list => 'l => assn"
    and is_empty :: "'l => bool Heap"
  assumes "imp_list_is_empty is_list is_empty"
locale imp_set_empty
  fixes is_set :: "'a set => 's => assn"
    and empty :: "'s Heap"
  assumes "imp_set_empty is_set empty"
locale imp_map_empty
  fixes is_map :: "('k => 'v option) => 'm => assn"
    and empty :: "'m Heap"
  assumes "imp_map_empty is_map empty"
locale imp_list_append
  fixes is_list :: "'a list => 'l => assn"
    and append :: "'a => 'l => 'l Heap"
  assumes "imp_list_append is_list append"
locale imp_map_is_empty
  fixes is_map :: "('k => 'v option) => 'm => assn"
    and is_empty :: "'m => bool Heap"
  assumes "imp_map_is_empty is_map is_empty"
locale imp_set_is_empty
  fixes is_set :: "'a set => 's => assn"
    and is_empty :: "'s => bool Heap"
  assumes "imp_set_is_empty is_set is_empty"
locale imp_list_prepend
  fixes is_list :: "'a list => 'l => assn"
    and prepend :: "'a => 'l => 'l Heap"
  assumes "imp_list_prepend is_list prepend"
locale imp_list_head
  fixes is_list :: "'a list => 'l => assn"
    and head :: "'l => 'a Heap"
  assumes "imp_list_head is_list head"
locale imp_map_lookup
  fixes is_map :: "('k => 'v option) => 'm => assn"
    and lookup :: "'k => 'm => 'v option Heap"
  assumes "imp_map_lookup is_map lookup"
locale imp_set_memb
  fixes is_set :: "'a set => 's => assn"
    and memb :: "'a => 's => bool Heap"
  assumes "imp_set_memb is_set memb"
locale imp_list_pop
  fixes is_list :: "'a list => 'l => assn"
    and pop :: "'l => ('a * 'l) Heap"
  assumes "imp_list_pop is_list pop"
locale imp_set_ins
  fixes is_set :: "'a set => 's => assn"
    and ins :: "'a => 's => 's Heap"
  assumes "imp_set_ins is_set ins"
locale imp_map_update
  fixes is_map :: "('k => 'v option) => 'm => assn"
    and update :: "'k => 'v => 'm => 'm Heap"
  assumes "imp_map_update is_map update"
locale imp_list_rotate
  fixes is_list :: "'a list => 'l => assn"
    and rotate :: "'l => 'l Heap"
  assumes "imp_list_rotate is_list rotate"
locale imp_list_reverse
  fixes is_list :: "'a list => 'l => assn"
    and reverse :: "'l => 'l Heap"
  assumes "imp_list_reverse is_list reverse"
locale imp_set_delete
  fixes is_set :: "'a set => 's => assn"
    and delete :: "'a => 's => 's Heap"
  assumes "imp_set_delete is_set delete"
locale imp_map_delete
  fixes is_map :: "('k => 'v option) => 'm => assn"
    and delete :: "'k => 'm => 'm Heap"
  assumes "imp_map_delete is_map delete"
locale imp_set_size
  fixes is_set :: "'a set => 's => assn"
    and size :: "'s => nat Heap"
  assumes "imp_set_size is_set size"
locale imp_map_add
  fixes is_map :: "('k => 'v option) => 'm => assn"
    and add :: "'m => 'm => 'm Heap"
  assumes "imp_map_add is_map add"
locale imp_list_iterate
  fixes is_list :: "'a list => 'l => assn"
    and is_it :: "'a list => 'l => 'a list => 'it => assn"
    and it_init :: "'l => 'it Heap"
    and it_has_next :: "'it => bool Heap"
    and it_next :: "'it => ('a * 'it) Heap"
  assumes "imp_list_iterate is_list is_it it_init it_has_next it_next"
### theory "Draft.Imp_List_Spec"
### 0.127s elapsed time, 0.504s cpu time, 0.000s GC time
Loading theory "Draft.List_Seg" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples")
locale imp_map_size
  fixes is_map :: "('k => 'v option) => 'm => assn"
    and size :: "'m => nat Heap"
  assumes "imp_map_size is_map size"
locale imp_set_iterate
  fixes is_set :: "'a set => 's => assn"
    and is_it :: "'a set => 's => 'a set => 'it => assn"
    and it_init :: "'s => 'it Heap"
    and it_has_next :: "'it => bool Heap"
    and it_next :: "'it => ('a * 'it) Heap"
  assumes "imp_set_iterate is_set is_it it_init it_has_next it_next"
### theory "Draft.Imp_Set_Spec"
### 0.294s elapsed time, 1.077s cpu time, 0.434s GC time
Loading theory "Draft.Union_Find" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples")
locale imp_map_iterate
  fixes is_map :: "('k => 'v option) => 'm => assn"
    and
    is_it :: "('k => 'v option) => 'm => ('k => 'v option) => 'it => assn"
    and it_init :: "'m => 'it Heap"
    and it_has_next :: "'it => bool Heap"
    and it_next :: "'it => (('k * 'v) * 'it) Heap"
  assumes "imp_map_iterate is_map is_it it_init it_has_next it_next"
consts
  blit :: "'a array => nat => 'a array => nat => nat => unit Heap"
locale imp_map_iterate'
  fixes is_map :: "('k => 'v option) => 'm => assn"
    and is_it :: "('k => 'v option) => 'm => ('k * 'v) list => 'it => assn"
    and it_init :: "'m => 'it Heap"
    and it_has_next :: "'it => bool Heap"
    and it_next :: "'it => (('k * 'v) * 'it) Heap"
  assumes "imp_map_iterate' is_map is_it it_init it_has_next it_next"
### theory "Draft.Imp_Map_Spec"
### 0.360s elapsed time, 1.339s cpu time, 0.434s GC time
Loading theory "Draft.Hash_Table" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples" via "Draft.Hash_Map_Impl" via "Draft.Hash_Map")
### theory "Draft.Array_Blit"
### 0.479s elapsed time, 1.791s cpu time, 0.481s GC time
consts
  val :: "'a node => 'a"
consts
  next :: "'a node => 'a node ref option"
### Ambiguous input (line 102 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ufa_invar) ("_position" l)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" x)
###           ("_applC" ("_position" length) ("_position" l))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" l)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rep_of)
###         ("_cargs"
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update"
###                 ("_applC" ("_position" rep_of)
###                   ("_cargs" ("_position" l) ("_position" x)))
###                 ("_applC" ("_position" rep_of)
###                   ("_cargs" ("_position" l) ("_position" x))))))
###           ("_position" i)))
###       ("_applC" ("_position" rep_of)
###         ("_cargs" ("_position" l) ("_position" i))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" ufa_invar) ("_position" l)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" x)
###           ("_applC" ("_position" length) ("_position" l))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" i)
###             ("_applC" ("_position" length) ("_position" l)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rep_of)
###         ("_cargs"
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind"
###               ("_applC" ("_position" rep_of)
###                 ("_cargs" ("_position" l) ("_position" x)))
###               ("_applC" ("_position" rep_of)
###                 ("_cargs" ("_position" l) ("_position" x)))))
###           ("_position" i)))
###       ("_applC" ("_position" rep_of)
###         ("_cargs" ("_position" l) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 157 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ufa_union)
###     ("_cargs" ("_position" l) ("_cargs" ("_position" x) ("_position" y))))
###   ("_applC" ("_position" l)
###     ("_list"
###       ("\<^const>Ref.update"
###         ("_applC" ("_position" rep_of)
###           ("_cargs" ("_position" l) ("_position" x)))
###         ("_applC" ("_position" rep_of)
###           ("_cargs" ("_position" l) ("_position" y)))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" ufa_union)
###     ("_cargs" ("_position" l) ("_cargs" ("_position" x) ("_position" y))))
###   ("_LUpdate" ("_position" l)
###     ("_lupdbind"
###       ("_applC" ("_position" rep_of)
###         ("_cargs" ("_position" l) ("_position" x)))
###       ("_applC" ("_position" rep_of)
###         ("_cargs" ("_position" l) ("_position" y))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "{}"
### Ambiguous input (line 267 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ufa_invar)
###     ("_applC" ("_position" l)
###       ("_list"
###         ("\<^const>Ref.update" ("_position" x)
###           ("_applC" ("_position" rep_of)
###             ("_cargs" ("_position" l) ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ufa_invar)
###     ("_LUpdate" ("_position" l)
###       ("_lupdbind" ("_position" x)
###         ("_applC" ("_position" rep_of)
###           ("_cargs" ("_position" l) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 268 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" i)
###     ("_applC" ("_position" length) ("_position" l))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rep_of)
###         ("_cargs"
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind" ("_position" x)
###               ("_applC" ("_position" rep_of)
###                 ("_cargs" ("_position" l) ("_position" x)))))
###           ("_position" i)))
###       ("_applC" ("_position" rep_of)
###         ("_cargs" ("_position" l) ("_position" i))))))
### ("\<^const>HOL.Trueprop"
###   ("_All_less" ("_position" i)
###     ("_applC" ("_position" length) ("_position" l))
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" rep_of)
###         ("_cargs"
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update" ("_position" x)
###                 ("_applC" ("_position" rep_of)
###                   ("_cargs" ("_position" l) ("_position" x))))))
###           ("_position" i)))
###       ("_applC" ("_position" rep_of)
###         ("_cargs" ("_position" l) ("_position" i))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 317 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ufa_invar)
###     ("_applC" ("_position" l)
###       ("_list"
###         ("\<^const>Ref.update" ("_position" x)
###           ("_applC" ("_position" rep_of)
###             ("_cargs" ("_position" l) ("_position" x))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ufa_invar)
###     ("_LUpdate" ("_position" l)
###       ("_lupdbind" ("_position" x)
###         ("_applC" ("_position" rep_of)
###           ("_cargs" ("_position" l) ("_position" x)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 323 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ufa_\<alpha>)
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update" ("_position" x)
###             ("_applC" ("_position" rep_of)
###               ("_cargs" ("_position" l) ("_position" x)))))))
###     ("_applC" ("_position" ufa_\<alpha>) ("_position" l))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" ufa_\<alpha>)
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind" ("_position" x)
###           ("_applC" ("_position" rep_of)
###             ("_cargs" ("_position" l) ("_position" x))))))
###     ("_applC" ("_position" ufa_\<alpha>) ("_position" l))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
### theory "Draft.List_Seg"
### 0.796s elapsed time, 2.636s cpu time, 0.630s GC time
Loading theory "Draft.Circ_List" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples")
Loading theory "Draft.Open_List" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples")
### theory "Draft.Union_Find"
### 0.809s elapsed time, 2.768s cpu time, 0.269s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### os_it_next None = undefined
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Open_List"
### 0.517s elapsed time, 1.733s cpu time, 0.171s GC time
Found termination order: "{}"
consts
  the_array :: "('k, 'v) hashtable => ('k * 'v) list array"
consts
  the_size :: "('k, 'v) hashtable => nat"
Found termination order: "{}"
### theory "Draft.Circ_List"
### 0.994s elapsed time, 2.992s cpu time, 0.982s GC time
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### Ambiguous input (line 211 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" abs_update)
###       ("_cargs" ("_position" k) ("_cargs" ("_position" v) ("_position" l))))
###     ("_applC" ("_position" l)
###       ("_list"
###         ("\<^const>Ref.update"
###           ("_applC" ("_position" bounded_hashcode_nat)
###             ("_cargs" ("_applC" ("_position" length) ("_position" l))
###               ("_position" k)))
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_update)
###               ("_cargs" ("_position" k)
###                 ("_cargs" ("_position" v)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_applC" ("_position" bounded_hashcode_nat)
###                       ("_cargs"
###                         ("_applC" ("_position" length) ("_position" l))
###                         ("_position" k)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" abs_update)
###       ("_cargs" ("_position" k) ("_cargs" ("_position" v) ("_position" l))))
###     ("_LUpdate" ("_position" l)
###       ("_lupdbind"
###         ("_applC" ("_position" bounded_hashcode_nat)
###           ("_cargs" ("_applC" ("_position" length) ("_position" l))
###             ("_position" k)))
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" ls_update)
###             ("_cargs" ("_position" k)
###               ("_cargs" ("_position" v)
###                 ("\<^const>List.nth" ("_position" l)
###                   ("_applC" ("_position" bounded_hashcode_nat)
###                     ("_cargs"
###                       ("_applC" ("_position" length) ("_position" l))
###                       ("_position" k))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 351 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind" ("_position" i)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_update)
###               ("_cargs" ("_position" k)
###                 ("_cargs" ("_position" v)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_position" i))))))))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update" ("_position" i)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" ls_update)
###                 ("_cargs" ("_position" k)
###                   ("_cargs" ("_position" v)
###                     ("\<^const>List.nth" ("_position" l)
###                       ("_position" i)))))))))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 369 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind" ("_position" i)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_update)
###               ("_cargs" ("_position" k)
###                 ("_cargs" ("_position" v)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_position" i))))))))
###       ("_applC" ("_position" Suc) ("_position" n)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update" ("_position" i)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" ls_update)
###                 ("_cargs" ("_position" k)
###                   ("_cargs" ("_position" v)
###                     ("\<^const>List.nth" ("_position" l)
###                       ("_position" i)))))))))
###       ("_applC" ("_position" Suc) ("_position" n)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size_list size (snd p)) <*mlex*> {}"
### Ambiguous input (line 511 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_hash)
###     ("_LUpdate" ("_position" ls)
###       ("_lupdbind"
###         ("_applC" ("_position" bounded_hashcode_nat)
###           ("_cargs" ("_applC" ("_position" length) ("_position" ls))
###             ("_position" k)))
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" ls_delete)
###             ("_cargs" ("_position" k)
###               ("\<^const>List.nth" ("_position" ls)
###                 ("_applC" ("_position" bounded_hashcode_nat)
###                   ("_cargs" ("_applC" ("_position" length) ("_position" ls))
###                     ("_position" k)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_hash)
###     ("_applC" ("_position" ls)
###       ("_list"
###         ("\<^const>Ref.update"
###           ("_applC" ("_position" bounded_hashcode_nat)
###             ("_cargs" ("_applC" ("_position" length) ("_position" ls))
###               ("_position" k)))
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" ls)
###                   ("_applC" ("_position" bounded_hashcode_nat)
###                     ("_cargs"
###                       ("_applC" ("_position" length) ("_position" ls))
###                       ("_position" k))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 551 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_distinct)
###     ("_LUpdate" ("_position" l)
###       ("_lupdbind"
###         ("_applC" ("_position" bounded_hashcode_nat)
###           ("_cargs" ("_applC" ("_position" length) ("_position" l))
###             ("_position" k)))
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" ls_delete)
###             ("_cargs" ("_position" k)
###               ("\<^const>List.nth" ("_position" l)
###                 ("_applC" ("_position" bounded_hashcode_nat)
###                   ("_cargs" ("_applC" ("_position" length) ("_position" l))
###                     ("_position" k)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_distinct)
###     ("_applC" ("_position" l)
###       ("_list"
###         ("\<^const>Ref.update"
###           ("_applC" ("_position" bounded_hashcode_nat)
###             ("_cargs" ("_applC" ("_position" length) ("_position" l))
###               ("_position" k)))
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" l)
###                   ("_applC" ("_position" bounded_hashcode_nat)
###                     ("_cargs"
###                       ("_applC" ("_position" length) ("_position" l))
###                       ("_position" k))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 575 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind" ("_position" i)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" l) ("_position" i)))))))
###       ("\<^const>Groups.minus_class.minus" ("_position" n)
###         ("\<^const>Groups.one_class.one")))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update" ("_position" i)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" ls_delete)
###                 ("_cargs" ("_position" k)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_position" i))))))))
###       ("\<^const>Groups.minus_class.minus" ("_position" n)
###         ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 593 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind" ("_position" i)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" l) ("_position" i)))))))
###       ("_position" n))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_size)
###     ("_cargs"
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update" ("_position" i)
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" ls_delete)
###                 ("_cargs" ("_position" k)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_position" i))))))))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 607 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple"
###     ("_applC" ("_position" is_hashtable)
###       ("_cargs" ("_position" l) ("_position" ht)))
###     ("_applC" ("_position" ht_delete)
###       ("_cargs" ("_position" k) ("_position" ht)))
###     ("_applC" ("_position" is_hashtable)
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update"
###             ("_applC" ("_position" bounded_hashcode_nat)
###               ("_cargs" ("_applC" ("_position" length) ("_position" l))
###                 ("_position" k)))
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" ls_delete)
###                 ("_cargs" ("_position" k)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_applC" ("_position" bounded_hashcode_nat)
###                       ("_cargs"
###                         ("_applC" ("_position" length) ("_position" l))
###                         ("_position" k)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple"
###     ("_applC" ("_position" is_hashtable)
###       ("_cargs" ("_position" l) ("_position" ht)))
###     ("_applC" ("_position" ht_delete)
###       ("_cargs" ("_position" k) ("_position" ht)))
###     ("_applC" ("_position" is_hashtable)
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind"
###           ("_applC" ("_position" bounded_hashcode_nat)
###             ("_cargs" ("_applC" ("_position" length) ("_position" l))
###               ("_position" k)))
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" l)
###                   ("_applC" ("_position" bounded_hashcode_nat)
###                     ("_cargs"
###                       ("_applC" ("_position" length) ("_position" l))
###                       ("_position" k))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 632 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Table.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple"
###     ("_applC" ("_position" is_hashtable)
###       ("_cargs" ("_position" l) ("_position" ht)))
###     ("_applC" ("_position" ht_delete)
###       ("_cargs" ("_position" k) ("_position" ht)))
###     ("_applC" ("_position" is_hashtable)
###       ("_applC" ("_position" l)
###         ("_list"
###           ("\<^const>Ref.update"
###             ("_applC" ("_position" bounded_hashcode_nat)
###               ("_cargs" ("_applC" ("_position" length) ("_position" l))
###                 ("_position" k)))
###             ("_applC" ("_position" fst)
###               ("_applC" ("_position" ls_delete)
###                 ("_cargs" ("_position" k)
###                   ("\<^const>List.nth" ("_position" l)
###                     ("_applC" ("_position" bounded_hashcode_nat)
###                       ("_cargs"
###                         ("_applC" ("_position" length) ("_position" l))
###                         ("_position" k)))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Hoare_Triple.hoare_triple"
###     ("_applC" ("_position" is_hashtable)
###       ("_cargs" ("_position" l) ("_position" ht)))
###     ("_applC" ("_position" ht_delete)
###       ("_cargs" ("_position" k) ("_position" ht)))
###     ("_applC" ("_position" is_hashtable)
###       ("_LUpdate" ("_position" l)
###         ("_lupdbind"
###           ("_applC" ("_position" bounded_hashcode_nat)
###             ("_cargs" ("_applC" ("_position" length) ("_position" l))
###               ("_position" k)))
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" l)
###                   ("_applC" ("_position" bounded_hashcode_nat)
###                     ("_cargs"
###                       ("_applC" ("_position" length) ("_position" l))
###                       ("_position" k))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Hash_Table"
### 2.452s elapsed time, 5.778s cpu time, 1.317s GC time
Loading theory "Draft.Hash_Map" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples" via "Draft.Hash_Map_Impl")
ht_hash ?l ==
ALL i<length ?l.
   ALL x:set (?l ! i). bounded_hashcode_nat (length ?l) (fst x) = i
### Ambiguous input (line 558 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Map.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_hash)
###     ("_LUpdate" ("_position" l)
###       ("_lupdbind"
###         ("_applC" ("_position" bounded_hashcode_nat)
###           ("_cargs" ("_applC" ("_position" length) ("_position" l))
###             ("_position" k)))
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" ls_delete)
###             ("_cargs" ("_position" k)
###               ("\<^const>List.nth" ("_position" l)
###                 ("_applC" ("_position" bounded_hashcode_nat)
###                   ("_cargs" ("_applC" ("_position" length) ("_position" l))
###                     ("_position" k)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_hash)
###     ("_applC" ("_position" l)
###       ("_list"
###         ("\<^const>Ref.update"
###           ("_applC" ("_position" bounded_hashcode_nat)
###             ("_cargs" ("_applC" ("_position" length) ("_position" l))
###               ("_position" k)))
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" l)
###                   ("_applC" ("_position" bounded_hashcode_nat)
###                     ("_cargs"
###                       ("_applC" ("_position" length) ("_position" l))
###                       ("_position" k))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 560 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Map.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_distinct)
###     ("_LUpdate" ("_position" l)
###       ("_lupdbind"
###         ("_applC" ("_position" bounded_hashcode_nat)
###           ("_cargs" ("_applC" ("_position" length) ("_position" l))
###             ("_position" k)))
###         ("_applC" ("_position" fst)
###           ("_applC" ("_position" ls_delete)
###             ("_cargs" ("_position" k)
###               ("\<^const>List.nth" ("_position" l)
###                 ("_applC" ("_position" bounded_hashcode_nat)
###                   ("_cargs" ("_applC" ("_position" length) ("_position" l))
###                     ("_position" k)))))))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" ht_distinct)
###     ("_applC" ("_position" l)
###       ("_list"
###         ("\<^const>Ref.update"
###           ("_applC" ("_position" bounded_hashcode_nat)
###             ("_cargs" ("_applC" ("_position" length) ("_position" l))
###               ("_position" k)))
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" ls_delete)
###               ("_cargs" ("_position" k)
###                 ("\<^const>List.nth" ("_position" l)
###                   ("_applC" ("_position" bounded_hashcode_nat)
###                     ("_cargs"
###                       ("_applC" ("_position" length) ("_position" l))
###                       ("_position" k))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 563 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Map.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_of)
###       ("_cargs"
###         ("_applC" ("_position" concat)
###           ("_LUpdate" ("_position" l)
###             ("_lupdbind"
###               ("_applC" ("_position" bounded_hashcode_nat)
###                 ("_cargs" ("_applC" ("_position" length) ("_position" l))
###                   ("_position" k)))
###               ("_applC" ("_position" fst)
###                 ("_applC" ("_position" ls_delete)
###                   ("_cargs" ("_position" k)
###                     ("\<^const>List.nth" ("_position" l)
###                       ("_applC" ("_position" bounded_hashcode_nat)
###                         ("_cargs"
###                           ("_applC" ("_position" length) ("_position" l))
###                           ("_position" k))))))))))
###         ("_position" x)))
###     ("_applC"
###       ("\<^const>Map.restrict_map"
###         ("_applC" ("_position" map_of)
###           ("_applC" ("_position" concat) ("_position" l)))
###         ("\<^const>Groups.uminus_class.uminus" ("_Finset" ("_position" k))))
###       ("_position" x))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" map_of)
###       ("_cargs"
###         ("_applC" ("_position" concat)
###           ("_applC" ("_position" l)
###             ("_list"
###               ("\<^const>Ref.update"
###                 ("_applC" ("_position" bounded_hashcode_nat)
###                   ("_cargs" ("_applC" ("_position" length) ("_position" l))
###                     ("_position" k)))
###                 ("_applC" ("_position" fst)
###                   ("_applC" ("_position" ls_delete)
###                     ("_cargs" ("_position" k)
###                       ("\<^const>List.nth" ("_position" l)
###                         ("_applC" ("_position" bounded_hashcode_nat)
###                           ("_cargs"
###                             ("_applC" ("_position" length) ("_position" l))
###                             ("_position" k)))))))))))
###         ("_position" x)))
###     ("_applC"
###       ("\<^const>Map.restrict_map"
###         ("_applC" ("_position" map_of)
###           ("_applC" ("_position" concat) ("_position" l)))
###         ("\<^const>Groups.uminus_class.uminus" ("_Finset" ("_position" k))))
###       ("_position" x))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Hash_Map"
### 0.386s elapsed time, 0.446s cpu time, 0.082s GC time
Loading theory "Draft.Hash_Map_Impl" (required by "Draft.Sep_ExamplesTemplates" via "Draft.Sep_Examples")
### theory "Draft.Hash_Map_Impl"
### 0.917s elapsed time, 0.954s cpu time, 0.055s GC time
*** Failed to load theory "Draft.Array_Map_Impl" (unresolved "Draft.Array_Blit")
*** Failed to load theory "Draft.Array_Set_Impl" (unresolved "Draft.Array_Blit")
*** Failed to load theory "Draft.Hash_Set_Impl" (unresolved "Draft.Hash_Map_Impl")
*** Failed to load theory "Draft.From_List_GA" (unresolved "Draft.Array_Set_Impl", "Draft.Hash_Set_Impl")
*** Failed to load theory "Draft.Idioms" (unresolved "Draft.Circ_List", "Draft.Hash_Set_Impl")
*** Failed to load theory "Draft.To_List_GA" (unresolved "Draft.Hash_Set_Impl")
*** Failed to load theory "Draft.Sep_Examples" (unresolved "Draft.Array_Map_Impl", "Draft.Array_Set_Impl", "Draft.Circ_List", "Draft.From_List_GA", "Draft.Hash_Map_Impl", "Draft.Hash_Set_Impl", "Draft.Idioms", "Draft.To_List_GA", "Draft.Union_Find")
*** Failed to load theory "Draft.Sep_ExamplesTemplates" (unresolved "Draft.Sep_Examples")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "82")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 80 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Hash_Map_Impl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "80")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 241 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Circ_List.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "78")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 508 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Union_Find.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "76")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 166 of "$AFP/Separation_Logic_Imperative_HOL/Examples/Array_Blit.thy")
Exception- TOPLEVEL_ERROR raised
