   [("Assertions.ex_assn_const", "(\<exists>\<^sub>Ax. ?c) = ?c",
     template_equation
      (template_app (template_hole 0, t_empty), template_var 0)),
    ("Assertions.assn_one_left", "emp * ?P = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Assertions.star_false_left", "false * ?P = false",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Assertions.star_false_right", "?P * false = false",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Assertions.mod_true", "(?h \<Turnstile> true) = in_range ?h",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Assertions.pure_assn_eq_emp_iff", "(\<up> ?P = emp) = ?P",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_var 0)),
    ("Assertions.pure_assn_eq_false_iff", "(\<up> ?P = false) = (~ ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Assertions.assn_times_comm", "?P * ?Q = ?Q * ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Assertions.mod_emp", "(?h \<Turnstile> emp) = (snd ?h = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Assertions.mod_h_bot_iff", "((?h, {}) \<Turnstile> \<up> ?b) = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_var 1)),
    ("Assertions.entt_star_true_simp",
     "(?A \<Longrightarrow>\<^sub>t ?B * true) =
      (?A \<Longrightarrow>\<^sub>t ?B)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Assertions.entt_star_true_simp",
     "(?A * true \<Longrightarrow>\<^sub>t ?B) =
      (?A \<Longrightarrow>\<^sub>t ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("Assertions.pure_assn_eq_conv", "(\<up> ?P = \<up> ?Q) = (?P = ?Q)",
     template_bimplication
      (template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Assertions.mod_h_bot_iff",
     "((?h, {}) \<Turnstile> ?q \<mapsto>\<^sub>a ?y) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Assertions.mod_h_bot_iff",
     "((?h, {}) \<Turnstile> ?p \<mapsto>\<^sub>r ?x) = False",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("Assertions.snga_same_false",
     "?p \<mapsto>\<^sub>a ?x * ?p \<mapsto>\<^sub>a ?y = false",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_hole 0)),
    ("Assertions.sngr_same_false",
     "?p \<mapsto>\<^sub>r ?x * ?p \<mapsto>\<^sub>r ?y = false",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_hole 0)),
    ("Assertions.ent_false_iff",
     "(?P \<Longrightarrow>\<^sub>A false) = (ALL h. ~ h \<Turnstile> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_app (template_hole 2, t_empty))),
    ("Assertions.ent_pure_pre_iff_sng",
     "(\<up> ?b \<Longrightarrow>\<^sub>A ?Q) =
      (?b --> (emp \<Longrightarrow>\<^sub>A ?Q))",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 3, template_hole 0),
           template_var 0)))),
    ("Assertions.merge_pure_star", "\<up> ?a * \<up> ?b = \<up> (?a & ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Assertions.merge_pure_and",
     "\<up> ?a \<and>\<^sub>A \<up> ?b = \<up> (?a & ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Assertions.merge_pure_or",
     "\<up> ?a \<or>\<^sub>A \<up> ?b = \<up> (?a | ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Assertions.mod_pure",
     "(?h \<Turnstile> \<up> ?b) = (snd ?h = {} & ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              template_var 0)
            )],
       template_dunno)),
    ("Assertions.mod_h_bot_indep",
     "((?h, {}) \<Turnstile> ?P) = ((?h', {}) \<Turnstile> ?P)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Assertions.assn_times_assoc", "?P * ?Q * ?R = ?P * (?Q * ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Assertions.mod_not_dist",
     "(?h \<Turnstile> \<not>\<^sub>A ?P) =
      (in_range ?h & ~ ?h \<Turnstile> ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))))),
    ("Assertions.mod_pure_star_dist",
     "(?h \<Turnstile> ?P * \<up> ?b) = (?h \<Turnstile> ?P & ?b)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 0)),
         template_var 1))),
    ("Assertions.ent_pure_pre_iff",
     "(?P * \<up> ?b \<Longrightarrow>\<^sub>A ?Q) =
      (?b --> (?P \<Longrightarrow>\<^sub>A ?Q))",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 1, template_var 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Assertions.mod_and_dist",
     "(?h \<Turnstile> ?P \<and>\<^sub>A ?Q) =
      (?h \<Turnstile> ?P & ?h \<Turnstile> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Assertions.mod_or_dist",
     "(?h \<Turnstile> ?P \<or>\<^sub>A ?Q) =
      (?h \<Turnstile> ?P | ?h \<Turnstile> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Assertions.mod_ex_dist",
     "(?h \<Turnstile> (\<exists>\<^sub>Ax. ?P x)) =
      (EX x. ?h \<Turnstile> ?P x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0),
       template_app (template_hole 0, t_empty))),
    ("Assertions.star_or_dist2",
     "?C * (?A \<or>\<^sub>A ?B) = ?C * ?A \<or>\<^sub>A ?C * ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Assertions.star_or_dist1",
     "(?A \<or>\<^sub>A ?B) * ?C = ?A * ?C \<or>\<^sub>A ?B * ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Assertions.ex_distrib_star",
     "(\<exists>\<^sub>Ax. ?P x * ?Q) = (\<exists>\<^sub>Ax. ?P x) * ?Q",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, t_empty)),
         template_var 0))),
    ("Assertions.ex_distrib_and",
     "(\<exists>\<^sub>Ax. ?P x \<and>\<^sub>A ?Q) =
      (\<exists>\<^sub>Ax. ?P x) \<and>\<^sub>A ?Q",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, t_empty)),
         template_var 0))),
    ("Assertions.ex_distrib_or",
     "(\<exists>\<^sub>Ax. ?P x \<or>\<^sub>A ?Q) =
      (\<exists>\<^sub>Ax. ?P x) \<or>\<^sub>A ?Q",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, t_empty)),
         template_var 0))),
    ("Assertions.precise_extr_pure",
     "precise (%x y. \<up> ?P * ?R x y) = (?P --> precise ?R)",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 3, template_var 0)))),
    ("Assertions.precise_extr_pure",
     "precise (%x y. ?R x y * \<up> ?P) = (?P --> precise ?R)",
     template_equation
      (template_app (template_hole 3, t_empty),
       template_app
        (template_app (template_hole 0, template_var 0),
         template_app (template_hole 3, template_var 1)))),
    ("Assertions.ent_pure_post_iff_sng",
     "(?P \<Longrightarrow>\<^sub>A \<up> ?b) =
      ((ALL h. h \<Turnstile> ?P --> ?b) &
       (?P \<Longrightarrow>\<^sub>A emp))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_hole 0)))),
    ("Assertions.in_range_dist_union",
     "in_range (?h, ?as Un ?as') =
      (in_range (?h, ?as) & in_range (?h, ?as'))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Assertions.relH_dist_union",
     "relH (?as Un ?as') ?h ?h' = (relH ?as ?h ?h' & relH ?as' ?h ?h')",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Assertions.mod_h_bot_iff",
     "((?h, {}) \<Turnstile> (\<exists>\<^sub>Ax. ?R x)) =
      (EX x. (?h, {}) \<Turnstile> ?R x)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, t_empty)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app (template_hole 0, t_empty))),
    ("Assertions.ex_join_or",
     "(\<exists>\<^sub>Ax. ?P x \<or>\<^sub>A (\<exists>\<^sub>Ax. ?Q x)) =
      (\<exists>\<^sub>Ax. ?P x \<or>\<^sub>A ?Q x)",
     template_equation
      (template_app (template_hole 1, t_empty),
       template_app (template_hole 1, t_empty))),
    ("Assertions.ent_pure_post_iff",
     "(?P \<Longrightarrow>\<^sub>A ?Q * \<up> ?b) =
      ((ALL h. h \<Turnstile> ?P --> ?b) &
       (?P \<Longrightarrow>\<^sub>A ?Q))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_app (template_hole 4, template_var 0))),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, t_empty)),
         template_app
          (template_app (template_hole 6, template_var 2),
           template_var 1)))),
    ("Assertions.mod_h_bot_iff",
     "((?h, {}) \<Turnstile> ?P * ?Q) =
      ((?h, {}) \<Turnstile> ?P & (?h, {}) \<Turnstile> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))))),
    ("Assertions.mod_h_bot_iff",
     "((?h, {}) \<Turnstile> ?P \<and>\<^sub>A ?Q) =
      ((?h, {}) \<Turnstile> ?P & (?h, {}) \<Turnstile> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))))),
    ("Assertions.mod_h_bot_iff",
     "((?h, {}) \<Turnstile> ?P \<or>\<^sub>A ?Q) =
      ((?h, {}) \<Turnstile> ?P | (?h, {}) \<Turnstile> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1))),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1))))),
    ("Assertions.mod_star_conv",
     "(?h \<Turnstile> ?A * ?B) =
      (EX hr as1 as2.
          ?h = (hr, as1 Un as2) &
          as1 Int as2 = {} &
          (hr, as1) \<Turnstile> ?A & (hr, as2) \<Turnstile> ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1)),
         template_var 0),
       template_app (template_hole 8, t_empty)))]
