Loading theory "HOL-Data_Structures.Queue_Spec" (required by "Draft.Hood_Melville_QueueMoreTemplates" via "Draft.Hood_Melville_Queue")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Hood_Melville_QueueMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Hood_Melville_QueueMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Hood_Melville_QueueMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
locale Queue
  fixes empty :: "'q"
    and enq :: "'a => 'q => 'q"
    and first :: "'q => 'a"
    and deq :: "'q => 'q"
    and is_empty :: "'q => bool"
    and list :: "'q => 'a list"
    and invar :: "'q => bool"
  assumes "Queue empty enq first deq is_empty list invar"
### theory "HOL-Data_Structures.Queue_Spec"
### 0.057s elapsed time, 0.260s cpu time, 0.000s GC time
Loading theory "Draft.Hood_Melville_Queue" (required by "Draft.Hood_Melville_QueueMoreTemplates")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.512s cpu time, 0.044s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Hood_Melville_QueueMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.209s elapsed time, 0.848s cpu time, 0.044s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Hood_Melville_QueueMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.315s cpu time, 0.133s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Hood_Melville_QueueMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.006s elapsed time, 3.810s cpu time, 0.833s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.088s elapsed time, 3.972s cpu time, 0.822s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "HOL-Library.Tree"
### 2.004s elapsed time, 6.315s cpu time, 1.054s GC time
Loading theory "Draft.Templates" (required by "Draft.Hood_Melville_QueueMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.056s elapsed time, 0.116s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Hood_Melville_QueueMoreTemplates")
Found termination order: "{}"
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.764s elapsed time, 1.820s cpu time, 0.758s GC time
Found termination order: "{}"
### theory "Draft.Hood_Melville_Queue"
### 2.900s elapsed time, 8.487s cpu time, 1.856s GC time
Loading theory "Draft.Hood_Melville_QueueMoreTemplates"
val templateLemmas =
   [("Hood_Melville_Queue.invar_qfa", "invar (qfa ?l)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Hood_Melville_Queue.inv_st_exec", "inv_st ?s ==> inv_st (exec ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Hood_Melville_Queue.inv_st_invalidate",
     "inv_st ?s ==> inv_st (invalidate ?s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Hood_Melville_Queue.invar_deq", "invar ?q ==> invar (deq ?q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Hood_Melville_Queue.inv_st_exec2",
     "inv_st ?s ==> inv_st (exec (exec ?s))",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Hood_Melville_Queue.invar_enq", "invar ?q ==> invar (enq ?x ?q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Hood_Melville_Queue.qfa_deq_correct",
     "list (deq (qfa ?l)) = tl (list (qfa ?l))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 0,
         template_app
          (template_hole 3,
           template_app (template_hole 1, template_var 0))))),
    ("Hood_Melville_Queue.queue_correct_deq",
     "invar ?q ==> list (deq ?q) = tl (list ?q)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Hood_Melville_Queue.qfa_enq_correct",
     "list (enq ?x (qfa ?l)) = list (qfa ?l) @ [?x]",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 5,
             template_app (template_hole 3, template_var 0))),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Hood_Melville_Queue.queue_correct_enq",
     "invar ?q ==> list (enq ?x ?q) = list ?q @ [?x]",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Hood_Melville_Queue.first_correct",
     "[| invar ?q; list ?q ~= [] |] ==> first ?q = hd (list ?q)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (
            template_equation
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 0,
           template_app (template_hole 4, template_var 0))))),
    ("Hood_Melville_Queue.tl_rev_take_Suc",
     "?n + 1 <= length ?l ==>
      rev (take ?n ?l) = tl (rev (take (Suc ?n) ?l))",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 7, template_var 1),
            template_hole 6),
          template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 1)),
               template_var 0)))))),
    ("Hood_Melville_Queue.inv_st_steps",
     "[| inv_st ?s; ?s ~= Idle |]
      ==> EX x. steps (rem_steps ?s) ?s = Done x",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Hood_Melville_Queue.tl_rev_take",
     "[| 0 < ?ok; ?ok <= length ?f |]
      ==> rev (take ?ok (?x # ?f)) = tl (rev (take ?ok ?f)) @ [?x]",
     template_implication
      ([template_inequation (less_than, template_hole 9, template_var 2),
        template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1)))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 0))))),
    ("Hood_Melville_Queue.rev_steps_app",
     "inv_st (Rev ?ok ?f ?f' ?r ?r') ==>
      steps (length ?f + 1) (Rev ?ok ?f ?f' ?r ?r') =
      App (length ?f + ?ok) (rev ?f @ ?f') (rev ?r @ ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 3)),
               template_hole 3)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 8, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 3)),
                 template_var 4)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 3)),
               template_var 2)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.Hood_Melville_QueueMoreTemplates"
### 0.329s elapsed time, 0.495s cpu time, 0.028s GC time
val it = (): unit
