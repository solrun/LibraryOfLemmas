Loading theory "HOL-Data_Structures.Cmp" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.Weight_Balanced_Trees" via "HOL-Data_Structures.Isin2")
Loading theory "HOL-Data_Structures.Less_False" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.Weight_Balanced_Trees" via "HOL-Data_Structures.Isin2" via "HOL-Data_Structures.Set_Specs" via "HOL-Data_Structures.List_Ins_Del" via "HOL-Data_Structures.Sorted_Less")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "HOL-Data_Structures.Less_False"
### 0.047s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "HOL-Data_Structures.Sorted_Less" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.Weight_Balanced_Trees" via "HOL-Data_Structures.Isin2" via "HOL-Data_Structures.Set_Specs" via "HOL-Data_Structures.List_Ins_Del")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Data_Structures.Sorted_Less"
### 0.068s elapsed time, 0.260s cpu time, 0.034s GC time
Loading theory "HOL-Data_Structures.List_Ins_Del" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.Weight_Balanced_Trees" via "HOL-Data_Structures.Isin2" via "HOL-Data_Structures.Set_Specs")
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.545s cpu time, 0.034s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Data_Structures.Cmp"
### 0.321s elapsed time, 1.295s cpu time, 0.103s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.322s elapsed time, 1.289s cpu time, 0.103s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.795s cpu time, 0.069s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Data_Structures.List_Ins_Del"
### 0.228s elapsed time, 0.897s cpu time, 0.069s GC time
Loading theory "HOL-Data_Structures.Set_Specs" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.Weight_Balanced_Trees" via "HOL-Data_Structures.Isin2")
locale Set
  fixes empty :: "'s"
    and insert :: "'a => 's => 's"
    and delete :: "'a => 's => 's"
    and isin :: "'s => 'a => bool"
    and set :: "'s => 'a set"
    and invar :: "'s => bool"
  assumes "Set empty insert delete isin set invar"
locale Set_by_Ordered
  fixes empty :: "'t"
    and insert :: "'a => 't => 't"
    and delete :: "'a => 't => 't"
    and isin :: "'t => 'a => bool"
    and inorder :: "'t => 'a list"
    and inv :: "'t => bool"
  assumes "Set_by_Ordered empty insert delete isin inorder inv"
locale Set2
  fixes empty :: "'s"
    and delete :: "'a => 's => 's"
    and isin :: "'s => 'a => bool"
    and set :: "'s => 'a set"
    and invar :: "'s => bool"
    and insert :: "'a => 's => 's"
    and union :: "'s => 's => 's"
    and inter :: "'s => 's => 's"
    and diff :: "'s => 's => 's"
  assumes "Set2 empty delete isin set invar insert union inter diff"
### theory "HOL-Data_Structures.Set_Specs"
### 0.120s elapsed time, 0.469s cpu time, 0.080s GC time
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 0.929s elapsed time, 2.920s cpu time, 0.707s GC time
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.998s elapsed time, 3.094s cpu time, 0.707s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.818s elapsed time, 4.018s cpu time, 0.797s GC time
Loading theory "Draft.Templates" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Data_Structures.Tree2" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.Weight_Balanced_Trees" via "HOL-Data_Structures.Isin2")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.063s elapsed time, 0.158s cpu time, 0.041s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Weight_Balanced_TreesMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Data_Structures.Tree2"
### 0.216s elapsed time, 0.466s cpu time, 0.041s GC time
Loading theory "HOL-Data_Structures.Isin2" (required by "Draft.Weight_Balanced_TreesMoreTemplates" via "Draft.Weight_Balanced_Trees")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Data_Structures.Isin2"
### 0.353s elapsed time, 0.736s cpu time, 0.063s GC time
Loading theory "Draft.Weight_Balanced_Trees" (required by "Draft.Weight_Balanced_TreesMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.525s elapsed time, 1.085s cpu time, 0.063s GC time
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!a b d e. rot2 a b \<langle>\<rangle> d e = undefined
Found termination order: "{}"
locale WBT
  fixes \<Delta>1 :: "nat"
    and \<Delta>2 :: "nat"
    and \<Gamma>1 :: "nat"
    and \<Gamma>2 :: "nat"
  assumes "WBT \<Delta>1 \<Delta>2 \<Gamma>1 \<Gamma>2"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!a b. rotateL a b \<langle>\<rangle> = undefined
Found termination order: "{}"
Found termination order: "{}"
### Missing patterns in function definition:
### !!b c. rotateR \<langle>\<rangle> b c = undefined
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Missing patterns in function definition:
### split_min \<langle>\<rangle> = undefined
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### del_max \<langle>\<rangle> = undefined
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.Weight_Balanced_Trees"
### 1.732s elapsed time, 2.015s cpu time, 0.281s GC time
Loading theory "Draft.Weight_Balanced_TreesMoreTemplates"
val templateLemmas =
   [("Weight_Balanced_Trees.size_length",
     "size ?t = length (Tree2.inorder ?t)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Weight_Balanced_Trees.size_wbt_eq_size",
     "wbt ?t ==> size_wbt ?t = size ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_hole 6,
                    template_app
                     (template_hole 5,
                      template_app
                       (template_hole 4,
                        template_app
                         (template_hole 4,
                          template_app
                           (template_hole 5, template_hole 3)))))),
                template_app
                 (template_hole 6,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 5,
                      template_app (template_hole 4, template_hole 3))))),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Weight_Balanced_Trees.not_Leaf_if_not_single",
     "~ single ?l ?r ==> ?l ~= \<langle>\<rangle>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_hole 4,
                            template_app
                             (template_hole 3,
                              template_app
                               (template_hole 3, template_hole 2))))),
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 4,
                          template_app
                           (template_hole 3,
                            template_app
                             (template_hole 4, template_hole 2))))),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_negation
        (template_equation (template_var 1, template_hole 0)))),
    ("Weight_Balanced_Trees.neq_Leaf2_iff",
     "(?t ~= \<langle>\<rangle>) =
      (EX l a n r. ?t = \<langle>l, (a, n), r\<rangle>)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_hole 5)),
       template_app (template_hole 4, t_empty))),
    ("Weight_Balanced_Trees.not_Leaf_if_not_balanced1",
     "~ balanced1 ?l ?r ==> ?r ~= \<langle>\<rangle>",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_hole 4,
                            template_app
                             (template_hole 3,
                              template_app
                               (template_hole 3,
                                template_app
                                 (template_hole 4, template_hole 2)))))),
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 3,
                          template_app
                           (template_hole 4,
                            template_app
                             (template_hole 3, template_hole 2))))),
                    template_var 1),
                  template_var 0)
                )
            )],
       template_negation
        (template_equation (template_var 0, template_hole 0)))),
    ("Weight_Balanced_Trees.size_rot2L",
     "?B ~= \<langle>\<rangle> ==>
      size (rot2 ?A ?a ?B ?b ?C) = size ?A + size ?B + size ?C + 2",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 7))],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2),
                 template_var 4),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app (template_hole 5, template_var 3)),
                   template_app (template_hole 5, template_var 4))),
               template_app (template_hole 5, template_var 0))),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Weight_Balanced_Trees.inorder_rot2",
     "?B ~= \<langle>\<rangle> ==>
      Tree2.inorder (rot2 ?A ?a ?B ?b ?C) =
      Tree2.inorder ?A @ ?a # Tree2.inorder ?B @ ?b # Tree2.inorder ?C",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2),
                 template_var 4),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 3, template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app (template_hole 3, template_var 0)))))))),
    ("Weight_Balanced_Trees.size_rotateR",
     "?l ~= \<langle>\<rangle> ==>
      size (rotateR ?l ?a ?r) = size ?l + size ?r + 1",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3, template_hole 2))))),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4, template_hole 2))))),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 7, template_var 2)),
               template_app (template_hole 7, template_var 0))),
           template_hole 0)))),
    ("Weight_Balanced_Trees.inorder_rotateR",
     "?l ~= \<langle>\<rangle> ==>
      Tree2.inorder (rotateR ?l ?a ?r) =
      Tree2.inorder ?l @ ?a # Tree2.inorder ?r",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3, template_hole 2))))),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4, template_hole 2))))),
                 template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 7, template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app (template_hole 7, template_var 0)))))),
    ("Weight_Balanced_Trees.size_rotateL",
     "?r ~= \<langle>\<rangle> ==>
      size (rotateL ?l ?a ?r) = size ?l + size ?r + 1",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3, template_hole 2))))),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4, template_hole 2))))),
                 template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 7, template_var 1)),
               template_app (template_hole 7, template_var 2))),
           template_hole 0)))),
    ("Weight_Balanced_Trees.inorder_rotateL",
     "?r ~= \<langle>\<rangle> ==>
      Tree2.inorder (rotateL ?l ?a ?r) =
      Tree2.inorder ?l @ ?a # Tree2.inorder ?r",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3, template_hole 2))))),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4, template_hole 2))))),
                 template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 7, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app (template_hole 7, template_var 2)))))),
    ("Weight_Balanced_Trees.inorder_combine",
     "Tree2.inorder (combine ?l ?r) = Tree2.inorder ?l @ Tree2.inorder ?r",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 3, template_hole 1)))))),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2, template_hole 1))))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 3, template_hole 1))))),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))))),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 6, template_var 1)),
         template_app (template_hole 6, template_var 0)))),
    ("Weight_Balanced_Trees.size_delete_if_isin",
     "isin ?t ?x ==> size ?t = Suc (size (delete ?x ?t))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 6, template_var 1),
         template_app
          (template_hole 5,
           template_app
            (template_hole 6,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2, template_hole 0)))))),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_hole 0))))),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2, template_hole 0))))),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1, template_hole 0))))),
                 template_var 0),
               template_var 1)))))),
    ("Weight_Balanced_Trees.size_insert",
     "size (Weight_Balanced_Trees.insert ?x ?t) =
      (if isin ?t ?x then size ?t else Suc (size ?t))",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 5, template_hole 3)))))),
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 4, template_hole 3))))),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 5, template_hole 3))))),
               template_app
                (template_hole 6,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 5,
                     template_app (template_hole 4, template_hole 3))))),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app (template_hole 8, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 8, template_var 0))))),
    ("Weight_Balanced_Trees.size_del_max",
     "?t ~= \<langle>\<rangle> ==> size ?t = Suc (size (snd (del_max ?t)))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_hole 6,
           template_app
            (template_hole 7,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2, template_hole 0)))))),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_hole 0))))),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2, template_hole 0))))),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1, template_hole 0))))),
                 template_var 0))))))),
    ("Weight_Balanced_Trees.size_split_min",
     "?t ~= \<langle>\<rangle> ==>
      size ?t = Suc (size (snd (split_min ?t)))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9))],
       template_equation
        (template_app (template_hole 7, template_var 0),
         template_app
          (template_hole 6,
           template_app
            (template_hole 7,
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1,
                               template_app
                                (template_hole 1,
                                 template_app
                                  (template_hole 2, template_hole 0)))))),
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 1,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 1, template_hole 0))))),
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 1,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 2, template_hole 0))))),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 1,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1, template_hole 0))))),
                 template_var 0))))))),
    ("Weight_Balanced_Trees.inorder_delete",
     "Sorted_Less.sorted (Tree2.inorder ?t) ==>
      Tree2.inorder (delete ?x ?t) = del_list ?x (Tree2.inorder ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app (template_hole 7, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 3, template_hole 1)))))),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 1))))),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3, template_hole 1))))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))))),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 7, template_var 1))))),
    ("Weight_Balanced_Trees.inorder_insert",
     "Sorted_Less.sorted (Tree2.inorder ?t) ==>
      Tree2.inorder (Weight_Balanced_Trees.insert ?x ?t) =
      ins_list ?x (Tree2.inorder ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_hole 8),
              template_app (template_hole 7, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 3, template_hole 1)))))),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 2, template_hole 1))))),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 3, template_hole 1))))),
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 2,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))))),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 7, template_var 1))))),
    ("Weight_Balanced_Trees.split_minD",
     "[| split_min ?t = (?x, ?t'); ?t ~= \<langle>\<rangle> |]
      ==> ?x # Tree2.inorder ?t' = Tree2.inorder ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_hole 10,
                      template_app
                       (template_hole 9,
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 8,
                            template_app
                             (template_hole 9, template_hole 7)))))),
                  template_app
                   (template_hole 10,
                    template_app
                     (template_hole 8,
                      template_app
                       (template_hole 9,
                        template_app (template_hole 8, template_hole 7))))),
                template_app
                 (template_hole 10,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 9, template_hole 7))))),
              template_app
               (template_hole 10,
                template_app
                 (template_hole 8,
                  template_app
                   (template_hole 9,
                    template_app (template_hole 8, template_hole 7))))),
            template_var 2),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 2)))),
    ("Weight_Balanced_Trees.del_maxD",
     "[| del_max ?t = (?x, ?t'); ?t ~= \<langle>\<rangle> |]
      ==> Tree2.inorder ?t' @ [?x] = Tree2.inorder ?t",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app
                 (template_app
                   (template_hole 13,
                    template_app
                     (template_hole 12,
                      template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10,
                          template_app
                           (template_hole 10,
                            template_app
                             (template_hole 11, template_hole 9)))))),
                  template_app
                   (template_hole 12,
                    template_app
                     (template_hole 10,
                      template_app
                       (template_hole 11,
                        template_app
                         (template_hole 10, template_hole 9))))),
                template_app
                 (template_hole 12,
                  template_app
                   (template_hole 10,
                    template_app
                     (template_hole 11,
                      template_app (template_hole 11, template_hole 9))))),
              template_app
               (template_hole 12,
                template_app
                 (template_hole 10,
                  template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_hole 9))))),
            template_var 2),
          template_app
           (template_app (template_hole 8, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0)),
         template_app (template_hole 2, template_var 2)))),
    ("Weight_Balanced_Trees.delete_id_if_wbt_notin",
     "[| wbt ?t; ~ isin ?t ?x |] ==> delete ?x ?t = ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 7,
                    template_app
                     (template_hole 6,
                      template_app
                       (template_hole 5,
                        template_app
                         (template_hole 5,
                          template_app
                           (template_hole 6, template_hole 4)))))),
                template_app
                 (template_hole 7,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 6,
                      template_app (template_hole 5, template_hole 4))))),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 0,
                     template_app
                      (template_hole 7,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 5,
                             template_app
                              (template_hole 6, template_hole 4)))))),
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 6,
                         template_app
                          (template_hole 5, template_hole 4))))),
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 6, template_hole 4))))),
               template_app
                (template_hole 7,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 6,
                     template_app (template_hole 5, template_hole 4))))),
             template_var 0),
           template_var 1),
         template_var 1))),
    ("Weight_Balanced_Trees.wbt_delete", "wbt ?t ==> wbt (delete ?x ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 3, template_hole 1)))))),
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 1))))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3, template_hole 1)))))),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 3, template_hole 1)))))),
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_hole 1))))),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3, template_hole 1))))),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2, template_hole 1))))),
                 template_var 0),
               template_var 1))
           ))),
    ("Weight_Balanced_Trees.wbt_insert",
     "wbt ?t ==> wbt (Weight_Balanced_Trees.insert ?x ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 3,
                      template_app
                       (template_hole 2,
                        template_app
                         (template_hole 2,
                          template_app
                           (template_hole 3, template_hole 1)))))),
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 2,
                    template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_hole 1))))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3, template_hole 1)))))),
               template_app
                (template_hole 4,
                 template_app
                  (template_hole 2,
                   template_app
                    (template_hole 3,
                     template_app (template_hole 2, template_hole 1))))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2,
                               template_app
                                (template_hole 2,
                                 template_app
                                  (template_hole 3, template_hole 1)))))),
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 2,
                           template_app
                            (template_hole 3,
                             template_app
                              (template_hole 2, template_hole 1))))),
                     template_app
                      (template_hole 4,
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 3, template_hole 1))))),
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 2,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 2, template_hole 1))))),
                 template_var 0),
               template_var 1))
           ))),
    ("Weight_Balanced_Trees.wbt_del_max",
     "[| ?t ~= \<langle>\<rangle>; wbt ?t |] ==> wbt (snd (del_max ?t))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_hole 3,
                        template_app
                         (template_hole 3,
                          template_app
                           (template_hole 4, template_hole 2)))))),
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_hole 2))))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4, template_hole 2)))))),
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 4, template_hole 2)))))),
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 2))))),
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 4, template_hole 2))))),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3, template_hole 2))))),
                 template_var 0)))
           ))),
    ("Weight_Balanced_Trees.wbt_split_min",
     "[| ?t ~= \<langle>\<rangle>; wbt ?t |] ==> wbt (snd (split_min ?t))",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_hole 3,
                        template_app
                         (template_hole 3,
                          template_app
                           (template_hole 4, template_hole 2)))))),
                template_app
                 (template_hole 5,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_hole 2))))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4, template_hole 2)))))),
               template_app
                (template_hole 5,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_hole 2))))),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 0,
                         template_app
                          (template_hole 5,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3,
                               template_app
                                (template_hole 3,
                                 template_app
                                  (template_hole 4, template_hole 2)))))),
                       template_app
                        (template_hole 5,
                         template_app
                          (template_hole 3,
                           template_app
                            (template_hole 4,
                             template_app
                              (template_hole 3, template_hole 2))))),
                     template_app
                      (template_hole 5,
                       template_app
                        (template_hole 3,
                         template_app
                          (template_hole 4,
                           template_app
                            (template_hole 4, template_hole 2))))),
                   template_app
                    (template_hole 5,
                     template_app
                      (template_hole 3,
                       template_app
                        (template_hole 4,
                         template_app
                          (template_hole 3, template_hole 2))))),
                 template_var 0)))
           ))),
    ("Weight_Balanced_Trees.wbt_balanceL",
     "[| wbt \<langle>?l, (?a, ?n), ?r\<rangle>; wbt ?l';
         size ?l = size ?l' + 1 |]
      ==> wbt (balanceL ?l' ?a' ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 9, template_hole 7)))))),
                template_app
                 (template_hole 10,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))))),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3)),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 9, template_hole 7)))))),
                template_app
                 (template_hole 10,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))))),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 3, template_var 5),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 3, template_var 1)),
            template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_hole 8,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 9, template_hole 7)))))),
               template_app
                (template_hole 10,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_hole 7))))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 0,
                           template_app
                            (template_hole 10,
                             template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8,
                                 template_app
                                  (template_hole 8,
                                   template_app
                                    (template_hole 9, template_hole 7)))))),
                         template_app
                          (template_hole 10,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8, template_hole 7))))),
                       template_app
                        (template_hole 10,
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 9,
                             template_app
                              (template_hole 9, template_hole 7))))),
                     template_app
                      (template_hole 10,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8, template_hole 7))))),
                   template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("Weight_Balanced_Trees.wbt_balanceR",
     "[| wbt \<langle>?l, (?a, ?n), ?r\<rangle>; wbt ?r';
         size ?r = size ?r' + 1 |]
      ==> wbt (balanceR ?l ?a' ?r')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 9, template_hole 7)))))),
                template_app
                 (template_hole 10,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))))),
              template_app
               (template_app
                 (template_app (template_hole 6, template_var 5),
                  template_app
                   (template_app (template_hole 5, template_var 4),
                    template_var 3)),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_hole 10,
                    template_app
                     (template_hole 9,
                      template_app
                       (template_hole 8,
                        template_app
                         (template_hole 8,
                          template_app
                           (template_hole 9, template_hole 7)))))),
                template_app
                 (template_hole 10,
                  template_app
                   (template_hole 8,
                    template_app
                     (template_hole 9,
                      template_app (template_hole 8, template_hole 7))))),
              template_var 1)
            ),
        template_equation
         (template_app (template_hole 3, template_var 2),
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 3, template_var 1)),
            template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_hole 10,
                   template_app
                    (template_hole 9,
                     template_app
                      (template_hole 8,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 9, template_hole 7)))))),
               template_app
                (template_hole 10,
                 template_app
                  (template_hole 8,
                   template_app
                    (template_hole 9,
                     template_app (template_hole 8, template_hole 7))))),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 0,
                           template_app
                            (template_hole 10,
                             template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8,
                                 template_app
                                  (template_hole 8,
                                   template_app
                                    (template_hole 9, template_hole 7)))))),
                         template_app
                          (template_hole 10,
                           template_app
                            (template_hole 8,
                             template_app
                              (template_hole 9,
                               template_app
                                (template_hole 8, template_hole 7))))),
                       template_app
                        (template_hole 10,
                         template_app
                          (template_hole 8,
                           template_app
                            (template_hole 9,
                             template_app
                              (template_hole 9, template_hole 7))))),
                     template_app
                      (template_hole 10,
                       template_app
                        (template_hole 8,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_hole 8, template_hole 7))))),
                   template_var 5),
                 template_var 0),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.Weight_Balanced_TreesMoreTemplates"
### 0.293s elapsed time, 0.417s cpu time, 0.000s GC time
val it = (): unit
