Loading theory "Deriving.Derive_Manager" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Deriving.Comparator" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Deriving.Generator_Aux" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Draft.Pi_Regular_Set" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.Pi_Regular_Exp")
signature BNF_ACCESS =
  sig
    val bnf_types: Proof.context -> string list -> typ list
    val case_consts: Proof.context -> string list -> term list
    val case_simps: Proof.context -> string list -> thm list list
    val case_thms: Proof.context -> string list -> thm list
    val constr_argument_types:
       Proof.context -> string list -> typ list list list
    val constr_terms: Proof.context -> string -> term list
    val distinct_thms: Proof.context -> string list -> thm list list
    val induct_thms: Proof.context -> string list -> thm list
    val inject_thms: Proof.context -> string list -> thm list list
    val map_comps: Proof.context -> string list -> thm list
    val map_simps: Proof.context -> string list -> thm list list
    val map_terms: Proof.context -> string list -> term list
    val set_simps: Proof.context -> string list -> thm list list
    val set_terms: Proof.context -> string list -> term list list
  end
structure Bnf_Access: BNF_ACCESS
overloading
  word_pow \<equiv> compow :: nat => 'a list => 'a list
consts
  word_pow :: "nat => 'a list => 'a list"
signature DERIVE_MANAGER =
  sig
    val derive: string -> string -> string -> theory -> theory
    val derive_cmd: string -> string -> string -> theory -> theory
    val print_info: theory -> unit
    val register_derive:
       string ->
         string ->
           (string -> string -> theory -> theory) -> theory -> theory
  end
structure Derive_Manager: DERIVE_MANAGER
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
### theory "Deriving.Derive_Manager"
### 0.062s elapsed time, 0.278s cpu time, 0.000s GC time
Loading theory "HOL-Library.Char_ord" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances")
consts
  lang_pow :: "nat => 'a list set => 'a list set"
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
signature GENERATOR_AUX =
  sig
    val OF_option: thm -> thm option list -> thm
    val add_used_tycos:
       Proof.context -> string -> string list -> string list
    val alist_to_string: (string * 'a) list -> string
    val conjI_tac:
       thm list ->
         Proof.context ->
           'a list -> (Proof.context -> int -> tactic) -> tactic
    val create_map:
       (typ -> term) ->
         (string * typ -> 'a -> term) ->
           'a ->
             (typ -> bool) ->
               (local_theory -> string -> bool list) ->
                 (local_theory -> string -> term) ->
                   (local_theory -> string -> 'a -> term) ->
                     string list ->
                       (local_theory -> string -> 'a) ->
                         typ -> local_theory -> term
    val create_partial:
       'a ->
         (typ -> bool) ->
           (local_theory -> string -> bool list) ->
             (local_theory -> string -> term) ->
               (local_theory -> string -> 'a -> term) ->
                 string list ->
                   (local_theory -> string -> 'a) ->
                     typ -> local_theory -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val drop_last: 'a list -> 'a list
    val freeify_tvars: typ -> typ
    val ind_case_to_idxs: 'a list list -> int -> int * int
    val infer_type: Proof.context -> term -> term
    val ints_to_subscript: int list -> string
    val is_class_instance: theory -> string -> sort -> bool
    val lambdas: term list -> term -> term
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (int ->
                Proof.context * thm list * (string * cterm) list -> tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_id: typ -> term
    val mk_infer_const: string -> Proof.context -> term -> term
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val prove_multi_future:
       Proof.context ->
         string list ->
           term list ->
             term list ->
               ({context: Proof.context, prems: thm list} -> tactic) ->
                 thm list
    val recursor:
       (string -> 'a) * ('a -> bool list) * string list ->
         bool ->
           (typ -> 'b) ->
             (typ -> 'b) ->
               (typ -> 'b) ->
                 ((typ * 'b option) list * 'a -> 'b) -> typ -> 'b
    val rename_types: (typ * typ) list -> term -> term
    val split_IHs:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list -> thm list -> thm list list
    val std_recursor_tac:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list ->
           ('a -> thm) ->
             thm list -> typ -> thm list -> Proof.context -> tactic
    val sub: string -> string
    val subT: string -> typ -> string
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_and_vs_of_used_typname:
       string ->
         bool list -> string list -> typ * (string * string list) list
    val type_parameters:
       typ -> Proof.context -> (string * sort) list * typ list
  end
structure Generator_Aux: GENERATOR_AUX
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### theory "Deriving.Generator_Aux"
### 0.146s elapsed time, 0.604s cpu time, 0.028s GC time
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.Pi_Regular_Exp" via "HOL-Library.Code_Target_Nat")
### theory "HOL-Library.Char_ord"
### 0.096s elapsed time, 0.373s cpu time, 0.028s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "HOL-Library.Code_Abstract_Nat"
### 0.056s elapsed time, 0.226s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.Pi_Regular_Exp")
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### theory "HOL-Library.Function_Algebras"
### 0.147s elapsed time, 0.578s cpu time, 0.056s GC time
Loading theory "HOL-Library.List_Lexorder" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.Pi_Regular_Exp")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
instantiation
  list :: (ord) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
### theory "HOL-Library.Code_Target_Nat"
### 0.140s elapsed time, 0.548s cpu time, 0.056s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  list :: (linorder) distrib_lattice
  inf_list == inf :: 'a list => 'a list => 'a list
  sup_list == sup :: 'a list => 'a list => 'a list
instantiation
  list :: (order) order_bot
  bot_list == bot :: 'a list
### theory "HOL-Library.List_Lexorder"
### 0.068s elapsed time, 0.270s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "{}"
locale comparator
  fixes comp :: "'a => 'a => order"
  assumes "comparator comp"
### theory "Draft.Pi_Regular_Set"
### 0.393s elapsed time, 1.567s cpu time, 0.084s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.201s elapsed time, 0.788s cpu time, 0.142s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.284s elapsed time, 1.116s cpu time, 0.142s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.ExtrEqs")
### theory "Deriving.Comparator"
### 0.652s elapsed time, 2.581s cpu time, 0.226s GC time
Loading theory "Deriving.Compare" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
class compare = type +
  fixes compare :: "'a => 'a => order"
  assumes "comparator_compare": "comparator compare"
class compare_order = compare + ord +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class compare_order = compare + linorder +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
signature COMPARE_CODE =
  sig
    val change_compare_code:
       term -> string list -> local_theory -> local_theory
  end
structure Compare_Code: COMPARE_CODE
### theory "Deriving.Compare"
### 0.766s elapsed time, 2.888s cpu time, 0.607s GC time
Loading theory "Deriving.Comparator_Generator" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.921s elapsed time, 3.496s cpu time, 0.668s GC time
(if ?x <= ?y then if ?x = ?y then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y = ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y <= ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?x < ?y then ?Q else ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x <= ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y < ?x then ?R else ?P) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x = ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y = ?x then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y < ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x < ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y <= ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x <= ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.002s elapsed time, 3.713s cpu time, 0.668s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
signature COMPARATOR_GENERATOR =
  sig
    datatype comparator_type = BNF | Linorder
    val ensure_info:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparator:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparators_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {comp: term,
        comp_def: thm option,
        comp_thm: thm,
        map: term,
        map_comp: thm option,
        partial_comp_thms: thm list, pcomp: term, used_positions: bool list}
    val register_comparator_of: string -> local_theory -> local_theory
    val register_foreign_comparator:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_comparator:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm ->
                     thm ->
                       thm ->
                         thm -> bool list -> local_theory -> local_theory
  end
structure Comparator_Generator: COMPARATOR_GENERATOR
### theory "Deriving.Comparator_Generator"
### 0.579s elapsed time, 1.525s cpu time, 0.170s GC time
Loading theory "Deriving.Compare_Generator" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances")
Found termination order: "size <*mlex*> {}"
signature COMPARE_GENERATOR =
  sig
    val compare_instance:
       Comparator_Generator.comparator_type -> string -> theory -> theory
    val compare_order_instance_via_comparator_of: string -> theory -> theory
    val compare_order_instance_via_compare: string -> theory -> theory
  end
structure Compare_Generator: COMPARE_GENERATOR
### theory "Deriving.Compare_Generator"
### 0.267s elapsed time, 0.546s cpu time, 0.025s GC time
Loading theory "Deriving.Compare_Instances" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.Pi_Regular_Exp")
### theory "HOL-Library.Tree"
### 1.900s elapsed time, 6.023s cpu time, 0.944s GC time
Loading theory "Draft.Templates" (required by "Draft.Pi_Regular_ExpMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.105s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Pi_Regular_ExpMoreTemplates")
deriving "compare_order" instance for type "Int.int"
deriving "compare" instance for type "Int.int"
deriving "compare_order" instance for type "Code_Numeral.integer"
deriving "compare" instance for type "Code_Numeral.integer"
deriving "compare_order" instance for type "Nat.nat"
deriving "compare" instance for type "Nat.nat"
deriving "compare_order" instance for type "String.char"
deriving "compare" instance for type "String.char"
deriving "compare" instance for type "Sum_Type.sum"
generating comparator for type "Sum_Type.sum"
deriving "compare" instance for type "List.list"
generating comparator for type "List.list"
deriving "compare" instance for type "Product_Type.prod"
generating comparator for type "Product_Type.prod"
deriving "compare" instance for type "Option.option"
generating comparator for type "Option.option"
Found termination order: "{}"
Found termination order: "{}"
deriving "compare" instance for type "HOL.bool"
deriving "compare" instance for type "Product_Type.unit"
deriving "compare_order" instance for type "HOL.bool"
deriving "compare_order" instance for type "Product_Type.unit"
### theory "Deriving.Compare_Instances"
### 0.377s elapsed time, 0.773s cpu time, 0.046s GC time
Loading theory "Draft.Pi_Regular_Exp" (required by "Draft.Pi_Regular_ExpMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.535s elapsed time, 1.095s cpu time, 0.046s GC time
deriving "linorder" instance for type "Pi_Regular_Exp.rexp"
generating comparator for type "Pi_Regular_Exp.rexp"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  ACI_norm :: "'a rexp => 'a rexp"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  final :: "'a rexp => bool"
locale alphabet
  fixes \<Sigma> :: "nat => 'a set"  (\<open>\<Sigma> _\<close>)
    and wf_atom :: "nat => 'b => bool"
consts
  wf :: "nat => 'b rexp => bool"
consts
  wf_word :: "nat => 'a list => bool"
locale project
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
  assumes "project \<Sigma> project"
consts
  lang :: "nat => 'b rexp => 'a list set"
### theory "Draft.Pi_Regular_Exp"
### 17.362s elapsed time, 22.934s cpu time, 3.242s GC time
Loading theory "Draft.Pi_Regular_ExpMoreTemplates"
val templateLemmas =
   [("Pi_Regular_Exp.toplevel_summands_finite",
     "finite (toplevel_summands ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Pi_Regular_Exp.toplevel_summands_nonempty",
     "toplevel_summands ?r ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Pi_Regular_Exp.ACI_norm_alt",
     "ACI_norm_alt ?r = \<guillemotleft>?r\<guillemotright>",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Pi_Regular_Exp.ACI_norm_final",
     "final \<guillemotleft>?r\<guillemotright> = final ?r",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Full Full = Eq",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Full One = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Full Zero = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a One Full = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a One One = Eq",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a One Zero = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Zero Full = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Zero One = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Zero Zero = Eq",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.ACI_norm_idem",
     "\<guillemotleft>\<guillemotleft>?r\<guillemotright>\<guillemotright> =
      \<guillemotleft>?r\<guillemotright>",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pi_Regular_Exp.ACI_norm_ACI_norm_alt",
     "\<guillemotleft>ACI_norm_alt ?r\<guillemotright> =
      \<guillemotleft>?r\<guillemotright>",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Full (Atom ?y) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Full (rexp.Not ?yf) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Full (Pr ?yi) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Full (Star ?ye) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a One (Atom ?y) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a One (rexp.Not ?yf) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a One (Pr ?yi) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a One (Star ?ye) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Zero (Atom ?y) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Zero (rexp.Not ?yf) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Zero (Pr ?yi) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Zero (Star ?ye) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_hole 2),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Atom ?x) Full = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Atom ?x) One = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Atom ?x) Zero = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Not ?x) Full = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Not ?x) One = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Not ?x) Zero = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Pr ?x) Full = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Pr ?x) One = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Pr ?x) Zero = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Star ?x) Full = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Star ?x) One = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Star ?x) Zero = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp",
     "comparator ?comp\<^sub>'\<^sub>a ==>
      comparator (comparator_rexp ?comp\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pi_Regular_Exp.toplevel_summands_ACI_norm",
     "toplevel_summands \<guillemotleft>?r\<guillemotright> =
      ACI_norm ` toplevel_summands ?r",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_hole 1),
         template_app (template_hole 2, template_var 0)))),
    ("Pi_Regular_Exp.toplevel_summands_ACI_norm_alt",
     "toplevel_summands (ACI_norm_alt ?r) =
      ACI_norm_alt ` toplevel_summands ?r",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_hole 1),
         template_app (template_hole 2, template_var 0)))),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Full (rexp.Inter ?yg ?yh) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Full (Plus ?ya ?yb) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Full (Times ?yc ?yd) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a One (rexp.Inter ?yg ?yh) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a One (Plus ?ya ?yb) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a One (Times ?yc ?yd) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Zero (rexp.Inter ?yg ?yh) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Zero (Plus ?ya ?yb) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a Zero (Times ?yc ?yd) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2), template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Atom ?x) (rexp.Not ?yf) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Atom ?x) (Pr ?yi) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Atom ?x) (Star ?ye) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Not ?x) (Atom ?y) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Not ?x) (Pr ?yi) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Not ?x) (Star ?ye) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Pr ?x) (Atom ?y) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Pr ?x) (rexp.Not ?yf) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Pr ?x) (Star ?ye) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Star ?x) (Atom ?y) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Star ?x) (rexp.Not ?yf) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Star ?x) (Pr ?yi) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Inter ?x ?xa) Full = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Inter ?x ?xa) One = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Inter ?x ?xa) Zero = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Plus ?x ?xa) Full = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Plus ?x ?xa) One = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Plus ?x ?xa) Zero = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Times ?x ?xa) Full = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Times ?x ?xa) One = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Times ?x ?xa) Zero = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_hole 1),
       template_hole 0)),
    ("Pi_Regular_Exp.toplevel_summands_ACI_nPlus",
     "toplevel_summands (ACI_nPlus ?r ?s) = toplevel_summands (Plus ?r ?s)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Pi_Regular_Exp.toplevel_summands_final",
     "final ?s = (EX r:toplevel_summands ?s. final r)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Atom ?x) (rexp.Inter ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Atom ?x) (Plus ?ya ?yb) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Atom ?x) (Times ?yc ?yd) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Not ?x)
       (rexp.Inter ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Not ?x) (Plus ?ya ?yb) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Not ?x) (Times ?yc ?yd) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Pr ?x) (rexp.Inter ?yg ?yh) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Pr ?x) (Plus ?ya ?yb) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Pr ?x) (Times ?yc ?yd) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Star ?x) (rexp.Inter ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Star ?x) (Plus ?ya ?yb) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Star ?x) (Times ?yc ?yd) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Inter ?x ?xa) (Atom ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Inter ?x ?xa)
       (rexp.Not ?yf) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Inter ?x ?xa) (Pr ?yi) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Inter ?x ?xa) (Star ?ye) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Plus ?x ?xa) (Atom ?y) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Plus ?x ?xa) (rexp.Not ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Plus ?x ?xa) (Pr ?yi) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Plus ?x ?xa) (Star ?ye) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Times ?x ?xa) (Atom ?y) = Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Times ?x ?xa) (rexp.Not ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Times ?x ?xa) (Pr ?yi) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Times ?x ?xa) (Star ?ye) = Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.Plus_toplevel_summands",
     "Plus ?r ?s : toplevel_summands ?t ==> False",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate (template_hole 0))),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Atom ?x) (Atom ?y) =
      ?comp\<^sub>'\<^sub>a ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_var 2, template_var 1), template_var 0))),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Inter ?x ?xa)
       (Plus ?ya ?yb) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Inter ?x ?xa)
       (Times ?yc ?yd) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Plus ?x ?xa)
       (rexp.Inter ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Plus ?x ?xa) (Times ?yc ?yd) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Times ?x ?xa)
       (rexp.Inter ?yg ?yh) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Times ?x ?xa) (Plus ?ya ?yb) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp.ACI_nPlus_ACI_norm",
     "ACI_nPlus \<guillemotleft>?r\<guillemotright>
       \<guillemotleft>?s\<guillemotright> =
      \<guillemotleft>Plus ?r ?s\<guillemotright>",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Not ?x) (rexp.Not ?yf) =
      comparator_rexp ?comp\<^sub>'\<^sub>a ?x ?yf",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0))),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Pr ?x) (Pr ?yi) =
      comparator_rexp ?comp\<^sub>'\<^sub>a ?x ?yi",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0))),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Star ?x) (Star ?ye) =
      comparator_rexp ?comp\<^sub>'\<^sub>a ?x ?ye",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0))),
    ("Pi_Regular_Exp.ACI_norm_flatten",
     "\<guillemotleft>?r\<guillemotright> =
      PLUS (sorted_list_of_set (ACI_norm ` toplevel_summands ?r))",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 6),
             template_app (template_hole 0, template_var 0)))))),
    ("Pi_Regular_Exp.final_PLUS",
     "final (PLUS ?xs) = (EX r:set ?xs. final r)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("Pi_Regular_Exp.toplevel_summands_flatten_ACI_norm_image",
     "toplevel_summands
       (PLUS (sorted_list_of_set (ACI_norm ` toplevel_summands ?r))) =
      ACI_norm ` toplevel_summands ?r",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app (template_hole 6, template_var 0))))),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 6, template_var 0)))),
    ("Pi_Regular_Exp.toplevel_summands_flatten_ACI_norm_alt_image",
     "toplevel_summands
       (PLUS (sorted_list_of_set (ACI_norm_alt ` toplevel_summands ?r))) =
      ACI_norm_alt ` toplevel_summands ?r",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_app (template_hole 6, template_var 0))))),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 6, template_var 0)))),
    ("Pi_Regular_Exp.ACI_norm_Plus",
     "\<guillemotleft>?r\<guillemotright> = Plus ?s ?t ==>
      EX s t. ?r = Plus s t",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Pi_Regular_Exp.ACI_norm_alt_Plus",
     "ACI_norm_alt ?r = Plus ?s ?t ==> EX s t. ?r = Plus s t",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Pi_Regular_Exp.comparator_rexp_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_rexp ?x\<^sub>0 ==>
          peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      peq_comp (comparator_rexp ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Pi_Regular_Exp.comparator_rexp_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_rexp ?x\<^sub>0 ==>
          psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      psym_comp (comparator_rexp ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Pi_Regular_Exp.comparator_rexp_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_rexp ?x\<^sub>0 ==>
          ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      ptrans_comp (comparator_rexp ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Pi_Regular_Exp.toplevel_summands_not_Plus",
     "ALL r s. ?x ~= Plus r s ==> toplevel_summands ?x = {?x}",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (rexp.Inter ?x ?xa)
       (rexp.Inter ?yg ?yh) =
      (case comparator_rexp ?comp\<^sub>'\<^sub>a ?x ?yg of
       Eq => comparator_rexp ?comp\<^sub>'\<^sub>a ?xa ?yh | Lt => Lt
       | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_var 1)))),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Plus ?x ?xa) (Plus ?ya ?yb) =
      (case comparator_rexp ?comp\<^sub>'\<^sub>a ?x ?ya of
       Eq => comparator_rexp ?comp\<^sub>'\<^sub>a ?xa ?yb | Lt => Lt
       | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_var 1)))),
    ("Pi_Regular_Exp.comparator_rexp_simps",
     "comparator_rexp ?comp\<^sub>'\<^sub>a (Times ?x ?xa) (Times ?yc ?yd) =
      (case comparator_rexp ?comp\<^sub>'\<^sub>a ?x ?yc of
       Eq => comparator_rexp ?comp\<^sub>'\<^sub>a ?xa ?yd | Lt => Lt
       | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 4),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 4, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 1),
           template_hole 0),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 4),
             template_var 3),
           template_var 1)))),
    ("Pi_Regular_Exp.toplevel_summands_flatten_ACI_norm_image_Union",
     "toplevel_summands
       (PLUS
         (sorted_list_of_set
           (ACI_norm ` toplevel_summands ?r Un
            ACI_norm ` toplevel_summands ?s))) =
      ACI_norm ` toplevel_summands ?r Un ACI_norm ` toplevel_summands ?s",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 4),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_app (template_hole 7, template_var 1))),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_app (template_hole 7, template_var 0)))))),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_app (template_hole 7, template_var 1))),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 7, template_var 0))))),
    ("Pi_Regular_Exp.toplevel_summands_PLUS_strong",
     "[| ?xs ~= []; list_all (%x. \<nexists>r s. x = Plus r s) ?xs |]
      ==> toplevel_summands (PLUS ?xs) = set ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, t_empty), template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 5),
               template_hole 1),
             template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Pi_Regular_Exp.toplevel_summands_flatten",
     "[| ?X ~= {}; finite ?X; ALL x:?X. \<nexists>r s. x = Plus r s |]
      ==> toplevel_summands (PLUS (sorted_list_of_set ?X)) = ?X",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 9)),
        template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0), t_empty)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 4),
               template_hole 1),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Pi_Regular_Exp.list_singleton_induct",
     "[| ?P []; !!x. ?P [x]; !!x y xs. ?P (y # xs) ==> ?P (x # y # xs) |]
      ==> ?P ?xs",
     template_implication
      ([template_predicate (template_app (template_var 1, template_hole 3)),
        template_predicate (template_app (template_hole 2, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Pi_Regular_Exp.ACI_nPlus_flatten_PLUS",
     "[| ?X1.0 ~= {}; ?X2.0 ~= {}; finite ?X1.0; finite ?X2.0;
         ALL x:?X1.0 Un ?X2.0. \<nexists>r s. x = Plus r s |]
      ==> ACI_nPlus (PLUS (sorted_list_of_set ?X1.0))
           (PLUS (sorted_list_of_set ?X2.0)) =
          PLUS (sorted_list_of_set (?X1.0 Un ?X2.0))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 10)),
        template_negation
         (template_equation (template_var 0, template_hole 10)),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 9, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 4),
                 template_hole 1),
               template_app (template_hole 0, template_var 1))),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 4),
               template_hole 1),
             template_app (template_hole 0, template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 4),
             template_hole 1),
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_var 0)))))),
    ("Pi_Regular_Exp.ACI_nPlus_PLUS",
     "[| ?xs1.0 ~= []; ?xs2.0 ~= [];
         ALL x:set (?xs1.0 @ ?xs2.0). \<nexists>r s. x = Plus r s;
         sorted ?xs2.0; distinct ?xs2.0 |]
      ==> ACI_nPlus (PLUS ?xs1.0) (PLUS ?xs2.0) =
          PLUS (sorted_list_of_set (set (?xs1.0 @ ?xs2.0)))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 13)),
        template_negation
         (template_equation (template_var 0, template_hole 13)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_var 1),
                    template_var 0))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_hole 7),
                 template_hole 1),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 7),
               template_hole 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 7),
             template_hole 1),
           template_app
            (template_hole 0,
             template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, template_var 1),
                 template_var 0))))))),
    ("Pi_Regular_Exp.ACI_nPlus_singleton_PLUS",
     "[| ?xs ~= []; sorted ?xs; distinct ?xs;
         ALL x:{?x} Un set ?xs. \<nexists>r s. x = Plus r s |]
      ==> ACI_nPlus ?x (PLUS ?xs) =
          (if ?x : set ?xs then PLUS ?xs else PLUS (insort ?x ?xs))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 17)),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_hole 15),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 14, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 0),
                      template_hole 10)),
                  template_app (template_hole 9, template_var 1))),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 6),
               template_hole 3),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 9, template_var 1))),
             template_app
              (template_app
                (template_app (template_hole 4, template_hole 6),
                 template_hole 3),
               template_var 1)),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 6),
               template_hole 3),
             template_app
              (template_app
                (template_app (template_hole 0, t_empty), template_var 0),
               template_var 1))))))]:
   (string * thm * template) list
### theory "Draft.Pi_Regular_ExpMoreTemplates"
### 0.361s elapsed time, 0.516s cpu time, 0.000s GC time
val it = (): unit
