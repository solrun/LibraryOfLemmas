Loading theory "Draft.Pi_Regular_Set" (required by "Draft.Pi_Regular_SetMoreTemplates")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Pi_Regular_SetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Pi_Regular_SetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Pi_Regular_SetMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
overloading
  word_pow \<equiv> compow :: nat => 'a list => 'a list
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
consts
  word_pow :: "nat => 'a list => 'a list"
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.566s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Pi_Regular_SetMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.252s elapsed time, 1.026s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Pi_Regular_SetMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.330s elapsed time, 1.324s cpu time, 0.145s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Pi_Regular_SetMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Pi_Regular_Set"
### 0.370s elapsed time, 1.476s cpu time, 0.145s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.654s elapsed time, 2.084s cpu time, 0.224s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.862s elapsed time, 2.602s cpu time, 0.700s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.698s elapsed time, 4.083s cpu time, 0.886s GC time
Loading theory "Draft.Templates" (required by "Draft.Pi_Regular_SetMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.072s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Pi_Regular_SetMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.460s elapsed time, 0.516s cpu time, 0.067s GC time
Loading theory "Draft.Pi_Regular_SetMoreTemplates"
val templateLemmas =
   [("Pi_Regular_Set.Nil_in_star", "[] : star ?A",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Pi_Regular_Set.conc_empty", "?A @@ {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Pi_Regular_Set.conc_empty", "{} @@ ?A = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("Pi_Regular_Set.lQuot_empty", "lQuot ?a {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Pi_Regular_Set.lQuots_simps", "lQuots [] ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Pi_Regular_Set.rQuot_empty", "rQuot ?a {} = {}",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Pi_Regular_Set.rQuots_simps", "rQuots [] ?A = ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Pi_Regular_Set.star_idemp", "star (star ?A) = star ?A",
     template_equation
      (template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pi_Regular_Set.lang_pow_empty_Suc", "{} ^^ Suc ?n = {}",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_hole 0)),
    ("Pi_Regular_Set.biQuot_empty", "biQuot ?a ?b {} = {}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("Pi_Regular_Set.biQuots_simps", "biQuots [] [] ?A = ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("Pi_Regular_Set.star_insert_eps", "star (insert [] ?A) = star ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)),
       template_app (template_hole 2, template_var 0))),
    ("Pi_Regular_Set.image_rev_lists", "rev ` lists ?S = lists ?S",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pi_Regular_Set.conc_epsilon", "?A @@ {[]} = ?A",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)),
       template_var 0)),
    ("Pi_Regular_Set.conc_epsilon", "{[]} @@ ?A = ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("Pi_Regular_Set.lQuot_epsilon", "lQuot ?a {[]} = {}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)),
       template_hole 0)),
    ("Pi_Regular_Set.rQuot_epsilon", "rQuot ?a {[]} = {}",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)),
       template_hole 0)),
    ("Pi_Regular_Set.conc_star_star", "star ?A @@ star ?A = star ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Pi_Regular_Set.biQuot_epsilon", "biQuot ?a ?b {[]} = {}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)),
       template_hole 0)),
    ("Pi_Regular_Set.word_pow_alt", "?w ^^ ?n = concat (replicate ?n ?w)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Pi_Regular_Set.conc_star_comm", "?A @@ star ?A = star ?A @@ ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Pi_Regular_Set.lQuot_compl", "lQuot ?a (- ?A) = - lQuot ?a ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Pi_Regular_Set.rQuot_compl", "rQuot ?a (- ?A) = - rQuot ?a ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Pi_Regular_Set.image_rev_star", "rev ` star ?A = star (rev ` ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)))),
    ("Pi_Regular_Set.star_if_lang", "?w : ?A ==> ?w : star ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pi_Regular_Set.lang_pow_simps", "?A ^^ Suc ?n = ?A ^^ ?n @@ ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Pi_Regular_Set.biQuot_lQuot_rQuot",
     "biQuot ?x ?y ?A = lQuot ?x (rQuot ?y ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Pi_Regular_Set.biQuot_rQuot_lQuot",
     "biQuot ?x ?y ?A = rQuot ?y (lQuot ?x ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.biQuots_lQuots_rQuots",
     "biQuots ?x ?y ?A = lQuots ?x (rQuots ?y ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Pi_Regular_Set.biQuots_rQuots_lQuots",
     "biQuots ?x ?y ?A = rQuots ?y (lQuots ?x ?A)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.biQuot_char", "biQuot ?a ?b {[?c]} = {}",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_hole 1)),
           template_hole 0)),
       template_hole 0)),
    ("Pi_Regular_Set.star_unfold_left", "star ?A = ?A @@ star ?A Un {[]}",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 5, template_var 0))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("Pi_Regular_Set.rQuot_rev_lQuot",
     "rQuot ?x ?A = rev ` lQuot ?x (rev ` ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))))),
    ("Pi_Regular_Set.rQuots_rev_lQuots",
     "rQuots ?x ?A = rev ` lQuots ?x (rev ` ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0))))),
    ("Pi_Regular_Set.lQuot_star",
     "lQuot ?c (star ?A) = lQuot ?c ?A @@ star ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Pi_Regular_Set.rQuot_star",
     "rQuot ?c (star ?A) = star ?A @@ rQuot ?c ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 1, template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Pi_Regular_Set.biQuot_compl",
     "biQuot ?a ?b (- ?A) = - biQuot ?a ?b ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Pi_Regular_Set.conc_pow_comm", "?A @@ ?A ^^ ?n = ?A ^^ ?n @@ ?A",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Pi_Regular_Set.conc_assoc", "(?A @@ ?B) @@ ?C = ?A @@ ?B @@ ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Pi_Regular_Set.lQuot_rQuot",
     "lQuot ?a (rQuot ?b ?A) = rQuot ?b (lQuot ?a ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.lQuots_simps",
     "lQuots (?s1.0 @ ?s2.0) ?A = lQuots ?s2.0 (lQuots ?s1.0 ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.lQuots_simps",
     "lQuots (?c # ?s) ?A = lQuots ?s (lQuot ?c ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.rQuot_lQuot",
     "rQuot ?a (lQuot ?b ?A) = lQuot ?b (rQuot ?a ?A)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.rQuots_simps",
     "rQuots (?s1.0 @ ?s2.0) ?A = rQuots ?s2.0 (rQuots ?s1.0 ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.rQuots_simps",
     "rQuots (?c # ?s) ?A = rQuots ?s (rQuot ?c ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.map_image_star",
     "map ?f ` star ?A = star (map ?f ` ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("Pi_Regular_Set.lQuots_append", "(?v : lQuots ?w ?A) = (?w @ ?v : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Pi_Regular_Set.lQuot_conc_subset",
     "lQuot ?a ?A @@ ?B <= lQuot ?a (?A @@ ?B)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Pi_Regular_Set.star_subset_lists",
     "?A <= lists ?S ==> star ?A <= lists ?S",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 1, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 1, template_var 0)))),
    ("Pi_Regular_Set.concat_in_star",
     "set ?ws <= ?A ==> concat ?ws : star ?A",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pi_Regular_Set.star_if_lang_pow", "?w : ?A ^^ ?n ==> ?w : star ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app
               (template_app (template_hole 1, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pi_Regular_Set.lang_pow_empty",
     "{} ^^ ?n = (if ?n = 0 then {[]} else {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 0),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_hole 2)),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_hole 5)),
             template_hole 5)
           ))),
    ("Pi_Regular_Set.rQuots_append",
     "(?v : rQuots ?w ?A) = (?v @ rev ?w : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 1))),
         template_var 0))),
    ("Pi_Regular_Set.lQuot_lists",
     "?c : ?S ==> lQuot ?c (lists ?S) = lists ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Pi_Regular_Set.rQuot_lists",
     "?c : ?S ==> rQuot ?c (lists ?S) = lists ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Pi_Regular_Set.lang_pow_subset_lists",
     "?A <= lists ?S ==> ?A ^^ ?n <= lists ?S",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app (template_hole 1, template_var 1)))),
    ("Pi_Regular_Set.lang_pow_add",
     "?A ^^ (?n + ?m) = ?A ^^ ?n @@ ?A ^^ ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Pi_Regular_Set.conc_Un_distrib",
     "?A @@ (?B Un ?C) = ?A @@ ?B Un ?A @@ ?C",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.conc_Un_distrib",
     "(?A Un ?B) @@ ?C = ?A @@ ?C Un ?B @@ ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Pi_Regular_Set.lQuot_inter",
     "lQuot ?a (?A Int ?B) = lQuot ?a ?A Int lQuot ?a ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.lQuot_union",
     "lQuot ?a (?A Un ?B) = lQuot ?a ?A Un lQuot ?a ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.lQuot_diff",
     "lQuot ?c (?A - ?B) = lQuot ?c ?A - lQuot ?c ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.rQuot_inter",
     "rQuot ?a (?A Int ?B) = rQuot ?a ?A Int rQuot ?a ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.rQuot_union",
     "rQuot ?a (?A Un ?B) = rQuot ?a ?A Un rQuot ?a ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.rQuot_diff",
     "rQuot ?c (?A - ?B) = rQuot ?c ?A - rQuot ?c ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.image_rev_conc",
     "rev ` (?A @@ ?B) = rev ` ?B @@ rev ` ?A",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 1)))),
    ("Pi_Regular_Set.rev_append_invert",
     "(?xs @ ?ys = rev ?zs) = (?zs = rev ?ys @ rev ?xs)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_equation
        (template_var 0,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 2))))),
    ("Pi_Regular_Set.conc_UNION_distrib",
     "?A @@ \<Union> (?M ` ?I) = (UN i:?I. ?A @@ ?M i)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("Pi_Regular_Set.conc_UNION_distrib",
     "\<Union> (?M ` ?I) @@ ?A = (UN i:?I. ?M i @@ ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Pi_Regular_Set.biQuots_append",
     "(?v : biQuots ?u ?w ?A) = (?u @ ?v @ rev ?w : ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app (template_hole 0, template_var 1)))),
         template_var 0))),
    ("Pi_Regular_Set.rev_simp_invert",
     "(?xs @ [?x] = rev ?zs) = (?zs = ?x # rev ?xs)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)),
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 0, template_var 2))))),
    ("Pi_Regular_Set.Ball_starI",
     "ALL a:set ?as. [a] : ?A ==> ?as : star ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pi_Regular_Set.biQuot_diff",
     "biQuot ?a ?b (?A - ?B) = biQuot ?a ?b ?A - biQuot ?a ?b ?B",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.biQuot_inter",
     "biQuot ?a ?b (?A Int ?B) = biQuot ?a ?b ?A Int biQuot ?a ?b ?B",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.biQuot_union",
     "biQuot ?a ?b (?A Un ?B) = biQuot ?a ?b ?A Un biQuot ?a ?b ?B",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.map_image_conc",
     "map ?f ` (?A @@ ?B) = map ?f ` ?A @@ map ?f ` ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 0)))),
    ("Pi_Regular_Set.lQuot_char",
     "lQuot ?a {[?b]} = (if ?a = ?b then {[]} else {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_hole 3)),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 5, template_hole 3),
                 template_hole 2)),
             template_hole 2)
           ))),
    ("Pi_Regular_Set.rQuot_char",
     "rQuot ?a {[?b]} = (if ?a = ?b then {[]} else {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 0),
                    template_hole 3)),
                template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 5, template_hole 3),
                 template_hole 2)),
             template_hole 2)
           ))),
    ("Pi_Regular_Set.biQuots_simps",
     "biQuots (?a # ?as) (?b # ?bs) ?A = biQuots ?as ?bs (biQuot ?a ?b ?A)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.conc_mono",
     "[| ?A <= ?C; ?B <= ?D |] ==> ?A @@ ?B <= ?C @@ ?D",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.concI",
     "[| ?u : ?A; ?v : ?B |] ==> ?u @ ?v : ?A @@ ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Pi_Regular_Set.biQuot_lists",
     "[| ?a : ?S; ?b : ?S |] ==> biQuot ?a ?b (lists ?S) = lists ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0),
           template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 1)))),
    ("Pi_Regular_Set.conc_subset_lists",
     "[| ?A <= lists ?S; ?B <= lists ?S |] ==> ?A @@ ?B <= lists ?S",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 1, template_var 1)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 1, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app (template_hole 1, template_var 1)))),
    ("Pi_Regular_Set.append_in_starI",
     "[| ?u : star ?A; ?v : star ?A |] ==> ?u @ ?v : star ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Pi_Regular_Set.lQuot_conc",
     "lQuot ?c (?A @@ ?B) =
      lQuot ?c ?A @@ ?B Un (if [] : ?A then lQuot ?c ?B else {})",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0)),
           template_hole 0)))),
    ("Pi_Regular_Set.rQuot_conc",
     "rQuot ?c (?A @@ ?B) =
      ?A @@ rQuot ?c ?B Un (if [] : ?B then rQuot ?c ?A else {})",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 2),
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 6, template_var 2),
               template_var 1)),
           template_hole 0)))),
    ("Pi_Regular_Set.Arden",
     "[] ~: ?A ==> (?X = ?A @@ ?X Un ?B) = (?X = star ?A @@ ?B)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)
                )
            )],
       template_bimplication
        (template_equation
          (template_var 1,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_equation
          (template_var 1,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("Pi_Regular_Set.reversed_Arden",
     "[] ~: ?A ==> (?X = ?X @@ ?A Un ?B) = (?X = ?B @@ star ?A)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 2)
                )
            )],
       template_bimplication
        (template_equation
          (template_var 1,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 2)))))),
    ("Pi_Regular_Set.biQuot_star",
     "biQuot ?a ?b (star ?A) =
      biQuot ?a ?b ?A Un lQuot ?a ?A @@ star ?A @@ rQuot ?b ?A",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 1),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 5, template_var 2),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 4, template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Pi_Regular_Set.star_conv_concat",
     "star ?A = {concat ws |ws. set ws <= ?A & [] ~: set ws}",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app (template_hole 9, t_empty))),
    ("Pi_Regular_Set.lQuot_chars",
     "lQuot ?a {[b] |b. ?P b} = (if ?P ?a then {[]} else {})",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1),
         template_app (template_hole 8, t_empty)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_var 0, template_var 1)),
           template_app
            (template_app (template_hole 1, template_hole 3),
             template_hole 0)),
         template_hole 0))),
    ("Pi_Regular_Set.in_star_iff_concat",
     "(?w : star ?A) =
      (EX ws. set ws <= ?A & ?w = concat ws & [] ~: set ws)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1),
         template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Pi_Regular_Set.length_lang_pow_lb",
     "[| ALL w:?A. ?k <= length w; ?w : ?A ^^ ?n |]
      ==> ?k * ?n <= length ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 3))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app (template_hole 3, template_var 1)))),
    ("Pi_Regular_Set.length_lang_pow_ub",
     "[| ALL w:?A. length w <= ?k; ?w : ?A ^^ ?n |]
      ==> length ?w <= ?k * ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app
               (template_app (template_hole 1, template_var 0),
                template_var 3))
            )],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Pi_Regular_Set.arden_helper",
     "?X = ?A @@ ?X Un ?B ==>
      ?X = ?A ^^ Suc ?n @@ ?X Un (UN m<=?n. ?A ^^ m @@ ?B)",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 3)),
            template_var 1))],
       template_equation
        (template_var 3,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 0)),
                   template_var 2)),
               template_var 3)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0))))))),
    ("Pi_Regular_Set.reversed_arden_helper",
     "?X = ?X @@ ?A Un ?B ==>
      ?X = ?X @@ ?A ^^ Suc ?n Un (UN m<=?n. ?B @@ ?A ^^ m)",
     template_implication
      ([template_equation
         (template_var 3,
          template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2)),
            template_var 1))],
       template_equation
        (template_var 3,
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 3),
               template_app
                (template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)),
                 template_var 2))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_app (template_hole 0, template_var 0))))))),
    ("Pi_Regular_Set.hom_image_conc",
     "(!!xs ys. ?f (xs @ ys) = ?f xs @ ?f ys) ==>
      ?f ` (?A @@ ?B) = ?f ` ?A @@ ?f ` ?B",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Pi_Regular_Set.biQuots_simps",
     "[| length ?s1.0 = length ?t1.0; length ?s2.0 = length ?t2.0 |]
      ==> biQuots (?s1.0 @ ?s2.0) (?t1.0 @ ?t2.0) ?A =
          biQuots ?s2.0 ?t2.0 (biQuots ?s1.0 ?t1.0 ?A)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 4),
          template_app (template_hole 3, template_var 3)),
        template_equation
         (template_app (template_hole 3, template_var 2),
          template_app (template_hole 3, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 3),
             template_var 0))))),
    ("Pi_Regular_Set.tl_listsN",
     "?A <= listsN (?n + 1) ?S ==> tl ` ?A <= listsN ?n ?S",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app (template_hole 9, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_hole 0), template_var 2),
         template_app (template_hole 9, t_empty)))),
    ("Pi_Regular_Set.concE",
     "[| ?w : ?A @@ ?B;
         !!u v. [| u : ?A; v : ?B; ?w = u @ v |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app
               (template_app (template_hole 3, template_var 2),
                template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Pi_Regular_Set.map_tl_listsN",
     "?A <= lists (listsN (?n + 1) ?S) ==>
      map tl ` ?A <= lists (listsN ?n ?S)",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_hole 11, template_app (template_hole 10, t_empty)))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)),
           template_var 2),
         template_app
          (template_hole 11, template_app (template_hole 10, t_empty))))),
    ("Pi_Regular_Set.star_decom",
     "[| ?x : star ?A; ?x ~= [] |]
      ==> EX a b. ?x = a @ b & a ~= [] & a : ?A & b : star ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Pi_Regular_Set.star_induct",
     "[| ?w : star ?A; ?P [];
         !!u v. [| u : ?A; v : star ?A; ?P v |] ==> ?P (u @ v) |]
      ==> ?P ?w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_var 0, template_hole 2)),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 2)))),
    ("Pi_Regular_Set.biQuot_conc",
     "biQuot ?a ?b (?A @@ ?B) =
      lQuot ?a ?A @@ rQuot ?b ?B Un
      (if [] : ?A & [] : ?B then biQuot ?a ?b ?A Un biQuot ?a ?b ?B
       else if [] : ?A then biQuot ?a ?b ?B
            else if [] : ?B then biQuot ?a ?b ?A else {})",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 9, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_var 3),
                     template_var 2),
                   template_var 1)),
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 3),
                   template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)),
               template_app
                (template_app
                  (template_app (template_hole 9, template_var 3),
                   template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 0)),
                 template_app
                  (template_app
                    (template_app (template_hole 9, template_var 3),
                     template_var 2),
                   template_var 1)),
               template_hole 0))))))]:
   (string * thm * template) list
### theory "Draft.Pi_Regular_SetMoreTemplates"
### 0.302s elapsed time, 0.392s cpu time, 0.000s GC time
val it = (): unit
