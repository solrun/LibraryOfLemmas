Loading theory "Deriving.Derive_Manager" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Deriving.Generator_Aux" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Deriving.Comparator" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Draft.Pi_Regular_Set" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.Pi_Regular_Exp")
signature BNF_ACCESS =
  sig
    val bnf_types: Proof.context -> string list -> typ list
    val case_consts: Proof.context -> string list -> term list
    val case_simps: Proof.context -> string list -> thm list list
    val case_thms: Proof.context -> string list -> thm list
    val constr_argument_types:
       Proof.context -> string list -> typ list list list
    val constr_terms: Proof.context -> string -> term list
    val distinct_thms: Proof.context -> string list -> thm list list
    val induct_thms: Proof.context -> string list -> thm list
    val inject_thms: Proof.context -> string list -> thm list list
    val map_comps: Proof.context -> string list -> thm list
    val map_simps: Proof.context -> string list -> thm list list
    val map_terms: Proof.context -> string list -> term list
    val set_simps: Proof.context -> string list -> thm list list
    val set_terms: Proof.context -> string list -> term list list
  end
structure Bnf_Access: BNF_ACCESS
overloading
  word_pow \<equiv> compow :: nat => 'a list => 'a list
signature DERIVE_MANAGER =
  sig
    val derive: string -> string -> string -> theory -> theory
    val derive_cmd: string -> string -> string -> theory -> theory
    val print_info: theory -> unit
    val register_derive:
       string ->
         string ->
           (string -> string -> theory -> theory) -> theory -> theory
  end
structure Derive_Manager: DERIVE_MANAGER
consts
  word_pow :: "nat => 'a list => 'a list"
### theory "Deriving.Derive_Manager"
### 0.061s elapsed time, 0.279s cpu time, 0.000s GC time
Loading theory "HOL-Library.Cancellation" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.List_More" via "HOL-Library.Multiset")
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
signature GENERATOR_AUX =
  sig
    val OF_option: thm -> thm option list -> thm
    val add_used_tycos:
       Proof.context -> string -> string list -> string list
    val alist_to_string: (string * 'a) list -> string
    val conjI_tac:
       thm list ->
         Proof.context ->
           'a list -> (Proof.context -> int -> tactic) -> tactic
    val create_map:
       (typ -> term) ->
         (string * typ -> 'a -> term) ->
           'a ->
             (typ -> bool) ->
               (local_theory -> string -> bool list) ->
                 (local_theory -> string -> term) ->
                   (local_theory -> string -> 'a -> term) ->
                     string list ->
                       (local_theory -> string -> 'a) ->
                         typ -> local_theory -> term
    val create_partial:
       'a ->
         (typ -> bool) ->
           (local_theory -> string -> bool list) ->
             (local_theory -> string -> term) ->
               (local_theory -> string -> 'a -> term) ->
                 string list ->
                   (local_theory -> string -> 'a) ->
                     typ -> local_theory -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val drop_last: 'a list -> 'a list
    val freeify_tvars: typ -> typ
    val ind_case_to_idxs: 'a list list -> int -> int * int
    val infer_type: Proof.context -> term -> term
    val ints_to_subscript: int list -> string
    val is_class_instance: theory -> string -> sort -> bool
    val lambdas: term list -> term -> term
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (int ->
                Proof.context * thm list * (string * cterm) list -> tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_id: typ -> term
    val mk_infer_const: string -> Proof.context -> term -> term
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val prove_multi_future:
       Proof.context ->
         string list ->
           term list ->
             term list ->
               ({context: Proof.context, prems: thm list} -> tactic) ->
                 thm list
    val recursor:
       (string -> 'a) * ('a -> bool list) * string list ->
         bool ->
           (typ -> 'b) ->
             (typ -> 'b) ->
               (typ -> 'b) ->
                 ((typ * 'b option) list * 'a -> 'b) -> typ -> 'b
    val rename_types: (typ * typ) list -> term -> term
    val split_IHs:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list -> thm list -> thm list list
    val std_recursor_tac:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list ->
           ('a -> thm) ->
             thm list -> typ -> thm list -> Proof.context -> tactic
    val sub: string -> string
    val subT: string -> typ -> string
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_and_vs_of_used_typname:
       string ->
         bool list -> string list -> typ * (string * string list) list
    val type_parameters:
       typ -> Proof.context -> (string * sort) list * typ list
  end
structure Generator_Aux: GENERATOR_AUX
### theory "Deriving.Generator_Aux"
### 0.178s elapsed time, 0.736s cpu time, 0.032s GC time
Loading theory "HOL-Library.Case_Converter" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Init_Normalization" via "HOL-Library.Simps_Case_Conv")
signature CASE_CONVERTER =
  sig
    type elimination_strategy
    val keep_constructor_context: elimination_strategy
    val replace_by_type:
       (Proof.context -> string * string -> bool) -> elimination_strategy
    val to_case:
       Proof.context ->
         elimination_strategy ->
           (string * typ -> int) -> thm list -> thm list option
  end
structure Case_Converter: CASE_CONVERTER
### theory "HOL-Library.Case_Converter"
### 0.199s elapsed time, 0.777s cpu time, 0.049s GC time
Loading theory "HOL-Library.Simps_Case_Conv" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Init_Normalization")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
Found termination order: "{}"
locale comparator
  fixes comp :: "'a => 'a => order"
  assumes "comparator comp"
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "Draft.Pi_Regular_Set"
### 0.400s elapsed time, 1.605s cpu time, 0.080s GC time
Loading theory "HOL-Library.Char_ord" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances")
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
signature SIMPS_CASE_CONV =
  sig
    val gen_to_simps: Proof.context -> thm list -> thm -> thm list
    val to_case: Proof.context -> thm list -> thm
    val to_simps: Proof.context -> thm -> thm list
  end
structure Simps_Case_Conv: SIMPS_CASE_CONV
### theory "HOL-Library.Simps_Case_Conv"
### 0.064s elapsed time, 0.244s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.Pi_Regular_Exp" via "HOL-Library.Code_Target_Nat")
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### theory "HOL-Library.Char_ord"
### 0.083s elapsed time, 0.321s cpu time, 0.043s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "HOL-Library.Cancellation"
### 0.468s elapsed time, 1.835s cpu time, 0.123s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.List_More")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
### theory "HOL-Library.Code_Abstract_Nat"
### 0.097s elapsed time, 0.374s cpu time, 0.043s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.Pi_Regular_Exp")
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Library.Function_Algebras"
### 0.107s elapsed time, 0.430s cpu time, 0.000s GC time
Loading theory "HOL-Library.List_Lexorder" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.Pi_Regular_Exp")
instantiation
  list :: (ord) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
instantiation
  list :: (linorder) distrib_lattice
  inf_list == inf :: 'a list => 'a list => 'a list
  sup_list == sup :: 'a list => 'a list => 'a list
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
instantiation
  list :: (order) order_bot
  bot_list == bot :: 'a list
### theory "Deriving.Comparator"
### 0.697s elapsed time, 2.771s cpu time, 0.199s GC time
Loading theory "Deriving.Compare" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
### theory "HOL-Library.List_Lexorder"
### 0.106s elapsed time, 0.413s cpu time, 0.076s GC time
Loading theory "Deriving.Comparator_Generator" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
### theory "HOL-Library.Code_Target_Nat"
### 0.179s elapsed time, 0.700s cpu time, 0.076s GC time
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
class compare = type +
  fixes compare :: "'a => 'a => order"
  assumes "comparator_compare": "comparator compare"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size_list size <*mlex*> {}"
class compare_order = compare + ord +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.337s elapsed time, 1.322s cpu time, 0.119s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
class compare_order = compare + linorder +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
signature COMPARATOR_GENERATOR =
  sig
    datatype comparator_type = BNF | Linorder
    val ensure_info:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparator:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparators_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {comp: term,
        comp_def: thm option,
        comp_thm: thm,
        map: term,
        map_comp: thm option,
        partial_comp_thms: thm list, pcomp: term, used_positions: bool list}
    val register_comparator_of: string -> local_theory -> local_theory
    val register_foreign_comparator:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_comparator:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm ->
                     thm ->
                       thm ->
                         thm -> bool list -> local_theory -> local_theory
  end
structure Comparator_Generator: COMPARATOR_GENERATOR
### theory "Deriving.Comparator_Generator"
### 0.800s elapsed time, 3.006s cpu time, 0.684s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
signature COMPARE_CODE =
  sig
    val change_compare_code:
       term -> string list -> local_theory -> local_theory
  end
structure Compare_Code: COMPARE_CODE
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### theory "Deriving.Compare"
### 0.861s elapsed time, 3.249s cpu time, 0.684s GC time
Loading theory "Deriving.Compare_Generator" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances")
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Set_Algebras"
### 0.221s elapsed time, 0.869s cpu time, 0.054s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  snth :: "'a stream => nat => 'a"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
consts
  stake :: "nat => 'a stream => 'a list"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
consts
  sdrop :: "nat => 'a stream => 'a stream"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
signature COMPARE_GENERATOR =
  sig
    val compare_instance:
       Comparator_Generator.comparator_type -> string -> theory -> theory
    val compare_order_instance_via_comparator_of: string -> theory -> theory
    val compare_order_instance_via_compare: string -> theory -> theory
  end
structure Compare_Generator: COMPARE_GENERATOR
### theory "Deriving.Compare_Generator"
### 0.351s elapsed time, 1.380s cpu time, 0.126s GC time
Loading theory "Deriving.Compare_Instances" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.Pi_Regular_Exp")
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
deriving "compare_order" instance for type "Int.int"
deriving "compare" instance for type "Int.int"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
deriving "compare_order" instance for type "Code_Numeral.integer"
deriving "compare" instance for type "Code_Numeral.integer"
deriving "compare_order" instance for type "Nat.nat"
deriving "compare" instance for type "Nat.nat"
deriving "compare_order" instance for type "String.char"
deriving "compare" instance for type "String.char"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
deriving "compare" instance for type "Sum_Type.sum"
generating comparator for type "Sum_Type.sum"
### theory "HOL-Library.Stream"
### 1.134s elapsed time, 4.307s cpu time, 0.854s GC time
Loading theory "HOL-Library.While_Combinator" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking")
deriving "compare" instance for type "List.list"
generating comparator for type "List.list"
consts
  mset :: "'a list => 'a multiset"
deriving "compare" instance for type "Product_Type.prod"
generating comparator for type "Product_Type.prod"
deriving "compare" instance for type "Option.option"
generating comparator for type "Option.option"
Found termination order: "{}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "{}"
deriving "compare" instance for type "HOL.bool"
Found termination order: "{}"
deriving "compare" instance for type "Product_Type.unit"
Found termination order: "size <*mlex*> {}"
deriving "compare_order" instance for type "HOL.bool"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
deriving "compare_order" instance for type "Product_Type.unit"
### theory "Deriving.Compare_Instances"
### 0.787s elapsed time, 2.899s cpu time, 1.045s GC time
Loading theory "Draft.Pi_Regular_Exp" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking")
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "{}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
### theory "HOL-Library.While_Combinator"
### 0.699s elapsed time, 2.564s cpu time, 0.913s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.171s elapsed time, 4.423s cpu time, 1.281s GC time
Loading theory "List-Index.List_Index" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking" via "Draft.List_More")
consts
  find_index :: "('a => bool) => 'a list => nat"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  map_index' :: "nat => (nat => 'a => 'b) => 'a list => 'b list"
consts
  insert_nth :: "nat => 'a => 'a list => 'a list"
### theory "HOL-Library.Tree"
### 2.658s elapsed time, 10.077s cpu time, 2.557s GC time
Loading theory "Draft.Templates" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.257s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
### theory "List-Index.List_Index"
### 0.434s elapsed time, 1.695s cpu time, 0.210s GC time
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
(if ?x <= ?y then if ?x = ?y then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y = ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y <= ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?x < ?y then ?Q else ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x <= ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y < ?x then ?R else ?P) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x = ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y = ?x then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y < ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x < ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y <= ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x <= ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
deriving "linorder" instance for type "Pi_Regular_Exp.rexp"
generating comparator for type "Pi_Regular_Exp.rexp"
### theory "HOL-Library.Multiset"
### 4.469s elapsed time, 16.594s cpu time, 3.594s GC time
Loading theory "Draft.List_More" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.Pi_Equivalence_Checking")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.674s elapsed time, 2.192s cpu time, 0.223s GC time
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
consts
  remdups' :: "('a => 'b) => 'a list => 'a list"
### theory "Draft.List_More"
### 0.265s elapsed time, 0.744s cpu time, 0.077s GC time
Found termination order: "size <*mlex*> {}"
consts
  ACI_norm :: "'a rexp => 'a rexp"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  final :: "'a rexp => bool"
locale alphabet
  fixes \<Sigma> :: "nat => 'a set"  (\<open>\<Sigma> _\<close>)
    and wf_atom :: "nat => 'b => bool"
consts
  wf :: "nat => 'b rexp => bool"
consts
  wf_word :: "nat => 'a list => bool"
locale project
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
  assumes "project \<Sigma> project"
consts
  lang :: "nat => 'b rexp => 'a list set"
### theory "Draft.Pi_Regular_Exp"
### 18.290s elapsed time, 29.997s cpu time, 4.477s GC time
Loading theory "Draft.Init_Normalization" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking")
Loading theory "Draft.Pi_Derivatives" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.PNormalization")
Loading theory "Draft.Pi_Equivalence_Checking" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking")
locale embed
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
    and embed :: "'a => 'a list"
  assumes "Pi_Derivatives.embed \<Sigma> project embed"
consts
  lderiv :: "'a => 'b rexp => 'b rexp"
consts
  lderivs :: "'a list => 'b rexp => 'b rexp"
### theory "Draft.Pi_Derivatives"
### 0.182s elapsed time, 0.559s cpu time, 0.064s GC time
Loading theory "Draft.PNormalization" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking")
Loading theory "Draft.Pi_Regular_Exp_Dual" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking")
Found termination order: "size <*mlex*> {}"
locale alphabet
  fixes \<Sigma> :: "nat => 'a set"  (\<open>\<Sigma> _\<close>)
    and wf_atom :: "nat => 'b => bool"
locale project
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
  assumes "project \<Sigma> project"
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
locale rexp_DA
  fixes \<sigma> :: "nat => 'a list"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
    and init :: "'b rexp => 's"
    and delta :: "'a => 's => 's"
    and final :: "'s => bool"
    and wf_state :: "'s => bool"
    and post :: "'s => 's"
    and L :: "'s => 'a list set"
    and n :: "nat"
  assumes
    "rexp_DA \<sigma> wf_atom project lookup init delta final wf_state post
      L n"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
deriving "linorder" instance for type "Pi_Regular_Exp_Dual.rexp_dual"
generating comparator for type "Pi_Regular_Exp_Dual.rexp_dual"
locale rexp_DFA
  fixes \<sigma> :: "nat => 'a list"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
    and init :: "'b rexp => 's"
    and delta :: "'a => 's => 's"
    and final :: "'s => bool"
    and wf_state :: "'s => bool"
    and post :: "'s => 's"
    and L :: "'s => 'a list set"
    and n :: "nat"
  assumes
    "rexp_DFA \<sigma> wf_atom project lookup init delta final wf_state post
      L n"
consts
  final_dual :: "'a rexp_dual => bool"
locale alphabet
  fixes \<Sigma> :: "nat => 'a set"  (\<open>\<Sigma> _\<close>)
    and wf_atom :: "nat => 'b => bool"
consts
  wf_dual :: "nat => 'b rexp_dual => bool"
locale project
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
  assumes "project \<Sigma> project"
consts
  lang_dual :: "nat => 'b rexp_dual => 'a list set"
locale rexp_DA_no_post
  fixes \<sigma> :: "nat => 'a list"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
    and init :: "'b rexp => 's"
    and delta :: "'a => 's => 's"
    and final :: "'s => bool"
    and wf_state :: "'s => bool"
    and L :: "'s => 'a list set"
    and n :: "nat"
  assumes
    "rexp_DA_no_post \<sigma> wf_atom project lookup init delta final
      wf_state L n"
locale embed
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
    and embed :: "'a => 'a list"
  assumes "Pi_Derivatives.embed \<Sigma> project embed"
consts
  lderiv_dual :: "'a => 'b rexp_dual => 'b rexp_dual"
consts
  lderivs_dual :: "'a list => 'b rexp_dual => 'b rexp_dual"
locale rexp_DFA_no_post
  fixes n :: "nat"
    and \<sigma> :: "nat => 'a list"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
    and init :: "'b rexp => 's"
    and delta :: "'a => 's => 's"
    and final :: "'s => bool"
    and wf_state :: "'s => bool"
    and L :: "'s => 'a list set"
  assumes
    "rexp_DFA_no_post n \<sigma> wf_atom project lookup init delta final
      wf_state L"
locale rexp_DA_sim
  fixes \<sigma> :: "nat => 'a list"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
    and init :: "'b rexp => 's"
    and sim_delta :: "'s => 's list"
    and final :: "'s => bool"
    and wf_state :: "'s => bool"
    and L :: "'s => 'a list set"
    and post :: "'s => 's"
    and n :: "nat"
  assumes
    "rexp_DA_sim \<sigma> wf_atom project lookup init sim_delta final
      wf_state L post n"
### theory "Draft.Pi_Equivalence_Checking"
### 2.439s elapsed time, 9.142s cpu time, 1.124s GC time
Loading theory "Draft.Pi_Regular_Operators" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.M2L_Normalization" via "Draft.M2L" via "Draft.Formula")
consts
  REV :: "'a rexp => 'a rexp"
locale embed
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
    and embed :: "'a => 'a list"
  assumes "Pi_Derivatives.embed \<Sigma> project embed"
consts
  rderiv :: "'a => 'b rexp => 'b rexp"
consts
  rderivs :: "'a list => 'b rexp => 'b rexp"
locale embed2
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
    and embed :: "'a => 'a list"
    and singleton :: "'a => 'b"
  assumes "embed2 \<Sigma> wf_atom project lookup embed singleton"
Found termination order: "{}"
locale embed
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
    and embed :: "'a => 'a list"
  assumes "Pi_Derivatives.embed \<Sigma> project embed"
### theory "Draft.Pi_Regular_Operators"
### 1.473s elapsed time, 5.430s cpu time, 2.931s GC time
Loading theory "Draft.Formula" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.M2L_Normalization" via "Draft.M2L")
consts
  FOV :: "'a formula => nat set"
consts
  SOV :: "'a formula => nat set"
deriving "linorder" instance for type "Formula.atom"
generating comparator for type "Formula.atom"
Found termination order: "{}"
Found termination order: "{}"
locale formula
  fixes \<Sigma> :: "'a list"
  assumes "formula \<Sigma>"
consts
  pre_wf_formula :: "nat => 'a formula => bool"
### theory "Draft.Formula"
### 3.771s elapsed time, 14.594s cpu time, 3.418s GC time
Loading theory "Draft.M2L" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking" via "Draft.M2L_Normalization")
locale formula
  fixes \<Sigma> :: "'a list"
  assumes "formula \<Sigma>"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order:
  "(%p. size (fst (snd p))) <*mlex*> (%p. size (snd (snd p))) <*mlex*> {}"
### theory "Draft.M2L"
### 2.073s elapsed time, 7.935s cpu time, 0.831s GC time
Loading theory "Draft.M2L_Normalization" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates" via "Draft.M2L_Equivalence_Checking")
Found termination order: "size <*mlex*> {}"
consts
  norm :: "'a formula => 'a formula"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
locale formula
  fixes \<Sigma> :: "'a list"
  assumes "formula \<Sigma>"
### theory "Draft.M2L_Normalization"
### 0.492s elapsed time, 1.896s cpu time, 0.231s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  pnorm_dual :: "'a rexp_dual => 'a rexp_dual"
consts
  CoNot :: "'a rexp_dual => 'a rexp_dual"
consts
  rexp_dual_of :: "'a rexp => 'a rexp_dual"
### theory "Draft.Pi_Regular_Exp_Dual"
### 10.408s elapsed time, 39.661s cpu time, 8.626s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  inorm :: "'a rexp => 'a rexp"
locale alphabet
  fixes \<Sigma> :: "nat => 'a set"  (\<open>\<Sigma> _\<close>)
    and wf_atom :: "nat => 'b => bool"
locale project
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
  assumes "project \<Sigma> project"
### theory "Draft.Init_Normalization"
### 28.748s elapsed time, 89.730s cpu time, 48.036s GC time
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  pnorm :: "'a rexp => 'a rexp"
### theory "Draft.PNormalization"
### 46.771s elapsed time, 110.782s cpu time, 49.769s GC time
Loading theory "Draft.M2L_Equivalence_Checking" (required by "Draft.M2L_Equivalence_CheckingMoreTemplates")
### theory "Draft.M2L_Equivalence_Checking"
### 3.181s elapsed time, 3.540s cpu time, 0.385s GC time
Loading theory "Draft.M2L_Equivalence_CheckingMoreTemplates"
val templateLemmas =
   [("M2L_Equivalence_Checking.project_axioms",
     "project (set o \<sigma> ?\<Sigma>) \<pi>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 0))),
           template_hole 0)
         )),
    ("M2L_Equivalence_Checking.toplevel_summands_REV",
     "toplevel_summands (REV ?r) = REV ` toplevel_summands ?r",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_hole 1),
         template_app (template_hole 2, template_var 0)))),
    ("M2L_Equivalence_Checking.ACI_norm_REV",
     "\<guillemotleft>REV \<guillemotleft>?r\<guillemotright>\<guillemotright> =
      \<guillemotleft>REV ?r\<guillemotright>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("M2L_Equivalence_Checking.lderivs_Full",
     "lderivs ?\<Sigma> ?xs Full = Full",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0),
       template_hole 0)),
    ("M2L_Equivalence_Checking.lderivs_Zero",
     "lderivs ?\<Sigma> ?xs Zero = Zero",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 1)),
           template_var 0),
         template_hole 0),
       template_hole 0)),
    ("M2L_Equivalence_Checking.embed_axioms",
     "Pi_Derivatives.embed (set o \<sigma> ?\<Sigma>) \<pi>
       (\<epsilon> ?\<Sigma>)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_var 0))),
             template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("M2L_Equivalence_Checking.ex_lderivs_Pr",
     "EX s. lderivs ?\<Sigma> ?ass (Pr ?r) = Pr s",
     template_predicate (template_app (template_hole 5, t_empty))),
    ("M2L_Equivalence_Checking.ACI_norm_wf",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n
       \<guillemotleft>?r\<guillemotright> =
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_var 0))),
    ("M2L_Equivalence_Checking.ACI_norm_lderiv",
     "\<guillemotleft>\<DD> ?\<Sigma> ?as
                       \<guillemotleft>?r\<guillemotright>\<guillemotright> =
      \<guillemotleft>\<DD> ?\<Sigma> ?as ?r\<guillemotright>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("M2L_Equivalence_Checking.lderivs_One",
     "lderivs ?\<Sigma> ?xs One : {Zero, One}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app (template_hole 4, template_var 1)),
                 template_var 0),
               template_hole 3)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 2, template_hole 3),
               template_hole 0)))
         )),
    ("M2L_Equivalence_Checking.ACI_norm_toplevel_summands_Zero",
     "toplevel_summands ?r <= {Zero} ==>
      \<guillemotleft>?r\<guillemotright> = Zero",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_hole 2))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_hole 3))),
    ("M2L_Equivalence_Checking.toplevel_inters_subset_singleton",
     "(toplevel_inters ?r <= {?s}) = (toplevel_inters ?r = {?s})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_hole 1))
            )],
       template_equation
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)))),
    ("M2L_Equivalence_Checking.rderiv_lderiv",
     "rderiv ?\<Sigma> ?as ?r = REV (\<DD> ?\<Sigma> ?as (REV ?r))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("M2L_Equivalence_Checking.wf_inNot",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (inNot ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_inStar",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (inStar ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_inorm",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (inorm ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_pnNot",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (pnNot ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_pnorm",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (pnorm ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_REV",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (REV ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_dual_rexp_dual_of",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      wf_dual ?\<Sigma> ?n (rexp_dual_of ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 2, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_dual_CoNot",
     "wf_dual ?\<Sigma> ?n ?r ==> wf_dual ?\<Sigma> ?n (CoNot ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_dual_pnorm_dual",
     "wf_dual ?\<Sigma> ?n ?r ==> wf_dual ?\<Sigma> ?n (pnorm_dual ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("M2L_Equivalence_Checking.lang_final",
     "final ?r = ([] : lang ?\<Sigma> ?n ?r)",
     template_equation
      (template_app (template_hole 8, template_var 2),
       template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app (template_hole 2, template_var 1))),
                 template_hole 1),
               template_hole 0),
             template_var 0),
           template_var 2)))),
    ("M2L_Equivalence_Checking.lang_dual_final_dual",
     "final_dual ?r = ([] : lang_dual ?\<Sigma> ?n ?r)",
     template_equation
      (template_app (template_hole 8, template_var 2),
       template_app
        (template_app (template_hole 7, template_hole 6),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app (template_hole 2, template_var 1))),
                 template_hole 1),
               template_hole 0),
             template_var 0),
           template_var 2)))),
    ("M2L_Equivalence_Checking.wf_inPr",
     "M2L_Equivalence_Checking.wf ?\<Sigma> (Suc ?n) ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (inPr ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2)),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_pnPr",
     "M2L_Equivalence_Checking.wf ?\<Sigma> (Suc ?n) ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (pnPr ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 2)),
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("M2L_Equivalence_Checking.toplevel_inters_wf",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s =
      (ALL r:toplevel_inters ?s.
          M2L_Equivalence_Checking.wf ?\<Sigma> ?n r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("M2L_Equivalence_Checking.toplevel_summands_wf",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s =
      (ALL r:toplevel_summands ?s.
          M2L_Equivalence_Checking.wf ?\<Sigma> ?n r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("M2L_Equivalence_Checking.rderivs_lderivs",
     "rderivs ?\<Sigma> ?w ?r = REV (lderivs ?\<Sigma> ?w (REV ?r))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_hole 3),
               template_app (template_hole 2, template_var 2)),
             template_var 1),
           template_app (template_hole 1, template_var 0))))),
    ("M2L_Equivalence_Checking.lderivs_Not",
     "lderivs ?\<Sigma> ?xs (rexp.Not ?r) =
      rexp.Not (lderivs ?\<Sigma> ?xs ?r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("M2L_Equivalence_Checking.take_drop_CycleI",
     "?x : ?L ==> drop ?i ?x @ take ?i ?x : Cycle ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("M2L_Equivalence_Checking.wf_lderiv",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (\<DD> ?\<Sigma> ?w ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("M2L_Equivalence_Checking.wf_dual_lderiv_dual",
     "wf_dual ?\<Sigma> ?n ?r ==>
      wf_dual ?\<Sigma> ?n (Co\<DD> ?\<Sigma> ?w ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("M2L_Equivalence_Checking.wf_dual_pnCoPr",
     "wf_dual ?\<Sigma> (Suc ?n) ?r ==>
      wf_dual ?\<Sigma> ?n (pnCoPr ?b ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 3)),
                template_app (template_hole 1, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("M2L_Equivalence_Checking.take_drop_CycleI'",
     "drop ?i ?x @ take ?i ?x : ?L ==> ?x : Cycle ?L",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("M2L_Equivalence_Checking.finite_lderivs",
     "finite
       {\<guillemotleft>lderivs ?\<Sigma> xs ?r\<guillemotright> |xs.
        True}",
     template_predicate
      (
         template_app
          (template_hole 9, template_app (template_hole 8, t_empty))
         )),
    ("M2L_Equivalence_Checking.finite_rderivs",
     "finite
       {\<guillemotleft>rderivs ?\<Sigma> xs ?r\<guillemotright> |xs.
        True}",
     template_predicate
      (
         template_app
          (template_hole 9, template_app (template_hole 8, t_empty))
         )),
    ("M2L_Equivalence_Checking.toplevel_summands_lderiv",
     "toplevel_summands (\<DD> ?\<Sigma> ?as ?r) =
      (UN s:toplevel_summands ?r.
          toplevel_summands (\<DD> ?\<Sigma> ?as s))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty),
           template_app (template_hole 3, template_var 0))))),
    ("M2L_Equivalence_Checking.wf_word",
     "wf_word ?\<Sigma> ?n ?w =
      (?w : lists ((set o \<sigma> ?\<Sigma>) ?n))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, template_var 2))),
           template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, template_var 2)),
             template_var 1))))),
    ("M2L_Equivalence_Checking.lderiv_PLUS",
     "\<DD> ?\<Sigma> ?a (PLUS ?xs) = PLUS (map (\<DD> ?\<Sigma> ?a) ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("M2L_Equivalence_Checking.ACI_norm_lderivs",
     "\<guillemotleft>lderivs ?\<Sigma> ?ws
                       \<guillemotleft>?r\<guillemotright>\<guillemotright> =
      \<guillemotleft>lderivs ?\<Sigma> ?ws ?r\<guillemotright>",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("M2L_Equivalence_Checking.ACI_norm_rderiv",
     "\<guillemotleft>rderiv ?\<Sigma> ?as
                       \<guillemotleft>?r\<guillemotright>\<guillemotright> =
      \<guillemotleft>rderiv ?\<Sigma> ?as ?r\<guillemotright>",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("M2L_Equivalence_Checking.ACI_norm_rderivs",
     "\<guillemotleft>rderivs ?\<Sigma> ?w
                       \<guillemotleft>?r\<guillemotright>\<guillemotright> =
      \<guillemotleft>rderivs ?\<Sigma> ?w ?r\<guillemotright>",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0)))),
    ("M2L_Equivalence_Checking.lderivs_Atom",
     "lderivs ?\<Sigma> ?xs (Atom ?as) : {Zero, One, Atom ?as}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 2)),
                 template_var 1),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 3, template_hole 1),
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 4, template_var 0)),
                 template_hole 0))))
         )),
    ("M2L_Equivalence_Checking.Zero_toplevel_inters",
     "Zero : toplevel_inters ?r ==> lang ?\<Sigma> ?n ?r = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_app (template_hole 8, template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app (template_hole 3, template_var 1))),
                 template_hole 2),
               template_hole 1),
             template_var 0),
           template_var 2),
         template_hole 0))),
    ("M2L_Equivalence_Checking.wf_lderivs",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (lderivs ?\<Sigma> ?ws ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 3)),
                 template_var 0),
               template_var 1))
           ))),
    ("M2L_Equivalence_Checking.wf_rderiv",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (rderiv ?\<Sigma> ?w ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 3)),
                 template_var 0),
               template_var 1))
           ))),
    ("M2L_Equivalence_Checking.wf_rderivs",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (rderivs ?\<Sigma> ?ws ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 3)),
                 template_var 0),
               template_var 1))
           ))),
    ("M2L_Equivalence_Checking.wf_dual_lderivs_dual",
     "wf_dual ?\<Sigma> ?n ?r ==>
      wf_dual ?\<Sigma> ?n (lderivs_dual ?\<Sigma> ?ws ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 3)),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 3)),
               template_var 2),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app (template_hole 0, template_var 3)),
                 template_var 0),
               template_var 1))
           ))),
    ("M2L_Equivalence_Checking.wf_INTERSECT",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n (INTERSECT ?xs) =
      (ALL r:set ?xs. M2L_Equivalence_Checking.wf ?\<Sigma> ?n r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("M2L_Equivalence_Checking.wf_PLUS",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n (PLUS ?xs) =
      (ALL r:set ?xs. M2L_Equivalence_Checking.wf ?\<Sigma> ?n r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("M2L_Equivalence_Checking.wf_TIMES",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n (TIMES ?xs) =
      (ALL r:set ?xs. M2L_Equivalence_Checking.wf ?\<Sigma> ?n r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_hole 2),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("M2L_Equivalence_Checking.ACI_norm_biderivs",
     "\<guillemotleft>biderivs ?\<Sigma> ?w1.0 ?w2.0
                       \<guillemotleft>?r\<guillemotright>\<guillemotright> =
      \<guillemotleft>biderivs ?\<Sigma> ?w1.0 ?w2.0 ?r\<guillemotright>",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 3)),
               template_var 2),
             template_var 1),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app (template_hole 0, template_var 3)),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("M2L_Equivalence_Checking.lderiv_preserves",
     "\<guillemotleft>?r\<guillemotright> =
      \<guillemotleft>?s\<guillemotright> ==>
      \<guillemotleft>\<DD> ?\<Sigma> ?as ?r\<guillemotright> =
      \<guillemotleft>\<DD> ?\<Sigma> ?as ?s\<guillemotright>",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 3),
          template_app (template_hole 1, template_var 2))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 3)),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 2))))),
    ("M2L_Equivalence_Checking.wf_biderivs",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n
       (biderivs ?\<Sigma> ?w1.0 ?w2.0 ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 4)),
                template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 4)),
               template_var 3),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app (template_hole 0, template_var 4)),
                   template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("M2L_Equivalence_Checking.project",
     "?a : (set o \<sigma> ?\<Sigma>) (Suc ?n) ==>
      \<pi> ?a : (set o \<sigma> ?\<Sigma>) ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_app (template_hole 2, template_var 1)),
                template_app (template_hole 1, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_var 1)),
               template_var 0))
           ))),
    ("M2L_Equivalence_Checking.lderivs_alt",
     "\<guillemotleft>lderivs ?\<Sigma> ?w ?r\<guillemotright> =
      fold (%a r. \<guillemotleft>\<DD> ?\<Sigma> a r\<guillemotright>) ?w
       \<guillemotleft>?r\<guillemotright>",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, template_var 2)),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, t_empty), template_var 1),
         template_app (template_hole 5, template_var 0)))),
    ("M2L_Equivalence_Checking.finite_ACI_norm_toplevel_summands",
     "finite ?B ==>
      finite
       {?f \<guillemotleft>s\<guillemotright> |s.
        toplevel_summands s <= ?B}",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 7, template_app (template_hole 6, t_empty))
           ))),
    ("M2L_Equivalence_Checking.wf_word_map_project",
     "wf_word ?\<Sigma> (Suc ?n) ?ws ==>
      wf_word ?\<Sigma> ?n (map \<pi> ?ws)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_hole 4),
                    template_app (template_hole 3, template_var 2))),
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app (template_hole 3, template_var 2))),
               template_var 1),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("M2L_Equivalence_Checking.finite_fold_lderiv",
     "finite
       {fold (%a r. \<guillemotleft>\<DD> ?\<Sigma> a r\<guillemotright>) w
         \<guillemotleft>?s\<guillemotright> |
        w. True}",
     template_predicate
      (
         template_app
          (template_hole 8, template_app (template_hole 7, t_empty))
         )),
    ("M2L_Equivalence_Checking.ACI_norm_lang",
     "lang ?\<Sigma> ?n \<guillemotleft>?r\<guillemotright> =
      lang ?\<Sigma> ?n ?r",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app (template_hole 3, template_var 2))),
               template_hole 2),
             template_hole 1),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_app (template_hole 3, template_var 2))),
               template_hole 2),
             template_hole 1),
           template_var 1),
         template_var 0))),
    ("M2L_Equivalence_Checking.toplevel_summands_ACI_norm_lderiv",
     "(UN a:toplevel_summands ?r.
          toplevel_summands
           \<guillemotleft>\<DD> ?\<Sigma> ?as
                            \<guillemotleft>a\<guillemotright>\<guillemotright>) =
      toplevel_summands
       \<guillemotleft>\<DD> ?\<Sigma> ?as
                        \<guillemotleft>?r\<guillemotright>\<guillemotright>",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, t_empty),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_app (template_hole 1, template_var 0)))))),
    ("M2L_Equivalence_Checking.wf_dual_PLUS_dual",
     "wf_dual ?\<Sigma> ?n (CoPLUS_dual ?b ?xs) =
      (ALL r:set ?xs. wf_dual ?\<Sigma> ?n r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 3)),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("M2L_Equivalence_Checking.rderivs_append",
     "rderivs ?\<Sigma> (?ws @ ?ws') ?r =
      rderivs ?\<Sigma> ?ws' (rderivs ?\<Sigma> ?ws ?r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 3)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_var 0)))),
    ("M2L_Equivalence_Checking.lderivs_PLUS",
     "lderivs ?\<Sigma> ?xs (PLUS ?ys) =
      PLUS (map (lderivs ?\<Sigma> ?xs) ?ys)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app (template_hole 4, template_var 2)),
               template_var 1)),
           template_var 0)))),
    ("M2L_Equivalence_Checking.rderiv_PLUS",
     "rderiv ?\<Sigma> ?a (PLUS ?xs) =
      PLUS (map (rderiv ?\<Sigma> ?a) ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app (template_hole 4, template_var 2)),
               template_var 1)),
           template_var 0)))),
    ("M2L_Equivalence_Checking.lderivs_snoc",
     "lderivs ?\<Sigma> (?ws @ [?w]) ?r =
      \<DD> ?\<Sigma> ?w (lderivs ?\<Sigma> ?ws ?r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_app (template_hole 4, template_var 3)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, template_var 3)),
             template_var 2),
           template_var 0)))),
    ("M2L_Equivalence_Checking.wf_PREFIX",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (PREFIX ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 2)),
               template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_app (template_hole 2, template_var 2))),
                     template_hole 1),
                   template_app (template_hole 0, template_var 2)),
                 template_var 1),
               template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_SUFFIX",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n (SUFFIX ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 2)),
               template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_app (template_hole 2, template_var 2))),
                     template_hole 1),
                   template_app (template_hole 0, template_var 2)),
                 template_var 1),
               template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_inInter",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> M2L_Equivalence_Checking.wf ?\<Sigma> ?n (inInter ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_inPlus",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> M2L_Equivalence_Checking.wf ?\<Sigma> ?n (inPlus ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_inTimes",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> M2L_Equivalence_Checking.wf ?\<Sigma> ?n (inTimes ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_pnInter",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> M2L_Equivalence_Checking.wf ?\<Sigma> ?n (pnInter ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_pnPlus",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> M2L_Equivalence_Checking.wf ?\<Sigma> ?n (pnPlus ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("M2L_Equivalence_Checking.wf_pnTimes",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> M2L_Equivalence_Checking.wf ?\<Sigma> ?n (pnTimes ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("M2L_Equivalence_Checking.finite_lderivs_wf",
     "finite
       {\<guillemotleft>lderivs ?\<Sigma> w ?r\<guillemotright> |w.
        wf_word ?\<Sigma> ?n w}",
     template_predicate
      (
         template_app
          (template_hole 12, template_app (template_hole 11, t_empty))
         )),
    ("M2L_Equivalence_Checking.lang_REV",
     "lang ?\<Sigma> ?n (REV ?r) = rev ` lang ?\<Sigma> ?n ?r",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 2))),
               template_hole 4),
             template_hole 3),
           template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_app (template_hole 5, template_var 2))),
                 template_hole 4),
               template_hole 3),
             template_var 1),
           template_var 0)))),
    ("M2L_Equivalence_Checking.lderivs_Inter",
     "lderivs ?\<Sigma> ?xs (rexp.Inter ?r ?s) =
      rexp.Inter (lderivs ?\<Sigma> ?xs ?r) (lderivs ?\<Sigma> ?xs ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app (template_hole 1, template_var 3)),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_var 0)))),
    ("M2L_Equivalence_Checking.lderivs_Plus",
     "lderivs ?\<Sigma> ?xs (Plus ?r ?s) =
      Plus (lderivs ?\<Sigma> ?xs ?r) (lderivs ?\<Sigma> ?xs ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app (template_hole 1, template_var 3)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app (template_hole 1, template_var 3)),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_app (template_hole 1, template_var 3)),
             template_var 2),
           template_var 0)))),
    ("M2L_Equivalence_Checking.rderivs_snoc",
     "rderivs ?\<Sigma> (?ws @ [?w]) ?r =
      rderiv ?\<Sigma> ?w (rderivs ?\<Sigma> ?ws ?r)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 6, template_hole 5),
             template_app (template_hole 4, template_var 3)),
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1))),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_hole 5),
             template_app (template_hole 4, template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, template_var 3)),
             template_var 2),
           template_var 0)))),
    ("M2L_Equivalence_Checking.wf_flatten_INTERSECT",
     "finite ?X ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n
       (INTERSECT (sorted_list_of_set ?X)) =
      (ALL r:?X. M2L_Equivalence_Checking.wf ?\<Sigma> ?n r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2),
             template_app (template_hole 1, template_var 2))),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("M2L_Equivalence_Checking.wf_flatten_PLUS",
     "finite ?X ==>
      M2L_Equivalence_Checking.wf ?\<Sigma> ?n
       (PLUS (sorted_list_of_set ?X)) =
      (ALL r:?X. M2L_Equivalence_Checking.wf ?\<Sigma> ?n r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 8, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 1)),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_hole 2),
             template_app (template_hole 1, template_var 2))),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("M2L_Equivalence_Checking.toplevel_summands_PLUS",
     "?xs ~= [] ==>
      toplevel_summands (PLUS (map ?f ?xs)) =
      (UN r:set ?xs. toplevel_summands (?f r))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_hole 5),
               template_hole 4),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("M2L_Equivalence_Checking.wf_dual_pnCoPlus",
     "[| wf_dual ?\<Sigma> ?n ?r; wf_dual ?\<Sigma> ?n ?s |]
      ==> wf_dual ?\<Sigma> ?n (pnCoPlus ?b ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 4)),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 4)),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("M2L_Equivalence_Checking.wf_dual_pnCoTimes",
     "[| wf_dual ?\<Sigma> ?n ?r; wf_dual ?\<Sigma> ?n ?s |]
      ==> wf_dual ?\<Sigma> ?n (pnCoTimes ?b ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 4)),
                template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 4)),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 1))
           ))),
    ("M2L_Equivalence_Checking.lang_subset_lists",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      lang ?\<Sigma> ?n ?r <= lists ((set o \<sigma> ?\<Sigma>) ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app (template_hole 3, template_var 2))),
                 template_hole 2),
               template_hole 1),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_hole 3, template_var 2)),
             template_var 1))))),
    ("M2L_Equivalence_Checking.lang_dual_subset_lists",
     "wf_dual ?\<Sigma> ?n ?r ==>
      lang_dual ?\<Sigma> ?n ?r <= lists ((set o \<sigma> ?\<Sigma>) ?n)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app (template_hole 3, template_var 2))),
                 template_hole 2),
               template_hole 1),
             template_var 1),
           template_var 0),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_hole 3, template_var 2)),
             template_var 1))))),
    ("M2L_Equivalence_Checking.ACI_norm_PLUS",
     "list_all2
       (%r s. \<guillemotleft>r\<guillemotright> =
              \<guillemotleft>s\<guillemotright>)
       ?xs ?ys ==>
      \<guillemotleft>PLUS ?xs\<guillemotright> =
      \<guillemotleft>PLUS ?ys\<guillemotright>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, t_empty), template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0),
             template_var 1)),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0),
             template_var 0))))),
    ("M2L_Equivalence_Checking.toplevel_inters_lang_INT",
     "lang ?\<Sigma> ?n ?s =
      \<Inter> (lang ?\<Sigma> ?n ` toplevel_inters ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 2))),
               template_hole 4),
             template_hole 3),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("M2L_Equivalence_Checking.toplevel_summands_lang_UN",
     "lang ?\<Sigma> ?n ?s =
      \<Union> (lang ?\<Sigma> ?n ` toplevel_summands ?s)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 2))),
               template_hole 4),
             template_hole 3),
           template_var 1),
         template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("M2L_Equivalence_Checking.wf_word_append",
     "wf_word ?\<Sigma> ?n (?ws @ ?vs) =
      (wf_word ?\<Sigma> ?n ?ws & wf_word ?\<Sigma> ?n ?vs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, template_var 3))),
           template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app (template_hole 2, template_var 3))),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app (template_hole 2, template_var 3))),
             template_var 2),
           template_var 0)))),
    ("M2L_Equivalence_Checking.toplevel_inters_lang",
     "?r : toplevel_inters ?s ==>
      lang ?\<Sigma> ?n ?s <= lang ?\<Sigma> ?n ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 2))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app (template_hole 2, template_var 1))),
                 template_hole 1),
               template_hole 0),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app (template_hole 2, template_var 1))),
                 template_hole 1),
               template_hole 0),
             template_var 0),
           template_var 3)))),
    ("M2L_Equivalence_Checking.toplevel_summands_lang",
     "?r : toplevel_summands ?s ==>
      lang ?\<Sigma> ?n ?r <= lang ?\<Sigma> ?n ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 3),
              template_app (template_hole 7, template_var 2))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app (template_hole 2, template_var 1))),
                 template_hole 1),
               template_hole 0),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app (template_hole 2, template_var 1))),
                 template_hole 1),
               template_hole 0),
             template_var 0),
           template_var 2)))),
    ("M2L_Equivalence_Checking.wf_lang_wf_word",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      ALL w:lang ?\<Sigma> ?n ?r. wf_word ?\<Sigma> ?n w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_hole 4),
                           template_app (template_hole 3, template_var 2))),
                       template_hole 2),
                     template_hole 1),
                   template_var 1),
                 template_var 0)),
             t_empty)
           ))),
    ("M2L_Equivalence_Checking.wf_dual_lang_dual_wf_word",
     "wf_dual ?\<Sigma> ?n ?r ==>
      ALL w:lang_dual ?\<Sigma> ?n ?r. wf_word ?\<Sigma> ?n w",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_hole 4),
                           template_app (template_hole 3, template_var 2))),
                       template_hole 2),
                     template_hole 1),
                   template_var 1),
                 template_var 0)),
             t_empty)
           ))),
    ("M2L_Equivalence_Checking.lderiv_toplevel_summands_Zero",
     "[| lderivs ?\<Sigma> ?xs (Pr ?r) = Pr ?s;
         toplevel_summands ?r = {Zero} |]
      ==> toplevel_summands ?s = {Zero}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 8, template_hole 7),
                template_app (template_hole 6, template_var 3)),
              template_var 2),
            template_app (template_hole 5, template_var 1)),
          template_app (template_hole 5, template_var 0)),
        template_equation
         (template_app (template_hole 3, template_var 1),
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_hole 0))],
       template_equation
        (template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("M2L_Equivalence_Checking.lang_PLUS",
     "lang ?\<Sigma> ?n (PLUS ?xs) =
      \<Union> (lang ?\<Sigma> ?n ` set ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app (template_hole 8, template_var 2))),
               template_hole 7),
             template_hole 6),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 5, template_hole 4),
             template_hole 3),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("M2L_Equivalence_Checking.wf_word_snoc",
     "wf_word ?\<Sigma> ?n (?ws @ [?w]) =
      (?w : (set o \<sigma> ?\<Sigma>) ?n & wf_word ?\<Sigma> ?n ?ws)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app (template_hole 5, template_var 3))),
           template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_hole 2))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app (template_hole 5, template_var 3)),
               template_var 2))),
         template_app
          (template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app (template_hole 5, template_var 3))),
             template_var 2),
           template_var 1)))),
    ("M2L_Equivalence_Checking.toplevel_inters_in_lang",
     "(?w : lang ?\<Sigma> ?n ?s) =
      (ALL r:toplevel_inters ?s. ?w : lang ?\<Sigma> ?n r)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 3),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("M2L_Equivalence_Checking.toplevel_summands_in_lang",
     "(?w : lang ?\<Sigma> ?n ?s) =
      (EX r:toplevel_summands ?s. ?w : lang ?\<Sigma> ?n r)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 3),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         t_empty))),
    ("M2L_Equivalence_Checking.lang\<^sub>M\<^sub>2\<^sub>L_rexp_of_norm",
     "wf_formula ?n (M2L_Normalization.norm ?\<phi>) ==>
      \<Phi>.lang\<^sub>M\<^sub>2\<^sub>L ?n ?\<phi> =
      lang enum_class.enum ?n
       (rexp_of ?n (M2L_Normalization.norm ?\<phi>)) -
      {[]}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app (template_hole 14, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 12, template_hole 11),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_hole 7),
                         template_app (template_hole 6, template_hole 11))),
                     template_hole 5),
                   template_hole 4),
                 template_var 1),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 14, template_var 0)))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("M2L_Equivalence_Checking.lang\<^sub>M\<^sub>2\<^sub>L_rexp_of'_norm",
     "wf_formula ?n (M2L_Normalization.norm ?\<phi>) ==>
      \<Phi>.lang\<^sub>M\<^sub>2\<^sub>L ?n ?\<phi> =
      lang enum_class.enum ?n
       (rexp_of' ?n (M2L_Normalization.norm ?\<phi>)) -
      {[]}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app (template_hole 14, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 12, template_hole 11),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_hole 7),
                         template_app (template_hole 6, template_hole 11))),
                     template_hole 5),
                   template_hole 4),
                 template_var 1),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 14, template_var 0)))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("M2L_Equivalence_Checking.lang\<^sub>M\<^sub>2\<^sub>L_rexp_of''_norm",
     "wf_formula ?n (M2L_Normalization.norm ?\<phi>) ==>
      \<Phi>.lang\<^sub>M\<^sub>2\<^sub>L ?n ?\<phi> =
      lang enum_class.enum ?n
       (rexp_of'' ?n (M2L_Normalization.norm ?\<phi>)) -
      {[]}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 1),
              template_app (template_hole 14, template_var 0))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 12, template_hole 11),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 8, template_hole 7),
                         template_app (template_hole 6, template_hole 11))),
                     template_hole 5),
                   template_hole 4),
                 template_var 1),
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app (template_hole 14, template_var 0)))),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("M2L_Equivalence_Checking.lang_inorm",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      lang ?\<Sigma> ?n (inorm ?r) = lang ?\<Sigma> ?n ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app (template_hole 3, template_var 2))),
                 template_hole 2),
               template_hole 1),
             template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app (template_hole 3, template_var 2))),
                 template_hole 2),
               template_hole 1),
             template_var 1),
           template_var 0)))),
    ("M2L_Equivalence_Checking.lang_pnorm",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      lang ?\<Sigma> ?n (pnorm ?r) = lang ?\<Sigma> ?n ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app (template_hole 3, template_var 2))),
                 template_hole 2),
               template_hole 1),
             template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app (template_hole 3, template_var 2))),
                 template_hole 2),
               template_hole 1),
             template_var 1),
           template_var 0)))),
    ("M2L_Equivalence_Checking.lang_dual_rexp_dual_of",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      lang_dual ?\<Sigma> ?n (rexp_dual_of ?r) = lang ?\<Sigma> ?n ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_var 0)))),
    ("M2L_Equivalence_Checking.lang_dual_pnorm_dual",
     "wf_dual ?\<Sigma> ?n ?r ==>
      lang_dual ?\<Sigma> ?n (pnorm_dual ?r) = lang_dual ?\<Sigma> ?n ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app (template_hole 3, template_var 2))),
                 template_hole 2),
               template_hole 1),
             template_var 1),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app (template_hole 3, template_var 2))),
                 template_hole 2),
               template_hole 1),
             template_var 1),
           template_var 0)))),
    ("M2L_Equivalence_Checking.lang_TIMES",
     "lang ?\<Sigma> ?n (TIMES ?xs) =
      foldr (@@) (map (lang ?\<Sigma> ?n) ?xs) {[]}",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 14,
                 template_app
                  (template_app (template_hole 13, template_hole 12),
                   template_app (template_hole 11, template_var 2))),
               template_hole 10),
             template_hole 9),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 8, template_hole 7),
             template_hole 6),
           template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 14,
                       template_app
                        (template_app (template_hole 13, template_hole 12),
                         template_app (template_hole 11, template_var 2))),
                     template_hole 10),
                   template_hole 9),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0)))),
    ("M2L_Equivalence_Checking.lang_inNot",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      lang ?\<Sigma> ?n (inNot ?r) = lang ?\<Sigma> ?n (rexp.Not ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("M2L_Equivalence_Checking.lang_inStar",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      lang ?\<Sigma> ?n (inStar ?r) = lang ?\<Sigma> ?n (Star ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("M2L_Equivalence_Checking.lang_pnNot",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      lang ?\<Sigma> ?n (pnNot ?r) = lang ?\<Sigma> ?n (rexp.Not ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("M2L_Equivalence_Checking.lang_dual_PLUS_dual",
     "lang_dual ?\<Sigma> ?n (CoPLUS_dual True ?xs) =
      \<Union> (lang_dual ?\<Sigma> ?n ` set ?xs)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_hole 10),
                   template_app (template_hole 9, template_var 2))),
               template_hole 8),
             template_hole 7),
           template_var 1),
         template_app
          (template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)),
             template_app (template_hole 3, template_hole 4)),
           template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 0, template_var 0))))),
    ("M2L_Equivalence_Checking.lang_inPr",
     "M2L_Equivalence_Checking.wf ?\<Sigma> (Suc ?n) ?r ==>
      lang ?\<Sigma> ?n (inPr ?r) = lang ?\<Sigma> ?n (Pr ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 2)),
                template_app (template_hole 9, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("M2L_Equivalence_Checking.lang_pnPr",
     "M2L_Equivalence_Checking.wf ?\<Sigma> (Suc ?n) ?r ==>
      lang ?\<Sigma> ?n (pnPr ?r) = lang ?\<Sigma> ?n (Pr ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 2)),
                template_app (template_hole 9, template_var 1)),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_app (template_hole 1, template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 2))),
                 template_hole 3),
               template_hole 2),
             template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("M2L_Equivalence_Checking.embed",
     "?a : (set o \<sigma> ?\<Sigma>) ?n ==>
      (?b : set (\<epsilon> ?\<Sigma> ?a)) =
      (?b : (set o \<sigma> ?\<Sigma>) (Suc ?n) & \<pi> ?b = ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app (template_hole 6, template_var 2)),
                template_var 1))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 9, template_var 0),
                template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 3)))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 9, template_var 0),
                   template_app
                    (template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_app (template_hole 6, template_var 2)),
                     template_app (template_hole 2, template_var 1)))),
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 0)),
                 template_var 3))
             )))),
    ("M2L_Equivalence_Checking.lang_flatten_PLUS",
     "finite ?X ==>
      lang ?\<Sigma> ?n (PLUS (sorted_list_of_set ?X)) =
      \<Union> (lang ?\<Sigma> ?n ` ?X)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app (template_hole 8, template_var 1))),
                 template_hole 7),
               template_hole 6),
             template_var 0),
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_hole 3),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_var 2))))),
    ("M2L_Equivalence_Checking.lang_dual_pnCoPr",
     "wf_dual ?\<Sigma> (Suc ?n) ?r ==>
      lang_dual ?\<Sigma> ?n (pnCoPr ?b ?r) =
      lang_dual ?\<Sigma> ?n (CoPr ?b ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 3)),
                template_app (template_hole 9, template_var 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("M2L_Equivalence_Checking.toplevel_inters_Full",
     "[| toplevel_inters ?r = {Full};
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r |]
      ==> lang ?\<Sigma> ?n ?r = lists ((set o \<sigma> ?\<Sigma>) ?n)",
     template_implication
      ([template_equation
         (template_app (template_hole 13, template_var 2),
          template_app
           (template_app (template_hole 12, template_hole 11),
            template_hole 10)),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_var 1)),
                template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_hole 4),
                     template_app (template_hole 3, template_var 1))),
                 template_hole 2),
               template_hole 1),
             template_var 0),
           template_var 2),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app (template_hole 3, template_var 1)),
             template_var 0))))),
    ("M2L_Equivalence_Checking.lang_dual_CoNot",
     "wf_dual ?\<Sigma> ?n ?r ==>
      lang_dual ?\<Sigma> ?n (CoNot ?r) =
      lists ((set o \<sigma> ?\<Sigma>) ?n) - lang_dual ?\<Sigma> ?n ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_app (template_hole 5, template_var 2))),
                 template_hole 4),
               template_hole 3),
             template_var 1),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 2)),
                 template_var 1))),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_app (template_hole 5, template_var 2))),
                   template_hole 4),
                 template_hole 3),
               template_var 1),
             template_var 0))))),
    ("M2L_Equivalence_Checking.lang_lderiv_rderiv",
     "lang ?\<Sigma> ?n (\<DD> ?\<Sigma> ?a (rderiv ?\<Sigma> ?b ?r)) =
      lang ?\<Sigma> ?n (rderiv ?\<Sigma> ?b (\<DD> ?\<Sigma> ?a ?r))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 4))),
               template_hole 4),
             template_hole 3),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 3),
                 template_app (template_hole 0, template_var 4)),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 4))),
               template_hole 4),
             template_hole 3),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_hole 3),
               template_app (template_hole 0, template_var 4)),
             template_var 1),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 2),
             template_var 0))))),
    ("M2L_Equivalence_Checking.lang_rderiv_lderiv",
     "lang ?\<Sigma> ?n (rderiv ?\<Sigma> ?a (\<DD> ?\<Sigma> ?b ?r)) =
      lang ?\<Sigma> ?n (\<DD> ?\<Sigma> ?b (rderiv ?\<Sigma> ?a ?r))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 4))),
               template_hole 4),
             template_hole 3),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_hole 3),
               template_app (template_hole 1, template_var 4)),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 4))),
               template_hole 4),
             template_hole 3),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 3),
                 template_app (template_hole 1, template_var 4)),
               template_var 2),
             template_var 0))))),
    ("M2L_Equivalence_Checking.lderivs_final",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         wf_word ?\<Sigma> ?n ?ws |]
      ==> final (lderivs ?\<Sigma> ?ws ?r) = (?ws : lang ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_app (template_hole 8, template_var 3))),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app (template_hole 3, template_var 3)),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_app (template_hole 8, template_var 3))),
                   template_hole 0),
                 template_hole 4),
               template_var 2),
             template_var 1))))),
    ("M2L_Equivalence_Checking.lderivs_dual_final_dual",
     "[| wf_dual ?\<Sigma> ?n ?r; wf_word ?\<Sigma> ?n ?ws |]
      ==> final_dual (lderivs_dual ?\<Sigma> ?ws ?r) =
          (?ws : lang_dual ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_app (template_hole 8, template_var 3))),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 5, template_hole 4),
                 template_app (template_hole 3, template_var 3)),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 10, template_hole 9),
                       template_app (template_hole 8, template_var 3))),
                   template_hole 0),
                 template_hole 4),
               template_var 2),
             template_var 1))))),
    ("M2L_Equivalence_Checking.lang_PREFIX",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      lang ?\<Sigma> ?n (PREFIX ?\<Sigma> ?n ?r) =
      Prefix (lang ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_app (template_hole 5, template_var 2))),
                 template_hole 4),
               template_hole 3),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_app (template_hole 5, template_var 2))),
                   template_hole 3),
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_app (template_hole 5, template_var 2))),
                   template_hole 4),
                 template_hole 3),
               template_var 1),
             template_var 0))))),
    ("M2L_Equivalence_Checking.lang_SUFFIX",
     "M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r ==>
      lang ?\<Sigma> ?n (SUFFIX ?\<Sigma> ?n ?r) =
      Suffix (lang ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 2)),
                template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_app (template_hole 5, template_var 2))),
                 template_hole 4),
               template_hole 3),
             template_var 1),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_app (template_hole 5, template_var 2))),
                   template_hole 3),
                 template_app (template_hole 1, template_var 2)),
               template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_app (template_hole 5, template_var 2))),
                   template_hole 4),
                 template_hole 3),
               template_var 1),
             template_var 0))))),
    ("M2L_Equivalence_Checking.rderivs_final",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         wf_word ?\<Sigma> ?n ?w |]
      ==> final (rderivs ?\<Sigma> ?w ?r) =
          (rev ?w : lang ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 13, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app
                   (template_app (template_hole 11, template_hole 10),
                    template_app (template_hole 9, template_var 3))),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app (template_hole 4, template_var 3)),
               template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 11, template_hole 10),
                       template_app (template_hole 9, template_var 3))),
                   template_hole 0),
                 template_hole 5),
               template_var 2),
             template_var 1))))),
    ("M2L_Equivalence_Checking.lang_INTERSECT",
     "lang ?\<Sigma> ?n (INTERSECT ?xs) =
      (if ?xs = [] then lists ((set o \<sigma> ?\<Sigma>) ?n)
       else \<Inter> (lang ?\<Sigma> ?n ` set ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_app (template_hole 14, template_hole 13),
                        template_app (template_hole 12, template_var 2))),
                    template_hole 11),
                  template_hole 10),
                template_var 1),
              template_app
               (template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_hole 7),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4)),
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 14, template_hole 13),
                     template_app (template_hole 12, template_var 2)),
                   template_var 1))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("M2L_Equivalence_Checking.lang_inInter",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> lang ?\<Sigma> ?n (inInter ?r ?s) =
          lang ?\<Sigma> ?n (rexp.Inter ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("M2L_Equivalence_Checking.lang_inPlus",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> lang ?\<Sigma> ?n (inPlus ?r ?s) =
          lang ?\<Sigma> ?n (Plus ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("M2L_Equivalence_Checking.lang_inTimes",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> lang ?\<Sigma> ?n (inTimes ?r ?s) =
          lang ?\<Sigma> ?n (Times ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("M2L_Equivalence_Checking.lang_pnInter",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> lang ?\<Sigma> ?n (pnInter ?r ?s) =
          lang ?\<Sigma> ?n (rexp.Inter ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("M2L_Equivalence_Checking.lang_pnPlus",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> lang ?\<Sigma> ?n (pnPlus ?r ?s) =
          lang ?\<Sigma> ?n (Plus ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("M2L_Equivalence_Checking.lang_pnTimes",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> lang ?\<Sigma> ?n (pnTimes ?r ?s) =
          lang ?\<Sigma> ?n (Times ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("M2L_Equivalence_Checking.lang_dual_CoPLUS_dual",
     "lang_dual ?\<Sigma> ?n (CoPLUS_dual False ?xs) =
      (if ?xs = [] then lists ((set o \<sigma> ?\<Sigma>) ?n)
       else \<Inter> (lang_dual ?\<Sigma> ?n ` set ?xs))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 16,
                      template_app
                       (template_app (template_hole 15, template_hole 14),
                        template_app (template_hole 13, template_var 2))),
                    template_hole 12),
                  template_hole 11),
                template_var 1),
              template_app
               (template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_hole 8)),
                  template_app (template_hole 7, template_hole 8)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_hole 4)),
               template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_app (template_hole 15, template_hole 14),
                     template_app (template_hole 13, template_var 2)),
                   template_var 1))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, t_empty),
                 template_app (template_hole 0, template_var 0))))
           ))),
    ("M2L_Equivalence_Checking.in_lang_INTERSECT",
     "wf_word ?\<Sigma> ?n ?w ==>
      (?w : lang ?\<Sigma> ?n (INTERSECT ?xs)) =
      (ALL r:set ?xs. ?w : lang ?\<Sigma> ?n r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 12, template_hole 11),
                    template_app (template_hole 10, template_var 3))),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 1),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 12, template_hole 11),
                       template_app (template_hole 10, template_var 3))),
                   template_hole 6),
                 template_hole 5),
               template_var 2),
             template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_hole 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           t_empty)))),
    ("M2L_Equivalence_Checking.toplevel_summands_lderivs_Pr",
     "[| ?xs ~= []; lderivs ?\<Sigma> ?xs (Pr ?r) = Pr ?s |]
      ==> toplevel_summands ?s <= {Zero} |
          toplevel_summands ?s
          <= (UN xs. toplevel_summands (lderivs ?\<Sigma> xs ?r))",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 14)),
        template_equation
         (template_app
           (template_app
             (template_app
               (template_app (template_hole 12, template_hole 11),
                template_app (template_hole 10, template_var 2)),
              template_var 3),
            template_app (template_hole 9, template_var 1)),
          template_app (template_hole 9, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_var 0)),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 3))),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 6, template_var 0)),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_hole 0))))
           ))),
    ("M2L_Equivalence_Checking.lang_dual_pnCoPlus",
     "[| wf_dual ?\<Sigma> ?n ?r; wf_dual ?\<Sigma> ?n ?s |]
      ==> lang_dual ?\<Sigma> ?n (pnCoPlus ?b ?r ?s) =
          lang_dual ?\<Sigma> ?n (CoPlus ?b ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 4)),
                template_var 3),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 4))),
                 template_hole 3),
               template_hole 2),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 4))),
                 template_hole 3),
               template_hole 2),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1))))),
    ("M2L_Equivalence_Checking.lang_dual_pnCoTimes",
     "[| wf_dual ?\<Sigma> ?n ?r; wf_dual ?\<Sigma> ?n ?s |]
      ==> lang_dual ?\<Sigma> ?n (pnCoTimes ?b ?r ?s) =
          lang_dual ?\<Sigma> ?n (CoTimes ?b ?r ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 4)),
                template_var 3),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 4))),
                 template_hole 3),
               template_hole 2),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_hole 5),
                     template_app (template_hole 4, template_var 4))),
                 template_hole 3),
               template_hole 2),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1))))),
    ("M2L_Equivalence_Checking.lang_lderiv",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         ?w : (set o \<sigma> ?\<Sigma>) ?n |]
      ==> lang ?\<Sigma> ?n (\<DD> ?\<Sigma> ?w ?r) =
          lQuot ?w (lang ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app (template_hole 6, template_var 3)),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_app (template_hole 6, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_app (template_hole 6, template_var 3))),
                   template_hole 3),
                 template_hole 2),
               template_var 2),
             template_var 1))))),
    ("M2L_Equivalence_Checking.lang_dual_lderiv_dual",
     "[| wf_dual ?\<Sigma> ?n ?r; ?w : (set o \<sigma> ?\<Sigma>) ?n |]
      ==> lang_dual ?\<Sigma> ?n (Co\<DD> ?\<Sigma> ?w ?r) =
          lQuot ?w (lang_dual ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_hole 10, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app (template_hole 6, template_var 3)),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 8, template_hole 7),
                     template_app (template_hole 6, template_var 3))),
                 template_hole 3),
               template_hole 2),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_app (template_hole 6, template_var 3))),
                   template_hole 3),
                 template_hole 2),
               template_var 2),
             template_var 1))))),
    ("M2L_Equivalence_Checking.lQuot_map_project",
     "[| ?as : (set o \<sigma> ?\<Sigma>) ?n;
         ?A <= lists ((set o \<sigma> ?\<Sigma>) (Suc ?n)) |]
      ==> lQuot ?as (map \<pi> ` ?A) =
          map \<pi> ` (UN a:set (\<epsilon> ?\<Sigma> ?as). lQuot a ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_app (template_hole 11, template_var 2)),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_var 0,
          template_app
           (template_hole 9,
            template_app
             (template_app
               (template_app (template_hole 13, template_hole 12),
                template_app (template_hole 11, template_var 2)),
              template_app (template_hole 8, template_var 1))))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 3),
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3)))))))),
    ("M2L_Equivalence_Checking.toplevel_summands_lderivs_Star",
     "toplevel_summands (lderivs ?\<Sigma> ?xs (Star ?r))
      <= {Star ?r} Un
         {Times (lderivs ?\<Sigma> ys ?r) (Star ?r) |ys.
          EX zs. ys ~= [] & zs @ ys = ?xs}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 16,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 15, template_hole 14),
               template_app (template_hole 13, template_var 2)),
             template_var 1),
           template_app (template_hole 12, template_var 0))),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app (template_hole 12, template_var 0)),
             template_hole 9)),
         template_app (template_hole 8, t_empty)))),
    ("M2L_Equivalence_Checking.lang_rderivs",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         wf_word ?\<Sigma> ?n ?w |]
      ==> lang ?\<Sigma> ?n (rderivs ?\<Sigma> ?w ?r) =
          rQuots ?w (lang ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_app (template_hole 7, template_var 3))),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app (template_hole 7, template_var 3))),
                 template_hole 4),
               template_hole 3),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 3),
                 template_app (template_hole 1, template_var 3)),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_app (template_hole 7, template_var 3))),
                   template_hole 4),
                 template_hole 3),
               template_var 2),
             template_var 1))))),
    ("M2L_Equivalence_Checking.lang_lderivs",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         wf_word ?\<Sigma> ?n ?ws |]
      ==> lang ?\<Sigma> ?n (lderivs ?\<Sigma> ?ws ?r) =
          lQuots ?ws (lang ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_app (template_hole 7, template_var 3))),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app (template_hole 7, template_var 3))),
                 template_hole 4),
               template_hole 3),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 3),
                 template_app (template_hole 1, template_var 3)),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_app (template_hole 7, template_var 3))),
                   template_hole 4),
                 template_hole 3),
               template_var 2),
             template_var 1))))),
    ("M2L_Equivalence_Checking.lang_rderiv",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         ?as : (set o \<sigma> ?\<Sigma>) ?n |]
      ==> lang ?\<Sigma> ?n (rderiv ?\<Sigma> ?as ?r) =
          rQuot ?as (lang ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app (template_hole 7, template_var 3)),
                template_var 2))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app (template_hole 7, template_var 3))),
                 template_hole 4),
               template_hole 3),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 3),
                 template_app (template_hole 1, template_var 3)),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_app (template_hole 7, template_var 3))),
                   template_hole 4),
                 template_hole 3),
               template_var 2),
             template_var 1))))),
    ("M2L_Equivalence_Checking.lang_dual_lderivs_dual",
     "[| wf_dual ?\<Sigma> ?n ?r; wf_word ?\<Sigma> ?n ?ws |]
      ==> lang_dual ?\<Sigma> ?n (lderivs_dual ?\<Sigma> ?ws ?r) =
          lQuots ?ws (lang_dual ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_app (template_hole 7, template_var 3))),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app (template_hole 7, template_var 3))),
                 template_hole 4),
               template_hole 3),
             template_var 2),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 3),
                 template_app (template_hole 1, template_var 3)),
               template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_app (template_hole 7, template_var 3))),
                   template_hole 4),
                 template_hole 3),
               template_var 2),
             template_var 1))))),
    ("M2L_Equivalence_Checking.toplevel_summands_lderivs_Star_nonempty",
     "?xs ~= [] ==>
      toplevel_summands (lderivs ?\<Sigma> ?xs (Star ?r))
      <= {Times (lderivs ?\<Sigma> ys ?r) (Star ?r) |ys.
          EX zs. ys ~= [] & zs @ ys = ?xs}",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 12))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 9, template_hole 8),
                 template_app (template_hole 7, template_var 1)),
               template_var 2),
             template_app (template_hole 6, template_var 0))),
         template_app (template_hole 5, t_empty)))),
    ("M2L_Equivalence_Checking.lderivs_Pr",
     "{lderivs ?\<Sigma> xs (Pr ?r) |xs. True}
      <= {Pr s |s.
          toplevel_summands s <= {Zero} |
          toplevel_summands s
          <= (UN xs. toplevel_summands (lderivs ?\<Sigma> xs ?r))}",
     template_inequation
      (less_equals, template_app (template_hole 17, t_empty),
       template_app (template_hole 17, t_empty))),
    ("M2L_Equivalence_Checking.lang_flatten_INTERSECT_finite",
     "finite ?X ==>
      (?w : lang ?\<Sigma> ?n (INTERSECT (sorted_list_of_set ?X))) =
      (if ?X = {} then ?w : lists ((set o \<sigma> ?\<Sigma>) ?n)
       else ALL r:?X. ?w : lang ?\<Sigma> ?n r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 3))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 15, template_var 2),
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app
                         (template_hole 14,
                          template_app
                           (template_app
                             (template_hole 13, template_hole 12),
                            template_app
                             (template_hole 11, template_var 1))),
                        template_hole 10),
                      template_hole 9),
                    template_var 0),
                  template_app
                   (template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_hole 6),
                    template_app (template_hole 5, template_var 3))))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_hole 2)),
                 template_app
                  (template_app (template_hole 15, template_var 2),
                   template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_app (template_hole 13, template_hole 12),
                         template_app (template_hole 11, template_var 1)),
                       template_var 0)))),
               template_app
                (template_app (template_hole 0, template_var 3), t_empty))
             )))),
    ("M2L_Equivalence_Checking.toplevel_summands_lderivs_Times",
     "toplevel_summands (lderivs ?\<Sigma> ?xs (Times ?r ?s))
      <= {Times (lderivs ?\<Sigma> ?xs ?r) ?s} Un
         {r'.
          EX ys zs.
             r' : toplevel_summands (lderivs ?\<Sigma> ys ?s) &
             ys ~= [] & zs @ ys = ?xs}",
     template_inequation
      (less_equals,
       template_app
        (template_hole 15,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 14, template_hole 13),
               template_app (template_hole 12, template_var 3)),
             template_var 2),
           template_app
            (template_app (template_hole 11, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 14, template_hole 13),
                         template_app (template_hole 12, template_var 3)),
                       template_var 2),
                     template_var 1)),
                 template_var 0)),
             template_hole 8)),
         template_app (template_hole 7, t_empty)))),
    ("M2L_Equivalence_Checking.ACI_norm_lderivs_Pr",
     "ACI_norm ` {lderivs ?\<Sigma> xs (Pr ?r) |xs. True}
      <= {Pr Zero} Un
         {Pr \<guillemotleft>s\<guillemotright> |s.
          toplevel_summands s
          <= (UN xs.
                 toplevel_summands
                  \<guillemotleft>lderivs ?\<Sigma> xs
                                   ?r\<guillemotright>)}",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 19, template_hole 18),
         template_app (template_hole 17, t_empty)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 10, template_hole 6)),
             template_hole 5)),
         template_app (template_hole 17, t_empty)))),
    ("M2L_Equivalence_Checking.biderivs_final",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         wf_word ?\<Sigma> ?n ?w1.0; wf_word ?\<Sigma> ?n ?w2.0 |]
      ==> final (biderivs ?\<Sigma> ?w1.0 ?w2.0 ?r) =
          (?w1.0 @ rev ?w2.0 : lang ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 15,
                  template_app (template_hole 14, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 12, template_hole 11),
                    template_app (template_hole 10, template_var 4))),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 12, template_hole 11),
                    template_app (template_hole 10, template_var 4))),
                template_var 3),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 4)),
                 template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_app (template_hole 2, template_var 0))),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 12, template_hole 11),
                       template_app (template_hole 10, template_var 4))),
                   template_hole 0),
                 template_hole 6),
               template_var 3),
             template_var 2))))),
    ("M2L_Equivalence_Checking.lang_flatten_INTERSECT",
     "[| finite ?X; ?X ~= {};
         ALL r:?X. M2L_Equivalence_Checking.wf ?\<Sigma> ?n r |]
      ==> (?w : lang ?\<Sigma> ?n (INTERSECT (sorted_list_of_set ?X))) =
          (ALL r:?X. ?w : lang ?\<Sigma> ?n r)",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 3)),
        template_negation
         (template_equation (template_var 3, template_hole 15)),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 3), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 10, template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 9,
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_app (template_hole 6, template_var 2))),
                   template_hole 5),
                 template_hole 4),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 3, template_hole 2),
                 template_hole 1),
               template_app (template_hole 0, template_var 3)))),
         template_app
          (template_app (template_hole 14, template_var 3), t_empty)))),
    ("M2L_Equivalence_Checking.lang_Plus_Zero",
     "(lang ?\<Sigma> ?n (Plus ?r One) = lang ?\<Sigma> ?n (Plus ?s One)) =
      (lang ?\<Sigma> ?n ?r - {[]} = lang ?\<Sigma> ?n ?s - {[]})",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app (template_hole 8, template_var 3))),
                 template_hole 7),
               template_hole 6),
             template_var 2),
           template_app
            (template_app (template_hole 5, template_var 1),
             template_hole 4)),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app (template_hole 8, template_var 3))),
                 template_hole 7),
               template_hole 6),
             template_var 2),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_hole 4))),
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 10, template_hole 9),
                         template_app (template_hole 8, template_var 3))),
                     template_hole 7),
                   template_hole 6),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 11,
                       template_app
                        (template_app (template_hole 10, template_hole 9),
                         template_app (template_hole 8, template_var 3))),
                     template_hole 7),
                   template_hole 6),
                 template_var 2),
               template_var 0)),
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0))))),
    ("M2L_Equivalence_Checking.lang_biderivs",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         wf_word ?\<Sigma> ?n ?w1.0; wf_word ?\<Sigma> ?n ?w2.0 |]
      ==> lang ?\<Sigma> ?n (biderivs ?\<Sigma> ?w1.0 ?w2.0 ?r) =
          biQuots ?w1.0 ?w2.0 (lang ?\<Sigma> ?n ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_app (template_hole 7, template_var 4))),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_hole 8),
                    template_app (template_hole 7, template_var 4))),
                template_var 3),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 9, template_hole 8),
                     template_app (template_hole 7, template_var 4))),
                 template_hole 4),
               template_hole 3),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_hole 3),
                   template_app (template_hole 1, template_var 4)),
                 template_var 1),
               template_var 0),
             template_var 2)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 9, template_hole 8),
                       template_app (template_hole 7, template_var 4))),
                   template_hole 4),
                 template_hole 3),
               template_var 3),
             template_var 2))))),
    ("M2L_Equivalence_Checking.lang_lderiv_rderivs",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         wf_word ?\<Sigma> ?n ?w; ?a : (set o \<sigma> ?\<Sigma>) ?n |]
      ==> lang ?\<Sigma> ?n (\<DD> ?\<Sigma> ?a (rderivs ?\<Sigma> ?w ?r)) =
          lang ?\<Sigma> ?n (rderivs ?\<Sigma> ?w (\<DD> ?\<Sigma> ?a ?r))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_app (template_hole 8, template_var 4))),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_app (template_hole 8, template_var 4)),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app (template_hole 8, template_var 4))),
                 template_hole 4),
               template_hole 3),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 0),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 1, template_hole 3),
                   template_app (template_hole 0, template_var 4)),
                 template_var 1),
               template_var 2))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app (template_hole 8, template_var 4))),
                 template_hole 4),
               template_hole 3),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_hole 3),
                 template_app (template_hole 0, template_var 4)),
               template_var 1),
             template_app
              (template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 0),
               template_var 2)))))),
    ("M2L_Equivalence_Checking.lang_rderiv_lderivs",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         wf_word ?\<Sigma> ?n ?w; ?a : (set o \<sigma> ?\<Sigma>) ?n |]
      ==> lang ?\<Sigma> ?n
           (rderiv ?\<Sigma> ?a (lderivs ?\<Sigma> ?w ?r)) =
          lang ?\<Sigma> ?n
           (lderivs ?\<Sigma> ?w (rderiv ?\<Sigma> ?a ?r))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 4)),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_app (template_hole 8, template_var 4))),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 0),
              template_app
               (template_app
                 (template_app (template_hole 10, template_hole 9),
                  template_app (template_hole 8, template_var 4)),
                template_var 3))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app (template_hole 8, template_var 4))),
                 template_hole 4),
               template_hole 3),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 2, template_hole 3),
                 template_app (template_hole 1, template_var 4)),
               template_var 0),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_hole 3),
                   template_app (template_hole 1, template_var 4)),
                 template_var 1),
               template_var 2))),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 10, template_hole 9),
                     template_app (template_hole 8, template_var 4))),
                 template_hole 4),
               template_hole 3),
             template_var 3),
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_hole 3),
                 template_app (template_hole 1, template_var 4)),
               template_var 1),
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 2, template_hole 3),
                   template_app (template_hole 1, template_var 4)),
                 template_var 0),
               template_var 2)))))),
    ("M2L_Equivalence_Checking.lang_eq_ext",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> (lang ?\<Sigma> ?n ?r = lang ?\<Sigma> ?n ?s) =
          (ALL w:lists ((set o \<sigma> ?\<Sigma>) ?n).
              (w : lang ?\<Sigma> ?n ?r) = (w : lang ?\<Sigma> ?n ?s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_hole 6),
                         template_app (template_hole 5, template_var 3))),
                     template_hole 4),
                   template_hole 3),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_hole 6),
                       template_app (template_hole 5, template_var 3))),
                   template_hole 4),
                 template_hole 3),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app (template_hole 5, template_var 3)),
                 template_var 2))),
           t_empty)))),
    ("M2L_Equivalence_Checking.lang_eq_ext_Nil_fold_Deriv",
     "[| M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?r;
         M2L_Equivalence_Checking.wf ?\<Sigma> ?n ?s |]
      ==> (lang ?\<Sigma> ?n ?r = lang ?\<Sigma> ?n ?s) =
          (ALL (K, L)
               :{(fold lQuot w (lang ?\<Sigma> ?n ?r),
                  fold lQuot w (lang ?\<Sigma> ?n ?s)) |
                 w. w : lists ((set o \<sigma> ?\<Sigma>) ?n)}.
              ([] : K) = ([] : L))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 3)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 21,
                  template_app (template_hole 20, template_var 3)),
                template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 18,
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 17,
                       template_app
                        (template_app (template_hole 16, template_hole 15),
                         template_app (template_hole 14, template_var 3))),
                     template_hole 13),
                   template_hole 12),
                 template_var 2),
               template_var 1)),
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_hole 17,
                     template_app
                      (template_app (template_hole 16, template_hole 15),
                       template_app (template_hole 14, template_var 3))),
                   template_hole 13),
                 template_hole 12),
               template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 11, template_app (template_hole 10, t_empty)),
           template_app (template_hole 1, t_empty)))))]:
   (string * thm * template) list
### theory "Draft.M2L_Equivalence_CheckingMoreTemplates"
### 0.636s elapsed time, 1.031s cpu time, 0.136s GC time
val it = (): unit
