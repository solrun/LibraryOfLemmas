   [("Init_Normalization.toplevel_inters_finite",
     "finite (toplevel_inters ?r)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Init_Normalization.toplevel_inters_nonempty",
     "toplevel_inters ?r ~= {}",
     template_negation
      (
         template_equation
          (template_app (template_hole 1, template_var 0), template_hole 0)
         )),
    ("Init_Normalization.Pluss_None",
     "(Full : toplevel_summands ?r) = (Pluss ?r = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Init_Normalization.Inters_None",
     "(Zero : toplevel_inters ?r) = (Inters ?r = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Init_Normalization.set_merge_distinct",
     "set (merge_distinct ?xs ?ys) = set ?xs Un set ?ys",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Init_Normalization.sorted_merge_distinct",
     "[| sorted ?xs; sorted ?ys |] ==> sorted (merge_distinct ?xs ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Init_Normalization.Inters_Some",
     "(Inters ?r = Some ?xs) =
      (Zero ~: set ?xs &
       ?xs = sorted_list_of_set (toplevel_inters ?r - {Full}))",
     template_bimplication
      (template_equation
        (template_app (template_hole 13, template_var 1),
         template_app (template_hole 12, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_app (template_hole 7, template_var 0)))),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_hole 0)))))
           ))),
    ("Init_Normalization.Pluss_Some",
     "(Pluss ?r = Some ?xs) =
      (Full ~: set ?xs &
       ?xs = sorted_list_of_set (toplevel_summands ?r - {Zero}))",
     template_bimplication
      (template_equation
        (template_app (template_hole 13, template_var 1),
         template_app (template_hole 12, template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_hole 8),
                   template_app (template_hole 7, template_var 0)))),
             template_app
              (template_app (template_hole 6, template_var 0),
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_hole 0)))))
           ))),
    ("Init_Normalization.distinct_merge_distinct",
     "[| sorted ?xs; distinct ?xs; sorted ?ys; distinct ?ys |]
      ==> distinct (merge_distinct ?xs ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Init_Normalization.inInter_alt",
     "inInter ?r ?s =
      (let X = toplevel_inters (rexp.Inter ?r ?s) - {Full}
       in INTERSECT (sorted_list_of_set (if Zero : X then {Zero} else X)))",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5))),
         t_empty))),
    ("Init_Normalization.inPlus_alt",
     "inPlus ?r ?s =
      (let X = toplevel_summands (Plus ?r ?s) - {Zero}
       in PLUS (sorted_list_of_set (if Full : X then {Full} else X)))",
     template_equation
      (template_app
        (template_app (template_hole 12, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 11,
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_hole 9,
                 template_app
                  (template_app (template_hole 8, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5))),
         t_empty))),
    ("Init_Normalization.zip_with_option_eq_Some",
     "(zip_with_option ?f ?x ?y = Some ?z) =
      (EX a b. ?z = ?f a b & ?x = Some a & ?y = Some b)",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 8, template_var 0)),
       template_app (template_hole 7, t_empty))),
    ("Init_Normalization.sorted_list_of_set_merge_distinct",
     "[| sorted ?xs; distinct ?xs; sorted ?ys; distinct ?ys |]
      ==> merge_distinct ?xs ?ys = sorted_list_of_set (set ?xs Un set ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))))))]
