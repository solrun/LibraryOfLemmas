Loading theory "Deriving.Comparator" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Deriving.Derive_Manager" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Deriving.Generator_Aux" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator" via "Deriving.Comparator_Generator")
Loading theory "Draft.Pi_Regular_Set" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives" via "Draft.Pi_Regular_Exp")
signature BNF_ACCESS =
  sig
    val bnf_types: Proof.context -> string list -> typ list
    val case_consts: Proof.context -> string list -> term list
    val case_simps: Proof.context -> string list -> thm list list
    val case_thms: Proof.context -> string list -> thm list
    val constr_argument_types:
       Proof.context -> string list -> typ list list list
    val constr_terms: Proof.context -> string -> term list
    val distinct_thms: Proof.context -> string list -> thm list list
    val induct_thms: Proof.context -> string list -> thm list
    val inject_thms: Proof.context -> string list -> thm list list
    val map_comps: Proof.context -> string list -> thm list
    val map_simps: Proof.context -> string list -> thm list list
    val map_terms: Proof.context -> string list -> term list
    val set_simps: Proof.context -> string list -> thm list list
    val set_terms: Proof.context -> string list -> term list list
  end
structure Bnf_Access: BNF_ACCESS
overloading
  word_pow \<equiv> compow :: nat => 'a list => 'a list
signature DERIVE_MANAGER =
  sig
    val derive: string -> string -> string -> theory -> theory
    val derive_cmd: string -> string -> string -> theory -> theory
    val print_info: theory -> unit
    val register_derive:
       string ->
         string ->
           (string -> string -> theory -> theory) -> theory -> theory
  end
structure Derive_Manager: DERIVE_MANAGER
consts
  word_pow :: "nat => 'a list => 'a list"
### theory "Deriving.Derive_Manager"
### 0.060s elapsed time, 0.274s cpu time, 0.000s GC time
Loading theory "HOL-Library.Char_ord" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances")
overloading
  lang_pow \<equiv> compow :: nat => 'a list set => 'a list set
consts
  lang_pow :: "nat => 'a list set => 'a list set"
instantiation
  char :: linorder
  less_eq_char == less_eq :: char => char => bool
  less_char == less :: char => char => bool
signature GENERATOR_AUX =
  sig
    val OF_option: thm -> thm option list -> thm
    val add_used_tycos:
       Proof.context -> string -> string list -> string list
    val alist_to_string: (string * 'a) list -> string
    val conjI_tac:
       thm list ->
         Proof.context ->
           'a list -> (Proof.context -> int -> tactic) -> tactic
    val create_map:
       (typ -> term) ->
         (string * typ -> 'a -> term) ->
           'a ->
             (typ -> bool) ->
               (local_theory -> string -> bool list) ->
                 (local_theory -> string -> term) ->
                   (local_theory -> string -> 'a -> term) ->
                     string list ->
                       (local_theory -> string -> 'a) ->
                         typ -> local_theory -> term
    val create_partial:
       'a ->
         (typ -> bool) ->
           (local_theory -> string -> bool list) ->
             (local_theory -> string -> term) ->
               (local_theory -> string -> 'a -> term) ->
                 string list ->
                   (local_theory -> string -> 'a) ->
                     typ -> local_theory -> term
    val define_overloaded:
       string * term -> local_theory -> thm * local_theory
    val define_overloaded_generic:
       Attrib.binding * term -> local_theory -> thm * local_theory
    val drop_last: 'a list -> 'a list
    val freeify_tvars: typ -> typ
    val ind_case_to_idxs: 'a list list -> int -> int * int
    val infer_type: Proof.context -> term -> term
    val ints_to_subscript: int list -> string
    val is_class_instance: theory -> string -> sort -> bool
    val lambdas: term list -> term -> term
    val mk_case_tac:
       Proof.context ->
         term option list list ->
           thm ->
             (int ->
                Proof.context * thm list * (string * cterm) list -> tactic)
               -> tactic
    val mk_def: typ -> string -> term -> term
    val mk_id: typ -> term
    val mk_infer_const: string -> Proof.context -> term -> term
    val mutual_recursive_types:
       string -> Proof.context -> string list * typ list
    val prove_multi_future:
       Proof.context ->
         string list ->
           term list ->
             term list ->
               ({context: Proof.context, prems: thm list} -> tactic) ->
                 thm list
    val recursor:
       (string -> 'a) * ('a -> bool list) * string list ->
         bool ->
           (typ -> 'b) ->
             (typ -> 'b) ->
               (typ -> 'b) ->
                 ((typ * 'b option) list * 'a -> 'b) -> typ -> 'b
    val rename_types: (typ * typ) list -> term -> term
    val split_IHs:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list -> thm list -> thm list list
    val std_recursor_tac:
       (string -> 'a) * ('a -> bool list) * string list ->
         typ list ->
           ('a -> thm) ->
             thm list -> typ -> thm list -> Proof.context -> tactic
    val sub: string -> string
    val subT: string -> typ -> string
    val typ_and_vs_of_typname:
       theory -> string -> sort -> typ * (string * sort) list
    val typ_and_vs_of_used_typname:
       string ->
         bool list -> string list -> typ * (string * string list) list
    val type_parameters:
       typ -> Proof.context -> (string * sort) list * typ list
  end
structure Generator_Aux: GENERATOR_AUX
instantiation
  char :: distrib_lattice
  inf_char == inf :: char => char => char
  sup_char == sup :: char => char => char
### theory "Deriving.Generator_Aux"
### 0.149s elapsed time, 0.623s cpu time, 0.036s GC time
Loading theory "HOL-Library.Code_Abstract_Nat" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives" via "Draft.Pi_Regular_Exp" via "HOL-Library.Code_Target_Nat")
### theory "HOL-Library.Char_ord"
### 0.098s elapsed time, 0.379s cpu time, 0.036s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "HOL-Library.Code_Abstract_Nat"
### 0.054s elapsed time, 0.218s cpu time, 0.000s GC time
Loading theory "HOL-Library.Code_Target_Nat" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives" via "Draft.Pi_Regular_Exp")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Code generator: dropping subsumed code equation
### divmod_nat ?m ?n ==
### if ?n = 0 | ?m < ?n then (0, ?m)
### else let (q, y) = divmod_nat (?m - ?n) ?n in (Suc q, y)
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit1 ?n) ==
### if ?m < ?n then (0, numeral (num.Bit1 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit1 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit1 ?n) ==
### if ?m <= ?n then (0, numeral (num.Bit0 ?m))
### else divmod_step (num.Bit1 ?n)
###       (divmod (num.Bit0 ?m) (num.Bit0 (num.Bit1 ?n)))
### Code generator: dropping subsumed code equation
### divmod (num.Bit1 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r + 1)
### Code generator: dropping subsumed code equation
### divmod (num.Bit0 ?m) (num.Bit0 ?n) ==
### case divmod ?m ?n of (q, r) => (q, 2 * r)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit1 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod num.One (num.Bit0 ?n) == (0, Numeral1)
### Code generator: dropping subsumed code equation
### divmod ?m num.One == (numeral ?m, 0)
### Code generator: dropping subsumed code equation
### Suc ?m <= ?n == ?m < ?n
### Code generator: dropping subsumed code equation
### 0 <= ?n == True
### Code generator: dropping subsumed code equation
### ?m < Suc ?n == ?m <= ?n
### Code generator: dropping subsumed code equation
### ?n < 0 == False
### theory "HOL-Library.Function_Algebras"
### 0.154s elapsed time, 0.595s cpu time, 0.062s GC time
Loading theory "HOL-Library.List_Lexorder" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives" via "Draft.Pi_Regular_Exp")
### Code generator: dropping subsumed code equation
### of_nat ?n == semiring_1_class.of_nat_aux (%i. i + (1::?'a)) ?n (0::?'a)
instantiation
  list :: (ord) ord
  less_eq_list == less_eq :: 'a list => 'a list => bool
  less_list == less :: 'a list => 'a list => bool
instantiation
  list :: (linorder) distrib_lattice
  inf_list == inf :: 'a list => 'a list => 'a list
  sup_list == sup :: 'a list => 'a list => 'a list
instantiation
  list :: (order) order_bot
  bot_list == bot :: 'a list
### theory "HOL-Library.Code_Target_Nat"
### 0.167s elapsed time, 0.655s cpu time, 0.062s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.List_Lexorder"
### 0.069s elapsed time, 0.283s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "{}"
locale comparator
  fixes comp :: "'a => 'a => order"
  assumes "comparator comp"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.Pi_Regular_Set"
### 0.451s elapsed time, 1.805s cpu time, 0.098s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.181s elapsed time, 0.711s cpu time, 0.075s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "Deriving.Comparator"
### 0.656s elapsed time, 2.616s cpu time, 0.241s GC time
Loading theory "Deriving.Compare" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
### theory "HOL-Library.Nat_Bijection"
### 0.315s elapsed time, 1.246s cpu time, 0.142s GC time
Loading theory "Deriving.Comparator_Generator" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances" via "Deriving.Compare_Generator")
class compare = type +
  fixes compare :: "'a => 'a => order"
  assumes "comparator_compare": "comparator compare"
class compare_order = compare + ord +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
Found termination order: "size_list size <*mlex*> {}"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class compare_order = compare + linorder +
  assumes "ord_defs": "le_of_comp compare = (<=)" "lt_of_comp compare = (<)"
Found termination order: "size <*mlex*> {}"
signature COMPARATOR_GENERATOR =
  sig
    datatype comparator_type = BNF | Linorder
    val ensure_info:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparator:
       comparator_type -> string -> local_theory -> local_theory
    val generate_comparators_from_bnf_fp:
       string ->
         local_theory ->
           ((term * thm list) list * (term * thm) list) * local_theory
    val get_info: Proof.context -> string -> info option
    type info =
       {comp: term,
        comp_def: thm option,
        comp_thm: thm,
        map: term,
        map_comp: thm option,
        partial_comp_thms: thm list, pcomp: term, used_positions: bool list}
    val register_comparator_of: string -> local_theory -> local_theory
    val register_foreign_comparator:
       typ -> term -> thm -> local_theory -> local_theory
    val register_foreign_partial_and_full_comparator:
       string ->
         term ->
           term ->
             term ->
               thm option ->
                 thm option ->
                   thm ->
                     thm ->
                       thm ->
                         thm -> bool list -> local_theory -> local_theory
  end
structure Comparator_Generator: COMPARATOR_GENERATOR
### theory "Deriving.Comparator_Generator"
### 0.669s elapsed time, 2.537s cpu time, 0.600s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.ExtrEqs")
signature COMPARE_CODE =
  sig
    val change_compare_code:
       term -> string list -> local_theory -> local_theory
  end
structure Compare_Code: COMPARE_CODE
### theory "Deriving.Compare"
### 0.708s elapsed time, 2.693s cpu time, 0.600s GC time
Loading theory "Deriving.Compare_Generator" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives" via "Draft.Pi_Regular_Exp" via "Deriving.Compare_Instances")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.841s elapsed time, 3.213s cpu time, 0.667s GC time
(if ?x <= ?y then if ?x = ?y then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y = ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?y <= ?x then ?P else ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x <= ?y then if ?x < ?y then ?Q else ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x <= ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y < ?x then ?R else ?P) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?x = ?y then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x < ?y then ?Q else if ?y = ?x then ?P else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y < ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x < ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?y <= ?x then ?R else ?Q) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
(if ?x = ?y then ?P else if ?x <= ?y then ?Q else ?R) =
(case compare ?x ?y of Eq => ?P | Lt => ?Q | Gt => ?R)
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature COMPARE_GENERATOR =
  sig
    val compare_instance:
       Comparator_Generator.comparator_type -> string -> theory -> theory
    val compare_order_instance_via_comparator_of: string -> theory -> theory
    val compare_order_instance_via_compare: string -> theory -> theory
  end
structure Compare_Generator: COMPARE_GENERATOR
### theory "Deriving.Compare_Generator"
### 0.261s elapsed time, 0.870s cpu time, 0.053s GC time
Loading theory "Deriving.Compare_Instances" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives" via "Draft.Pi_Regular_Exp")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
deriving "compare_order" instance for type "Int.int"
deriving "compare" instance for type "Int.int"
Found termination order: "size <*mlex*> {}"
deriving "compare_order" instance for type "Code_Numeral.integer"
deriving "compare" instance for type "Code_Numeral.integer"
consts
  snth :: "'a stream => nat => 'a"
deriving "compare_order" instance for type "Nat.nat"
deriving "compare" instance for type "Nat.nat"
deriving "compare_order" instance for type "String.char"
deriving "compare" instance for type "String.char"
consts
  stake :: "nat => 'a stream => 'a list"
deriving "compare" instance for type "Sum_Type.sum"
generating comparator for type "Sum_Type.sum"
consts
  sdrop :: "nat => 'a stream => 'a stream"
deriving "compare" instance for type "List.list"
generating comparator for type "List.list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
deriving "compare" instance for type "Product_Type.prod"
generating comparator for type "Product_Type.prod"
consts
  cycle :: "'a list => 'a stream"
deriving "compare" instance for type "Option.option"
generating comparator for type "Option.option"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "{}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "{}"
deriving "compare" instance for type "HOL.bool"
deriving "compare" instance for type "Product_Type.unit"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
deriving "compare_order" instance for type "HOL.bool"
deriving "compare_order" instance for type "Product_Type.unit"
### theory "Deriving.Compare_Instances"
### 0.461s elapsed time, 1.419s cpu time, 0.197s GC time
Loading theory "Draft.Pi_Regular_Exp" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual" via "Draft.Pi_Derivatives")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.789s elapsed time, 2.482s cpu time, 0.250s GC time
### theory "HOL-Library.Tree"
### 2.025s elapsed time, 6.888s cpu time, 1.680s GC time
Loading theory "Draft.Templates" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.070s elapsed time, 0.142s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.565s elapsed time, 1.167s cpu time, 0.094s GC time
deriving "linorder" instance for type "Pi_Regular_Exp.rexp"
generating comparator for type "Pi_Regular_Exp.rexp"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  ACI_norm :: "'a rexp => 'a rexp"
Found termination order:
  "(%p. size (fst p)) <*mlex*> (%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  final :: "'a rexp => bool"
locale alphabet
  fixes \<Sigma> :: "nat => 'a set"  (\<open>\<Sigma> _\<close>)
    and wf_atom :: "nat => 'b => bool"
consts
  wf :: "nat => 'b rexp => bool"
consts
  wf_word :: "nat => 'a list => bool"
locale project
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
  assumes "project \<Sigma> project"
consts
  lang :: "nat => 'b rexp => 'a list set"
### theory "Draft.Pi_Regular_Exp"
### 17.904s elapsed time, 25.514s cpu time, 4.943s GC time
Loading theory "Draft.Pi_Derivatives" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates" via "Draft.Pi_Regular_Exp_Dual")
locale embed
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
    and embed :: "'a => 'a list"
  assumes "Pi_Derivatives.embed \<Sigma> project embed"
consts
  lderiv :: "'a => 'b rexp => 'b rexp"
consts
  lderivs :: "'a list => 'b rexp => 'b rexp"
### theory "Draft.Pi_Derivatives"
### 0.145s elapsed time, 0.171s cpu time, 0.000s GC time
Loading theory "Draft.Pi_Regular_Exp_Dual" (required by "Draft.Pi_Regular_Exp_DualMoreTemplates")
deriving "linorder" instance for type "Pi_Regular_Exp_Dual.rexp_dual"
generating comparator for type "Pi_Regular_Exp_Dual.rexp_dual"
consts
  final_dual :: "'a rexp_dual => bool"
locale alphabet
  fixes \<Sigma> :: "nat => 'a set"  (\<open>\<Sigma> _\<close>)
    and wf_atom :: "nat => 'b => bool"
consts
  wf_dual :: "nat => 'b rexp_dual => bool"
locale project
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
  assumes "project \<Sigma> project"
consts
  lang_dual :: "nat => 'b rexp_dual => 'a list set"
locale embed
  fixes \<Sigma> :: "nat => 'a set"
    and wf_atom :: "nat => 'b => bool"
    and project :: "'a => 'a"
    and lookup :: "'b => 'a => bool"
    and embed :: "'a => 'a list"
  assumes "Pi_Derivatives.embed \<Sigma> project embed"
consts
  lderiv_dual :: "'a => 'b rexp_dual => 'b rexp_dual"
consts
  lderivs_dual :: "'a list => 'b rexp_dual => 'b rexp_dual"
Found termination order:
  "(%p. size (fst (snd p))) <*mlex*> (%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  pnorm_dual :: "'a rexp_dual => 'a rexp_dual"
consts
  CoNot :: "'a rexp_dual => 'a rexp_dual"
consts
  rexp_dual_of :: "'a rexp => 'a rexp_dual"
### theory "Draft.Pi_Regular_Exp_Dual"
### 5.389s elapsed time, 8.225s cpu time, 2.131s GC time
Loading theory "Draft.Pi_Regular_Exp_DualMoreTemplates"
val templateLemmas =
   [("Pi_Regular_Exp_Dual.comparator_rexp_dual",
     "comparator ?comp\<^sub>'\<^sub>a ==>
      comparator (comparator_rexp_dual ?comp\<^sub>'\<^sub>a)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoOne ?x) (CoZero ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoZero ?x) (CoOne ?ya) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoOne ?x)
       (CoAtom ?yb ?yc) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoOne ?x) (CoPr ?yl ?ym) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoOne ?x)
       (CoStar ?yj ?yk) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoZero ?x)
       (CoAtom ?yb ?yc) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoZero ?x)
       (CoPr ?yl ?ym) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoZero ?x)
       (CoStar ?yj ?yk) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app (template_hole 2, template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoAtom ?x ?xa)
       (CoOne ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoAtom ?x ?xa)
       (CoZero ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPr ?x ?xa) (CoOne ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPr ?x ?xa) (CoZero ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoStar ?x ?xa)
       (CoOne ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoStar ?x ?xa)
       (CoZero ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 3),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoOne ?x) (CoOne ?ya) =
      comparator_bool ?x ?ya",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoZero ?x) (CoZero ?y) =
      comparator_bool ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoOne ?x)
       (CoPlus ?yd ?ye ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app (template_hole 2, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoOne ?x)
       (CoTimes ?yg ?yh ?yi) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app (template_hole 2, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoZero ?x)
       (CoPlus ?yd ?ye ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app (template_hole 2, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoZero ?x)
       (CoTimes ?yg ?yh ?yi) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app (template_hole 2, template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoAtom ?x ?xa)
       (CoPr ?yl ?ym) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoAtom ?x ?xa)
       (CoStar ?yj ?yk) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPr ?x ?xa)
       (CoAtom ?yb ?yc) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPr ?x ?xa)
       (CoStar ?yj ?yk) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoStar ?x ?xa)
       (CoAtom ?yb ?yc) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoStar ?x ?xa)
       (CoPr ?yl ?ym) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app (template_hole 2, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPlus ?x ?xa ?xb)
       (CoOne ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPlus ?x ?xa ?xb)
       (CoZero ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoTimes ?x ?xa ?xb)
       (CoOne ?ya) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoTimes ?x ?xa ?xb)
       (CoZero ?y) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 4),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2),
             template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoAtom ?x ?xa)
       (CoPlus ?yd ?ye ?yf) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoAtom ?x ?xa)
       (CoTimes ?yg ?yh ?yi) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPr ?x ?xa)
       (CoPlus ?yd ?ye ?yf) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPr ?x ?xa)
       (CoTimes ?yg ?yh ?yi) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoStar ?x ?xa)
       (CoPlus ?yd ?ye ?yf) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoStar ?x ?xa)
       (CoTimes ?yg ?yh ?yi) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app (template_hole 2, template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPlus ?x ?xa ?xb)
       (CoAtom ?yb ?yc) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPlus ?x ?xa ?xb)
       (CoPr ?yl ?ym) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPlus ?x ?xa ?xb)
       (CoStar ?yj ?yk) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoTimes ?x ?xa ?xb)
       (CoAtom ?yb ?yc) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoTimes ?x ?xa ?xb)
       (CoPr ?yl ?ym) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoTimes ?x ?xa ?xb)
       (CoStar ?yj ?yk) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 5),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 4),
               template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPlus ?x ?xa ?xb)
       (CoTimes ?yg ?yh ?yi) =
      Lt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 6),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoTimes ?x ?xa ?xb)
       (CoPlus ?yd ?ye ?yf) =
      Gt",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 6),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_rexp_dual ?x\<^sub>0 ==>
          peq_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      peq_comp (comparator_rexp_dual ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_rexp_dual ?x\<^sub>0 ==>
          psym_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      psym_comp (comparator_rexp_dual ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_pointwise",
     "(!!x\<^sub>0\<^sub>_\<^sub>0.
          x\<^sub>0\<^sub>_\<^sub>0 : set_rexp_dual ?x\<^sub>0 ==>
          ptrans_comp ?comp\<^sub>'\<^sub>a x\<^sub>0\<^sub>_\<^sub>0) ==>
      ptrans_comp (comparator_rexp_dual ?comp\<^sub>'\<^sub>a) ?x\<^sub>0",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 1)
           ))),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoAtom ?x ?xa)
       (CoAtom ?yb ?yc) =
      (case comparator_bool ?x ?yb of Eq => ?comp\<^sub>'\<^sub>a ?xa ?yc
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_var 4, template_var 2),
                 template_var 0)),
             template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPr ?x ?xa)
       (CoPr ?yl ?ym) =
      (case comparator_bool ?x ?yl of
       Eq => comparator_rexp_dual ?comp\<^sub>'\<^sub>a ?xa ?ym | Lt => Lt
       | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoStar ?x ?xa)
       (CoStar ?yj ?yk) =
      (case comparator_bool ?x ?yj of
       Eq => comparator_rexp_dual ?comp\<^sub>'\<^sub>a ?xa ?yk | Lt => Lt
       | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 4),
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 5, template_var 4),
                   template_var 2),
                 template_var 0)),
             template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 1)))),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoPlus ?x ?xa ?xb)
       (CoPlus ?yd ?ye ?yf) =
      (case comparator_bool ?x ?yd of
       Eq =>
         case comparator_rexp_dual ?comp\<^sub>'\<^sub>a ?xa ?ye of
         Eq => comparator_rexp_dual ?comp\<^sub>'\<^sub>a ?xb ?yf | Lt => Lt
         | Gt => Gt
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 6),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 5, template_var 6),
                           template_var 3),
                         template_var 0)),
                     template_hole 2),
                   template_hole 1),
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 6),
                     template_var 4),
                   template_var 1))),
             template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 5),
           template_var 2)))),
    ("Pi_Regular_Exp_Dual.comparator_rexp_dual_simps",
     "comparator_rexp_dual ?comp\<^sub>'\<^sub>a (CoTimes ?x ?xa ?xb)
       (CoTimes ?yg ?yh ?yi) =
      (case comparator_bool ?x ?yg of
       Eq =>
         case comparator_rexp_dual ?comp\<^sub>'\<^sub>a ?xa ?yh of
         Eq => comparator_rexp_dual ?comp\<^sub>'\<^sub>a ?xb ?yi | Lt => Lt
         | Gt => Gt
       | Lt => Lt | Gt => Gt)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_var 6),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 5),
               template_var 4),
             template_var 3)),
         template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app
                          (template_app (template_hole 5, template_var 6),
                           template_var 3),
                         template_var 0)),
                     template_hole 2),
                   template_hole 1),
                 template_app
                  (template_app
                    (template_app (template_hole 5, template_var 6),
                     template_var 4),
                   template_var 1))),
             template_hole 2),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 5),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.Pi_Regular_Exp_DualMoreTemplates"
### 0.378s elapsed time, 0.568s cpu time, 0.049s GC time
val it = (): unit
