### theory "Draft.Cblinfun_Code_ExamplesTemplates"
### 5.042s elapsed time, 10.141s cpu time, 0.387s GC time
"cblinfun_of_mat (mat_impl (Abs_mat_impl (2, 2, [[1, 0], [0, 1]])))"
  :: "bool ell2 \<Rightarrow>\<^sub>C\<^sub>L bool ell2"
"cblinfun_of_mat (mat_impl (Abs_mat_impl (2, 2, [[2, 0], [0, 2]])))"
  :: "bool ell2 \<Rightarrow>\<^sub>C\<^sub>L bool ell2"
"cblinfun_of_mat (mat_impl (Abs_mat_impl (3, 2, [[0, 0], [0, 0], [0, 0]])))"
  :: "bool ell2 \<Rightarrow>\<^sub>C\<^sub>L Enum.finite_3 ell2"
"cblinfun_of_mat (mat_impl (Abs_mat_impl (2, 2, [[- 1, 0], [0, - 1]])))"
  :: "bool ell2 \<Rightarrow>\<^sub>C\<^sub>L bool ell2"
"cblinfun_of_mat (mat_impl (Abs_mat_impl (2, 2, [[0, 0], [0, 0]])))"
  :: "bool ell2 \<Rightarrow>\<^sub>C\<^sub>L bool ell2"
"cblinfun_of_mat (mat_impl (Abs_mat_impl (2, 2, [[0, 1], [1, 0]])))"
  :: "bool ell2 \<Rightarrow>\<^sub>C\<^sub>L bool ell2"
"False"
  :: "bool"
"cblinfun_of_mat (mat_impl (Abs_mat_impl (1, 1, [[1]])))"
  :: "unit ell2 \<Rightarrow>\<^sub>C\<^sub>L unit ell2"
"cblinfun_of_mat (mat_impl (Abs_mat_impl (2, 2, [[2, 0], [0, 2]])))"
  :: "bool ell2 \<Rightarrow>\<^sub>C\<^sub>L bool ell2"
"cblinfun_of_mat
  (mat_impl (Abs_mat_impl (2, 2, [[Complex 0 1, 0], [0, Complex 0 1]])))"
  :: "bool ell2 \<Rightarrow>\<^sub>C\<^sub>L bool ell2"
"cblinfun_of_mat (mat_impl (Abs_mat_impl (2, 2, [[0, 0], [0, 0]])))"
  :: "bool ell2 \<Rightarrow>\<^sub>C\<^sub>L bool ell2"
"cblinfun_of_mat (mat_impl (Abs_mat_impl (2, 2, [[1, 0], [0, 1]])))"
  :: "bool ell2 \<Rightarrow>\<^sub>C\<^sub>L bool ell2"
"ell2_of_vec (vec_impl (Abs_vec_impl (2, [0, 0])))"
  :: "bool ell2"
"ell2_of_vec (vec_impl (Abs_vec_impl (1, [1])))"
  :: "unit ell2"
"ell2_of_vec (vec_impl (Abs_vec_impl (2, [1, 0])))"
  :: "bool ell2"
"ell2_of_vec (vec_impl (Abs_vec_impl (2, [2, 0])))"
  :: "bool ell2"
"ell2_of_vec (vec_impl (Abs_vec_impl (2, [2, 0])))"
  :: "bool ell2"
"ell2_of_vec (vec_impl (Abs_vec_impl (2, [1, 1])))"
  :: "bool ell2"
"ell2_of_vec (vec_impl (Abs_vec_impl (2, [0, 0])))"
  :: "bool ell2"
"True"
  :: "bool"
"ell2_of_vec (vec_impl (Abs_vec_impl (2, [0, - 1])))"
  :: "bool ell2"
"1"
  :: "complex"
"ell2_of_vec (vec_impl (Abs_vec_impl (1, [1])))"
  :: "unit ell2"
"ell2_of_vec (vec_impl (Abs_vec_impl (1, [1])))"
  :: "unit ell2"
"ell2_of_vec (vec_impl (Abs_vec_impl (1, [1])))"
  :: "unit ell2"
"1"
  :: "real"
"ell2_of_vec (vec_impl (Abs_vec_impl (2, [0, 1])))"
  :: "bool ell2"
"SPAN [vec_impl (Abs_vec_impl (2, [1, 0]))]"
  :: "bool ell2 ccsubspace"
"cblinfun_of_mat (mat_impl (Abs_mat_impl (2, 1, [[0], [1]])))"
  :: "unit ell2 \<Rightarrow>\<^sub>C\<^sub>L bool ell2"
"cblinfun_of_mat (mat_impl (Abs_mat_impl (2, 2, [[1, 0], [0, 0]])))"
  :: "bool ell2 \<Rightarrow>\<^sub>C\<^sub>L bool ell2"
"SPAN
  [vec_impl (Abs_vec_impl (2, [1, 0])),
   vec_impl (Abs_vec_impl (2, [0, 1]))]"
  :: "bool ell2 ccsubspace"
"SPAN []"
  :: "bool ell2 ccsubspace"
"SPAN []"
  :: "bool ell2 ccsubspace"
"SPAN
  [vec_impl (Abs_vec_impl (2, [1, 0])),
   vec_impl (Abs_vec_impl (2, [0, 1]))]"
  :: "bool ell2 ccsubspace"
"SPAN
  [vec_impl (Abs_vec_impl (2, [1, 0])),
   vec_impl (Abs_vec_impl (2, [0, 1]))]"
  :: "bool ell2 ccsubspace"
"SPAN [vec_impl (Abs_vec_impl (2, [1, 0]))]"
  :: "bool ell2 ccsubspace"
"SPAN
  [vec_impl (Abs_vec_impl (2, [0, 0])),
   vec_impl (Abs_vec_impl (2, [0, 0]))]"
  :: "bool ell2 ccsubspace"
"SPAN
  [vec_impl (Abs_vec_impl (2, [1, 0])),
   vec_impl (Abs_vec_impl (2, [0, 1]))]"
  :: "bool ell2 ccsubspace"
"SPAN
  [vec_impl (Abs_vec_impl (2, [0, 0])),
   vec_impl (Abs_vec_impl (2, [0, 1]))]"
  :: "bool ell2 ccsubspace"
"True"
  :: "bool"
"False"
  :: "bool"
"SPAN [vec_impl (Abs_vec_impl (2, [0, 1]))]"
  :: "bool ell2 ccsubspace"
"SPAN []"
  :: "bool ell2 ccsubspace"
"SPAN
  [vec_impl (Abs_vec_impl (2, [1, 0])),
   vec_impl (Abs_vec_impl (2, [0, 1]))]"
  :: "bool ell2 ccsubspace"
"SPAN
  [vec_impl (Abs_vec_impl (2, [1, 0])),
   vec_impl (Abs_vec_impl (2, [0, 0]))]"
  :: "bool ell2 ccsubspace"
"SPAN
  [vec_impl (Abs_vec_impl (2, [1, 0])), vec_impl (Abs_vec_impl (2, [0, 1])),
   vec_impl (Abs_vec_impl (2, [1, 0]))]"
  :: "bool ell2 ccsubspace"
*** Undefined fact: "lin_dep_iff_in_span" (line 181 of "$AFP/Complex_Bounded_Operators/extra/Extra_Jordan_Normal_Form.thy")2vectorspace.lin_dep_iff_in_spanfactVectorSpace.vectorspace.lin_dep_iff_in_spanVectorSpace.vectorspace.lin_dep_iff_in_spanfactVectorSpace.vectorspace.lin_dep_iff_in_span
*** At command "thm" (line 181 of "$AFP/Complex_Bounded_Operators/extra/Extra_Jordan_Normal_Form.thy")
*** Undefined fact: "False" (line 2479 of "$AFP/Complex_Bounded_Operators/Complex_Bounded_Linear_Function.thy")12FalseEfactHOL.FalseEFalse_deffactHOL.False_defFalse_imp_not_eventuallyfactFilter.False_imp_not_eventuallyFalse_implies_equalsfactHOL.False_implies_equalsFalse_neq_TruefactHOL.False_neq_TrueFalse_not_TruefactHOL.False_not_TrueFilter.False_imp_not_eventuallyfactFilter.False_imp_not_eventuallyHOL.FalseEfactHOL.FalseEHOL.False_deffactHOL.False_defHOL.False_implies_equalsfactHOL.False_implies_equalsHOL.False_neq_TruefactHOL.False_neq_TrueHOL.False_not_TruefactHOL.False_not_True
*** At command "thm" (line 2479 of "$AFP/Complex_Bounded_Operators/Complex_Bounded_Linear_Function.thy")
Exception- TOPLEVEL_ERROR raise
