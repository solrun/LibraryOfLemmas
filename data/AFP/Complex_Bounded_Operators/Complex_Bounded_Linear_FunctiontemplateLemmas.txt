   [("Complex_Bounded_Linear_Function.heterogenous_same_type_cblinfun",
     "heterogenous_same_type_cblinfun ?x ?y",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)
         )),
    ("Complex_Bounded_Linear_Function.Proj_is_Proj", "is_Proj (Proj ?M)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Bounded_Linear_Function.cblinfun_apply_clinear",
     "clinear (cblinfun_apply ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Bounded_Linear_Function.cblinfun_from_CARD_1_0", "?A = 0",
     template_equation (template_var 0, template_hole 0)),
    ("Complex_Bounded_Linear_Function.cblinfun_to_CARD_1_0", "?A = 0",
     template_equation (template_var 0, template_hole 0)),
    ("Complex_Bounded_Linear_Function0.bounded_clinear_apply_cblinfun",
     "bounded_clinear (%a. cblinfun_apply a ?b)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Bounded_Linear_Function.clinear_blinfun_compose_left",
     "clinear (%x. x o\<^sub>L ?y)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Bounded_Linear_Function.cblinfun_apply_1_left",
     "cblinfun_apply 1 ?y = ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Complex_Bounded_Linear_Function.id_cblinfun_apply",
     "cblinfun_apply id_cblinfun ?\<psi> = ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Complex_Bounded_Linear_Function0.cblinfun_compose_zero",
     "?x o\<^sub>L 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Complex_Bounded_Linear_Function.cblinfun_image_id",
     "cblinfun_image id_cblinfun ?\<psi> = ?\<psi>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Complex_Bounded_Linear_Function.zero_cblinfun_image",
     "cblinfun_image 0 ?S = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Complex_Bounded_Linear_Function.cblinfun_image_0",
     "cblinfun_image ?U 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Complex_Bounded_Linear_Function.cblinfun_image_bot",
     "cblinfun_image ?U \<bottom> = \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_1_right",
     "cblinfun_compose ?x 1 = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Complex_Bounded_Linear_Function.double_adj", "adj (adj ?A) = ?A",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Complex_Bounded_Linear_Function.butterfly_0_left",
     "butterfly (0::?'b) ?a = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Complex_Bounded_Linear_Function.butterfly_0_right",
     "butterfly ?a (0::?'a) = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_1_left",
     "cblinfun_compose 1 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_id_right",
     "cblinfun_compose ?U id_cblinfun = ?U",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_id_left",
     "cblinfun_compose id_cblinfun ?U = ?U",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_zero_left",
     "cblinfun_compose 0 ?U = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_zero_right",
     "cblinfun_compose ?U 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Complex_Bounded_Linear_Function.scaleC_1_right",
     "?x *\<^sub>C (1::?'a) = of_complex ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Bounded_Linear_Function.unitary_adj",
     "unitary (adj ?U) = unitary ?U",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Bounded_Linear_Function.blinfun_of_cblinfun_norm",
     "norm ?f = norm (blinfun_of_cblinfun ?f)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.norm_vector_to_cblinfun",
     "norm (vector_to_cblinfun ?x) = norm ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Bounded_Linear_Function.norm_adj", "norm (adj ?A) = norm ?A",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Bounded_Linear_Function.Proj_range",
     "cblinfun_image (Proj ?S) \<top> = ?S",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_var 0)),
    ("Complex_Bounded_Linear_Function.adj_Proj", "adj (Proj ?M) = Proj ?M",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Bounded_Linear_Function.Proj_image_leq",
     "cblinfun_image (Proj ?S) ?A <= ?S",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_var 1)),
    ("Complex_Bounded_Linear_Function.isCont_cblinfun_apply",
     "isCont (cblinfun_apply ?A) ?\<psi>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Bounded_Linear_Function.unitary_isometry",
     "unitary ?U ==> isometry ?U",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function0.bounded_antilinear_cblinfun_matrix",
     "bounded_antilinear (%x. cblinfun_apply x ?j \<bullet>\<^sub>C ?i)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Complex_Bounded_Linear_Function.bifunctional_isometric",
     "norm (cblinfun_apply bifunctional ?x) = norm ?x",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Bounded_Linear_Function.one_dim_iso_adjoint_complex",
     "one_dim_iso (adj ?A) = cnj (one_dim_iso ?A)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.blinfun_of_cblinfun_uminus",
     "blinfun_of_cblinfun (- ?f) = - blinfun_of_cblinfun ?f",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Complex_Bounded_Linear_Function.one_dim_apply_is_times",
     "cblinfun_compose ?A ?B = ?A * ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Bounded_Linear_Function.one_dim_cblinfun_compose_commute",
     "cblinfun_compose ?a ?b = cblinfun_compose ?b ?a",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Complex_Bounded_Linear_Function.one_dim_iso_adjoint",
     "one_dim_iso (adj ?A) = adj (one_dim_iso ?A)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.vector_to_cblinfun_comp_one",
     "cblinfun_compose (vector_to_cblinfun ?s) 1 = vector_to_cblinfun ?s",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Bounded_Linear_Function0.cstrong_operator_topology_continuous_evaluation",
     "continuous_map cstrong_operator_topology euclidean
       (%f. cblinfun_apply f ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_hole 1)),
           t_empty)
         )),
    ("Complex_Bounded_Linear_Function.of_complex_cblinfun_apply",
     "cblinfun_apply (of_complex ?x) ?y = ?x *\<^sub>C ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Bounded_Linear_Function.one_dim_positive",
     "(0 <= ?A) = (0 <= one_dim_iso ?A)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.Proj_ortho_compl",
     "Proj (- ?X) = id_cblinfun - Proj ?X",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0),
         template_app (template_hole 3, template_var 0)))),
    ("Complex_Bounded_Linear_Function.Proj_idempotent",
     "cblinfun_compose (Proj ?M) (Proj ?M) = Proj ?M",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Bounded_Linear_Function.butterfly_adjoint",
     "adj (butterfly ?\<psi> ?\<phi>) = butterfly ?\<phi> ?\<psi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Complex_Bounded_Linear_Function.cblinfun_apply_in_image",
     "cblinfun_apply ?A ?\<psi> : space_as_set (cblinfun_image ?A \<top>)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 0)),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)))
         )),
    ("Complex_Bounded_Linear_Function.is_Proj_complement",
     "is_Proj ?P ==> is_Proj (id_cblinfun - ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("Complex_Bounded_Linear_Function.is_proj_selfadj",
     "is_Proj ?P ==> adj ?P = ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Complex_Bounded_Linear_Function.scaleC_1_apply",
     "cblinfun_apply (?x *\<^sub>C 1) ?y = ?x *\<^sub>C ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Bounded_Linear_Function.scaleC_of_complex",
     "?x *\<^sub>C of_complex ?y = of_complex (?x * ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.vector_to_cblinfun_apply_one_dim",
     "cblinfun_apply (vector_to_cblinfun ?\<phi>) ?\<gamma> =
      one_dim_iso ?\<gamma> *\<^sub>C ?\<phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 1))),
    ("Complex_Bounded_Linear_Function.unitary_twosided_isometry",
     "unitary ?U = (isometry ?U & isometry (adj ?U))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Bounded_Linear_Function.one_dim_loewner_order",
     "(?B <= ?A) = (one_dim_iso ?B <= one_dim_iso ?A)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.bifunctional_apply",
     "cblinfun_apply (cblinfun_apply bifunctional ?x) ?f =
      cblinfun_apply ?f ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Complex_Bounded_Linear_Function.blinfun_of_cblinfun_scaleC",
     "blinfun_of_cblinfun (?c *\<^sub>C ?f) =
      ?c *\<^sub>C blinfun_of_cblinfun ?f",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Bounded_Linear_Function.blinfun_of_cblinfun_scaleR",
     "blinfun_of_cblinfun (?c *\<^sub>R ?f) =
      ?c *\<^sub>R blinfun_of_cblinfun ?f",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Bounded_Linear_Function.image_vector_to_cblinfun",
     "cblinfun_image (vector_to_cblinfun ?x) \<top> = ccspan {?x}",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 0)),
         template_hole 3),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Complex_Bounded_Linear_Function.vector_to_cblinfun_cblinfun_apply",
     "vector_to_cblinfun (cblinfun_apply ?A ?\<psi>) =
      cblinfun_compose ?A (vector_to_cblinfun ?\<psi>)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.vector_to_cblinfun_scaleC",
     "vector_to_cblinfun (?a *\<^sub>C ?\<psi>) =
      ?a *\<^sub>C vector_to_cblinfun ?\<psi>",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Bounded_Linear_Function.scaleR_adj",
     "adj (?a *\<^sub>R ?A) = ?a *\<^sub>R adj ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Bounded_Linear_Function.is_Proj_idempotent",
     "is_Proj ?P ==> cblinfun_compose ?P ?P = ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 0),
         template_var 0))),
    ("Complex_Bounded_Linear_Function.Proj_range_closed",
     "is_Proj ?P ==> closed (range (cblinfun_apply ?P))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0))
           ))),
    ("Complex_Bounded_Linear_Function.unitary_range",
     "unitary ?U ==> cblinfun_image ?U \<top> = \<top>",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0))),
    ("Complex_Bounded_Linear_Function0.bounded_clinear_CBlinfun_apply",
     "bounded_clinear ?f ==> cblinfun_apply (CBlinfun ?f) = ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Complex_Bounded_Linear_Function.positive_hermitianI",
     "0 <= ?A ==> ?A = adj ?A",
     template_implication
      ([template_inequation (less_equals, template_hole 2, template_var 0)],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.isometry_vector_to_cblinfun",
     "norm ?x = 1 ==> isometry (vector_to_cblinfun ?x)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Bounded_Linear_Function.one_dim_iso_comp_distr_times",
     "one_dim_iso (cblinfun_compose ?a ?b) =
      one_dim_iso ?a * one_dim_iso ?b",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.vector_to_cblinfun_adj_apply",
     "cblinfun_apply (adj (vector_to_cblinfun ?\<psi>)) ?\<phi> =
      of_complex (?\<psi> \<bullet>\<^sub>C ?\<phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.norm_sandwich",
     "norm (sandwich ?A) = (norm ?A)\<^sup>2",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Complex_Bounded_Linear_Function.norm_butterfly",
     "norm (butterfly ?\<psi> ?\<phi>) = norm ?\<psi> * norm ?\<phi>",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.blinfun_of_cblinfun_minus",
     "blinfun_of_cblinfun (?f - ?g) =
      blinfun_of_cblinfun ?f - blinfun_of_cblinfun ?g",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Bounded_Linear_Function.blinfun_of_cblinfun_cblinfun_compose",
     "blinfun_of_cblinfun (cblinfun_compose ?f ?g) =
      blinfun_of_cblinfun ?f o\<^sub>L blinfun_of_cblinfun ?g",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_image_ccspan",
     "cblinfun_image ?A (ccspan ?G) = ccspan (cblinfun_apply ?A ` ?G)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.one_dim_iso_comp_distr",
     "one_dim_iso (cblinfun_compose ?a ?b) =
      cblinfun_compose (one_dim_iso ?a) (one_dim_iso ?b)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.vector_to_cblinfun_add",
     "vector_to_cblinfun (?x + ?y) =
      vector_to_cblinfun ?x + vector_to_cblinfun ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Bounded_Linear_Function.scaleC_adj",
     "adj (?a *\<^sub>C ?A) = cnj ?a *\<^sub>C adj ?A",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Complex_Bounded_Linear_Function.adj_plus",
     "adj (?A + ?B) = adj ?A + adj ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Bounded_Linear_Function0.cblinfun_of_matrix_minus",
     "cblinfun_of_matrix ?x - cblinfun_of_matrix ?y =
      cblinfun_of_matrix (?x - ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function0.cblinfun_of_matrix_works",
     "cblinfun_of_matrix (%i j. i \<bullet>\<^sub>C cblinfun_apply ?f j) =
      ?f",
     template_equation
      (template_app (template_hole 2, t_empty), template_var 0)),
    ("Complex_Bounded_Linear_Function.adj_cblinfun_compose",
     "adj (cblinfun_compose ?A ?B) = cblinfun_compose (adj ?B) (adj ?A)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Bounded_Linear_Function0.norm_cblinfun_ceuclidean_le",
     "norm ?a <= (SUM x:CBasis. norm (cblinfun_apply ?a x))",
     template_inequation
      (less_equals, template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_hole 0))),
    ("Complex_Bounded_Linear_Function0.norm_cblinfun",
     "norm (cblinfun_apply ?f ?x) <= norm ?f * norm ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function0.norm_cblinfun_compose",
     "norm (cblinfun_compose ?f ?g) <= norm ?f * norm ?g",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.Proj_on_own_range",
     "is_Proj ?P ==> Proj (cblinfun_image ?P \<top>) = ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_var 0))),
    ("Complex_Bounded_Linear_Function.cblinfun_inv_left",
     "iso_cblinfun ?A ==>
      cblinfun_compose (cblinfun_inv ?A) ?A = id_cblinfun",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Complex_Bounded_Linear_Function.cblinfun_inv_right",
     "iso_cblinfun ?A ==>
      cblinfun_compose ?A (cblinfun_inv ?A) = id_cblinfun",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Complex_Bounded_Linear_Function.range_adjoint_isometry",
     "isometry ?U ==> cblinfun_image (adj ?U) \<top> = \<top>",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("Complex_Bounded_Linear_Function.isometryD",
     "isometry ?U ==> cblinfun_compose (adj ?U) ?U = id_cblinfun",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Complex_Bounded_Linear_Function.unitary_surj",
     "unitary ?U ==> surj (cblinfun_apply ?U)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_hole 1),
         template_hole 0))),
    ("Complex_Bounded_Linear_Function.unitaryD1",
     "unitary ?U ==> cblinfun_compose (adj ?U) ?U = id_cblinfun",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_var 0),
         template_hole 0))),
    ("Complex_Bounded_Linear_Function.unitaryD2",
     "unitary ?U ==> cblinfun_compose ?U (adj ?U) = id_cblinfun",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Complex_Bounded_Linear_Function0.bounded_clinear_cblinfun_apply",
     "bounded_clinear ?g ==>
      bounded_clinear (%x. cblinfun_apply ?f (?g x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Bounded_Linear_Function.butterfly_is_Proj",
     "norm ?x = 1 ==> is_Proj (selfbutter ?x)",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 0), template_hole 2)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 0))
           ))),
    ("Complex_Bounded_Linear_Function.blinfun_of_cblinfun_inj",
     "blinfun_of_cblinfun ?f = blinfun_of_cblinfun ?g ==> ?f = ?g",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function.Proj_inj",
     "Proj ?X = Proj ?Y ==> ?X = ?Y",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function.riesz_frechet_representation_cblinfun_existence",
     "EX t. ALL x. cblinfun_apply ?f x = t \<bullet>\<^sub>C x",
     template_predicate (template_app (template_hole 4, t_empty))),
    ("Complex_Bounded_Linear_Function.butterfly_apply",
     "cblinfun_apply (butterfly ?\<psi> ?\<psi>') ?\<phi> =
      (?\<psi>' \<bullet>\<^sub>C ?\<phi>) *\<^sub>C ?\<psi>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 2))),
    ("Complex_Bounded_Linear_Function0.cblinfun_apply_cblinfun_compose",
     "cblinfun_apply (cblinfun_compose ?a ?b) ?c =
      cblinfun_apply ?a (cblinfun_apply ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.blinfun_compose_assoc",
     "?A o\<^sub>L ?B o\<^sub>L ?C = ?A o\<^sub>L (?B o\<^sub>L ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_image",
     "cblinfun_image (cblinfun_compose ?A ?B) ?S =
      cblinfun_image ?A (cblinfun_image ?B ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_assoc_left",
     "cblinfun_image ?A (cblinfun_image ?B ?S) =
      cblinfun_image (cblinfun_compose ?A ?B) ?S",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Complex_Bounded_Linear_Function.scaleC_cblinfun_image",
     "cblinfun_image (?\<alpha> *\<^sub>C ?A) ?S =
      ?\<alpha> *\<^sub>C cblinfun_image ?A ?S",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.sandwich_apply_adj",
     "cblinfun_apply (sandwich ?A) (adj ?B) =
      adj (cblinfun_apply (sandwich ?A) ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_assoc_left",
     "?a + (?b + ?c) = ?a + ?b + ?c",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Complex_Bounded_Linear_Function.cblinfun_assoc_right",
     "?a + ?b + ?c = ?a + (?b + ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.butterfly_scaleC_left",
     "butterfly (?c *\<^sub>C ?\<psi>) ?\<phi> =
      ?c *\<^sub>C butterfly ?\<psi> ?\<phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_comp_butterfly",
     "cblinfun_compose ?a (butterfly ?\<psi> ?\<phi>) =
      butterfly (cblinfun_apply ?a ?\<psi>) ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Complex_Bounded_Linear_Function.sandwich_apply",
     "cblinfun_apply (sandwich ?A) ?B =
      cblinfun_compose (cblinfun_compose ?A ?B) (adj ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_assoc",
     "cblinfun_compose (cblinfun_compose ?A ?B) ?C =
      cblinfun_compose ?A (cblinfun_compose ?B ?C)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_assoc_left",
     "cblinfun_compose ?A (cblinfun_compose ?B ?C) =
      cblinfun_compose (cblinfun_compose ?A ?B) ?C",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_scaleC_right",
     "cblinfun_compose ?A (?a *\<^sub>C ?B) =
      ?a *\<^sub>C cblinfun_compose ?A ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_scaleR_right",
     "cblinfun_compose ?A (?a *\<^sub>R ?B) =
      ?a *\<^sub>R cblinfun_compose ?A ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_scaleC_left",
     "cblinfun_compose (?a *\<^sub>C ?A) ?B =
      ?a *\<^sub>C cblinfun_compose ?A ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_scaleR_left",
     "cblinfun_compose (?a *\<^sub>R ?A) ?B =
      ?a *\<^sub>R cblinfun_compose ?A ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.positive_cblinfun_squareI",
     "?A = cblinfun_compose (adj ?B) ?B ==> 0 <= ?A",
     template_implication
      ([template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0)),
            template_var 0))],
       template_inequation (less_equals, template_hole 0, template_var 1))),
    ("Complex_Bounded_Linear_Function.norm_AAadj",
     "norm (cblinfun_compose ?A (adj ?A)) = (norm ?A)\<^sup>2",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Complex_Bounded_Linear_Function.cinner_adj_right",
     "?x \<bullet>\<^sub>C cblinfun_apply (adj ?G) ?y =
      cblinfun_apply ?G ?x \<bullet>\<^sub>C ?y",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2)),
         template_var 0))),
    ("Complex_Bounded_Linear_Function.cinner_adj_left",
     "cblinfun_apply (adj ?G) ?x \<bullet>\<^sub>C ?y =
      ?x \<bullet>\<^sub>C cblinfun_apply ?G ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.vector_to_cblinfun_adj_comp_vector_to_cblinfun",
     "cblinfun_compose (adj (vector_to_cblinfun ?\<psi>))
       (vector_to_cblinfun ?\<phi>) =
      (?\<psi> \<bullet>\<^sub>C ?\<phi>) *\<^sub>C id_cblinfun",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1))),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Complex_Bounded_Linear_Function.butterfly_scaleC_right",
     "butterfly ?\<psi> (?c *\<^sub>C ?\<phi>) =
      cnj ?c *\<^sub>C butterfly ?\<psi> ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.butterfly_scaleR_right",
     "butterfly ?\<psi> (?r *\<^sub>R ?\<phi>) =
      complex_of_real ?r *\<^sub>C butterfly ?\<psi> ?\<phi>",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.butterfly_scaleR_left",
     "butterfly (?r *\<^sub>R ?\<psi>) ?\<phi> =
      complex_of_real ?r *\<^sub>C butterfly ?\<psi> ?\<phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.butterfly_comp_cblinfun",
     "cblinfun_compose (butterfly ?\<psi> ?\<phi>) ?a =
      butterfly ?\<psi> (cblinfun_apply (adj ?a) ?\<phi>)",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_var 1)))),
    ("Complex_Bounded_Linear_Function.cblinfun_image_mono",
     "?S <= ?T ==> cblinfun_image ?A ?S <= cblinfun_image ?A ?T",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Complex_Bounded_Linear_Function.kernel_memberI",
     "cblinfun_apply ?A ?x = (0::?'a) ==> ?x : space_as_set (kernel ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("Complex_Bounded_Linear_Function0.cblinfun_bij1",
     "cblinfun_compose ?f ?g = id_cblinfun ==> bij (cblinfun_apply ?f)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_hole 0),
             template_hole 0)
           ))),
    ("Complex_Bounded_Linear_Function0.cblinfun_bij2",
     "cblinfun_compose ?f ?g = id_cblinfun ==> bij (cblinfun_apply ?g)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0),
             template_hole 0)
           ))),
    ("Complex_Bounded_Linear_Function.kernel_memberD",
     "?x : space_as_set (kernel ?A) ==> cblinfun_apply ?A ?x = (0::?'b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Complex_Bounded_Linear_Function.isometry_cblinfun_compose",
     "[| isometry ?A; isometry ?B |] ==> isometry (cblinfun_compose ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex_Bounded_Linear_Function.unitary_cblinfun_compose",
     "[| unitary ?A; unitary ?B |] ==> unitary (cblinfun_compose ?A ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex_Bounded_Linear_Function.is_Proj_algebraic",
     "is_Proj ?P = (cblinfun_compose ?P ?P = ?P & ?P = adj ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 0)),
                 template_var 0)),
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Complex_Bounded_Linear_Function.cblinfun_image_sup",
     "cblinfun_image ?U (?A \<squnion> ?B) =
      cblinfun_image ?U ?A \<squnion> cblinfun_image ?U ?B",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.butterfly_add_right",
     "butterfly ?a (?b + ?b') = butterfly ?a ?b + butterfly ?a ?b'",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.butterfly_add_left",
     "butterfly (?a + ?a') ?b = butterfly ?a ?b + butterfly ?a' ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_add_right",
     "cblinfun_compose ?a (?b + ?c) =
      cblinfun_compose ?a ?b + cblinfun_compose ?a ?c",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_compose_add_left",
     "cblinfun_compose (?a + ?b) ?c =
      cblinfun_compose ?a ?c + cblinfun_compose ?b ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_plus_image_distr",
     "cblinfun_image (?A + ?B) ?S
      <= cblinfun_image ?A ?S \<squnion> cblinfun_image ?B ?S",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.isometry_cblinfun_image_inf_distrib'",
     "cblinfun_image ?U (?B \<sqinter> ?C)
      <= cblinfun_image ?U ?B \<sqinter> cblinfun_image ?U ?C",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function0.conorm_componentwise",
     "bounded_clinear ?f ==> onorm ?f <= (SUM i:CBasis. norm (?f i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Complex_Bounded_Linear_Function.kernel_scaleC",
     "?a ~= 0 ==> kernel (?a *\<^sub>C ?A) = kernel ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Complex_Bounded_Linear_Function.surj_isometry_is_unitary",
     "[| isometry ?U; cblinfun_image ?U \<top> = \<top> |] ==> unitary ?U",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2),
          template_hole 1)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function0.norm_cblinfun_of_matrix",
     "norm (cblinfun_of_matrix ?a)
      <= (SUM i:CBasis. SUM j:CBasis. cmod (?a i j))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app (template_hole 4, t_empty), template_hole 0))),
    ("Complex_Bounded_Linear_Function.Proj_sandwich",
     "isometry ?A ==>
      cblinfun_apply (sandwich ?A) (Proj ?S) = Proj (cblinfun_image ?A ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Complex_Bounded_Linear_Function0.CBlinfun_eq_matrix",
     "bounded_clinear ?f ==>
      CBlinfun ?f = cblinfun_of_matrix (%i j. i \<bullet>\<^sub>C ?f j)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, t_empty)))),
    ("Complex_Bounded_Linear_Function0.continuous_cblinfun_matrix",
     "continuous ?F ?f ==>
      continuous ?F (%x. cblinfun_apply (?f x) ?j \<bullet>\<^sub>C ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3), t_empty)
           ))),
    ("Complex_Bounded_Linear_Function0.continuous_on_cblinfun_matrix",
     "continuous_on ?S ?f ==>
      continuous_on ?S (%x. cblinfun_apply (?f x) ?j \<bullet>\<^sub>C ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3), t_empty)
           ))),
    ("Complex_Bounded_Linear_Function.ccsubspace_supI_via_Proj",
     "cblinfun_image (Proj (- ?C)) ?A <= ?B ==> ?A <= ?B \<squnion> ?C",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 2))),
            template_var 1),
          template_var 0)],
       template_inequation
        (less_equals, template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Complex_Bounded_Linear_Function.positive_cblinfunI",
     "(!!x. 0 <= x \<bullet>\<^sub>C cblinfun_apply ?A x) ==> 0 <= ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation (less_equals, template_hole 0, template_var 0))),
    ("Complex_Bounded_Linear_Function0.cblinfun_eqI",
     "(!!i. cblinfun_apply ?x i = cblinfun_apply ?y i) ==> ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function.cblinfun_extension_exists_finite_dim",
     "[| cindependent ?S; cspan ?S = UNIV |]
      ==> cblinfun_extension_exists ?S ?\<phi>",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            ),
        template_equation
         (template_app (template_hole 2, template_var 1), template_hole 1)],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function.butterfly_comp_butterfly",
     "cblinfun_compose (butterfly ?\<psi>1.0 ?\<psi>2.0)
       (butterfly ?\<psi>3.0 ?\<psi>4.0) =
      (?\<psi>2.0 \<bullet>\<^sub>C ?\<psi>3.0) *\<^sub>C
      butterfly ?\<psi>1.0 ?\<psi>4.0",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.butterfly_eq_proj",
     "norm ?x = 1 ==> selfbutter ?x = proj ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 0), template_hole 6)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 0),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Complex_Bounded_Linear_Function.eigenspace_memberD",
     "?x : space_as_set (eigenspace ?e ?A) ==>
      cblinfun_apply ?A ?x = ?e *\<^sub>C ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 2)))),
    ("Complex_Bounded_Linear_Function.eigenspace_memberI",
     "cblinfun_apply ?A ?x = ?e *\<^sub>C ?x ==>
      ?x : space_as_set (eigenspace ?e ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 3, template_var 0),
            template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)))
           ))),
    ("Complex_Bounded_Linear_Function0.transfer_bounded_sesquilinear_bounded_antilinearI",
     "?g = (%i. cblinfun_apply (?f i)) ==>
      bounded_sesquilinear ?g = bounded_antilinear ?f",
     template_implication
      ([template_equation (template_var 1, t_empty)],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function0.transfer_bounded_cbilinear_bounded_clinearI",
     "?g = (%i. cblinfun_apply (?f i)) ==>
      bounded_cbilinear ?g = bounded_clinear ?f",
     template_implication
      ([template_equation (template_var 1, t_empty)],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_norm_geqI",
     "?K <= norm (cblinfun_apply ?f ?x) / norm ?x ==> ?K <= norm ?f",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0))),
            template_app (template_hole 1, template_var 0)))],
       template_inequation
        (less_equals, template_var 2,
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Bounded_Linear_Function.cinner_real_hermiteanI",
     "(!!\<psi>.
          \<psi> \<bullet>\<^sub>C cblinfun_apply ?A \<psi> : \<real>) ==>
      ?A = adj ?A",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.is_Proj_I",
     "[| cblinfun_compose ?P ?P = ?P; adj ?P = ?P |] ==> is_Proj ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 0), template_var 0),
          template_var 0),
        template_equation
         (template_app (template_hole 1, template_var 0), template_var 0)],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function0.continuous_on_cstrong_operator_topo_iff_coordinatewise",
     "continuous_map ?T cstrong_operator_topology ?f =
      (ALL x. continuous_map ?T euclidean (%y. cblinfun_apply (?f y) x))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 1), template_hole 5),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Complex_Bounded_Linear_Function.cblinfun_sum_image_distr",
     "cblinfun_image (sum ?A ?I) ?S
      <= (SUP i\<in>?I. cblinfun_image (?A i) ?S)",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1)),
         template_var 0),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complex_Bounded_Linear_Function0.onorm_cinner_right",
     "bounded_linear ?r ==>
      onorm (%x. ?f \<bullet>\<^sub>C ?r x) <= norm ?f * onorm ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Complex_Bounded_Linear_Function0.onorm_cinner_left",
     "bounded_linear ?r ==>
      onorm (%x. ?r x \<bullet>\<^sub>C ?f) <= onorm ?r * norm ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Bounded_Linear_Function.riesz_frechet_representation_cblinfun_norm",
     "(!!x. cblinfun_apply ?f x = ?t \<bullet>\<^sub>C x) ==>
      norm ?f = norm ?t",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_image_INF_leq",
     "cblinfun_image ?U (\<Sqinter> (range ?V))
      <= (INF i. cblinfun_image ?U (?V i))",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 5, template_var 1),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, t_empty), template_hole 2))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, t_empty), template_hole 2)))),
    ("Complex_Bounded_Linear_Function.isometry_cblinfun_image_inf_distrib",
     "isometry ?U ==>
      cblinfun_image ?U (?X \<sqinter> ?Y) =
      cblinfun_image ?U ?X \<sqinter> cblinfun_image ?U ?Y",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0))))),
    ("Complex_Bounded_Linear_Function.eigenspace_scaleC",
     "?a ~= 0 ==>
      eigenspace ?b (?a *\<^sub>C ?A) = eigenspace (?b / ?a) ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_eq_0_on_canonical_basis",
     "(!!u. u : set canonical_basis ==> cblinfun_apply ?f u = (0::?'b)) ==>
      ?f = 0",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Complex_Bounded_Linear_Function.cblinfun_cinner_eqI",
     "(!!\<psi>.
          \<psi> \<bullet>\<^sub>C cblinfun_apply ?A \<psi> =
          \<psi> \<bullet>\<^sub>C cblinfun_apply ?B \<psi>) ==>
      ?A = ?B",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function.cblinfun_extension_existsI",
     "(!!x. x : ?S ==> cblinfun_apply ?B x = ?\<phi> x) ==>
      cblinfun_extension_exists ?S ?\<phi>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function0.conorm_componentwise_le",
     "[| bounded_clinear ?f; (SUM i:CBasis. norm (?f i)) <= ?z |]
      ==> onorm ?f <= ?z",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, t_empty), template_hole 1),
          template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Complex_Bounded_Linear_Function.cblinfun_extension_apply",
     "[| cblinfun_extension_exists ?S ?f; ?v : ?S |]
      ==> cblinfun_apply (cblinfun_extension ?S ?f) ?v = ?f ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_inv_uniq",
     "[| cblinfun_compose ?A ?B = id_cblinfun;
         cblinfun_compose ?B ?A = id_cblinfun |]
      ==> cblinfun_inv ?A = ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 0),
          template_hole 5),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0), template_var 1),
          template_hole 2)],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Bounded_Linear_Function0.cblinfun_euclidean_eqI",
     "(!!i. i : CBasis ==> cblinfun_apply ?x i = cblinfun_apply ?y i) ==>
      ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function0.continuous_cblinfun_componentwiseI1",
     "(!!i. i : CBasis ==> continuous ?F (%x. cblinfun_apply (?f x) i)) ==>
      continuous ?F ?f",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function0.continuous_on_cblinfun_componentwise",
     "(!!i. i : CBasis ==>
            continuous_on ?s (%x. cblinfun_apply (?f x) i)) ==>
      continuous_on ?s ?f",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function.Proj_on_own_range'",
     "[| cblinfun_compose ?P ?P = ?P; ?P = adj ?P |]
      ==> Proj (cblinfun_image ?P \<top>) = ?P",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 0), template_var 0),
          template_var 0),
        template_equation
         (template_var 0, template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0)),
         template_var 0))),
    ("Complex_Bounded_Linear_Function0.cblinfun_of_matrix_apply",
     "cblinfun_apply (cblinfun_of_matrix ?a) ?x =
      (SUM i:CBasis.
          SUM j:CBasis. (j \<bullet>\<^sub>C ?x * ?a i j) *\<^sub>C i)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 6, t_empty), template_hole 0))),
    ("Complex_Bounded_Linear_Function.cblinfun_eq_on_canonical_basis",
     "(!!u. u : set canonical_basis ==>
            cblinfun_apply ?f u = cblinfun_apply ?g u) ==>
      ?f = ?g",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function.cblinfun_fixes_range",
     "[| cblinfun_compose ?A ?B = ?B;
         ?\<psi> : space_as_set (cblinfun_image ?B \<top>) |]
      ==> cblinfun_apply ?A ?\<psi> = ?\<psi>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2), template_var 1),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_hole 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 0))),
    ("Complex_Bounded_Linear_Function.cinner_sup_norm_cblinfun",
     "norm ?A =
      (SUP (\<psi>, \<phi>).
          cmod (\<psi> \<bullet>\<^sub>C cblinfun_apply ?A \<phi>) /
          (norm \<psi> * norm \<phi>))",
     template_equation
      (template_app (template_hole 11, template_var 0),
       template_app
        (template_hole 10,
         template_app
          (template_app
            (template_hole 9, template_app (template_hole 8, t_empty)),
           template_hole 0)))),
    ("Complex_Bounded_Linear_Function.cblinfun_image_INF_eq",
     "isometry ?U ==>
      cblinfun_image ?U (\<Sqinter> (range ?V)) =
      (INF i. cblinfun_image ?U (?V i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_hole 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_hole 2))))),
    ("Complex_Bounded_Linear_Function.cblinfun_norm_approx_witness",
     "0 < ?\<epsilon> ==>
      EX \<psi>.
         norm ?A - ?\<epsilon> <= norm (cblinfun_apply ?A \<psi>) &
         norm \<psi> = 1",
     template_implication
      ([template_inequation (less_than, template_hole 10, template_var 1)],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Complex_Bounded_Linear_Function.cblinfun_norm_approx_witness_mult",
     "?\<epsilon> < 1 ==>
      EX \<psi>.
         norm ?A * ?\<epsilon> <= norm (cblinfun_apply ?A \<psi>) &
         norm \<psi> = 1",
     template_implication
      ([template_inequation (less_than, template_var 1, template_hole 9)],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Complex_Bounded_Linear_Function.inj_selfbutter_upto_phase",
     "selfbutter ?x = selfbutter ?y ==>
      EX c. cmod c = 1 & ?x = c *\<^sub>C ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 1), template_var 1),
          template_app
           (template_app (template_hole 7, template_var 0),
            template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Complex_Bounded_Linear_Function.adjoint_eqI",
     "(!!x y.
          cblinfun_apply ?F x \<bullet>\<^sub>C y =
          x \<bullet>\<^sub>C cblinfun_apply ?G y) ==>
      ?F = adj ?G",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function0.norm_cblinfun_bound",
     "[| 0 <= ?b; !!x. norm (cblinfun_apply ?f x) <= ?b * norm x |]
      ==> norm ?f <= ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 1),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("Complex_Bounded_Linear_Function.blinfun_of_cblinfun_inv",
     "(!!c x. ?f *\<^sub>v c *\<^sub>C x = c *\<^sub>C (?f *\<^sub>v x)) ==>
      EX g. blinfun_of_cblinfun g = ?f",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("Complex_Bounded_Linear_Function.cblinfun_eq_0_on_UNIV_span",
     "[| cspan ?basis = UNIV;
         !!s. s : ?basis ==> cblinfun_apply ?F s = (0::?'b) |]
      ==> ?F = 0",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1), template_hole 7),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Complex_Bounded_Linear_Function0.bounded_clinear_function_uniform_limit_intros",
     "uniform_limit ?X ?g ?l ?F ==>
      uniform_limit ?X (%a b. cblinfun_apply (?g a b) ?b)
       (%a. cblinfun_apply (?l a) ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 3), t_empty)),
             template_var 1)
           ))),
    ("Complex_Bounded_Linear_Function.cbanach_steinhaus",
     "(!!x. EX M. ALL n. norm (cblinfun_apply (?F n) x) <= M) ==>
      EX M. ALL n. norm (?F n) <= M",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Complex_Bounded_Linear_Function0.ctendsto_componentwise1",
     "(!!j. j : CBasis ==>
            ((%n. cblinfun_apply (?b n) j) \<longlongrightarrow>
             cblinfun_apply ?a j)
             ?F) ==>
      (?b \<longlongrightarrow> ?a) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function.cblinfun_eq_on_UNIV_span",
     "[| cspan ?basis = UNIV;
         !!s. s : ?basis ==> cblinfun_apply ?F s = cblinfun_apply ?G s |]
      ==> ?F = ?G",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2), template_hole 5),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function.cblinfun_eq_0_on_span",
     "[| ?x : cspan ?S; !!s. s : ?S ==> cblinfun_apply ?F s = (0::?'b) |]
      ==> cblinfun_apply ?F ?x = (0::?'b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app (template_hole 4, template_var 1))
            ),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 2),
         template_hole 0))),
    ("Complex_Bounded_Linear_Function.riesz_frechet_representation_cblinfun_unique",
     "[| !!x. cblinfun_apply ?f x = ?t \<bullet>\<^sub>C x;
         !!x. cblinfun_apply ?f x = ?u \<bullet>\<^sub>C x |]
      ==> ?t = ?u",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function.cblinfun_eq_gen_eqI",
     "[| !!x. x : ?G ==> cblinfun_apply ?A x = cblinfun_apply ?B x;
         ccspan ?G = \<top> |]
      ==> ?A = ?B",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_equation
         (template_app (template_hole 2, template_var 2), template_hole 1)],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function0.bounded_clinear_function_uniform_limit_intros",
     "uniform_limit ?X ?g ?l ?F ==>
      uniform_limit ?X
       (%a b. cblinfun_apply (?g a b) ?j \<bullet>\<^sub>C ?i)
       (%a. cblinfun_apply (?l a) ?j \<bullet>\<^sub>C ?i) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 0, template_var 4), t_empty)),
             template_var 2)
           ))),
    ("Complex_Bounded_Linear_Function.cinner_canonical_basis_eq_0",
     "(!!u v.
          [| u : set canonical_basis; v : set canonical_basis |]
          ==> is_orthogonal v (cblinfun_apply ?F u)) ==>
      ?F = 0",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty))],
       template_equation (template_var 0, template_hole 0))),
    ("Complex_Bounded_Linear_Function0.continuous_cblinfun_componentwiseI",
     "(!!i j.
          [| i : CBasis; j : CBasis |]
          ==> continuous ?F
               (%x. cblinfun_apply (?f x) j \<bullet>\<^sub>C i)) ==>
      continuous ?F ?f",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function0.continuous_on_cblinfun_of_matrix",
     "(!!i j.
          [| i : CBasis; j : CBasis |]
          ==> continuous_on ?S (%s. ?g s i j)) ==>
      continuous_on ?S (%s. cblinfun_of_matrix (?g s))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Complex_Bounded_Linear_Function.cblinfun_eq_on_span",
     "[| ?x : cspan ?S;
         !!s. s : ?S ==> cblinfun_apply ?F s = cblinfun_apply ?G s |]
      ==> cblinfun_apply ?F ?x = cblinfun_apply ?G ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_app (template_hole 3, template_var 2))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 3)))),
    ("Complex_Bounded_Linear_Function.cblinfun_image_eq",
     "[| !!x. x : ?G ==> cblinfun_apply ?A x = cblinfun_apply ?B x;
         ?S <= ccspan ?G |]
      ==> cblinfun_image ?A ?S = cblinfun_image ?B ?S",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_inequation
         (less_equals, template_var 0,
          template_app (template_hole 2, template_var 3))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function0.bounded_clinear_function_uniform_limit_intros",
     "[| bounded_clinear ?ga; uniform_limit ?X ?g ?l ?F |]
      ==> uniform_limit ?X (%a b. cblinfun_apply ?f (?ga (?g a b)))
           (%a. cblinfun_apply ?f (?ga (?l a))) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 3), t_empty)),
             template_var 1)
           ))),
    ("Complex_Bounded_Linear_Function0.cstrong_operator_topology_basis",
     "[| finite ?I; !!i. i : ?I ==> open (?U i) |]
      ==> openin cstrong_operator_topology
           {f. ALL i:?I. cblinfun_apply f (?x i) : ?U i}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, t_empty))
           ))),
    ("Complex_Bounded_Linear_Function.cblinfun_eq_on",
     "[| !!x. x : ?G ==> cblinfun_apply ?A x = cblinfun_apply ?B x;
         ?t : closure (cspan ?G) |]
      ==> cblinfun_apply ?A ?t = cblinfun_apply ?B ?t",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 3)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function.cinner_canonical_basis_eq",
     "(!!u v.
          [| u : set canonical_basis; v : set canonical_basis |]
          ==> v \<bullet>\<^sub>C cblinfun_apply ?F u =
              v \<bullet>\<^sub>C cblinfun_apply ?G u) ==>
      ?F = ?G",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function.cinner_canonical_basis_eq'",
     "(!!u v.
          [| u : set canonical_basis; v : set canonical_basis |]
          ==> cblinfun_apply ?F u \<bullet>\<^sub>C v =
              cblinfun_apply ?G u \<bullet>\<^sub>C v) ==>
      ?F = ?G",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function0.norm_cblinfun_eqI",
     "[| ?n <= norm (cblinfun_apply ?f ?x) / norm ?x;
         !!x. norm (cblinfun_apply ?f x) <= ?n * norm x; 0 <= ?n |]
      ==> norm ?f = ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0))),
            template_app (template_hole 5, template_var 0))),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_inequation (less_equals, template_hole 2, template_var 2)],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 2))),
    ("Complex_Bounded_Linear_Function.Proj_orthog_ccspan_union",
     "(!!x y. [| x : ?X; y : ?Y |] ==> is_orthogonal x y) ==>
      Proj (ccspan (?X Un ?Y)) = Proj (ccspan ?X) + Proj (ccspan ?Y)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)))))),
    ("Complex_Bounded_Linear_Function.orthogonal_on_basis_is_isometry",
     "[| ccspan ?B = \<top>;
         !!b c.
            [| b : ?B; c : ?B |]
            ==> cblinfun_apply ?U b \<bullet>\<^sub>C cblinfun_apply ?U c =
                b \<bullet>\<^sub>C c |]
      ==> isometry ?U",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1), template_hole 7),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function0.tendsto_cblinfun_of_matrix",
     "(!!i j.
          [| i : CBasis; j : CBasis |]
          ==> ((%n. ?b n i j) \<longlongrightarrow> ?a i j) ?F) ==>
      ((%n. cblinfun_of_matrix (?b n)) \<longlongrightarrow>
       cblinfun_of_matrix ?a)
       ?F",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function0.ctendsto_componentwise",
     "(!!i j.
          [| i : CBasis; j : CBasis |]
          ==> ((%n. cblinfun_apply (?b n) j \<bullet>\<^sub>C
                    i) \<longlongrightarrow>
               cblinfun_apply ?a j \<bullet>\<^sub>C i)
               ?F) ==>
      (?b \<longlongrightarrow> ?a) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function.cblinfun_image_INF_eq_general",
     "[| cblinfun_compose (cblinfun_compose ?Uinv ?U) ?Uinv = ?Uinv;
         cblinfun_compose (cblinfun_compose ?U ?Uinv) ?U = ?U;
         !!i. ?V i <= cblinfun_image ?Uinv \<top> |]
      ==> cblinfun_image ?U (\<Sqinter> (range ?V)) =
          (INF i. cblinfun_image ?U (?V i))",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 15,
              template_app
               (template_app (template_hole 14, template_var 2),
                template_var 1)),
            template_var 2),
          template_var 2),
        template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_var 1),
                template_var 2)),
            template_var 1),
          template_var 1),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_hole 2))),
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, t_empty), template_hole 2))))),
    ("Complex_Bounded_Linear_Function.cblinfun_cspan_UNIV",
     "[| cspan ?basisA = UNIV; cspan ?basisB = UNIV;
         !!a b.
            [| a : ?basisA; b : ?basisB |]
            ==> EX F:?basis.
                   ALL a':?basisA.
                      cblinfun_apply F a' =
                      (if a' = a then b else (0::?'b)) |]
      ==> cspan ?basis = UNIV",
     template_implication
      ([template_equation
         (template_app (template_hole 18, template_var 2),
          template_hole 17),
        template_equation
         (template_app (template_hole 15, template_var 1),
          template_hole 14),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Complex_Bounded_Linear_Function.cspan_butterfly_UNIV",
     "[| cspan ?basisA = UNIV; cspan ?basisB = UNIV; is_ortho_set ?basisB;
         !!b. b : ?basisB ==> norm b = 1 |]
      ==> cspan {butterfly a b |a b. a : ?basisA & b : ?basisB} = UNIV",
     template_implication
      ([template_equation
         (template_app (template_hole 20, template_var 1),
          template_hole 19),
        template_equation
         (template_app (template_hole 17, template_var 0),
          template_hole 16),
        template_predicate
         (template_app (template_hole 15, template_var 0)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_equation
        (template_app
          (template_hole 8, template_app (template_hole 7, t_empty)),
         template_hole 0))),
    ("Complex_Bounded_Linear_Function.cindependent_butterfly",
     "[| is_ortho_set ?basisA; is_ortho_set ?basisB;
         !!a. a : ?basisA ==> norm a = 1; !!b. b : ?basisB ==> norm b = 1 |]
      ==> cindependent {butterfly a b |a b. a : ?basisA & b : ?basisB}",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 1)),
        template_predicate
         (template_app (template_hole 16, template_var 0)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 6, template_app (template_hole 5, t_empty))
               )
           ))),
    ("Complex_Bounded_Linear_Function.clinear_eq_butterflyI",
     "[| clinear ?F; clinear ?G; cspan ?basisA = UNIV; cspan ?basisB = UNIV;
         is_ortho_set ?basisA; is_ortho_set ?basisB;
         !!a b.
            [| a : ?basisA; b : ?basisB |]
            ==> ?F (butterfly a b) = ?G (butterfly a b);
         !!b. b : ?basisB ==> norm b = 1 |]
      ==> ?F = ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 18, template_var 3)),
        template_predicate
         (template_app (template_hole 18, template_var 2)),
        template_equation
         (template_app (template_hole 16, template_var 1),
          template_hole 15),
        template_equation
         (template_app (template_hole 13, template_var 0),
          template_hole 12),
        template_predicate
         (template_app (template_hole 11, template_var 1)),
        template_predicate
         (template_app (template_hole 10, template_var 0)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation (template_var 3, template_var 2))),
    ("Complex_Bounded_Linear_Function.cblinfun_extension_exists_bounded_dense",
     "[| csubspace ?S; closure ?S = UNIV;
         !!x y. [| x : ?S; y : ?S |] ==> ?f (x + y) = ?f x + ?f y;
         !!c x y. x : ?S ==> ?f (c *\<^sub>C x) = c *\<^sub>C ?f x;
         !!x. x : ?S ==> norm (?f x) <= ?B * norm x |]
      ==> cblinfun_extension_exists ?S ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_equation
         (template_app (template_hole 15, template_var 2),
          template_hole 14),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           )))]
