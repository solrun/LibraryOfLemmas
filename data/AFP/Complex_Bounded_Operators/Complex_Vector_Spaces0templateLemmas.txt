   [("Complex_Vector_Spaces0.closed_complex_atLeast", "closed {?a..}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Vector_Spaces0.closed_complex_atMost", "closed {..?a}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Vector_Spaces0.cspan_0", "(0::?'a) : span ?S",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Vector_Spaces0.Complexs_of_complex",
     "of_complex ?r : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces0.Complexs_of_int", "of_int ?z : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces0.Complexs_of_nat", "of_nat ?n : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces0.Complexs_numeral", "numeral ?w : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces0.closed_complex_atLeastAtMost",
     "closed {?a..?b}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Complex_Vector_Spaces0.bounded_clinear_divide",
     "bounded_clinear (%x. x / ?y)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.bounded_clinear_scaleC_right",
     "bounded_clinear ((*\<^sub>C) ?c)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.bounded_clinear_mult_left",
     "bounded_clinear (%x. x * ?y)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.bounded_clinear_mult_right",
     "bounded_clinear ((*) ?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.bounded_clinear_scaleC_left",
     "bounded_clinear (%c. c *\<^sub>C ?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.clinear_scaleC_left",
     "clinear (%r. r *\<^sub>C ?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.scaleC_zero_left", "0 *\<^sub>C ?x = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Complex_Vector_Spaces0.scaleC_zero_right",
     "?a *\<^sub>C (0::?'a) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Complex_Vector_Spaces0.clinear_scaleC", "linear ((*\<^sub>R) ?c)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.clinear_times_of_complex",
     "clinear (%x. ?a * of_complex x)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Complex_Vector_Spaces0.of_complex_of_int_eq",
     "of_complex (of_int ?z) = of_int ?z",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_of_nat_eq",
     "of_complex (of_nat ?n) = of_nat ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_numeral",
     "of_complex (numeral ?w) = numeral ?w",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.norm_of_complex",
     "norm (of_complex ?c) = cmod ?c",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.complex_Cauchy_convergent",
     "Cauchy ?X ==> convergent ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_minus1_left", "- 1 *\<^sub>C ?x = - ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_minus",
     "of_complex (- ?x) = - of_complex ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_inverse",
     "of_complex (inverse ?x) = inverse (of_complex ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.sgn_of_complex",
     "sgn (of_complex ?r) = of_complex (sgn ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.complex_sgn_eq",
     "sgn ?x = ?x / \<bar>?x\<bar>",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_conv_of_complex",
     "?r *\<^sub>C ?x = of_complex ?r * ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_neg_numeral",
     "of_complex (- numeral ?w) = - numeral ?w",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_eq_1_iff",
     "(of_complex ?x = (1::?'a)) = (?x = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Complex_Vector_Spaces0.of_complex_eq_0_iff",
     "(of_complex ?x = (0::?'a)) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Complex_Vector_Spaces0.czero_le_sgn_iff", "(0 <= sgn ?x) = (0 <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Complex_Vector_Spaces0.csgn_le_0_iff", "(sgn ?x <= 0) = (?x <= 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Complex_Vector_Spaces0.of_complex_in_Ints_iff",
     "(of_complex ?x : \<int>) = (?x : \<int>)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Complex_Vector_Spaces0.Complexs_minus_iff",
     "(- ?a : \<complex>) = (?a : \<complex>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Complex_Vector_Spaces0.Complexs_inverse_iff",
     "(inverse ?x : \<complex>) = (?x : \<complex>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Complex_Vector_Spaces0.scaleC_minus_right",
     "?a *\<^sub>C - ?x = - (?a *\<^sub>C ?x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_minus_left",
     "- ?a *\<^sub>C ?x = - (?a *\<^sub>C ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_2", "2 *\<^sub>C ?x = ?x + ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_power",
     "of_complex (?x ^ ?n) = of_complex ?x ^ ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_power_int",
     "of_complex (?x powi ?n) = of_complex ?x powi ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_eq_iff",
     "(of_complex ?x = of_complex ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Complex_Vector_Spaces0.dist_of_complex",
     "dist (of_complex ?x) (of_complex ?y) = dist ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Vector_Spaces0.bounded_clinear_minus",
     "bounded_clinear ?f ==> bounded_clinear (%x. - ?f x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.Complexs_minus",
     "?a : \<complex> ==> - ?a : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Complexs_inverse",
     "?a : \<complex> ==> inverse ?a : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Ints_of_complex",
     "?x : \<int> ==> of_complex ?x : \<int>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Complex_Vector_Spaces0.of_complex_diff",
     "of_complex (?x - ?y) = of_complex ?x - of_complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_add",
     "of_complex (?x + ?y) = of_complex ?x + of_complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_mult",
     "of_complex (?x * ?y) = of_complex ?x * of_complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_divide",
     "of_complex (?x / ?y) = of_complex ?x / of_complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.inverse_scaleC_distrib",
     "inverse (?a *\<^sub>C ?x) = inverse ?x /\<^sub>C ?a",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.sgn_scaleC",
     "sgn (?r *\<^sub>C ?x) = sgn ?r *\<^sub>C sgn ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.norm_of_complex_add1",
     "norm (of_complex ?x + (1::?'a)) = cmod (?x + 1)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_hole 3)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Complex_Vector_Spaces0.bounded_clinear_const_mult",
     "bounded_clinear ?g ==> bounded_clinear (%x. ?x * ?g x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_mult_const",
     "bounded_clinear ?g ==> bounded_clinear (%x. ?g x * ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_const_scaleC",
     "bounded_clinear ?g ==> bounded_clinear (%x. ?c *\<^sub>C ?g x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_scaleC_const",
     "bounded_clinear ?g ==> bounded_clinear (%x. ?g x *\<^sub>C ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.Complexs_power",
     "?a : \<complex> ==> ?a ^ ?n : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.scaleC_left_commute",
     "?a *\<^sub>C ?b *\<^sub>C ?x = ?b *\<^sub>C ?a *\<^sub>C ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_half_double",
     "(1 / 2) *\<^sub>C (?a + ?a) = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)),
       template_var 0)),
    ("Complex_Vector_Spaces0.scaleC_collapse",
     "(1 - ?u) *\<^sub>C ?a + ?u *\<^sub>C ?a = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_var 0)),
    ("Complex_Vector_Spaces0.of_complex_sum",
     "of_complex (sum ?f ?s) = (SUM x:?s. of_complex (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_prod",
     "of_complex (prod ?f ?s) = (PROD x:?s. of_complex (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex_Vector_Spaces0.complex_bounded_clinear",
     "bounded_clinear ?f = (EX c. ?f = (%x. x * c))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Complex_Vector_Spaces0.of_complex_eq_minus_of_complex_iff",
     "(of_complex ?x = - of_complex ?y) = (?x = - ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 3, template_var 0))),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.minus_of_complex_eq_of_complex_iff",
     "(- of_complex ?x = of_complex ?y) = (- ?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Vector_Spaces0.norm_of_complex_diff",
     "norm (of_complex ?b - of_complex ?a) <= cmod (?b - ?a)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.norm_of_complex_addn",
     "norm (of_complex ?x + numeral ?b) = cmod (?x + numeral ?b)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Vector_Spaces0.injective_scaleC",
     "?c ~= 0 ==> inj ((*\<^sub>R) ?c)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0)
           ))),
    ("Complex_Vector_Spaces0.cspan_mul",
     "?x : span ?S ==> ?c *\<^sub>R ?x : span ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Complex_Vector_Spaces0.clinear_compose",
     "[| clinear ?f; clinear ?g |] ==> clinear (?g o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces0.scaleC_diff_right",
     "?a *\<^sub>C (?x - ?y) = ?a *\<^sub>C ?x - ?a *\<^sub>C ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_sum_right",
     "?a *\<^sub>C sum ?f ?A = (SUM x:?A. ?a *\<^sub>C ?f x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex_Vector_Spaces0.scaleC_diff_left",
     "(?a - ?b) *\<^sub>C ?x = ?a *\<^sub>C ?x - ?b *\<^sub>C ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_sum_left",
     "sum ?f ?A *\<^sub>C ?x = (SUM a:?A. ?f a *\<^sub>C ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Complex_Vector_Spaces0.scaleC_eq_0_iff",
     "(?a *\<^sub>C ?x = (0::?'a)) = (?a = 0 | ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 3))
           ))),
    ("Complex_Vector_Spaces0.of_complex_eq_of_complex_power_int_cancel_iff",
     "(of_complex ?b powi ?w = of_complex ?x) = (?b powi ?w = ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Complex_Vector_Spaces0.clinear_scale_complex",
     "clinear ?f ==> ?f (?c * ?b) = ?c * ?f ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Complex_Vector_Spaces0.clinear_cmul",
     "linear ?f ==> ?f (?r *\<^sub>R ?b) = ?r *\<^sub>R ?f ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Complex_Vector_Spaces0.cspan_linear_image",
     "linear ?f ==> span (?f ` ?S) = ?f ` span ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Vector_Spaces0.nonzero_of_complex_inverse",
     "?x ~= 0 ==> of_complex (inverse ?x) = inverse (of_complex ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Complex_Vector_Spaces0.bounded_clinear_compose",
     "[| bounded_clinear ?f; bounded_clinear ?g |]
      ==> bounded_clinear (%x. ?f (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces0.of_complex_eq_numeral_power_int_cancel_iff",
     "(of_complex ?y = numeral ?x powi ?n) = (?y = numeral ?x powi ?n)",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0)),
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Complex_Vector_Spaces0.numeral_power_int_eq_of_complex_cancel_iff",
     "(numeral ?x powi ?n = of_complex ?y) = (numeral ?x powi ?n = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Complex_Vector_Spaces0.csubspace_mul",
     "[| subspace ?S; ?x : ?S |] ==> ?c *\<^sub>R ?x : ?S",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 2)
           ))),
    ("Complex_Vector_Spaces0.Complexs_induct",
     "[| ?q : \<complex>; !!r. ?P (of_complex r) |] ==> ?P ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Complex_Vector_Spaces0.scaleC_times",
     "numeral ?u *\<^sub>C (numeral ?w * ?a) =
      (numeral ?u * numeral ?w) *\<^sub>C ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 2)),
             template_app (template_hole 3, template_var 1))),
         template_var 0))),
    ("Complex_Vector_Spaces0.scaleC_cancel_left",
     "(?a *\<^sub>C ?x = ?a *\<^sub>C ?y) = (?x = ?y | ?a = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 3, template_var 2), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("Complex_Vector_Spaces0.scaleC_cancel_right",
     "(?a *\<^sub>C ?x = ?b *\<^sub>C ?x) = (?a = ?b | ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 0))
           ))),
    ("Complex_Vector_Spaces0.bounded_clinear_sub",
     "[| bounded_clinear ?f; bounded_clinear ?g |]
      ==> bounded_clinear (%x. ?f x - ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_add",
     "[| bounded_clinear ?f; bounded_clinear ?g |]
      ==> bounded_clinear (%x. ?f x + ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.scaleC_left_le_one_le",
     "[| (0::?'a) <= ?x; ?a <= 1 |] ==> ?a *\<^sub>C ?x <= ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Complex_Vector_Spaces0.scaleC_nonneg_nonneg",
     "[| 0 <= ?a; (0::?'a) <= ?x |] ==> (0::?'a) <= ?a *\<^sub>C ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_nonneg_nonpos",
     "[| 0 <= ?a; ?x <= (0::?'a) |] ==> ?a *\<^sub>C ?x <= (0::?'a)",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Complex_Vector_Spaces0.scaleC_nonpos_nonneg",
     "[| ?a <= 0; (0::?'a) <= ?x |] ==> ?a *\<^sub>C ?x <= (0::?'a)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 3),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Complex_Vector_Spaces0.scaleC_nonpos_nonpos",
     "[| ?a <= 0; ?b <= (0::?'a) |] ==> (0::?'a) <= ?a *\<^sub>C ?b",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 3),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.Complexs_divide",
     "[| ?a : \<complex>; ?b : \<complex> |] ==> ?a / ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Complexs_diff",
     "[| ?a : \<complex>; ?b : \<complex> |] ==> ?a - ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Complexs_add",
     "[| ?a : \<complex>; ?b : \<complex> |] ==> ?a + ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Complexs_mult",
     "[| ?a : \<complex>; ?b : \<complex> |] ==> ?a * ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.nonzero_Complexs_inverse",
     "[| ?a : \<complex>; ?a ~= (0::?'a) |] ==> inverse ?a : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0)),
             template_hole 4)
           ))),
    ("Complex_Vector_Spaces0.scaleC_le_cancel_left_pos",
     "0 < ?c ==> (?c *\<^sub>C ?a <= ?c *\<^sub>C ?b) = (?a <= ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_le_cancel_left_neg",
     "?c < 0 ==> (?c *\<^sub>C ?a <= ?c *\<^sub>C ?b) = (?b <= ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Complex_Vector_Spaces0.nonzero_of_complex_divide",
     "?y ~= 0 ==> of_complex (?x / ?y) = of_complex ?x / of_complex ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Complex_Vector_Spaces0.complex_clinearD",
     "[| clinear ?f; !!c. ?f = (*) c ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces0.inverse_scaleC_times",
     "(1 / numeral ?v) *\<^sub>C (numeral ?w * ?a) =
      (numeral ?w / numeral ?v) *\<^sub>C ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 2))),
         template_var 0))),
    ("Complex_Vector_Spaces0.dist_scaleC",
     "dist (complex_of_real ?x *\<^sub>C ?a)
       (complex_of_real ?y *\<^sub>C ?a) =
      \<bar>?x - ?y\<bar> * norm ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_var 1)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Vector_Spaces0.neg_less_divideC_eq",
     "?c < 0 ==> (?a < ?b /\<^sub>C ?c) = (?b < ?c *\<^sub>C ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Vector_Spaces0.neg_divideC_less_eq",
     "?c < 0 ==> (?b /\<^sub>C ?c < ?a) = (?c *\<^sub>C ?a < ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Complex_Vector_Spaces0.neg_le_divideC_eq",
     "?c < 0 ==> (?a <= ?b /\<^sub>C ?c) = (?b <= ?c *\<^sub>C ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Vector_Spaces0.neg_divideC_le_eq",
     "?c < 0 ==> (?b /\<^sub>C ?c <= ?a) = (?c *\<^sub>C ?a <= ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Complex_Vector_Spaces0.scaleC_left_mono_neg",
     "[| ?b <= ?a; ?c <= 0 |] ==> ?c *\<^sub>C ?a <= ?c *\<^sub>C ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Complex_Vector_Spaces0.scaleC_right_mono_neg",
     "[| ?b <= ?a; ?c <= (0::?'a) |]
      ==> ?a *\<^sub>C ?c <= ?b *\<^sub>C ?c",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex_Vector_Spaces0.Complexs_cases",
     "[| ?q : \<complex>; !!c. ?q = of_complex c ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces0.clinear_injective_0",
     "linear ?f ==> inj ?f = (ALL x. ?f x = (0::?'b) --> x = (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0), template_hole 6),
         template_app (template_hole 5, t_empty)))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==> (?a = ?b /\<^sub>C ?c) = (?c *\<^sub>C ?a = ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_bimplication
        (template_equation
          (template_var 1,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==> (?b /\<^sub>C ?c = ?a) = (?b = ?c *\<^sub>C ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0),
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Complex_Vector_Spaces0.sum_in_Complexs",
     "(!!i. i : ?s ==> ?f i : \<complex>) ==> sum ?f ?s : \<complex>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.prod_in_Complexs",
     "(!!i. i : ?s ==> ?f i : \<complex>) ==> prod ?f ?s : \<complex>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.clinear_imp_scaleC",
     "[| clinear ?D; !!d. ?D = (%x. x *\<^sub>C d) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces0.scaleC_right_imp_eq",
     "[| ?x ~= (0::?'a); ?a *\<^sub>C ?x = ?b *\<^sub>C ?x |] ==> ?a = ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Vector_Spaces0.scaleC_left_imp_eq",
     "[| ?a ~= 0; ?a *\<^sub>C ?x = ?a *\<^sub>C ?y |] ==> ?x = ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "(?a = ?b /\<^sub>C ?c) =
      (if ?c = 0 then ?a = (0::?'a) else ?c *\<^sub>C ?a = ?b)",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 2)),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "(?b /\<^sub>C ?c = ?a) =
      (if ?c = 0 then ?a = (0::?'a) else ?b = ?c *\<^sub>C ?a)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 0)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.scaleC_eq_iff",
     "(?b + ?u *\<^sub>C ?a = ?a + ?u *\<^sub>C ?b) = (?a = ?b | ?u = 1)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Complex_Vector_Spaces0.neg_less_minus_divideC_eq",
     "?c < 0 ==> (?a < - (?b /\<^sub>C ?c)) = (- ?b < ?c *\<^sub>C ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Vector_Spaces0.neg_minus_divideC_less_eq",
     "?c < 0 ==> (- (?b /\<^sub>C ?c) < ?a) = (?c *\<^sub>C ?a < - ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Complex_Vector_Spaces0.neg_le_minus_divideC_eq",
     "?c < 0 ==> (?a <= - (?b /\<^sub>C ?c)) = (- ?b <= ?c *\<^sub>C ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Vector_Spaces0.neg_minus_divideC_le_eq",
     "?c < 0 ==> (- (?b /\<^sub>C ?c) <= ?a) = (?c *\<^sub>C ?a <= - ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "?a - ?b /\<^sub>C ?c =
      (if ?c = 0 then ?a else (?c *\<^sub>C ?a - ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2)),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "?a + ?b /\<^sub>C ?c =
      (if ?c = 0 then ?a else (?c *\<^sub>C ?a + ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2)),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "?a /\<^sub>C ?c + ?b =
      (if ?c = 0 then ?b else (?a + ?c *\<^sub>C ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.bounded_clinear_sum",
     "(!!i. i : ?I ==> bounded_clinear (?f i)) ==>
      bounded_clinear (%x. SUM i:?I. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "?a /\<^sub>C ?c - ?b =
      (if ?c = 0 then - ?b else (?a - ?c *\<^sub>C ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.fraction_scaleC_times",
     "(numeral ?u / numeral ?v) *\<^sub>C (numeral ?w * ?a) =
      (numeral ?u * numeral ?w / numeral ?v) *\<^sub>C ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 3)),
             template_app (template_hole 3, template_var 2))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 3, template_var 1))),
             template_app (template_hole 3, template_var 2))),
         template_var 0))),
    ("Complex_Vector_Spaces0.cle_add_iff2",
     "(?a *\<^sub>C ?e + ?c <= ?b *\<^sub>C ?e + ?d) =
      (?c <= (?b - ?a) *\<^sub>C ?e + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3)),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 4)),
               template_var 3)),
           template_var 0)))),
    ("Complex_Vector_Spaces0.cle_add_iff1",
     "(?a *\<^sub>C ?e + ?c <= ?b *\<^sub>C ?e + ?d) =
      ((?a - ?b) *\<^sub>C ?e + ?c <= ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)),
                 template_var 3)),
             template_var 2)),
         template_var 0))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      ?a - ?b /\<^sub>C ?c = (?c *\<^sub>C ?a - ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      ?a /\<^sub>C ?c - ?b = (?a - ?c *\<^sub>C ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      ?a + ?b /\<^sub>C ?c = (?c *\<^sub>C ?a + ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      ?a /\<^sub>C ?c + ?b = (?a + ?c *\<^sub>C ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.nonzero_Complexs_divide",
     "[| ?a : \<complex>; ?b : \<complex>; ?b ~= (0::?'a) |]
      ==> ?a / ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 4)
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "- (?a /\<^sub>C ?c) + ?b =
      (if ?c = 0 then ?b else (- ?a + ?c *\<^sub>C ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.ceq_vector_fraction_iff",
     "(?x = (?u / ?v) *\<^sub>C ?a) =
      (if ?v = 0 then ?x = (0::?'a)
       else ?v *\<^sub>C ?x = ?u *\<^sub>C ?a)",
     template_bimplication
      (template_equation
        (template_var 3,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 3)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.cvector_fraction_eq_iff",
     "((?u / ?v) *\<^sub>C ?a = ?x) =
      (if ?v = 0 then ?x = (0::?'a)
       else ?u *\<^sub>C ?a = ?v *\<^sub>C ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.split_scaleC_pos_le",
     "0 <= ?a & (0::?'a) <= ?b | ?a <= 0 & ?b <= (0::?'a) ==>
      (0::?'a) <= ?a *\<^sub>C ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 0))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_hole 3)),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)))
            )],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.split_scaleC_neg_le",
     "0 <= ?a & ?x <= (0::?'a) | ?a <= 0 & (0::?'a) <= ?x ==>
      ?a *\<^sub>C ?x <= (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 2, template_var 0),
                    template_hole 1))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_hole 3)),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Complex_Vector_Spaces0.nonzero_inverse_scaleC_distrib",
     "[| ?a ~= 0; ?x ~= (0::?'a) |]
      ==> inverse (?a *\<^sub>C ?x) = inverse ?x /\<^sub>C ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "?v - (?b / ?z) *\<^sub>C ?w =
      (if ?z = 0 then ?v
       else (?z *\<^sub>C ?v - ?b *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_var 3),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "- (?a /\<^sub>C ?c) - ?b =
      (if ?c = 0 then - ?b else (- ?a - ?c *\<^sub>C ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "?v + (?b / ?z) *\<^sub>C ?w =
      (if ?z = 0 then ?v
       else (?z *\<^sub>C ?v + ?b *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_var 3),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "(?a / ?z) *\<^sub>C ?v + ?w =
      (if ?z = 0 then ?w
       else (?a *\<^sub>C ?v + ?z *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_var 0),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      - (?a /\<^sub>C ?c) - ?b = (- ?a - ?c *\<^sub>C ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      - (?a /\<^sub>C ?c) + ?b = (- ?a + ?c *\<^sub>C ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.clinear_injective_on_subspace_0",
     "[| linear ?f; subspace ?s |]
      ==> inj_on ?f ?s = (ALL x:?s. ?f x = (0::?'b) --> x = (0::?'a))",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 5, template_var 0), t_empty)))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "(?a / ?z) *\<^sub>C ?v - ?w =
      (if ?z = 0 then - ?w
       else (?a *\<^sub>C ?v - ?z *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_hole 2)),
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 0, template_var 2)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_vector_eq_affinity",
     "?m ~= 0 ==>
      (?y = ?m *\<^sub>C ?x + ?c) =
      (?y /\<^sub>C ?m - ?c /\<^sub>C ?m = ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6))],
       template_bimplication
        (template_equation
          (template_var 2,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_var 0)),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 3)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 3)),
               template_var 0)),
           template_var 1)))),
    ("Complex_Vector_Spaces0.complex_vector_affinity_eq",
     "?m ~= 0 ==>
      (?m *\<^sub>C ?x + ?c = ?y) =
      (?x = ?y /\<^sub>C ?m - ?c /\<^sub>C ?m)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_equation
          (template_var 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 3)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 3)),
               template_var 1)))))),
    ("Complex_Vector_Spaces0.scaleC_le_cancel_left",
     "?c : \<real> ==>
      (?c *\<^sub>C ?a <= ?c *\<^sub>C ?b) =
      ((0 < ?c --> ?a <= ?b) & (?c < 0 --> ?b <= ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 1)))))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "?a *\<^sub>C ?v - (?b / ?z) *\<^sub>C ?w =
      (if ?z = 0 then ?a *\<^sub>C ?v
       else ((?a * ?z) *\<^sub>C ?v - ?b *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 1)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "?a *\<^sub>C ?v + (?b / ?z) *\<^sub>C ?w =
      (if ?z = 0 then ?a *\<^sub>C ?v
       else ((?a * ?z) *\<^sub>C ?v + ?b *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 1)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "(?a / ?z) *\<^sub>C ?v + ?b *\<^sub>C ?w =
      (if ?z = 0 then ?b *\<^sub>C ?w
       else (?a *\<^sub>C ?v + (?b * ?z) *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_hole 2)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 3)),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "(?a / ?z) *\<^sub>C ?v - ?b *\<^sub>C ?w =
      (if ?z = 0 then - ?b *\<^sub>C ?w
       else (?a *\<^sub>C ?v - (?b * ?z) *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 2, template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 1, template_var 3)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 4),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 3)),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.cCauchy_iff2",
     "Cauchy ?X =
      (ALL j.
          EX M. ALL m>=M.
                   ALL n>=M. cmod (?X m - ?X n) < inverse (real (Suc j)))",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app (template_hole 9, t_empty))),
    ("Complex_Vector_Spaces0.zero_le_scaleC_iff",
     "?a : \<real> ==>
      ((0::?'a) <= ?a *\<^sub>C ?b) =
      (0 < ?a & (0::?'a) <= ?b | ?a < 0 & ?b <= (0::?'a) | ?a = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_hole 1)),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 1)))
             )))),
    ("Complex_Vector_Spaces0.scaleC_le_0_iff",
     "?a : \<real> ==>
      (?a *\<^sub>C ?b <= (0::?'a)) =
      (0 < ?a & ?b <= (0::?'a) | ?a < 0 & (0::?'a) <= ?b | ?a = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0)),
                template_hole 5)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 5))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_hole 1)),
                     template_app
                      (template_app (template_hole 7, template_hole 5),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 1)))
             )))),
    ("Complex_Vector_Spaces0.clinear_iff",
     "clinear ?f =
      ((ALL x y. ?f (x + y) = ?f x + ?f y) &
       (ALL c x. ?f (c *\<^sub>C x) = c *\<^sub>C ?f x))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?a < ?b /\<^sub>C ?c) =
      (if 0 < ?c then ?c *\<^sub>C ?a < ?b
       else if ?c < 0 then ?b < ?c *\<^sub>C ?a else ?a < (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?b /\<^sub>C ?c < ?a) =
      (if 0 < ?c then ?b < ?c *\<^sub>C ?a
       else if ?c < 0 then ?c *\<^sub>C ?a < ?b else (0::?'a) < ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 0),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?a <= ?b /\<^sub>C ?c) =
      (if 0 < ?c then ?c *\<^sub>C ?a <= ?b
       else if ?c < 0 then ?b <= ?c *\<^sub>C ?a else ?a <= (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?b /\<^sub>C ?c <= ?a) =
      (if 0 < ?c then ?b <= ?c *\<^sub>C ?a
       else if ?c < 0 then ?c *\<^sub>C ?a <= ?b else (0::?'a) <= ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 0),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.clinearI",
     "[| !!b1 b2. ?f (b1 + b2) = ?f b1 + ?f b2;
         !!r b. ?f (r *\<^sub>C b) = r *\<^sub>C ?f b |]
      ==> clinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?a < - (?b /\<^sub>C ?c)) =
      (if 0 < ?c then ?c *\<^sub>C ?a < - ?b
       else if ?c < 0 then - ?b < ?c *\<^sub>C ?a else ?a < (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (- (?b /\<^sub>C ?c) < ?a) =
      (if 0 < ?c then - ?b < ?c *\<^sub>C ?a
       else if ?c < 0 then ?c *\<^sub>C ?a < - ?b else (0::?'a) < ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app (template_hole 5, template_hole 0),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?a <= - (?b /\<^sub>C ?c)) =
      (if 0 < ?c then ?c *\<^sub>C ?a <= - ?b
       else if ?c < 0 then - ?b <= ?c *\<^sub>C ?a else ?a <= (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (- (?b /\<^sub>C ?c) <= ?a) =
      (if 0 < ?c then - ?b <= ?c *\<^sub>C ?a
       else if ?c < 0 then ?c *\<^sub>C ?a <= - ?b else (0::?'a) <= ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app (template_hole 5, template_hole 0),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.complex_increasing_LIMSEQ",
     "[| !!n. ?f n <= ?f (Suc n); !!n. ?f n <= ?l;
         !!e. 0 < e ==> EX n. ?l <= ?f n + e |]
      ==> ?f \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Complex_Vector_Spaces0.bounded_clinear_intro",
     "[| !!x y. ?f (x + y) = ?f x + ?f y;
         !!r x. ?f (r *\<^sub>C x) = r *\<^sub>C ?f x;
         !!x. norm (?f x) <= norm x * ?K |]
      ==> bounded_clinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1))))]
