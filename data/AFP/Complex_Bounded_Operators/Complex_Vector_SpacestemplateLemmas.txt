   [("Complex_Vector_Spaces.csubspace_space_as_set",
     "csubspace (space_as_set ?S)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Vector_Spaces.CARD_1_vec_0", "?\<psi> = (0::?'a)",
     template_equation (template_var 0, template_hole 0)),
    ("Complex_Vector_Spaces0.closed_complex_atLeast", "closed {?a..}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Vector_Spaces0.closed_complex_atMost", "closed {..?a}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Vector_Spaces0.cspan_0", "(0::?'a) : span ?S",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Vector_Spaces0.Complexs_of_complex",
     "of_complex ?r : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces0.Complexs_of_int", "of_int ?z : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces0.Complexs_of_nat", "of_nat ?n : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces0.Complexs_numeral", "numeral ?w : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces.Complexs_of_real", "of_real ?r : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces0.closed_complex_atLeastAtMost",
     "closed {?a..?b}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Complex_Vector_Spaces0.bounded_clinear_divide",
     "bounded_clinear (%x. x / ?y)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.bounded_clinear_scaleC_right",
     "bounded_clinear ((*\<^sub>C) ?c)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.bounded_clinear_mult_left",
     "bounded_clinear (%x. x * ?y)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.bounded_clinear_mult_right",
     "bounded_clinear ((*) ?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.bounded_clinear_scaleC_left",
     "bounded_clinear (%c. c *\<^sub>C ?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces.clinear_times", "clinear ((*) ?c)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.clinear_scaleC_left",
     "clinear (%r. r *\<^sub>C ?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.scaleC_zero_left", "0 *\<^sub>C ?x = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Complex_Vector_Spaces0.scaleC_zero_right",
     "?a *\<^sub>C (0::?'a) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Complex_Vector_Spaces.zero_cblinfun_image",
     "0 *\<^sub>C ?S = \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Complex_Vector_Spaces.span_subset_cspan", "span ?A <= cspan ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.ccspan_superset",
     "?A <= space_as_set (ccspan ?A)",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.ccsubspace_add_right_incr", "?a <= ?a + ?c",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Vector_Spaces.ccsubspace_add_left_incr", "?a <= ?c + ?a",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Complex_Vector_Spaces0.clinear_scaleC", "linear ((*\<^sub>R) ?c)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.clinear_times_of_complex",
     "clinear (%x. ?a * of_complex x)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Complex_Vector_Spaces0.of_complex_of_int_eq",
     "of_complex (of_int ?z) = of_int ?z",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_of_nat_eq",
     "of_complex (of_nat ?n) = of_nat ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_numeral",
     "of_complex (numeral ?w) = numeral ?w",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.of_complex_of_real_eq",
     "of_complex (complex_of_real ?n) = of_real ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.norm_from_conjugate_space",
     "norm (from_conjugate_space ?x) = norm ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.norm_of_complex",
     "norm (of_complex ?c) = cmod ?c",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.norm_to_conjugate_space",
     "norm (to_conjugate_space ?x) = norm ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.bounded_clinear_finite_dim",
     "clinear ?f ==> bounded_clinear ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.csubspace_is_subspace",
     "csubspace ?A ==> subspace ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.csubspace_is_convex",
     "csubspace ?M ==> convex ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.complex_Cauchy_convergent",
     "Cauchy ?X ==> convergent ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_minus1_left", "- 1 *\<^sub>C ?x = - ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_minus",
     "of_complex (- ?x) = - of_complex ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_inverse",
     "of_complex (inverse ?x) = inverse (of_complex ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.sgn_of_complex",
     "sgn (of_complex ?r) = of_complex (sgn ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.closed_sum_comm",
     "?A +\<^sub>M ?B = ?B +\<^sub>M ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Complex_Vector_Spaces0.complex_sgn_eq",
     "sgn ?x = ?x / \<bar>?x\<bar>",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.closure_is_csubspace",
     "csubspace ?A ==> csubspace (closure ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.closure_is_closed_csubspace",
     "csubspace ?S ==> closed_csubspace (closure ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.finite_span_complete",
     "finite ?A ==> uniform_space_class.complete (span ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.finite_span_closed",
     "finite ?B ==> closed (span ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.finite_cspan_complete",
     "finite ?B ==> uniform_space_class.complete (cspan ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.finite_cspan_closed_csubspace",
     "finite ?S ==> closed_csubspace (cspan ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.finite_cspan_closed",
     "finite ?S ==> closed (cspan ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.cindependent_cfinite_dim_finite",
     "cindependent ?S ==> finite ?S",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_conv_of_complex",
     "?r *\<^sub>C ?x = of_complex ?r * ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_neg_numeral",
     "of_complex (- numeral ?w) = - numeral ?w",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.closed_sum_zero_right",
     "?A +\<^sub>M {0::?'a} = closure ?A",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.closed_sum_zero_left",
     "{0::?'a} +\<^sub>M ?A = closure ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.closed_sum_closure_right",
     "?A +\<^sub>M closure ?B = ?A +\<^sub>M ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Complex_Vector_Spaces.closed_sum_closure_left",
     "closure ?A +\<^sub>M ?B = ?A +\<^sub>M ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_eq_1_iff",
     "(of_complex ?x = (1::?'a)) = (?x = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Complex_Vector_Spaces0.of_complex_eq_0_iff",
     "(of_complex ?x = (0::?'a)) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Complex_Vector_Spaces0.czero_le_sgn_iff", "(0 <= sgn ?x) = (0 <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Complex_Vector_Spaces0.csgn_le_0_iff", "(sgn ?x <= 0) = (?x <= 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Complex_Vector_Spaces0.of_complex_in_Ints_iff",
     "(of_complex ?x : \<int>) = (?x : \<int>)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Complex_Vector_Spaces0.Complexs_minus_iff",
     "(- ?a : \<complex>) = (?a : \<complex>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Complex_Vector_Spaces0.Complexs_inverse_iff",
     "(inverse ?x : \<complex>) = (?x : \<complex>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Complex_Vector_Spaces.range_is_clinear",
     "clinear ?f ==> csubspace (range ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Complex_Vector_Spaces.cindependent_implies_independent",
     "cindependent ?S ==> independent ?S",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces0.scaleC_minus_right",
     "?a *\<^sub>C - ?x = - (?a *\<^sub>C ?x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_minus_left",
     "- ?a *\<^sub>C ?x = - (?a *\<^sub>C ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces.fst_scaleC",
     "fst (?r *\<^sub>C ?A) = ?r *\<^sub>C fst ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_2", "2 *\<^sub>C ?x = ?x + ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_power",
     "of_complex (?x ^ ?n) = of_complex ?x ^ ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_power_int",
     "of_complex (?x powi ?n) = of_complex ?x powi ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Complex_Vector_Spaces.snd_scaleC",
     "snd (?r *\<^sub>C ?A) = ?r *\<^sub>C snd ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces.closure_from_conjugate_space",
     "closure (from_conjugate_space ` ?X) =
      from_conjugate_space ` closure ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.cspan_to_conjugate_space",
     "cspan (to_conjugate_space ` ?X) = to_conjugate_space ` cspan ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.closure_to_conjugate_space",
     "closure (to_conjugate_space ` ?X) = to_conjugate_space ` closure ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_eq_iff",
     "(of_complex ?x = of_complex ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Complex_Vector_Spaces0.dist_of_complex",
     "dist (of_complex ?x) (of_complex ?y) = dist ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Vector_Spaces.antilinear_continuous_at",
     "bounded_antilinear ?f ==> isCont ?f ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 1)
           ))),
    ("Complex_Vector_Spaces.antilinear_continuous_within",
     "bounded_antilinear ?f ==> continuous (at ?x within ?s) ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Complex_Vector_Spaces0.bounded_clinear_minus",
     "bounded_clinear ?f ==> bounded_clinear (%x. - ?f x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces.clinear_continuous_at",
     "bounded_clinear ?f ==> isCont ?f ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 1)
           ))),
    ("Complex_Vector_Spaces.clinear_continuous_within",
     "bounded_clinear ?f ==> continuous (at ?x within ?s) ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Complex_Vector_Spaces.closed_scaleC",
     "closed ?S ==> closed ((*\<^sub>C) ?a ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces0.Complexs_minus",
     "?a : \<complex> ==> - ?a : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Complexs_inverse",
     "?a : \<complex> ==> inverse ?a : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Ints_of_complex",
     "?x : \<int> ==> of_complex ?x : \<int>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Complex_Vector_Spaces0.of_complex_diff",
     "of_complex (?x - ?y) = of_complex ?x - of_complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_add",
     "of_complex (?x + ?y) = of_complex ?x + of_complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_mult",
     "of_complex (?x * ?y) = of_complex ?x * of_complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_divide",
     "of_complex (?x / ?y) = of_complex ?x / of_complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.inverse_scaleC_distrib",
     "inverse (?a *\<^sub>C ?x) = inverse ?x /\<^sub>C ?a",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.sgn_scaleC",
     "sgn (?r *\<^sub>C ?x) = sgn ?r *\<^sub>C sgn ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces.cspan_as_span",
     "cspan ?B = span (?B Un (*\<^sub>C) \<i> ` ?B)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0))))),
    ("Complex_Vector_Spaces.space_as_set_inf",
     "space_as_set (?A \<sqinter> ?B) =
      space_as_set ?A Int space_as_set ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.norm_of_complex_add1",
     "norm (of_complex ?x + (1::?'a)) = cmod (?x + 1)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_hole 3)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Complex_Vector_Spaces.ccspan_union",
     "ccspan ?A \<squnion> ccspan ?B = ccspan (?A Un ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces.kernel_is_closed_csubspace",
     "bounded_clinear ?f ==> closed_csubspace (?f -` {0::?'b})",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)))
           ))),
    ("Complex_Vector_Spaces.bounded_clinear_const_scaleR",
     "bounded_clinear ?f ==> bounded_clinear (%x. ?c *\<^sub>R ?f x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_const_mult",
     "bounded_clinear ?g ==> bounded_clinear (%x. ?x * ?g x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_mult_const",
     "bounded_clinear ?g ==> bounded_clinear (%x. ?g x * ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_const_scaleC",
     "bounded_clinear ?g ==> bounded_clinear (%x. ?c *\<^sub>C ?g x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_scaleC_const",
     "bounded_clinear ?g ==> bounded_clinear (%x. ?g x *\<^sub>C ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces.kernel_is_csubspace",
     "clinear ?f ==> csubspace (?f -` {0::?'b})",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)))
           ))),
    ("Complex_Vector_Spaces.closure_finite_cspan",
     "finite ?T ==> closure (cspan ?T) = cspan ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.ccspan_mono",
     "?A <= ?B ==> ccspan ?A <= ccspan ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.Complexs_power",
     "?a : \<complex> ==> ?a ^ ?n : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces.closed_sum_right_subset",
     "(0::?'c) : ?A ==> ?B <= ?A +\<^sub>M ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces.closed_sum_left_subset",
     "(0::?'c) : ?B ==> ?A <= ?A +\<^sub>M ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Complex_Vector_Spaces.ccspan_leqI",
     "?M <= space_as_set ?S ==> ccspan ?M <= ?S",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Complex_Vector_Spaces.ccsubspace_leI",
     "space_as_set ?A <= space_as_set ?B ==> ?A <= ?B",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Complex_Vector_Spaces.closed_csubspace_INF",
     "ALL A:?\<A>. closed_csubspace A ==>
      closed_csubspace (\<Inter> ?\<A>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces0.scaleC_left_commute",
     "?a *\<^sub>C ?b *\<^sub>C ?x = ?b *\<^sub>C ?a *\<^sub>C ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_half_double",
     "(1 / 2) *\<^sub>C (?a + ?a) = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)),
       template_var 0)),
    ("Complex_Vector_Spaces0.scaleC_collapse",
     "(1 - ?u) *\<^sub>C ?a + ?u *\<^sub>C ?a = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_var 0)),
    ("Complex_Vector_Spaces0.of_complex_sum",
     "of_complex (sum ?f ?s) = (SUM x:?s. of_complex (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_prod",
     "of_complex (prod ?f ?s) = (PROD x:?s. of_complex (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex_Vector_Spaces.closed_sum_cspan",
     "cspan ?X +\<^sub>M cspan ?Y = closure (cspan (?X Un ?Y))",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Complex_Vector_Spaces.closed_sum_assoc",
     "?A +\<^sub>M (?B +\<^sub>M ?C) = ?A +\<^sub>M ?B +\<^sub>M ?C",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Complex_Vector_Spaces.closure_scaleC",
     "closure ((*\<^sub>C) ?a ` ?S) = (*\<^sub>C) ?a ` closure ?S",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.complex_bounded_clinear",
     "bounded_clinear ?f = (EX c. ?f = (%x. x * c))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Complex_Vector_Spaces0.of_complex_eq_minus_of_complex_iff",
     "(of_complex ?x = - of_complex ?y) = (?x = - ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 3, template_var 0))),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.minus_of_complex_eq_of_complex_iff",
     "(- of_complex ?x = of_complex ?y) = (- ?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Vector_Spaces0.norm_of_complex_diff",
     "norm (of_complex ?b - of_complex ?a) <= cmod (?b - ?a)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces.bounded_sesquilinear_uminus",
     "bounded_sesquilinear ?A ==> bounded_sesquilinear (%x y. - ?A x y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces.ccsubspace_scaleC_invariant",
     "?a ~= 0 ==> ?a *\<^sub>C ?S = ?S",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Complex_Vector_Spaces.summable_of_complex",
     "summable ?X ==> summable (%n. of_complex (?X n))",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.norm_of_complex_addn",
     "norm (of_complex ?x + numeral ?b) = cmod (?x + numeral ?b)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Vector_Spaces.closed_sum_mono_left",
     "?A <= ?B ==> ?A +\<^sub>M ?C <= ?B +\<^sub>M ?C",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces.closed_sum_mono_right",
     "?A <= ?B ==> ?C +\<^sub>M ?A <= ?C +\<^sub>M ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Complex_Vector_Spaces0.injective_scaleC",
     "?c ~= 0 ==> inj ((*\<^sub>R) ?c)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0)
           ))),
    ("Complex_Vector_Spaces.summable_scaleC_right",
     "summable ?X ==> summable (%n. ?c *\<^sub>C ?X n)",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces.summable_scaleC_left",
     "summable ?X ==> summable (%n. ?X n *\<^sub>C ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.cspan_mul",
     "?x : span ?S ==> ?c *\<^sub>R ?x : span ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Complex_Vector_Spaces.antilinear_o_antilinear",
     "[| antilinear ?f; antilinear ?g |] ==> clinear (?g o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces.clinear_o_antilinear",
     "[| antilinear ?f; clinear ?g |] ==> antilinear (?g o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces.closed_csubspace_inter",
     "[| closed_csubspace ?A; closed_csubspace ?B |]
      ==> closed_csubspace (?A Int ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces.comp_bounded_clinear",
     "[| bounded_clinear ?A; bounded_clinear ?B |]
      ==> bounded_clinear (?A o ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces.antilinear_o_clinear",
     "[| clinear ?f; antilinear ?g |] ==> antilinear (?g o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces0.clinear_compose",
     "[| clinear ?f; clinear ?g |] ==> clinear (?g o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces.csubspace_set_plus",
     "[| csubspace ?A; csubspace ?B |] ==> csubspace (?A + ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces.closed_subspace_closed_sum",
     "[| csubspace ?A; csubspace ?B |]
      ==> closed_csubspace (?A +\<^sub>M ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces0.scaleC_diff_right",
     "?a *\<^sub>C (?x - ?y) = ?a *\<^sub>C ?x - ?a *\<^sub>C ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_sum_right",
     "?a *\<^sub>C sum ?f ?A = (SUM x:?A. ?a *\<^sub>C ?f x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex_Vector_Spaces0.scaleC_diff_left",
     "(?a - ?b) *\<^sub>C ?x = ?a *\<^sub>C ?x - ?b *\<^sub>C ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_sum_left",
     "sum ?f ?A *\<^sub>C ?x = (SUM a:?A. ?f a *\<^sub>C ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Complex_Vector_Spaces0.scaleC_eq_0_iff",
     "(?a *\<^sub>C ?x = (0::?'a)) = (?a = 0 | ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 3))
           ))),
    ("Complex_Vector_Spaces0.of_complex_eq_of_complex_power_int_cancel_iff",
     "(of_complex ?b powi ?w = of_complex ?x) = (?b powi ?w = ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Complex_Vector_Spaces.scaleC_Pair",
     "?r *\<^sub>C (?a, ?b) = (?r *\<^sub>C ?a, ?r *\<^sub>C ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex_Vector_Spaces0.clinear_scale_complex",
     "clinear ?f ==> ?f (?c * ?b) = ?c * ?f ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Complex_Vector_Spaces0.clinear_cmul",
     "linear ?f ==> ?f (?r *\<^sub>R ?b) = ?r *\<^sub>R ?f ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Complex_Vector_Spaces0.cspan_linear_image",
     "linear ?f ==> span (?f ` ?S) = ?f ` span ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Vector_Spaces.real_independent_from_complex_independent",
     "cindependent ?B ==> independent (?B Un (*\<^sub>C) \<i> ` ?B)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0)),
                     template_var 0)))
               )
           ))),
    ("Complex_Vector_Spaces0.nonzero_of_complex_inverse",
     "?x ~= 0 ==> of_complex (inverse ?x) = inverse (of_complex ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Complex_Vector_Spaces.bounded_antilinear_o_bounded_antilinear",
     "[| bounded_antilinear ?f; bounded_antilinear ?g |]
      ==> bounded_clinear (%x. ?f (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces.bounded_antilinear_o_bounded_clinear",
     "[| bounded_antilinear ?f; bounded_clinear ?g |]
      ==> bounded_antilinear (%x. ?f (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces.bounded_clinear_o_bounded_antilinear",
     "[| bounded_clinear ?f; bounded_antilinear ?g |]
      ==> bounded_antilinear (%x. ?f (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_compose",
     "[| bounded_clinear ?f; bounded_clinear ?g |]
      ==> bounded_clinear (%x. ?f (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces0.of_complex_eq_numeral_power_int_cancel_iff",
     "(of_complex ?y = numeral ?x powi ?n) = (?y = numeral ?x powi ?n)",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0)),
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Complex_Vector_Spaces0.numeral_power_int_eq_of_complex_cancel_iff",
     "(numeral ?x powi ?n = of_complex ?y) = (numeral ?x powi ?n = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Complex_Vector_Spaces.sums_of_complex",
     "?X sums ?a ==> (%n. of_complex (?X n)) sums of_complex ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.csubspace_INF",
     "(!!x. x : ?A ==> csubspace x) ==> csubspace (\<Inter> ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.bij_clinear_imp_inv_clinear",
     "[| clinear ?f; bij ?f |] ==> clinear (inv ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 3),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces0.csubspace_mul",
     "[| subspace ?S; ?x : ?S |] ==> ?c *\<^sub>R ?x : ?S",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 2)
           ))),
    ("Complex_Vector_Spaces0.Complexs_induct",
     "[| ?q : \<complex>; !!r. ?P (of_complex r) |] ==> ?P ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Complex_Vector_Spaces0.scaleC_times",
     "numeral ?u *\<^sub>C (numeral ?w * ?a) =
      (numeral ?u * numeral ?w) *\<^sub>C ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 2)),
             template_app (template_hole 3, template_var 1))),
         template_var 0))),
    ("Complex_Vector_Spaces0.scaleC_cancel_left",
     "(?a *\<^sub>C ?x = ?a *\<^sub>C ?y) = (?x = ?y | ?a = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 3, template_var 2), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("Complex_Vector_Spaces0.scaleC_cancel_right",
     "(?a *\<^sub>C ?x = ?b *\<^sub>C ?x) = (?a = ?b | ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 0))
           ))),
    ("Complex_Vector_Spaces0.bounded_clinear_sub",
     "[| bounded_clinear ?f; bounded_clinear ?g |]
      ==> bounded_clinear (%x. ?f x - ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_add",
     "[| bounded_clinear ?f; bounded_clinear ?g |]
      ==> bounded_clinear (%x. ?f x + ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.scaleC_left_le_one_le",
     "[| (0::?'a) <= ?x; ?a <= 1 |] ==> ?a *\<^sub>C ?x <= ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Complex_Vector_Spaces0.scaleC_nonneg_nonneg",
     "[| 0 <= ?a; (0::?'a) <= ?x |] ==> (0::?'a) <= ?a *\<^sub>C ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_nonneg_nonpos",
     "[| 0 <= ?a; ?x <= (0::?'a) |] ==> ?a *\<^sub>C ?x <= (0::?'a)",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Complex_Vector_Spaces0.scaleC_nonpos_nonneg",
     "[| ?a <= 0; (0::?'a) <= ?x |] ==> ?a *\<^sub>C ?x <= (0::?'a)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 3),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Complex_Vector_Spaces0.scaleC_nonpos_nonpos",
     "[| ?a <= 0; ?b <= (0::?'a) |] ==> (0::?'a) <= ?a *\<^sub>C ?b",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 3),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces.ccsubspace_plus_sup",
     "[| ?y <= ?x; ?z <= ?x |] ==> ?y + ?z <= ?x",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Complex_Vector_Spaces0.Complexs_divide",
     "[| ?a : \<complex>; ?b : \<complex> |] ==> ?a / ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Complexs_diff",
     "[| ?a : \<complex>; ?b : \<complex> |] ==> ?a - ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Complexs_add",
     "[| ?a : \<complex>; ?b : \<complex> |] ==> ?a + ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Complexs_mult",
     "[| ?a : \<complex>; ?b : \<complex> |] ==> ?a * ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.nonzero_Complexs_inverse",
     "[| ?a : \<complex>; ?a ~= (0::?'a) |] ==> inverse ?a : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0)),
             template_hole 4)
           ))),
    ("Complex_Vector_Spaces.cspan_singleton",
     "cspan {?x} = {\<alpha> *\<^sub>C ?x |\<alpha>. True}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 0),
           template_hole 6)),
       template_app (template_hole 5, t_empty))),
    ("Complex_Vector_Spaces.onorm_scalarC",
     "bounded_clinear ?f ==>
      onorm (%x. ?r *\<^sub>C ?f x) = cmod ?r * onorm ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 3, template_var 1))))),
    ("Complex_Vector_Spaces.onorm_scaleC_left",
     "bounded_clinear ?r ==>
      onorm (%x. ?r x *\<^sub>C ?f) = onorm ?r * norm ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Vector_Spaces.onorm_scaleC_left_lemma",
     "bounded_clinear ?r ==>
      onorm (%x. ?r x *\<^sub>C ?f) <= onorm ?r * norm ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Vector_Spaces0.scaleC_le_cancel_left_pos",
     "0 < ?c ==> (?c *\<^sub>C ?a <= ?c *\<^sub>C ?b) = (?a <= ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_le_cancel_left_neg",
     "?c < 0 ==> (?c *\<^sub>C ?a <= ?c *\<^sub>C ?b) = (?b <= ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Complex_Vector_Spaces0.nonzero_of_complex_divide",
     "?y ~= 0 ==> of_complex (?x / ?y) = of_complex ?x / of_complex ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Complex_Vector_Spaces.sums_scaleC_right",
     "?X sums ?a ==> (%n. ?c *\<^sub>C ?X n) sums (?c *\<^sub>C ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces.sums_scaleC_left",
     "?X sums ?a ==> (%n. ?X n *\<^sub>C ?x) sums (?a *\<^sub>C ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces0.complex_clinearD",
     "[| clinear ?f; !!c. ?f = (*) c ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces.csubspace_scaleC_invariant",
     "[| ?a ~= 0; csubspace ?S |] ==> (*\<^sub>C) ?a ` ?S = ?S",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_var 0))),
    ("Complex_Vector_Spaces0.inverse_scaleC_times",
     "(1 / numeral ?v) *\<^sub>C (numeral ?w * ?a) =
      (numeral ?w / numeral ?v) *\<^sub>C ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 2))),
         template_var 0))),
    ("Complex_Vector_Spaces0.dist_scaleC",
     "dist (complex_of_real ?x *\<^sub>C ?a)
       (complex_of_real ?y *\<^sub>C ?a) =
      \<bar>?x - ?y\<bar> * norm ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_var 1)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Vector_Spaces.cbilinear_add_right",
     "cbilinear ?f ==> ?f ?a (?b + ?c) = ?f ?a ?b + ?f ?a ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0))))),
    ("Complex_Vector_Spaces.cbilinear_add_left",
     "cbilinear ?f ==> ?f (?a + ?b) ?c = ?f ?a ?c + ?f ?b ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0))))),
    ("Complex_Vector_Spaces.cfinite_dim_finite_subspace_basis",
     "csubspace ?X ==>
      EX basis. finite basis & cindependent basis & cspan basis = ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Complex_Vector_Spaces0.neg_less_divideC_eq",
     "?c < 0 ==> (?a < ?b /\<^sub>C ?c) = (?b < ?c *\<^sub>C ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Vector_Spaces0.neg_divideC_less_eq",
     "?c < 0 ==> (?b /\<^sub>C ?c < ?a) = (?c *\<^sub>C ?a < ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Complex_Vector_Spaces0.neg_le_divideC_eq",
     "?c < 0 ==> (?a <= ?b /\<^sub>C ?c) = (?b <= ?c *\<^sub>C ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Vector_Spaces0.neg_divideC_le_eq",
     "?c < 0 ==> (?b /\<^sub>C ?c <= ?a) = (?c *\<^sub>C ?a <= ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Complex_Vector_Spaces.cspan_singleton_scaleC",
     "?a ~= 0 ==> cspan {?a *\<^sub>C ?\<psi>} = cspan {?\<psi>}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))))),
    ("Complex_Vector_Spaces.ccspan_singleton_scaleC",
     "?a ~= 0 ==> ccspan {?a *\<^sub>C ?\<psi>} = ccspan {?\<psi>}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))))),
    ("Complex_Vector_Spaces.suminf_of_complex",
     "summable ?X ==>
      of_complex (\<Sum>n. ?X n) = (\<Sum>n. of_complex (?X n))",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces.scaleC_cindependent",
     "[| cindependent ?B; ?c ~= 0 |]
      ==> cindependent ((*\<^sub>C) ?c ` ?B)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_var 1))
               )
           ))),
    ("Complex_Vector_Spaces0.scaleC_left_mono_neg",
     "[| ?b <= ?a; ?c <= 0 |] ==> ?c *\<^sub>C ?a <= ?c *\<^sub>C ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Complex_Vector_Spaces0.scaleC_right_mono_neg",
     "[| ?b <= ?a; ?c <= (0::?'a) |]
      ==> ?a *\<^sub>C ?c <= ?b *\<^sub>C ?c",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex_Vector_Spaces0.Complexs_cases",
     "[| ?q : \<complex>; !!c. ?q = of_complex c ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces0.clinear_injective_0",
     "linear ?f ==> inj ?f = (ALL x. ?f x = (0::?'b) --> x = (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0), template_hole 6),
         template_app (template_hole 5, t_empty)))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==> (?a = ?b /\<^sub>C ?c) = (?c *\<^sub>C ?a = ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_bimplication
        (template_equation
          (template_var 1,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==> (?b /\<^sub>C ?c = ?a) = (?b = ?c *\<^sub>C ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0),
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Complex_Vector_Spaces0.sum_in_Complexs",
     "(!!i. i : ?s ==> ?f i : \<complex>) ==> sum ?f ?s : \<complex>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.prod_in_Complexs",
     "(!!i. i : ?s ==> ?f i : \<complex>) ==> prod ?f ?s : \<complex>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces.bounded_sesquilinear_diff",
     "[| bounded_sesquilinear ?A; bounded_sesquilinear ?B |]
      ==> bounded_sesquilinear (%x y. ?A x y - ?B x y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces.bounded_sesquilinear_add",
     "[| bounded_sesquilinear ?A; bounded_sesquilinear ?B |]
      ==> bounded_sesquilinear (%x y. ?A x y + ?B x y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.clinear_imp_scaleC",
     "[| clinear ?D; !!d. ?D = (%x. x *\<^sub>C d) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces0.scaleC_right_imp_eq",
     "[| ?x ~= (0::?'a); ?a *\<^sub>C ?x = ?b *\<^sub>C ?x |] ==> ?a = ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Vector_Spaces0.scaleC_left_imp_eq",
     "[| ?a ~= 0; ?a *\<^sub>C ?x = ?a *\<^sub>C ?y |] ==> ?x = ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "(?a = ?b /\<^sub>C ?c) =
      (if ?c = 0 then ?a = (0::?'a) else ?c *\<^sub>C ?a = ?b)",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 2)),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "(?b /\<^sub>C ?c = ?a) =
      (if ?c = 0 then ?a = (0::?'a) else ?b = ?c *\<^sub>C ?a)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 0)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.scaleC_eq_iff",
     "(?b + ?u *\<^sub>C ?a = ?a + ?u *\<^sub>C ?b) = (?a = ?b | ?u = 1)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Complex_Vector_Spaces0.neg_less_minus_divideC_eq",
     "?c < 0 ==> (?a < - (?b /\<^sub>C ?c)) = (- ?b < ?c *\<^sub>C ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Vector_Spaces0.neg_minus_divideC_less_eq",
     "?c < 0 ==> (- (?b /\<^sub>C ?c) < ?a) = (?c *\<^sub>C ?a < - ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Complex_Vector_Spaces0.neg_le_minus_divideC_eq",
     "?c < 0 ==> (?a <= - (?b /\<^sub>C ?c)) = (- ?b <= ?c *\<^sub>C ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Vector_Spaces0.neg_minus_divideC_le_eq",
     "?c < 0 ==> (- (?b /\<^sub>C ?c) <= ?a) = (?c *\<^sub>C ?a <= - ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Complex_Vector_Spaces.suminf_scaleC_right",
     "summable ?X ==>
      ?c *\<^sub>C (\<Sum>n. ?X n) = (\<Sum>n. ?c *\<^sub>C ?X n)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, t_empty)),
         template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces.suminf_scaleC_left",
     "summable ?X ==>
      (\<Sum>n. ?X n) *\<^sub>C ?x = (\<Sum>n. ?X n *\<^sub>C ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0),
         template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces.vector_finitely_spanned",
     "?z : cspan ?T ==> EX S. finite S & S <= ?T & ?z : cspan S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Complex_Vector_Spaces.antilinear_imp_scaleC",
     "[| antilinear ?D; !!d. ?D = (%x. cnj x *\<^sub>C d) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces.complex_antilinearD",
     "[| antilinear ?f; !!c. ?f = (%x. c * cnj x) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces.cindependent_inter_scaleC_cindependent",
     "[| cindependent ?B; ?c ~= 1 |] ==> ?B Int (*\<^sub>C) ?c ` ?B = {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 1))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 1)),
         template_hole 0))),
    ("Complex_Vector_Spaces.closed_sum_is_sup",
     "[| closed_csubspace ?C; ?A <= ?C; ?B <= ?C |]
      ==> ?A +\<^sub>M ?B <= ?C",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "?a - ?b /\<^sub>C ?c =
      (if ?c = 0 then ?a else (?c *\<^sub>C ?a - ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2)),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "?a + ?b /\<^sub>C ?c =
      (if ?c = 0 then ?a else (?c *\<^sub>C ?a + ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2)),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "?a /\<^sub>C ?c + ?b =
      (if ?c = 0 then ?b else (?a + ?c *\<^sub>C ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces.closure_image_closed_sum",
     "bounded_linear ?U ==>
      closure (?U ` (?A +\<^sub>M ?B)) =
      closure (?U ` ?A) +\<^sub>M closure (?U ` ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.bounded_clinear_sum",
     "(!!i. i : ?I ==> bounded_clinear (?f i)) ==>
      bounded_clinear (%x. SUM i:?I. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "?a /\<^sub>C ?c - ?b =
      (if ?c = 0 then - ?b else (?a - ?c *\<^sub>C ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.fraction_scaleC_times",
     "(numeral ?u / numeral ?v) *\<^sub>C (numeral ?w * ?a) =
      (numeral ?u * numeral ?w / numeral ?v) *\<^sub>C ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 3)),
             template_app (template_hole 3, template_var 2))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 3, template_var 1))),
             template_app (template_hole 3, template_var 2))),
         template_var 0))),
    ("Complex_Vector_Spaces0.cle_add_iff2",
     "(?a *\<^sub>C ?e + ?c <= ?b *\<^sub>C ?e + ?d) =
      (?c <= (?b - ?a) *\<^sub>C ?e + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3)),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 4)),
               template_var 3)),
           template_var 0)))),
    ("Complex_Vector_Spaces0.cle_add_iff1",
     "(?a *\<^sub>C ?e + ?c <= ?b *\<^sub>C ?e + ?d) =
      ((?a - ?b) *\<^sub>C ?e + ?c <= ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)),
                 template_var 3)),
             template_var 2)),
         template_var 0))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      ?a - ?b /\<^sub>C ?c = (?c *\<^sub>C ?a - ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      ?a /\<^sub>C ?c - ?b = (?a - ?c *\<^sub>C ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      ?a + ?b /\<^sub>C ?c = (?c *\<^sub>C ?a + ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      ?a /\<^sub>C ?c + ?b = (?a + ?c *\<^sub>C ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces.bounded_linear_bounded_clinear",
     "[| bounded_linear ?A;
         ALL c x. ?A (c *\<^sub>C x) = c *\<^sub>C ?A x |]
      ==> bounded_clinear ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.nonzero_Complexs_divide",
     "[| ?a : \<complex>; ?b : \<complex>; ?b ~= (0::?'a) |]
      ==> ?a / ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 4)
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "- (?a /\<^sub>C ?c) + ?b =
      (if ?c = 0 then ?b else (- ?a + ?c *\<^sub>C ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.ceq_vector_fraction_iff",
     "(?x = (?u / ?v) *\<^sub>C ?a) =
      (if ?v = 0 then ?x = (0::?'a)
       else ?v *\<^sub>C ?x = ?u *\<^sub>C ?a)",
     template_bimplication
      (template_equation
        (template_var 3,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 3)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.cvector_fraction_eq_iff",
     "((?u / ?v) *\<^sub>C ?a = ?x) =
      (if ?v = 0 then ?x = (0::?'a)
       else ?u *\<^sub>C ?a = ?v *\<^sub>C ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.split_scaleC_pos_le",
     "0 <= ?a & (0::?'a) <= ?b | ?a <= 0 & ?b <= (0::?'a) ==>
      (0::?'a) <= ?a *\<^sub>C ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 0))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_hole 3)),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)))
            )],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.split_scaleC_neg_le",
     "0 <= ?a & ?x <= (0::?'a) | ?a <= 0 & (0::?'a) <= ?x ==>
      ?a *\<^sub>C ?x <= (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 2, template_var 0),
                    template_hole 1))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_hole 3)),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Complex_Vector_Spaces0.nonzero_inverse_scaleC_distrib",
     "[| ?a ~= 0; ?x ~= (0::?'a) |]
      ==> inverse (?a *\<^sub>C ?x) = inverse ?x /\<^sub>C ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Complex_Vector_Spaces.isomorphic_equal_cdim",
     "[| clinear ?f; inj_on ?f (cspan ?S); ?f ` ?S = ?T |]
      ==> cdim ?S = cdim ?T",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "?v - (?b / ?z) *\<^sub>C ?w =
      (if ?z = 0 then ?v
       else (?z *\<^sub>C ?v - ?b *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_var 3),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "- (?a /\<^sub>C ?c) - ?b =
      (if ?c = 0 then - ?b else (- ?a - ?c *\<^sub>C ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "?v + (?b / ?z) *\<^sub>C ?w =
      (if ?z = 0 then ?v
       else (?z *\<^sub>C ?v + ?b *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_var 3),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "(?a / ?z) *\<^sub>C ?v + ?w =
      (if ?z = 0 then ?w
       else (?a *\<^sub>C ?v + ?z *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_var 0),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      - (?a /\<^sub>C ?c) - ?b = (- ?a - ?c *\<^sub>C ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      - (?a /\<^sub>C ?c) + ?b = (- ?a + ?c *\<^sub>C ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.clinear_injective_on_subspace_0",
     "[| linear ?f; subspace ?s |]
      ==> inj_on ?f ?s = (ALL x:?s. ?f x = (0::?'b) --> x = (0::?'a))",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 5, template_var 0), t_empty)))),
    ("Complex_Vector_Spaces.finite_span_complete_aux",
     "[| type_definition ?rep ?abs ?B; finite ?B; ?b : ?B; independent ?B |]
      ==> uniform_space_class.complete (span ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "(?a / ?z) *\<^sub>C ?v - ?w =
      (if ?z = 0 then - ?w
       else (?a *\<^sub>C ?v - ?z *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_hole 2)),
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 0, template_var 2)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces.isCont_scaleC",
     "[| isCont ?f ?a; isCont ?g ?a |]
      ==> isCont (%x. ?f x *\<^sub>C ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2)),
             t_empty)
           ))),
    ("Complex_Vector_Spaces0.complex_vector_eq_affinity",
     "?m ~= 0 ==>
      (?y = ?m *\<^sub>C ?x + ?c) =
      (?y /\<^sub>C ?m - ?c /\<^sub>C ?m = ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6))],
       template_bimplication
        (template_equation
          (template_var 2,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_var 0)),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 3)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 3)),
               template_var 0)),
           template_var 1)))),
    ("Complex_Vector_Spaces0.complex_vector_affinity_eq",
     "?m ~= 0 ==>
      (?m *\<^sub>C ?x + ?c = ?y) =
      (?x = ?y /\<^sub>C ?m - ?c /\<^sub>C ?m)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_equation
          (template_var 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 3)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 3)),
               template_var 1)))))),
    ("Complex_Vector_Spaces.cbilinear_times",
     "[| !!x y. ?h x y = ?g' x * ?g y; clinear ?g; clinear ?g' |]
      ==> cbilinear ?h",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("Complex_Vector_Spaces.tendsto_scaleC",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. ?f x *\<^sub>C ?g x) \<longlongrightarrow> ?a *\<^sub>C ?b)
           ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Complex_Vector_Spaces0.scaleC_le_cancel_left",
     "?c : \<real> ==>
      (?c *\<^sub>C ?a <= ?c *\<^sub>C ?b) =
      ((0 < ?c --> ?a <= ?b) & (?c < 0 --> ?b <= ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 1)))))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "?a *\<^sub>C ?v - (?b / ?z) *\<^sub>C ?w =
      (if ?z = 0 then ?a *\<^sub>C ?v
       else ((?a * ?z) *\<^sub>C ?v - ?b *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 1)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "?a *\<^sub>C ?v + (?b / ?z) *\<^sub>C ?w =
      (if ?z = 0 then ?a *\<^sub>C ?v
       else ((?a * ?z) *\<^sub>C ?v + ?b *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 1)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "(?a / ?z) *\<^sub>C ?v + ?b *\<^sub>C ?w =
      (if ?z = 0 then ?b *\<^sub>C ?w
       else (?a *\<^sub>C ?v + (?b * ?z) *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_hole 2)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 3)),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces.finite_span_representation_bounded",
     "[| finite ?B; independent ?B |]
      ==> EX D>0.
             ALL \<psi> b.
                \<bar>representation ?B \<psi> b\<bar> <= norm \<psi> * D",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 0))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Complex_Vector_Spaces.finite_cspan_crepresentation_bounded",
     "[| finite ?B; cindependent ?B |]
      ==> EX D>0.
             ALL \<psi> b.
                cmod (crepresentation ?B \<psi> b) <= norm \<psi> * D",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 0))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "(?a / ?z) *\<^sub>C ?v - ?b *\<^sub>C ?w =
      (if ?z = 0 then - ?b *\<^sub>C ?w
       else (?a *\<^sub>C ?v - (?b * ?z) *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 2, template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 1, template_var 3)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 4),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 3)),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.cCauchy_iff2",
     "Cauchy ?X =
      (ALL j.
          EX M. ALL m>=M.
                   ALL n>=M. cmod (?X m - ?X n) < inverse (real (Suc j)))",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app (template_hole 9, t_empty))),
    ("Complex_Vector_Spaces0.zero_le_scaleC_iff",
     "?a : \<real> ==>
      ((0::?'a) <= ?a *\<^sub>C ?b) =
      (0 < ?a & (0::?'a) <= ?b | ?a < 0 & ?b <= (0::?'a) | ?a = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_hole 1)),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 1)))
             )))),
    ("Complex_Vector_Spaces0.scaleC_le_0_iff",
     "?a : \<real> ==>
      (?a *\<^sub>C ?b <= (0::?'a)) =
      (0 < ?a & ?b <= (0::?'a) | ?a < 0 & (0::?'a) <= ?b | ?a = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0)),
                template_hole 5)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 5))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_hole 1)),
                     template_app
                      (template_app (template_hole 7, template_hole 5),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 1)))
             )))),
    ("Complex_Vector_Spaces0.clinear_iff",
     "clinear ?f =
      ((ALL x y. ?f (x + y) = ?f x + ?f y) &
       (ALL c x. ?f (c *\<^sub>C x) = c *\<^sub>C ?f x))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?a < ?b /\<^sub>C ?c) =
      (if 0 < ?c then ?c *\<^sub>C ?a < ?b
       else if ?c < 0 then ?b < ?c *\<^sub>C ?a else ?a < (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?b /\<^sub>C ?c < ?a) =
      (if 0 < ?c then ?b < ?c *\<^sub>C ?a
       else if ?c < 0 then ?c *\<^sub>C ?a < ?b else (0::?'a) < ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 0),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?a <= ?b /\<^sub>C ?c) =
      (if 0 < ?c then ?c *\<^sub>C ?a <= ?b
       else if ?c < 0 then ?b <= ?c *\<^sub>C ?a else ?a <= (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?b /\<^sub>C ?c <= ?a) =
      (if 0 < ?c then ?b <= ?c *\<^sub>C ?a
       else if ?c < 0 then ?c *\<^sub>C ?a <= ?b else (0::?'a) <= ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 0),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.clinearI",
     "[| !!b1 b2. ?f (b1 + b2) = ?f b1 + ?f b2;
         !!r b. ?f (r *\<^sub>C b) = r *\<^sub>C ?f b |]
      ==> clinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.antilinearI",
     "[| !!x y. ?f (x + y) = ?f x + ?f y;
         !!c x. ?f (c *\<^sub>C x) = cnj c *\<^sub>C ?f x |]
      ==> antilinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.bounded_antilinear_eq_on",
     "[| bounded_antilinear ?A; bounded_antilinear ?B;
         !!x. x : ?G ==> ?A x = ?B x; ?t : closure (cspan ?G) |]
      ==> ?A ?t = ?B ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            )],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("Complex_Vector_Spaces.bounded_clinear_eq_on",
     "[| bounded_clinear ?A; bounded_clinear ?B;
         !!x. x : ?G ==> ?A x = ?B x; ?t : closure (cspan ?G) |]
      ==> ?A ?t = ?B ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            )],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?a < - (?b /\<^sub>C ?c)) =
      (if 0 < ?c then ?c *\<^sub>C ?a < - ?b
       else if ?c < 0 then - ?b < ?c *\<^sub>C ?a else ?a < (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (- (?b /\<^sub>C ?c) < ?a) =
      (if 0 < ?c then - ?b < ?c *\<^sub>C ?a
       else if ?c < 0 then ?c *\<^sub>C ?a < - ?b else (0::?'a) < ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app (template_hole 5, template_hole 0),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?a <= - (?b /\<^sub>C ?c)) =
      (if 0 < ?c then ?c *\<^sub>C ?a <= - ?b
       else if ?c < 0 then - ?b <= ?c *\<^sub>C ?a else ?a <= (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (- (?b /\<^sub>C ?c) <= ?a) =
      (if 0 < ?c then - ?b <= ?c *\<^sub>C ?a
       else if ?c < 0 then ?c *\<^sub>C ?a <= - ?b else (0::?'a) <= ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app (template_hole 5, template_hole 0),
               template_var 0)))))),
    ("Complex_Vector_Spaces.has_derivative_scaleC",
     "[| (?f has_derivative ?f') (at ?x within ?s);
         (?g has_derivative ?g') (at ?x within ?s) |]
      ==> ((%x. ?f x *\<^sub>C ?g x) has_derivative
           (%h. ?f ?x *\<^sub>C ?g' h + ?f' h *\<^sub>C ?g ?x))
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), t_empty),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2))
           ))),
    ("Complex_Vector_Spaces.finite_span_complete_aux",
     "[| type_definition ?rep ?abs ?B; finite ?B; ?b : ?B; independent ?B |]
      ==> EX D>0.
             ALL \<psi>.
                norm (representation ?B \<psi> ?b) <= norm \<psi> * D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 1))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Complex_Vector_Spaces0.complex_increasing_LIMSEQ",
     "[| !!n. ?f n <= ?f (Suc n); !!n. ?f n <= ?l;
         !!e. 0 < e ==> EX n. ?l <= ?f n + e |]
      ==> ?f \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Complex_Vector_Spaces.crepresentation_from_representation",
     "[| cindependent ?B; ?b : ?B; finite ?B |]
      ==> crepresentation ?B ?\<psi> ?b =
          complex_of_real
           (representation (?B Un (*\<^sub>C) \<i> ` ?B) ?\<psi> ?b) +
          \<i> *\<^sub>C
          complex_of_real
           (representation (?B Un (*\<^sub>C) \<i> ` ?B) ?\<psi>
             (\<i> *\<^sub>C ?b))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_hole 1)),
                         template_var 2))),
                   template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_hole 1)),
                         template_var 2))),
                   template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)))))))),
    ("Complex_Vector_Spaces.bounded_clinearI",
     "[| !!b1 b2. ?f (b1 + b2) = ?f b1 + ?f b2;
         !!r b. ?f (r *\<^sub>C b) = r *\<^sub>C ?f b;
         ALL x. norm (?f x) <= norm x * ?K |]
      ==> bounded_clinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Vector_Spaces0.bounded_clinear_intro",
     "[| !!x y. ?f (x + y) = ?f x + ?f y;
         !!r x. ?f (r *\<^sub>C x) = r *\<^sub>C ?f x;
         !!x. norm (?f x) <= norm x * ?K |]
      ==> bounded_clinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Vector_Spaces.bounded_antilinearI",
     "[| !!b1 b2. ?f (b1 + b2) = ?f b1 + ?f b2;
         !!r b. ?f (r *\<^sub>C b) = cnj r *\<^sub>C ?f b;
         ALL x. norm (?f x) <= norm x * ?K |]
      ==> bounded_antilinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Vector_Spaces.bounded_antilinear_intro",
     "[| !!x y. ?f (x + y) = ?f x + ?f y;
         !!r x. ?f (r *\<^sub>C x) = cnj r *\<^sub>C ?f x;
         !!x. norm (?f x) <= norm x * ?K |]
      ==> bounded_antilinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1))))]
