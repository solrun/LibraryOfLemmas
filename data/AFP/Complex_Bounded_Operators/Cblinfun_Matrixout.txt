Loading theory "Complex_Bounded_Operators.Extra_Lattice" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom" via "HOL-Library.Multiset")
bundle lattice_notation
bundle no_lattice_notation
### theory "HOL-Combinatorics.Transposition"
### 0.124s elapsed time, 0.515s cpu time, 0.032s GC time
Loading theory "HOL-Library.FuncSet" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Disjoint_Sets")
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
class complemented_lattice = minus + uminus + bounded_lattice +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = \<bottom>"
    and "sup_compl_top": "!!x. x \<squnion> - x = \<top>"
    and "diff_eq": "!!x y. x - y = x \<sqinter> - y"
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.422s elapsed time, 1.693s cpu time, 0.149s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
### theory "HOL-Library.FuncSet"
### 0.502s elapsed time, 1.847s cpu time, 0.505s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 0.903s elapsed time, 3.452s cpu time, 0.618s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
### theory "HOL-Library.Disjoint_Sets"
### 0.249s elapsed time, 0.978s cpu time, 0.122s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
class orthocomplemented_lattice = complemented_lattice +
  assumes "ortho_involution": "!!x. - (- x) = x"
    and "ortho_antimono": "!!x y. x <= y ==> - y <= - x"
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.444s cpu time, 0.083s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set")
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Algebra.Congruence"
### 0.689s elapsed time, 2.701s cpu time, 0.286s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
consts
  enumerate :: "'a set => nat => 'a"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
### theory "HOL-Library.Infinite_Set"
### 0.422s elapsed time, 1.539s cpu time, 0.537s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Polynomial")
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### theory "HOL-Library.More_List"
### 0.160s elapsed time, 0.632s cpu time, 0.064s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Found termination order: "size_list size <*mlex*> {}"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.319s cpu time, 0.168s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
### theory "HOL-Algebra.Order"
### 1.037s elapsed time, 3.962s cpu time, 0.867s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class orthomodular_lattice = orthocomplemented_lattice +
  assumes
    "orthomodular": "!!x y. x <= y ==> x \<squnion> - x \<sqinter> y = y"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
consts
  flat :: "'a list stream => 'a stream"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.260s elapsed time, 4.756s cpu time, 1.375s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.163s elapsed time, 4.369s cpu time, 1.375s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct" via "HOL-Algebra.Group")
### theory "Complex_Bounded_Operators.Extra_Lattice"
### 3.602s elapsed time, 13.737s cpu time, 3.064s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.451s elapsed time, 1.799s cpu time, 0.219s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology" via "HOL-Analysis.Product_Vector")
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
### theory "HOL-Library.Product_Plus"
### 0.144s elapsed time, 0.570s cpu time, 0.156s GC time
Loading theory "HOL-Library.Rewrite" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Bounded_Linear_Function0" via "Draft.Complex_Euclidean_Space0")
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
infix 1 then_cconv
infix 0 else_cconv
type cconv = conv
signature BASIC_CCONV =
  sig
    val CCONVERSION: cconv -> int -> tactic
    type cconv = conv
    val else_cconv: cconv * cconv -> cconv
    val then_cconv: cconv * cconv -> cconv
  end
signature CCONV =
  sig
    val CCONVERSION: cconv -> int -> tactic
    val abs_cconv:
       (cterm * Proof.context -> cconv) -> Proof.context -> cconv
    val all_cconv: cconv
    val arg1_cconv: cconv -> cconv
    val arg_cconv: cconv -> cconv
    type cconv = conv
    val comb_cconv: cconv -> cconv
    val combination_cconv: cconv -> cconv -> cconv
    val concl_cconv: int -> cconv -> cconv
    val else_cconv: cconv * cconv -> cconv
    val fconv_rule: cconv -> thm -> thm
    val first_cconv: cconv list -> cconv
    val fun2_cconv: cconv -> cconv
    val fun_cconv: cconv -> cconv
    val gconv_rule: cconv -> int -> thm -> thm
    val no_cconv: cconv
    val params_cconv:
       int -> (Proof.context -> cconv) -> Proof.context -> cconv
    val prems_cconv: int -> cconv -> cconv
    val rewr_cconv: thm -> cconv
    val rewrs_cconv: thm list -> cconv
    val then_cconv: cconv * cconv -> cconv
    val with_prems_cconv: int -> cconv -> cconv
  end
structure CConv: CCONV
structure Basic_CConv: BASIC_CCONV
val then_cconv = fn: cconv * cconv -> cconv
val CCONVERSION = fn: cconv -> int -> tactic
val else_cconv = fn: cconv * cconv -> cconv
### theory "HOL-Library.Phantom_Type"
### 0.618s elapsed time, 2.462s cpu time, 0.374s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type")
### Additional type variable(s) in locale specification "CARD_1": 'a
### theory "HOL-Algebra.Complete_Lattice"
### 0.776s elapsed time, 3.079s cpu time, 0.507s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring" via "HOL-Algebra.FiniteProduct")
infix 1 then_pconv
infix 0 else_pconv
signature REWRITE =
  sig
    val abs_pconv: patconv -> string option * typ -> patconv
    val all_pconv: patconv
    val arg_pconv: patconv -> patconv
    val asm_pconv: patconv -> patconv
    val asms_pconv: patconv -> patconv
    val concl_pconv: patconv -> patconv
    val else_pconv: patconv * patconv -> patconv
    val for_pconv: patconv -> (string option * typ option) list -> patconv
    val forall_pconv: patconv -> string option * typ option -> patconv
    val fun_pconv: patconv -> patconv
    val imp_pconv: patconv -> patconv
    val in_pconv: patconv -> patconv
    val judgment_pconv: patconv -> patconv
    val match_pconv: patconv -> term * (string option * typ) list -> patconv
    val mk_hole: int -> typ -> term
    val params_pconv: patconv -> patconv
    type patconv =
       Proof.context -> Type.tyenv * (string * term) list -> cconv
    datatype ('a, 'b) pattern
    = Asm | At | Concl | For of 'b list | In | Term of 'a
    val rewrite_conv:
       Proof.context ->
         (term * (string * typ) list, string * typ option) pattern list *
         term option
           -> thm list -> conv
    val rewrs_pconv: term option -> thm list -> patconv
    val then_pconv: patconv * patconv -> patconv
  end
structure Rewrite: REWRITE
### theory "HOL-Library.Rewrite"
### 0.241s elapsed time, 0.958s cpu time, 0.133s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
### Additional type variable(s) in locale specification "card2": 'a
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
### theory "HOL-Library.Set_Algebras"
### 0.241s elapsed time, 0.951s cpu time, 0.130s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Proofs for inductive predicate(s) "rel_mset'"
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
  Proving monotonicity ...
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
### theory "HOL-Library.Multiset"
### 4.301s elapsed time, 16.494s cpu time, 3.671s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Polynomial_Interpolation.Ring_Hom")
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.817s elapsed time, 3.238s cpu time, 0.499s GC time
Loading theory "HOL-Combinatorics.Permutations" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "Jordan_Normal_Form.Missing_Misc")
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "swapidseq"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
Found termination order: "size <*mlex*> {}"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
Found termination order: "size <*mlex*> {}"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size_list size (fst p)) <*mlex*> {}"
### theory "HOL-Algebra.Group"
### 1.738s elapsed time, 6.897s cpu time, 0.895s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
### theory "HOL-Combinatorics.Permutations"
### 1.055s elapsed time, 4.183s cpu time, 0.528s GC time
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring" via "HOL-Algebra.Ring")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Proofs for inductive predicate(s) "foldSetDp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Algebra.FiniteProduct"
### 0.537s elapsed time, 2.121s cpu time, 0.324s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "HOL-Library.Tree"
### 2.237s elapsed time, 8.861s cpu time, 1.196s GC time
Loading theory "Jordan_Normal_Form.Missing_Misc" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix" via "Jordan_Normal_Form.Missing_Ring")
### theory "Jordan_Normal_Form.Missing_Misc"
### 0.096s elapsed time, 0.382s cpu time, 0.000s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
### Cannot skip proof of schematic goal statement
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
### Cannot skip proof of schematic goal statement
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
### theory "HOL-Algebra.Coset"
### 1.400s elapsed time, 5.541s cpu time, 0.799s GC time
Loading theory "Draft.Templates" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.ExtrEqs")
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.273s cpu time, 0.000s GC time
Loading theory "HOL-Types_To_Sets.Types_To_Sets" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces")
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
signature LOCAL_TYPEDEF =
  sig
    val cancel_type_definition: thm -> thm
    val cancel_type_definition_attr: attribute
  end
structure Local_Typedef: LOCAL_TYPEDEF
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
signature UNOVERLOADING =
  sig
    val unoverload: cterm -> thm -> thm
    val unoverload_attr: cterm -> attribute
  end
structure Unoverloading: UNOVERLOADING
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
signature INTERNALIZE_SORT =
  sig
    val internalize_sort: ctyp -> thm -> typ * thm
    val internalize_sort_attr: typ -> attribute
  end
structure Internalize_Sort: INTERNALIZE_SORT
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
### ML warning (line 41 of "~~/src/HOL/Types_To_Sets/unoverload_type.ML"):
### Matches are not exhaustive.
signature UNOVERLOAD_TYPE =
  sig
    val unoverload_type: Context.generic -> indexname list -> thm -> thm
    val unoverload_type_attr: indexname list -> attribute
  end
structure Unoverload_Type: UNOVERLOAD_TYPE
### theory "HOL-Library.Numeral_Type"
### 0.823s elapsed time, 3.261s cpu time, 0.453s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set")
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### ML warning (line 36 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
### ML warning (line 36 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Value identifier (ctxt') has not been referenced.
### ML warning (line 40 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
### ML warning (line 66 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
structure Unoverload_Def:
  sig
    val unoverload_def: binding option -> thm -> theory -> theory
    val unoverload_def1_cmd:
       binding option * (Facts.ref * Token.src list) -> theory -> theory
  end
### theory "HOL-Types_To_Sets.Types_To_Sets"
### 0.279s elapsed time, 1.107s cpu time, 0.086s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### Additional type variable(s) in locale specification "countable": 'a
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
### theory "HOL-Analysis.Metric_Arith"
### 0.617s elapsed time, 2.449s cpu time, 0.146s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
### theory "HOL-Library.Countable"
### 1.157s elapsed time, 4.588s cpu time, 0.313s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms")
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Countable_Set"
### 0.470s elapsed time, 1.866s cpu time, 0.209s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
bundle inner_syntax
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.064s elapsed time, 4.215s cpu time, 0.376s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology")
### theory "HOL-Algebra.Ring"
### 2.899s elapsed time, 11.497s cpu time, 1.082s GC time
Loading theory "HOL-Algebra.Module" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix")
### theory "HOL-Library.Set_Idioms"
### 0.294s elapsed time, 1.163s cpu time, 0.106s GC time
Loading theory "Jordan_Normal_Form.Missing_Ring" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix")
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
### theory "HOL-Algebra.Module"
### 1.449s elapsed time, 5.742s cpu time, 0.516s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.185s elapsed time, 8.661s cpu time, 0.769s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Analysis.L2_Norm"
### 0.088s elapsed time, 0.353s cpu time, 0.000s GC time
Loading theory "HOL-Analysis.Operator_Norm" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces")
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 6.989s elapsed time, 27.708s cpu time, 2.914s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial" via "HOL-Computational_Algebra.Normalized_Fraction")
### theory "HOL-Analysis.Operator_Norm"
### 0.122s elapsed time, 0.473s cpu time, 0.093s GC time
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant")
class ordered_idom = ordered_semiring_strict + idom +
  assumes "zero_less_one": "(0::'a) < (1::'a)"
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.270s elapsed time, 5.023s cpu time, 0.645s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology")
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale csemiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "csemiring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
### theory "Jordan_Normal_Form.Missing_Ring"
### 3.757s elapsed time, 14.858s cpu time, 1.691s GC time
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial")
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
instantiation
  prod :: (metric_space, metric_space) metric_space
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
### theory "HOL-Analysis.Abstract_Topology"
### 2.703s elapsed time, 10.684s cpu time, 1.314s GC time
Loading theory "HOL-Analysis.Abstract_Limits" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.One_Dimensional_Spaces" via "Complex_Bounded_Operators.Extra_Operator_Norm" via "HOL-Analysis.Bounded_Linear_Function" via "HOL-Analysis.Function_Topology")
### theory "HOL-Analysis.Abstract_Limits"
### 1.078s elapsed time, 3.944s cpu time, 3.013s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.ExtrEqs")
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 1.839s elapsed time, 6.939s cpu time, 3.433s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces")
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
consts
  Poly :: "'a list => 'a poly"
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
### theory "HOL-Library.BigO"
### 0.811s elapsed time, 3.216s cpu time, 0.250s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Analysis.Elementary_Topology"
### 2.026s elapsed time, 7.992s cpu time, 0.759s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Cblinfun_MatrixMoreTemplates")
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
### theory "HOL-Analysis.Euclidean_Space"
### 1.736s elapsed time, 6.843s cpu time, 0.698s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.698s elapsed time, 2.750s cpu time, 0.267s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
bundle vec_syntax
bundle no_vec_syntax
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
### theory "HOL-Analysis.Linear_Algebra"
### 1.034s elapsed time, 4.052s cpu time, 0.469s GC time
Loading theory "HOL-Analysis.Affine" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex")
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 1.725s elapsed time, 6.772s cpu time, 0.798s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Analysis.Affine"
### 0.514s elapsed time, 2.009s cpu time, 0.345s GC time
Loading theory "HOL-Analysis.Convex" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike" via "HOL-Analysis.Convex_Euclidean_Space")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Analysis.Convex"
### 2.065s elapsed time, 7.796s cpu time, 4.320s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General")
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### theory "HOL-Library.Complex_Order"
### 0.060s elapsed time, 0.237s cpu time, 0.000s GC time
Loading theory "Complex_Bounded_Operators.Extra_Ordered_Fields" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces")
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 8.154s elapsed time, 31.478s cpu time, 9.550s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Complex_Bounded_Operators.Extra_Jordan_Normal_Form" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
### theory "HOL-Analysis.Cartesian_Space"
### 2.766s elapsed time, 10.543s cpu time, 4.736s GC time
Loading theory "Draft.Complex_Vector_Spaces0" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces")
class scaleC = scaleR +
  fixes scaleC :: "complex => 'a => 'a"
  assumes
    "scaleR_scaleC": "!!r. (*\<^sub>R) r = (*\<^sub>C) (complex_of_real r)"
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.295s elapsed time, 1.158s cpu time, 0.180s GC time
Loading theory "Jordan_Normal_Form.Conjugate" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix")
class conjugate = type +
  fixes conjugate :: "'a => 'a"
  assumes "conjugate_id": "!!a. conjugate (conjugate a) = a"
    and
    "conjugate_cancel_iff": "!!a b. (conjugate a = conjugate b) = (a = b)"
class complex_vector = scaleC + ab_group_add +
  assumes
    "scaleC_add_right":
      "!!a x y. a *\<^sub>C (x + y) = a *\<^sub>C x + a *\<^sub>C y"
    and
    "scaleC_add_left":
      "!!a b x. (a + b) *\<^sub>C x = a *\<^sub>C x + b *\<^sub>C x"
    and
    "scaleC_scaleC":
      "!!a b x. a *\<^sub>C b *\<^sub>C x = (a * b) *\<^sub>C x"
    and "scaleC_one": "!!x. 1 *\<^sub>C x = x"
class partial_abs_if = abs + minus + uminus + zero + ord +
  assumes "abs_neg": "!!a. a <= (0::'a) ==> \<bar>a\<bar> = - a"
  assumes "abs_pos": "!!a. (0::'a) <= a ==> \<bar>a\<bar> = a"
class conjugatable_ring = conjugate + ring +
  assumes
    "conjugate_dist_mul":
      "!!a b. conjugate (a * b) = conjugate a * conjugate b"
    and
    "conjugate_dist_add":
      "!!a b. conjugate (a + b) = conjugate a + conjugate b"
    and "conjugate_neg": "!!a. conjugate (- a) = - conjugate a"
    and "conjugate_zero": "conjugate (0::'a) = (0::'a)"
class complex_algebra = complex_vector + ring +
  assumes
    "mult_scaleC_left": "!!a x y. a *\<^sub>C x * y = a *\<^sub>C (x * y)"
    and
    "mult_scaleC_right": "!!x a y. x * a *\<^sub>C y = a *\<^sub>C (x * y)"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 11.616s elapsed time, 45.124s cpu time, 10.951s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "HOL-Computational_Algebra.Polynomial_Factorial")
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
class conjugatable_ordered_ring = conjugatable_ring +
  ordered_comm_monoid_add +
  assumes "conjugate_square_positive": "!!a. (0::'a) <= a * conjugate a"
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.470s elapsed time, 1.865s cpu time, 0.103s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant")
### Cannot skip proof of schematic goal statement
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
instantiation
  complex :: conjugatable_ordered_field
  conjugate_complex == conjugate :: complex => complex
instantiation
  real :: conjugatable_ordered_field
  conjugate_real == conjugate :: real => real
instantiation
  rat :: conjugatable_ordered_field
  conjugate_rat == conjugate :: rat => rat
instantiation
  int :: conjugatable_ordered_ring
  conjugate_int == conjugate :: int => int
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.073s elapsed time, 4.209s cpu time, 0.274s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Complex_Bounded_Operators.Extra_Jordan_Normal_Form" via "Jordan_Normal_Form.Schur_Decomposition")
### theory "Jordan_Normal_Form.Conjugate"
### 2.851s elapsed time, 11.221s cpu time, 0.713s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Discrete"
### 0.165s elapsed time, 0.646s cpu time, 0.057s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### theory "HOL-Library.Indicator_Function"
### 0.417s elapsed time, 1.634s cpu time, 0.166s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
instantiation
  complex :: complex_field
  scaleC_complex == scaleC :: complex => complex => complex
class ordered_comm_semiring_strict = ordered_cancel_ab_semigroup_add +
  comm_semiring_0 +
  assumes
    "comm_mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
locale clinear
  fixes f :: "'a => 'b"
  assumes "clinear f"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 0.975s elapsed time, 3.826s cpu time, 0.398s GC time
Loading theory "Polynomial_Factorization.Order_Polynomial" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Complex_Bounded_Operators.Extra_Jordan_Normal_Form" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Char_Poly" via "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized")
### Cannot skip proof of schematic goal statement
### theory "Polynomial_Factorization.Order_Polynomial"
### 0.088s elapsed time, 0.351s cpu time, 0.000s GC time
Loading theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Complex_Bounded_Operators.Extra_Jordan_Normal_Form" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Char_Poly")
### Cannot skip proof of schematic goal statement
### theory "Polynomial_Factorization.Fundamental_Theorem_Algebra_Factorized"
### 0.349s elapsed time, 1.356s cpu time, 0.180s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
class ordered_complex_vector = complex_vector + ordered_ab_group_add +
  assumes
    "scaleC_left_mono":
      "!!x y a. [| x <= y; 0 <= a |] ==> a *\<^sub>C x <= a *\<^sub>C y"
    and
    "scaleC_right_mono":
      "!!a b x.
          [| a <= b; (0::'a) <= x |] ==> a *\<^sub>C x <= b *\<^sub>C x"
### theory "HOL-Analysis.Abstract_Topology_2"
### 1.341s elapsed time, 5.225s cpu time, 0.657s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Library.Liminf_Limsup"
### 0.523s elapsed time, 2.019s cpu time, 0.303s GC time
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Analysis.Connected"
### 0.310s elapsed time, 1.209s cpu time, 0.150s GC time
Loading theory "HOL-Analysis.Function_Topology" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.One_Dimensional_Spaces" via "Complex_Bounded_Operators.Extra_Operator_Norm" via "HOL-Analysis.Bounded_Linear_Function")
instantiation
  fun :: (type, topological_space) topological_space
  open_fun == open :: ('a => 'b) set => bool
class complex_normed_vector = complex_vector + real_normed_vector +
  assumes "norm_scaleC": "!!a x. norm (a *\<^sub>C x) = cmod a * norm x"
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
### theory "HOL-Analysis.Function_Topology"
### 0.747s elapsed time, 2.868s cpu time, 0.536s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
### theory "HOL-Library.Order_Continuity"
### 1.990s elapsed time, 7.489s cpu time, 5.272s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 3.275s elapsed time, 12.471s cpu time, 6.028s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces")
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.703s elapsed time, 2.767s cpu time, 0.239s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 1.417s elapsed time, 5.530s cpu time, 0.649s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Norm_Arith")
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
class nice_ordered_field = ordered_field + idom_abs_sgn + zero_less_one +
  assumes
    "positive_imp_inverse_positive":
      "!!a. (0::'a) < a ==> (0::'a) < inverse a"
    and
    "inverse_le_imp_le":
      "!!a b. [| inverse a <= inverse b; (0::'a) < a |] ==> b <= a"
    and "dense_le": "!!y z. (!!x. x < y ==> x <= z) ==> y <= z"
    and
    "nn_comparable":
      "!!a b. [| (0::'a) <= a; (0::'a) <= b |] ==> a <= b | b <= a"
    and "abs_nn": "!!x. (0::'a) <= \<bar>x\<bar>"
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
class complex_normed_vector = complex_vector + real_normed_vector +
  assumes "norm_scaleC": "!!a x. norm (a *\<^sub>C x) = cmod a * norm x"
instantiation
  complex :: complex_normed_field
### Code generator: dropping subsumed code equation
### uniformity ==
### Filter.abstract_filter
###  (%u. Code.abort STR ''uniformity is not executable'' (%u. uniformity))
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 1.426s elapsed time, 5.498s cpu time, 0.808s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space")
locale bounded_clinear
  fixes f :: "'a => 'b"
  assumes "bounded_clinear f"
locale bounded_cbilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_cbilinear (**)"
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
### theory "HOL-Analysis.Norm_Arith"
### 18.782s elapsed time, 62.363s cpu time, 61.212s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike" via "HOL-Analysis.Convex_Euclidean_Space")
### theory "HOL-Library.Extended_Real"
### 21.453s elapsed time, 72.730s cpu time, 62.525s GC time
Loading theory "HOL-Library.Extended_Nonnegative_Real" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Analysis.Extended_Real_Limits")
### theory "Draft.Complex_Vector_Spaces0"
### 30.452s elapsed time, 107.658s cpu time, 70.558s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Matrix")
instantiation
  ennreal :: complete_linorder
  Inf_ennreal == Inf :: ennreal set => ennreal
  Sup_ennreal == Sup :: ennreal set => ennreal
  bot_ennreal == bot :: ennreal
  sup_ennreal == sup :: ennreal => ennreal => ennreal
  top_ennreal == top :: ennreal
  inf_ennreal == inf :: ennreal => ennreal => ennreal
  less_eq_ennreal == less_eq :: ennreal => ennreal => bool
  less_ennreal == less :: ennreal => ennreal => bool
instantiation
  ennreal :: infinity
  infinity_ennreal == infinity :: ennreal
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
instantiation
  ennreal :: {comm_semiring_1,semiring_1_no_zero_divisors}
  zero_ennreal == zero_class.zero :: ennreal
  plus_ennreal == plus :: ennreal => ennreal => ennreal
  one_ennreal == one_class.one :: ennreal
  times_ennreal == times :: ennreal => ennreal => ennreal
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
instantiation
  ennreal :: minus
  minus_ennreal == minus :: ennreal => ennreal => ennreal
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
instantiation
  ennreal :: inverse
  inverse_ennreal == inverse :: ennreal => ennreal
  divide_ennreal == divide :: ennreal => ennreal => ennreal
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
structure Cancel_Ennreal_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
instantiation
  ennreal :: linear_continuum_topology
  open_ennreal == open :: ennreal set => bool
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
### theory "HOL-Library.Extended_Nonnegative_Real"
### 1.596s elapsed time, 6.321s cpu time, 0.474s GC time
Loading theory "HOL-Analysis.Infinite_Sum" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General")
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
instantiation
  complex :: nice_ordered_field
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
### theory "Complex_Bounded_Operators.Extra_Ordered_Fields"
### 32.643s elapsed time, 116.294s cpu time, 71.463s GC time
Loading theory "VectorSpace.FunctionLemmas" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace" via "VectorSpace.MonoidSums")
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 2.190s elapsed time, 8.667s cpu time, 0.746s GC time
Loading theory "HOL-Analysis.Convex_Euclidean_Space" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike")
### theory "VectorSpace.FunctionLemmas"
### 0.033s elapsed time, 0.129s cpu time, 0.000s GC time
Loading theory "HOL-Analysis.Extended_Real_Limits" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
### theory "HOL-Analysis.Convex_Euclidean_Space"
### 1.147s elapsed time, 4.516s cpu time, 0.689s GC time
Loading theory "HOL-Analysis.Line_Segment" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike")
### theory "HOL-Analysis.Extended_Real_Limits"
### 1.165s elapsed time, 4.590s cpu time, 0.689s GC time
Loading theory "HOL-Analysis.Summation_Tests" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit")
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
### theory "HOL-Analysis.Infinite_Sum"
### 1.602s elapsed time, 6.313s cpu time, 0.935s GC time
Loading theory "VectorSpace.RingModuleFacts" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
### theory "Polynomial_Interpolation.Ring_Hom"
### 3.248s elapsed time, 12.839s cpu time, 1.446s GC time
Loading theory "Jordan_Normal_Form.Matrix" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect")
### theory "VectorSpace.RingModuleFacts"
### 0.690s elapsed time, 2.728s cpu time, 0.385s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Complex_Bounded_Operators.Extra_Jordan_Normal_Form" via "Jordan_Normal_Form.Schur_Decomposition" via "Jordan_Normal_Form.Char_Poly")
### theory "HOL-Analysis.Summation_Tests"
### 0.943s elapsed time, 3.723s cpu time, 0.557s GC time
Loading theory "HOL-Analysis.Uniform_Limit" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General")
### theory "HOL-Analysis.Line_Segment"
### 0.990s elapsed time, 3.911s cpu time, 0.557s GC time
Loading theory "HOL-Analysis.Starlike" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces")
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
instantiation
  vec :: (plus) plus
  plus_vec == plus :: 'a vec => 'a vec => 'a vec
### theory "HOL-Analysis.Uniform_Limit"
### 0.670s elapsed time, 2.635s cpu time, 0.377s GC time
Loading theory "Complex_Bounded_Operators.Extra_General" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces")
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
instantiation
  vec :: (minus) minus
  minus_vec == minus :: 'a vec => 'a vec => 'a vec
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  vec :: (uminus) uminus
  uminus_vec == uminus :: 'a vec => 'a vec
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
instantiation
  vec :: (ord) ord
  less_eq_vec == less_eq :: 'a vec => 'a vec => bool
  less_vec == less :: 'a vec => 'a vec => bool
instantiation
  vec :: (preorder) preorder
instantiation
  vec :: (order) order
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
Found termination order: "{}"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
overloading
  heterogenous_identity_id \<equiv> heterogenous_identity :: 'a => 'a
instantiation
  mat :: (ord) ord
  less_eq_mat == less_eq :: 'a mat => 'a mat => bool
  less_mat == less :: 'a mat => 'a mat => bool
### Additional type variable(s) in locale specification "not_singleton": 'a
instantiation
  mat :: (preorder) preorder
instantiation
  mat :: (order) order
instantiation
  mat :: (plus) plus
  plus_mat == plus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (uminus) uminus
  uminus_mat == uminus :: 'a mat => 'a mat
class not_singleton = type +
  assumes "not_singleton_card": "EX x y. x ~= y"
instantiation
  mat :: (minus) minus
  minus_mat == minus :: 'a mat => 'a mat => 'a mat
instantiation
  mat :: (semiring_0) times
  times_mat == times :: 'a mat => 'a mat => 'a mat
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 1.931s elapsed time, 7.574s cpu time, 0.994s GC time
Loading theory "HOL-Analysis.Bounded_Linear_Function" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.One_Dimensional_Spaces" via "Complex_Bounded_Operators.Extra_Operator_Norm")
### theory "HOL-Analysis.Starlike"
### 1.908s elapsed time, 7.493s cpu time, 0.868s GC time
Loading theory "VectorSpace.MonoidSums" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### theory "VectorSpace.MonoidSums"
### 0.330s elapsed time, 1.295s cpu time, 0.090s GC time
Loading theory "VectorSpace.LinearCombinations" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
class CARD_1 = finite +
  assumes "CARD_1": "CARD('a) = 1"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Complex_Bounded_Operators.Extra_General"
### 2.039s elapsed time, 7.980s cpu time, 0.983s GC time
Loading theory "Complex_Bounded_Operators.Extra_Vector_Spaces" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0" via "Draft.Complex_Vector_Spaces")
Found termination order: "length <*mlex*> {}"
instantiation
  blinfun :: (real_normed_vector, real_normed_vector) real_normed_vector
  uminus_blinfun == uminus ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  zero_blinfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>L 'b
  minus_blinfun == minus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  plus_blinfun == plus ::
    'a \<Rightarrow>\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  sgn_blinfun == sgn ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  norm_blinfun == norm :: 'a \<Rightarrow>\<^sub>L 'b => real
  scaleR_blinfun == scaleR ::
    real => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
  dist_blinfun == dist ::
    'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b => real
  uniformity_blinfun == uniformity ::
    ('a \<Rightarrow>\<^sub>L 'b * 'a \<Rightarrow>\<^sub>L 'b) filter
  open_blinfun == open :: ('a \<Rightarrow>\<^sub>L 'b) set => bool
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
instantiation
  euclidean_space :: (type) real_vector
  uminus_euclidean_space == uminus ::
    'a euclidean_space => 'a euclidean_space
  zero_euclidean_space == zero_class.zero :: 'a euclidean_space
  minus_euclidean_space == minus ::
    'a euclidean_space => 'a euclidean_space => 'a euclidean_space
  plus_euclidean_space == plus ::
    'a euclidean_space => 'a euclidean_space => 'a euclidean_space
  scaleR_euclidean_space == scaleR ::
    real => 'a euclidean_space => 'a euclidean_space
instantiation
  euclidean_space :: (finite) real_inner
  inner_euclidean_space == inner ::
    'a euclidean_space => 'a euclidean_space => real
  sgn_euclidean_space == sgn :: 'a euclidean_space => 'a euclidean_space
  norm_euclidean_space == norm :: 'a euclidean_space => real
  dist_euclidean_space == dist ::
    'a euclidean_space => 'a euclidean_space => real
  uniformity_euclidean_space == uniformity ::
    ('a euclidean_space * 'a euclidean_space) filter
  open_euclidean_space == open :: 'a euclidean_space set => bool
instantiation
  vec :: (conjugate) conjugate
  conjugate_vec == conjugate :: 'a vec => 'a vec
instantiation
  euclidean_space :: (finite) euclidean_space
  Basis_euclidean_space == Basis :: 'a euclidean_space set
### theory "Jordan_Normal_Form.Matrix"
### 4.074s elapsed time, 15.956s cpu time, 2.062s GC time
Loading theory "Jordan_Normal_Form.Gauss_Jordan_Elimination" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant" via "Jordan_Normal_Form.Column_Operations")
### theory "Complex_Bounded_Operators.Extra_Vector_Spaces"
### 0.858s elapsed time, 3.339s cpu time, 0.440s GC time
Loading theory "Draft.Complex_Vector_Spaces" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product" via "Draft.Complex_Inner_Product0")
locale bounded_bilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_bilinear (**)"
### theory "HOL-Analysis.Bounded_Linear_Function"
### 2.068s elapsed time, 8.052s cpu time, 1.118s GC time
Loading theory "Complex_Bounded_Operators.Extra_Operator_Norm" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.One_Dimensional_Spaces")
Found termination order:
  "(%p. size_list (%p. size (snd p)) (snd (snd p))) <*mlex*> {}"
locale LinearCombinations.submodule
  fixes R :: "('a, 'b) ring_scheme"
    and N :: "'c set"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "LinearCombinations.submodule R N M"
### theory "Complex_Bounded_Operators.Extra_Operator_Norm"
### 0.507s elapsed time, 1.970s cpu time, 0.301s GC time
Loading theory "Banach_Steinhaus.Banach_Steinhaus_Missing" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Banach_Steinhaus.Banach_Steinhaus")
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
bundle notation_norm
bundle no_notation_norm
bundle notation_blinfun_apply
bundle no_notation_blinfun_apply
### theory "Jordan_Normal_Form.Gauss_Jordan_Elimination"
### 1.347s elapsed time, 5.192s cpu time, 0.972s GC time
Loading theory "Jordan_Normal_Form.Column_Operations" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Determinant")
locale mod_hom
  fixes R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"
    and N :: "('a, 'e, 'f) module_scheme"
    and f :: "'c => 'e"
  assumes "mod_hom R M N f"
### theory "Banach_Steinhaus.Banach_Steinhaus_Missing"
### 2.447s elapsed time, 9.257s cpu time, 6.873s GC time
Loading theory "Banach_Steinhaus.Banach_Steinhaus" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Banach_Steinhaus.Banach_Steinhaus"
### 0.137s elapsed time, 0.528s cpu time, 0.099s GC time
"(bij, bij_betw, permutation)"
  :: "(('a => 'b) => bool) *
      (('c => 'd) => 'c set => 'd set => bool) * (('e => 'e) => bool)"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.Column_Operations"
### 2.196s elapsed time, 8.302s cpu time, 6.614s GC time
Loading theory "Jordan_Normal_Form.Determinant" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect")
"- \<infinity>"
  :: "ereal"
"\<infinity>"
  :: "ereal"
bundle notation_norm
locale antilinear
  fixes f :: "'a => 'b"
  assumes "antilinear f"
"ereal (13 / 4)"
  :: "ereal"
locale bounded_antilinear
  fixes f :: "'a => 'b"
  assumes "bounded_antilinear f"
"True"
  :: "bool"
"True"
  :: "bool"
inj_on ?h ?A ==> (?g summable_on ?h ` ?A) = (?g o ?h summable_on ?A)
uniformity =
filtermap (%((x1, x2), y1, y2). ((x1, y1), x2, y2))
 (uniformity \<times>\<^sub>F uniformity)
?a : affine hull ?S ==> aff_dim ?S = int (dim ((+) (- ?a) ` ?S))
locale bounded_sesquilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_sesquilinear (**)"
class cfinite_dim = complex_vector +
  assumes "cfinitely_spanned": "EX S. finite S & cspan S = UNIV"
### theory "VectorSpace.LinearCombinations"
### 5.779s elapsed time, 22.286s cpu time, 8.620s GC time
Loading theory "VectorSpace.SumSpaces" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace" via "VectorSpace.VectorSpace")
class basis_enum = complex_vector +
  fixes canonical_basis :: "'a list"
  assumes "distinct_canonical_basis": "distinct canonical_basis"
    and "is_cindependent_set": "~ cdependent (set canonical_basis)"
    and "is_generator_set": "cspan (set canonical_basis) = UNIV"
### theory "VectorSpace.SumSpaces"
### 0.447s elapsed time, 1.576s cpu time, 0.218s GC time
Loading theory "VectorSpace.VectorSpace" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect" via "Jordan_Normal_Form.Missing_VectorSpace")
### theory "Jordan_Normal_Form.Determinant"
### 1.611s elapsed time, 6.074s cpu time, 0.780s GC time
Loading theory "Jordan_Normal_Form.Char_Poly" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Complex_Bounded_Operators.Extra_Jordan_Normal_Form" via "Jordan_Normal_Form.Schur_Decomposition")
locale closed_csubspace
  fixes A :: "'a set"
  assumes "closed_csubspace A"
instantiation
  ccsubspace :: (complex_normed_vector) scaleC
  scaleC_ccsubspace == scaleC :: complex => 'a ccsubspace => 'a ccsubspace
  scaleR_ccsubspace == scaleR :: real => 'a ccsubspace => 'a ccsubspace
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale subspace
  fixes K :: "('a, 'b) ring_scheme"
    and W :: "'c set"
    and V :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "subspace K W V"
instantiation
  ccsubspace :: ({complex_vector,t1_space}) bot
  bot_ccsubspace == bot :: 'a ccsubspace
instantiation
  ccsubspace :: ({complex_vector,topological_space}) top
  top_ccsubspace == top :: 'a ccsubspace
instantiation
  ccsubspace :: ({complex_vector,topological_space}) Inf
  Inf_ccsubspace == Inf :: 'a ccsubspace set => 'a ccsubspace
instantiation
  ccsubspace :: ({complex_vector,topological_space}) order
  less_eq_ccsubspace == less_eq :: 'a ccsubspace => 'a ccsubspace => bool
  less_ccsubspace == less :: 'a ccsubspace => 'a ccsubspace => bool
### Ignoring duplicate rewrite rule:
### carrier (vs ?y) == ?y
instantiation
  ccsubspace :: ({complex_vector,topological_space}) inf
  inf_ccsubspace == inf :: 'a ccsubspace => 'a ccsubspace => 'a ccsubspace
instantiation
  ccsubspace :: ({complex_vector,topological_space}) order_top
instantiation
  ccsubspace :: ({complex_vector,t1_space}) order_bot
instantiation
  ccsubspace :: ({complex_vector,topological_space}) semilattice_inf
instantiation
  ccsubspace :: ({complex_vector,t1_space}) zero
  zero_ccsubspace == zero_class.zero :: 'a ccsubspace
instantiation
  ccsubspace :: (complex_normed_vector) sup
  sup_ccsubspace == sup :: 'a ccsubspace => 'a ccsubspace => 'a ccsubspace
instantiation
  ccsubspace :: (complex_normed_vector) Sup
  Sup_ccsubspace == Sup :: 'a ccsubspace set => 'a ccsubspace
instantiation
  ccsubspace :: (complex_normed_vector) comm_monoid_add
  plus_ccsubspace == plus :: 'a ccsubspace => 'a ccsubspace => 'a ccsubspace
instantiation
  conjugate_space :: (complex_vector) complex_vector
  scaleC_conjugate_space == scaleC ::
    complex => 'a conjugate_space => 'a conjugate_space
  uminus_conjugate_space == uminus ::
    'a conjugate_space => 'a conjugate_space
  zero_conjugate_space == zero_class.zero :: 'a conjugate_space
  minus_conjugate_space == minus ::
    'a conjugate_space => 'a conjugate_space => 'a conjugate_space
  plus_conjugate_space == plus ::
    'a conjugate_space => 'a conjugate_space => 'a conjugate_space
  scaleR_conjugate_space == scaleR ::
    real => 'a conjugate_space => 'a conjugate_space
instantiation
  conjugate_space :: (complex_normed_vector) complex_normed_vector
  sgn_conjugate_space == sgn :: 'a conjugate_space => 'a conjugate_space
  norm_conjugate_space == norm :: 'a conjugate_space => real
  dist_conjugate_space == dist ::
    'a conjugate_space => 'a conjugate_space => real
  uniformity_conjugate_space == uniformity ::
    ('a conjugate_space * 'a conjugate_space) filter
  open_conjugate_space == open :: 'a conjugate_space set => bool
instantiation
  conjugate_space :: (cbanach) cbanach
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
instantiation
  complex :: basis_enum
  canonical_basis_complex == canonical_basis :: complex list
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
instantiation
  prod :: (complex_vector, complex_vector) complex_vector
  scaleC_prod == scaleC :: complex => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
locale bounded_clinear
  fixes f :: "'a => 'b"
  assumes "bounded_clinear f"
### theory "Jordan_Normal_Form.Char_Poly"
### 1.055s elapsed time, 3.245s cpu time, 0.531s GC time
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
### Ignoring duplicate rewrite rule:
### T \<zero>\<^bsub>V\<^esub> == \<zero>\<^bsub>W\<^esub>
locale bounded_antilinear
  fixes f :: "'a => 'b"
  assumes "bounded_antilinear f"
locale bounded_cbilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_cbilinear (**)"
locale bounded_sesquilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_sesquilinear (**)"
### theory "Draft.Complex_Vector_Spaces"
### 6.289s elapsed time, 22.957s cpu time, 8.807s GC time
Loading theory "Draft.Complex_Inner_Product0" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Inner_Product")
class complex_inner = complex_vector + dist_norm + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes cinner :: "'a => 'a => complex"
  assumes "cinner_commute": "!!x y. cinner x y = cnj (cinner y x)"
    and
    "cinner_add_left": "!!x y z. cinner (x + y) z = cinner x z + cinner y z"
    and
    "cinner_scaleC_left":
      "!!r x y. cinner (r *\<^sub>C x) y = cnj r * cinner x y"
    and "cinner_ge_zero": "!!x. 0 <= cinner x x"
    and "cinner_eq_zero_iff": "!!x. (cinner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_cinner": "!!x. norm x = sqrt (cmod (cinner x x))"
instantiation
  complex :: complex_inner
  cinner_complex == cinner :: complex => complex => complex
?x ~= (0::?'a) ==>
(norm has_derivative (%h. Re (cinner (sgn ?x) h))) (at ?x)
bundle cinner_syntax
bundle no_cinner_syntax
### theory "Draft.Complex_Inner_Product0"
### 1.146s elapsed time, 2.411s cpu time, 0.297s GC time
Loading theory "Draft.Complex_Inner_Product" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function")
bundle cinner_bracket_notation
bundle no_cinner_bracket_notation
### theory "VectorSpace.VectorSpace"
### 3.245s elapsed time, 7.990s cpu time, 1.172s GC time
Loading theory "Jordan_Normal_Form.Missing_VectorSpace" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt" via "Jordan_Normal_Form.VS_Connect")
instantiation
  complex :: chilbert_space
bundle orthogonal_notation
bundle no_orthogonal_notation
instantiation
  ccsubspace :: (complex_inner) uminus
  uminus_ccsubspace == uminus :: 'a ccsubspace => 'a ccsubspace
instantiation
  ccsubspace :: (complex_inner) minus
  minus_ccsubspace == minus ::
    'a ccsubspace => 'a ccsubspace => 'a ccsubspace
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale Missing_VectorSpace.comp_fun_commute_on
  fixes f :: "'a => 'a => 'a"
    and A :: "'a set"
  assumes "Missing_VectorSpace.comp_fun_commute_on f A"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
locale vectorspace
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
  assumes "vectorspace K V"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
class onb_enum = complex_inner + basis_enum +
  assumes "is_orthonormal": "is_ortho_set (set canonical_basis)"
    and "is_normal": "!!x. x : set canonical_basis ==> norm x = 1"
locale linear_map
  fixes K :: "('a, 'b) ring_scheme"
    and V :: "('a, 'c, 'd) module_scheme"
    and W :: "('a, 'e, 'f) module_scheme"
    and T :: "'c => 'e"
  assumes "linear_map K V W T"
instantiation
  conjugate_space :: (complex_inner) complex_inner
  cinner_conjugate_space == cinner ::
    'a conjugate_space => 'a conjugate_space => complex
### theory "Draft.Complex_Inner_Product"
### 3.943s elapsed time, 11.432s cpu time, 7.682s GC time
Loading theory "Draft.Complex_Euclidean_Space0" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function" via "Draft.Complex_Bounded_Linear_Function0")
Loading theory "Draft.One_Dimensional_Spaces" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function")
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
class ceuclidean_space = complex_inner +
  fixes CBasis :: "'a set"
  assumes "nonempty_CBasis": "CBasis ~= {}"
  assumes "finite_CBasis": "finite CBasis"
  assumes
    "cinner_CBasis":
      "!!u v.
          [| u : CBasis; v : CBasis |]
          ==> \<langle>u, v\<rangle> = (if u = v then 1 else 0)"
  assumes
    "ceuclidean_all_zero_iff":
      "!!x. (ALL u:CBasis. \<langle>x, u\<rangle> = 0) = (x = (0::'a))"
### theory "Jordan_Normal_Form.Missing_VectorSpace"
### 3.870s elapsed time, 11.962s cpu time, 7.653s GC time
Loading theory "Jordan_Normal_Form.VS_Connect" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Jordan_Normal_Form.Gram_Schmidt")
class one_dim = onb_enum + inverse + one + times +
  assumes "one_dim_canonical_basis": "canonical_basis = [1::'a]"
  assumes
    "one_dim_prod_scale1":
      "!!a b.
          a *\<^sub>C (1::'a) * b *\<^sub>C (1::'a) =
          (a * b) *\<^sub>C (1::'a)"
  assumes "divide_inverse": "!!x y. x / y = x * inverse y"
  assumes
    "one_dim_inverse":
      "!!a. inverse (a *\<^sub>C (1::'a)) = (1::'a) /\<^sub>C a"
instantiation
  complex :: ceuclidean_space
  CBasis_complex == CBasis :: complex set
instantiation
  prod :: (complex_inner, complex_inner) complex_inner
  cinner_prod == cinner :: 'a * 'b => 'a * 'b => complex
instantiation
  prod :: (ceuclidean_space, ceuclidean_space) ceuclidean_space
  CBasis_prod == CBasis :: ('a * 'b) set
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "Draft.Complex_Euclidean_Space0"
### 1.447s elapsed time, 4.405s cpu time, 0.457s GC time
Loading theory "Draft.Complex_Bounded_Linear_Function0" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2" via "Draft.Complex_Bounded_Linear_Function")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
instantiation
  cblinfun :: (complex_normed_vector, complex_normed_vector)
    complex_normed_vector
  scaleC_cblinfun == scaleC ::
    complex
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
       => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
  uminus_cblinfun == uminus ::
    'a \<Rightarrow>\<^sub>C\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
  zero_cblinfun == zero_class.zero :: 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
  minus_cblinfun == minus ::
    'a \<Rightarrow>\<^sub>C\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
       => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
  plus_cblinfun == plus ::
    'a \<Rightarrow>\<^sub>C\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
       => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
  sgn_cblinfun == sgn ::
    'a \<Rightarrow>\<^sub>C\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
  norm_cblinfun == norm :: 'a \<Rightarrow>\<^sub>C\<^sub>L 'b => real
  scaleR_cblinfun == scaleR ::
    real
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
       => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
  dist_cblinfun == dist ::
    'a \<Rightarrow>\<^sub>C\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b => real
  uniformity_cblinfun == uniformity ::
    ('a \<Rightarrow>\<^sub>C\<^sub>L 'b *
     'a \<Rightarrow>\<^sub>C\<^sub>L 'b) filter
  open_cblinfun == open :: ('a \<Rightarrow>\<^sub>C\<^sub>L 'b) set => bool
### Cannot skip proof of schematic goal statement
locale bounded_cbilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_cbilinear (**)"
### Cannot skip proof of schematic goal statement
locale matrix_ring
  fixes n :: "nat"
    and field_type :: "'a itself"
locale bounded_cbilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_cbilinear (**)"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### Ignoring duplicate rewrite rule:
### (o\<^sub>L) 0 == %_. 0
### Ignoring duplicate rewrite rule:
### ?x1 o\<^sub>L 0 == 0
### Cannot skip proof of schematic goal statement
### theory "Draft.Complex_Bounded_Linear_Function0"
### 1.476s elapsed time, 4.523s cpu time, 0.519s GC time
### theory "Draft.One_Dimensional_Spaces"
### 3.051s elapsed time, 9.211s cpu time, 0.976s GC time
Loading theory "Draft.Complex_Bounded_Linear_Function" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Draft.Complex_L2")
locale matrix_vs
  fixes nr :: "nat"
    and nc :: "nat"
    and field_type :: "'a itself"
### Cannot skip proof of schematic goal statement
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
instantiation
  blinfun :: (real_normed_vector, complex_normed_vector)
    complex_normed_vector
  scaleC_blinfun == scaleC ::
    complex => 'a \<Rightarrow>\<^sub>L 'b => 'a \<Rightarrow>\<^sub>L 'b
instantiation
  blinfun :: (real_normed_vector, cbanach) cbanach
### Cannot skip proof of schematic goal statement
0 = \<bottom>
instantiation
  cblinfun :: (one_dim, one_dim) complex_inner
  cinner_cblinfun == cinner ::
    'a \<Rightarrow>\<^sub>C\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b => complex
instantiation
  cblinfun :: (one_dim, one_dim) one_dim
  one_cblinfun == one_class.one :: 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
  times_cblinfun == times ::
    'a \<Rightarrow>\<^sub>C\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
       => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
  inverse_cblinfun == inverse ::
    'a \<Rightarrow>\<^sub>C\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
  divide_cblinfun == divide ::
    'a \<Rightarrow>\<^sub>C\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
       => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b
  canonical_basis_cblinfun == canonical_basis ::
    ('a \<Rightarrow>\<^sub>C\<^sub>L 'b) list
locale mat_space
  fixes f_ty :: "'a itself"
    and nc :: "nat"
    and nr :: "nat"
instantiation
  cblinfun :: (chilbert_space, chilbert_space) ord
  less_eq_cblinfun == less_eq ::
    'a \<Rightarrow>\<^sub>C\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b => bool
  less_cblinfun == less ::
    'a \<Rightarrow>\<^sub>C\<^sub>L 'b
    => 'a \<Rightarrow>\<^sub>C\<^sub>L 'b => bool
instantiation
  cblinfun :: (chilbert_space, chilbert_space) ordered_complex_vector
*** Undefined fact: "False" (line 2479 of "$AFP/Complex_Bounded_Operators/Complex_Bounded_Linear_Function.thy")12FalseEfactHOL.FalseEFalse_deffactHOL.False_defFalse_imp_not_eventuallyfactFilter.False_imp_not_eventuallyFalse_implies_equalsfactHOL.False_implies_equalsFalse_neq_TruefactHOL.False_neq_TrueFalse_not_TruefactHOL.False_not_TrueFilter.False_imp_not_eventuallyfactFilter.False_imp_not_eventuallyHOL.FalseEfactHOL.FalseEHOL.False_deffactHOL.False_defHOL.False_implies_equalsfactHOL.False_implies_equalsHOL.False_neq_TruefactHOL.False_neq_TrueHOL.False_not_TruefactHOL.False_not_True
*** At command "thm" (line 2479 of "$AFP/Complex_Bounded_Operators/Complex_Bounded_Linear_Function.thy")
bundle cblinfun_notation
bundle no_cblinfun_notation
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
bundle blinfun_notation
bundle no_blinfun_notation
locale idom_vec
  fixes n :: "nat"
    and f_ty :: "'a itself"
### theory "Draft.Complex_Bounded_Linear_Function"
### 3.217s elapsed time, 7.058s cpu time, 1.189s GC time
Loading theory "Draft.Complex_L2" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix")
instantiation
  ell2 :: (type) complex_vector
  scaleC_ell2 == scaleC :: complex => 'a ell2 => 'a ell2
  uminus_ell2 == uminus :: 'a ell2 => 'a ell2
  zero_ell2 == zero_class.zero :: 'a ell2
  minus_ell2 == minus :: 'a ell2 => 'a ell2 => 'a ell2
  plus_ell2 == plus :: 'a ell2 => 'a ell2 => 'a ell2
  scaleR_ell2 == scaleR :: real => 'a ell2 => 'a ell2
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
instantiation
  ell2 :: (type) complex_normed_vector
  sgn_ell2 == sgn :: 'a ell2 => 'a ell2
  norm_ell2 == norm :: 'a ell2 => real
  dist_ell2 == dist :: 'a ell2 => 'a ell2 => real
  uniformity_ell2 == uniformity :: ('a ell2 * 'a ell2) filter
  open_ell2 == open :: 'a ell2 set => bool
instantiation
  ell2 :: (type) complex_inner
  cinner_ell2 == cinner :: 'a ell2 => 'a ell2 => complex
instantiation
  ell2 :: (CARD_1) complex_algebra_1
  one_ell2 == one_class.one :: 'a ell2
  times_ell2 == times :: 'a ell2 => 'a ell2 => 'a ell2
instantiation
  ell2 :: (CARD_1) field
  inverse_ell2 == inverse :: 'a ell2 => 'a ell2
  divide_ell2 == divide :: 'a ell2 => 'a ell2 => 'a ell2
instantiation
  ell2 :: (enum) onb_enum
  canonical_basis_ell2 == canonical_basis :: 'a ell2 list
instantiation
  ell2 :: ({CARD_1,enum}) one_dim
locale vec_module
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Draft.Complex_L2"
### 1.385s elapsed time, 2.959s cpu time, 0.475s GC time
locale vec_space
  fixes f_ty :: "'a itself"
    and n :: "nat"
### theory "Jordan_Normal_Form.VS_Connect"
### 7.107s elapsed time, 17.260s cpu time, 2.421s GC time
Loading theory "Jordan_Normal_Form.Gram_Schmidt" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix")
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
locale cof_vec_space
  fixes n :: "nat"
    and f_ty :: "'a itself"
### theory "Jordan_Normal_Form.Gram_Schmidt"
### 0.902s elapsed time, 1.190s cpu time, 0.211s GC time
Loading theory "Jordan_Normal_Form.Schur_Decomposition" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix" via "Complex_Bounded_Operators.Extra_Jordan_Normal_Form")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Jordan_Normal_Form.Schur_Decomposition"
### 1.654s elapsed time, 2.056s cpu time, 0.274s GC time
Loading theory "Complex_Bounded_Operators.Extra_Jordan_Normal_Form" (required by "Draft.Cblinfun_MatrixMoreTemplates" via "Draft.Cblinfun_Matrix")
bundle jnf_notation
bundle no_jnf_notation
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
*** Undefined fact: "lin_dep_iff_in_span" (line 181 of "$AFP/Complex_Bounded_Operators/extra/Extra_Jordan_Normal_Form.thy")2vectorspace.lin_dep_iff_in_spanfactVectorSpace.vectorspace.lin_dep_iff_in_spanVectorSpace.vectorspace.lin_dep_iff_in_spanfactVectorSpace.vectorspace.lin_dep_iff_in_span
*** At command "thm" (line 181 of "$AFP/Complex_Bounded_Operators/extra/Extra_Jordan_Normal_Form.thy")
locale complex_vec_space
  fixes n :: "nat"
[| M : carrier_mat ?m ?n; ?i < ?m; ?j < ?n |]
==> (M *\<^sub>v unit_vec ?n ?j) $ ?i = M $$ (?i, ?j)
### theory "Complex_Bounded_Operators.Extra_Jordan_Normal_Form"
### 6.903s elapsed time, 13.388s cpu time, 8.794s GC time
Loading theory "Draft.Cblinfun_Matrix" (required by "Draft.Cblinfun_MatrixMoreTemplates")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Cblinfun_Matrix"
### 4.447s elapsed time, 5.151s cpu time, 0.984s GC time
Loading theory "Draft.Cblinfun_MatrixMoreTemplates"
val templateLemmas =
   [("Cblinfun_Matrix.vec_of_basis_enum_inverse",
     "basis_enum_of_vec (vec_of_basis_enum ?w) = ?w",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Cblinfun_Matrix.mat_of_cblinfun_inverse",
     "cblinfun_of_mat (mat_of_cblinfun ?B) = ?B",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Cblinfun_Matrix.dim_col_mat_of_cblinfun",
     "dim_col (mat_of_cblinfun ?a) = CARD(?'a)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Cblinfun_Matrix.dim_row_mat_of_cblinfun",
     "dim_row (mat_of_cblinfun ?a) = CARD(?'b)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Cblinfun_Matrix.dim_vec_of_basis_enum'",
     "dim_vec (vec_of_basis_enum ?v) = length canonical_basis",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Cblinfun_Matrix.mat_of_cblinfun_uminus",
     "mat_of_cblinfun (- ?M) = - mat_of_cblinfun ?M",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Cblinfun_Matrix.mat_of_cblinfun_adj",
     "mat_of_cblinfun (adj ?F) = mat_adjoint (mat_of_cblinfun ?F)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Cblinfun_Matrix.vec_of_basis_enum_uminus",
     "vec_of_basis_enum (- ?b2.0) = - vec_of_basis_enum ?b2.0",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Cblinfun_Matrix.mat_of_cblinfun_ell2_carrier",
     "mat_of_cblinfun ?a : carrier_mat CARD(?'b) CARD(?'a)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2)),
             template_app (template_hole 1, template_hole 0)))
         )),
    ("Cblinfun_Matrix.mat_of_cblinfun_scaleC",
     "mat_of_cblinfun (?a *\<^sub>C ?F) =
      smult_mat ?a (mat_of_cblinfun ?F)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Cblinfun_Matrix.vec_of_basis_enum_ket",
     "vec_of_basis_enum (ket ?i) = unit_vec CARD(?'a) (enum_idx ?i)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Cblinfun_Matrix.vec_of_basis_enum_scaleC",
     "vec_of_basis_enum (?c *\<^sub>C ?b) =
      smult_vec ?c (vec_of_basis_enum ?b)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Cblinfun_Matrix.mat_of_cblinfun_minus",
     "mat_of_cblinfun (?M - ?N) = mat_of_cblinfun ?M - mat_of_cblinfun ?N",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Cblinfun_Matrix.mat_of_cblinfun_plus",
     "mat_of_cblinfun (?F + ?G) = mat_of_cblinfun ?F + mat_of_cblinfun ?G",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Cblinfun_Matrix.mat_of_cblinfun_scaleR",
     "mat_of_cblinfun (?a *\<^sub>R ?F) =
      smult_mat (complex_of_real ?a) (mat_of_cblinfun ?F)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Cblinfun_Matrix.mat_of_cblinfun_compose",
     "mat_of_cblinfun (cblinfun_compose ?F ?G) =
      mat_of_cblinfun ?F * mat_of_cblinfun ?G",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Cblinfun_Matrix.vec_of_basis_enum_minus",
     "vec_of_basis_enum (?b1.0 - ?b2.0) =
      vec_of_basis_enum ?b1.0 - vec_of_basis_enum ?b2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Cblinfun_Matrix.vec_of_basis_enum_add",
     "vec_of_basis_enum (?b1.0 + ?b2.0) =
      vec_of_basis_enum ?b1.0 + vec_of_basis_enum ?b2.0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Cblinfun_Matrix.vec_of_basis_enum_scaleR",
     "vec_of_basis_enum (?r *\<^sub>R ?b) =
      smult_vec (complex_of_real ?r) (vec_of_basis_enum ?b)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 3, template_var 0)))),
    ("Cblinfun_Matrix.mat_of_cblinfun_cblinfun_apply",
     "vec_of_basis_enum (cblinfun_apply ?F ?u) =
      mult_mat_vec (mat_of_cblinfun ?F) (vec_of_basis_enum ?u)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Cblinfun_Matrix.cscalar_prod_vec_of_basis_enum",
     "cscalar_prod (vec_of_basis_enum ?\<phi>) (vec_of_basis_enum ?\<psi>) =
      ?\<psi> \<bullet>\<^sub>C ?\<phi>",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app
          (template_hole 1,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Cblinfun_Matrix.cblinfun_eq_mat_of_cblinfunI",
     "mat_of_cblinfun ?a = mat_of_cblinfun ?b ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Cblinfun_Matrix.basis_enum_eq_vec_of_basis_enumI",
     "vec_of_basis_enum ?a = vec_of_basis_enum ?b ==> ?a = ?b",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Cblinfun_Matrix.corthogonal_vec_of_basis_enum",
     "corthogonal (map vec_of_basis_enum ?S) =
      (is_ortho_set (set ?S) & distinct ?S)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Cblinfun_Matrix.mat_of_cblinfun_vector_to_cblinfun",
     "mat_of_cblinfun (vector_to_cblinfun ?\<psi>) =
      mat_of_cols (length canonical_basis) [vec_of_basis_enum ?\<psi>]",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app (template_hole 4, template_hole 3)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Cblinfun_Matrix.vec_of_basis_enum_to_inverse",
     "vec_of_basis_enum (inverse ?\<psi>) =
      vec_of_list [inverse (vec_index (vec_of_basis_enum ?\<psi>) 0)]",
     template_equation
      (template_app
        (template_hole 7, template_app (template_hole 6, template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 7, template_var 0)),
                 template_hole 1))),
           template_hole 0)))),
    ("Cblinfun_Matrix.basis_enum_of_vec_inverse",
     "dim_vec ?v = length canonical_basis ==>
      vec_of_basis_enum (basis_enum_of_vec ?v) = ?v",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 0),
          template_app (template_hole 4, template_hole 3))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Cblinfun_Matrix.cblinfun_of_mat_inverse",
     "?M : carrier_mat (length canonical_basis) (length canonical_basis) ==>
      mat_of_cblinfun (cblinfun_of_mat ?M) = ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 0),
              template_app
               (template_app
                 (template_hole 7,
                  template_app (template_hole 6, template_hole 5)),
                template_app (template_hole 4, template_hole 3)))
            )],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Cblinfun_Matrix.basis_enum_of_vec_unit_vec",
     "?i < length canonical_basis ==>
      basis_enum_of_vec (unit_vec (length canonical_basis) ?i) =
      canonical_basis ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 5, template_hole 4)),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_hole 4),
           template_var 0)))),
    ("Cblinfun_Matrix.vec_of_basis_enum_canonical_basis",
     "?i < length canonical_basis ==>
      vec_of_basis_enum (canonical_basis ! ?i) =
      unit_vec (length canonical_basis) ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 4),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 5, template_hole 4)),
           template_var 0)))),
    ("Cblinfun_Matrix.vec_of_basis_enum_ell2_component",
     "?i < CARD(?'a) ==>
      vec_index (vec_of_basis_enum ?\<psi>) ?i =
      Rep_ell2 ?\<psi> (enum_class.enum ! ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 7, template_hole 6))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("Cblinfun_Matrix.basis_enum_of_vec_mult",
     "dim_vec ?v = length canonical_basis ==>
      basis_enum_of_vec (smult_vec ?c ?v) =
      ?c *\<^sub>C basis_enum_of_vec ?v",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app (template_hole 2, template_var 1))))),
    ("Cblinfun_Matrix.cblinfun_of_mat_adjoint",
     "?M : carrier_mat (length canonical_basis) (length canonical_basis) ==>
      cblinfun_of_mat (mat_adjoint ?M) = adj (cblinfun_of_mat ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_app
                 (template_hole 9,
                  template_app (template_hole 8, template_hole 7)),
                template_app (template_hole 6, template_hole 5)))
            )],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Cblinfun_Matrix.cblinfun_of_mat_uminus",
     "?M : carrier_mat (length canonical_basis) (length canonical_basis) ==>
      cblinfun_of_mat (- ?M) = - cblinfun_of_mat ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_app (template_hole 5, template_hole 4)))
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Cblinfun_Matrix.ccspan_leq_using_vec",
     "(ccspan (set ?A) <= ccspan (set ?B)) =
      is_subspace_of_vec_list (length canonical_basis)
       (map vec_of_basis_enum ?A) (map vec_of_basis_enum ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         template_app
          (template_hole 6,
           template_app (template_hole 5, template_var 0))),
       template_app
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_hole 2)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Cblinfun_Matrix.mat_of_cblinfun_Proj_ccspan",
     "mat_of_cblinfun (Proj (ccspan (set ?S))) =
      (let d = length canonical_basis
       in mk_projector_orthog d
           (gram_schmidt0 d (map vec_of_basis_enum ?S)))",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0)))),
       template_app
        (template_app
          (template_hole 6,
           template_app (template_hole 5, template_hole 4)),
         t_empty))),
    ("Cblinfun_Matrix.mat_of_cblinfun_sandwich",
     "mat_of_cblinfun (cblinfun_apply (sandwich ?a) ?b) =
      (let a' = mat_of_cblinfun ?a
       in a' * mat_of_cblinfun ?b * mat_adjoint a')",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 1)),
         t_empty))),
    ("Cblinfun_Matrix.vec_of_basis_enum_times",
     "vec_of_basis_enum (?\<psi> * ?\<phi>) =
      vec_of_list
       [vec_index (vec_of_basis_enum ?\<psi>) 0 *
        vec_index (vec_of_basis_enum ?\<phi>) 0]",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 7, template_var 1)),
                   template_hole 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 7, template_var 0)),
                 template_hole 1))),
           template_hole 0)))),
    ("Cblinfun_Matrix.vec_of_basis_enum_divide",
     "vec_of_basis_enum (?\<psi> / ?\<phi>) =
      vec_of_list
       [vec_index (vec_of_basis_enum ?\<psi>) 0 /
        vec_index (vec_of_basis_enum ?\<phi>) 0]",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 7, template_var 1)),
                   template_hole 1)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 7, template_var 0)),
                 template_hole 1))),
           template_hole 0)))),
    ("Cblinfun_Matrix.cblinfun_apply_ccspan_using_vec",
     "cblinfun_image ?A (ccspan (set ?S)) =
      ccspan
       (basis_enum_of_vec `
        set (map (mult_mat_vec (mat_of_cblinfun ?A))
              (map vec_of_basis_enum ?S)))",
     template_equation
      (template_app
        (template_app (template_hole 11, template_var 1),
         template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 0))),
       template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1))),
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 0))))))),
    ("Cblinfun_Matrix.mk_projector_orthog_correct",
     "[| is_ortho_set (set ?S); distinct ?S |]
      ==> mk_projector_orthog (length canonical_basis)
           (map vec_of_basis_enum ?S) =
          mat_of_cblinfun (Proj (ccspan (set ?S)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app (template_hole 10, template_var 0))
            ),
        template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_hole 5)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app
              (template_hole 0,
               template_app (template_hole 10, template_var 0))))))),
    ("Cblinfun_Matrix.ccspan_gram_schmidt0_invariant",
     "set ?ws <= carrier_vec (length canonical_basis) ==>
      ccspan
       (set (map basis_enum_of_vec
              (gram_schmidt0 (length canonical_basis) ?ws))) =
      ccspan (set (map basis_enum_of_vec ?ws))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 0),
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_hole 6)))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 7, template_hole 6)),
                 template_var 0)))),
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)))))),
    ("Cblinfun_Matrix.mat_of_cblinfun_classical_operator",
     "mat_of_cblinfun (classical_operator ?f) =
      mat CARD(?'b) CARD(?'a)
       (%(r, c).
           if ?f (enum_class.enum ! c) = Some (enum_class.enum ! r) then 1
           else 0)",
     template_equation
      (template_app
        (template_hole 16, template_app (template_hole 15, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 14,
             template_app (template_hole 13, template_hole 12)),
           template_app (template_hole 11, template_hole 10)),
         template_app (template_hole 9, t_empty)))),
    ("Cblinfun_Matrix.basis_enum_of_vec_add",
     "[| dim_vec ?v1.0 = length canonical_basis;
         dim_vec ?v2.0 = length canonical_basis |]
      ==> basis_enum_of_vec (?v1.0 + ?v2.0) =
          basis_enum_of_vec ?v1.0 + basis_enum_of_vec ?v2.0",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 1),
          template_app (template_hole 5, template_hole 4)),
        template_equation
         (template_app (template_hole 6, template_var 0),
          template_app (template_hole 5, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Cblinfun_Matrix.cinner_basis_enum_of_vec",
     "[| dim_vec ?x = length canonical_basis;
         dim_vec ?y = length canonical_basis |]
      ==> basis_enum_of_vec ?x \<bullet>\<^sub>C basis_enum_of_vec ?y =
          cscalar_prod ?y ?x",
     template_implication
      ([template_equation
         (template_app (template_hole 7, template_var 1),
          template_app (template_hole 6, template_hole 5)),
        template_equation
         (template_app (template_hole 7, template_var 0),
          template_app (template_hole 6, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Cblinfun_Matrix.basis_enum_of_vec_cblinfun_apply",
     "[| ?M : carrier_mat (length canonical_basis) (length canonical_basis);
         dim_vec ?x = length canonical_basis |]
      ==> basis_enum_of_vec (mult_mat_vec ?M ?x) =
          cblinfun_apply (cblinfun_of_mat ?M) (basis_enum_of_vec ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_hole 10)),
                template_app (template_hole 9, template_hole 8)))
            ),
        template_equation
         (template_app (template_hole 6, template_var 0),
          template_app (template_hole 9, template_hole 8))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Cblinfun_Matrix.cblinfun_of_mat_minus",
     "[| ?M : carrier_mat (length canonical_basis) (length canonical_basis);
         ?N : carrier_mat (length canonical_basis)
               (length canonical_basis) |]
      ==> cblinfun_of_mat (?M - ?N) =
          cblinfun_of_mat ?M - cblinfun_of_mat ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_app (template_hole 5, template_hole 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_app (template_hole 5, template_hole 4)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Cblinfun_Matrix.cblinfun_of_mat_plus",
     "[| ?M : carrier_mat (length canonical_basis) (length canonical_basis);
         ?N : carrier_mat (length canonical_basis)
               (length canonical_basis) |]
      ==> cblinfun_of_mat (?M + ?N) =
          cblinfun_of_mat ?M + cblinfun_of_mat ?N",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_app (template_hole 5, template_hole 4)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_hole 6)),
                template_app (template_hole 5, template_hole 4)))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Cblinfun_Matrix.cblinfun_of_mat_times",
     "[| ?M : carrier_mat (length canonical_basis) (length canonical_basis);
         ?N : carrier_mat (length canonical_basis)
               (length canonical_basis) |]
      ==> cblinfun_of_mat (?M * ?N) =
          cblinfun_compose (cblinfun_of_mat ?M) (cblinfun_of_mat ?N)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 11, template_hole 10)),
                template_app (template_hole 9, template_hole 8)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 0),
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 9, template_hole 8)),
                template_app (template_hole 7, template_hole 6)))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Cblinfun_Matrix.mat_of_cblinfun_ell2_component",
     "[| ?i < CARD(?'b); ?j < CARD(?'a) |]
      ==> index_mat (mat_of_cblinfun ?a) (?i, ?j) =
          Rep_ell2 (cblinfun_apply ?a (ket (enum_class.enum ! ?j)))
           (enum_class.enum ! ?i)",
     template_implication
      ([template_inequation
         (less_than, template_var 2,
          template_app (template_hole 14, template_hole 13)),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 12, template_hole 11))],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app (template_hole 8, template_var 0)),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 0),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 1)))),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 2))))),
    ("Cblinfun_Matrix.norm_ell2_vec_of_basis_enum",
     "norm ?\<psi> =
      (let \<psi>' = vec_of_basis_enum ?\<psi>
       in sqrt
           (SUM i = 0..<dim_vec \<psi>'.
            let z = vec_index \<psi>' i
            in (Re z)\<^sup>2 + (Im z)\<^sup>2))",
     template_equation
      (template_app (template_hole 16, template_var 0),
       template_app
        (template_app
          (template_hole 15,
           template_app (template_hole 14, template_var 0)),
         t_empty))),
    ("Cblinfun_Matrix.mat_of_cblinfun_proj",
     "mat_of_cblinfun (proj ?a) =
      smult_mat
       (1 / cscalar_prod (vec_of_basis_enum ?a) (vec_of_basis_enum ?a))
       (mat_of_cols (length canonical_basis) [vec_of_basis_enum ?a] *
        mat_of_rows (length canonical_basis)
         [conjugate (vec_of_basis_enum ?a)])",
     template_equation
      (template_app
        (template_hole 17,
         template_app
          (template_hole 16,
           template_app
            (template_hole 15,
             template_app
              (template_app (template_hole 14, template_var 0),
               template_hole 13)))),
       template_app
        (template_app
          (template_hole 12,
           template_app
            (template_app (template_hole 11, template_hole 10),
             template_app
              (template_app
                (template_hole 9,
                 template_app (template_hole 8, template_var 0)),
               template_app
                (template_hole 7,
                 template_app (template_hole 8, template_var 0))))),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 8, template_var 0)),
                 template_hole 1))),
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 4, template_hole 3)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 8, template_var 0))),
               template_hole 1))))))]:
   (string * thm * template) list
### theory "Draft.Cblinfun_MatrixMoreTemplates"
### 1.692s elapsed time, 2.168s cpu time, 0.222s GC time
*** Undefined fact: "lin_dep_iff_in_span" (line 181 of "$AFP/Complex_Bounded_Operators/extra/Extra_Jordan_Normal_Form.thy")2vectorspace.lin_dep_iff_in_spanfactVectorSpace.vectorspace.lin_dep_iff_in_spanVectorSpace.vectorspace.lin_dep_iff_in_spanfactVectorSpace.vectorspace.lin_dep_iff_in_span
*** At command "thm" (line 181 of "$AFP/Complex_Bounded_Operators/extra/Extra_Jordan_Normal_Form.thy")
*** Undefined fact: "False" (line 2479 of "$AFP/Complex_Bounded_Operators/Complex_Bounded_Linear_Function.thy")12FalseEfactHOL.FalseEFalse_deffactHOL.False_defFalse_imp_not_eventuallyfactFilter.False_imp_not_eventuallyFalse_implies_equalsfactHOL.False_implies_equalsFalse_neq_TruefactHOL.False_neq_TrueFalse_not_TruefactHOL.False_not_TrueFilter.False_imp_not_eventuallyfactFilter.False_imp_not_eventuallyHOL.FalseEfactHOL.FalseEHOL.False_deffactHOL.False_defHOL.False_implies_equalsfactHOL.False_implies_equalsHOL.False_neq_TruefactHOL.False_neq_TrueHOL.False_not_TruefactHOL.False_not_True
*** At command "thm" (line 2479 of "$AFP/Complex_Bounded_Operators/Complex_Bounded_Linear_Function.thy")
Exception- TOPLEVEL_ERROR raised
