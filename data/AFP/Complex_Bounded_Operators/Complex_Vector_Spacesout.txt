Loading theory "Complex_Bounded_Operators.Extra_Lattice" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces")
Loading theory "HOL-Combinatorics.Transposition" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Disjoint_Sets")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
bundle lattice_notation
bundle no_lattice_notation
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
### theory "HOL-Combinatorics.Transposition"
### 0.115s elapsed time, 0.483s cpu time, 0.016s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set")
### theory "HOL-Library.Function_Algebras"
### 0.116s elapsed time, 0.483s cpu time, 0.016s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  enumerate :: "'a set => nat => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.FuncSet"
### 0.463s elapsed time, 1.707s cpu time, 0.405s GC time
Loading theory "HOL-Library.Disjoint_Sets" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology")
### theory "HOL-Library.Infinite_Set"
### 0.376s elapsed time, 1.340s cpu time, 0.389s GC time
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set" via "HOL-Library.Countable")
### theory "HOL-Library.Nat_Bijection"
### 0.426s elapsed time, 1.533s cpu time, 0.445s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.ExtrEqs")
class complemented_lattice = minus + uminus + bounded_lattice +
  assumes "inf_compl_bot": "!!x. x \<sqinter> - x = \<bottom>"
    and "sup_compl_top": "!!x. x \<squnion> - x = \<top>"
    and "diff_eq": "!!x y. x - y = x \<sqinter> - y"
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
### theory "HOL-Library.Disjoint_Sets"
### 0.264s elapsed time, 1.031s cpu time, 0.123s GC time
Loading theory "HOL-Library.Phantom_Type" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type" via "HOL-Library.Cardinality")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.390s elapsed time, 1.521s cpu time, 0.192s GC time
Loading theory "HOL-Library.Product_Plus" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology" via "HOL-Analysis.Product_Vector")
instantiation
  prod :: (zero, zero) zero
  zero_prod == zero_class.zero :: 'a * 'b
instantiation
  prod :: (plus, plus) plus
  plus_prod == plus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (minus, minus) minus
  minus_prod == minus :: 'a * 'b => 'a * 'b => 'a * 'b
instantiation
  prod :: (uminus, uminus) uminus
  uminus_prod == uminus :: 'a * 'b => 'a * 'b
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
### theory "HOL-Library.Product_Plus"
### 0.118s elapsed time, 0.456s cpu time, 0.065s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.897s cpu time, 0.061s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.Phantom_Type"
### 0.560s elapsed time, 2.208s cpu time, 0.195s GC time
Loading theory "HOL-Library.Cardinality" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Library.Numeral_Type")
consts
  flat :: "'a list stream => 'a stream"
class orthocomplemented_lattice = complemented_lattice +
  assumes "ortho_involution": "!!x. - (- x) = x"
    and "ortho_antimono": "!!x y. x <= y ==> - y <= - x"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Additional type variable(s) in locale specification "CARD_1": 'a
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
class CARD_1 = type +
  assumes "CARD_1": "CARD('a) = 1"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.928s elapsed time, 3.653s cpu time, 0.336s GC time
Loading theory "HOL-Types_To_Sets.Types_To_Sets" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces")
signature LOCAL_TYPEDEF =
  sig
    val cancel_type_definition: thm -> thm
    val cancel_type_definition_attr: attribute
  end
structure Local_Typedef: LOCAL_TYPEDEF
### Additional type variable(s) in locale specification "card2": 'a
signature UNOVERLOADING =
  sig
    val unoverload: cterm -> thm -> thm
    val unoverload_attr: cterm -> attribute
  end
structure Unoverloading: UNOVERLOADING
signature INTERNALIZE_SORT =
  sig
    val internalize_sort: ctyp -> thm -> typ * thm
    val internalize_sort_attr: typ -> attribute
  end
structure Internalize_Sort: INTERNALIZE_SORT
class card2 = finite +
  assumes "two_le_card": "2 <= CARD('a)"
### ML warning (line 41 of "~~/src/HOL/Types_To_Sets/unoverload_type.ML"):
### Matches are not exhaustive.
signature UNOVERLOAD_TYPE =
  sig
    val unoverload_type: Context.generic -> indexname list -> thm -> thm
    val unoverload_type_attr: indexname list -> attribute
  end
structure Unoverload_Type: UNOVERLOAD_TYPE
class finite_UNIV = type +
  fixes finite_UNIV :: "('a, bool) phantom"
  assumes "finite_UNIV": "finite_UNIV = Phantom('a) (finite UNIV)"
class card_UNIV = finite_UNIV +
  fixes card_UNIV :: "('a, nat) phantom"
  assumes "card_UNIV": "card_UNIV_class.card_UNIV = Phantom('a) CARD('a)"
instantiation
  nat :: card_UNIV
  card_UNIV_nat == card_UNIV_class.card_UNIV :: (nat, nat) phantom
  finite_UNIV_nat == finite_UNIV :: (nat, bool) phantom
instantiation
  int :: card_UNIV
  card_UNIV_int == card_UNIV_class.card_UNIV :: (int, nat) phantom
  finite_UNIV_int == finite_UNIV :: (int, bool) phantom
instantiation
  natural :: card_UNIV
  card_UNIV_natural == card_UNIV_class.card_UNIV :: (natural, nat) phantom
  finite_UNIV_natural == finite_UNIV :: (natural, bool) phantom
### ML warning (line 36 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
### ML warning (line 36 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Value identifier (ctxt') has not been referenced.
### ML warning (line 40 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
### ML warning (line 66 of "~~/src/HOL/Types_To_Sets/unoverload_def.ML"):
### Pattern is not exhaustive.
structure Unoverload_Def:
  sig
    val unoverload_def: binding option -> thm -> theory -> theory
    val unoverload_def1_cmd:
       binding option * (Facts.ref * Token.src list) -> theory -> theory
  end
### theory "HOL-Types_To_Sets.Types_To_Sets"
### 0.307s elapsed time, 1.207s cpu time, 0.105s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms" via "HOL-Library.Countable_Set")
instantiation
  integer :: card_UNIV
  card_UNIV_integer == card_UNIV_class.card_UNIV :: (integer, nat) phantom
  finite_UNIV_integer == finite_UNIV :: (integer, bool) phantom
instantiation
  list :: (type) card_UNIV
  card_UNIV_list == card_UNIV_class.card_UNIV :: ('a list, nat) phantom
  finite_UNIV_list == finite_UNIV :: ('a list, bool) phantom
instantiation
  unit :: card_UNIV
  card_UNIV_unit == card_UNIV_class.card_UNIV :: (unit, nat) phantom
  finite_UNIV_unit == finite_UNIV :: (unit, bool) phantom
instantiation
  bool :: card_UNIV
  card_UNIV_bool == card_UNIV_class.card_UNIV :: (bool, nat) phantom
  finite_UNIV_bool == finite_UNIV :: (bool, bool) phantom
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
instantiation
  char :: card_UNIV
  card_UNIV_char == card_UNIV_class.card_UNIV :: (char, nat) phantom
  finite_UNIV_char == finite_UNIV :: (char, bool) phantom
instantiation
  prod :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_prod == finite_UNIV :: ('a * 'b, bool) phantom
instantiation
  prod :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_prod == card_UNIV_class.card_UNIV :: ('a * 'b, nat) phantom
instantiation
  sum :: (finite_UNIV, finite_UNIV) finite_UNIV
  finite_UNIV_sum == finite_UNIV :: ('a + 'b, bool) phantom
instantiation
  sum :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_sum == card_UNIV_class.card_UNIV :: ('a + 'b, nat) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  fun :: (finite_UNIV, card_UNIV) finite_UNIV
  finite_UNIV_fun == finite_UNIV :: ('a => 'b, bool) phantom
instantiation
  fun :: (card_UNIV, card_UNIV) card_UNIV
  card_UNIV_fun == card_UNIV_class.card_UNIV :: ('a => 'b, nat) phantom
instantiation
  option :: (finite_UNIV) finite_UNIV
  finite_UNIV_option == finite_UNIV :: ('a option, bool) phantom
instantiation
  option :: (card_UNIV) card_UNIV
  card_UNIV_option == card_UNIV_class.card_UNIV :: ('a option, nat) phantom
instantiation
  String.literal :: card_UNIV
  card_UNIV_literal == card_UNIV_class.card_UNIV ::
    (String.literal, nat) phantom
  finite_UNIV_literal == finite_UNIV :: (String.literal, bool) phantom
instantiation
  set :: (finite_UNIV) finite_UNIV
  finite_UNIV_set == finite_UNIV :: ('a set, bool) phantom
instantiation
  set :: (card_UNIV) card_UNIV
  card_UNIV_set == card_UNIV_class.card_UNIV :: ('a set, nat) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_1 :: card_UNIV
  card_UNIV_finite_1 == card_UNIV_class.card_UNIV ::
    (Enum.finite_1, nat) phantom
  finite_UNIV_finite_1 == finite_UNIV :: (Enum.finite_1, bool) phantom
instantiation
  Enum.finite_2 :: card_UNIV
  card_UNIV_finite_2 == card_UNIV_class.card_UNIV ::
    (Enum.finite_2, nat) phantom
  finite_UNIV_finite_2 == finite_UNIV :: (Enum.finite_2, bool) phantom
instantiation
  Enum.finite_3 :: card_UNIV
  card_UNIV_finite_3 == card_UNIV_class.card_UNIV ::
    (Enum.finite_3, nat) phantom
  finite_UNIV_finite_3 == finite_UNIV :: (Enum.finite_3, bool) phantom
Found termination order: "size <*mlex*> {}"
instantiation
  Enum.finite_4 :: card_UNIV
  card_UNIV_finite_4 == card_UNIV_class.card_UNIV ::
    (Enum.finite_4, nat) phantom
  finite_UNIV_finite_4 == finite_UNIV :: (Enum.finite_4, bool) phantom
instantiation
  Enum.finite_5 :: card_UNIV
  card_UNIV_finite_5 == card_UNIV_class.card_UNIV ::
    (Enum.finite_5, nat) phantom
  finite_UNIV_finite_5 == finite_UNIV :: (Enum.finite_5, bool) phantom
### theory "HOL-Library.Cardinality"
### 0.766s elapsed time, 3.011s cpu time, 0.223s GC time
Loading theory "HOL-Library.Numeral_Type" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: CARD_1
instantiation
  num1 :: {comm_monoid_mult,numeral,comm_ring}
  uminus_num1 == uminus :: num1 => num1
  zero_num1 == zero_class.zero :: num1
  minus_num1 == minus :: num1 => num1 => num1
  plus_num1 == plus :: num1 => num1 => num1
  one_num1 == one_class.one :: num1
  times_num1 == times :: num1 => num1 => num1
instantiation
  num1 :: linorder
  less_eq_num1 == less_eq :: num1 => num1 => bool
  less_num1 == less :: num1 => num1 => bool
### Additional type variable(s) in locale specification "countable": 'a
locale mod_type
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_type n Rep Abs"
Found termination order: "size <*mlex*> {}"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
locale mod_ring
  fixes n :: "int"
    and Rep :: "'a => int"
    and Abs :: "int => 'a"
  assumes "mod_ring n Rep Abs"
instantiation
  bit0 :: (finite) {minus,one,plus,times,uminus,zero}
  bit1 :: (finite) {minus,one,plus,times,uminus,zero}
  zero_bit0 == zero_class.zero :: 'a bit0
  uminus_bit0 == uminus :: 'a bit0 => 'a bit0
  times_bit0 == times :: 'a bit0 => 'a bit0 => 'a bit0
  plus_bit0 == plus :: 'a bit0 => 'a bit0 => 'a bit0
  one_bit0 == one_class.one :: 'a bit0
  minus_bit0 == minus :: 'a bit0 => 'a bit0 => 'a bit0
  zero_bit1 == zero_class.zero :: 'a bit1
  uminus_bit1 == uminus :: 'a bit1 => 'a bit1
  times_bit1 == times :: 'a bit1 => 'a bit1 => 'a bit1
  plus_bit1 == plus :: 'a bit1 => 'a bit1 => 'a bit1
  one_bit1 == one_class.one :: 'a bit1
  minus_bit1 == minus :: 'a bit1 => 'a bit1 => 'a bit1
Found termination order: "size <*mlex*> {}"
class orthomodular_lattice = orthocomplemented_lattice +
  assumes
    "orthomodular": "!!x y. x <= y ==> x \<squnion> - x \<sqinter> y = y"
Found termination order: "size <*mlex*> {}"
instantiation
  bit0 :: (finite) linorder
  bit1 :: (finite) linorder
  less_eq_bit0 == less_eq :: 'a bit0 => 'a bit0 => bool
  less_bit0 == less :: 'a bit0 => 'a bit0 => bool
  less_eq_bit1 == less_eq :: 'a bit1 => 'a bit1 => bool
  less_bit1 == less :: 'a bit1 => 'a bit1 => bool
Proofs for inductive predicate(s) "finite_item"
Found termination order: "size <*mlex*> {}"
  Proving monotonicity ...
instantiation
  num0 :: equal
  equal_num0 == equal_class.equal :: num0 => num0 => bool
Found termination order: "size <*mlex*> {}"
instantiation
  num1 :: equal
  equal_num1 == equal_class.equal :: num1 => num1 => bool
instantiation
  num1 :: enum
  enum_num1 == enum_class.enum :: num1 list
  enum_all_num1 == enum_class.enum_all :: (num1 => bool) => bool
  enum_ex_num1 == enum_class.enum_ex :: (num1 => bool) => bool
instantiation
  num0 :: card_UNIV
  num1 :: card_UNIV
  card_UNIV_num0 == card_UNIV_class.card_UNIV :: (num0, nat) phantom
  finite_UNIV_num0 == finite_UNIV :: (num0, bool) phantom
  card_UNIV_num1 == card_UNIV_class.card_UNIV :: (num1, nat) phantom
  finite_UNIV_num1 == finite_UNIV :: (num1, bool) phantom
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
instantiation
  bit0 :: (finite) equal
  bit1 :: (finite) equal
  equal_bit0 == equal_class.equal :: 'a bit0 => 'a bit0 => bool
  equal_bit1 == equal_class.equal :: 'a bit1 => 'a bit1 => bool
instantiation
  bit0 :: (finite) enum
  enum_bit0 == enum_class.enum :: 'a bit0 list
  enum_all_bit0 == enum_class.enum_all :: ('a bit0 => bool) => bool
  enum_ex_bit0 == enum_class.enum_ex :: ('a bit0 => bool) => bool
Found termination order: "size <*mlex*> {}"
instantiation
  bit1 :: (finite) enum
  enum_bit1 == enum_class.enum :: 'a bit1 list
  enum_all_bit1 == enum_class.enum_all :: ('a bit1 => bool) => bool
  enum_ex_bit1 == enum_class.enum_ex :: ('a bit1 => bool) => bool
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
instantiation
  bit0 :: (finite) finite_UNIV
  bit1 :: (finite) finite_UNIV
  finite_UNIV_bit0 == finite_UNIV :: ('a bit0, bool) phantom
  finite_UNIV_bit1 == finite_UNIV :: ('a bit1, bool) phantom
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
instantiation
  bit0 :: ({card_UNIV,finite}) card_UNIV
  bit1 :: ({card_UNIV,finite}) card_UNIV
  card_UNIV_bit0 == card_UNIV_class.card_UNIV :: ('a bit0, nat) phantom
  card_UNIV_bit1 == card_UNIV_class.card_UNIV :: ('a bit1, nat) phantom
### theory "HOL-Library.Numeral_Type"
### 0.759s elapsed time, 2.972s cpu time, 0.266s GC time
Loading theory "HOL-Analysis.Metric_Arith" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.254s elapsed time, 4.934s cpu time, 0.362s GC time
Loading theory "HOL-Library.Countable_Set" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology" via "HOL-Library.Set_Idioms")
Found termination order: "size <*mlex*> {}"
### theory "Complex_Bounded_Operators.Extra_Lattice"
### 3.233s elapsed time, 12.607s cpu time, 1.286s GC time
Loading theory "HOL-Analysis.Inner_Product" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Library.Tree"
### 2.023s elapsed time, 7.983s cpu time, 0.563s GC time
Loading theory "Draft.Templates" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_set
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_set (\<^bold>*) \<^bold>1"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.084s elapsed time, 0.324s cpu time, 0.059s GC time
Loading theory "HOL-Analysis.L2_Norm" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product" via "HOL-Analysis.Euclidean_Space")
### theory "HOL-Analysis.L2_Norm"
### 0.102s elapsed time, 0.399s cpu time, 0.040s GC time
Loading theory "HOL-Analysis.Operator_Norm" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces")
signature METRIC_ARITH =
  sig
    val argo_timeout: real Config.T
    val metric_arith_tac: Proof.context -> int -> tactic
    val trace: bool Config.T
  end
structure Metric_Arith: METRIC_ARITH
### theory "HOL-Analysis.Metric_Arith"
### 0.628s elapsed time, 2.477s cpu time, 0.174s GC time
Loading theory "HOL-Analysis.Product_Vector" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology")
### theory "HOL-Library.Countable_Set"
### 0.455s elapsed time, 1.801s cpu time, 0.122s GC time
Loading theory "HOL-Library.Countable_Complete_Lattices" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat" via "HOL-Library.Order_Continuity")
### theory "HOL-Analysis.Operator_Norm"
### 0.121s elapsed time, 0.469s cpu time, 0.064s GC time
Loading theory "HOL-Library.Set_Idioms" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Topology")
locale module_prod
  fixes s1 :: "'a => 'b => 'b"
    and s2 :: "'a => 'c => 'c"
  assumes "module_prod s1 s2"
### theory "HOL-Library.Set_Idioms"
### 0.212s elapsed time, 0.838s cpu time, 0.045s GC time
Loading theory "HOL-Analysis.Abstract_Topology" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
class real_inner = dist_norm + real_vector + sgn_div_norm +
  uniformity_dist + open_uniformity +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. inner x y = inner y x"
    and "inner_add_left": "!!x y z. inner (x + y) z = inner x z + inner y z"
    and
    "inner_scaleR_left": "!!r x y. inner (r *\<^sub>R x) y = r * inner x y"
    and "inner_ge_zero": "!!x. 0 <= inner x x"
    and "inner_eq_zero_iff": "!!x. (inner x x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (inner x x)"
locale vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
  assumes "vector_space_prod (*a) (*b)"
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (real_vector, real_vector) real_vector
  scaleR_prod == scaleR :: real => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
instantiation
  prod :: (metric_space, metric_space) dist
  dist_prod == dist :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (uniformity, uniformity) uniformity
  uniformity_prod == uniformity :: (('a * 'b) * 'a * 'b) filter
class countable_complete_lattice = Inf + Sup + lattice + bot + top +
  assumes "ccInf_lower": "!!A x. [| countable A; x : A |] ==> Inf A <= x"
  assumes
    "ccInf_greatest":
      "!!A z. [| countable A; !!x. x : A ==> z <= x |] ==> z <= Inf A"
  assumes "ccSup_upper": "!!A x. [| countable A; x : A |] ==> x <= Sup A"
  assumes
    "ccSup_least":
      "!!A z. [| countable A; !!x. x : A ==> x <= z |] ==> Sup A <= z"
  assumes "ccInf_empty": "Inf {} = top"
  assumes "ccSup_empty": "Sup {} = bot"
instantiation
  prod :: (uniform_space, uniform_space) uniform_space
instantiation
  prod :: (metric_space, metric_space) uniformity_dist
instantiation
  prod :: (metric_space, metric_space) metric_space
instantiation
  prod :: (real_normed_vector, real_normed_vector) real_normed_vector
  sgn_prod == sgn :: 'a * 'b => 'a * 'b
  norm_prod == norm :: 'a * 'b => real
instantiation
  real :: real_inner
  inner_real == inner :: real => real => real
instantiation
  complex :: real_inner
  inner_complex == inner :: complex => complex => real
bundle inner_syntax
bundle no_inner_syntax
### theory "HOL-Analysis.Inner_Product"
### 1.405s elapsed time, 5.355s cpu time, 1.406s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.ExtrEqs")
locale finite_dimensional_vector_space_prod
  fixes s1 :: "'a => 'b => 'b"  (infixr \<open>*a\<close> 75)
    and s2 :: "'a => 'c => 'c"  (infixr \<open>*b\<close> 75)
    and B1 :: "'b set"
    and B2 :: "'c set"
  assumes "finite_dimensional_vector_space_prod (*a) (*b) B1 B2"
### theory "HOL-Analysis.Product_Vector"
### 1.280s elapsed time, 4.868s cpu time, 1.343s GC time
Loading theory "HOL-Analysis.Elementary_Topology" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces")
class countable_complete_distrib_lattice = countable_complete_lattice +
  assumes
    "sup_ccInf": "!!B a. countable B ==> sup a (Inf B) = Inf (sup a ` B)"
  assumes
    "inf_ccSup": "!!B a. countable B ==> inf a (Sup B) = Sup (inf a ` B)"
class topological_space = open +
  assumes "open_UNIV": "open UNIV"
  assumes "open_Int": "!!S T. [| open S; open T |] ==> open (S Int T)"
  assumes "open_Union": "!!K. Ball K open ==> open (\<Union> K)"
locale countable_basis
  fixes p :: "'a set => bool"
    and B :: "'a set set"
  assumes "countable_basis p B"
### theory "HOL-Library.BigO"
### 1.158s elapsed time, 4.405s cpu time, 1.482s GC time
Loading theory "HOL-Analysis.Euclidean_Space" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space" via "HOL-Analysis.Finite_Cartesian_Product")
class second_countable_topology = topological_space +
  assumes
    "ex_countable_subbasis":
      "EX B. countable B & open = generate_topology B"
### theory "HOL-Library.Countable_Complete_Lattices"
### 2.872s elapsed time, 10.985s cpu time, 3.037s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Complex_Vector_SpacesMoreTemplates")
class euclidean_space = real_inner +
  fixes Basis :: "'a set"
  assumes "nonempty_Basis": "Basis ~= {}"
  assumes "finite_Basis": "finite Basis"
  assumes
    "inner_Basis":
      "!!u v.
          [| u : Basis; v : Basis |]
          ==> inner u v = (if u = v then 1 else 0)"
  assumes
    "euclidean_all_zero_iff":
      "!!x. (ALL u:Basis. inner x u = 0) = (x = (0::'a))"
Proofs for inductive predicate(s) "generate_topology_on"
  Proving monotonicity ...
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.729s elapsed time, 2.878s cpu time, 0.429s GC time
Loading theory "HOL-Library.Complex_Order" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General")
### theory "HOL-Analysis.Abstract_Topology"
### 3.268s elapsed time, 12.552s cpu time, 3.357s GC time
Loading theory "HOL-Library.Discrete" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
instantiation
  complex :: order
  less_eq_complex == less_eq :: complex => complex => bool
  less_complex == less :: complex => complex => bool
### theory "HOL-Analysis.Elementary_Topology"
### 2.392s elapsed time, 9.268s cpu time, 2.203s GC time
Loading theory "HOL-Library.Indicator_Function" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces" via "HOL-Analysis.Abstract_Topology_2")
### theory "HOL-Library.Complex_Order"
### 0.084s elapsed time, 0.317s cpu time, 0.080s GC time
Loading theory "Complex_Bounded_Operators.Extra_Ordered_Fields" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces")
### Rewrite rule not in simpset:
### Wellfounded.accp log_rel ?n1 ==>
### log ?n1 == if ?n1 < 2 then 0 else Suc (log (?n1 div 2))
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Discrete"
### 0.172s elapsed time, 0.678s cpu time, 0.080s GC time
Loading theory "Draft.Complex_Vector_Spaces0" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces")
instantiation
  real :: euclidean_space
  Basis_real == Basis :: real set
instantiation
  complex :: euclidean_space
  Basis_complex == Basis :: complex set
class scaleC = scaleR +
  fixes scaleC :: "complex => 'a => 'a"
  assumes
    "scaleR_scaleC": "!!r. (*\<^sub>R) r = (*\<^sub>C) (complex_of_real r)"
instantiation
  prod :: (real_inner, real_inner) real_inner
  inner_prod == inner :: 'a * 'b => 'a * 'b => real
instantiation
  prod :: (euclidean_space, euclidean_space) euclidean_space
  Basis_prod == Basis :: ('a * 'b) set
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Euclidean_Space"
### 1.778s elapsed time, 7.010s cpu time, 0.904s GC time
Loading theory "HOL-Analysis.Finite_Cartesian_Product" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
### theory "HOL-Library.Indicator_Function"
### 0.425s elapsed time, 1.680s cpu time, 0.146s GC time
Loading theory "HOL-Analysis.Linear_Algebra" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Cartesian_Space")
class complex_vector = scaleC + ab_group_add +
  assumes
    "scaleC_add_right":
      "!!a x y. a *\<^sub>C (x + y) = a *\<^sub>C x + a *\<^sub>C y"
    and
    "scaleC_add_left":
      "!!a b x. (a + b) *\<^sub>C x = a *\<^sub>C x + b *\<^sub>C x"
    and
    "scaleC_scaleC":
      "!!a b x. a *\<^sub>C b *\<^sub>C x = (a * b) *\<^sub>C x"
    and "scaleC_one": "!!x. 1 *\<^sub>C x = x"
class real_inner = real_normed_vector +
  fixes inner :: "'a => 'a => real"
  assumes "inner_commute": "!!x y. x \<bullet> y = y \<bullet> x"
    and
    "inner_add_left":
      "!!x y z. (x + y) \<bullet> z = x \<bullet> z + y \<bullet> z"
    and
    "inner_scaleR_left":
      "!!r x y. r *\<^sub>R x \<bullet> y = r * (x \<bullet> y)"
    and "inner_ge_zero": "!!x. 0 <= x \<bullet> x"
    and "inner_eq_zero_iff": "!!x. (x \<bullet> x = 0) = (x = (0::'a))"
    and "norm_eq_sqrt_inner": "!!x. norm x = sqrt (x \<bullet> x)"
class partial_abs_if = abs + minus + uminus + zero + ord +
  assumes "abs_neg": "!!a. a <= (0::'a) ==> \<bar>a\<bar> = - a"
  assumes "abs_pos": "!!a. (0::'a) <= a ==> \<bar>a\<bar> = a"
class complex_algebra = complex_vector + ring +
  assumes
    "mult_scaleC_left": "!!a x y. a *\<^sub>C x * y = a *\<^sub>C (x * y)"
    and
    "mult_scaleC_right": "!!x a y. x * a *\<^sub>C y = a *\<^sub>C (x * y)"
bundle vec_syntax
bundle no_vec_syntax
instantiation
  vec :: (zero, finite) zero
  zero_vec == zero_class.zero :: ('a, 'b) vec
instantiation
  vec :: (plus, finite) plus
  plus_vec == plus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (minus, finite) minus
  minus_vec == minus :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (uminus, finite) uminus
  uminus_vec == uminus :: ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (times, finite) times
  times_vec == times :: ('a, 'b) vec => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (one, finite) one
  one_vec == one_class.one :: ('a, 'b) vec
instantiation
  vec :: (ord, finite) ord
  less_eq_vec == less_eq :: ('a, 'b) vec => ('a, 'b) vec => bool
  less_vec == less :: ('a, 'b) vec => ('a, 'b) vec => bool
### theory "HOL-Analysis.Linear_Algebra"
### 0.977s elapsed time, 3.854s cpu time, 0.386s GC time
Loading theory "HOL-Analysis.Affine" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Convex")
instantiation
  vec :: (real_vector, finite) real_vector
  scaleR_vec == scaleR :: real => ('a, 'b) vec => ('a, 'b) vec
instantiation
  vec :: (topological_space, finite) topological_space
  open_vec == open :: ('a, 'b) vec set => bool
instantiation
  vec :: (metric_space, finite) dist
  dist_vec == dist :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (metric_space, finite) uniformity_dist
  uniformity_vec == uniformity :: (('a, 'b) vec * ('a, 'b) vec) filter
instantiation
  vec :: (metric_space, finite) metric_space
instantiation
  vec :: (real_normed_vector, finite) real_normed_vector
  sgn_vec == sgn :: ('a, 'b) vec => ('a, 'b) vec
  norm_vec == norm :: ('a, 'b) vec => real
instantiation
  vec :: (real_inner, finite) real_inner
  inner_vec == inner :: ('a, 'b) vec => ('a, 'b) vec => real
instantiation
  vec :: (euclidean_space, finite) euclidean_space
  Basis_vec == Basis :: ('a, 'b) vec set
### theory "HOL-Analysis.Affine"
### 0.511s elapsed time, 2.003s cpu time, 0.342s GC time
Loading theory "HOL-Analysis.Convex" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike" via "HOL-Analysis.Convex_Euclidean_Space")
### theory "HOL-Analysis.Finite_Cartesian_Product"
### 1.704s elapsed time, 6.707s cpu time, 0.816s GC time
Loading theory "HOL-Analysis.Cartesian_Space" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces")
class ordered_semiring_strict = comm_monoid_add +
  ordered_cancel_ab_semigroup_add + semiring +
  assumes
    "mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
  assumes
    "mult_strict_right_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> a * c < b * c"
### theory "HOL-Analysis.Convex"
### 0.987s elapsed time, 3.874s cpu time, 0.575s GC time
Loading theory "HOL-Analysis.Abstract_Topology_2" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces" via "HOL-Analysis.Elementary_Metric_Spaces")
locale linear_first_finite_dimensional_vector_space
  fixes scaleB :: "'a => 'b => 'b"  (infixr \<open>*b\<close> 75)
    and scaleC :: "'a => 'c => 'c"  (infixr \<open>*c\<close> 75)
    and BasisB :: "'b set"
    and f :: "'b => 'c"
  assumes "linear_first_finite_dimensional_vector_space (*b) (*c) BasisB f"
### theory "HOL-Analysis.Cartesian_Space"
### 1.663s elapsed time, 6.508s cpu time, 0.945s GC time
Loading theory "HOL-Library.Liminf_Limsup" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
instantiation
  complex :: complex_field
  scaleC_complex == scaleC :: complex => complex => complex
### theory "HOL-Analysis.Abstract_Topology_2"
### 1.373s elapsed time, 5.330s cpu time, 0.815s GC time
Loading theory "HOL-Analysis.Connected" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces")
### theory "HOL-Library.Liminf_Limsup"
### 0.538s elapsed time, 2.070s cpu time, 0.357s GC time
Loading theory "HOL-Analysis.Elementary_Metric_Spaces" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Elementary_Normed_Spaces")
locale clinear
  fixes f :: "'a => 'b"
  assumes "clinear f"
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "HOL-Analysis.Connected"
### 0.343s elapsed time, 1.325s cpu time, 0.224s GC time
Loading theory "HOL-Library.Order_Continuity" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real" via "HOL-Library.Extended_Nat")
class ordered_comm_semiring_strict = ordered_cancel_ab_semigroup_add +
  comm_semiring_0 +
  assumes
    "comm_mult_strict_left_mono":
      "!!a b c. [| a < b; (0::'a) < c |] ==> c * a < c * b"
class ordered_complex_vector = complex_vector + ordered_ab_group_add +
  assumes
    "scaleC_left_mono":
      "!!x y a. [| x <= y; 0 <= a |] ==> a *\<^sub>C x <= a *\<^sub>C y"
    and
    "scaleC_right_mono":
      "!!a b x.
          [| a <= b; (0::'a) <= x |] ==> a *\<^sub>C x <= b *\<^sub>C x"
### theory "HOL-Library.Order_Continuity"
### 1.375s elapsed time, 5.134s cpu time, 3.031s GC time
Loading theory "HOL-Library.Extended_Nat" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Library.Extended_Real")
class heine_borel = metric_space +
  assumes
    "bounded_imp_convergent_subsequence":
      "!!f. bounded (range f) ==>
            EX l r. strict_mono r & (f o r) \<longlonglongrightarrow> l"
class infinity = type +
  fixes infinity :: "'a"
instantiation
  enat :: infinity
  infinity_enat == infinity :: enat
Proofs for inductive predicate(s) "rec_set_enat"
### No equation for constructor "Extended_Nat.infinity_class.infinity"
### in definition of function "the_enat"
consts
  the_enat :: "enat => nat"
instantiation
  enat :: zero_neq_one
  one_enat == one_class.one :: enat
  zero_enat == zero_class.zero :: enat
instantiation
  enat :: comm_monoid_add
  plus_enat == plus :: enat => enat => enat
instantiation
  enat :: {comm_semiring_1,semiring_no_zero_divisors}
  times_enat == times :: enat => enat => enat
instantiation
  enat :: minus
  minus_enat == minus :: enat => enat => enat
instantiation
  enat :: linordered_ab_semigroup_add
  less_eq_enat == less_eq :: enat => enat => bool
  less_enat == less :: enat => enat => bool
instantiation
  enat :: {order_bot,order_top}
  top_enat == top :: enat
  bot_enat == bot :: enat
structure Cancel_Enat_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Enat_Cancel:
  sig val proc: Proof.context -> term -> thm option end
instantiation
  enat :: complete_lattice
  Inf_enat == Inf :: enat set => enat
  Sup_enat == Sup :: enat set => enat
  sup_enat == sup :: enat => enat => enat
  inf_enat == inf :: enat => enat => enat
### theory "HOL-Library.Extended_Nat"
### 0.711s elapsed time, 2.784s cpu time, 0.217s GC time
Loading theory "HOL-Library.Extended_Real" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
class complex_normed_vector = complex_vector + real_normed_vector +
  assumes "norm_scaleC": "!!a x. norm (a *\<^sub>C x) = cmod a * norm x"
### theory "HOL-Analysis.Elementary_Metric_Spaces"
### 2.680s elapsed time, 10.206s cpu time, 3.605s GC time
Loading theory "HOL-Analysis.Elementary_Normed_Spaces" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces")
instantiation
  enat :: linorder_topology
  open_enat == open :: enat set => bool
instantiation
  ereal :: uminus
  uminus_ereal == uminus :: ereal => ereal
Found termination order: "{}"
instantiation
  ereal :: infinity
  infinity_ereal == infinity :: ereal
instantiation
  ereal :: abs
  abs_ereal == abs :: ereal => ereal
instantiation
  ereal :: {comm_monoid_add,zero_neq_one}
  one_ereal == one_class.one :: ereal
  zero_ereal == zero_class.zero :: ereal
  plus_ereal == plus :: ereal => ereal => ereal
instantiation
  ereal :: linorder
  less_eq_ereal == less_eq :: ereal => ereal => bool
  less_ereal == less :: ereal => ereal => bool
instantiation
  ereal :: {comm_monoid_mult,sgn}
  sgn_ereal == sgn :: ereal => ereal
  times_ereal == times :: ereal => ereal => ereal
### theory "HOL-Analysis.Elementary_Normed_Spaces"
### 1.387s elapsed time, 5.343s cpu time, 0.632s GC time
Loading theory "HOL-Library.Sum_of_Squares" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space" via "HOL-Analysis.Norm_Arith")
instantiation
  ereal :: minus
  minus_ereal == minus :: ereal => ereal => ereal
instantiation
  ereal :: inverse
  inverse_ereal == inverse :: ereal => ereal
  divide_ereal == divide :: ereal => ereal => ereal
instantiation
  ereal :: lattice
  inf_ereal == inf :: ereal => ereal => ereal
  sup_ereal == sup :: ereal => ereal => ereal
instantiation
  ereal :: complete_lattice
  Inf_ereal == Inf :: ereal set => ereal
  Sup_ereal == Sup :: ereal set => ereal
  bot_ereal == bot :: ereal
  top_ereal == top :: ereal
instantiation
  ereal :: linear_continuum_topology
  open_ereal == open :: ereal set => bool
### ML warning (line 261 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_abs) has not been referenced.
### ML warning (line 265 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_max) has not been referenced.
### ML warning (line 269 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Value identifier (pth_min) has not been referenced.
### ML warning (line 379 of "~~/src/HOL/Library/Sum_of_Squares/positivstellensatz.ML"):
### Pattern is not exhaustive.
signature FUNC =
  sig
    exception DUP of key
    exception SAME
    exception UNDEF of key
    val apply: 'a table -> key -> 'a
    val applyd: 'a table -> (key -> 'a) -> key -> 'a
    val build: ('a table -> 'a table) -> 'a table
    val choose: 'a table -> key * 'a
    val combine:
       ('a -> 'a -> 'a) -> ('a -> bool) -> 'a table -> 'a table -> 'a table
    val cons_list: key * 'a -> 'a list table -> 'a list table
    val default: key * 'a -> 'a table -> 'a table
    val defined: 'a table -> key -> bool
    val delete: key -> 'a table -> 'a table
    val delete_safe: key -> 'a table -> 'a table
    val dest: 'a table -> (key * 'a) list
    val dest_list: 'a list table -> (key * 'a) list
    val dom: 'a table -> key list
    val empty: 'a table
    val exists: (key * 'a -> bool) -> 'a table -> bool
    val fold: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val fold_rev: (key * 'a -> 'b -> 'b) -> 'a table -> 'b -> 'b
    val forall: (key * 'a -> bool) -> 'a table -> bool
    val get_first: (key * 'a -> 'b option) -> 'a table -> 'b option
    val insert: ('a * 'a -> bool) -> key * 'a -> 'a table -> 'a table
    val insert_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val insert_set: key -> set -> set
    val is_empty: 'a table -> bool
    val is_single: 'a table -> bool
    val join: (key -> 'a * 'a -> 'a) -> 'a table * 'a table -> 'a table
    type key
    val keys: 'a table -> key list
    val lookup: 'a table -> key -> 'a option
    val lookup_key: 'a table -> key -> (key * 'a) option
    val lookup_list: 'a list table -> key -> 'a list
    val make: (key * 'a) list -> 'a table
    val make_list: (key * 'a) list -> 'a list table
    val make_set: key list -> set
    val map: (key -> 'a -> 'b) -> 'a table -> 'b table
    val map_default: key * 'a -> ('a -> 'a) -> 'a table -> 'a table
    val map_entry: key -> ('a -> 'a) -> 'a table -> 'a table
    val max: 'a table -> (key * 'a) option
    val member: ('a * 'b -> bool) -> 'b table -> key * 'a -> bool
    val merge: ('a * 'a -> bool) -> 'a table * 'a table -> 'a table
    val merge_list:
       ('a * 'a -> bool) -> 'a list table * 'a list table -> 'a list table
    val min: 'a table -> (key * 'a) option
    val onefunc: key * 'a -> 'a table
    val remove: ('a * 'b -> bool) -> key * 'a -> 'b table -> 'b table
    val remove_list:
       ('a * 'b -> bool) -> key * 'a -> 'b list table -> 'b list table
    val remove_set: key -> set -> set
    type set = unit table
    type 'a table
    val tryapplyd: 'a table -> key -> 'a -> 'a
    val update: key * 'a -> 'a table -> 'a table
    val update_list:
       ('a * 'a -> bool) -> key * 'a -> 'a list table -> 'a list table
    val update_new: key * 'a -> 'a table -> 'a table
    val updatep: (key * 'a -> bool) -> key * 'a -> 'a table -> 'a table
  end
functor FuncFun (Key: KEY): FUNC
signature REAL_ARITH =
  sig
    type cert_conv = cterm -> thm * pss_tree
    val cterm_of_rat: Rat.rat -> cterm
    val dest_ratconst: cterm -> Rat.rat
    val gen_gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * conv * conv * prover
           -> cert_conv
    val gen_prover_real_arith: Proof.context -> prover -> cert_conv
    val gen_real_arith:
       Proof.context ->
         (Rat.rat -> cterm) * conv * conv * conv * conv * conv * conv *
         conv * prover
           -> cert_conv
    val is_ratconst: cterm -> bool
    datatype positivstellensatz
    =
         Axiom_eq of int
       | Axiom_le of int
       | Axiom_lt of int
       | Eqmul of FuncUtil.poly * positivstellensatz
       | Product of positivstellensatz * positivstellensatz
       | Rational_eq of Rat.rat
       | Rational_le of Rat.rat
       | Rational_lt of Rat.rat
       | Square of FuncUtil.poly
       | Sum of positivstellensatz * positivstellensatz
    type prover =
       tree_choice list ->
         (thm list * thm list * thm list -> positivstellensatz -> thm) ->
           thm list * thm list * thm list -> thm * pss_tree
    datatype pss_tree
    = Branch of pss_tree * pss_tree | Cert of positivstellensatz | Trivial
    val real_linear_prover:
       (thm list * thm list * thm list -> positivstellensatz -> thm) ->
         thm list * thm list * thm list -> thm * pss_tree
    datatype tree_choice = Left | Right
  end
structure FuncUtil:
  sig
    structure Ctermfunc: FUNC
    structure Intfunc: FUNC
    structure Intpairfunc: FUNC
    structure Monomialfunc: FUNC
    structure Ratfunc: FUNC
    structure Symfunc: FUNC
    structure Termfunc: FUNC
    val dest_monomial: 'a Ctermfunc.table -> (cterm * 'a) list
    type monomial = int Ctermfunc.table
    val monomial_ord: int Ctermfunc.table * int Ctermfunc.table -> order
    val monomial_order: int Ctermfunc.table * int Ctermfunc.table -> order
    type poly = Rat.rat Monomialfunc.table
  end
structure RealArith: REAL_ARITH
signature POSITIVSTELLENSATZ_TOOLS =
  sig
    val print_cert: RealArith.pss_tree -> string
    val read_cert: Proof.context -> string -> RealArith.pss_tree
  end
structure Positivstellensatz_Tools: POSITIVSTELLENSATZ_TOOLS
signature SUM_OF_SQUARES =
  sig
    exception Failure of string
    val debug: bool Config.T
    val debug_message: Proof.context -> (unit -> string) -> unit
    datatype proof_method
    = Certificate of RealArith.pss_tree | Prover of string -> string
    val sos_tac:
       (RealArith.pss_tree -> unit) ->
         proof_method -> Proof.context -> int -> tactic
    val trace: bool Config.T
    val trace_message: Proof.context -> (unit -> string) -> unit
  end
structure Sum_of_Squares: SUM_OF_SQUARES
### theory "HOL-Library.Extended_Real"
### 3.894s elapsed time, 14.739s cpu time, 4.576s GC time
Loading theory "HOL-Library.Extended_Nonnegative_Real" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests" via "HOL-Analysis.Extended_Real_Limits")
signature SOS_WRAPPER =
  sig val sos_tac: Proof.context -> string option -> int -> tactic end
structure SOS_Wrapper: SOS_WRAPPER
### theory "HOL-Library.Sum_of_Squares"
### 2.275s elapsed time, 8.510s cpu time, 3.812s GC time
Loading theory "HOL-Analysis.Norm_Arith" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike" via "HOL-Analysis.Convex_Euclidean_Space" via "HOL-Analysis.Topology_Euclidean_Space")
### ML warning (line 103 of "~~/src/HOL/Analysis/normarith.ML"):
### Matches are not exhaustive.
signature NORM_ARITH =
  sig
    val norm_arith: Proof.context -> conv
    val norm_arith_tac: Proof.context -> int -> tactic
  end
structure NormArith: NORM_ARITH
### theory "HOL-Analysis.Norm_Arith"
### 0.302s elapsed time, 1.165s cpu time, 0.156s GC time
Loading theory "HOL-Analysis.Topology_Euclidean_Space" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike" via "HOL-Analysis.Convex_Euclidean_Space")
class nice_ordered_field = ordered_field + idom_abs_sgn + zero_less_one +
  assumes
    "positive_imp_inverse_positive":
      "!!a. (0::'a) < a ==> (0::'a) < inverse a"
    and
    "inverse_le_imp_le":
      "!!a b. [| inverse a <= inverse b; (0::'a) < a |] ==> b <= a"
    and "dense_le": "!!y z. (!!x. x < y ==> x <= z) ==> y <= z"
    and
    "nn_comparable":
      "!!a b. [| (0::'a) <= a; (0::'a) <= b |] ==> a <= b | b <= a"
    and "abs_nn": "!!x. (0::'a) <= \<bar>x\<bar>"
instantiation
  ennreal :: complete_linorder
  Inf_ennreal == Inf :: ennreal set => ennreal
  Sup_ennreal == Sup :: ennreal set => ennreal
  bot_ennreal == bot :: ennreal
  sup_ennreal == sup :: ennreal => ennreal => ennreal
  top_ennreal == top :: ennreal
  inf_ennreal == inf :: ennreal => ennreal => ennreal
  less_eq_ennreal == less_eq :: ennreal => ennreal => bool
  less_ennreal == less :: ennreal => ennreal => bool
instantiation
  ennreal :: infinity
  infinity_ennreal == infinity :: ennreal
instantiation
  ennreal :: {comm_semiring_1,semiring_1_no_zero_divisors}
  zero_ennreal == zero_class.zero :: ennreal
  plus_ennreal == plus :: ennreal => ennreal => ennreal
  one_ennreal == one_class.one :: ennreal
  times_ennreal == times :: ennreal => ennreal => ennreal
instantiation
  ennreal :: minus
  minus_ennreal == minus :: ennreal => ennreal => ennreal
instantiation
  ennreal :: inverse
  inverse_ennreal == inverse :: ennreal => ennreal
  divide_ennreal == divide :: ennreal => ennreal => ennreal
class complex_normed_vector = complex_vector + real_normed_vector +
  assumes "norm_scaleC": "!!a x. norm (a *\<^sub>C x) = cmod a * norm x"
instantiation
  complex :: complex_normed_field
### Code generator: dropping subsumed code equation
### uniformity ==
### Filter.abstract_filter
###  (%u. Code.abort STR ''uniformity is not executable'' (%u. uniformity))
structure Cancel_Ennreal_Common:
  sig
    val dest_sum: term -> term list
    val dest_summing: term * term list -> term list
    val find_first: term -> term list -> term list
    val find_first_t: term list -> term -> term list -> term list
    val mk_eq: term * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss: simpset
    val norm_tac: Proof.context -> tactic
    val simplify_meta_eq: Proof.context -> thm -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Eq_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Le_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
structure Less_Ennreal_Cancel:
  sig val proc: Proof.context -> term -> thm option end
locale bounded_clinear
  fixes f :: "'a => 'b"
  assumes "bounded_clinear f"
locale bounded_cbilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_cbilinear (**)"
instantiation
  ennreal :: linear_continuum_topology
  open_ennreal == open :: ennreal set => bool
### theory "HOL-Library.Extended_Nonnegative_Real"
### 10.851s elapsed time, 36.558s cpu time, 30.552s GC time
Loading theory "HOL-Analysis.Infinite_Sum" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General")
### theory "Draft.Complex_Vector_Spaces0"
### 21.639s elapsed time, 78.036s cpu time, 40.948s GC time
"- \<infinity>"
  :: "ereal"
"\<infinity>"
  :: "ereal"
"ereal (13 / 4)"
  :: "ereal"
"True"
  :: "bool"
"True"
  :: "bool"
### theory "HOL-Analysis.Topology_Euclidean_Space"
### 11.316s elapsed time, 38.433s cpu time, 30.589s GC time
Loading theory "HOL-Analysis.Convex_Euclidean_Space" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike")
Loading theory "HOL-Analysis.Extended_Real_Limits" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit" via "HOL-Analysis.Summation_Tests")
### theory "HOL-Analysis.Infinite_Sum"
### 1.560s elapsed time, 6.156s cpu time, 0.699s GC time
Loading theory "HOL-Analysis.Line_Segment" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "HOL-Analysis.Starlike")
### theory "HOL-Analysis.Convex_Euclidean_Space"
### 1.102s elapsed time, 4.323s cpu time, 0.624s GC time
inj_on ?h ?A ==> (?g summable_on ?h ` ?A) = (?g o ?h summable_on ?A)
uniformity =
filtermap (%((x1, x2), y1, y2). ((x1, y1), x2, y2))
 (uniformity \<times>\<^sub>F uniformity)
### theory "HOL-Analysis.Extended_Real_Limits"
### 1.139s elapsed time, 4.470s cpu time, 0.624s GC time
Loading theory "HOL-Analysis.Summation_Tests" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General" via "HOL-Analysis.Uniform_Limit")
instantiation
  complex :: nice_ordered_field
### theory "Complex_Bounded_Operators.Extra_Ordered_Fields"
### 23.670s elapsed time, 86.034s cpu time, 41.840s GC time
### theory "HOL-Analysis.Line_Segment"
### 0.912s elapsed time, 3.016s cpu time, 0.418s GC time
Loading theory "HOL-Analysis.Starlike" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces")
### theory "HOL-Analysis.Summation_Tests"
### 0.822s elapsed time, 2.136s cpu time, 0.358s GC time
Loading theory "HOL-Analysis.Uniform_Limit" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces" via "Complex_Bounded_Operators.Extra_General")
### theory "HOL-Analysis.Uniform_Limit"
### 0.498s elapsed time, 1.075s cpu time, 0.176s GC time
Loading theory "Complex_Bounded_Operators.Extra_General" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces" via "Complex_Bounded_Operators.Extra_Vector_Spaces")
?a : affine hull ?S ==> aff_dim ?S = int (dim ((+) (- ?a) ` ?S))
### theory "HOL-Analysis.Starlike"
### 1.461s elapsed time, 3.172s cpu time, 0.565s GC time
overloading
  heterogenous_identity_id \<equiv> heterogenous_identity :: 'a => 'a
### Additional type variable(s) in locale specification "not_singleton": 'a
class not_singleton = type +
  assumes "not_singleton_card": "EX x y. x ~= y"
class CARD_1 = finite +
  assumes "CARD_1": "CARD('a) = 1"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Complex_Bounded_Operators.Extra_General"
### 1.354s elapsed time, 2.206s cpu time, 0.313s GC time
Loading theory "Complex_Bounded_Operators.Extra_Vector_Spaces" (required by "Draft.Complex_Vector_SpacesMoreTemplates" via "Draft.Complex_Vector_Spaces")
instantiation
  euclidean_space :: (type) real_vector
  uminus_euclidean_space == uminus ::
    'a euclidean_space => 'a euclidean_space
  zero_euclidean_space == zero_class.zero :: 'a euclidean_space
  minus_euclidean_space == minus ::
    'a euclidean_space => 'a euclidean_space => 'a euclidean_space
  plus_euclidean_space == plus ::
    'a euclidean_space => 'a euclidean_space => 'a euclidean_space
  scaleR_euclidean_space == scaleR ::
    real => 'a euclidean_space => 'a euclidean_space
instantiation
  euclidean_space :: (finite) real_inner
  inner_euclidean_space == inner ::
    'a euclidean_space => 'a euclidean_space => real
  sgn_euclidean_space == sgn :: 'a euclidean_space => 'a euclidean_space
  norm_euclidean_space == norm :: 'a euclidean_space => real
  dist_euclidean_space == dist ::
    'a euclidean_space => 'a euclidean_space => real
  uniformity_euclidean_space == uniformity ::
    ('a euclidean_space * 'a euclidean_space) filter
  open_euclidean_space == open :: 'a euclidean_space set => bool
instantiation
  euclidean_space :: (finite) euclidean_space
  Basis_euclidean_space == Basis :: 'a euclidean_space set
### theory "Complex_Bounded_Operators.Extra_Vector_Spaces"
### 0.505s elapsed time, 0.538s cpu time, 0.045s GC time
Loading theory "Draft.Complex_Vector_Spaces" (required by "Draft.Complex_Vector_SpacesMoreTemplates")
bundle notation_norm
locale antilinear
  fixes f :: "'a => 'b"
  assumes "antilinear f"
locale bounded_antilinear
  fixes f :: "'a => 'b"
  assumes "bounded_antilinear f"
locale bounded_sesquilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_sesquilinear (**)"
class cfinite_dim = complex_vector +
  assumes "cfinitely_spanned": "EX S. finite S & cspan S = UNIV"
class basis_enum = complex_vector +
  fixes canonical_basis :: "'a list"
  assumes "distinct_canonical_basis": "distinct canonical_basis"
    and "is_cindependent_set": "~ cdependent (set canonical_basis)"
    and "is_generator_set": "cspan (set canonical_basis) = UNIV"
locale closed_csubspace
  fixes A :: "'a set"
  assumes "closed_csubspace A"
instantiation
  ccsubspace :: (complex_normed_vector) scaleC
  scaleC_ccsubspace == scaleC :: complex => 'a ccsubspace => 'a ccsubspace
  scaleR_ccsubspace == scaleR :: real => 'a ccsubspace => 'a ccsubspace
instantiation
  ccsubspace :: ({complex_vector,t1_space}) bot
  bot_ccsubspace == bot :: 'a ccsubspace
instantiation
  ccsubspace :: ({complex_vector,topological_space}) top
  top_ccsubspace == top :: 'a ccsubspace
instantiation
  ccsubspace :: ({complex_vector,topological_space}) Inf
  Inf_ccsubspace == Inf :: 'a ccsubspace set => 'a ccsubspace
instantiation
  ccsubspace :: ({complex_vector,topological_space}) order
  less_eq_ccsubspace == less_eq :: 'a ccsubspace => 'a ccsubspace => bool
  less_ccsubspace == less :: 'a ccsubspace => 'a ccsubspace => bool
instantiation
  ccsubspace :: ({complex_vector,topological_space}) inf
  inf_ccsubspace == inf :: 'a ccsubspace => 'a ccsubspace => 'a ccsubspace
instantiation
  ccsubspace :: ({complex_vector,topological_space}) order_top
instantiation
  ccsubspace :: ({complex_vector,t1_space}) order_bot
instantiation
  ccsubspace :: ({complex_vector,topological_space}) semilattice_inf
instantiation
  ccsubspace :: ({complex_vector,t1_space}) zero
  zero_ccsubspace == zero_class.zero :: 'a ccsubspace
instantiation
  ccsubspace :: (complex_normed_vector) sup
  sup_ccsubspace == sup :: 'a ccsubspace => 'a ccsubspace => 'a ccsubspace
instantiation
  ccsubspace :: (complex_normed_vector) Sup
  Sup_ccsubspace == Sup :: 'a ccsubspace set => 'a ccsubspace
instantiation
  ccsubspace :: (complex_normed_vector) comm_monoid_add
  plus_ccsubspace == plus :: 'a ccsubspace => 'a ccsubspace => 'a ccsubspace
instantiation
  conjugate_space :: (complex_vector) complex_vector
  scaleC_conjugate_space == scaleC ::
    complex => 'a conjugate_space => 'a conjugate_space
  uminus_conjugate_space == uminus ::
    'a conjugate_space => 'a conjugate_space
  zero_conjugate_space == zero_class.zero :: 'a conjugate_space
  minus_conjugate_space == minus ::
    'a conjugate_space => 'a conjugate_space => 'a conjugate_space
  plus_conjugate_space == plus ::
    'a conjugate_space => 'a conjugate_space => 'a conjugate_space
  scaleR_conjugate_space == scaleR ::
    real => 'a conjugate_space => 'a conjugate_space
instantiation
  conjugate_space :: (complex_normed_vector) complex_normed_vector
  sgn_conjugate_space == sgn :: 'a conjugate_space => 'a conjugate_space
  norm_conjugate_space == norm :: 'a conjugate_space => real
  dist_conjugate_space == dist ::
    'a conjugate_space => 'a conjugate_space => real
  uniformity_conjugate_space == uniformity ::
    ('a conjugate_space * 'a conjugate_space) filter
  open_conjugate_space == open :: 'a conjugate_space set => bool
instantiation
  conjugate_space :: (cbanach) cbanach
instantiation
  complex :: basis_enum
  canonical_basis_complex == canonical_basis :: complex list
instantiation
  prod :: (complex_vector, complex_vector) complex_vector
  scaleC_prod == scaleC :: complex => 'a * 'b => 'a * 'b
### Cannot skip proof of schematic goal statement
locale bounded_clinear
  fixes f :: "'a => 'b"
  assumes "bounded_clinear f"
locale bounded_antilinear
  fixes f :: "'a => 'b"
  assumes "bounded_antilinear f"
locale bounded_cbilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_cbilinear (**)"
locale bounded_sesquilinear
  fixes prod :: "'a => 'b => 'c"  (infixl \<open>**\<close> 70)
  assumes "bounded_sesquilinear (**)"
### theory "Draft.Complex_Vector_Spaces"
### 2.806s elapsed time, 3.018s cpu time, 0.299s GC time
Loading theory "Draft.Complex_Vector_SpacesMoreTemplates"
val templateLemmas =
   [("Complex_Vector_Spaces.csubspace_space_as_set",
     "csubspace (space_as_set ?S)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Vector_Spaces.CARD_1_vec_0", "?\<psi> = (0::?'a)",
     template_equation (template_var 0, template_hole 0)),
    ("Complex_Vector_Spaces0.closed_complex_atLeast", "closed {?a..}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Vector_Spaces0.closed_complex_atMost", "closed {..?a}",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Vector_Spaces0.cspan_0", "(0::?'a) : span ?S",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Vector_Spaces0.Complexs_of_complex",
     "of_complex ?r : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces0.Complexs_of_int", "of_int ?z : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces0.Complexs_of_nat", "of_nat ?n : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces0.Complexs_numeral", "numeral ?w : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces.Complexs_of_real", "of_real ?r : \<complex>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Complex_Vector_Spaces0.closed_complex_atLeastAtMost",
     "closed {?a..?b}",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Complex_Vector_Spaces0.bounded_clinear_divide",
     "bounded_clinear (%x. x / ?y)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.bounded_clinear_scaleC_right",
     "bounded_clinear ((*\<^sub>C) ?c)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.bounded_clinear_mult_left",
     "bounded_clinear (%x. x * ?y)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.bounded_clinear_mult_right",
     "bounded_clinear ((*) ?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.bounded_clinear_scaleC_left",
     "bounded_clinear (%c. c *\<^sub>C ?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces.clinear_times", "clinear ((*) ?c)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.clinear_scaleC_left",
     "clinear (%r. r *\<^sub>C ?x)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.scaleC_zero_left", "0 *\<^sub>C ?x = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Complex_Vector_Spaces0.scaleC_zero_right",
     "?a *\<^sub>C (0::?'a) = (0::?'a)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Complex_Vector_Spaces.zero_cblinfun_image",
     "0 *\<^sub>C ?S = \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Complex_Vector_Spaces.span_subset_cspan", "span ?A <= cspan ?A",
     template_inequation
      (less_equals, template_app (template_hole 1, template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.ccspan_superset",
     "?A <= space_as_set (ccspan ?A)",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.ccsubspace_add_right_incr", "?a <= ?a + ?c",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Vector_Spaces.ccsubspace_add_left_incr", "?a <= ?c + ?a",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Complex_Vector_Spaces0.clinear_scaleC", "linear ((*\<^sub>R) ?c)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Vector_Spaces0.clinear_times_of_complex",
     "clinear (%x. ?a * of_complex x)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Complex_Vector_Spaces0.of_complex_of_int_eq",
     "of_complex (of_int ?z) = of_int ?z",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_of_nat_eq",
     "of_complex (of_nat ?n) = of_nat ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_numeral",
     "of_complex (numeral ?w) = numeral ?w",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.of_complex_of_real_eq",
     "of_complex (complex_of_real ?n) = of_real ?n",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.norm_from_conjugate_space",
     "norm (from_conjugate_space ?x) = norm ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.norm_of_complex",
     "norm (of_complex ?c) = cmod ?c",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.norm_to_conjugate_space",
     "norm (to_conjugate_space ?x) = norm ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.bounded_clinear_finite_dim",
     "clinear ?f ==> bounded_clinear ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.csubspace_is_subspace",
     "csubspace ?A ==> subspace ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.csubspace_is_convex",
     "csubspace ?M ==> convex ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.complex_Cauchy_convergent",
     "Cauchy ?X ==> convergent ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_minus1_left", "- 1 *\<^sub>C ?x = - ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app (template_hole 2, template_hole 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_minus",
     "of_complex (- ?x) = - of_complex ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_inverse",
     "of_complex (inverse ?x) = inverse (of_complex ?x)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 0, template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.sgn_of_complex",
     "sgn (of_complex ?r) = of_complex (sgn ?r)",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.closed_sum_comm",
     "?A +\<^sub>M ?B = ?B +\<^sub>M ?A",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Complex_Vector_Spaces0.complex_sgn_eq",
     "sgn ?x = ?x / \<bar>?x\<bar>",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.closure_is_csubspace",
     "csubspace ?A ==> csubspace (closure ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.closure_is_closed_csubspace",
     "csubspace ?S ==> closed_csubspace (closure ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.finite_span_complete",
     "finite ?A ==> uniform_space_class.complete (span ?A)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.finite_span_closed",
     "finite ?B ==> closed (span ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.finite_cspan_complete",
     "finite ?B ==> uniform_space_class.complete (cspan ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.finite_cspan_closed_csubspace",
     "finite ?S ==> closed_csubspace (cspan ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.finite_cspan_closed",
     "finite ?S ==> closed (cspan ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.cindependent_cfinite_dim_finite",
     "cindependent ?S ==> finite ?S",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_conv_of_complex",
     "?r *\<^sub>C ?x = of_complex ?r * ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_neg_numeral",
     "of_complex (- numeral ?w) = - numeral ?w",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.closed_sum_zero_right",
     "?A +\<^sub>M {0::?'a} = closure ?A",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 0),
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.closed_sum_zero_left",
     "{0::?'a} +\<^sub>M ?A = closure ?A",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Vector_Spaces.closed_sum_closure_right",
     "?A +\<^sub>M closure ?B = ?A +\<^sub>M ?B",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Complex_Vector_Spaces.closed_sum_closure_left",
     "closure ?A +\<^sub>M ?B = ?A +\<^sub>M ?B",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_eq_1_iff",
     "(of_complex ?x = (1::?'a)) = (?x = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Complex_Vector_Spaces0.of_complex_eq_0_iff",
     "(of_complex ?x = (0::?'a)) = (?x = 0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_equation (template_var 0, template_hole 0))),
    ("Complex_Vector_Spaces0.czero_le_sgn_iff", "(0 <= sgn ?x) = (0 <= ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1), template_var 0))),
    ("Complex_Vector_Spaces0.csgn_le_0_iff", "(sgn ?x <= 0) = (?x <= 0)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Complex_Vector_Spaces0.of_complex_in_Ints_iff",
     "(of_complex ?x : \<int>) = (?x : \<int>)",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_hole 2),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Complex_Vector_Spaces0.Complexs_minus_iff",
     "(- ?a : \<complex>) = (?a : \<complex>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Complex_Vector_Spaces0.Complexs_inverse_iff",
     "(inverse ?x : \<complex>) = (?x : \<complex>)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0),
       template_app
        (template_app (template_hole 2, template_var 0), template_hole 0))),
    ("Complex_Vector_Spaces.range_is_clinear",
     "clinear ?f ==> csubspace (range ?f)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Complex_Vector_Spaces.cindependent_implies_independent",
     "cindependent ?S ==> independent ?S",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 1, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces0.scaleC_minus_right",
     "?a *\<^sub>C - ?x = - (?a *\<^sub>C ?x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_minus_left",
     "- ?a *\<^sub>C ?x = - (?a *\<^sub>C ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_hole 0,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces.fst_scaleC",
     "fst (?r *\<^sub>C ?A) = ?r *\<^sub>C fst ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_2", "2 *\<^sub>C ?x = ?x + ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_power",
     "of_complex (?x ^ ?n) = of_complex ?x ^ ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_power_int",
     "of_complex (?x powi ?n) = of_complex ?x powi ?n",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_var 0))),
    ("Complex_Vector_Spaces.snd_scaleC",
     "snd (?r *\<^sub>C ?A) = ?r *\<^sub>C snd ?A",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces.closure_from_conjugate_space",
     "closure (from_conjugate_space ` ?X) =
      from_conjugate_space ` closure ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.cspan_to_conjugate_space",
     "cspan (to_conjugate_space ` ?X) = to_conjugate_space ` cspan ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.closure_to_conjugate_space",
     "closure (to_conjugate_space ` ?X) = to_conjugate_space ` closure ?X",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_eq_iff",
     "(of_complex ?x = of_complex ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("Complex_Vector_Spaces0.dist_of_complex",
     "dist (of_complex ?x) (of_complex ?y) = dist ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Vector_Spaces.antilinear_continuous_at",
     "bounded_antilinear ?f ==> isCont ?f ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 1)
           ))),
    ("Complex_Vector_Spaces.antilinear_continuous_within",
     "bounded_antilinear ?f ==> continuous (at ?x within ?s) ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Complex_Vector_Spaces0.bounded_clinear_minus",
     "bounded_clinear ?f ==> bounded_clinear (%x. - ?f x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces.clinear_continuous_at",
     "bounded_clinear ?f ==> isCont ?f ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 1)
           ))),
    ("Complex_Vector_Spaces.clinear_continuous_within",
     "bounded_clinear ?f ==> continuous (at ?x within ?s) ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 2)
           ))),
    ("Complex_Vector_Spaces.closed_scaleC",
     "closed ?S ==> closed ((*\<^sub>C) ?a ` ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0)),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces0.Complexs_minus",
     "?a : \<complex> ==> - ?a : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Complexs_inverse",
     "?a : \<complex> ==> inverse ?a : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Ints_of_complex",
     "?x : \<int> ==> of_complex ?x : \<int>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_hole 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Complex_Vector_Spaces0.of_complex_diff",
     "of_complex (?x - ?y) = of_complex ?x - of_complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_add",
     "of_complex (?x + ?y) = of_complex ?x + of_complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_mult",
     "of_complex (?x * ?y) = of_complex ?x * of_complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.of_complex_divide",
     "of_complex (?x / ?y) = of_complex ?x / of_complex ?y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.inverse_scaleC_distrib",
     "inverse (?a *\<^sub>C ?x) = inverse ?x /\<^sub>C ?a",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.sgn_scaleC",
     "sgn (?r *\<^sub>C ?x) = sgn ?r *\<^sub>C sgn ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces.cspan_as_span",
     "cspan ?B = span (?B Un (*\<^sub>C) \<i> ` ?B)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 0),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_var 0))))),
    ("Complex_Vector_Spaces.space_as_set_inf",
     "space_as_set (?A \<sqinter> ?B) =
      space_as_set ?A Int space_as_set ?B",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.norm_of_complex_add1",
     "norm (of_complex ?x + (1::?'a)) = cmod (?x + 1)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_hole 3)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Complex_Vector_Spaces.ccspan_union",
     "ccspan ?A \<squnion> ccspan ?B = ccspan (?A Un ?B)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces.kernel_is_closed_csubspace",
     "bounded_clinear ?f ==> closed_csubspace (?f -` {0::?'b})",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)))
           ))),
    ("Complex_Vector_Spaces.bounded_clinear_const_scaleR",
     "bounded_clinear ?f ==> bounded_clinear (%x. ?c *\<^sub>R ?f x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_const_mult",
     "bounded_clinear ?g ==> bounded_clinear (%x. ?x * ?g x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_mult_const",
     "bounded_clinear ?g ==> bounded_clinear (%x. ?g x * ?y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_const_scaleC",
     "bounded_clinear ?g ==> bounded_clinear (%x. ?c *\<^sub>C ?g x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_scaleC_const",
     "bounded_clinear ?g ==> bounded_clinear (%x. ?g x *\<^sub>C ?x)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces.kernel_is_csubspace",
     "clinear ?f ==> csubspace (?f -` {0::?'b})",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_hole 0)))
           ))),
    ("Complex_Vector_Spaces.closure_finite_cspan",
     "finite ?T ==> closure (cspan ?T) = cspan ?T",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.ccspan_mono",
     "?A <= ?B ==> ccspan ?A <= ccspan ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.Complexs_power",
     "?a : \<complex> ==> ?a ^ ?n : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces.closed_sum_right_subset",
     "(0::?'c) : ?A ==> ?B <= ?A +\<^sub>M ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces.closed_sum_left_subset",
     "(0::?'c) : ?B ==> ?A <= ?A +\<^sub>M ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 1)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Complex_Vector_Spaces.ccspan_leqI",
     "?M <= space_as_set ?S ==> ccspan ?M <= ?S",
     template_implication
      ([template_inequation
         (less_equals, template_var 1,
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Complex_Vector_Spaces.ccsubspace_leI",
     "space_as_set ?A <= space_as_set ?B ==> ?A <= ?B",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_inequation (less_equals, template_var 1, template_var 0))),
    ("Complex_Vector_Spaces.closed_csubspace_INF",
     "ALL A:?\<A>. closed_csubspace A ==>
      closed_csubspace (\<Inter> ?\<A>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces0.scaleC_left_commute",
     "?a *\<^sub>C ?b *\<^sub>C ?x = ?b *\<^sub>C ?a *\<^sub>C ?x",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_half_double",
     "(1 / 2) *\<^sub>C (?a + ?a) = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1)))),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)),
       template_var 0)),
    ("Complex_Vector_Spaces0.scaleC_collapse",
     "(1 - ?u) *\<^sub>C ?a + ?u *\<^sub>C ?a = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_hole 0),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_var 0)),
    ("Complex_Vector_Spaces0.of_complex_sum",
     "of_complex (sum ?f ?s) = (SUM x:?s. of_complex (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex_Vector_Spaces0.of_complex_prod",
     "of_complex (prod ?f ?s) = (PROD x:?s. of_complex (?f x))",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex_Vector_Spaces.closed_sum_cspan",
     "cspan ?X +\<^sub>M cspan ?Y = closure (cspan (?X Un ?Y))",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Complex_Vector_Spaces.closed_sum_assoc",
     "?A +\<^sub>M (?B +\<^sub>M ?C) = ?A +\<^sub>M ?B +\<^sub>M ?C",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Complex_Vector_Spaces.closure_scaleC",
     "closure ((*\<^sub>C) ?a ` ?S) = (*\<^sub>C) ?a ` closure ?S",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Complex_Vector_Spaces0.complex_bounded_clinear",
     "bounded_clinear ?f = (EX c. ?f = (%x. x * c))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app (template_hole 2, t_empty))),
    ("Complex_Vector_Spaces0.of_complex_eq_minus_of_complex_iff",
     "(of_complex ?x = - of_complex ?y) = (?x = - ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_hole 2,
           template_app (template_hole 3, template_var 0))),
       template_equation
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.minus_of_complex_eq_of_complex_iff",
     "(- of_complex ?x = of_complex ?y) = (- ?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Vector_Spaces0.norm_of_complex_diff",
     "norm (of_complex ?b - of_complex ?a) <= cmod (?b - ?a)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces.bounded_sesquilinear_uminus",
     "bounded_sesquilinear ?A ==> bounded_sesquilinear (%x y. - ?A x y)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces.ccsubspace_scaleC_invariant",
     "?a ~= 0 ==> ?a *\<^sub>C ?S = ?S",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Complex_Vector_Spaces.summable_of_complex",
     "summable ?X ==> summable (%n. of_complex (?X n))",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.norm_of_complex_addn",
     "norm (of_complex ?x + numeral ?b) = cmod (?x + numeral ?b)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Vector_Spaces.closed_sum_mono_left",
     "?A <= ?B ==> ?A +\<^sub>M ?C <= ?B +\<^sub>M ?C",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces.closed_sum_mono_right",
     "?A <= ?B ==> ?C +\<^sub>M ?A <= ?C +\<^sub>M ?B",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Complex_Vector_Spaces0.injective_scaleC",
     "?c ~= 0 ==> inj ((*\<^sub>R) ?c)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty), template_hole 0)
           ))),
    ("Complex_Vector_Spaces.summable_scaleC_right",
     "summable ?X ==> summable (%n. ?c *\<^sub>C ?X n)",
     template_implication
      ([template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces.summable_scaleC_left",
     "summable ?X ==> summable (%n. ?X n *\<^sub>C ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.cspan_mul",
     "?x : span ?S ==> ?c *\<^sub>R ?x : span ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Complex_Vector_Spaces.antilinear_o_antilinear",
     "[| antilinear ?f; antilinear ?g |] ==> clinear (?g o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces.clinear_o_antilinear",
     "[| antilinear ?f; clinear ?g |] ==> antilinear (?g o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces.closed_csubspace_inter",
     "[| closed_csubspace ?A; closed_csubspace ?B |]
      ==> closed_csubspace (?A Int ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces.comp_bounded_clinear",
     "[| bounded_clinear ?A; bounded_clinear ?B |]
      ==> bounded_clinear (?A o ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces.antilinear_o_clinear",
     "[| clinear ?f; antilinear ?g |] ==> antilinear (?g o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces0.clinear_compose",
     "[| clinear ?f; clinear ?g |] ==> clinear (?g o ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces.csubspace_set_plus",
     "[| csubspace ?A; csubspace ?B |] ==> csubspace (?A + ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces.closed_subspace_closed_sum",
     "[| csubspace ?A; csubspace ?B |]
      ==> closed_csubspace (?A +\<^sub>M ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces0.scaleC_diff_right",
     "?a *\<^sub>C (?x - ?y) = ?a *\<^sub>C ?x - ?a *\<^sub>C ?y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_sum_right",
     "?a *\<^sub>C sum ?f ?A = (SUM x:?A. ?a *\<^sub>C ?f x)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, t_empty), template_var 0))),
    ("Complex_Vector_Spaces0.scaleC_diff_left",
     "(?a - ?b) *\<^sub>C ?x = ?a *\<^sub>C ?x - ?b *\<^sub>C ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_sum_left",
     "sum ?f ?A *\<^sub>C ?x = (SUM a:?A. ?f a *\<^sub>C ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, t_empty), template_var 1))),
    ("Complex_Vector_Spaces0.scaleC_eq_0_iff",
     "(?a *\<^sub>C ?x = (0::?'a)) = (?a = 0 | ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 1), template_var 0),
         template_hole 3),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_hole 3))
           ))),
    ("Complex_Vector_Spaces0.of_complex_eq_of_complex_power_int_cancel_iff",
     "(of_complex ?b powi ?w = of_complex ?x) = (?b powi ?w = ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 2)),
           template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Complex_Vector_Spaces.scaleC_Pair",
     "?r *\<^sub>C (?a, ?b) = (?r *\<^sub>C ?a, ?r *\<^sub>C ?b)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex_Vector_Spaces0.clinear_scale_complex",
     "clinear ?f ==> ?f (?c * ?b) = ?c * ?f ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Complex_Vector_Spaces0.clinear_cmul",
     "linear ?f ==> ?f (?r *\<^sub>R ?b) = ?r *\<^sub>R ?f ?b",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app (template_var 2, template_var 0))))),
    ("Complex_Vector_Spaces0.cspan_linear_image",
     "linear ?f ==> span (?f ` ?S) = ?f ` span ?S",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Vector_Spaces.real_independent_from_complex_independent",
     "cindependent ?B ==> independent (?B Un (*\<^sub>C) \<i> ` ?B)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 5, template_var 0))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0)),
                     template_var 0)))
               )
           ))),
    ("Complex_Vector_Spaces0.nonzero_of_complex_inverse",
     "?x ~= 0 ==> of_complex (inverse ?x) = inverse (of_complex ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 2, template_var 0))))),
    ("Complex_Vector_Spaces.bounded_antilinear_o_bounded_antilinear",
     "[| bounded_antilinear ?f; bounded_antilinear ?g |]
      ==> bounded_clinear (%x. ?f (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces.bounded_antilinear_o_bounded_clinear",
     "[| bounded_antilinear ?f; bounded_clinear ?g |]
      ==> bounded_antilinear (%x. ?f (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces.bounded_clinear_o_bounded_antilinear",
     "[| bounded_clinear ?f; bounded_antilinear ?g |]
      ==> bounded_antilinear (%x. ?f (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_compose",
     "[| bounded_clinear ?f; bounded_clinear ?g |]
      ==> bounded_clinear (%x. ?f (?g x))",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces0.of_complex_eq_numeral_power_int_cancel_iff",
     "(of_complex ?y = numeral ?x powi ?n) = (?y = numeral ?x powi ?n)",
     template_bimplication
      (template_equation
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 1)),
           template_var 0)),
       template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Complex_Vector_Spaces0.numeral_power_int_eq_of_complex_cancel_iff",
     "(numeral ?x powi ?n = of_complex ?y) = (numeral ?x powi ?n = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_var 0))),
    ("Complex_Vector_Spaces.sums_of_complex",
     "?X sums ?a ==> (%n. of_complex (?X n)) sums of_complex ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.csubspace_INF",
     "(!!x. x : ?A ==> csubspace x) ==> csubspace (\<Inter> ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Vector_Spaces.bij_clinear_imp_inv_clinear",
     "[| clinear ?f; bij ?f |] ==> clinear (inv ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 0),
                template_hole 3),
              template_hole 2)
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_hole 3),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces0.csubspace_mul",
     "[| subspace ?S; ?x : ?S |] ==> ?c *\<^sub>R ?x : ?S",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_var 2)
           ))),
    ("Complex_Vector_Spaces0.Complexs_induct",
     "[| ?q : \<complex>; !!r. ?P (of_complex r) |] ==> ?P ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_hole 2)
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_app (template_var 0, template_var 1)))),
    ("Complex_Vector_Spaces0.scaleC_times",
     "numeral ?u *\<^sub>C (numeral ?w * ?a) =
      (numeral ?u * numeral ?w) *\<^sub>C ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 0,
               template_app (template_hole 3, template_var 2)),
             template_app (template_hole 3, template_var 1))),
         template_var 0))),
    ("Complex_Vector_Spaces0.scaleC_cancel_left",
     "(?a *\<^sub>C ?x = ?a *\<^sub>C ?y) = (?x = ?y | ?a = 0)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 3, template_var 2), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0))
           ))),
    ("Complex_Vector_Spaces0.scaleC_cancel_right",
     "(?a *\<^sub>C ?x = ?b *\<^sub>C ?x) = (?a = ?b | ?x = (0::?'a))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 3, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 3, template_var 0), template_var 1)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 0))
           ))),
    ("Complex_Vector_Spaces0.bounded_clinear_sub",
     "[| bounded_clinear ?f; bounded_clinear ?g |]
      ==> bounded_clinear (%x. ?f x - ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.bounded_clinear_add",
     "[| bounded_clinear ?f; bounded_clinear ?g |]
      ==> bounded_clinear (%x. ?f x + ?g x)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.scaleC_left_le_one_le",
     "[| (0::?'a) <= ?x; ?a <= 1 |] ==> ?a *\<^sub>C ?x <= ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Complex_Vector_Spaces0.scaleC_nonneg_nonneg",
     "[| 0 <= ?a; (0::?'a) <= ?x |] ==> (0::?'a) <= ?a *\<^sub>C ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_nonneg_nonpos",
     "[| 0 <= ?a; ?x <= (0::?'a) |] ==> ?a *\<^sub>C ?x <= (0::?'a)",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Complex_Vector_Spaces0.scaleC_nonpos_nonneg",
     "[| ?a <= 0; (0::?'a) <= ?x |] ==> ?a *\<^sub>C ?x <= (0::?'a)",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 3),
        template_inequation (less_equals, template_hole 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Complex_Vector_Spaces0.scaleC_nonpos_nonpos",
     "[| ?a <= 0; ?b <= (0::?'a) |] ==> (0::?'a) <= ?a *\<^sub>C ?b",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_hole 3),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces.ccsubspace_plus_sup",
     "[| ?y <= ?x; ?z <= ?x |] ==> ?y + ?z <= ?x",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("Complex_Vector_Spaces0.Complexs_divide",
     "[| ?a : \<complex>; ?b : \<complex> |] ==> ?a / ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Complexs_diff",
     "[| ?a : \<complex>; ?b : \<complex> |] ==> ?a - ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Complexs_add",
     "[| ?a : \<complex>; ?b : \<complex> |] ==> ?a + ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.Complexs_mult",
     "[| ?a : \<complex>; ?b : \<complex> |] ==> ?a * ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.nonzero_Complexs_inverse",
     "[| ?a : \<complex>; ?a ~= (0::?'a) |] ==> inverse ?a : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 0)),
             template_hole 4)
           ))),
    ("Complex_Vector_Spaces.cspan_singleton",
     "cspan {?x} = {\<alpha> *\<^sub>C ?x |\<alpha>. True}",
     template_equation
      (template_app
        (template_hole 8,
         template_app
          (template_app (template_hole 7, template_var 0),
           template_hole 6)),
       template_app (template_hole 5, t_empty))),
    ("Complex_Vector_Spaces.onorm_scalarC",
     "bounded_clinear ?f ==>
      onorm (%x. ?r *\<^sub>C ?f x) = cmod ?r * onorm ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app (template_hole 3, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)),
           template_app (template_hole 3, template_var 1))))),
    ("Complex_Vector_Spaces.onorm_scaleC_left",
     "bounded_clinear ?r ==>
      onorm (%x. ?r x *\<^sub>C ?f) = onorm ?r * norm ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Vector_Spaces.onorm_scaleC_left_lemma",
     "bounded_clinear ?r ==>
      onorm (%x. ?r x *\<^sub>C ?f) <= onorm ?r * norm ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Vector_Spaces0.scaleC_le_cancel_left_pos",
     "0 < ?c ==> (?c *\<^sub>C ?a <= ?c *\<^sub>C ?b) = (?a <= ?b)",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.scaleC_le_cancel_left_neg",
     "?c < 0 ==> (?c *\<^sub>C ?a <= ?c *\<^sub>C ?b) = (?b <= ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Complex_Vector_Spaces0.nonzero_of_complex_divide",
     "?y ~= 0 ==> of_complex (?x / ?y) = of_complex ?x / of_complex ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Complex_Vector_Spaces.sums_scaleC_right",
     "?X sums ?a ==> (%n. ?c *\<^sub>C ?X n) sums (?c *\<^sub>C ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Complex_Vector_Spaces.sums_scaleC_left",
     "?X sums ?a ==> (%n. ?X n *\<^sub>C ?x) sums (?a *\<^sub>C ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, t_empty), template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces0.complex_clinearD",
     "[| clinear ?f; !!c. ?f = (*) c ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces.csubspace_scaleC_invariant",
     "[| ?a ~= 0; csubspace ?S |] ==> (*\<^sub>C) ?a ` ?S = ?S",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0),
         template_var 0))),
    ("Complex_Vector_Spaces0.inverse_scaleC_times",
     "(1 / numeral ?v) *\<^sub>C (numeral ?w * ?a) =
      (numeral ?w / numeral ?v) *\<^sub>C ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_var 2))),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 2, template_var 2))),
         template_var 0))),
    ("Complex_Vector_Spaces0.dist_scaleC",
     "dist (complex_of_real ?x *\<^sub>C ?a)
       (complex_of_real ?y *\<^sub>C ?a) =
      \<bar>?x - ?y\<bar> * norm ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 4, template_var 2)),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_var 1)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Vector_Spaces.cbilinear_add_right",
     "cbilinear ?f ==> ?f ?a (?b + ?c) = ?f ?a ?b + ?f ?a ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 0))))),
    ("Complex_Vector_Spaces.cbilinear_add_left",
     "cbilinear ?f ==> ?f (?a + ?b) ?c = ?f ?a ?c + ?f ?b ?c",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_var 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_var 3, template_var 2),
               template_var 0)),
           template_app
            (template_app (template_var 3, template_var 1),
             template_var 0))))),
    ("Complex_Vector_Spaces.cfinite_dim_finite_subspace_basis",
     "csubspace ?X ==>
      EX basis. finite basis & cindependent basis & cspan basis = ?X",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Complex_Vector_Spaces0.neg_less_divideC_eq",
     "?c < 0 ==> (?a < ?b /\<^sub>C ?c) = (?b < ?c *\<^sub>C ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Vector_Spaces0.neg_divideC_less_eq",
     "?c < 0 ==> (?b /\<^sub>C ?c < ?a) = (?c *\<^sub>C ?a < ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Complex_Vector_Spaces0.neg_le_divideC_eq",
     "?c < 0 ==> (?a <= ?b /\<^sub>C ?c) = (?b <= ?c *\<^sub>C ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Vector_Spaces0.neg_divideC_le_eq",
     "?c < 0 ==> (?b /\<^sub>C ?c <= ?a) = (?c *\<^sub>C ?a <= ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1)))),
    ("Complex_Vector_Spaces.cspan_singleton_scaleC",
     "?a ~= 0 ==> cspan {?a *\<^sub>C ?\<psi>} = cspan {?\<psi>}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))))),
    ("Complex_Vector_Spaces.ccspan_singleton_scaleC",
     "?a ~= 0 ==> ccspan {?a *\<^sub>C ?\<psi>} = ccspan {?\<psi>}",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 0))))),
    ("Complex_Vector_Spaces.suminf_of_complex",
     "summable ?X ==>
      of_complex (\<Sum>n. ?X n) = (\<Sum>n. of_complex (?X n))",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces.scaleC_cindependent",
     "[| cindependent ?B; ?c ~= 0 |]
      ==> cindependent ((*\<^sub>C) ?c ` ?B)",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_var 1))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 0)),
                   template_var 1))
               )
           ))),
    ("Complex_Vector_Spaces0.scaleC_left_mono_neg",
     "[| ?b <= ?a; ?c <= 0 |] ==> ?c *\<^sub>C ?a <= ?c *\<^sub>C ?b",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Complex_Vector_Spaces0.scaleC_right_mono_neg",
     "[| ?b <= ?a; ?c <= (0::?'a) |]
      ==> ?a *\<^sub>C ?c <= ?b *\<^sub>C ?c",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 0, template_hole 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Complex_Vector_Spaces0.Complexs_cases",
     "[| ?q : \<complex>; !!c. ?q = of_complex c ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces0.clinear_injective_0",
     "linear ?f ==> inj ?f = (ALL x. ?f x = (0::?'b) --> x = (0::?'a))",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0), template_hole 6),
         template_app (template_hole 5, t_empty)))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==> (?a = ?b /\<^sub>C ?c) = (?c *\<^sub>C ?a = ?b)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_bimplication
        (template_equation
          (template_var 1,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_equation
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==> (?b /\<^sub>C ?c = ?a) = (?b = ?c *\<^sub>C ?a)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 1),
           template_var 0),
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0))))),
    ("Complex_Vector_Spaces0.sum_in_Complexs",
     "(!!i. i : ?s ==> ?f i : \<complex>) ==> sum ?f ?s : \<complex>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces0.prod_in_Complexs",
     "(!!i. i : ?s ==> ?f i : \<complex>) ==> prod ?f ?s : \<complex>",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)),
             template_hole 1)
           ))),
    ("Complex_Vector_Spaces.bounded_sesquilinear_diff",
     "[| bounded_sesquilinear ?A; bounded_sesquilinear ?B |]
      ==> bounded_sesquilinear (%x y. ?A x y - ?B x y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces.bounded_sesquilinear_add",
     "[| bounded_sesquilinear ?A; bounded_sesquilinear ?B |]
      ==> bounded_sesquilinear (%x y. ?A x y + ?B x y)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.clinear_imp_scaleC",
     "[| clinear ?D; !!d. ?D = (%x. x *\<^sub>C d) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces0.scaleC_right_imp_eq",
     "[| ?x ~= (0::?'a); ?a *\<^sub>C ?x = ?b *\<^sub>C ?x |] ==> ?a = ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 0),
            template_var 2))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Vector_Spaces0.scaleC_left_imp_eq",
     "[| ?a ~= 0; ?a *\<^sub>C ?x = ?a *\<^sub>C ?y |] ==> ?x = ?y",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 2)),
        template_equation
         (template_app
           (template_app (template_hole 0, template_var 2), template_var 1),
          template_app
           (template_app (template_hole 0, template_var 2),
            template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "(?a = ?b /\<^sub>C ?c) =
      (if ?c = 0 then ?a = (0::?'a) else ?c *\<^sub>C ?a = ?b)",
     template_bimplication
      (template_equation
        (template_var 2,
         template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 1)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 2)),
               template_var 0))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "(?b /\<^sub>C ?c = ?a) =
      (if ?c = 0 then ?a = (0::?'a) else ?b = ?c *\<^sub>C ?a)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 2)),
           template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 0)),
             template_app
              (template_app (template_hole 6, template_var 1),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.scaleC_eq_iff",
     "(?b + ?u *\<^sub>C ?a = ?a + ?u *\<^sub>C ?b) = (?a = ?b | ?u = 1)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 4, template_var 0),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2))),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0))
           ))),
    ("Complex_Vector_Spaces0.neg_less_minus_divideC_eq",
     "?c < 0 ==> (?a < - (?b /\<^sub>C ?c)) = (- ?b < ?c *\<^sub>C ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Vector_Spaces0.neg_minus_divideC_less_eq",
     "?c < 0 ==> (- (?b /\<^sub>C ?c) < ?a) = (?c *\<^sub>C ?a < - ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Complex_Vector_Spaces0.neg_le_minus_divideC_eq",
     "?c < 0 ==> (?a <= - (?b /\<^sub>C ?c)) = (- ?b <= ?c *\<^sub>C ?a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Complex_Vector_Spaces0.neg_minus_divideC_le_eq",
     "?c < 0 ==> (- (?b /\<^sub>C ?c) <= ?a) = (?c *\<^sub>C ?a <= - ?b)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("Complex_Vector_Spaces.suminf_scaleC_right",
     "summable ?X ==>
      ?c *\<^sub>C (\<Sum>n. ?X n) = (\<Sum>n. ?c *\<^sub>C ?X n)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, t_empty)),
         template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces.suminf_scaleC_left",
     "summable ?X ==>
      (\<Sum>n. ?X n) *\<^sub>C ?x = (\<Sum>n. ?X n *\<^sub>C ?x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_var 0),
         template_app (template_hole 0, t_empty)))),
    ("Complex_Vector_Spaces.vector_finitely_spanned",
     "?z : cspan ?T ==> EX S. finite S & S <= ?T & ?z : cspan S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Complex_Vector_Spaces.antilinear_imp_scaleC",
     "[| antilinear ?D; !!d. ?D = (%x. cnj x *\<^sub>C d) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces.complex_antilinearD",
     "[| antilinear ?f; !!c. ?f = (%x. c * cnj x) ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_var 0))),
    ("Complex_Vector_Spaces.cindependent_inter_scaleC_cindependent",
     "[| cindependent ?B; ?c ~= 1 |] ==> ?B Int (*\<^sub>C) ?c ` ?B = {}",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 7, template_var 1))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_var 1)),
         template_hole 0))),
    ("Complex_Vector_Spaces.closed_sum_is_sup",
     "[| closed_csubspace ?C; ?A <= ?C; ?B <= ?C |]
      ==> ?A +\<^sub>M ?B <= ?C",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_inequation (less_equals, template_var 0, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "?a - ?b /\<^sub>C ?c =
      (if ?c = 0 then ?a else (?c *\<^sub>C ?a - ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2)),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "?a + ?b /\<^sub>C ?c =
      (if ?c = 0 then ?a else (?c *\<^sub>C ?a + ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 3, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 2),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2)),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "?a /\<^sub>C ?c + ?b =
      (if ?c = 0 then ?b else (?a + ?c *\<^sub>C ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_hole 3, template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces.closure_image_closed_sum",
     "bounded_linear ?U ==>
      closure (?U ` (?A +\<^sub>M ?B)) =
      closure (?U ` ?A) +\<^sub>M closure (?U ` ?B)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1))),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.bounded_clinear_sum",
     "(!!i. i : ?I ==> bounded_clinear (?f i)) ==>
      bounded_clinear (%x. SUM i:?I. ?f i x)",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "?a /\<^sub>C ?c - ?b =
      (if ?c = 0 then - ?b else (?a - ?c *\<^sub>C ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_app (template_hole 0, template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 2)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.fraction_scaleC_times",
     "(numeral ?u / numeral ?v) *\<^sub>C (numeral ?w * ?a) =
      (numeral ?u * numeral ?w / numeral ?v) *\<^sub>C ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 3)),
             template_app (template_hole 3, template_var 2))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 3, template_var 1))),
             template_app (template_hole 3, template_var 2))),
         template_var 0))),
    ("Complex_Vector_Spaces0.cle_add_iff2",
     "(?a *\<^sub>C ?e + ?c <= ?b *\<^sub>C ?e + ?d) =
      (?c <= (?b - ?a) *\<^sub>C ?e + ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3)),
           template_var 0)),
       template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 4)),
               template_var 3)),
           template_var 0)))),
    ("Complex_Vector_Spaces0.cle_add_iff1",
     "(?a *\<^sub>C ?e + ?c <= ?b *\<^sub>C ?e + ?d) =
      ((?a - ?b) *\<^sub>C ?e + ?c <= ?d)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 3)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 1)),
                 template_var 3)),
             template_var 2)),
         template_var 0))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      ?a - ?b /\<^sub>C ?c = (?c *\<^sub>C ?a - ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      ?a /\<^sub>C ?c - ?b = (?a - ?c *\<^sub>C ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      ?a + ?b /\<^sub>C ?c = (?c *\<^sub>C ?a + ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      ?a /\<^sub>C ?c + ?b = (?a + ?c *\<^sub>C ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces.bounded_linear_bounded_clinear",
     "[| bounded_linear ?A;
         ALL c x. ?A (c *\<^sub>C x) = c *\<^sub>C ?A x |]
      ==> bounded_clinear ?A",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.nonzero_Complexs_divide",
     "[| ?a : \<complex>; ?b : \<complex>; ?b ~= (0::?'a) |]
      ==> ?a / ?b : \<complex>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_hole 4)
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "- (?a /\<^sub>C ?c) + ?b =
      (if ?c = 0 then ?b else (- ?a + ?c *\<^sub>C ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.ceq_vector_fraction_iff",
     "(?x = (?u / ?v) *\<^sub>C ?a) =
      (if ?v = 0 then ?x = (0::?'a)
       else ?v *\<^sub>C ?x = ?u *\<^sub>C ?a)",
     template_bimplication
      (template_equation
        (template_var 3,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 3)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.cvector_fraction_eq_iff",
     "((?u / ?v) *\<^sub>C ?a = ?x) =
      (if ?v = 0 then ?x = (0::?'a)
       else ?u *\<^sub>C ?a = ?v *\<^sub>C ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_hole 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 3),
                   template_var 1)),
               template_app
                (template_app (template_hole 5, template_var 2),
                 template_var 0)))
           ))),
    ("Complex_Vector_Spaces0.split_scaleC_pos_le",
     "0 <= ?a & (0::?'a) <= ?b | ?a <= 0 & ?b <= (0::?'a) ==>
      (0::?'a) <= ?a *\<^sub>C ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 2, template_hole 1),
                    template_var 0))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_hole 3)),
                template_app
                 (template_app (template_hole 2, template_var 0),
                  template_hole 1)))
            )],
       template_inequation
        (less_equals, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Vector_Spaces0.split_scaleC_neg_le",
     "0 <= ?a & ?x <= (0::?'a) | ?a <= 0 & (0::?'a) <= ?x ==>
      ?a *\<^sub>C ?x <= (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 2, template_var 0),
                    template_hole 1))),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_hole 3)),
                template_app
                 (template_app (template_hole 2, template_hole 1),
                  template_var 0)))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_hole 1))),
    ("Complex_Vector_Spaces0.nonzero_inverse_scaleC_distrib",
     "[| ?a ~= 0; ?x ~= (0::?'a) |]
      ==> inverse (?a *\<^sub>C ?x) = inverse ?x /\<^sub>C ?a",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Complex_Vector_Spaces.isomorphic_equal_cdim",
     "[| clinear ?f; inj_on ?f (cspan ?S); ?f ` ?S = ?T |]
      ==> cdim ?S = cdim ?T",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app (template_hole 5, template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 1),
          template_var 0)],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "?v - (?b / ?z) *\<^sub>C ?w =
      (if ?z = 0 then ?v
       else (?z *\<^sub>C ?v - ?b *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_var 3),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_1",
     "- (?a /\<^sub>C ?c) - ?b =
      (if ?c = 0 then - ?b else (- ?a - ?c *\<^sub>C ?b) /\<^sub>C ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_hole 0)),
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app (template_hole 5, template_var 1)),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "?v + (?b / ?z) *\<^sub>C ?w =
      (if ?z = 0 then ?v
       else (?z *\<^sub>C ?v + ?b *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_var 3),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 1)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "(?a / ?z) *\<^sub>C ?v + ?w =
      (if ?z = 0 then ?w
       else (?a *\<^sub>C ?v + ?z *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_hole 1)),
               template_var 0),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 2)),
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      - (?a /\<^sub>C ?c) - ?b = (- ?a - ?c *\<^sub>C ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_simps",
     "?c ~= 0 ==>
      - (?a /\<^sub>C ?c) + ?b = (- ?a + ?c *\<^sub>C ?b) /\<^sub>C ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 0, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.clinear_injective_on_subspace_0",
     "[| linear ?f; subspace ?s |]
      ==> inj_on ?f ?s = (ALL x:?s. ?f x = (0::?'b) --> x = (0::?'a))",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate
         (template_app (template_hole 8, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 5, template_var 0), t_empty)))),
    ("Complex_Vector_Spaces.finite_span_complete_aux",
     "[| type_definition ?rep ?abs ?B; finite ?B; ?b : ?B; independent ?B |]
      ==> uniform_space_class.complete (span ?B)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "(?a / ?z) *\<^sub>C ?v - ?w =
      (if ?z = 0 then - ?w
       else (?a *\<^sub>C ?v - ?z *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2)),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_hole 2)),
               template_app (template_hole 1, template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 0, template_var 2)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces.isCont_scaleC",
     "[| isCont ?f ?a; isCont ?g ?a |]
      ==> isCont (%x. ?f x *\<^sub>C ?g x) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 1,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2)),
             t_empty)
           ))),
    ("Complex_Vector_Spaces0.complex_vector_eq_affinity",
     "?m ~= 0 ==>
      (?y = ?m *\<^sub>C ?x + ?c) =
      (?y /\<^sub>C ?m - ?c /\<^sub>C ?m = ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6))],
       template_bimplication
        (template_equation
          (template_var 2,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 1)),
             template_var 0)),
         template_equation
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 3)),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 3)),
               template_var 0)),
           template_var 1)))),
    ("Complex_Vector_Spaces0.complex_vector_affinity_eq",
     "?m ~= 0 ==>
      (?m *\<^sub>C ?x + ?c = ?y) =
      (?x = ?y /\<^sub>C ?m - ?c /\<^sub>C ?m)",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6))],
       template_bimplication
        (template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 3),
                 template_var 2)),
             template_var 1),
           template_var 0),
         template_equation
          (template_var 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 3)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 0, template_var 3)),
               template_var 1)))))),
    ("Complex_Vector_Spaces.cbilinear_times",
     "[| !!x y. ?h x y = ?g' x * ?g y; clinear ?g; clinear ?g' |]
      ==> cbilinear ?h",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (template_app (template_hole 0, template_var 2)))),
    ("Complex_Vector_Spaces.tendsto_scaleC",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. ?f x *\<^sub>C ?g x) \<longlongrightarrow> ?a *\<^sub>C ?b)
           ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_app (template_hole 1, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Complex_Vector_Spaces0.scaleC_le_cancel_left",
     "?c : \<real> ==>
      (?c *\<^sub>C ?a <= ?c *\<^sub>C ?b) =
      ((0 < ?c --> ?a <= ?b) & (?c < 0 --> ?b <= ?a))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_hole 7)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2)),
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_var 0))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 0),
               template_var 1)))))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "?a *\<^sub>C ?v - (?b / ?z) *\<^sub>C ?w =
      (if ?z = 0 then ?a *\<^sub>C ?v
       else ((?a * ?z) *\<^sub>C ?v - ?b *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 1)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "?a *\<^sub>C ?v + (?b / ?z) *\<^sub>C ?w =
      (if ?z = 0 then ?a *\<^sub>C ?v
       else ((?a * ?z) *\<^sub>C ?v + ?b *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_hole 6,
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_hole 2)),
               template_app
                (template_app (template_hole 6, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 1)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 0, template_var 4),
                         template_var 1)),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "(?a / ?z) *\<^sub>C ?v + ?b *\<^sub>C ?w =
      (if ?z = 0 then ?b *\<^sub>C ?w
       else (?a *\<^sub>C ?v + (?b * ?z) *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 6, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_hole 2)),
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app (template_hole 6, template_var 4),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 3)),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces.finite_span_representation_bounded",
     "[| finite ?B; independent ?B |]
      ==> EX D>0.
             ALL \<psi> b.
                \<bar>representation ?B \<psi> b\<bar> <= norm \<psi> * D",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 0))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Complex_Vector_Spaces.finite_cspan_crepresentation_bounded",
     "[| finite ?B; cindependent ?B |]
      ==> EX D>0.
             ALL \<psi> b.
                cmod (crepresentation ?B \<psi> b) <= norm \<psi> * D",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 0))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Complex_Vector_Spaces0.complex_add_divide_simps",
     "(?a / ?z) *\<^sub>C ?v - ?b *\<^sub>C ?w =
      (if ?z = 0 then - ?b *\<^sub>C ?w
       else (?a *\<^sub>C ?v - (?b * ?z) *\<^sub>C ?w) /\<^sub>C ?z)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 4),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 2, template_var 1)),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 7,
                 template_app (template_hole 1, template_var 3)),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 4),
                     template_var 2)),
                 template_app
                  (template_app
                    (template_hole 7,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_var 3)),
                   template_var 0))))
           ))),
    ("Complex_Vector_Spaces0.cCauchy_iff2",
     "Cauchy ?X =
      (ALL j.
          EX M. ALL m>=M.
                   ALL n>=M. cmod (?X m - ?X n) < inverse (real (Suc j)))",
     template_equation
      (template_app (template_hole 10, template_var 0),
       template_app (template_hole 9, t_empty))),
    ("Complex_Vector_Spaces0.zero_le_scaleC_iff",
     "?a : \<real> ==>
      ((0::?'a) <= ?a *\<^sub>C ?b) =
      (0 < ?a & (0::?'a) <= ?b | ?a < 0 & ?b <= (0::?'a) | ?a = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 7, template_hole 6),
                     template_var 0))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_hole 1)),
                     template_app
                      (template_app (template_hole 7, template_var 0),
                       template_hole 6))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 1)))
             )))),
    ("Complex_Vector_Spaces0.scaleC_le_0_iff",
     "?a : \<real> ==>
      (?a *\<^sub>C ?b <= (0::?'a)) =
      (0 < ?a & ?b <= (0::?'a) | ?a < 0 & (0::?'a) <= ?b | ?a = 0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_hole 9)
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 7,
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0)),
                template_hole 5)
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_var 1)),
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 5))),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 1),
                         template_hole 1)),
                     template_app
                      (template_app (template_hole 7, template_hole 5),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_hole 1)))
             )))),
    ("Complex_Vector_Spaces0.clinear_iff",
     "clinear ?f =
      ((ALL x y. ?f (x + y) = ?f x + ?f y) &
       (ALL c x. ?f (c *\<^sub>C x) = c *\<^sub>C ?f x))",
     template_equation
      (template_app (template_hole 8, template_var 0),
       template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?a < ?b /\<^sub>C ?c) =
      (if 0 < ?c then ?c *\<^sub>C ?a < ?b
       else if ?c < 0 then ?b < ?c *\<^sub>C ?a else ?a < (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?b /\<^sub>C ?c < ?a) =
      (if 0 < ?c then ?b < ?c *\<^sub>C ?a
       else if ?c < 0 then ?c *\<^sub>C ?a < ?b else (0::?'a) < ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 0),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?a <= ?b /\<^sub>C ?c) =
      (if 0 < ?c then ?c *\<^sub>C ?a <= ?b
       else if ?c < 0 then ?b <= ?c *\<^sub>C ?a else ?a <= (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?b /\<^sub>C ?c <= ?a) =
      (if 0 < ?c then ?b <= ?c *\<^sub>C ?a
       else if ?c < 0 then ?c *\<^sub>C ?a <= ?b else (0::?'a) <= ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 1)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_var 2)),
             template_app
              (template_app (template_hole 4, template_var 1),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_var 1)),
             template_app
              (template_app (template_hole 4, template_hole 0),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.clinearI",
     "[| !!b1 b2. ?f (b1 + b2) = ?f b1 + ?f b2;
         !!r b. ?f (r *\<^sub>C b) = r *\<^sub>C ?f b |]
      ==> clinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.antilinearI",
     "[| !!x y. ?f (x + y) = ?f x + ?f y;
         !!c x. ?f (c *\<^sub>C x) = cnj c *\<^sub>C ?f x |]
      ==> antilinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Complex_Vector_Spaces.bounded_antilinear_eq_on",
     "[| bounded_antilinear ?A; bounded_antilinear ?B;
         !!x. x : ?G ==> ?A x = ?B x; ?t : closure (cspan ?G) |]
      ==> ?A ?t = ?B ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            )],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("Complex_Vector_Spaces.bounded_clinear_eq_on",
     "[| bounded_clinear ?A; bounded_clinear ?B;
         !!x. x : ?G ==> ?A x = ?B x; ?t : closure (cspan ?G) |]
      ==> ?A ?t = ?B ?t",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 1)))
            )],
       template_equation
        (template_app (template_var 3, template_var 0),
         template_app (template_var 2, template_var 0)))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?a < - (?b /\<^sub>C ?c)) =
      (if 0 < ?c then ?c *\<^sub>C ?a < - ?b
       else if ?c < 0 then - ?b < ?c *\<^sub>C ?a else ?a < (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (- (?b /\<^sub>C ?c) < ?a) =
      (if 0 < ?c then - ?b < ?c *\<^sub>C ?a
       else if ?c < 0 then ?c *\<^sub>C ?a < - ?b else (0::?'a) < ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app (template_hole 5, template_hole 0),
               template_var 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (?a <= - (?b /\<^sub>C ?c)) =
      (if 0 < ?c then ?c *\<^sub>C ?a <= - ?b
       else if ?c < 0 then - ?b <= ?c *\<^sub>C ?a else ?a <= (0::?'a))",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_var 0))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_var 0)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_hole 0)))))),
    ("Complex_Vector_Spaces0.divideC_field_splits_simps_2",
     "0 < ?c ==>
      (- (?b /\<^sub>C ?c) <= ?a) =
      (if 0 < ?c then - ?b <= ?c *\<^sub>C ?a
       else if ?c < 0 then ?c *\<^sub>C ?a <= - ?b else (0::?'a) <= ?a)",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 2)),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 4, template_var 1)),
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_var 0))),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 8, template_var 2),
                   template_hole 7)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app (template_hole 4, template_var 1))),
             template_app
              (template_app (template_hole 5, template_hole 0),
               template_var 0)))))),
    ("Complex_Vector_Spaces.has_derivative_scaleC",
     "[| (?f has_derivative ?f') (at ?x within ?s);
         (?g has_derivative ?g') (at ?x within ?s) |]
      ==> ((%x. ?f x *\<^sub>C ?g x) has_derivative
           (%h. ?f ?x *\<^sub>C ?g' h + ?f' h *\<^sub>C ?g ?x))
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), t_empty),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2))
           ))),
    ("Complex_Vector_Spaces.finite_span_complete_aux",
     "[| type_definition ?rep ?abs ?B; finite ?B; ?b : ?B; independent ?B |]
      ==> EX D>0.
             ALL \<psi>.
                norm (representation ?B \<psi> ?b) <= norm \<psi> * D",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_var 1)
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 10, template_var 1))
            )],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Complex_Vector_Spaces0.complex_increasing_LIMSEQ",
     "[| !!n. ?f n <= ?f (Suc n); !!n. ?f n <= ?l;
         !!e. 0 < e ==> EX n. ?l <= ?f n + e |]
      ==> ?f \<longlonglongrightarrow> ?l",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_app (template_hole 1, template_var 0)),
             template_hole 0)
           ))),
    ("Complex_Vector_Spaces.crepresentation_from_representation",
     "[| cindependent ?B; ?b : ?B; finite ?B |]
      ==> crepresentation ?B ?\<psi> ?b =
          complex_of_real
           (representation (?B Un (*\<^sub>C) \<i> ` ?B) ?\<psi> ?b) +
          \<i> *\<^sub>C
          complex_of_real
           (representation (?B Un (*\<^sub>C) \<i> ` ?B) ?\<psi>
             (\<i> *\<^sub>C ?b))",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_hole 12, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 2)
            ),
        template_predicate
         (template_app (template_hole 10, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 8, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_hole 1)),
                         template_var 2))),
                   template_var 0),
                 template_var 1))),
           template_app
            (template_app (template_hole 0, template_hole 1),
             template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_app
                        (template_app
                          (template_hole 3,
                           template_app (template_hole 2, template_hole 1)),
                         template_var 2))),
                   template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_var 1)))))))),
    ("Complex_Vector_Spaces.bounded_clinearI",
     "[| !!b1 b2. ?f (b1 + b2) = ?f b1 + ?f b2;
         !!r b. ?f (r *\<^sub>C b) = r *\<^sub>C ?f b;
         ALL x. norm (?f x) <= norm x * ?K |]
      ==> bounded_clinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Vector_Spaces0.bounded_clinear_intro",
     "[| !!x y. ?f (x + y) = ?f x + ?f y;
         !!r x. ?f (r *\<^sub>C x) = r *\<^sub>C ?f x;
         !!x. norm (?f x) <= norm x * ?K |]
      ==> bounded_clinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Vector_Spaces.bounded_antilinearI",
     "[| !!b1 b2. ?f (b1 + b2) = ?f b1 + ?f b2;
         !!r b. ?f (r *\<^sub>C b) = cnj r *\<^sub>C ?f b;
         ALL x. norm (?f x) <= norm x * ?K |]
      ==> bounded_antilinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Vector_Spaces.bounded_antilinear_intro",
     "[| !!x y. ?f (x + y) = ?f x + ?f y;
         !!r x. ?f (r *\<^sub>C x) = cnj r *\<^sub>C ?f x;
         !!x. norm (?f x) <= norm x * ?K |]
      ==> bounded_antilinear ?f",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 1))))]:
   (string * thm * template) list
### theory "Draft.Complex_Vector_SpacesMoreTemplates"
### 0.845s elapsed time, 1.105s cpu time, 0.147s GC time
val it = (): unit
