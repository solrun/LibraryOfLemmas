   [("Complex_Inner_Product0.cGDERIV_const",
     "cGDERIV (%x. ?k) ?x :> (0::?'a)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 0),
           template_hole 0)
         )),
    ("Complex_Inner_Product0.bounded_antilinear_cinner_left",
     "bounded_antilinear (%a. cinner a ?b)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Inner_Product0.bounded_clinear_cinner_right",
     "bounded_clinear (cinner ?a)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Inner_Product0.complex_inner_1_left", "cinner 1 ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Complex_Inner_Product0.complex_inner_1_right", "cinner ?x 1 = cnj ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Inner_Product0.of_complex_inner_1",
     "cinner (of_complex ?x) (1::?'a) = cnj ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Inner_Product0.summable_of_complex_iff",
     "summable (%x. of_complex (?f x)) = summable ?f",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Inner_Product0.cnorm_eq_1",
     "(norm ?x = 1) = (cinner ?x ?x = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 0),
         template_hole 0))),
    ("Complex_Inner_Product0.bounded_antilinear_cinner_left_comp",
     "bounded_clinear ?g ==> bounded_antilinear (%x. cinner (?g x) ?b)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Inner_Product0.bounded_clinear_cinner_right_comp",
     "bounded_clinear ?g ==> bounded_clinear (%x. cinner ?a (?g x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Inner_Product0.cdot_square_norm",
     "cinner ?x ?x = complex_of_real ((norm ?x)\<^sup>2)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0), template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Complex_Inner_Product0.cinner_simps",
     "cinner ?x (?r *\<^sub>C ?y) = ?r * cinner ?x ?y",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complex_Inner_Product0.cgderiv_deriv",
     "cGDERIV ?f ?x :> ?D = (?f has_field_derivative cnj ?D) (at ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Complex_Inner_Product0.cinner_simps",
     "cinner (?r *\<^sub>C ?x) ?y = cnj ?r * cinner ?x ?y",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Complex_Inner_Product0.cinner_divide_right",
     "cinner ?a (?b / of_complex ?m) = cinner ?a ?b / ?m",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Complex_Inner_Product0.cnorm_eq",
     "(norm ?x = norm ?y) = (cinner ?x ?x = cinner ?y ?y)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 0)))),
    ("Complex_Inner_Product0.cnorm_lt",
     "(norm ?x < norm ?y) = (cinner ?x ?x < cinner ?y ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 0)))),
    ("Complex_Inner_Product0.cnorm_le",
     "(norm ?x <= norm ?y) = (cinner ?x ?x <= cinner ?y ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 0)))),
    ("Complex_Inner_Product0.cinner_simps",
     "cinner ?x (?y - ?z) = cinner ?x ?y - cinner ?x ?z",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complex_Inner_Product0.cinner_simps",
     "cinner ?x (?y + ?z) = cinner ?x ?y + cinner ?x ?z",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complex_Inner_Product0.cinner_simps",
     "cinner (?x - ?y) ?z = cinner ?x ?z - cinner ?y ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Inner_Product0.cinner_simps",
     "cinner (?x + ?y) ?z = cinner ?x ?z + cinner ?y ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Inner_Product0.cinner_divide_left",
     "cinner (?a / of_complex ?m) ?b = cinner ?a ?b / cnj ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Inner_Product0.cGDERIV_minus",
     "cGDERIV ?f ?x :> ?df ==> cGDERIV (%x. - ?f x) ?x :> - ?df",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Inner_Product0.cGDERIV_subst",
     "[| cGDERIV ?f ?x :> ?df; ?df = ?d |] ==> cGDERIV ?f ?x :> ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation (template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Complex_Inner_Product0.has_derivative_norm",
     "?x ~= (0::?'a) ==>
      (norm has_derivative (%h. Re (cinner (sgn ?x) h))) (at ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_hole 5), t_empty),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Complex_Inner_Product0.has_derivative_cinner_right",
     "(?g has_derivative ?g') ?F ==>
      ((%x. cinner ?a (?g x)) has_derivative (%x. cinner ?a (?g' x))) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), t_empty),
             template_var 1)
           ))),
    ("Complex_Inner_Product0.has_derivative_cinner_left",
     "(?g has_derivative ?g') ?F ==>
      ((%x. cinner (?g x) ?b) has_derivative (%x. cinner (?g' x) ?b)) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), t_empty),
             template_var 1)
           ))),
    ("Complex_Inner_Product0.cnorm_eq_square",
     "(norm ?x = ?a) =
      (0 <= ?a & cinner ?x ?x = complex_of_real (?a\<^sup>2))",
     template_bimplication
      (template_equation
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 1)),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))))))
           ))),
    ("Complex_Inner_Product0.norm_gt_square",
     "(?a < norm ?x) =
      (?a < 0 | complex_of_real (?a\<^sup>2) < cinner ?x ?x)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1),
         template_app (template_hole 9, template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_hole 7)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))))),
    ("Complex_Inner_Product0.norm_lt_square",
     "(norm ?x < ?a) =
      (0 < ?a & cinner ?x ?x < complex_of_real (?a\<^sup>2))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 10, template_hole 7),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 1)),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Complex_Inner_Product0.cnorm_ge_square",
     "(?a <= norm ?x) =
      (?a <= 0 | complex_of_real (?a\<^sup>2) <= cinner ?x ?x)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1),
         template_app (template_hole 9, template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_hole 7)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))))),
    ("Complex_Inner_Product0.cnorm_le_square",
     "(norm ?x <= ?a) =
      (0 <= ?a & cinner ?x ?x <= complex_of_real (?a\<^sup>2))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 10, template_hole 7),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 1)),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Complex_Inner_Product0.cGDERIV_diff",
     "[| cGDERIV ?f ?x :> ?df; cGDERIV ?g ?x :> ?dg |]
      ==> cGDERIV (%x. ?f x - ?g x) ?x :> ?df - ?dg",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Complex_Inner_Product0.cGDERIV_add",
     "[| cGDERIV ?f ?x :> ?df; cGDERIV ?g ?x :> ?dg |]
      ==> cGDERIV (%x. ?f x + ?g x) ?x :> ?df + ?dg",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Complex_Inner_Product0.differentiable_cinner",
     "[| ?f differentiable at ?x within ?s;
         ?g differentiable at ?x within ?s |]
      ==> (%x. cinner (?f x) (?g x)) differentiable at ?x within ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))
           ))),
    ("Complex_Inner_Product0.isCont_cinner",
     "[| isCont ?f ?a; isCont ?g ?a |]
      ==> isCont (%x. cinner (?f x) (?g x)) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2)),
             t_empty)
           ))),
    ("Complex_Inner_Product0.cGDERIV_DERIV_compose",
     "[| cGDERIV ?f ?x :> ?df;
         (?g has_field_derivative cnj ?dg) (at (?f ?x)) |]
      ==> cGDERIV (%x. ?g (?f x)) ?x :> ?dg *\<^sub>C ?df",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_var 4, template_var 3)),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 3),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Complex_Inner_Product0.tendsto_cinner",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. cinner (?f x) (?g x)) \<longlongrightarrow> cinner ?a ?b)
           ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Complex_Inner_Product0.csquare_continuous",
     "0 < ?e ==>
      EX d>0. ALL y. cmod (y - ?x) < d --> cmod (y * y - ?x * ?x) < ?e",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Complex_Inner_Product0.cGDERIV_inverse",
     "[| cGDERIV ?f ?x :> ?df; ?f ?x ~= 0 |]
      ==> cGDERIV (%x. inverse (?f x)) ?x
          :> - cnj ((inverse (?f ?x))\<^sup>2) *\<^sub>C ?df",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 1),
              template_hole 8)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, t_empty), template_var 1),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 7,
                           template_app (template_var 2, template_var 1))),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1, template_hole 0)))))),
               template_var 0))
           ))),
    ("Complex_Inner_Product0.GDERIV_mult",
     "[| cGDERIV ?f ?x :> ?df; cGDERIV ?g ?x :> ?dg |]
      ==> cGDERIV (%x. ?f x * ?g x) ?x
          :> cnj (?f ?x) *\<^sub>C ?dg + cnj (?g ?x) *\<^sub>C ?df",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty), template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_var 4, template_var 3))),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 1, template_var 3))),
                 template_var 2)))
           ))),
    ("Complex_Inner_Product0.cGDERIV_scaleC",
     "[| (?f has_field_derivative ?df) (at ?x); cGDERIV ?g ?x :> ?dg |]
      ==> cGDERIV (%x. ?f x *\<^sub>C ?g x) ?x
          :> cnj (?f ?x) *\<^sub>C ?dg + cnj ?df *\<^sub>C cnj (?g ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 0,
                       template_app (template_var 4, template_var 2))),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 3)),
                 template_app
                  (template_hole 0,
                   template_app (template_var 1, template_var 2)))))
           ))),
    ("Complex_Inner_Product0.has_derivative_cinner",
     "[| (?f has_derivative ?f') (at ?x within ?s);
         (?g has_derivative ?g') (at ?x within ?s) |]
      ==> ((%x. cinner (?f x) (?g x)) has_derivative
           (%h. cinner (?f ?x) (?g' h) + cinner (?f' h) (?g ?x)))
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), t_empty),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2))
           ))),
    ("Complex_Inner_Product0.cdot_norm",
     "cinner ?x ?y =
      (complex_of_real
        ((norm (?x + ?y))\<^sup>2 - (norm (?x - ?y))\<^sup>2) -
       \<i> * complex_of_real ((norm (?x + \<i> *\<^sub>C ?y))\<^sup>2) +
       \<i> * complex_of_real ((norm (?x - \<i> *\<^sub>C ?y))\<^sup>2)) /
      4",
     template_equation
      (template_app
        (template_app (template_hole 16, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_app
                            (template_hole 10,
                             template_app
                              (template_hole 9,
                               template_app
                                (template_app
                                  (template_hole 8, template_var 1),
                                 template_var 0))),
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6, template_hole 5)))),
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_hole 9,
                             template_app
                              (template_app
                                (template_hole 4, template_var 1),
                               template_var 0))),
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6, template_hole 5)))))),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_app (template_hole 8, template_var 1),
                             template_app
                              (template_app
                                (template_hole 1, template_hole 2),
                               template_var 0)))),
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 6, template_hole 5))))))),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_app
                          (template_app (template_hole 1, template_hole 2),
                           template_var 0)))),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))))))),
         template_app
          (template_hole 0,
           template_app
            (template_hole 6,
             template_app (template_hole 6, template_hole 5))))))]
