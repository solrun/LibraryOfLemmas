   [("Complex_Bounded_Linear_Function0.bounded_clinear_apply_cblinfun",
     "bounded_clinear (%a. cblinfun_apply a ?b)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Bounded_Linear_Function0.cblinfun_compose_zero",
     "?x o\<^sub>L 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_hole 0)),
    ("Complex_Bounded_Linear_Function0.bounded_antilinear_cblinfun_matrix",
     "bounded_antilinear (%x. cblinfun_apply x ?j \<bullet>\<^sub>C ?i)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("Complex_Bounded_Linear_Function0.cstrong_operator_topology_continuous_evaluation",
     "continuous_map cstrong_operator_topology euclidean
       (%f. cblinfun_apply f ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app (template_hole 2, template_hole 1)),
           t_empty)
         )),
    ("Complex_Bounded_Linear_Function0.bounded_clinear_CBlinfun_apply",
     "bounded_clinear ?f ==> cblinfun_apply (CBlinfun ?f) = ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Complex_Bounded_Linear_Function0.cblinfun_of_matrix_minus",
     "cblinfun_of_matrix ?x - cblinfun_of_matrix ?y =
      cblinfun_of_matrix (?x - ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function0.cblinfun_of_matrix_works",
     "cblinfun_of_matrix (%i j. i \<bullet>\<^sub>C cblinfun_apply ?f j) =
      ?f",
     template_equation
      (template_app (template_hole 2, t_empty), template_var 0)),
    ("Complex_Bounded_Linear_Function0.norm_cblinfun_ceuclidean_le",
     "norm ?a <= (SUM x:CBasis. norm (cblinfun_apply ?a x))",
     template_inequation
      (less_equals, template_app (template_hole 4, template_var 0),
       template_app
        (template_app (template_hole 3, t_empty), template_hole 0))),
    ("Complex_Bounded_Linear_Function0.norm_cblinfun",
     "norm (cblinfun_apply ?f ?x) <= norm ?f * norm ?x",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function0.norm_cblinfun_compose",
     "norm (?f o\<^sub>C\<^sub>L ?g) <= norm ?f * norm ?g",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function0.bounded_clinear_cblinfun_apply",
     "bounded_clinear ?g ==>
      bounded_clinear (%x. cblinfun_apply ?f (?g x))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Bounded_Linear_Function0.cblinfun_apply_cblinfun_compose",
     "cblinfun_apply (?a o\<^sub>C\<^sub>L ?b) ?c =
      cblinfun_apply ?a (cblinfun_apply ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Bounded_Linear_Function0.cblinfun_bij1",
     "?f o\<^sub>C\<^sub>L ?g = id_cblinfun ==> bij (cblinfun_apply ?f)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_hole 0),
             template_hole 0)
           ))),
    ("Complex_Bounded_Linear_Function0.cblinfun_bij2",
     "?f o\<^sub>C\<^sub>L ?g = id_cblinfun ==> bij (cblinfun_apply ?g)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1), template_var 0),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0)),
               template_hole 0),
             template_hole 0)
           ))),
    ("Complex_Bounded_Linear_Function0.conorm_componentwise",
     "bounded_clinear ?f ==> onorm ?f <= (SUM i:CBasis. norm (?f i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 3, template_var 0),
         template_app
          (template_app (template_hole 2, t_empty), template_hole 0)))),
    ("Complex_Bounded_Linear_Function0.norm_cblinfun_of_matrix",
     "norm (cblinfun_of_matrix ?a)
      <= (SUM i:CBasis. SUM j:CBasis. cmod (?a i j))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app (template_hole 4, t_empty), template_hole 0))),
    ("Complex_Bounded_Linear_Function0.CBlinfun_eq_matrix",
     "bounded_clinear ?f ==>
      CBlinfun ?f = cblinfun_of_matrix (%i j. i \<bullet>\<^sub>C ?f j)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app (template_hole 2, template_var 0),
         template_app (template_hole 1, t_empty)))),
    ("Complex_Bounded_Linear_Function0.continuous_cblinfun_matrix",
     "continuous ?F ?f ==>
      continuous ?F (%x. cblinfun_apply (?f x) ?j \<bullet>\<^sub>C ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3), t_empty)
           ))),
    ("Complex_Bounded_Linear_Function0.continuous_on_cblinfun_matrix",
     "continuous_on ?S ?f ==>
      continuous_on ?S (%x. cblinfun_apply (?f x) ?j \<bullet>\<^sub>C ?i)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 3), t_empty)
           ))),
    ("Complex_Bounded_Linear_Function0.cblinfun_eqI",
     "(!!i. cblinfun_apply ?x i = cblinfun_apply ?y i) ==> ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function0.transfer_bounded_sesquilinear_bounded_antilinearI",
     "?g = (%i. cblinfun_apply (?f i)) ==>
      bounded_sesquilinear ?g = bounded_antilinear ?f",
     template_implication
      ([template_equation (template_var 1, t_empty)],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function0.transfer_bounded_cbilinear_bounded_clinearI",
     "?g = (%i. cblinfun_apply (?f i)) ==>
      bounded_cbilinear ?g = bounded_clinear ?f",
     template_implication
      ([template_equation (template_var 1, t_empty)],
       template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Bounded_Linear_Function0.continuous_on_cstrong_operator_topo_iff_coordinatewise",
     "continuous_map ?T cstrong_operator_topology ?f =
      (ALL x. continuous_map ?T euclidean (%y. cblinfun_apply (?f y) x))",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 1), template_hole 5),
         template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Complex_Bounded_Linear_Function0.onorm_cinner_right",
     "bounded_linear ?r ==>
      onorm (%x. ?f \<bullet>\<^sub>C ?r x) <= norm ?f * onorm ?r",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 1))))),
    ("Complex_Bounded_Linear_Function0.onorm_cinner_left",
     "bounded_linear ?r ==>
      onorm (%x. ?r x \<bullet>\<^sub>C ?f) <= onorm ?r * norm ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Complex_Bounded_Linear_Function0.conorm_componentwise_le",
     "[| bounded_clinear ?f; (SUM i:CBasis. norm (?f i)) <= ?z |]
      ==> onorm ?f <= ?z",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 3, t_empty), template_hole 1),
          template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_var 0))),
    ("Complex_Bounded_Linear_Function0.cblinfun_euclidean_eqI",
     "(!!i. i : CBasis ==> cblinfun_apply ?x i = cblinfun_apply ?y i) ==>
      ?x = ?y",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Bounded_Linear_Function0.continuous_cblinfun_componentwiseI1",
     "(!!i. i : CBasis ==> continuous ?F (%x. cblinfun_apply (?f x) i)) ==>
      continuous ?F ?f",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function0.continuous_on_cblinfun_componentwise",
     "(!!i. i : CBasis ==>
            continuous_on ?s (%x. cblinfun_apply (?f x) i)) ==>
      continuous_on ?s ?f",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function0.cblinfun_of_matrix_apply",
     "cblinfun_apply (cblinfun_of_matrix ?a) ?x =
      (SUM i:CBasis.
          SUM j:CBasis. (j \<bullet>\<^sub>C ?x * ?a i j) *\<^sub>C i)",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 6, t_empty), template_hole 0))),
    ("Complex_Bounded_Linear_Function0.norm_cblinfun_bound",
     "[| 0 <= ?b; !!x. norm (cblinfun_apply ?f x) <= ?b * norm x |]
      ==> norm ?f <= ?b",
     template_implication
      ([template_inequation (less_equals, template_hole 6, template_var 1),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_var 1))),
    ("Complex_Bounded_Linear_Function0.bounded_clinear_function_uniform_limit_intros",
     "uniform_limit ?X ?g ?l ?F ==>
      uniform_limit ?X (%a b. cblinfun_apply (?g a b) ?b)
       (%a. cblinfun_apply (?l a) ?b) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 3), t_empty)),
             template_var 1)
           ))),
    ("Complex_Bounded_Linear_Function0.ctendsto_componentwise1",
     "(!!j. j : CBasis ==>
            ((%n. cblinfun_apply (?b n) j) \<longlongrightarrow>
             cblinfun_apply ?a j)
             ?F) ==>
      (?b \<longlongrightarrow> ?a) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function0.bounded_clinear_function_uniform_limit_intros",
     "uniform_limit ?X ?g ?l ?F ==>
      uniform_limit ?X
       (%a b. cblinfun_apply (?g a b) ?j \<bullet>\<^sub>C ?i)
       (%a. cblinfun_apply (?l a) ?j \<bullet>\<^sub>C ?i) ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_var 3)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty),
               template_app
                (template_app (template_hole 0, template_var 4), t_empty)),
             template_var 2)
           ))),
    ("Complex_Bounded_Linear_Function0.continuous_cblinfun_componentwiseI",
     "(!!i j.
          [| i : CBasis; j : CBasis |]
          ==> continuous ?F
               (%x. cblinfun_apply (?f x) j \<bullet>\<^sub>C i)) ==>
      continuous ?F ?f",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function0.continuous_on_cblinfun_of_matrix",
     "(!!i j.
          [| i : CBasis; j : CBasis |]
          ==> continuous_on ?S (%s. ?g s i j)) ==>
      continuous_on ?S (%s. cblinfun_of_matrix (?g s))",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1), t_empty)
           ))),
    ("Complex_Bounded_Linear_Function0.bounded_clinear_function_uniform_limit_intros",
     "[| bounded_clinear ?ga; uniform_limit ?X ?g ?l ?F |]
      ==> uniform_limit ?X (%a b. cblinfun_apply ?f (?ga (?g a b)))
           (%a. cblinfun_apply ?f (?ga (?l a))) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 5)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 3), t_empty)),
             template_var 1)
           ))),
    ("Complex_Bounded_Linear_Function0.cstrong_operator_topology_basis",
     "[| finite ?I; !!i. i : ?I ==> open (?U i) |]
      ==> openin cstrong_operator_topology
           {f. ALL i:?I. cblinfun_apply f (?x i) : ?U i}",
     template_implication
      ([template_predicate (template_app (template_hole 9, template_var 2)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, template_hole 4),
             template_app (template_hole 3, t_empty))
           ))),
    ("Complex_Bounded_Linear_Function0.norm_cblinfun_eqI",
     "[| ?n <= norm (cblinfun_apply ?f ?x) / norm ?x;
         !!x. norm (cblinfun_apply ?f x) <= ?n * norm x; 0 <= ?n |]
      ==> norm ?f = ?n",
     template_implication
      ([template_inequation
         (less_equals, template_var 2,
          template_app
           (template_app
             (template_hole 8,
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0))),
            template_app (template_hole 5, template_var 0))),
        template_predicate (template_app (template_hole 4, t_empty)),
        template_inequation (less_equals, template_hole 2, template_var 2)],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 2))),
    ("Complex_Bounded_Linear_Function0.tendsto_cblinfun_of_matrix",
     "(!!i j.
          [| i : CBasis; j : CBasis |]
          ==> ((%n. ?b n i j) \<longlongrightarrow> ?a i j) ?F) ==>
      ((%n. cblinfun_of_matrix (?b n)) \<longlongrightarrow>
       cblinfun_of_matrix ?a)
       ?F",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1))),
             template_var 0)
           ))),
    ("Complex_Bounded_Linear_Function0.ctendsto_componentwise",
     "(!!i j.
          [| i : CBasis; j : CBasis |]
          ==> ((%n. cblinfun_apply (?b n) j \<bullet>\<^sub>C
                    i) \<longlongrightarrow>
               cblinfun_apply ?a j \<bullet>\<^sub>C i)
               ?F) ==>
      (?b \<longlongrightarrow> ?a) ?F",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           )))]
