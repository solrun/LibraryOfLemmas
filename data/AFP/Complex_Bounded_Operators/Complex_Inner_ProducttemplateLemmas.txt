   [("Complex_Inner_Product.orthogonal_complement_closed_subspace",
     "closed_csubspace (orthogonal_complement ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Complex_Inner_Product0.cGDERIV_const",
     "cGDERIV (%x. ?k) ?x :> (0::?'a)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, t_empty), template_var 0),
           template_hole 0)
         )),
    ("Complex_Inner_Product0.bounded_antilinear_cinner_left",
     "bounded_antilinear (%a. \<langle>a, ?b\<rangle>)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Inner_Product0.bounded_clinear_cinner_right",
     "bounded_clinear (cinner ?a)",
     template_predicate (template_app (template_hole 1, t_empty))),
    ("Complex_Inner_Product0.complex_inner_1_left",
     "\<langle>1, ?x\<rangle> = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Complex_Inner_Product.double_orthogonal_complement_increasing",
     "?M <= orthogonal_complement (orthogonal_complement ?M)",
     template_inequation
      (less_equals, template_var 0,
       template_app
        (template_hole 0, template_app (template_hole 0, template_var 0)))),
    ("Complex_Inner_Product.cinner_real",
     "\<langle>?x, ?x\<rangle> : \<real>",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 0)),
           template_hole 0)
         )),
    ("Complex_Inner_Product.orthogonal_complement_of_closure",
     "orthogonal_complement ?A = orthogonal_complement (closure ?A)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Complex_Inner_Product.Im_cinner_x_x",
     "Im \<langle>?x, ?x\<rangle> = 0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0), template_var 0)),
       template_hole 0)),
    ("Complex_Inner_Product0.complex_inner_1_right",
     "\<langle>?x, 1\<rangle> = cnj ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 0), template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Inner_Product.of_complex_inner_1'",
     "\<langle>1::?'a, of_complex ?x\<rangle> = ?x",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Complex_Inner_Product0.of_complex_inner_1",
     "\<langle>of_complex ?x, 1::?'a\<rangle> = cnj ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Inner_Product.is_ortho_set_cindependent",
     "is_ortho_set ?A ==> cindependent ?A",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Inner_Product.projection_bounded_clinear",
     "closed_csubspace ?M ==> bounded_clinear (projection ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Inner_Product.cadjoint_bounded_clinear",
     "bounded_clinear ?A ==> bounded_clinear (?A\<^sup>\<dagger>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Inner_Product0.summable_of_complex_iff",
     "summable (%x. of_complex (?f x)) = summable ?f",
     template_equation
      (template_app (template_hole 2, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("Complex_Inner_Product.cinner_commute'",
     "cnj \<langle>?y, ?x\<rangle> = \<langle>?x, ?y\<rangle>",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Complex_Inner_Product.projection_is_projection_on'",
     "closed_csubspace ?M ==> is_projection_on (projection ?M) ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Complex_Inner_Product.cadjoint_is_cadjoint",
     "bounded_clinear ?G ==> is_cadjoint (?G\<^sup>\<dagger>) ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Complex_Inner_Product.is_adjoint_sym",
     "is_cadjoint ?F ?G ==> is_cadjoint ?G ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Complex_Inner_Product.double_orthogonal_complement_id",
     "closed_csubspace ?M ==>
      orthogonal_complement (orthogonal_complement ?M) = ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app
          (template_hole 0, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Complex_Inner_Product.double_cadjoint",
     "bounded_clinear ?U ==> ?U\<^sup>\<dagger>\<^sup>\<dagger> = ?U",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_var 0))),
    ("Complex_Inner_Product.cadjoint_exists",
     "bounded_clinear ?G ==> EX F. is_cadjoint F ?G",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Inner_Product.is_projection_on_in_image",
     "is_projection_on ?\<pi> ?M ==> ?\<pi> ?h : ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 0)),
             template_var 1)
           ))),
    ("Complex_Inner_Product0.cnorm_eq_1",
     "(norm ?x = 1) = (\<langle>?x, ?x\<rangle> = 1)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 0), template_hole 3),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 0),
         template_hole 0))),
    ("Complex_Inner_Product.projection_cadjoint",
     "closed_csubspace ?M ==>
      projection ?M\<^sup>\<dagger> = projection ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Inner_Product0.bounded_antilinear_cinner_left_comp",
     "bounded_clinear ?g ==>
      bounded_antilinear (%x. \<langle>?g x, ?b\<rangle>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Inner_Product0.bounded_clinear_cinner_right_comp",
     "bounded_clinear ?g ==>
      bounded_clinear (%x. \<langle>?a, ?g x\<rangle>)",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Inner_Product.is_projection_on_image",
     "is_projection_on ?\<pi> ?M ==> range ?\<pi> = ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0))),
    ("Complex_Inner_Product.orthogonal_complement_antimono",
     "?B <= ?A ==> orthogonal_complement ?A <= orthogonal_complement ?B",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Inner_Product.is_orthogonal_sym",
     "is_orthogonal ?\<psi> ?\<phi> = is_orthogonal ?\<phi> ?\<psi>",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Complex_Inner_Product0.cdot_square_norm",
     "\<langle>?x, ?x\<rangle> = complex_of_real ((norm ?x)\<^sup>2)",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 0), template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_hole 0)))))),
    ("Complex_Inner_Product0.cinner_simps",
     "\<langle>?x, ?r *\<^sub>C ?y\<rangle> =
      ?r * \<langle>?x, ?y\<rangle>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complex_Inner_Product.projection_reduces_norm",
     "closed_csubspace ?M ==> norm (projection ?M ?h) <= norm ?h",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app (template_hole 1, template_var 0)))),
    ("Complex_Inner_Product.is_projection_on_idem",
     "is_projection_on ?\<pi> ?M ==> ?\<pi> (?\<pi> ?x) = ?\<pi> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_var 2, template_app (template_var 2, template_var 0)),
         template_app (template_var 2, template_var 0)))),
    ("Complex_Inner_Product.is_projection_on_bounded_clinear",
     "[| is_projection_on ?\<pi> ?M; closed_csubspace ?M |]
      ==> bounded_clinear ?\<pi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Inner_Product.is_ortho_set_antimono",
     "[| ?A <= ?B; is_ortho_set ?B |] ==> is_ortho_set ?A",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate
         (template_app (template_hole 0, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 1)))),
    ("Complex_Inner_Product0.cgderiv_deriv",
     "cGDERIV ?f ?x :> ?D = (?f has_field_derivative cnj ?D) (at ?x)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 4, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("Complex_Inner_Product0.cinner_simps",
     "\<langle>?r *\<^sub>C ?x, ?y\<rangle> =
      cnj ?r * \<langle>?x, ?y\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("Complex_Inner_Product0.cinner_divide_right",
     "\<langle>?a, ?b / of_complex ?m\<rangle> =
      \<langle>?a, ?b\<rangle> / ?m",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app (template_hole 1, template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Complex_Inner_Product.projection_on_orthogonal_complement",
     "closed_csubspace ?M ==>
      projection (orthogonal_complement ?M) = id - projection ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 0))],
       template_equation
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_app (template_hole 3, template_var 0))))),
    ("Complex_Inner_Product.is_projection_on_is_cadjoint",
     "[| is_projection_on ?\<pi> ?M; closed_csubspace ?M |]
      ==> is_cadjoint ?\<pi> ?\<pi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 1)
           ))),
    ("Complex_Inner_Product0.cnorm_eq",
     "(norm ?x = norm ?y) =
      (\<langle>?x, ?x\<rangle> = \<langle>?y, ?y\<rangle>)",
     template_bimplication
      (template_equation
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 0)))),
    ("Complex_Inner_Product0.cnorm_lt",
     "(norm ?x < norm ?y) =
      (\<langle>?x, ?x\<rangle> < \<langle>?y, ?y\<rangle>)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 0)))),
    ("Complex_Inner_Product0.cnorm_le",
     "(norm ?x <= norm ?y) =
      (\<langle>?x, ?x\<rangle> <= \<langle>?y, ?y\<rangle>)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 0)))),
    ("Complex_Inner_Product0.cinner_simps",
     "\<langle>?x, ?y - ?z\<rangle> =
      \<langle>?x, ?y\<rangle> - \<langle>?x, ?z\<rangle>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complex_Inner_Product0.cinner_simps",
     "\<langle>?x, ?y + ?z\<rangle> =
      \<langle>?x, ?y\<rangle> + \<langle>?x, ?z\<rangle>",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Complex_Inner_Product0.cinner_simps",
     "\<langle>?x - ?y, ?z\<rangle> =
      \<langle>?x, ?z\<rangle> - \<langle>?y, ?z\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Inner_Product0.cinner_simps",
     "\<langle>?x + ?y, ?z\<rangle> =
      \<langle>?x, ?z\<rangle> + \<langle>?y, ?z\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Complex_Inner_Product0.cinner_divide_left",
     "\<langle>?a / of_complex ?m, ?b\<rangle> =
      \<langle>?a, ?b\<rangle> / cnj ?m",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 1))),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Complex_Inner_Product.projection_idem",
     "closed_csubspace ?M ==>
      projection ?M (projection ?M ?x) = projection ?M ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Complex_Inner_Product.projection_kernel_is_orthogonal_complement",
     "closed_csubspace ?M ==>
      projection ?M -` {0::?'a} = orthogonal_complement ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app (template_hole 4, template_var 0)),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Inner_Product.orthogonal_complement_zero_intersection",
     "(0::?'a) : ?M ==> ?M Int orthogonal_complement ?M = {0::?'a}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 5),
           template_hole 0)))),
    ("Complex_Inner_Product.projection_eqI'",
     "[| convex ?M; is_projection_on ?f ?M |] ==> projection ?M = ?f",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Complex_Inner_Product.is_cadjoint_unique",
     "[| is_cadjoint ?F1.0 ?G; is_cadjoint ?F2.0 ?G |] ==> ?F1.0 = ?F2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation (template_var 2, template_var 0))),
    ("Complex_Inner_Product.is_projection_on_cadjoint",
     "[| is_projection_on ?\<pi> ?M; closed_csubspace ?M |]
      ==> ?\<pi>\<^sup>\<dagger> = ?\<pi>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 1))),
    ("Complex_Inner_Product.cinner_sup_norm",
     "norm ?\<psi> =
      (SUP \<phi>. cmod \<langle>\<phi>, ?\<psi>\<rangle> / norm \<phi>)",
     template_equation
      (template_app (template_hole 6, template_var 0),
       template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, t_empty), template_hole 0)))),
    ("Complex_Inner_Product.riesz_frechet_representation_existence",
     "bounded_clinear ?f ==> EX t. ALL x. ?f x = \<langle>t, x\<rangle>",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Complex_Inner_Product0.cGDERIV_minus",
     "cGDERIV ?f ?x :> ?df ==> cGDERIV (%x. - ?f x) ?x :> - ?df",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Inner_Product.cinner_extensionality",
     "(!!\<gamma>.
          \<langle>\<gamma>, ?\<psi>\<rangle> =
          \<langle>\<gamma>, ?\<phi>\<rangle>) ==>
      ?\<psi> = ?\<phi>",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Inner_Product.projection_fixes_image",
     "[| closed_csubspace ?M; ?x : ?M |] ==> projection ?M ?x = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 0))),
    ("Complex_Inner_Product.is_projection_on_fixes_image",
     "[| is_projection_on ?\<pi> ?M; ?x : ?M |] ==> ?\<pi> ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app (template_var 2, template_var 0), template_var 0))),
    ("Complex_Inner_Product.is_projection_on_rank1",
     "is_projection_on
       (%x. (\<langle>?t, x\<rangle> / \<langle>?t, ?t\<rangle>) *\<^sub>C
            ?t)
       (cspan {?t})",
     template_predicate
      (
         template_app
          (template_app (template_hole 6, t_empty),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))
         )),
    ("Complex_Inner_Product.Cauchy_cinner_Cauchy",
     "[| Cauchy ?x; Cauchy ?y |]
      ==> Cauchy (%n. \<langle>?x n, ?y n\<rangle>)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 1)),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Inner_Product.is_projection_on_id_minus",
     "[| is_projection_on ?\<pi> ?M; closed_csubspace ?M |]
      ==> is_projection_on (id - ?\<pi>) (orthogonal_complement ?M)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Complex_Inner_Product.is_projection_on_reduces_norm",
     "[| is_projection_on ?\<pi> ?M; closed_csubspace ?M |]
      ==> norm (?\<pi> ?h) <= norm ?h",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Inner_Product0.cGDERIV_subst",
     "[| cGDERIV ?f ?x :> ?df; ?df = ?d |] ==> cGDERIV ?f ?x :> ?d",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_equation (template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0)
           ))),
    ("Complex_Inner_Product.projection_rank1",
     "projection (cspan {?t}) ?x =
      (\<langle>?t, ?x\<rangle> / \<langle>?t, ?t\<rangle>) *\<^sub>C ?t",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3))),
         template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 1))),
         template_var 1))),
    ("Complex_Inner_Product.orthog_proj_exists",
     "closed_csubspace ?M ==>
      EX k. ?h - k : orthogonal_complement ?M & k : ?M",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("Complex_Inner_Product.orthogonal_complement_orthoI'",
     "[| ?x : ?M; ?y : orthogonal_complement ?M |] ==> is_orthogonal ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("Complex_Inner_Product.orthogonal_complement_orthoI",
     "[| ?x : orthogonal_complement ?M; ?y : ?M |] ==> is_orthogonal ?x ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_hole 0))),
    ("Complex_Inner_Product.orthogonal_complement_kernel_functional",
     "bounded_clinear ?f ==>
      EX x. orthogonal_complement (?f -` {0}) = cspan {x}",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 0))],
       template_predicate (template_app (template_hole 9, t_empty)))),
    ("Complex_Inner_Product0.has_derivative_norm",
     "?x ~= (0::?'a) ==>
      (norm has_derivative (%h. Re \<langle>sgn ?x, h\<rangle>)) (at ?x)",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_hole 5), t_empty),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0))
           ))),
    ("Complex_Inner_Product.orthogonal_complement_antimono_iff",
     "[| closed_csubspace ?A; closed_csubspace ?B |]
      ==> (orthogonal_complement ?A <= orthogonal_complement ?B) =
          (?B <= ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("Complex_Inner_Product.is_projection_on_kernel_is_orthogonal_complement",
     "[| is_projection_on ?\<pi> ?M; closed_csubspace ?M |]
      ==> ?\<pi> -` {0::?'a} = orthogonal_complement ?M",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Complex_Inner_Product.is_projection_on_unique",
     "[| convex ?M; is_projection_on ?\<pi>\<^sub>1 ?M;
         is_projection_on ?\<pi>\<^sub>2 ?M |]
      ==> ?\<pi>\<^sub>1 = ?\<pi>\<^sub>2",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 2)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Inner_Product.scaleC_cadjoint",
     "bounded_clinear ?A ==>
      (%t. ?a *\<^sub>C ?A t)\<^sup>\<dagger> =
      (%s. cnj ?a *\<^sub>C (?A\<^sup>\<dagger>) s)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app (template_hole 3, t_empty), t_empty))),
    ("Complex_Inner_Product.cadjoint_univ_prop",
     "bounded_clinear ?G ==>
      ALL x y.
         \<langle>(?G\<^sup>\<dagger>) x, y\<rangle> =
         \<langle>x, ?G y\<rangle>",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Complex_Inner_Product.cadjoint_univ_prop'",
     "bounded_clinear ?G ==>
      ALL x y.
         \<langle>x, (?G\<^sup>\<dagger>) y\<rangle> =
         \<langle>?G x, y\<rangle>",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("Complex_Inner_Product0.has_derivative_cinner_right",
     "(?g has_derivative ?g') ?F ==>
      ((%x. \<langle>?a, ?g x\<rangle>) has_derivative
       (%x. \<langle>?a, ?g' x\<rangle>))
       ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), t_empty),
             template_var 1)
           ))),
    ("Complex_Inner_Product0.has_derivative_cinner_left",
     "(?g has_derivative ?g') ?F ==>
      ((%x. \<langle>?g x, ?b\<rangle>) has_derivative
       (%x. \<langle>?g' x, ?b\<rangle>))
       ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, t_empty), t_empty),
             template_var 1)
           ))),
    ("Complex_Inner_Product.orthogonal_complementI",
     "(!!x. x : ?M ==> is_orthogonal ?y x) ==>
      ?y : orthogonal_complement ?M",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Complex_Inner_Product.de_morgan_orthogonal_complement_inter",
     "[| closed_csubspace ?A; closed_csubspace ?B |]
      ==> orthogonal_complement (?A Int ?B) =
          orthogonal_complement ?A +\<^sub>M orthogonal_complement ?B",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Complex_Inner_Product.projection_orthogonal",
     "[| closed_csubspace ?M; ?m : ?M |]
      ==> is_orthogonal (?h - projection ?M ?h) ?m",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0))),
           template_var 1),
         template_hole 0))),
    ("Complex_Inner_Product.projection_is_projection_on",
     "[| convex ?M; closed ?M; ?M ~= {} |]
      ==> is_projection_on (projection ?M) ?M",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_var 0)
           ))),
    ("Complex_Inner_Product0.cnorm_eq_square",
     "(norm ?x = ?a) =
      (0 <= ?a & \<langle>?x, ?x\<rangle> = complex_of_real (?a\<^sup>2))",
     template_bimplication
      (template_equation
        (template_app (template_hole 10, template_var 1), template_var 0),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_var 1)),
               template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_hole 0))))))
           ))),
    ("Complex_Inner_Product0.norm_gt_square",
     "(?a < norm ?x) =
      (?a < 0 | complex_of_real (?a\<^sup>2) < \<langle>?x, ?x\<rangle>)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1),
         template_app (template_hole 9, template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_hole 7)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))))),
    ("Complex_Inner_Product0.norm_lt_square",
     "(norm ?x < ?a) =
      (0 < ?a & \<langle>?x, ?x\<rangle> < complex_of_real (?a\<^sup>2))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 10, template_hole 7),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 1)),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Complex_Inner_Product0.cnorm_ge_square",
     "(?a <= norm ?x) =
      (?a <= 0 | complex_of_real (?a\<^sup>2) <= \<langle>?x, ?x\<rangle>)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1),
         template_app (template_hole 9, template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 10, template_var 1),
             template_hole 7)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 0))))),
    ("Complex_Inner_Product0.cnorm_le_square",
     "(norm ?x <= ?a) =
      (0 <= ?a & \<langle>?x, ?x\<rangle> <= complex_of_real (?a\<^sup>2))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 10, template_hole 7),
             template_var 0)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 1)),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))))),
    ("Complex_Inner_Product.cadjoint_eqI",
     "(!!x y. \<langle>?F x, y\<rangle> = \<langle>x, ?G y\<rangle>) ==>
      ?G\<^sup>\<dagger> = ?F",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Complex_Inner_Product.is_projection_on_exists",
     "[| convex ?M; closed ?M; ?M ~= {} |]
      ==> EX \<pi>. is_projection_on \<pi> ?M",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Complex_Inner_Product.projection_in_image",
     "[| convex ?M; closed ?M; ?M ~= {} |] ==> projection ?M ?h : ?M",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1)
           ))),
    ("Complex_Inner_Product.de_morgan_orthogonal_complement_plus",
     "[| (0::?'a) : ?A; (0::?'a) : ?B |]
      ==> orthogonal_complement (?A +\<^sub>M ?B) =
          orthogonal_complement ?A Int orthogonal_complement ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_hole 4),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 2, template_var 0))))),
    ("Complex_Inner_Product.projection_image",
     "[| convex ?M; closed ?M; ?M ~= {} |] ==> range (projection ?M) = ?M",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 0)),
        template_predicate (template_app (template_hole 6, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0),
         template_var 0))),
    ("Complex_Inner_Product.is_projection_on_iff_orthog",
     "closed_csubspace ?M ==>
      is_projection_on ?\<pi> ?M =
      (ALL h. h - ?\<pi> h : orthogonal_complement ?M & ?\<pi> h : ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0), template_var 1),
         template_app (template_hole 4, t_empty)))),
    ("Complex_Inner_Product.projection_eqI",
     "[| closed_csubspace ?M; ?h - ?x : orthogonal_complement ?M; ?x : ?M |]
      ==> projection ?M ?h = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_app (template_hole 2, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0))),
    ("Complex_Inner_Product0.cGDERIV_diff",
     "[| cGDERIV ?f ?x :> ?df; cGDERIV ?g ?x :> ?dg |]
      ==> cGDERIV (%x. ?f x - ?g x) ?x :> ?df - ?dg",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Complex_Inner_Product0.cGDERIV_add",
     "[| cGDERIV ?f ?x :> ?df; cGDERIV ?g ?x :> ?dg |]
      ==> cGDERIV (%x. ?f x + ?g x) ?x :> ?df + ?dg",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), template_var 3),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Complex_Inner_Product.riesz_frechet_representation_unique",
     "[| !!x. ?f x = \<langle>?t, x\<rangle>;
         !!x. ?f x = \<langle>?u, x\<rangle> |]
      ==> ?t = ?u",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Inner_Product.cinner_sup_onorm",
     "bounded_linear ?A ==>
      onorm ?A =
      (SUP (\<psi>, \<phi>).
          cmod \<langle>\<psi>, ?A \<phi>\<rangle> /
          (norm \<psi> * norm \<phi>))",
     template_implication
      ([template_predicate
         (template_app (template_hole 12, template_var 0))],
       template_equation
        (template_app (template_hole 10, template_var 0),
         template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8, template_app (template_hole 7, t_empty)),
             template_hole 0))))),
    ("Complex_Inner_Product0.differentiable_cinner",
     "[| ?f differentiable at ?x within ?s;
         ?g differentiable at ?x within ?s |]
      ==> (%x. \<langle>?f x, ?g x\<rangle>) differentiable at ?x
          within ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, t_empty),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1))
           ))),
    ("Complex_Inner_Product0.isCont_cinner",
     "[| isCont ?f ?a; isCont ?g ?a |]
      ==> isCont (%x. \<langle>?f x, ?g x\<rangle>) ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_hole 2)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 2)),
             t_empty)
           ))),
    ("Complex_Inner_Product.smallest_dist_is_ortho",
     "closed_csubspace ?M ==>
      is_arg_min (%x. dist x ?h) (%x. x : ?M) ?k =
      (?h - ?k : orthogonal_complement ?M & ?k : ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 7, template_var 2))],
       template_equation
        (template_app
          (template_app (template_app (template_hole 5, t_empty), t_empty),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app (template_hole 0, template_var 2))),
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 2))))),
    ("Complex_Inner_Product.orthonormal_basis_of_cspan",
     "finite ?S ==>
      EX A. is_ortho_set A &
            (ALL x:A. norm x = 1) & cspan A = cspan ?S & finite A",
     template_implication
      ([template_predicate
         (template_app (template_hole 9, template_var 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("Complex_Inner_Product0.cGDERIV_DERIV_compose",
     "[| cGDERIV ?f ?x :> ?df;
         (?g has_field_derivative cnj ?dg) (at (?f ?x)) |]
      ==> cGDERIV (%x. ?g (?f x)) ?x :> ?dg *\<^sub>C ?df",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_app
               (template_app
                 (template_hole 2,
                  template_app (template_var 4, template_var 3)),
                template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, t_empty), template_var 3),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("Complex_Inner_Product.is_orthogonal_cspan",
     "[| !!s. s : ?S ==> is_orthogonal ?a s; ?x : cspan ?S |]
      ==> is_orthogonal ?a ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1))),
    ("Complex_Inner_Product.is_orthogonal_closure",
     "[| !!s. s : ?S ==> is_orthogonal ?a s; ?x : closure ?S |]
      ==> is_orthogonal ?a ?x",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1))),
    ("Complex_Inner_Product.smallest_norm_exists",
     "[| convex ?M; closed ?M; ?M ~= {} |]
      ==> EX k. is_arg_min norm (%t. t : ?M) k",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 0)),
        template_predicate (template_app (template_hole 7, template_var 0)),
        template_negation
         (template_equation (template_var 0, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Complex_Inner_Product.cinner_canonical_basis",
     "[| ?i < length canonical_basis; ?j < length canonical_basis |]
      ==> \<langle>canonical_basis ! ?i, canonical_basis ! ?j\<rangle> =
          (if ?i = ?j then 1 else 0)",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 8, template_hole 7)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 8, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_hole 7),
                    template_var 1)),
                template_app
                 (template_app (template_hole 4, template_hole 7),
                  template_var 0))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_var 0)),
                 template_hole 1),
               template_hole 0)
             )))),
    ("Complex_Inner_Product0.tendsto_cinner",
     "[| (?f \<longlongrightarrow> ?a) ?F;
         (?g \<longlongrightarrow> ?b) ?F |]
      ==> ((%x. \<langle>?f x, ?g x\<rangle>) \<longlongrightarrow>
           \<langle>?a, ?b\<rangle>)
           ?F",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_app (template_hole 3, template_var 3)),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 3),
                   template_var 0))),
             template_var 2)
           ))),
    ("Complex_Inner_Product.smallest_dist_exists",
     "[| convex ?M; closed ?M; ?M ~= {} |]
      ==> EX k. is_arg_min (%x. dist x ?h) (%x. x : ?M) k",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Complex_Inner_Product.is_projection_on_eqI",
     "[| closed_csubspace ?M; ?h - ?x : orthogonal_complement ?M; ?x : ?M;
         is_projection_on ?\<pi> ?M |]
      ==> ?\<pi> ?h = ?x",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)
            )],
       template_equation
        (template_app (template_var 0, template_var 2), template_var 1))),
    ("Complex_Inner_Product.ccspan_leq_ortho_ccspan",
     "(!!s t. [| s : ?S; t : ?T |] ==> is_orthogonal s t) ==>
      ccspan ?S <= - ccspan ?T",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 0,
           template_app (template_hole 1, template_var 0))))),
    ("Complex_Inner_Product.pythagorean_theorem",
     "is_orthogonal ?x ?y ==>
      (norm (?x + ?y))\<^sup>2 = (norm ?x)\<^sup>2 + (norm ?y)\<^sup>2",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 9, template_var 1), template_var 0),
          template_hole 8)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 5, template_var 1)),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 5, template_var 0)),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_hole 1))))))),
    ("Complex_Inner_Product.smallest_norm_unique",
     "[| convex ?M; is_arg_min norm (%t. t : ?M) ?r;
         is_arg_min norm (%t. t : ?M) ?s |]
      ==> ?r = ?s",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), t_empty),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), t_empty),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Inner_Product0.csquare_continuous",
     "0 < ?e ==>
      EX d>0. ALL y. cmod (y - ?x) < d --> cmod (y * y - ?x * ?x) < ?e",
     template_implication
      ([template_inequation (less_than, template_hole 7, template_var 1)],
       template_predicate (template_app (template_hole 6, t_empty)))),
    ("Complex_Inner_Product0.cGDERIV_inverse",
     "[| cGDERIV ?f ?x :> ?df; ?f ?x ~= 0 |]
      ==> cGDERIV (%x. inverse (?f x)) ?x
          :> - cnj ((inverse (?f ?x))\<^sup>2) *\<^sub>C ?df",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 2),
                template_var 1),
              template_var 0)
            ),
        template_negation
         (
            template_equation
             (template_app (template_var 2, template_var 1),
              template_hole 8)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 11, t_empty), template_var 1),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app
                      (template_app
                        (template_hole 3,
                         template_app
                          (template_hole 7,
                           template_app (template_var 2, template_var 1))),
                       template_app
                        (template_hole 2,
                         template_app
                          (template_hole 1, template_hole 0)))))),
               template_var 0))
           ))),
    ("Complex_Inner_Product.polar_identity_minus",
     "(norm (?x - ?y))\<^sup>2 =
      (norm ?x)\<^sup>2 + (norm ?y)\<^sup>2 -
      2 * Re \<langle>?x, ?y\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_hole 11,
           template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 1),
               template_var 0))),
         template_app
          (template_hole 8,
           template_app (template_hole 7, template_hole 6))),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_var 1)),
                 template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_hole 6)))),
             template_app
              (template_app
                (template_hole 11,
                 template_app (template_hole 10, template_var 0)),
               template_app
                (template_hole 8,
                 template_app (template_hole 7, template_hole 6))))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 7, template_hole 6))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Complex_Inner_Product.polar_identity",
     "(norm (?x + ?y))\<^sup>2 =
      (norm ?x)\<^sup>2 + (norm ?y)\<^sup>2 +
      2 * Re \<langle>?x, ?y\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 1),
               template_var 0))),
         template_app
          (template_hole 7,
           template_app (template_hole 6, template_hole 5))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 10,
                   template_app (template_hole 9, template_var 1)),
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 5)))),
             template_app
              (template_app
                (template_hole 10,
                 template_app (template_hole 9, template_var 0)),
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_hole 5))))),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app (template_hole 6, template_hole 5))),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))))),
    ("Complex_Inner_Product0.GDERIV_mult",
     "[| cGDERIV ?f ?x :> ?df; cGDERIV ?g ?x :> ?dg |]
      ==> cGDERIV (%x. ?f x * ?g x) ?x
          :> cnj (?f ?x) *\<^sub>C ?dg + cnj (?g ?x) *\<^sub>C ?df",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, t_empty), template_var 3),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_hole 0,
                       template_app (template_var 4, template_var 3))),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_hole 0,
                     template_app (template_var 1, template_var 3))),
                 template_var 2)))
           ))),
    ("Complex_Inner_Product.orthog_proj_unique",
     "[| closed_csubspace ?M; ?h - ?r : orthogonal_complement ?M & ?r : ?M;
         ?h - ?s : orthogonal_complement ?M & ?s : ?M |]
      ==> ?r = ?s",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 1)),
                  template_app (template_hole 1, template_var 3))),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 2),
                      template_var 0)),
                  template_app (template_hole 1, template_var 3))),
              template_app
               (template_app (template_hole 3, template_var 0),
                template_var 3))
            )],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Inner_Product.smallest_dist_unique",
     "[| convex ?M; is_arg_min (%x. dist x ?h) (%x. x : ?M) ?r;
         is_arg_min (%x. dist x ?h) (%x. x : ?M) ?s |]
      ==> ?r = ?s",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), t_empty),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, t_empty), t_empty),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Complex_Inner_Product.onb_expansion_finite",
     "[| cspan ?T = UNIV; is_ortho_set ?T; !!t. t : ?T ==> norm t = 1 |]
      ==> ?x = (SUM t:?T. \<langle>t, ?x\<rangle> *\<^sub>C t)",
     template_implication
      ([template_equation
         (template_app (template_hole 11, template_var 1),
          template_hole 10),
        template_predicate (template_app (template_hole 9, template_var 1)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_var 0,
         template_app
          (template_app (template_hole 2, t_empty), template_var 1)))),
    ("Complex_Inner_Product.projection_insert",
     "(!!s. s : ?S ==> is_orthogonal ?a s) ==>
      projection (closure (cspan (insert ?a ?S))) ?u =
      projection (cspan {?a}) ?u + projection (closure (cspan ?S)) ?u",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2)))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 0))),
               template_var 0)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_var 2))),
             template_var 0))))),
    ("Complex_Inner_Product0.cGDERIV_scaleC",
     "[| (?f has_field_derivative ?df) (at ?x); cGDERIV ?g ?x :> ?dg |]
      ==> cGDERIV (%x. ?f x *\<^sub>C ?g x) ?x
          :> cnj (?f ?x) *\<^sub>C ?dg + cnj ?df *\<^sub>C cnj (?g ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_hole 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, t_empty), template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_hole 0,
                       template_app (template_var 4, template_var 2))),
                   template_var 0)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app (template_hole 0, template_var 3)),
                 template_app
                  (template_hole 0,
                   template_app (template_var 1, template_var 2)))))
           ))),
    ("Complex_Inner_Product.parallelogram_law",
     "(norm (?x + ?y))\<^sup>2 + (norm (?x - ?y))\<^sup>2 =
      2 * ((norm ?x)\<^sup>2 + (norm ?y)\<^sup>2)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3)))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0))),
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3)))),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app (template_hole 4, template_hole 3))),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 7, template_var 1)),
               template_app
                (template_hole 5,
                 template_app (template_hole 4, template_hole 3)))),
           template_app
            (template_app
              (template_hole 8,
               template_app (template_hole 7, template_var 0)),
             template_app
              (template_hole 5,
               template_app (template_hole 4, template_hole 3))))))),
    ("Complex_Inner_Product.projection_insert_finite",
     "[| !!s. s : ?S ==> is_orthogonal ?a s; finite ?S |]
      ==> projection (cspan (insert ?a ?S)) ?u =
          projection (cspan {?a}) ?u + projection (cspan ?S) ?u",
     template_implication
      ([template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate
         (template_app (template_hole 6, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 2))),
           template_var 0),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 1),
                     template_hole 0))),
               template_var 0)),
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2)),
             template_var 0))))),
    ("Complex_Inner_Product0.has_derivative_cinner",
     "[| (?f has_derivative ?f') (at ?x within ?s);
         (?g has_derivative ?g') (at ?x within ?s) |]
      ==> ((%x. \<langle>?f x, ?g x\<rangle>) has_derivative
           (%h. \<langle>?f ?x, ?g' h\<rangle> +
                \<langle>?f' h, ?g ?x\<rangle>))
           (at ?x within ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 1),
                template_var 0),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, t_empty), t_empty),
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2))
           ))),
    ("Complex_Inner_Product.is_orthogonal_closure_cspan",
     "[| !!x y. [| x : ?X; y : ?Y |] ==> is_orthogonal x y;
         ?x : closure (cspan ?X); ?y : closure (cspan ?Y) |]
      ==> is_orthogonal ?x ?y",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 1,
                template_app (template_hole 0, template_var 2)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 1), template_var 0),
         template_hole 2))),
    ("Complex_Inner_Product.is_projection_on_insert",
     "[| !!s. s : ?S ==> is_orthogonal ?a s;
         is_projection_on ?\<pi> (closure (cspan ?S));
         is_projection_on ?\<pi>a (cspan {?a}) |]
      ==> is_projection_on (%x. ?\<pi>a x + ?\<pi> x)
           (closure (cspan (insert ?a ?S)))",
     template_implication
      ([template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 5, t_empty),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 3))))
           ))),
    ("Complex_Inner_Product.projection_plus",
     "[| !!x y. [| x : ?A; y : ?B |] ==> is_orthogonal x y;
         closed_csubspace ?A; closed_csubspace ?B |]
      ==> projection (?A +\<^sub>M ?B) =
          (%x. projection ?A x + projection ?B x)",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (template_app (template_hole 4, template_var 0))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         t_empty))),
    ("Complex_Inner_Product.is_projection_on_plus",
     "[| !!x y. [| x : ?A; y : ?B |] ==> is_orthogonal x y;
         closed_csubspace ?A; closed_csubspace ?B;
         is_projection_on ?\<pi>A ?A; is_projection_on ?\<pi>B ?B |]
      ==> is_projection_on (%x. ?\<pi>A x + ?\<pi>B x) (?A +\<^sub>M ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate (template_app (template_hole 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, t_empty),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2))
           ))),
    ("Complex_Inner_Product.pythagorean_theorem_sum",
     "[| !!a a'.
            [| a : ?t; a' : ?t; a ~= a' |] ==> is_orthogonal (?f a) (?f a');
         finite ?t |]
      ==> (norm (sum ?f ?t))\<^sup>2 = (SUM a:?t. (norm (?f a))\<^sup>2)",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (template_app (template_hole 8, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, t_empty), template_var 1))),
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_hole 1))),
         template_app
          (template_app (template_hole 0, t_empty), template_var 1)))),
    ("Complex_Inner_Product0.cdot_norm",
     "\<langle>?x, ?y\<rangle> =
      (complex_of_real
        ((norm (?x + ?y))\<^sup>2 - (norm (?x - ?y))\<^sup>2) -
       \<i> * complex_of_real ((norm (?x + \<i> *\<^sub>C ?y))\<^sup>2) +
       \<i> * complex_of_real ((norm (?x - \<i> *\<^sub>C ?y))\<^sup>2)) /
      4",
     template_equation
      (template_app
        (template_app (template_hole 16, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 15,
           template_app
            (template_app
              (template_hole 14,
               template_app
                (template_app
                  (template_hole 13,
                   template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_hole 11,
                         template_app
                          (template_app
                            (template_hole 10,
                             template_app
                              (template_hole 9,
                               template_app
                                (template_app
                                  (template_hole 8, template_var 1),
                                 template_var 0))),
                           template_app
                            (template_hole 7,
                             template_app
                              (template_hole 6, template_hole 5)))),
                       template_app
                        (template_app
                          (template_hole 10,
                           template_app
                            (template_hole 9,
                             template_app
                              (template_app
                                (template_hole 4, template_var 1),
                               template_var 0))),
                         template_app
                          (template_hole 7,
                           template_app
                            (template_hole 6, template_hole 5)))))),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_app
                    (template_hole 12,
                     template_app
                      (template_app
                        (template_hole 10,
                         template_app
                          (template_hole 9,
                           template_app
                            (template_app (template_hole 8, template_var 1),
                             template_app
                              (template_app
                                (template_hole 1, template_hole 2),
                               template_var 0)))),
                       template_app
                        (template_hole 7,
                         template_app
                          (template_hole 6, template_hole 5))))))),
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_hole 12,
                 template_app
                  (template_app
                    (template_hole 10,
                     template_app
                      (template_hole 9,
                       template_app
                        (template_app (template_hole 4, template_var 1),
                         template_app
                          (template_app (template_hole 1, template_hole 2),
                           template_var 0)))),
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 5))))))),
         template_app
          (template_hole 0,
           template_app
            (template_hole 6,
             template_app (template_hole 6, template_hole 5))))))]
