Loading theory "Draft.Lexer" (required by "Draft.SimplifyingTemplates" via "Draft.Simplifying")
Loading theory "Draft.Templates" (required by "Draft.SimplifyingTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.064s elapsed time, 0.157s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SimplifyingTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.545s elapsed time, 1.135s cpu time, 0.112s GC time
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Prf"
  Proving monotonicity ...
### Missing patterns in function definition:
### mkeps Zero = undefined
### !!v. mkeps (Atom v) = undefined
Found termination order: "size <*mlex*> {}"
### Missing patterns in function definition:
### !!b c. injval Zero b c = undefined
### !!b c. injval One b c = undefined
### !!v va b. injval (Plus v va) b Void = undefined
### (45 more)
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Proofs for inductive predicate(s) "Posix"
  Proving monotonicity ...
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Lexer"
### 3.455s elapsed time, 5.233s cpu time, 0.708s GC time
Loading theory "Draft.Simplifying" (required by "Draft.SimplifyingTemplates")
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Simplifying"
### 3.522s elapsed time, 4.948s cpu time, 0.950s GC time
Loading theory "Draft.SimplifyingTemplates"
val templateLemmas =
   [("Simplifying.L_fst_simp", "lang ?r = lang (fst (simp ?r))",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Simplifying.slexer_correctness", "slexer ?r ?s = lexer ?r ?s",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Simplifying.Posix_simp",
     "?s \<in> fst (simp ?r) \<rightarrow> ?v ==>
      ?s \<in> ?r \<rightarrow> snd (simp ?r) ?v",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app
                 (template_hole 2,
                  template_app (template_hole 1, template_var 1))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_var 2),
               template_var 1),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_hole 1, template_var 1)),
               template_var 0))
           ))),
    ("Simplifying.slexer_better_simp",
     "slexer ?r (?c # ?s) =
      (case slexer (fst (simp (deriv ?c ?r))) ?s of None => None
       | Some v => Some (injval ?r ?c (snd (simp (deriv ?c ?r)) v)))",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 2),
         template_app
          (template_app (template_hole 8, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 7, template_hole 6), t_empty),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)))),
           template_var 0)))),
    ("Simplifying.simp_Plus_simps",
     "simp_Plus ?p1.0 ?p2.0 =
      (if fst ?p1.0 = Zero then (fst ?p2.0, F_RIGHT (snd ?p2.0))
       else if fst ?p2.0 = Zero then (fst ?p1.0, F_LEFT (snd ?p1.0))
            else (Plus (fst ?p1.0) (fst ?p2.0),
                  F_Plus (snd ?p1.0) (snd ?p2.0)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 1)),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 7, template_var 0)),
                 template_app
                  (template_hole 4,
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_var 0)),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 7, template_var 1)),
                   template_app
                    (template_hole 2,
                     template_app (template_hole 3, template_var 1)))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 7, template_var 1)),
                     template_app (template_hole 7, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0)))))
           ))),
    ("Simplifying.simp_Times_simps",
     "simp_Times ?p1.0 ?p2.0 =
      (if fst ?p1.0 = One then (fst ?p2.0, F_Times1 (snd ?p1.0) (snd ?p2.0))
       else if fst ?p2.0 = One
            then (fst ?p1.0, F_Times2 (snd ?p1.0) (snd ?p2.0))
            else (Times (fst ?p1.0) (fst ?p2.0),
                  F_Times (snd ?p1.0) (snd ?p2.0)))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 9,
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 1)),
                   template_hole 6)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app (template_hole 7, template_var 0)),
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0)))),
             template_app
              (template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app (template_hole 7, template_var 0)),
                     template_hole 6)),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 7, template_var 1)),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app (template_hole 3, template_var 1)),
                     template_app (template_hole 3, template_var 0)))),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app (template_hole 7, template_var 1)),
                     template_app (template_hole 7, template_var 0))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 3, template_var 1)),
                   template_app (template_hole 3, template_var 0)))))
           )))]:
   (string * thm * template) list
### theory "Draft.SimplifyingTemplates"
### 0.353s elapsed time, 0.512s cpu time, 0.068s GC time
val it = (): unit
