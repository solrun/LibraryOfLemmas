Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.FOL_AxiomaticMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.FOL_AxiomaticMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Old_Datatype" (required by "Draft.FOL_AxiomaticMoreTemplates" via "Draft.FOL_Axiomatic" via "HOL-Library.Countable")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.FOL_AxiomaticMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.155s elapsed time, 0.640s cpu time, 0.038s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.FOL_AxiomaticMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.270s elapsed time, 1.095s cpu time, 0.038s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.FOL_AxiomaticMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.333s elapsed time, 1.337s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.FOL_AxiomaticMoreTemplates" via "Draft.ExtrEqs")
signature OLD_DATATYPE =
  sig
    val check_specs: spec list -> theory -> spec list * Proof.context
    type config = {quiet: bool, strict: bool}
    val default_config: config
    type descr =
       (int * (string * dtyp list * (string * dtyp list) list)) list
    val distinct_lemma: thm
    datatype dtyp
    = DtRec of int | DtTFree of string * sort | DtType of string * dtyp list
    type info =
       {case_cong: thm,
        case_cong_weak: thm,
        case_name: string,
        case_rewrites: thm list,
        descr: descr,
        distinct: thm list,
        exhaust: thm,
        index: int,
        induct: thm,
        inducts: thm list,
        inject: thm list,
        nchotomy: thm,
        rec_names: string list,
        rec_rewrites: thm list, split: thm, split_asm: thm}
    val read_specs: spec_cmd list -> theory -> spec list * Proof.context
    type spec =
       (binding * (string * sort) list * mixfix) *
       (binding * typ list * mixfix) list
    type spec_cmd =
       (binding * (string * string option) list * mixfix) *
       (binding * string list * mixfix) list
  end
structure Old_Datatype: OLD_DATATYPE
### theory "HOL-Library.Old_Datatype"
### 0.406s elapsed time, 1.626s cpu time, 0.135s GC time
Loading theory "HOL-Library.Countable" (required by "Draft.FOL_AxiomaticMoreTemplates" via "Draft.FOL_Axiomatic")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
### Additional type variable(s) in locale specification "countable": 'a
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class countable = type +
  assumes "ex_inj": "EX to_nat. inj to_nat"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Proofs for inductive predicate(s) "finite_item"
  Proving monotonicity ...
### theory "HOL-Library.BigO"
### 0.894s elapsed time, 3.390s cpu time, 0.745s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.980s elapsed time, 3.619s cpu time, 0.792s GC time
val old_countable_datatype_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
### ML warning (line 93 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 139 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
### ML warning (line 143 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 145 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Matches are not exhaustive.
### ML warning (line 156 of "~~/src/HOL/Tools/BNF/bnf_lfp_countable.ML"):
### Pattern is not exhaustive.
signature BNF_LFP_COUNTABLE =
  sig
    val countable_datatype_tac: Proof.context -> tactic
    val derive_encode_injectives_thms:
       Proof.context -> string list -> thm list
  end
structure BNF_LFP_Countable: BNF_LFP_COUNTABLE
val countable_datatype_tac = fn: Proof.context -> thm -> thm Seq.seq
val countable_tac = fn: Proof.context -> int -> tactic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "HOL-Library.Countable"
### 1.258s elapsed time, 4.075s cpu time, 0.840s GC time
Loading theory "Draft.FOL_Axiomatic" (required by "Draft.FOL_AxiomaticMoreTemplates")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.971s elapsed time, 6.038s cpu time, 1.043s GC time
Loading theory "Draft.Templates" (required by "Draft.FOL_AxiomaticMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.128s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.FOL_AxiomaticMoreTemplates")
"\<^bold>\<forall>
  (\<^bold>\<bottom> \<^bold>\<longrightarrow>
   \<^bold>\<ddagger> ''P'' [\<^bold>\<dagger> ''f'' [\<^bold># 0]])"
  :: "(char list, char list) fm"
consts
  semantics_tm :: "(nat => 'a) => ('b => 'a list => 'a) => 'b tm => 'a"
consts
  semantics_fm ::
    "(nat => 'a)
     => ('b => 'a list => 'a)
        => ('c => 'a list => bool) => ('b, 'c) fm => bool"
consts
  lift_tm :: "'a tm => 'a tm"
consts
  inst_tm :: "'a tm => 'a tm => nat => 'a tm"
consts
  inst_fm :: "('a, 'b) fm => 'a tm => nat => ('a, 'b) fm"
consts
  size_fm :: "('b, 'c) fm => 'a"
consts
  boolean ::
    "('a => 'b tm list => bool)
     => (('b, 'a) fm => bool) => ('b, 'a) fm => bool"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.545s elapsed time, 1.159s cpu time, 0.140s GC time
Proofs for inductive predicate(s) "Axiomatic"
  Proving monotonicity ...
consts
  imply :: "('a, 'b) fm list => ('a, 'b) fm => ('a, 'b) fm"
Found termination order: "{}"
consts
  extend ::
    "('a, 'b) fm set => (nat => ('a, 'b) fm) => nat => ('a, 'b) fm set"
locale Hintikka
  fixes H :: "('f, 'p) fm set"
  assumes "Hintikka H"
### theory "Draft.FOL_Axiomatic"
### 1.401s elapsed time, 2.659s cpu time, 0.296s GC time
Loading theory "Draft.FOL_AxiomaticMoreTemplates"
val templateLemmas =
   [("FOL_Axiomatic.finite_params_fm", "finite (params_fm ?p)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("FOL_Axiomatic.finite_params_tm", "finite (params_tm ?t)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("FOL_Axiomatic.Extend_subset", "?S <= Extend ?S ?f",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("FOL_Axiomatic.AK",
     "\<turnstile> ?q \<^bold>\<longrightarrow>
                   ?p \<^bold>\<longrightarrow> ?q",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))
         )),
    ("FOL_Axiomatic.imply_head", "?p # ?ps \<turnstile> ?p",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_var 1))
         )),
    ("FOL_Axiomatic.semantics_tm_id",
     "\<lparr>\<^bold>#, \<^bold>\<dagger>\<rparr> ?t = ?t",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1),
           template_hole 0),
         template_var 0),
       template_var 0)),
    ("FOL_Axiomatic.semantics_tm_id_map",
     "map \<lparr>\<^bold>#, \<^bold>\<dagger>\<rparr> ?ts = ?ts",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("FOL_Axiomatic.Neg",
     "\<turnstile> \<^bold>\<not> \<^bold>\<not> ?p \<^bold>\<longrightarrow>
                   ?p",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_hole 0)),
                 template_hole 0)),
             template_var 0))
         )),
    ("FOL_Axiomatic.size_inst_fm",
     "FOL_Axiomatic.size_fm (?p\<langle>?t/?m\<rangle>) =
      FOL_Axiomatic.size_fm ?p",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 2))),
    ("FOL_Axiomatic.add_imply", "\<turnstile> ?q ==> ?ps \<turnstile> ?q",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FOL_Axiomatic.finite_params_witness",
     "finite (params (witness ?used ?p))",
     template_predicate
      (
         template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, t_empty),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0))))
         )),
    ("FOL_Axiomatic.soundness",
     "\<turnstile> ?p ==> \<lbrakk>?E, ?F, ?G\<rbrakk> ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)
           ))),
    ("FOL_Axiomatic.imply_mem", "?p : set ?ps ==> ?ps \<turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FOL_Axiomatic.imply_append",
     "(?ps @ ?qs \<^bold>\<leadsto> ?r) =
      (?ps \<^bold>\<leadsto> ?qs \<^bold>\<leadsto> ?r)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("FOL_Axiomatic.maximal_Extend", "surj ?f ==> maximal (Extend ?S ?f)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("FOL_Axiomatic.contraposition",
     "\<turnstile> (?p \<^bold>\<longrightarrow>
                    ?q) \<^bold>\<longrightarrow>
                   \<^bold>\<not> ?q \<^bold>\<longrightarrow>
                   \<^bold>\<not> ?p",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0)),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_hole 0))))
         )),
    ("FOL_Axiomatic.contraposition",
     "\<turnstile> (\<^bold>\<not> ?q \<^bold>\<longrightarrow>
                    \<^bold>\<not> ?p) \<^bold>\<longrightarrow>
                   ?p \<^bold>\<longrightarrow> ?q",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_hole 0)),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0))),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)))
         )),
    ("FOL_Axiomatic.shift_eq",
     "?n = ?m ==> (?E\<langle>?n:?x\<rangle>) ?m = ?x",
     template_implication
      ([template_equation (template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 3),
             template_var 0),
           template_var 2),
         template_var 0))),
    ("FOL_Axiomatic.imply_lift_Imp",
     "\<turnstile> ?p \<^bold>\<longrightarrow> ?q ==>
      \<turnstile> ?p \<^bold>\<longrightarrow> ?ps \<^bold>\<leadsto> ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("FOL_Axiomatic.imply_Cons",
     "?ps \<turnstile> ?q ==> ?p # ?ps \<turnstile> ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("FOL_Axiomatic.lift_lemma",
     "\<lparr>?E\<langle>0:?x\<rangle>, ?F\<rparr> (\<^bold>\<up> ?t) =
      \<lparr>?E, ?F\<rparr> ?t",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 3),
                 template_hole 1),
               template_var 2)),
           template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 3, template_var 3), template_var 1),
         template_var 0))),
    ("FOL_Axiomatic.shift_gt",
     "?m < ?n ==> (?E\<langle>?n:?x\<rangle>) ?m = ?E ?m",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0),
           template_var 3),
         template_app (template_var 1, template_var 3)))),
    ("FOL_Axiomatic.imply_ImpE",
     "\<turnstile> ?ps \<^bold>\<leadsto> ?p \<^bold>\<longrightarrow>
                   ?ps \<^bold>\<leadsto>
                   (?p \<^bold>\<longrightarrow>
                    ?q) \<^bold>\<longrightarrow>
                   ?ps \<^bold>\<leadsto> ?q",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0))),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))))
         )),
    ("FOL_Axiomatic.AS",
     "\<turnstile> (?p \<^bold>\<longrightarrow>
                    ?q \<^bold>\<longrightarrow>
                    ?r) \<^bold>\<longrightarrow>
                   (?p \<^bold>\<longrightarrow>
                    ?q) \<^bold>\<longrightarrow>
                   ?p \<^bold>\<longrightarrow> ?r",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0))))
         )),
    ("FOL_Axiomatic.extend_bound",
     "\<Union> (extend ?S ?f ` {..?m}) = extend ?S ?f ?m",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app (template_hole 0, template_var 0))),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_var 0))),
    ("FOL_Axiomatic.main", "valid ?p = (\<turnstile> ?p)",
     template_equation
      (template_app (template_hole 4, t_empty),
       template_app (template_hole 0, template_var 0))),
    ("FOL_Axiomatic.deduct1",
     "?ps \<turnstile> ?p \<^bold>\<longrightarrow> ?q ==>
      ?p # ?ps \<turnstile> ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0))
           ))),
    ("FOL_Axiomatic.imply_swap_append",
     "?ps @ ?qs \<turnstile> ?r ==> ?qs @ ?ps \<turnstile> ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2)),
               template_var 0))
           ))),
    ("FOL_Axiomatic.deduct2",
     "?p # ?ps \<turnstile> ?q ==>
      ?ps \<turnstile> ?p \<^bold>\<longrightarrow> ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)))
           ))),
    ("FOL_Axiomatic.Boole",
     "(\<^bold>\<not> ?p) # ?ps \<turnstile> \<^bold>\<bottom> ==>
      ?ps \<turnstile> ?p",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app
                     (template_hole 2,
                      template_app
                       (template_app (template_hole 1, template_var 1),
                        template_hole 0)),
                    template_var 0)),
                template_hole 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_var 1))
           ))),
    ("FOL_Axiomatic.imply_params_fm",
     "params_fm (?ps \<^bold>\<leadsto> ?q) =
      params_fm ?q Un params (set ?ps)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 5, template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("FOL_Axiomatic.shift_lt",
     "?n < ?m ==> (?E\<langle>?n:?x\<rangle>) ?m = ?E (?m - 1)",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3),
             template_var 0),
           template_var 2),
         template_app
          (template_var 1,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0))))),
    ("FOL_Axiomatic.tautology",
     "tautology ?p ==> \<lbrakk>?E, ?F, ?G\<rbrakk> ?p",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0),
             template_var 3)
           ))),
    ("FOL_Axiomatic.completeness", "valid ?p ==> \<turnstile> ?p",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("FOL_Axiomatic.inconsistent_parts",
     "[| ?ps \<turnstile> \<^bold>\<bottom>; set ?ps <= ?S |]
      ==> ~ consistent ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_hole 4))
            ),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_negation
        (
           template_predicate
            (template_app (template_hole 0, template_var 0))
           ))),
    ("FOL_Axiomatic.shift_commute",
     "?E\<langle>?n:?y\<rangle>\<langle>0:?x\<rangle> =
      ?E\<langle>0:?x\<rangle>\<langle>?n + 1:?y\<rangle>",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_var 2),
               template_var 1)),
           template_hole 2),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 3, template_var 3),
                 template_hole 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0)),
         template_var 1))),
    ("FOL_Axiomatic.imply_weaken",
     "[| ?ps \<turnstile> ?q; set ?ps <= set ?ps' |]
      ==> ?ps' \<turnstile> ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1))
            ),
        template_inequation
         (less_equals, template_app (template_hole 0, template_var 2),
          template_app (template_hole 0, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))
           ))),
    ("FOL_Axiomatic.saturated_Extend",
     "[| consistent (Extend ?S ?f); surj ?f |]
      ==> saturated (Extend ?S ?f)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0),
            template_hole 2),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0))
           ))),
    ("FOL_Axiomatic.Imp3",
     "\<turnstile> (?p \<^bold>\<longrightarrow>
                    ?q \<^bold>\<longrightarrow>
                    ?r) \<^bold>\<longrightarrow>
                   (?s \<^bold>\<longrightarrow>
                    ?p) \<^bold>\<longrightarrow>
                   (?s \<^bold>\<longrightarrow>
                    ?q) \<^bold>\<longrightarrow>
                   ?s \<^bold>\<longrightarrow> ?r",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 3)),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 2)),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)))))
         )),
    ("FOL_Axiomatic.inst_tm_semantics",
     "\<lparr>?E, ?F\<rparr> (?t\<llangle>?s/?m\<rrangle>) =
      \<lparr>?E\<langle>?m:\<lparr>?E, ?F\<rparr> ?s\<rangle>, ?F\<rparr>
       ?t",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 4), template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0),
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 3),
                 template_var 1))),
           template_var 3),
         template_var 2))),
    ("FOL_Axiomatic.boolean_semantics",
     "boolean (%a. ?G a o map \<lparr>?E, ?F\<rparr>)
       \<lbrakk>?E, ?F, ?G\<rbrakk> =
      \<lbrakk>?E, ?F, ?G\<rbrakk>",
     template_equation
      (template_app
        (template_app (template_hole 4, t_empty),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 0),
         template_var 2))),
    ("FOL_Axiomatic.maximal_exactly_one",
     "[| consistent ?S; maximal ?S |]
      ==> (?p : ?S) = ((\<^bold>\<not> ?p) ~: ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0), template_var 1),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0)),
             template_var 1))))),
    ("FOL_Axiomatic.MP'",
     "[| ?ps \<turnstile> ?p \<^bold>\<longrightarrow> ?q;
         ?ps \<turnstile> ?p |]
      ==> ?ps \<turnstile> ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_app
                 (template_app (template_hole 0, template_var 1),
                  template_var 0)))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))
           ))),
    ("FOL_Axiomatic.Hintikka_model",
     "Hintikka ?H ==> (?p : ?H) = \<lbrakk>?H\<rbrakk> ?p",
     template_implication
      ([template_predicate
         (template_app (template_hole 6, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             t_empty),
           template_var 0)))),
    ("FOL_Axiomatic.upd_params_tm",
     "?f ~: params_tm ?t ==>
      \<lparr>?E, ?F(?f := ?x)\<rparr> ?t = \<lparr>?E, ?F\<rparr> ?t",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 4),
                  template_app (template_hole 3, template_var 3))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 4),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 3)))),
    ("FOL_Axiomatic.finite_params_extend",
     "finite (params ?S) ==> finite (params (extend ?S ?f ?n))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 4,
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, t_empty), template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, t_empty),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1),
                   template_var 0))))
           ))),
    ("FOL_Axiomatic.consistent_add_instance",
     "[| consistent ?S; \<^bold>\<forall> ?p : ?S |]
      ==> consistent ({?p\<langle>?t/0\<rangle>} Un ?S)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 1),
                         template_var 0),
                       template_hole 1)),
                   template_hole 0)),
               template_var 2))
           ))),
    ("FOL_Axiomatic.Hintikka_Extend",
     "[| consistent ?H; maximal ?H; saturated ?H; infinite UNIV |]
      ==> Hintikka ?H",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 0)),
        template_predicate (template_app (template_hole 5, template_var 0)),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 2, template_hole 1))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("FOL_Axiomatic.inst_fm_semantics",
     "\<lbrakk>?E, ?F, ?G\<rbrakk> (?p\<langle>?t/?m\<rangle>) =
      \<lbrakk>?E\<langle>?m:\<lparr>?E, ?F\<rparr>
                              ?t\<rangle>, ?F, ?G\<rbrakk>
       ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 5),
             template_var 4),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_var 0),
                 template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 1))),
             template_var 4),
           template_var 3),
         template_var 2))),
    ("FOL_Axiomatic.upd_params_fm",
     "?f ~: params_fm ?p ==>
      \<lbrakk>?E, ?F(?f := ?x), ?G\<rbrakk> ?p =
      \<lbrakk>?E, ?F, ?G\<rbrakk> ?p",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 5),
                  template_app (template_hole 3, template_var 4))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 5),
                 template_var 1)),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 0),
           template_var 4)))),
    ("FOL_Axiomatic.cut",
     "[| ?p # ?ps \<turnstile> ?r; ?q # ?ps \<turnstile> ?p |]
      ==> ?q # ?ps \<turnstile> ?r",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 3),
                    template_var 2)),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_hole 1,
                  template_app
                   (template_app (template_hole 0, template_var 0),
                    template_var 2)),
                template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2)),
               template_var 1))
           ))),
    ("FOL_Axiomatic.consistent_Extend",
     "[| consistent ?S; finite (params ?S); infinite UNIV |]
      ==> consistent (Extend ?S ?f)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty), template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("FOL_Axiomatic.split_list",
     "?x : set ?A ==>
      set (?x # removeAll ?x ?A) = set ?A & ?x ~: set (removeAll ?x ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 2, template_var 1),
                       template_app
                        (template_app (template_hole 1, template_var 1),
                         template_var 0)))),
                 template_app (template_hole 5, template_var 0))),
             template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)))))
           ))),
    ("FOL_Axiomatic.consistent_extend",
     "[| consistent ?S; finite (params ?S); infinite UNIV |]
      ==> consistent (extend ?S ?f ?n)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, t_empty), template_var 2)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 6, template_hole 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 7,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("FOL_Axiomatic.UN_finite_bound",
     "[| finite ?A; ?A <= \<Union> (range ?f) |]
      ==> EX m. ?A <= \<Union> (?f ` {..m})",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_inequation
         (less_equals, template_var 1,
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, t_empty), template_hole 2)))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("FOL_Axiomatic.inconsistent_fm",
     "[| consistent ?S; ~ consistent ({?p} Un ?S);
         !!S'. [| set S' <= ?S; ?p # S' \<turnstile> \<^bold>\<bottom> |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 11, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 8, template_var 1),
                        template_hole 7)),
                    template_var 2))
                )
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("FOL_Axiomatic.inconsistent_head",
     "[| consistent ?S; maximal ?S; ?p ~: ?S;
         !!S'. [| set S' <= ?S; ?p # S' \<turnstile> \<^bold>\<bottom> |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate (template_app (template_hole 9, template_var 2)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 2)
                )
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate (template_var 0))),
    ("FOL_Axiomatic.consistent_witness",
     "[| consistent ?S; ?p : ?S; params ?S <= ?used; finite ?used;
         infinite UNIV |]
      ==> consistent (witness ?used ?p Un ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_hole 7,
            template_app
             (template_app (template_hole 6, t_empty), template_var 2)),
          template_var 0),
        template_predicate (template_app (template_hole 4, template_var 0)),
        template_negation
         (
            template_predicate
             (template_app (template_hole 4, template_hole 2))
            )],
       template_predicate
        (
           template_app
            (template_hole 10,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1)),
               template_var 2))
           ))),
    ("FOL_Axiomatic.GR'",
     "[| \<turnstile> \<^bold>\<not> ?p\<langle>\<^bold>\<star>
           ?a/0\<rangle> \<^bold>\<longrightarrow>
                      ?q;
         ?a ~: params {?p, ?q} |]
      ==> \<turnstile> \<^bold>\<not> \<^bold>\<forall>
 ?p \<^bold>\<longrightarrow>
                       ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 14,
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app
                     (template_hole 13,
                      template_app
                       (template_app
                         (template_app (template_hole 12, template_var 2),
                          template_app
                           (template_app (template_hole 11, template_var 1),
                            template_hole 10)),
                        template_hole 9)),
                    template_hole 8)),
                template_var 0))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, t_empty),
                      template_app
                       (template_app (template_hole 2, template_var 2),
                        template_app
                         (template_app (template_hole 2, template_var 0),
                          template_hole 1)))))
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app
                    (template_hole 13,
                     template_app (template_hole 0, template_var 2)),
                   template_hole 8)),
               template_var 0))
           ))),
    ("FOL_Axiomatic.consistent_add_witness",
     "[| consistent ?S; (\<^bold>\<not> \<^bold>\<forall> ?p) : ?S;
         ?a ~: params ?S |]
      ==> consistent
           ({\<^bold>\<not> ?p\<langle>\<^bold>\<star> ?a/0\<rangle>} Un
            ?S)",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app
                   (template_hole 14,
                    template_app (template_hole 13, template_var 1)),
                  template_hole 12)),
              template_var 2)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 0),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, t_empty),
                      template_var 2)))
                )
            )],
       template_predicate
        (
           template_app
            (template_hole 16,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app
                        (template_hole 14,
                         template_app
                          (template_app
                            (template_app (template_hole 4, template_var 1),
                             template_app
                              (template_app
                                (template_hole 3, template_var 0),
                               template_hole 2)),
                           template_hole 1)),
                       template_hole 12)),
                   template_hole 0)),
               template_var 2))
           ))),
    ("FOL_Axiomatic.imply_completeness",
     "[| ALL E F G.
            Ball ?X \<lbrakk>E, F, G\<rbrakk> -->
            \<lbrakk>E, F, G\<rbrakk> ?p;
         finite (params ?X); infinite UNIV |]
      ==> EX ps. set ps <= ?X & (ps \<turnstile> ?p)",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, t_empty), template_var 1)))
            ),
        template_negation
         (
            template_predicate
             (template_app (template_hole 11, template_hole 6))
            )],
       template_predicate (template_app (template_hole 5, t_empty))))]:
   (string * thm * template) list
### theory "Draft.FOL_AxiomaticMoreTemplates"
### 0.352s elapsed time, 0.496s cpu time, 0.069s GC time
val it = (): unit
