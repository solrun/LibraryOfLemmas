   [("Bernstein_01.degree_Bernstein_le",
     "degree (Bernstein_Poly_01 ?j ?p) <= ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Bernstein_01.length_Bernstein_coeffs_01",
     "length (Bernstein_coeffs_01 ?p ?P) = ?p + 1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("Bernstein_01.Bernstein_coeffs_01_1",
     "Bernstein_coeffs_01 ?p 1 = replicate (?p + 1) 1",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("Bernstein_01.Bernstein_coeffs_01_0",
     "Bernstein_coeffs_01 ?p 0 = replicate (?p + 1) 0",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("Bernstein.Bernstein_Poly_01",
     "Bernstein_Poly ?j ?p 0 1 = Bernstein_Poly_01 ?j ?p",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0),
           template_hole 2),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Bernstein_01.coeff_gt", "?p < ?j ==> Bernstein_Poly_01 ?j ?p = 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Bernstein_01.degree_Bernstein",
     "?j <= ?p ==> degree (Bernstein_Poly_01 ?j ?p) = ?p",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Bernstein_01.poly_Bernstein_nonneg",
     "[| 0 <= ?x; ?x <= 1 |] ==> 0 <= poly (Bernstein_Poly_01 ?j ?p) ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 2),
        template_inequation (less_equals, template_var 2, template_hole 2)],
       template_inequation
        (less_equals, template_hole 3,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Bernstein.Bernstein_Poly_nonneg",
     "[| ?c <= ?x; ?x <= ?d |]
      ==> 0 <= poly (Bernstein_Poly ?j ?p ?c ?d) ?x",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals, template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 4),
               template_var 2)),
           template_var 3)))),
    ("Bernstein_01.Bernstein_reciprocal_translate",
     "reciprocal_poly ?p (Bernstein_Poly_01 ?i ?p) \<circ>\<^sub>p
      [:1, 1:] =
      monom (real (?p choose ?i)) (?p - ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 4))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bernstein_01.Bernstein_reciprocal",
     "reciprocal_poly ?p (Bernstein_Poly_01 ?i ?p) =
      smult (real (?p choose ?i)) ([:- 1, 1:] ^ (?p - ?i))",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1),
         template_app
          (template_app (template_hole 9, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_app
                (template_app (template_hole 4, template_hole 2),
                 template_hole 1))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Bernstein_01.Bernstein_symmetry",
     "?j <= ?p ==>
      Bernstein_Poly_01 ?j ?p \<circ>\<^sub>p [:1, - 1:] =
      Bernstein_Poly_01 (?p - ?j) ?p",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 2, template_hole 3)),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 0)))),
    ("Bernstein_01.Bernstein_changes_01_eq_changes",
     "degree ?P <= ?p ==>
      Bernstein_changes_01 ?p ?P =
      changes (coeffs (reciprocal_poly ?p ?P \<circ>\<^sub>p [:1, 1:]))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0), template_var 1),
         template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1)),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0)))))))),
    ("Bernstein_01.Bernstein_Poly_01_span",
     "poly_vs.span {Bernstein_Poly_01 x ?p |x. x <= ?p} =
      {x. degree x <= ?p}",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app (template_hole 6, t_empty)),
       template_app (template_hole 6, t_empty))),
    ("Bernstein_01.Bernstein_coeffs_01_smult",
     "degree ?P <= ?p ==>
      nth_default 0 (Bernstein_coeffs_01 ?p (smult ?a ?P)) ?i =
      ?a * nth_default 0 (Bernstein_coeffs_01 ?p ?P) ?i",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3))),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 3)),
             template_var 0))))),
    ("Bernstein_01.Bernstein_coeffs_01_sum",
     "degree ?P <= ?p ==>
      ?P =
      (SUM j = 0..?p.
       smult (nth_default 0 (Bernstein_coeffs_01 ?p ?P) j)
        (Bernstein_Poly_01 j ?p))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Bernstein_01.Bernstein_Poly_01_span1",
     "degree ?P <= ?p ==>
      ?P : poly_vs.span {Bernstein_Poly_01 x ?p |x. x <= ?p}",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, t_empty)))
           ))),
    ("Bernstein_01.Bernstein_coeffs_01_x",
     "?p ~= 0 ==>
      Bernstein_coeffs_01 ?p (monom 1 1) =
      map (%i. real i / real ?p) [0..<?p + 1]",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_hole 5)),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 10),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 5)))))),
    ("Bernstein.Bernstein_Poly_independent",
     "?c ~= ?d ==>
      poly_vs.independent {Bernstein_Poly x ?p ?c ?d |x. x : {..?p}}",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app (template_hole 6, t_empty))
               )
           ))),
    ("Bernstein.Bernstein_coeffs_eq_rescale",
     "?c ~= ?d ==>
      Bernstein_coeffs ?p ?c ?d ?P =
      Bernstein_coeffs_01 ?p
       (?P \<circ>\<^sub>p [:?c, 1:] \<circ>\<^sub>p [:0, ?d - ?c:])",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 1),
               template_var 3),
             template_var 2),
           template_var 0),
         template_app
          (template_app (template_hole 6, template_var 1),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_hole 2)))),
             template_app
              (template_app (template_hole 4, template_hole 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3)),
                 template_hole 2))))))),
    ("Bernstein.Bernstein_Poly_rescale_01",
     "?c ~= ?d ==>
      Bernstein_Poly ?j ?p ?c ?d \<circ>\<^sub>p [:?c, 1:] \<circ>\<^sub>p
      [:0, ?d - ?c:] =
      Bernstein_Poly_01 ?j ?p",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 1),
                       template_var 0),
                     template_var 3),
                   template_var 2)),
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 3)))),
           template_app
            (template_app (template_hole 5, template_hole 2),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3)),
               template_hole 3))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bernstein.Bernstein_Poly_span",
     "?c ~= ?d ==>
      poly_vs.span {Bernstein_Poly x ?p ?c ?d |x. x <= ?p} =
      {x. degree x <= ?p}",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_hole 7),
           template_app (template_hole 6, t_empty)),
         template_app (template_hole 6, t_empty)))),
    ("Inductive.Schroeder_Bernstein",
     "[| inj_on ?f ?A; ?f ` ?A <= ?B; inj_on ?g ?B; ?g ` ?B <= ?A |]
      ==> EX h. bij_betw h ?A ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 3),
              template_var 2)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 2, template_var 0), template_var 1),
          template_var 2)],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Bernstein.Bernstein_Poly_span1",
     "[| ?c ~= ?d; degree ?P <= ?p |]
      ==> ?P : poly_vs.span {Bernstein_Poly x ?p ?c ?d |x. x <= ?p}",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, t_empty)))
           ))),
    ("Bernstein.Bernstein_Poly_eq_rescale_01",
     "?c ~= ?d ==>
      Bernstein_Poly ?j ?p ?c ?d =
      Bernstein_Poly_01 ?j ?p \<circ>\<^sub>p
      [:0, 1 / (?d - ?c):] \<circ>\<^sub>p
      [:- ?c, 1:]",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 9, template_var 1),
               template_var 0),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_app
                        (template_app (template_hole 2, template_var 2),
                         template_var 3))),
                   template_hole 1)))),
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 0, template_var 3)),
             template_app
              (template_app (template_hole 6, template_hole 3),
               template_hole 1)))))),
    ("Bernstein.Bernstein_coeffs_sum",
     "[| ?c ~= ?d; degree ?P <= ?p |]
      ==> ?P =
          (SUM j = 0..?p.
           smult (nth_default 0 (Bernstein_coeffs ?p ?c ?d ?P) j)
            (Bernstein_Poly j ?p ?c ?d))",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Bernstein_01.Bernstein_coeffs_01_add",
     "[| degree ?P <= ?p; degree ?Q <= ?p |]
      ==> nth_default 0 (Bernstein_coeffs_01 ?p (?P + ?Q)) ?i =
          nth_default 0 (Bernstein_coeffs_01 ?p ?P) ?i +
          nth_default 0 (Bernstein_coeffs_01 ?p ?Q) ?i",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 3)),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Bernstein.Bernstein_changes_eq_rescale",
     "[| ?c ~= ?d; degree ?P <= ?p |]
      ==> Bernstein_changes ?p ?c ?d ?P =
          Bernstein_changes_01 ?p
           (?P \<circ>\<^sub>p [:?c, 1:] \<circ>\<^sub>p [:0, ?d - ?c:])",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 7, template_var 0),
               template_var 3),
             template_var 2),
           template_var 1),
         template_app
          (template_app (template_hole 6, template_var 0),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 5, template_var 1),
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_hole 2)))),
             template_app
              (template_app (template_hole 4, template_hole 1),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 3)),
                 template_hole 2))))))),
    ("Bernstein_01.coeff_Bernstein_sum_01",
     "?i <= ?p ==>
      coeff
       (reciprocal_poly ?p
         (SUM x = 0..?p.
          smult (?b x) (Bernstein_Poly_01 x ?p)) \<circ>\<^sub>p
        [:1, 1:])
       (?p - ?i) =
      real (?p choose ?i) * ?b ?i",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 1),
                   template_app
                    (template_app (template_hole 11, t_empty),
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_var 1)))),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_hole 4)))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))),
           template_app (template_var 0, template_var 2))))),
    ("Bernstein_01.Bernstein_sum_01",
     "degree ?P <= ?p ==>
      ?P =
      (SUM j = 0..?p.
       smult
        (inverse (real (?p choose j)) *
         coeff (reciprocal_poly ?p ?P \<circ>\<^sub>p [:1, 1:]) (?p - j))
        (Bernstein_Poly_01 j ?p))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 17, template_var 1),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 15, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Bernstein.Bernstein_Poly_rescale",
     "?a ~= ?b ==>
      Bernstein_Poly ?j ?p ?c ?d \<circ>\<^sub>p [:?a, 1:] \<circ>\<^sub>p
      [:0, ?b - ?a:] =
      Bernstein_Poly ?j ?p ((?c - ?a) / (?b - ?a)) ((?d - ?a) / (?b - ?a))",
     template_implication
      ([template_negation
         (template_equation (template_var 5, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 6, template_var 3),
                       template_var 2),
                     template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 5, template_var 5),
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 3)))),
           template_app
            (template_app (template_hole 5, template_hole 2),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 5)),
               template_hole 3))),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 5)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 5))),
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 5)),
             template_app
              (template_app (template_hole 1, template_var 4),
               template_var 5)))))),
    ("Bernstein_01.Bernstein_changes_01_test",
     "[| degree ?P <= ?p; ?P ~= 0 |]
      ==> int (proots_count ?P {x. 0 < x & x < 1})
          <= Bernstein_changes_01 ?p ?P &
          even
           (Bernstein_changes_01 ?p ?P -
            int (proots_count ?P {x. 0 < x & x < 1}))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 17, template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 14))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 1),
                       template_app (template_hole 9, t_empty)))),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 1)),
                 template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 1),
                     template_app (template_hole 9, t_empty))))))
           ))),
    ("Bernstein.Bernstein_Poly_altdef",
     "[| ?c ~= ?d; ?j <= ?p |]
      ==> Bernstein_Poly ?j ?p ?c ?d =
          smult (real (?p choose ?j))
           ([:- ?c / (?d - ?c), 1 / (?d - ?c):] ^ ?j *
            [:?d / (?d - ?c), - 1 / (?d - ?c):] ^ (?p - ?j))",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 12, template_var 1),
               template_var 0),
             template_var 3),
           template_var 2),
         template_app
          (template_app
            (template_hole 11,
             template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_var 1))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app (template_hole 4, template_var 3)),
                         template_app
                          (template_app (template_hole 3, template_var 2),
                           template_var 3))),
                     template_app
                      (template_app
                        (template_hole 6,
                         template_app
                          (template_app (template_hole 5, template_hole 2),
                           template_app
                            (template_app (template_hole 3, template_var 2),
                             template_var 3))),
                       template_hole 1))),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app
                      (template_app (template_hole 5, template_var 2),
                       template_app
                        (template_app (template_hole 3, template_var 2),
                         template_var 3))),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 5,
                           template_app (template_hole 4, template_hole 2)),
                         template_app
                          (template_app (template_hole 3, template_var 2),
                           template_var 3))),
                     template_hole 1))),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1))))))),
    ("Bernstein.coeff_Bernstein_sum",
     "[| ?i <= ?p; ?c ~= ?d |]
      ==> coeff
           (reciprocal_poly ?p
             ((SUM j = 0..?p.
               smult (?b j) (Bernstein_Poly j ?p ?c ?d)) \<circ>\<^sub>p
              [:?c, 1:] \<circ>\<^sub>p
              [:0, ?d - ?c:]) \<circ>\<^sub>p
            [:1, 1:])
           (?p - ?i) =
          real (?p choose ?i) * ?b ?i",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_negation
         (template_equation (template_var 2, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 16,
             template_app
              (template_app
                (template_hole 15,
                 template_app
                  (template_app (template_hole 14, template_var 3),
                   template_app
                    (template_app
                      (template_hole 15,
                       template_app
                        (template_app
                          (template_hole 15,
                           template_app
                            (template_app (template_hole 13, t_empty),
                             template_app
                              (template_app
                                (template_hole 10, template_hole 9),
                               template_var 3))),
                         template_app
                          (template_app (template_hole 8, template_var 2),
                           template_app
                            (template_app
                              (template_hole 8, template_hole 7),
                             template_hole 6)))),
                     template_app
                      (template_app (template_hole 8, template_hole 5),
                       template_app
                        (template_app
                          (template_hole 8,
                           template_app
                            (template_app (template_hole 4, template_var 1),
                             template_var 2)),
                         template_hole 6))))),
               template_app
                (template_app (template_hole 8, template_hole 7),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_hole 6)))),
           template_app
            (template_app (template_hole 3, template_var 3),
             template_var 4)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 4))),
           template_app (template_var 0, template_var 4))))),
    ("Bernstein.Bernstein_sum",
     "[| ?c ~= ?d; degree ?P <= ?p |]
      ==> ?P =
          (SUM j = 0..?p.
           smult
            (inverse (real (?p choose j)) *
             coeff
              (reciprocal_poly ?p
                (?P \<circ>\<^sub>p [:?c, 1:] \<circ>\<^sub>p
                 [:0, ?d - ?c:]) \<circ>\<^sub>p
               [:1, 1:])
              (?p - j))
            (Bernstein_Poly j ?p ?c ?d))",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_inequation
         (less_equals, template_app (template_hole 19, template_var 1),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 17, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Bernstein.Bernstein_changes_test",
     "[| degree ?P <= ?p; ?P ~= 0; ?c < ?d |]
      ==> int (proots_count ?P {x. ?c < x & x < ?d})
          <= Bernstein_changes ?p ?c ?d ?P &
          even
           (Bernstein_changes ?p ?c ?d ?P -
            int (proots_count ?P {x. ?c < x & x < ?d}))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 15, template_var 3),
          template_var 2),
        template_negation
         (template_equation (template_var 3, template_hole 12)),
        template_inequation (less_than, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 3),
                       template_app (template_hole 6, t_empty)))),
                 template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 5, template_var 2),
                       template_var 1),
                     template_var 0),
                   template_var 3))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 5, template_var 2),
                         template_var 1),
                       template_var 0),
                     template_var 3)),
                 template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_app (template_hole 6, t_empty))))))
           ))),
    ("Bernstein.line_above",
     "[| !!i. i <= ?p ==>
              nth_default 0 (Bernstein_coeffs ?p ?c ?d ?P) i
              <= ?a * ((real i * ?d + real (?p - i) * ?c) / real ?p) + ?b;
         ?p ~= 0; ?c ~= ?d; degree ?P <= ?p; ?c <= ?x; ?x <= ?d |]
      ==> poly ?P ?x <= ?a * ?x + ?b",
     template_implication
      ([template_predicate (template_app (template_hole 17, t_empty)),
        template_negation
         (template_equation (template_var 6, template_hole 3)),
        template_negation
         (template_equation (template_var 5, template_var 4)),
        template_inequation
         (less_equals, template_app (template_hole 1, template_var 3),
          template_var 6),
        template_inequation (less_equals, template_var 5, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 4)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 0),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_var 2),
               template_var 0)),
           template_var 1))))]
