Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
  Proving monotonicity ...
### theory "HOL-Library.Function_Algebras"
### 0.107s elapsed time, 0.458s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Infinite_Set"
### 0.265s elapsed time, 1.042s cpu time, 0.120s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.460s elapsed time, 1.837s cpu time, 0.190s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.534s elapsed time, 2.129s cpu time, 0.190s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.More_List"
### 0.180s elapsed time, 0.708s cpu time, 0.070s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.001s elapsed time, 3.842s cpu time, 0.744s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.450s elapsed time, 1.634s cpu time, 0.493s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.569s elapsed time, 2.100s cpu time, 0.590s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
consts
  cycle :: "'a list => 'a stream"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 0.931s elapsed time, 3.669s cpu time, 0.437s GC time
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.932s elapsed time, 3.626s cpu time, 0.437s GC time
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "HOL-Library.Tree"
### 2.138s elapsed time, 6.620s cpu time, 1.445s GC time
Loading theory "Draft.Templates" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.077s elapsed time, 0.193s cpu time, 0.080s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Three_CirclesMoreTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.546s elapsed time, 1.149s cpu time, 0.136s GC time
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.935s elapsed time, 11.179s cpu time, 3.175s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.475s elapsed time, 4.923s cpu time, 0.524s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "Draft.RRI_Misc" via "Polynomial_Interpolation.Ring_Hom_Poly" via "Polynomial_Interpolation.Missing_Polynomial")
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "Draft.RRI_Misc" via "Polynomial_Interpolation.Ring_Hom_Poly")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
consts
  Poly :: "'a list => 'a poly"
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.088s elapsed time, 4.401s cpu time, 0.486s GC time
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
### theory "Polynomial_Interpolation.Ring_Hom"
### 2.697s elapsed time, 9.344s cpu time, 1.033s GC time
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.961s elapsed time, 13.897s cpu time, 1.421s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.204s elapsed time, 0.412s cpu time, 0.000s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 7.130s elapsed time, 16.742s cpu time, 1.693s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Nth_Powers")
Loading theory "HOL-Computational_Algebra.Field_as_Ring" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "Budan_Fourier.Budan_Fourier" via "Budan_Fourier.BF_Misc" via "Sturm_Tarski.Sturm_Tarski")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Computational_Algebra.Primes"
### 0.236s elapsed time, 0.947s cpu time, 0.131s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Nth_Powers"
### 0.205s elapsed time, 0.818s cpu time, 0.206s GC time
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.454s elapsed time, 1.808s cpu time, 0.338s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
class field = division_ring + idom_divide +
  assumes "field_inverse": "!!a. a ~= (0::'a) ==> inverse a * a = (1::'a)"
  assumes "field_divide_inverse": "!!a b. a / b = a * inverse b"
  assumes "field_inverse_zero": "inverse (0::'a) = (0::'a)"
### theory "HOL-Computational_Algebra.Squarefree"
### 0.138s elapsed time, 0.549s cpu time, 0.000s GC time
instantiation
  real ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_real == division_segment :: real => real
  normalize_real == normalize :: real => real
  unit_factor_real == unit_factor :: real => real
  euclidean_size_real == euclidean_size :: real => nat
  modulo_real == modulo :: real => real => real
instantiation
  real :: euclidean_ring_gcd
  Gcd_real == Gcd :: real set => real
  Lcm_real == Lcm :: real set => real
  gcd_real == gcd :: real => real => real
  lcm_real == lcm :: real => real => real
instantiation
  rat ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_rat == division_segment :: rat => rat
  normalize_rat == normalize :: rat => rat
  unit_factor_rat == unit_factor :: rat => rat
  euclidean_size_rat == euclidean_size :: rat => nat
  modulo_rat == modulo :: rat => rat => rat
### Cannot skip proof of schematic goal statement
instantiation
  rat :: euclidean_ring_gcd
  Gcd_rat == Gcd :: rat set => rat
  Lcm_rat == Lcm :: rat set => rat
  gcd_rat == gcd :: rat => rat => rat
  lcm_rat == lcm :: rat => rat => rat
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
instantiation
  complex ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_complex == division_segment :: complex => complex
  normalize_complex == normalize :: complex => complex
  unit_factor_complex == unit_factor :: complex => complex
  euclidean_size_complex == euclidean_size :: complex => nat
  modulo_complex == modulo :: complex => complex => complex
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  complex :: euclidean_ring_gcd
  Gcd_complex == Gcd :: complex set => complex
  Lcm_complex == Lcm :: complex set => complex
  gcd_complex == gcd :: complex => complex => complex
  lcm_complex == lcm :: complex => complex => complex
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
### theory "HOL-Computational_Algebra.Field_as_Ring"
### 1.156s elapsed time, 4.203s cpu time, 0.660s GC time
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.002s elapsed time, 2.967s cpu time, 0.322s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "Draft.RRI_Misc" via "Polynomial_Interpolation.Ring_Hom_Poly")
Loading theory "Sturm_Tarski.PolyMisc" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "Budan_Fourier.Budan_Fourier" via "Budan_Fourier.BF_Misc" via "Sturm_Tarski.Sturm_Tarski")
### theory "Sturm_Tarski.PolyMisc"
### 0.108s elapsed time, 0.355s cpu time, 0.146s GC time
Loading theory "Sturm_Tarski.Sturm_Tarski" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "Budan_Fourier.Budan_Fourier" via "Budan_Fourier.BF_Misc")
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 0.919s elapsed time, 2.867s cpu time, 0.552s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "Draft.RRI_Misc")
Found termination order: "length <*mlex*> {}"
### theory "Sturm_Tarski.Sturm_Tarski"
### 1.801s elapsed time, 5.931s cpu time, 3.211s GC time
Loading theory "Budan_Fourier.BF_Misc" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "Budan_Fourier.Budan_Fourier")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
### theory "Budan_Fourier.BF_Misc"
### 0.752s elapsed time, 2.305s cpu time, 0.254s GC time
Loading theory "Budan_Fourier.Budan_Fourier" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01")
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 4.249s elapsed time, 13.697s cpu time, 4.334s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
### theory "Budan_Fourier.Budan_Fourier"
### 0.366s elapsed time, 1.194s cpu time, 0.352s GC time
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 2.464s elapsed time, 7.664s cpu time, 3.410s GC time
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.512s elapsed time, 1.247s cpu time, 0.157s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 1.425s elapsed time, 1.607s cpu time, 0.249s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01")
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 0.922s elapsed time, 0.969s cpu time, 0.055s GC time
Loading theory "Draft.RRI_Misc" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein" via "Draft.Bernstein_01")
locale vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "vector_space (*s)"
### theory "Draft.RRI_Misc"
### 0.667s elapsed time, 0.684s cpu time, 0.000s GC time
Loading theory "Draft.Normal_Poly" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles")
Loading theory "Draft.Bernstein_01" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles" via "Draft.Bernstein")
### theory "Draft.Normal_Poly"
### 0.131s elapsed time, 0.263s cpu time, 0.000s GC time
### theory "Draft.Bernstein_01"
### 0.395s elapsed time, 0.553s cpu time, 0.000s GC time
Loading theory "Draft.Bernstein" (required by "Draft.Three_CirclesMoreTemplates" via "Draft.Three_Circles")
### theory "Draft.Bernstein"
### 0.186s elapsed time, 0.283s cpu time, 0.132s GC time
Loading theory "Draft.Three_Circles" (required by "Draft.Three_CirclesMoreTemplates")
### theory "Draft.Three_Circles"
### 0.349s elapsed time, 0.349s cpu time, 0.000s GC time
Loading theory "Draft.Three_CirclesMoreTemplates"
val templateLemmas =
   [("Three_Circles.circle_diam_rescale",
     "?l < ?r ==>
      circle_diam ?l ?r =
      (%x. x * (complex_of_real ?r - complex_of_real ?l) +
           complex_of_real ?l) `
      circle_01_diam",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 5, t_empty), template_hole 0)))),
    ("Three_Circles.lower_circle_rescale",
     "?l < ?r ==>
      lower_circle ?l ?r =
      (%x. x * (complex_of_real ?r - complex_of_real ?l) +
           complex_of_real ?l) `
      lower_circle_01",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 5, t_empty), template_hole 0)))),
    ("Three_Circles.upper_circle_rescale",
     "?l < ?r ==>
      upper_circle ?l ?r =
      (%x. x * (complex_of_real ?r - complex_of_real ?l) +
           complex_of_real ?l) `
      upper_circle_01",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 5, t_empty), template_hole 0)))),
    ("Three_Circles.one_circle_01",
     "[| degree ?P <= ?p; ?P ~= 0;
         proots_count (map_poly complex_of_real ?P) circle_01_diam = 0 |]
      ==> Bernstein_changes_01 ?p ?P = 0",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 12, template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_equation
         (template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1)),
            template_hole 4),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Three_Circles.descartes_sign_zero",
     "[| !!x. poly (map_poly complex_of_real ?p) x = 0 ==> Re x <= 0;
         monic ?p |]
      ==> 0 <= coeff ?p ?i",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 1),
            template_app (template_hole 1, template_var 1)),
          template_hole 0)],
       template_inequation
        (less_equals, template_hole 4,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Three_Circles.two_circles_01",
     "[| degree ?P <= ?p; ?P ~= 0; ?p ~= 0;
         proots_count (map_poly complex_of_real ?P)
          (upper_circle_01 Un lower_circle_01) =
         1 |]
      ==> Bernstein_changes_01 ?p ?P = 1",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 15, template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 12)),
        template_negation
         (template_equation (template_var 0, template_hole 10)),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 1)),
            template_app
             (template_app (template_hole 6, template_hole 5),
              template_hole 4)),
          template_hole 3)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Three_Circles.one_circle",
     "[| ?l < ?r;
         proots_count (map_poly complex_of_real ?P) (circle_diam ?l ?r) = 0;
         ?P ~= 0; degree ?P <= ?p |]
      ==> Bernstein_changes ?p ?l ?r ?P = 0",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_equation
         (template_app
           (template_app
             (template_hole 12,
              template_app
               (template_app (template_hole 11, template_hole 10),
                template_var 1)),
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)),
          template_hole 8),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 3),
             template_var 2),
           template_var 1),
         template_hole 0))),
    ("Three_Circles.three_circles",
     "[| ?l < ?r; degree ?P <= ?p; ?P ~= 0; ?p ~= 0;
         proots_count (map_poly complex_of_real ?P) (circle_diam ?l ?r) =
         0 |]
      ==> Bernstein_changes ?p ?l ?r ?P = 0",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 12, template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 9)),
        template_negation
         (template_equation (template_var 0, template_hole 7)),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 1)),
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)),
          template_hole 7)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 3),
             template_var 2),
           template_var 1),
         template_hole 0))),
    ("Three_Circles.two_circles",
     "[| ?l < ?r; degree ?P <= ?p; ?P ~= 0; ?p ~= 0;
         proots_count (map_poly complex_of_real ?P)
          (upper_circle ?l ?r Un lower_circle ?l ?r) =
         1 |]
      ==> Bernstein_changes ?p ?l ?r ?P = 1",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 15, template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 12)),
        template_negation
         (template_equation (template_var 0, template_hole 10)),
        template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 1)),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2))),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 3),
             template_var 2),
           template_var 1),
         template_hole 0)))]:
   (string * thm * template) list
### theory "Draft.Three_CirclesMoreTemplates"
### 0.645s elapsed time, 0.908s cpu time, 0.123s GC time
val it = (): unit
