Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.Cancellation" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
  Proving monotonicity ...
### theory "HOL-Library.Function_Algebras"
### 0.120s elapsed time, 0.512s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.Infinite_Set"
### 0.253s elapsed time, 0.987s cpu time, 0.090s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.418s elapsed time, 1.684s cpu time, 0.090s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.494s elapsed time, 1.968s cpu time, 0.142s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
### theory "HOL-Library.More_List"
### 0.159s elapsed time, 0.621s cpu time, 0.051s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
Found termination order: "size_list size <*mlex*> {}"
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
### theory "HOL-Library.Set_Algebras"
### 0.362s elapsed time, 1.272s cpu time, 0.512s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
### theory "HOL-Library.Nat_Bijection"
### 0.463s elapsed time, 1.679s cpu time, 0.512s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.ExtrEqs")
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.041s elapsed time, 3.978s cpu time, 0.700s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.ExtrEqs")
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
### theory "HOL-Library.BigO"
### 1.099s elapsed time, 4.167s cpu time, 1.127s GC time
### theory "HOL-Library.Stream"
### 1.179s elapsed time, 4.493s cpu time, 1.127s GC time
Found termination order: "size <*mlex*> {}"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
Found termination order: "size <*mlex*> {}"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
### theory "HOL-Library.Tree"
### 2.114s elapsed time, 6.590s cpu time, 1.398s GC time
Loading theory "Draft.Templates" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.075s elapsed time, 0.183s cpu time, 0.072s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.RRI_MiscMoreTemplates")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.805s elapsed time, 1.964s cpu time, 0.892s GC time
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.876s elapsed time, 10.836s cpu time, 2.953s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Euclidean_Algorithm")
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 4.260s elapsed time, 4.622s cpu time, 0.435s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "Polynomial_Interpolation.Missing_Unsorted" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "Polynomial_Interpolation.Ring_Hom_Poly" via "Polynomial_Interpolation.Missing_Polynomial")
Loading theory "Polynomial_Interpolation.Ring_Hom" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "Polynomial_Interpolation.Ring_Hom_Poly")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### Missing patterns in function definition:
### max_list_non_empty [] = undefined
Found termination order: "length <*mlex*> {}"
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale one_hom
  fixes hom :: "'a => 'b"
  assumes "one_hom hom"
locale times_hom
  fixes hom :: "'a => 'b"
  assumes "times_hom hom"
locale plus_hom
  fixes hom :: "'a => 'b"
  assumes "plus_hom hom"
locale semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_mult_hom hom"
locale semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "semigroup_add_hom hom"
locale monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom hom"
locale monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom hom"
locale group_add_hom
  fixes hom :: "'a => 'b"
  assumes "group_add_hom hom"
locale ab_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_mult_hom hom"
locale ab_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_semigroup_add_hom hom"
locale comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "ab_group_add_hom hom"
locale semiring_hom
  fixes hom :: "'a => 'b"
  assumes "semiring_hom hom"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale ring_hom
  fixes hom :: "'a => 'b"
  assumes "ring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale idom_hom
  fixes hom :: "'a => 'b"
  assumes "idom_hom hom"
locale idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_char_0_hom
  fixes hom :: "'a => 'b"
  assumes "field_char_0_hom hom"
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale one_hom_1
  fixes hom :: "'a => 'b"
  assumes "one_hom_1 hom"
locale monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_hom_1 hom"
locale monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "monoid_add_hom_0 hom"
locale comm_monoid_mult_hom_1
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_hom_1 hom"
locale comm_monoid_add_hom_0
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom_0 hom"
locale injective
  fixes f :: "'a => 'b"
  assumes "injective f"
locale inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "inj_zero_hom hom"
locale inj_one_hom
  fixes hom :: "'a => 'b"
  assumes "inj_one_hom hom"
locale inj_semigroup_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_mult_hom hom"
locale inj_semigroup_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semigroup_add_hom hom"
locale inj_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_mult_hom hom"
locale inj_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_monoid_add_hom hom"
locale inj_comm_monoid_mult_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_mult_hom hom"
locale inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_monoid_add_hom hom"
locale inj_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_semiring_hom hom"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_semiring_hom hom"
locale inj_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_group_add_hom hom"
locale inj_ab_group_add_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ab_group_add_hom hom"
locale inj_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_ring_hom hom"
locale inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "inj_comm_ring_hom hom"
locale inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
consts
  Poly :: "'a list => 'a poly"
locale surjective
  fixes f :: "'a => 'b"
  assumes "surjective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale bijective
  fixes f :: "'a => 'b"
  assumes "bijective f"
locale monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_mult_isom hom"
locale monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "monoid_add_isom hom"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
### theory "Polynomial_Interpolation.Missing_Unsorted"
### 1.114s elapsed time, 4.527s cpu time, 0.441s GC time
locale comm_monoid_mult_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_mult_isom hom"
locale comm_monoid_add_isom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_isom hom"
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
locale semiring_isom
  fixes hom :: "'a => 'b"
  assumes "semiring_isom hom"
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
locale comm_semiring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_isom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale ring_isom
  fixes hom :: "'a => 'b"
  assumes "ring_isom hom"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
locale comm_ring_isom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_isom hom"
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
locale idom_isom
  fixes hom :: "'a => 'b"
  assumes "idom_isom hom"
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
locale field_isom
  fixes hom :: "'a => 'b"
  assumes "field_isom hom"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
locale inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "inj_idom_divide_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
### theory "Polynomial_Interpolation.Ring_Hom"
### 2.828s elapsed time, 9.782s cpu time, 0.915s GC time
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
### theory "HOL-Computational_Algebra.Polynomial"
### 4.973s elapsed time, 14.073s cpu time, 1.236s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.200s elapsed time, 0.400s cpu time, 0.000s GC time
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 7.224s elapsed time, 16.990s cpu time, 1.548s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Nth_Powers")
Loading theory "HOL-Computational_Algebra.Field_as_Ring" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "Budan_Fourier.BF_Misc" via "Sturm_Tarski.Sturm_Tarski")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Computational_Algebra.Primes"
### 0.255s elapsed time, 1.024s cpu time, 0.102s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.415s elapsed time, 1.658s cpu time, 0.227s GC time
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
### theory "HOL-Computational_Algebra.Nth_Powers"
### 0.186s elapsed time, 0.729s cpu time, 0.125s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
class field = division_ring + idom_divide +
  assumes "field_inverse": "!!a. a ~= (0::'a) ==> inverse a * a = (1::'a)"
  assumes "field_divide_inverse": "!!a b. a / b = a * inverse b"
  assumes "field_inverse_zero": "inverse (0::'a) = (0::'a)"
### theory "HOL-Computational_Algebra.Squarefree"
### 0.135s elapsed time, 0.543s cpu time, 0.000s GC time
instantiation
  real ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_real == division_segment :: real => real
  normalize_real == normalize :: real => real
  unit_factor_real == unit_factor :: real => real
  euclidean_size_real == euclidean_size :: real => nat
  modulo_real == modulo :: real => real => real
instantiation
  real :: euclidean_ring_gcd
  Gcd_real == Gcd :: real set => real
  Lcm_real == Lcm :: real set => real
  gcd_real == gcd :: real => real => real
  lcm_real == lcm :: real => real => real
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
instantiation
  rat ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_rat == division_segment :: rat => rat
  normalize_rat == normalize :: rat => rat
  unit_factor_rat == unit_factor :: rat => rat
  euclidean_size_rat == euclidean_size :: rat => nat
  modulo_rat == modulo :: rat => rat => rat
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  rat :: euclidean_ring_gcd
  Gcd_rat == Gcd :: rat set => rat
  Lcm_rat == Lcm :: rat set => rat
  gcd_rat == gcd :: rat => rat => rat
  lcm_rat == lcm :: rat => rat => rat
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
### Cannot skip proof of schematic goal statement
instantiation
  complex ::
    {normalization_euclidean_semiring,unique_euclidean_ring,normalization_semidom_multiplicative}
  division_segment_complex == division_segment :: complex => complex
  normalize_complex == normalize :: complex => complex
  unit_factor_complex == unit_factor :: complex => complex
  euclidean_size_complex == euclidean_size :: complex => nat
  modulo_complex == modulo :: complex => complex => complex
instantiation
  complex :: euclidean_ring_gcd
  Gcd_complex == Gcd :: complex set => complex
  Lcm_complex == Lcm :: complex set => complex
  gcd_complex == gcd :: complex => complex => complex
  lcm_complex == lcm :: complex => complex => complex
### theory "HOL-Computational_Algebra.Field_as_Ring"
### 1.084s elapsed time, 3.896s cpu time, 0.457s GC time
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 0.990s elapsed time, 2.837s cpu time, 0.317s GC time
Loading theory "Polynomial_Interpolation.Missing_Polynomial" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "Polynomial_Interpolation.Ring_Hom_Poly")
Loading theory "Sturm_Tarski.PolyMisc" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "Budan_Fourier.BF_Misc" via "Sturm_Tarski.Sturm_Tarski")
### theory "Sturm_Tarski.PolyMisc"
### 0.068s elapsed time, 0.203s cpu time, 0.000s GC time
Loading theory "Sturm_Tarski.Sturm_Tarski" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "Budan_Fourier.BF_Misc")
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
class mult_zero = times + zero +
  assumes "mult_zero_left": "!!a. (0::'a) * a = (0::'a)"
  assumes "mult_zero_right": "!!a. a * (0::'a) = (0::'a)"
Found termination order: "size_list (%p. size (fst p)) <*mlex*> {}"
### theory "Polynomial_Interpolation.Missing_Polynomial"
### 0.888s elapsed time, 2.740s cpu time, 0.434s GC time
Loading theory "Polynomial_Interpolation.Ring_Hom_Poly" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc")
Found termination order: "length <*mlex*> {}"
### theory "Sturm_Tarski.Sturm_Tarski"
### 1.777s elapsed time, 5.855s cpu time, 3.196s GC time
Loading theory "Budan_Fourier.BF_Misc" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale zero_hom
  fixes hom :: "'a => 'b"
  assumes "zero_hom hom"
locale map_poly_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_zero_hom hom"
locale comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "comm_monoid_add_hom hom"
locale map_poly_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_monoid_add_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale map_poly_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_semiring_hom hom"
locale map_poly_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_comm_ring_hom hom"
locale map_poly_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_idom_hom hom"
locale map_poly_inj_zero_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_zero_hom hom"
locale map_poly_inj_comm_monoid_add_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_monoid_add_hom hom"
locale map_poly_inj_comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_semiring_hom hom"
locale map_poly_inj_comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_comm_ring_hom hom"
locale map_poly_inj_idom_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_hom hom"
### theory "Budan_Fourier.BF_Misc"
### 0.743s elapsed time, 2.264s cpu time, 0.225s GC time
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 4.104s elapsed time, 13.117s cpu time, 4.112s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
locale zero_hom_0
  fixes hom :: "'a => 'b"
  assumes "zero_hom_0 hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_semiring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_semiring_hom hom"
locale comm_ring_hom
  fixes hom :: "'a => 'b"
  assumes "comm_ring_hom hom"
locale field_hom
  fixes hom :: "'a => 'b"
  assumes "field_hom hom"
locale field_hom'
  fixes hom :: "'a => 'b"
  assumes "field_hom' hom"
locale map_poly_inj_idom_divide_hom
  fixes hom :: "'a => 'b"
  assumes "map_poly_inj_idom_divide_hom hom"
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.481s elapsed time, 1.008s cpu time, 0.069s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc" via "HOL-Computational_Algebra.Computational_Algebra")
### theory "Polynomial_Interpolation.Ring_Hom_Poly"
### 2.376s elapsed time, 7.078s cpu time, 3.203s GC time
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 1.445s elapsed time, 1.707s cpu time, 0.282s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.RRI_MiscMoreTemplates" via "Draft.RRI_Misc")
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 0.925s elapsed time, 0.968s cpu time, 0.051s GC time
Loading theory "Draft.RRI_Misc" (required by "Draft.RRI_MiscMoreTemplates")
locale vector_space
  fixes scale :: "'a => 'b => 'b"  (infixr \<open>*s\<close> 75)
  assumes "vector_space (*s)"
### theory "Draft.RRI_Misc"
### 0.665s elapsed time, 0.680s cpu time, 0.000s GC time
Loading theory "Draft.RRI_MiscMoreTemplates"
val templateLemmas =
   [("RRI_Misc.changes_nonneg", "0 <= changes ?xs",
     template_inequation
      (less_equals, template_hole 1,
       template_app (template_hole 0, template_var 0))),
    ("RRI_Misc.reciprocal_0", "reciprocal_poly ?p 0 = 0",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("RRI_Misc.changes_rev", "changes (rev ?xs) = changes ?xs",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("RRI_Misc.changes_replicate_0", "changes (replicate ?n (0::?'a)) = 0",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_hole 1)),
       template_hole 0)),
    ("RRI_Misc.reciprocal_degree",
     "reciprocal_poly (degree ?P) ?P = reflect_poly ?P",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("RRI_Misc.reciprocal_1", "reciprocal_poly ?p 1 = monom (1::?'a) ?p",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 0), template_hole 2),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("RRI_Misc.map_poly_Im_of_real",
     "map_poly Im (map_poly complex_of_real ?p) = 0",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("RRI_Misc.reflect_poly_monom",
     "reflect_poly (monom ?n ?i) = monom ?n 0",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("RRI_Misc.degree_subspace", "poly_vs.subspace {x. degree x <= ?n}",
     template_predicate
      (
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_app (template_hole 2, t_empty))
         )),
    ("RRI_Misc.changes_pCons",
     "changes (coeffs (pCons (0::?'a) ?f)) = changes (coeffs ?f)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))),
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)))),
    ("RRI_Misc.changes_append_replicate_0",
     "changes (?xs @ replicate ?n (0::?'a)) = changes ?xs",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))),
       template_app (template_hole 3, template_var 1))),
    ("RRI_Misc.dim_degree", "poly_vs.dim {x. degree x <= ?n} = ?n + 1",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app (template_hole 4, t_empty)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("RRI_Misc.degree_0_iff", "(degree ?P = 0) = (EX a. ?P = [:a:])",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 0)),
         template_hole 4),
       template_app (template_hole 3, t_empty))),
    ("RRI_Misc.degree_reciprocal",
     "degree ?P <= ?p ==> degree (reciprocal_poly ?p ?P) <= ?p",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 1, template_var 1),
          template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 0))),
    ("RRI_Misc.changes_rev_about",
     "changes (replicate (?p - length ?xs) (0::?'a) @ rev ?xs) =
      changes ?xs",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_app (template_hole 2, template_var 0))),
               template_hole 1)),
           template_app (template_hole 0, template_var 0))),
       template_app (template_hole 6, template_var 0))),
    ("RRI_Misc.poly_map_poly_of_real_cnj",
     "poly (map_poly complex_of_real ?p) (cnj ?z) =
      cnj (poly (map_poly complex_of_real ?p) ?z)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1)),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_hole 0,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 1)),
           template_var 0)))),
    ("RRI_Misc.smult_power", "smult (?x ^ ?n) (?p ^ ?n) = smult ?x ?p ^ ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_var 1))),
    ("RRI_Misc.proots_count_monom",
     "(0::?'a) ~: ?A ==> proots_count (monom (1::?'a) ?d) ?A = 0",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("RRI_Misc.reciprocal_reciprocal",
     "degree ?P <= ?p ==> reciprocal_poly ?p (reciprocal_poly ?p ?P) = ?P",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("RRI_Misc.changes_scale_const",
     "?s ~= (0::?'a) ==> changes (map ((*) ?s) ?xs) = changes ?xs",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)),
         template_app (template_hole 2, template_var 0)))),
    ("RRI_Misc.changes_all_nonneg",
     "(!!i. (0::?'a) <= nth_default (0::?'a) ?xs i) ==> changes ?xs = 0",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("RRI_Misc.poly_eq_by_eval", "(!!x. poly ?P x = poly ?Q x) ==> ?P = ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation (template_var 1, template_var 0))),
    ("RRI_Misc.complex_poly_eq",
     "?r =
      map_poly complex_of_real (map_poly Re ?r) +
      smult \<i> (map_poly complex_of_real (map_poly Im ?r))",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_var 0))),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_app
              (template_app (template_hole 4, template_hole 0),
               template_var 0)))))),
    ("RRI_Misc.degree_div",
     "?q dvd ?p ==> degree (?p div ?q) = degree ?p - degree ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_hole 2, template_var 0)),
           template_app (template_hole 2, template_var 1))))),
    ("RRI_Misc.reciprocal_0_iff",
     "degree ?P <= ?p ==> (reciprocal_poly ?p ?P = 0) = (?P = 0)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 4, template_var 1),
          template_var 0)],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1),
           template_hole 0),
         template_equation (template_var 1, template_hole 0)))),
    ("RRI_Misc.proots_count_pos",
     "0 < proots_count ?P ?S ==> EX x:?S. poly ?P x = (0::?'a)",
     template_implication
      ([template_inequation
         (less_than, template_hole 5,
          template_app
           (template_app (template_hole 4, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0), t_empty)
           ))),
    ("RRI_Misc.monom_independent",
     "poly_vs.independent {monom (1::?'a) x |x. x <= ?p}",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app (template_hole 6, t_empty))
             )
         )),
    ("RRI_Misc.changes_scale_Cons",
     "0 < ?s ==> changes (?s * ?x # ?xs) = changes (?x # ?xs)",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 2)],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("RRI_Misc.reciprocal_monom",
     "?n <= ?p ==> reciprocal_poly ?p (monom ?a ?n) = monom ?a (?p - ?n)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("RRI_Misc.reciprocal_smult",
     "degree ?P <= ?p ==>
      reciprocal_poly ?p (smult ?n ?P) = smult ?n (reciprocal_poly ?p ?P)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2))))),
    ("RRI_Misc.square_bounded_less",
     "- ?a < ?b & ?b < ?a ==> ?b * ?b < ?a * ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)),
                  template_var 0)),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 1)))),
    ("RRI_Misc.square_bounded_le",
     "- ?a <= ?b & ?b <= ?a ==> ?b * ?b <= ?a * ?a",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 1)),
                  template_var 0)),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_var 1))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 1)))),
    ("RRI_Misc.poly_binomial",
     "[:1::?'a, 1::?'a:] ^ ?n =
      (SUM k<=?n. monom (of_nat (?n choose k)) k)",
     template_equation
      (template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5))),
         template_var 0),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("RRI_Misc.coeff_reciprocal_less",
     "[| ?p < ?i; degree ?P <= ?p |]
      ==> coeff (reciprocal_poly ?p ?P) ?i = (0::?'a)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_var 1),
         template_hole 0))),
    ("RRI_Misc.map_poly_dvd",
     "[| map_poly complex_of_real ?p dvd map_poly complex_of_real ?q;
         ?q ~= 0 |]
      ==> ?p dvd ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_hole 4),
                  template_var 1)),
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            ),
        template_negation
         (template_equation (template_var 0, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("RRI_Misc.complex_poly_cong",
     "(map_poly Re ?p = map_poly Re ?q & map_poly Im ?p = map_poly Im ?q) =
      (?p = ?q)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_hole 2),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 1),
                   template_var 1)),
               template_app
                (template_app (template_hole 3, template_hole 1),
                 template_var 0)))
           ),
       template_equation (template_var 1, template_var 0))),
    ("RRI_Misc.reciprocal_reflect_poly",
     "degree ?P <= ?p ==>
      reciprocal_poly ?p ?P =
      monom (1::?'a) (?p - degree ?P) * reflect_poly ?P",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app (template_hole 7, template_var 1)))),
           template_app (template_hole 0, template_var 1))))),
    ("RRI_Misc.monom_span",
     "poly_vs.span {monom (1::?'a) x |x. x <= ?p} = {x. degree x <= ?p}",
     template_equation
      (template_app
        (template_app (template_hole 9, template_hole 8),
         template_app (template_hole 7, t_empty)),
       template_app (template_hole 7, t_empty))),
    ("RRI_Misc.coeff_reciprocal",
     "[| ?i <= ?p; degree ?P <= ?p |]
      ==> coeff (reciprocal_poly ?p ?P) ?i = coeff ?P (?p - ?i)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 4, template_var 0),
          template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2))))),
    ("RRI_Misc.Setcompr_subset",
     "({?f x |x. ?P x} <= ?S) = (ALL x. ?P x --> ?f x : ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, t_empty)),
         template_var 0),
       template_app (template_hole 2, t_empty))),
    ("RRI_Misc.lead_coeff_div",
     "?q dvd ?p ==> lead_coeff (?p div ?q) = lead_coeff ?p / lead_coeff ?q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app (template_hole 1, template_var 1)))))),
    ("RRI_Misc.map_poly_reciprocal",
     "[| degree ?P <= ?p; ?f (0::?'a) = (0::?'b) |]
      ==> map_poly ?f (reciprocal_poly ?p ?P) =
          reciprocal_poly ?p (map_poly ?f ?P)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_var 1),
        template_equation
         (template_app (template_var 0, template_hole 5), template_hole 4)],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2))))),
    ("RRI_Misc.proots_count_of_root",
     "[| ?P ~= 0; ?x : ?S; poly ?P ?x = (0::?'a) |]
      ==> 0 < proots_count ?P ?S",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_hole 3)],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("RRI_Misc.reciprocal_sum",
     "(!!k. degree (?P k) <= ?p) ==>
      reciprocal_poly ?p (sum ?P ?A) =
      (SUM k:?A. reciprocal_poly ?p (?P k))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, t_empty), template_var 0)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 0)))),
    ("RRI_Misc.mult_map_poly_imp_map_poly",
     "[| map_poly complex_of_real ?q = ?r * map_poly complex_of_real ?p;
         ?p ~= 0 |]
      ==> ?r = map_poly complex_of_real (map_poly Re ?r)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_hole 6),
            template_var 2),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 0))),
        template_negation
         (template_equation (template_var 0, template_hole 2))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 7, template_hole 6),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 1))))),
    ("RRI_Misc.reciprocal_fcompose",
     "degree ?P <= ?p ==>
      reciprocal_poly ?p ?P =
      monom (1::?'a) (?p - degree ?P) * fcompose ?P 1 [:0::?'a, 1::?'a:]",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 11, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 9, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_app (template_hole 11, template_var 1)))),
           template_app
            (template_app
              (template_app (template_hole 4, template_var 1),
               template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 2, template_hole 6),
                 template_hole 0))))))),
    ("RRI_Misc.reciprocal_diff",
     "[| degree ?P <= ?p; degree ?Q <= ?p |]
      ==> reciprocal_poly ?p (?P - ?Q) =
          reciprocal_poly ?p ?P - reciprocal_poly ?p ?Q",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 0),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("RRI_Misc.reciprocal_add",
     "[| degree ?P <= ?p; degree ?Q <= ?p |]
      ==> reciprocal_poly ?p (?P + ?Q) =
          reciprocal_poly ?p ?P + reciprocal_poly ?p ?Q",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 3, template_var 2),
          template_var 1),
        template_inequation
         (less_equals, template_app (template_hole 3, template_var 0),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))))),
    ("RRI_Misc.div_poly_eq_0",
     "[| ?q dvd ?p; poly (?p div ?q) ?x = (0::?'a); ?q ~= 0 |]
      ==> poly ?p ?x = (0::?'a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 1),
                template_var 2)),
            template_var 0),
          template_hole 3),
        template_negation
         (template_equation (template_var 2, template_hole 0))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_hole 3))),
    ("RRI_Misc.poly_reciprocal",
     "[| degree ?P <= ?p; ?x ~= (0::?'a) |]
      ==> poly (reciprocal_poly ?p ?P) ?x = ?x ^ ?p * poly ?P (inverse ?x)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 2),
          template_var 1),
        template_negation
         (template_equation (template_var 0, template_hole 5))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app (template_hole 0, template_var 0)))))),
    ("RRI_Misc.map_cong'",
     "[| ?xs = map ?h ?ys; !!y. y : set ?ys ==> ?f (?h y) = ?g y |]
      ==> map ?f ?xs = map ?g ?ys",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app (template_hole 7, template_var 3),
            template_var 2)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 4),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("RRI_Misc.proots_count_of_root_set",
     "[| ?P ~= 0; ?R <= ?S; !!x. x : ?R ==> poly ?P x = (0::?'a) |]
      ==> card ?R <= proots_count ?P ?S",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 9)),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("RRI_Misc.proots_count_reciprocal",
     "[| degree ?P <= ?p; ?P ~= 0; (0::?'a) ~: ?A |]
      ==> proots_count (reciprocal_poly ?p ?P) ?A =
          proots_count ?P {x. inverse x : ?A}",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 10, template_var 2),
          template_var 1),
        template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_var 2)),
           template_var 0),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 1, t_empty))))),
    ("RRI_Misc.changes_add_between",
     "[| ?a <= ?x; ?x <= ?b |]
      ==> changes (?as @ [?a, ?b] @ ?bs) =
          changes (?as @ [?a, ?x, ?b] @ ?bs)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 3, template_var 2)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_hole 0))),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_hole 0)))),
               template_var 0)))))),
    ("RRI_Misc.proots_count_reciprocal'",
     "[| degree ?P <= ?p; ?P ~= 0 |]
      ==> proots_count ?P {x. 0 < x & x < 1} =
          proots_count (reciprocal_poly ?p ?P) {x. 1 < x}",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 11, template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 8))],
       template_equation
        (template_app
          (template_app (template_hole 6, template_var 1),
           template_app (template_hole 5, t_empty)),
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_app (template_hole 5, t_empty))))),
    ("RRI_Misc.changes_scale",
     "[| !!i. i < ?n ==> (0::?'a) < ?s i; length ?xs <= ?n |]
      ==> changes (map (%i. ?s i * nth_default (0::?'a) ?xs i) [0..<?n]) =
          changes ?xs",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_inequation
         (less_equals, template_app (template_hole 7, template_var 0),
          template_var 2)],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, t_empty),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 2))),
         template_app (template_hole 5, template_var 0)))),
    ("RRI_Misc.reciprocal_mult",
     "[| degree (?P * ?Q) <= ?p; degree ?P <= ?p; degree ?Q <= ?p |]
      ==> monom (1::?'a) ?p * reciprocal_poly ?p (?P * ?Q) =
          reciprocal_poly ?p ?P * reciprocal_poly ?p ?Q",
     template_implication
      ([template_inequation
         (less_equals,
          template_app
           (template_hole 5,
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)),
          template_var 0),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 2),
          template_var 0),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("RRI_Misc.changes_snoc",
     "changes (?xs @ [?b, ?a]) =
      (if ?a * ?b < (0::?'a) then 1 + changes (?xs @ [?b])
       else if ?b = (0::?'a) then changes (?xs @ [?a])
            else changes (?xs @ [?b]))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_var 2),
                template_app
                 (template_app (template_hole 8, template_var 1),
                  template_app
                   (template_app (template_hole 8, template_var 0),
                    template_hole 7))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 0),
                       template_var 1)),
                   template_hole 3)),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 2),
                     template_app
                      (template_app (template_hole 8, template_var 1),
                       template_hole 7))))),
             template_app
              (template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_hole 3)),
                 template_app
                  (template_hole 10,
                   template_app
                    (template_app (template_hole 9, template_var 2),
                     template_app
                      (template_app (template_hole 8, template_var 0),
                       template_hole 7)))),
               template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 2),
                   template_app
                    (template_app (template_hole 8, template_var 1),
                     template_hole 7)))))
           ))),
    ("RRI_Misc.changes_increasing",
     "[| !!i. i < length ?xs - 1 ==> ?xs ! i <= ?xs ! (i + 1);
         1 < length ?xs; hd ?xs < (0::?'a); (0::?'a) < last ?xs |]
      ==> changes ?xs = 1",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_inequation
         (less_than, template_hole 10,
          template_app (template_hole 11, template_var 0)),
        template_inequation
         (less_than, template_app (template_hole 5, template_var 0),
          template_hole 4),
        template_inequation
         (less_than, template_hole 4,
          template_app (template_hole 3, template_var 0))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("RRI_Misc.real_poly_roots_induct",
     "[| !!p x. ?P p ==> ?P (p * [:- x, 1:]);
         !!p a b.
            [| b ~= 0; ?P p |] ==> ?P (p * [:a * a + b * b, - 2 * a, 1:]);
         !!a. ?P [:a:] |]
      ==> ?P ?p",
     template_implication
      ([template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (template_app (template_var 1, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.RRI_MiscMoreTemplates"
### 0.682s elapsed time, 1.004s cpu time, 0.185s GC time
val it = (): unit
