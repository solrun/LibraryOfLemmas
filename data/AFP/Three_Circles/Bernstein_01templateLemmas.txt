   [("Bernstein_01.degree_Bernstein_le",
     "degree (Bernstein_Poly_01 ?j ?p) <= ?p",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_var 0)),
    ("Bernstein_01.length_Bernstein_coeffs_01",
     "length (Bernstein_coeffs_01 ?p ?P) = ?p + 1",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_hole 0))),
    ("Bernstein_01.Bernstein_coeffs_01_1",
     "Bernstein_coeffs_01 ?p 1 = replicate (?p + 1) 1",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("Bernstein_01.Bernstein_coeffs_01_0",
     "Bernstein_coeffs_01 ?p 0 = replicate (?p + 1) 0",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 0), template_hole 4),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1)),
         template_hole 0))),
    ("Bernstein_01.coeff_gt", "?p < ?j ==> Bernstein_Poly_01 ?j ?p = 0",
     template_implication
      ([template_inequation (less_than, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("Bernstein_01.degree_Bernstein",
     "?j <= ?p ==> degree (Bernstein_Poly_01 ?j ?p) = ?p",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0))),
    ("Bernstein_01.poly_Bernstein_nonneg",
     "[| 0 <= ?x; ?x <= 1 |] ==> 0 <= poly (Bernstein_Poly_01 ?j ?p) ?x",
     template_implication
      ([template_inequation (less_equals, template_hole 3, template_var 2),
        template_inequation (less_equals, template_var 2, template_hole 2)],
       template_inequation
        (less_equals, template_hole 3,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2)))),
    ("Bernstein_01.Bernstein_reciprocal_translate",
     "reciprocal_poly ?p (Bernstein_Poly_01 ?i ?p) \<circ>\<^sub>p
      [:1, 1:] =
      monom (real (?p choose ?i)) (?p - ?i)",
     template_equation
      (template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_app
              (template_app (template_hole 7, template_var 0),
               template_var 1))),
         template_app
          (template_app (template_hole 6, template_hole 5),
           template_app
            (template_app (template_hole 6, template_hole 5),
             template_hole 4))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Bernstein_01.Bernstein_reciprocal",
     "reciprocal_poly ?p (Bernstein_Poly_01 ?i ?p) =
      smult (real (?p choose ?i)) ([:- 1, 1:] ^ (?p - ?i))",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1),
         template_app
          (template_app (template_hole 9, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 1),
               template_var 0))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2)),
               template_app
                (template_app (template_hole 4, template_hole 2),
                 template_hole 1))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Bernstein_01.Bernstein_symmetry",
     "?j <= ?p ==>
      Bernstein_Poly_01 ?j ?p \<circ>\<^sub>p [:1, - 1:] =
      Bernstein_Poly_01 (?p - ?j) ?p",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app
                (template_hole 4,
                 template_app (template_hole 2, template_hole 3)),
               template_hole 1))),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)),
           template_var 0)))),
    ("Bernstein_01.Bernstein_changes_01_eq_changes",
     "degree ?P <= ?p ==>
      Bernstein_changes_01 ?p ?P =
      changes (coeffs (reciprocal_poly ?p ?P \<circ>\<^sub>p [:1, 1:]))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 7, template_var 0), template_var 1),
         template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 1)),
               template_app
                (template_app (template_hole 2, template_hole 1),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 0)))))))),
    ("Bernstein_01.Bernstein_Poly_01_span",
     "poly_vs.span {Bernstein_Poly_01 x ?p |x. x <= ?p} =
      {x. degree x <= ?p}",
     template_equation
      (template_app
        (template_app (template_hole 8, template_hole 7),
         template_app (template_hole 6, t_empty)),
       template_app (template_hole 6, t_empty))),
    ("Bernstein_01.Bernstein_coeffs_01_smult",
     "degree ?P <= ?p ==>
      nth_default 0 (Bernstein_coeffs_01 ?p (smult ?a ?P)) ?i =
      ?a * nth_default 0 (Bernstein_coeffs_01 ?p ?P) ?i",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3))),
           template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 3)),
             template_var 0))))),
    ("Bernstein_01.Bernstein_coeffs_01_sum",
     "degree ?P <= ?p ==>
      ?P =
      (SUM j = 0..?p.
       smult (nth_default 0 (Bernstein_coeffs_01 ?p ?P) j)
        (Bernstein_Poly_01 j ?p))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 9, template_var 1),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Bernstein_01.Bernstein_Poly_01_span1",
     "degree ?P <= ?p ==>
      ?P : poly_vs.span {Bernstein_Poly_01 x ?p |x. x <= ?p}",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 8, template_var 1),
          template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_app (template_hole 4, t_empty)))
           ))),
    ("Bernstein_01.Bernstein_coeffs_01_x",
     "?p ~= 0 ==>
      Bernstein_coeffs_01 ?p (monom 1 1) =
      map (%i. real i / real ?p) [0..<?p + 1]",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 10))],
       template_equation
        (template_app
          (template_app (template_hole 8, template_var 0),
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_hole 5)),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 10),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_hole 5)))))),
    ("Bernstein_01.Bernstein_coeffs_01_add",
     "[| degree ?P <= ?p; degree ?Q <= ?p |]
      ==> nth_default 0 (Bernstein_coeffs_01 ?p (?P + ?Q)) ?i =
          nth_default 0 (Bernstein_coeffs_01 ?p ?P) ?i +
          nth_default 0 (Bernstein_coeffs_01 ?p ?Q) ?i",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 6, template_var 3),
          template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 6, template_var 1),
          template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_var 2),
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1))),
           template_var 0),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 2),
                   template_var 3)),
               template_var 0)),
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 1)),
             template_var 0))))),
    ("Bernstein_01.coeff_Bernstein_sum_01",
     "?i <= ?p ==>
      coeff
       (reciprocal_poly ?p
         (SUM x = 0..?p.
          smult (?b x) (Bernstein_Poly_01 x ?p)) \<circ>\<^sub>p
        [:1, 1:])
       (?p - ?i) =
      real (?p choose ?i) * ?b ?i",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_app
                (template_hole 13,
                 template_app
                  (template_app (template_hole 12, template_var 1),
                   template_app
                    (template_app (template_hole 11, t_empty),
                     template_app
                      (template_app (template_hole 8, template_hole 7),
                       template_var 1)))),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_hole 4)))),
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 2)),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))),
           template_app (template_var 0, template_var 2))))),
    ("Bernstein_01.Bernstein_sum_01",
     "degree ?P <= ?p ==>
      ?P =
      (SUM j = 0..?p.
       smult
        (inverse (real (?p choose j)) *
         coeff (reciprocal_poly ?p ?P \<circ>\<^sub>p [:1, 1:]) (?p - j))
        (Bernstein_Poly_01 j ?p))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 17, template_var 1),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 15, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Bernstein_01.Bernstein_changes_01_test",
     "[| degree ?P <= ?p; ?P ~= 0 |]
      ==> int (proots_count ?P {x. 0 < x & x < 1})
          <= Bernstein_changes_01 ?p ?P &
          even
           (Bernstein_changes_01 ?p ?P -
            int (proots_count ?P {x. 0 < x & x < 1}))",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 17, template_var 1),
          template_var 0),
        template_negation
         (template_equation (template_var 1, template_hole 14))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_app
                  (template_hole 12,
                   template_app
                    (template_hole 11,
                     template_app
                      (template_app (template_hole 10, template_var 1),
                       template_app (template_hole 9, t_empty)))),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 1))),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_hole 1))),
               template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 5, template_var 0),
                     template_var 1)),
                 template_app
                  (template_hole 11,
                   template_app
                    (template_app (template_hole 10, template_var 1),
                     template_app (template_hole 9, t_empty))))))
           )))]
