Loading theory "HOL-Library.Cancellation" (required by "Draft.ModalSequentsMoreTemplates" via "Draft.ModalSequents" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ModalSequentsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ModalSequentsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ModalSequentsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.140s elapsed time, 0.582s cpu time, 0.052s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ModalSequentsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.864s cpu time, 0.052s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ModalSequentsMoreTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.334s elapsed time, 1.338s cpu time, 0.139s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ModalSequentsMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.435s elapsed time, 1.753s cpu time, 0.139s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.ModalSequentsMoreTemplates" via "Draft.ModalSequents")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.999s elapsed time, 3.765s cpu time, 0.901s GC time
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.081s elapsed time, 3.916s cpu time, 0.855s GC time
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.008s elapsed time, 6.267s cpu time, 1.194s GC time
Loading theory "Draft.Templates" (required by "Draft.ModalSequentsMoreTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.109s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ModalSequentsMoreTemplates")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.545s elapsed time, 1.133s cpu time, 0.108s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.077s elapsed time, 7.106s cpu time, 1.340s GC time
Loading theory "Draft.ModalSequents" (required by "Draft.ModalSequentsMoreTemplates")
consts
  antec :: "('a, 'b) sequent => ('a, 'b) form multiset"
consts
  succ :: "('a, 'b) sequent => ('a, 'b) form multiset"
consts
  mset :: "('a, 'b) sequent => ('a, 'b) form multiset"
consts
  seq_size :: "('a, 'b) sequent => nat"
overloading
  extend \<equiv> extend ::
    ('a, 'b) sequent => ('a, 'b) sequent => ('a, 'b) sequent
  extendRule \<equiv> extendRule ::
    ('a, 'b) sequent
    => ('a, 'b) sequent list * ('a, 'b) sequent
       => ('a, 'b) sequent list * ('a, 'b) sequent
  extendRule2 \<equiv> extendRule2 ::
    ('a, 'b) sequent
    => ('a, 'b) sequent
       => ('a, 'b) sequent list * ('a, 'b) sequent
          => ('a, 'b) sequent list * ('a, 'b) sequent
overloading
  uniqueConclusion \<equiv> uniqueConclusion ::
    (('a, 'b) sequent list * ('a, 'b) sequent) set => bool
  modaliseMultiset \<equiv> modaliseMultiset ::
    'a => ('b, 'a) form multiset => ('b, 'a) form multiset
Proofs for inductive predicate(s) "Axp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "upRulesp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "modRules2p"
  Proving monotonicity ...
Proofs for inductive predicate(s) "p_ep"
  Proving monotonicity ...
overloading
  extendConc \<equiv> extendConc ::
    ('a, 'b) sequent
    => ('a, 'b) sequent list * ('a, 'b) sequent
       => ('a, 'b) sequent list * ('a, 'b) sequent
Proofs for inductive predicate(s) "extp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "leftPrincipal"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rightPrincipal"
  Proving monotonicity ...
Proofs for inductive predicate(s) "derivablep"
  Proving monotonicity ...
### Ambiguous input (line 2263 of "$AFP/SequentInvertibility/ModalSequents.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>BOX_form"
###     ("_constrain" ("_position" p) ("_type_name" CDBD_form)))
###   ("_applC" ("_position" Modal)
###     ("_cargs" ("\<^const>ModalSequents.BD.BOX") ("_list" ("_position" p)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("\<^const>ModalSequents.BD.BOX")
###     ("_constrain" ("_position" p) ("_type_name" CDBD_form)))
###   ("_applC" ("_position" Modal)
###     ("_cargs" ("\<^const>ModalSequents.BD.BOX") ("_list" ("_position" p)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2266 of "$AFP/SequentInvertibility/ModalSequents.thy") produces 2 parse trees:
### ("\<^const>Pure.eq"
###   ("\<^fixed>DIAMOND_form"
###     ("_constrain" ("_position" p) ("_type_name" CDBD_form)))
###   ("_applC" ("_position" Modal)
###     ("_cargs" ("\<^const>ModalSequents.BD.DIAMOND")
###       ("_list" ("_position" p)))))
### ("\<^const>Pure.eq"
###   ("_applC" ("\<^const>ModalSequents.BD.DIAMOND")
###     ("_constrain" ("_position" p) ("_type_name" CDBD_form)))
###   ("_applC" ("_position" Modal)
###     ("_cargs" ("\<^const>ModalSequents.BD.DIAMOND")
###       ("_list" ("_position" p)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "g3upp"
  Proving monotonicity ...
### Ambiguous input (line 2296 of "$AFP/SequentInvertibility/ModalSequents.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_list"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_empty")
###           ("\<^const>ModalSequents.multiset_abbrev" ("_position" A))))
###       ("_tuple_arg"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_empty")
###           ("\<^const>ModalSequents.multiset_abbrev"
###             ("\<^const>ModalSequents.DIAMOND_form" ("_position" A))))))
###     ("_position" g3mod2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_list"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_empty")
###           ("\<^const>ModalSequents.multiset_abbrev" ("_position" A))))
###       ("_tuple_arg"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_empty")
###           ("\<^const>ModalSequents.multiset_abbrev"
###             ("_applC" ("\<^const>ModalSequents.BD.DIAMOND")
###               ("_position" A))))))
###     ("_position" g3mod2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2297 of "$AFP/SequentInvertibility/ModalSequents.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_list"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_abbrev" ("_position" A))
###           ("\<^const>ModalSequents.multiset_empty")))
###       ("_tuple_arg"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_abbrev"
###             ("\<^const>ModalSequents.BOX_form" ("_position" A)))
###           ("\<^const>ModalSequents.multiset_empty"))))
###     ("_position" g3mod2)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_list"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_abbrev" ("_position" A))
###           ("\<^const>ModalSequents.multiset_empty")))
###       ("_tuple_arg"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_abbrev"
###             ("_applC" ("\<^const>ModalSequents.BD.BOX") ("_position" A)))
###           ("\<^const>ModalSequents.multiset_empty"))))
###     ("_position" g3mod2)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "g3mod2p"
  Proving monotonicity ...
### Ambiguous input (line 2301 of "$AFP/SequentInvertibility/ModalSequents.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_list"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_empty")
###           ("\<^const>ModalSequents.multiset_abbrev" ("_position" A))))
###       ("_tuple_arg"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_empty")
###           ("\<^const>ModalSequents.multiset_abbrev"
###             ("\<^const>ModalSequents.BOX_form" ("_position" A))))))
###     ("_position" g3mod1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_list"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_empty")
###           ("\<^const>ModalSequents.multiset_abbrev" ("_position" A))))
###       ("_tuple_arg"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_empty")
###           ("\<^const>ModalSequents.multiset_abbrev"
###             ("_applC" ("\<^const>ModalSequents.BD.BOX") ("_position" A))))))
###     ("_position" g3mod1)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2302 of "$AFP/SequentInvertibility/ModalSequents.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_list"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_abbrev" ("_position" A))
###           ("\<^const>ModalSequents.multiset_empty")))
###       ("_tuple_arg"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_abbrev"
###             ("\<^const>ModalSequents.DIAMOND_form" ("_position" A)))
###           ("\<^const>ModalSequents.multiset_empty"))))
###     ("_position" g3mod1)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("_list"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_abbrev" ("_position" A))
###           ("\<^const>ModalSequents.multiset_empty")))
###       ("_tuple_arg"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_abbrev"
###             ("_applC" ("\<^const>ModalSequents.BD.DIAMOND")
###               ("_position" A)))
###           ("\<^const>ModalSequents.multiset_empty"))))
###     ("_position" g3mod1)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "g3mod1p"
  Proving monotonicity ...
### Ambiguous input (line 2346 of "$AFP/SequentInvertibility/ModalSequents.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" r) ("_position" Ax)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rightPrincipal)
###           ("_cargs" ("_position" r)
###             ("_cargs"
###               ("_applC" ("\<^const>ModalSequents.BD.BOX") ("_position" A))
###               ("_position" R)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("\<^const>ModalSequents.sequent.Sequent"
###         ("\<^const>ModalSequents.multiset_empty")
###         ("\<^const>ModalSequents.multiset_abbrev" ("_position" A)))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" fst) ("_position" r))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" r) ("_position" Ax)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rightPrincipal)
###           ("_cargs" ("_position" r)
###             ("_cargs" ("\<^const>ModalSequents.BOX_form" ("_position" A))
###               ("_position" R)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("\<^const>ModalSequents.sequent.Sequent"
###         ("\<^const>ModalSequents.multiset_empty")
###         ("\<^const>ModalSequents.multiset_abbrev" ("_position" A)))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" fst) ("_position" r))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2350 of "$AFP/SequentInvertibility/ModalSequents.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" r) ("_position" g3up)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rightPrincipal)
###           ("_cargs" ("_position" r)
###             ("_cargs"
###               ("_applC" ("\<^const>ModalSequents.BD.BOX") ("_position" A))
###               ("_position" R)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("\<^const>ModalSequents.sequent.Sequent"
###         ("\<^const>ModalSequents.multiset_empty")
###         ("\<^const>ModalSequents.multiset_abbrev" ("_position" A)))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" fst) ("_position" r))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" r) ("_position" g3up)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" rightPrincipal)
###           ("_cargs" ("_position" r)
###             ("_cargs" ("\<^const>ModalSequents.BOX_form" ("_position" A))
###               ("_position" R)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("\<^const>ModalSequents.sequent.Sequent"
###         ("\<^const>ModalSequents.multiset_empty")
###         ("\<^const>ModalSequents.multiset_abbrev" ("_position" A)))
###       ("_applC" ("_position" set)
###         ("_applC" ("_position" fst) ("_position" r))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2358 of "$AFP/SequentInvertibility/ModalSequents.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" rightPrincipal)
###     ("_cargs" ("_position" r)
###       ("_cargs" ("\<^const>ModalSequents.BOX_form" ("_position" A))
###         ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" rightPrincipal)
###     ("_cargs" ("_position" r)
###       ("_cargs" ("_applC" ("\<^const>ModalSequents.BD.BOX") ("_position" A))
###         ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2375 of "$AFP/SequentInvertibility/ModalSequents.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" rightPrincipal)
###     ("_cargs" ("_position" r)
###       ("_cargs" ("\<^const>ModalSequents.BOX_form" ("_position" A))
###         ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" rightPrincipal)
###     ("_cargs" ("_position" r)
###       ("_cargs" ("_applC" ("\<^const>ModalSequents.BD.BOX") ("_position" A))
###         ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2402 of "$AFP/SequentInvertibility/ModalSequents.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" r) ("_position" R')
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" rightPrincipal)
###         ("_cargs" ("_position" r)
###           ("_cargs" ("\<^const>ModalSequents.BOX_form" ("_position" A))
###             ("_position" R'))))
###       ("\<^const>Set.member"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_empty")
###           ("\<^const>ModalSequents.multiset_abbrev" ("_position" A)))
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" fst) ("_position" r)))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ball" ("_position" r) ("_position" R')
###     ("\<^const>HOL.implies"
###       ("_applC" ("_position" rightPrincipal)
###         ("_cargs" ("_position" r)
###           ("_cargs"
###             ("_applC" ("\<^const>ModalSequents.BD.BOX") ("_position" A))
###             ("_position" R'))))
###       ("\<^const>Set.member"
###         ("\<^const>ModalSequents.sequent.Sequent"
###           ("\<^const>ModalSequents.multiset_empty")
###           ("\<^const>ModalSequents.multiset_abbrev" ("_position" A)))
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" fst) ("_position" r)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 2419 of "$AFP/SequentInvertibility/ModalSequents.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>ModalSequents.sequent.Sequent" ("_position" \<Gamma>)
###         ("\<^const>ModalSequents.multiset_plus" ("_position" \<Delta>)
###           ("\<^const>ModalSequents.BOX_form" ("_position" A))))
###       ("_tuple_arg" ("_position" n)))
###     ("_applC" ("_position" derivable)
###       ("_applC" ("_position" ext)
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" g3mod1)
###             ("_cargs" ("\<^const>ModalSequents.BD.BOX")
###               ("\<^const>ModalSequents.BD.DIAMOND"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>ModalSequents.sequent.Sequent" ("_position" \<Gamma>)
###         ("\<^const>ModalSequents.multiset_plus" ("_position" \<Delta>)
###           ("_applC" ("\<^const>ModalSequents.BD.BOX") ("_position" A))))
###       ("_tuple_arg" ("_position" n)))
###     ("_applC" ("_position" derivable)
###       ("_applC" ("_position" ext)
###         ("_cargs" ("_position" R)
###           ("_cargs" ("_position" g3mod1)
###             ("_cargs" ("\<^const>ModalSequents.BD.BOX")
###               ("\<^const>ModalSequents.BD.DIAMOND"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ModalSequents"
### 3.841s elapsed time, 5.528s cpu time, 2.311s GC time
Loading theory "Draft.ModalSequentsMoreTemplates"
val templateLemmas =
   [("ModalSequents.modaliseEmpty", "?a \<cdot> (\<Empt>) = \<Empt>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("ModalSequents.extendRuleEmpty",
     "extendRule ( \<Empt> \<Rightarrow>* \<Empt>) ?r = ?r",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("ModalSequents.extendEmpty",
     "extend ( \<Empt> \<Rightarrow>* \<Empt>) ?C = ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("ModalSequents.modal_neq", "?ps ~= [Modal ?M ?ps]",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_hole 0))
         )),
    ("ModalSequents.modal_neq", "?A ~= Modal ?M [?A]",
     template_negation
      (
         template_equation
          (template_var 1,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)))
         )),
    ("ModalSequents.disjoint_Ax_mod1", "Ax Int p_e modRules2 ?M ?N = {}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("ModalSequents.disjoint_up_mod1",
     "upRules Int p_e modRules2 ?M ?N = {}",
     template_equation
      (template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_var 1),
           template_var 0)),
       template_hole 0)),
    ("ModalSequents.mapExtendEmpty",
     "map (extend ( \<Empt> \<Rightarrow>* \<Empt>)) ?ps = ?ps",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_hole 0))),
         template_var 0),
       template_var 0)),
    ("ModalSequents.extend1_to_2",
     "extendRule2 ?S ?S ?r = extendRule ?S ?r",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 1),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("ModalSequents.characteriseSeq", "EX A B. ?C = ( A \<Rightarrow>* B)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("ModalSequents.compound_not_in_modal_multi",
     "Compound ?M ?Ms ~:# ?N \<cdot> ?\<Gamma>",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0)))
             )
         )),
    ("ModalSequents.mset_extend",
     "ModalSequents.mset (extend ?S ?c) =
      ModalSequents.mset ?S + ModalSequents.mset ?c",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("ModalSequents.upRule_Size", "?r : upRules ==> seq_size (snd ?r) = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("ModalSequents.extendCommute",
     "extend ?S (extend ?R ?c) = extend ?R (extend ?S ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("ModalSequents.extendAssoc",
     "extend ?S (extend ?R ?c) = extend (extend ?S ?R) ?c",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("ModalSequents.nonEmptySet", "?A ~= [] --> (EX a. a : set ?A)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3))),
           template_app (template_hole 2, t_empty))
         )),
    ("ModalSequents.modRules2_not_left_principal_for_compound",
     "?r : modRules2 ==> ~ leftPrincipal ?r (Compound ?M ?Ms) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_hole 3)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 0)
               )
           ))),
    ("ModalSequents.modRules2_not_right_principal_for_compound",
     "?r : modRules2 ==> ~ rightPrincipal ?r (Compound ?M ?Ms) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_hole 3)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 0)
               )
           ))),
    ("ModalSequents.upRules_not_left_principal_for_modal",
     "?r : upRules ==> ~ leftPrincipal ?r (Modal ?M ?Ms) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_hole 3)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 0)
               )
           ))),
    ("ModalSequents.upRules_not_right_principal_for_modal",
     "?r : upRules ==> ~ rightPrincipal ?r (Modal ?M ?Ms) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_hole 3)
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 0)
               )
           ))),
    ("ModalSequents.nonEmpty_contain",
     "?\<Gamma> ~= \<Empt> ==> EX a. a :# ?\<Gamma>",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("ModalSequents.nonEmpty_neq",
     "?\<Gamma> ~= \<Empt> ==> ?\<Gamma> + ?C ~= ?C",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 0)
           ))),
    ("ModalSequents.nonEmpty_image",
     "?\<Gamma> ~= \<Empt> ==> ?f \<cdot>\<cdot> ?\<Gamma> ~= \<Empt>",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_hole 1)
           ))),
    ("ModalSequents.modaliseNonEmpty",
     "?\<Gamma> ~= \<Empt> ==> ?a \<cdot> ?\<Gamma> ~= \<Empt>",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1),
             template_hole 1)
           ))),
    ("ModalSequents.extendRuleEmptyRev",
     "extendRule ?S ?r = ?r ==> ?S = ( \<Empt> \<Rightarrow>* \<Empt>)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_var 0)],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_hole 0)))),
    ("ModalSequents.p_e_non_empty", "?r : p_e ?R ?M ?N ==> fst ?r ~= []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_app
               (template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_negation
        (
           template_equation
            (template_app (template_hole 1, template_var 3),
             template_hole 0)
           ))),
    ("ModalSequents.derivablep_derivable_eq",
     "derivablep (%x. x : ?R) = (%x xa. (x, xa) : derivable ?R)",
     template_equation (template_app (template_hole 4, t_empty), t_empty)),
    ("ModalSequents.mapAssoc",
     "map (extend ?S) (map (extend ?R) ?c) =
      map (extend (extend ?S ?R)) ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0))),
    ("ModalSequents.singleton_add_means_equal",
     "\<LM> ?A  \<RM> = ?\<Gamma> \<oplus> ?B ==> ?A = ?B",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 3, template_var 2),
            template_hole 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app
             (template_app (template_hole 3, template_var 0),
              template_hole 2)))],
       template_equation (template_var 2, template_var 0))),
    ("ModalSequents.singleton_add_means_empty",
     "\<LM> ?A  \<RM> = ?\<Gamma> \<oplus> ?B ==> ?\<Gamma> = \<Empt>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_hole 1),
          template_app
           (template_app (template_hole 0, template_var 1),
            template_app
             (template_app (template_hole 2, template_var 0),
              template_hole 1)))],
       template_equation (template_var 1, template_hole 1))),
    ("ModalSequents.two_neq_one_aux",
     "(\<LM> ?A  \<RM>) \<oplus> ?B = \<LM> ?C  \<RM> ==> False",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_var 2),
                template_hole 1)),
            template_app
             (template_app (template_hole 2, template_var 1),
              template_hole 1)),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1))],
       template_predicate (template_hole 0))),
    ("ModalSequents.mapCommute",
     "map (extend ?S) (map (extend ?R) ?c) =
      map (extend ?R) (map (extend ?S) ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("ModalSequents.modal_not_contain",
     "?M ~= ?N ==> Modal ?M ?A ~:# ?N \<cdot> ?\<Gamma>",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 1)),
                 template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 0)))
               )
           ))),
    ("ModalSequents.single_plus_obtain",
     "?A :# ?\<Gamma> ==> EX \<Delta>. ?\<Gamma> = \<Delta> \<oplus> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_app (template_hole 5, template_var 0))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("ModalSequents.disjoint_Aux",
     "ModalSequents.mset ?c = \<LM> ?A  \<RM> ==>
      ?A :# ModalSequents.mset (extend ?S ?c)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 2),
          template_app
           (template_app (template_hole 4, template_var 1),
            template_hole 3))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))))
           ))),
    ("ModalSequents.modRules_not_right_principal_for_compound",
     "?r : p_e modRules2 ?S ?T ==>
      ~ rightPrincipal ?r (Compound ?M ?Ms) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 4),
                template_var 3))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 0)
               )
           ))),
    ("ModalSequents.modRules_not_left_principal_for_compound",
     "?r : p_e modRules2 ?T ?S ==> ~ leftPrincipal ?r (Compound ?M ?Ms) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app
               (template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_var 4),
                template_var 3))
            )],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 5),
                   template_app
                    (template_app (template_hole 0, template_var 2),
                     template_var 1)),
                 template_var 0)
               )
           ))),
    ("ModalSequents.nonPrincipalID",
     "?r : Ax ==> ~ rightPrincipal ?r ?A ?R & ~ leftPrincipal ?r ?A ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 1),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("ModalSequents.add_equal_means_equal",
     "?\<Gamma> \<oplus> ?A = ?\<Delta> \<oplus> ?A ==>
      ?\<Gamma> = ?\<Delta>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 2, template_var 2),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_app
             (template_app (template_hole 1, template_var 1),
              template_hole 0)))],
       template_equation (template_var 2, template_var 0))),
    ("ModalSequents.two_neq_one",
     "(\<LM> ?A  \<RM>) \<oplus> ?B + ?\<Gamma> = \<LM> ?C  \<RM> ==>
      False",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_hole 1)),
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_hole 1))),
            template_var 1),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_hole 1))],
       template_predicate (template_hole 0))),
    ("ModalSequents.modalise_characterise",
     "?A :# ?M \<cdot> ?\<Delta> ==> EX B. ?A = Modal ?M [B]",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)))
            )],
       template_predicate (template_app (template_hole 4, t_empty)))),
    ("ModalSequents.extendFalsum",
     "extend ?S ( \<LM> ff  \<RM> \<Rightarrow>* \<Empt>) =
      ( ?\<Gamma> \<Rightarrow>* ?\<Delta>) ==>
      ff :# ?\<Gamma>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_hole 2)),
              template_hole 2)),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 3),
             template_app (template_hole 0, template_var 1))
           ))),
    ("ModalSequents.p_ep_p_e_eq",
     "p_ep (%x xa. (x, xa) : ?R) ?M ?N = (%x. x : p_e ?R ?M ?N)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, t_empty), template_var 1),
         template_var 0),
       t_empty)),
    ("ModalSequents.extendRuleNonEmpty",
     "~ (?\<Gamma> = \<Empt> & ?\<Delta> = \<Empt>) ==>
      extendRule ( ?\<Gamma> \<Rightarrow>* ?\<Delta>) ?r ~= ?r",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_hole 3)),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_hole 3))
                )
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0),
             template_var 0)
           ))),
    ("ModalSequents.extendNonEmpty",
     "~ (?\<Gamma> = \<Empt> & ?\<Delta> = \<Empt>) ==>
      extend ( ?\<Gamma> \<Rightarrow>* ?\<Delta>) ?C ~= ?C",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 2),
                      template_hole 3)),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_hole 3))
                )
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0),
             template_var 0)
           ))),
    ("ModalSequents.Ax_subset_false_aux",
     "[| ?A <= ?B; ?A Int ?B = {}; ?A ~= {} |] ==> False",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 1), template_var 0),
          template_hole 2),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate (template_hole 0))),
    ("ModalSequents.antec_upRule",
     "(?Ps,  ?\<Phi> \<Rightarrow>* ?\<Psi>) : upRules ==>
      ?\<Phi> = \<Empt> | (EX A. ?\<Phi> = \<LM> A  \<RM>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app (template_hole 1, t_empty))
           ))),
    ("ModalSequents.succ_upRule",
     "(?Ps,  ?\<Phi> \<Rightarrow>* ?\<Psi>) : upRules ==>
      ?\<Psi> = \<Empt> | (EX A. ?\<Psi> = \<LM> A  \<RM>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app (template_hole 1, t_empty))
           ))),
    ("ModalSequents.mset_extend_size",
     "~ (?\<Gamma> = \<Empt> & ?\<Delta> = \<Empt>) ==>
      size (ModalSequents.mset ?c)
      < size
         (ModalSequents.mset
           (extend ( ?\<Gamma> \<Rightarrow>* ?\<Delta>) ?c))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_hole 5)),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_hole 5))
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0)))))),
    ("ModalSequents.extp_ext_eq",
     "extp (%x. x : ?R) (%x xa. (x, xa) : ?R') ?M ?N =
      (%x. x : ext ?R ?R' ?M ?N)",
     template_equation
      (template_app
        (template_app
          (template_app (template_app (template_hole 3, t_empty), t_empty),
           template_var 1),
         template_var 0),
       t_empty)),
    ("ModalSequents.containFalsum",
     "[| ff :# ?\<Gamma>; Ax <= ?R |]
      ==> ( ?\<Gamma> \<Rightarrow>* ?\<Delta>, 0)
          : derivable (ext ?R ?R' ?M ?N)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_app (template_hole 8, template_var 5))
            ),
        template_inequation (less_equals, template_hole 6, template_var 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 3)),
                 template_hole 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("ModalSequents.principal_Ax",
     "[| ?r : Ax; rightPrincipal ?r (\<box> ?A) ?R |]
      ==> ( \<Empt> \<Rightarrow>* \<LM> ?A  \<RM>) : set (fst ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_hole 6))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 3))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("ModalSequents.principal_g3up",
     "[| ?r : g3up; rightPrincipal ?r (\<box> ?A) ?R |]
      ==> ( \<Empt> \<Rightarrow>* \<LM> ?A  \<RM>) : set (fst ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_hole 11)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_var 1),
                    template_hole 6))),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 3))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("ModalSequents.single_multiset_eq_non_empty",
     "[| \<LM> ?A  \<RM> = ?\<Delta> + ?\<Delta>'; ?\<Delta> ~= \<Empt> |]
      ==> ?\<Delta>' = \<Empt> & ?\<Delta> = \<LM> ?A  \<RM>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2),
            template_hole 3),
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 0)),
        template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_hole 3)),
             template_app
              (template_app (template_hole 5, template_var 1),
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_hole 3)))
           ))),
    ("ModalSequents.disjoint_Aux2",
     "[| ModalSequents.mset ?c = \<LM> ?A  \<RM>; ?A ~= ?B;
         ModalSequents.mset (extend ?S ?c) = \<LM> ?B  \<RM> |]
      ==> False",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 3),
          template_app
           (template_app (template_hole 5, template_var 2),
            template_hole 4)),
        template_negation
         (template_equation (template_var 2, template_var 1)),
        template_equation
         (template_app
           (template_hole 6,
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 3)),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_hole 4))],
       template_predicate (template_hole 0))),
    ("ModalSequents.extendID",
     "extend ?S ( \<LM> At ?i  \<RM> \<Rightarrow>* \<LM> At ?i  \<RM>) =
      ( ?\<Gamma> \<Rightarrow>* ?\<Delta>) ==>
      At ?i :# ?\<Gamma> & At ?i :# ?\<Delta>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_hole 3)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2)),
                template_hole 3))),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 4, template_var 2)),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 2)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("ModalSequents.extendContain",
     "[| ?r = (?ps, ?c); (?Ps, ?C) = extendRule ?S ?r; ?p : set ?ps |]
      ==> extend ?S ?p : set ?Ps",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 4, template_var 5),
            template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 3))
           ))),
    ("ModalSequents.not_principal_aux2",
     "[| ModalSequents.mset ?c = \<LM> Modal ?T ?Ts  \<RM>;
         ?M \<cdot> ?\<Gamma> + antec ?c =
         ?N \<cdot> ?\<Delta> \<oplus> Compound ?F ?Fs |]
      ==> False",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 8),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 7),
                template_var 6)),
            template_hole 5)),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4)),
            template_app (template_hole 2, template_var 8)),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_hole 5)))],
       template_predicate (template_hole 0))),
    ("ModalSequents.not_principal_aux",
     "[| ModalSequents.mset ?c = \<LM> Modal ?T ?Ts  \<RM>;
         ?M \<cdot> ?\<Gamma> + succ ?c =
         ?N \<cdot> ?\<Delta> \<oplus> Compound ?F ?Fs |]
      ==> False",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 8),
          template_app
           (template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_var 7),
                template_var 6)),
            template_hole 5)),
        template_equation
         (template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4)),
            template_app (template_hole 2, template_var 8)),
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 2)),
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_hole 5)))],
       template_predicate (template_hole 0))),
    ("ModalSequents.non_contain",
     "[| ?\<Delta> ~= \<Empt>; ?\<Delta>' ~= \<Empt>; ?M ~= ?N |]
      ==> set_mset (?M \<cdot> ?\<Delta>) Int
          set_mset (?N \<cdot> ?\<Delta>') =
          {}",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 6)),
        template_negation
         (template_equation (template_var 2, template_hole 6)),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 2))),
         template_hole 0))),
    ("ModalSequents.characteriseAx",
     "?r : Ax ==>
      ?r = ([],  \<LM> ff  \<RM> \<Rightarrow>* \<Empt>) |
      (EX i. ?r =
             ([],  \<LM> At i  \<RM> \<Rightarrow>* \<LM> At i  \<RM>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_hole 10)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_hole 2)),
                     template_hole 2)))),
             template_app (template_hole 1, t_empty))
           ))),
    ("ModalSequents.upRuleCharacterise",
     "(?Ps, ?C) : upRules ==>
      EX F Fs.
         ?C = ( \<Empt> \<Rightarrow>* \<LM> Compound F Fs  \<RM>) |
         ?C = ( \<LM> Compound F Fs  \<RM> \<Rightarrow>* \<Empt>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)),
              template_hole 8)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("ModalSequents.containID",
     "[| At ?i :# ?\<Gamma> & At ?i :# ?\<Delta>; Ax <= ?R |]
      ==> ( ?\<Gamma> \<Rightarrow>* ?\<Delta>, 0)
          : derivable (ext ?R ?R' ?M ?N)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 6)),
                  template_app (template_hole 8, template_var 5))),
              template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 6)),
                template_app (template_hole 8, template_var 4)))
            ),
        template_inequation (less_equals, template_hole 6, template_var 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 5),
                     template_var 4)),
                 template_hole 2)),
             template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 2),
                   template_var 1),
                 template_var 0)))
           ))),
    ("ModalSequents.principal",
     "?R' = Ax Un g3up Un g3mod1 Un g3mod2 ==>
      ALL r:?R'.
         rightPrincipal r (\<box> ?A) ?R' -->
         ( \<Empt> \<Rightarrow>* \<LM> ?A  \<RM>) : set (fst r)",
     template_implication
      ([template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 17,
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app (template_hole 17, template_hole 16),
                    template_hole 15)),
                template_hole 14)),
            template_hole 13))],
       template_predicate
        (
           template_app
            (template_app (template_hole 12, template_var 1), t_empty)
           ))),
    ("ModalSequents.modRule2Characterise",
     "(?Ps, ?C) : modRules2 ==>
      ?Ps ~= [] &
      (EX F Fs.
          ?C = ( \<Empt> \<Rightarrow>* \<LM> Modal F Fs  \<RM>) |
          ?C = ( \<LM> Modal F Fs  \<RM> \<Rightarrow>* \<Empt>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_app (template_hole 13, template_var 1),
                  template_var 0)),
              template_hole 12)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_hole 10,
                 template_app
                  (template_app (template_hole 9, template_var 1),
                   template_hole 8))),
             template_app (template_hole 7, t_empty))
           ))),
    ("ModalSequents.principal_g3mod1",
     "[| ?r : g3mod1; ?R = Ax Un g3up Un g3mod1 Un g3mod2;
         rightPrincipal ?r (\<box> ?A) ?R |]
      ==> ( \<Empt> \<Rightarrow>* \<LM> ?A  \<RM>) : set (fst ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 2),
              template_hole 16)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 14, template_hole 13),
                    template_hole 12)),
                template_hole 16)),
            template_hole 11)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_var 0),
                    template_hole 6))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 3))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("ModalSequents.principal_g3mod2",
     "[| ?r : g3mod2; ?R = Ax Un g3up Un g3mod1 Un g3mod2;
         rightPrincipal ?r (\<box> ?A) ?R |]
      ==> ( \<Empt> \<Rightarrow>* \<LM> ?A  \<RM>) : set (fst ?r)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 17, template_var 2),
              template_hole 16)
            ),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 14,
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 14, template_hole 13),
                    template_hole 12)),
                template_hole 11)),
            template_hole 16)),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_app
                   (template_app (template_hole 7, template_var 0),
                    template_hole 6))),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 3))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2)))
           ))),
    ("ModalSequents.characteriseLast",
     "(?C, ?m + 1) : derivable ?R ==>
      EX Ps.
         Ps ~= [] &
         (Ps, ?C) : ?R & (ALL p:set Ps. EX n<=?m. (p, n) : derivable ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_hole 12))),
              template_app (template_hole 11, template_var 0))
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("ModalSequents.invertBoxR",
     "[| ?R = Ax Un g3up Un p_e g3mod1 \<box> \<diamond> Un g3mod2;
         ( ?\<Gamma> \<Rightarrow>* ?\<Delta> \<oplus> (\<box> ?A), ?n)
         : derivable (ext ?R g3mod1 \<box> \<diamond>) |]
      ==> EX m<=?n.
             ( ?\<Gamma> \<Rightarrow>* ?\<Delta> \<oplus> ?A, m)
             : derivable (ext ?R g3mod1 \<box> \<diamond>)",
     template_implication
      ([template_equation
         (template_var 4,
          template_app
           (template_app
             (template_hole 21,
              template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_app (template_hole 21, template_hole 20),
                    template_hole 19)),
                template_app
                 (template_app
                   (template_app (template_hole 18, template_hole 17),
                    template_hole 16),
                  template_hole 15))),
            template_hole 14)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_hole 12,
                    template_app
                     (template_app (template_hole 11, template_var 3),
                      template_app
                       (template_app (template_hole 10, template_var 2),
                        template_app
                         (template_app
                           (template_hole 9,
                            template_app
                             (template_app
                               (template_hole 8, template_hole 16),
                              template_app
                               (template_app
                                 (template_hole 7, template_var 1),
                                template_hole 6))),
                          template_hole 5)))),
                  template_var 0)),
              template_app
               (template_hole 4,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 3, template_var 4),
                      template_hole 17),
                    template_hole 16),
                  template_hole 15)))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("ModalSequents.dpWeak",
     "[| ( ?\<Gamma> \<Rightarrow>* ?\<Delta>, ?n)
         : derivable (ext ?R ?R2.0 ?M ?N);
         ?R1.0 <= upRules; ?R2.0 <= modRules2; ?R3.0 <= modRules2;
         ?R = Ax Un ?R1.0 Un p_e ?R2.0 ?M ?N Un ?R3.0 |]
      ==> ( ?\<Gamma> + ?\<Gamma>' \<Rightarrow>* ?\<Delta> + ?\<Delta>',
           ?n)
          : derivable (ext ?R ?R2.0 ?M ?N)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_var 10),
                      template_var 9)),
                  template_var 8)),
              template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 8, template_var 7),
                      template_var 6),
                    template_var 5),
                  template_var 4)))
            ),
        template_inequation (less_equals, template_var 3, template_hole 6),
        template_inequation (less_equals, template_var 6, template_hole 5),
        template_inequation (less_equals, template_var 2, template_hole 5),
        template_equation
         (template_var 7,
          template_app
           (template_app
             (template_hole 3,
              template_app
               (template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_var 3)),
                template_app
                 (template_app
                   (template_app (template_hole 1, template_var 6),
                    template_var 5),
                  template_var 4))),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app
                  (template_hole 11,
                   template_app
                    (template_app
                      (template_hole 10,
                       template_app
                        (template_app (template_hole 0, template_var 10),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 0, template_var 9),
                       template_var 0))),
                 template_var 8)),
             template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_app
                    (template_app (template_hole 8, template_var 7),
                     template_var 6),
                   template_var 5),
                 template_var 4)))
           ))),
    ("ModalSequents.modRule1Characterise",
     "[| (?Ps, ?C) : p_e ?R ?M ?N; ?R <= modRules2 |]
      ==> EX F Fs \<Gamma> \<Delta> ps r.
             (?Ps, ?C) =
             extendRule
              ( ?M \<cdot> \<Gamma> \<Rightarrow>* ?N \<cdot> \<Delta>) r &
             r : ?R &
             (r = (ps,  \<Empt> \<Rightarrow>* \<LM> Modal F Fs  \<RM>) |
              r = (ps,  \<LM> Modal F Fs  \<RM> \<Rightarrow>* \<Empt>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app (template_hole 17, template_var 4),
                  template_var 3)),
              template_app
               (template_app
                 (template_app (template_hole 16, template_var 2),
                  template_var 1),
                template_var 0))
            ),
        template_inequation
         (less_equals, template_var 2, template_hole 14)],
       template_predicate (template_app (template_hole 13, t_empty)))),
    ("ModalSequents.rightInvert",
     "[| ?R1.0 <= upRules &
         ?R2.0 <= modRules2 &
         ?R3.0 <= modRules2 &
         ?R = Ax Un ?R1.0 Un p_e ?R2.0 ?M1.0 ?M2.0 Un ?R3.0 &
         ?R' = Ax Un ?R1.0 Un ?R2.0 Un ?R3.0;
         ( ?\<Gamma> \<Rightarrow>* ?\<Delta> \<oplus> Modal ?M ?Ms, ?n)
         : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0);
         ALL r':?R'.
            rightPrincipal r' (Modal ?M ?Ms) ?R' -->
            ( ?\<Gamma>' \<Rightarrow>* ?\<Delta>') : set (fst r');
         ?M2.0 ~= ?M |]
      ==> EX m<=?n.
             ( ?\<Gamma> + ?\<Gamma>' \<Rightarrow>* ?\<Delta> + ?\<Delta>',
              m)
             : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app (template_hole 25, template_var 13),
                  template_hole 24)),
              template_app
               (template_app
                 (template_hole 26,
                  template_app
                   (template_app (template_hole 25, template_var 12),
                    template_hole 23)),
                template_app
                 (template_app
                   (template_hole 26,
                    template_app
                     (template_app (template_hole 25, template_var 11),
                      template_hole 23)),
                  template_app
                   (template_app
                     (template_hole 26,
                      template_app
                       (template_app (template_hole 22, template_var 10),
                        template_app
                         (template_app
                           (template_hole 21,
                            template_app
                             (template_app
                               (template_hole 21,
                                template_app
                                 (template_app
                                   (template_hole 21, template_hole 20),
                                  template_var 13)),
                              template_app
                               (template_app
                                 (template_app
                                   (template_hole 19, template_var 12),
                                  template_var 9),
                                template_var 8))),
                          template_var 11))),
                    template_app
                     (template_app (template_hole 22, template_var 7),
                      template_app
                       (template_app
                         (template_hole 21,
                          template_app
                           (template_app
                             (template_hole 21,
                              template_app
                               (template_app
                                 (template_hole 21, template_hole 20),
                                template_var 13)),
                            template_var 12)),
                        template_var 11))))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app
                     (template_app (template_hole 16, template_var 6),
                      template_app
                       (template_app (template_hole 15, template_var 5),
                        template_app
                         (template_app
                           (template_hole 14,
                            template_app
                             (template_app
                               (template_hole 13, template_var 4),
                              template_var 3)),
                          template_hole 12)))),
                  template_var 2)),
              template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 10),
                      template_var 12),
                    template_var 9),
                  template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 7), t_empty)
            ),
        template_negation
         (template_equation (template_var 8, template_var 4))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("ModalSequents.leftInvert",
     "[| ?R1.0 <= upRules &
         ?R2.0 <= modRules2 &
         ?R3.0 <= modRules2 &
         ?R = Ax Un ?R1.0 Un p_e ?R2.0 ?M1.0 ?M2.0 Un ?R3.0 &
         ?R' = Ax Un ?R1.0 Un ?R2.0 Un ?R3.0;
         ( ?\<Gamma> \<oplus> Modal ?M ?Ms \<Rightarrow>* ?\<Delta>, ?n)
         : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0);
         ALL r':?R'.
            leftPrincipal r' (Modal ?M ?Ms) ?R' -->
            ( ?\<Gamma>' \<Rightarrow>* ?\<Delta>') : set (fst r');
         ?M1.0 ~= ?M |]
      ==> EX m<=?n.
             ( ?\<Gamma> + ?\<Gamma>' \<Rightarrow>* ?\<Delta> + ?\<Delta>',
              m)
             : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app (template_hole 25, template_var 13),
                  template_hole 24)),
              template_app
               (template_app
                 (template_hole 26,
                  template_app
                   (template_app (template_hole 25, template_var 12),
                    template_hole 23)),
                template_app
                 (template_app
                   (template_hole 26,
                    template_app
                     (template_app (template_hole 25, template_var 11),
                      template_hole 23)),
                  template_app
                   (template_app
                     (template_hole 26,
                      template_app
                       (template_app (template_hole 22, template_var 10),
                        template_app
                         (template_app
                           (template_hole 21,
                            template_app
                             (template_app
                               (template_hole 21,
                                template_app
                                 (template_app
                                   (template_hole 21, template_hole 20),
                                  template_var 13)),
                              template_app
                               (template_app
                                 (template_app
                                   (template_hole 19, template_var 12),
                                  template_var 9),
                                template_var 8))),
                          template_var 11))),
                    template_app
                     (template_app (template_hole 22, template_var 7),
                      template_app
                       (template_app
                         (template_hole 21,
                          template_app
                           (template_app
                             (template_hole 21,
                              template_app
                               (template_app
                                 (template_hole 21, template_hole 20),
                                template_var 13)),
                            template_var 12)),
                        template_var 11))))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app
                     (template_app
                       (template_hole 16,
                        template_app
                         (template_app (template_hole 15, template_var 6),
                          template_app
                           (template_app
                             (template_hole 14,
                              template_app
                               (template_app
                                 (template_hole 13, template_var 5),
                                template_var 4)),
                            template_hole 12))),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 10, template_var 10),
                      template_var 12),
                    template_var 9),
                  template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 7), t_empty)
            ),
        template_negation
         (template_equation (template_var 9, template_var 5))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("ModalSequents.nonPrincipalInvertRight",
     "[| ?R1.0 <= upRules; ?R2.0 <= modRules2; ?R3.0 <= modRules2;
         ?R = Ax Un ?R1.0 Un p_e ?R2.0 ?M1.0 ?M2.0 Un ?R3.0; ?r : ?R;
         ?r = (?ps, ?c); ?R' = Ax Un ?R1.0 Un ?R2.0 Un ?R3.0;
         ALL m<?n.
            ALL \<Gamma> \<Delta>.
               ( \<Gamma> \<Rightarrow>* \<Delta> \<oplus> Modal ?M ?Ms, m)
               : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0) -->
               (ALL r':?R'.
                   rightPrincipal r' (Modal ?M ?Ms) ?R' -->
                   ( ?\<Gamma>' \<Rightarrow>* ?\<Delta>')
                   : set (fst r')) -->
               (EX m'<=m.
                   ( \<Gamma> +
                     ?\<Gamma>' \<Rightarrow>* \<Delta> + ?\<Delta>',
                    m')
                   : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0));
         ( ?\<Gamma> \<Rightarrow>* ?\<Delta> \<oplus> Modal ?M ?Ms, ?n)
         : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0);
         ALL r':?R'.
            rightPrincipal r' (Modal ?M ?Ms) ?R' -->
            ( ?\<Gamma>' \<Rightarrow>* ?\<Delta>') : set (fst r');
         ~ rightPrincipal ?r (Modal ?M ?Ms) ?R';
         (?r : Ax | ?r : upRules | ?r : modRules2) &
         extendRule ?S ?r =
         (?Ps,  ?\<Gamma> \<Rightarrow>* ?\<Delta> \<oplus> Modal ?M ?Ms);
         ?n = ?n' + 1;
         ALL p:set ?Ps.
            EX n<=?n'. (p, n) : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0);
         ?Ps ~= [] |]
      ==> EX m<=?n.
             ( ?\<Gamma> + ?\<Gamma>' \<Rightarrow>* ?\<Delta> + ?\<Delta>',
              m)
             : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0)",
     template_implication
      ([template_inequation
         (less_equals, template_var 19, template_hole 38),
        template_inequation
         (less_equals, template_var 18, template_hole 37),
        template_inequation
         (less_equals, template_var 17, template_hole 37),
        template_equation
         (template_var 16,
          template_app
           (template_app
             (template_hole 35,
              template_app
               (template_app
                 (template_hole 35,
                  template_app
                   (template_app (template_hole 35, template_hole 34),
                    template_var 19)),
                template_app
                 (template_app
                   (template_app (template_hole 33, template_var 18),
                    template_var 15),
                  template_var 14))),
            template_var 17)),
        template_predicate
         (
            template_app
             (template_app (template_hole 32, template_var 13),
              template_var 16)
            ),
        template_equation
         (template_var 13,
          template_app
           (template_app (template_hole 30, template_var 12),
            template_var 11)),
        template_equation
         (template_var 10,
          template_app
           (template_app
             (template_hole 35,
              template_app
               (template_app
                 (template_hole 35,
                  template_app
                   (template_app (template_hole 35, template_hole 34),
                    template_var 19)),
                template_var 18)),
            template_var 17)),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app
                   (template_hole 24,
                    template_app
                     (template_app (template_hole 23, template_var 4),
                      template_app
                       (template_app (template_hole 22, template_var 3),
                        template_app
                         (template_app
                           (template_hole 21,
                            template_app
                             (template_app
                               (template_hole 20, template_var 8),
                              template_var 7)),
                          template_hole 19)))),
                  template_var 9)),
              template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 17, template_var 16),
                      template_var 18),
                    template_var 15),
                  template_var 14)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 10), t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 15, template_var 13),
                    template_app
                     (template_app (template_hole 20, template_var 8),
                      template_var 7)),
                  template_var 10)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 32, template_var 13),
                      template_hole 34)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 32, template_var 13),
                        template_hole 38)),
                    template_app
                     (template_app (template_hole 32, template_var 13),
                      template_hole 37)))),
              template_app
               (template_app
                 (template_hole 31,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 13)),
                template_app
                 (template_app (template_hole 30, template_var 1),
                  template_app
                   (template_app (template_hole 23, template_var 4),
                    template_app
                     (template_app (template_hole 22, template_var 3),
                      template_app
                       (template_app
                         (template_hole 21,
                          template_app
                           (template_app (template_hole 20, template_var 8),
                            template_var 7)),
                        template_hole 19))))))
            ),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 13, template_var 1)),
              t_empty)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_predicate (template_app (template_hole 11, t_empty)))),
    ("ModalSequents.nonPrincipalInvertLeft",
     "[| ?R1.0 <= upRules; ?R2.0 <= modRules2; ?R3.0 <= modRules2;
         ?R = Ax Un ?R1.0 Un p_e ?R2.0 ?M1.0 ?M2.0 Un ?R3.0; ?r : ?R;
         ?r = (?ps, ?c); ?R' = Ax Un ?R1.0 Un ?R2.0 Un ?R3.0;
         ALL m<?n.
            ALL \<Gamma> \<Delta>.
               ( \<Gamma> \<oplus> Modal ?M ?Ms \<Rightarrow>* \<Delta>, m)
               : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0) -->
               (ALL r':?R'.
                   leftPrincipal r' (Modal ?M ?Ms) ?R' -->
                   ( ?\<Gamma>' \<Rightarrow>* ?\<Delta>')
                   : set (fst r')) -->
               (EX m'<=m.
                   ( \<Gamma> +
                     ?\<Gamma>' \<Rightarrow>* \<Delta> + ?\<Delta>',
                    m')
                   : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0));
         ( ?\<Gamma> \<oplus> Modal ?M ?Ms \<Rightarrow>* ?\<Delta>, ?n)
         : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0);
         ALL r':?R'.
            leftPrincipal r' (Modal ?M ?Ms) ?R' -->
            ( ?\<Gamma>' \<Rightarrow>* ?\<Delta>') : set (fst r');
         ~ leftPrincipal ?r (Modal ?M ?Ms) ?R';
         (?r : Ax | ?r : upRules | ?r : modRules2) &
         extendRule ?S ?r =
         (?Ps,  ?\<Gamma> \<oplus> Modal ?M ?Ms \<Rightarrow>* ?\<Delta>);
         ?n = ?n' + 1;
         ALL p:set ?Ps.
            EX n<=?n'. (p, n) : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0);
         ?Ps ~= [] |]
      ==> EX m<=?n.
             ( ?\<Gamma> + ?\<Gamma>' \<Rightarrow>* ?\<Delta> + ?\<Delta>',
              m)
             : derivable (ext ?R ?R2.0 ?M1.0 ?M2.0)",
     template_implication
      ([template_inequation
         (less_equals, template_var 19, template_hole 38),
        template_inequation
         (less_equals, template_var 18, template_hole 37),
        template_inequation
         (less_equals, template_var 17, template_hole 37),
        template_equation
         (template_var 16,
          template_app
           (template_app
             (template_hole 35,
              template_app
               (template_app
                 (template_hole 35,
                  template_app
                   (template_app (template_hole 35, template_hole 34),
                    template_var 19)),
                template_app
                 (template_app
                   (template_app (template_hole 33, template_var 18),
                    template_var 15),
                  template_var 14))),
            template_var 17)),
        template_predicate
         (
            template_app
             (template_app (template_hole 32, template_var 13),
              template_var 16)
            ),
        template_equation
         (template_var 13,
          template_app
           (template_app (template_hole 30, template_var 12),
            template_var 11)),
        template_equation
         (template_var 10,
          template_app
           (template_app
             (template_hole 35,
              template_app
               (template_app
                 (template_hole 35,
                  template_app
                   (template_app (template_hole 35, template_hole 34),
                    template_var 19)),
                template_var 18)),
            template_var 17)),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app
                   (template_hole 24,
                    template_app
                     (template_app
                       (template_hole 23,
                        template_app
                         (template_app (template_hole 22, template_var 4),
                          template_app
                           (template_app
                             (template_hole 21,
                              template_app
                               (template_app
                                 (template_hole 20, template_var 8),
                                template_var 7)),
                            template_hole 19))),
                      template_var 3)),
                  template_var 9)),
              template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 17, template_var 16),
                      template_var 18),
                    template_var 15),
                  template_var 14)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 10), t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_app (template_hole 15, template_var 13),
                    template_app
                     (template_app (template_hole 20, template_var 8),
                      template_var 7)),
                  template_var 10)
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 32, template_var 13),
                      template_hole 34)),
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 32, template_var 13),
                        template_hole 38)),
                    template_app
                     (template_app (template_hole 32, template_var 13),
                      template_hole 37)))),
              template_app
               (template_app
                 (template_hole 31,
                  template_app
                   (template_app (template_hole 6, template_var 2),
                    template_var 13)),
                template_app
                 (template_app (template_hole 30, template_var 1),
                  template_app
                   (template_app
                     (template_hole 23,
                      template_app
                       (template_app (template_hole 22, template_var 4),
                        template_app
                         (template_app
                           (template_hole 21,
                            template_app
                             (template_app
                               (template_hole 20, template_var 8),
                              template_var 7)),
                          template_hole 19))),
                    template_var 3))))
            ),
        template_equation
         (template_var 9,
          template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 13, template_var 1)),
              t_empty)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_predicate (template_app (template_hole 11, t_empty))))]:
   (string * thm * template) list
### theory "Draft.ModalSequentsMoreTemplates"
### 0.463s elapsed time, 0.708s cpu time, 0.059s GC time
val it = (): unit
