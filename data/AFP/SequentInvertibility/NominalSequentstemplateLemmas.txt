   [("NominalSequents.fin_supp", "finite (supp ?x)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("NominalSequents.finSupp", "finite (supp ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("NominalSequents.finSupp", "finite (supp ?As)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("NominalSequents.finPremSet", "finite (set_of_prem ?Ps)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("NominalSequents.finSeqSet", "finite (NominalSequents.set_of_seq ?S)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("NominalSequents.calc_atm", "[] \<bullet> ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("NominalSequents.form_form_list_perm_empty",
     "[] \<bullet> ?form_Rep = ?form_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("NominalSequents.form_form_list_perm_empty",
     "[] \<bullet> ?form_list_Rep = ?form_list_Rep",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("NominalSequents.var_injection", "EX x. ?y = var x",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("NominalSequents.supp_atm", "supp ?x = {?x}",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("NominalSequents.form_form_list_unfolded_perm_eq",
     "perm_form_Rep_noption ?pi ?noption = ?pi \<bullet> ?noption",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("NominalSequents.extendEmpty",
     "extend ( \<Empt> \<Rightarrow>* \<Empt>) ?C = ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("NominalSequents.perm_pi_simp",
     "?pi \<bullet> rev ?pi \<bullet> ?x = ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_var 0)),
    ("NominalSequents.perm_pi_simp",
     "rev ?pi \<bullet> ?pi \<bullet> ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_var 0)),
    ("NominalSequents.fresh_atm", "?a \<sharp> ?b = (?a ~= ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_negation
        (template_equation (template_var 1, template_var 0)))),
    ("NominalSequents.characteriseSeq",
     "EX A B. ?C = ( A \<Rightarrow>* B)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("NominalSequents.supp_eqvt",
     "?pi \<bullet> supp ?x = supp (?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("NominalSequents.swap_simps", "[(?a, ?b)] \<bullet> ?a = ?b",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)),
         template_var 1),
       template_var 0)),
    ("NominalSequents.swap_simps", "[(?a, ?b)] \<bullet> ?b = ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_hole 0)),
         template_var 0),
       template_var 1)),
    ("NominalSequents.exists_fresh'",
     "finite (supp ?x) ==> EX c. c \<sharp> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("NominalSequents.perm_app",
     "?pi \<bullet> ?f ?x = (?pi \<bullet> ?f) (?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app (template_var 1, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("NominalSequents.extRulesp_extRules_eq",
     "extRulesp (%x. x : ?R) = (%x. x :  ?R*)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("NominalSequents.abs_supp", "supp ([?a].?x) = supp ?x - {?a}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_hole 0)))),
    ("NominalSequents.perm_bij",
     "(?pi \<bullet> ?x = ?pi \<bullet> ?y) = (?x = ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("NominalSequents.fresh_bij",
     "?pi \<bullet> ?a \<sharp> ?pi \<bullet> ?x = ?a \<sharp> ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("NominalSequents.fresh_star_bij",
     "(?pi \<bullet> ?a) \<sharp>* (?pi \<bullet> ?x) = ?a \<sharp>* ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("NominalSequents.fresh_star_bij",
     "(?pi \<bullet> ?b) \<sharp>* (?pi \<bullet> ?x) = ?b \<sharp>* ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1), template_var 0))),
    ("NominalSequents.form_form_list_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?form_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?form_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("NominalSequents.form_form_list_perm_append",
     "(?pi1.0 @ ?pi2.0) \<bullet> ?form_list_Rep =
      ?pi1.0 \<bullet> ?pi2.0 \<bullet> ?form_list_Rep",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("NominalSequents.nonEmptySet", "?A ~= [] --> (EX a. a : set ?A)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3))),
           template_app (template_hole 2, t_empty))
         )),
    ("NominalSequents.fresh_left",
     "?a \<sharp> ?pi \<bullet> ?x = rev ?pi \<bullet> ?a \<sharp> ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 2)),
         template_var 0))),
    ("NominalSequents.fresh_right",
     "?pi \<bullet> ?a \<sharp> ?x = ?a \<sharp> rev ?pi \<bullet> ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("NominalSequents.form_form_list_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?form_Rep = ?pi2.0 \<bullet> ?form_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("NominalSequents.form_form_list_perm_eq",
     " ?pi1.0 \<triangleq> ?pi2.0  ==>
      ?pi1.0 \<bullet> ?form_list_Rep = ?pi2.0 \<bullet> ?form_list_Rep",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("NominalSequents.perm_compose",
     "?pi2.0 \<bullet> ?pi1.0 \<bullet> ?x =
      (?pi2.0 \<bullet> ?pi1.0) \<bullet> ?pi2.0 \<bullet> ?x",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("NominalSequents.abs_perm",
     "?pi \<bullet> [?a].?x = [(?pi \<bullet> ?a)].(?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("NominalSequents.set_diff_eqvt",
     "?pi \<bullet> (?X - ?Y) = ?pi \<bullet> ?X - ?pi \<bullet> ?Y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("NominalSequents.abs_fresh",
     "?b \<sharp> [?a].?x = (?b = ?a | ?b \<sharp> ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("NominalSequents.eq_eqvt",
     "?pi \<bullet> (?x = ?y) = (?pi \<bullet> ?x = ?pi \<bullet> ?y)",
     template_bimplication
      (template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0))
           ),
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("NominalSequents.fresh_eqvt",
     "?pi \<bullet> ?a \<sharp> ?x =
      ?pi \<bullet> ?a \<sharp> ?pi \<bullet> ?x",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("NominalSequents.fresh_star_eqvt",
     "?pi \<bullet> ?a \<sharp>* ?x =
      (?pi \<bullet> ?a) \<sharp>* (?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("NominalSequents.fresh_star_eqvt",
     "?pi \<bullet> ?b \<sharp>* ?x =
      (?pi \<bullet> ?b) \<sharp>* (?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("NominalSequents.subseteq_eqvt",
     "?pi \<bullet> (?X <= ?Y) = (?pi \<bullet> ?X <= ?pi \<bullet> ?Y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("NominalSequents.in_eqvt",
     "?pi \<bullet> (?x : ?X) = (?pi \<bullet> ?x : ?pi \<bullet> ?X)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("NominalSequents.perm_compose'",
     "(?pi2.0 \<bullet> ?pi1.0) \<bullet> ?x =
      ?pi2.0 \<bullet> ?pi1.0 \<bullet> rev ?pi2.0 \<bullet> ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 0, template_var 2)),
             template_var 0))))),
    ("NominalSequents.derivablep_derivable_eq",
     "derivablep (%x. x : ?R) = (%x xa. (x, xa) : derivable ?R)",
     template_equation (template_app (template_hole 4, t_empty), t_empty)),
    ("NominalSequents.all_eqvt",
     "?pi \<bullet> HOL.induct_forall ?P =
      HOL.induct_forall (%x. ?pi \<bullet> ?P (rev ?pi \<bullet> x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app (template_hole 2, t_empty))),
    ("NominalSequents.perm_swap",
     "[(?a, ?b)] \<bullet> [(?a, ?b)] \<bullet> ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_hole 0)),
           template_var 0)),
       template_var 0)),
    ("NominalSequents.perm_swap",
     "[(?a, ?b)] \<bullet> [(?b, ?a)] \<bullet> ?x = ?x",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_hole 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2)),
               template_hole 0)),
           template_var 0)),
       template_var 0)),
    ("NominalSequents.calc_atm",
     "((?a, ?b) # ?pi) \<bullet> ?x = swap (?a, ?b) (?pi \<bullet> ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 2)),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 3),
             template_var 2)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_var 0)))),
    ("NominalSequents.fresh_perm_app",
     "[| ?a \<sharp> ?pi; ?a \<sharp> ?x |]
      ==> ?a \<sharp> ?pi \<bullet> ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("NominalSequents.all_eqvt",
     "?pi \<bullet> (ALL x. ?P x) =
      (ALL x. ?pi \<bullet> ?P (rev ?pi \<bullet> x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, t_empty)),
       template_app (template_hole 2, t_empty))),
    ("NominalSequents.ex_eqvt",
     "?pi \<bullet> (EX x. ?P x) =
      (EX x. ?pi \<bullet> ?P (rev ?pi \<bullet> x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, t_empty)),
       template_app (template_hole 2, t_empty))),
    ("NominalSequents.ex1_eqvt",
     "?pi \<bullet> (EX! x. ?P x) =
      (EX! x. ?pi \<bullet> ?P (rev ?pi \<bullet> x))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, t_empty)),
       template_app (template_hole 2, t_empty))),
    ("NominalSequents.abs_supp",
     "finite (supp ?x) ==> supp ([?a].?x) = supp ?x - {?a}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 6, template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("NominalSequents.exists_fresh",
     "[| finite (supp ?x); !!c. c \<sharp> ?x ==> ?thesis |] ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 1))
            ),
        template_predicate (template_app (template_hole 1, t_empty))],
       template_predicate (template_var 0))),
    ("NominalSequents.subst_var_list_eqvt",
     "?pi \<bullet> [?z;?x]?y =
      [(?pi \<bullet> ?z);(?pi \<bullet> ?x)](?pi \<bullet> ?y)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 3),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 3),
           template_var 0)))),
    ("NominalSequents.calc_atm",
     "swap (?a, ?b) ?c =
      (if ?a = ?c then ?b else if ?b = ?c then ?a else ?c)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 0)),
               template_var 1),
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 3, template_var 1),
                     template_var 0)),
                 template_var 2),
               template_var 0))
           ))),
    ("NominalSequents.switchAux",
     "?y \<sharp> ?Xs ==> [?y;?x]?Xs = [(?y, ?x)] \<bullet> ?Xs",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_hole 0)),
           template_var 1)))),
    ("NominalSequents.switch",
     "?y \<sharp> ?A ==> [?y,?x]?A = [(?y, ?x)] \<bullet> ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_hole 0)),
           template_var 1)))),
    ("NominalSequents.switch",
     "?y \<sharp> ?As ==> [?y,?x]?As = [(?y, ?x)] \<bullet> ?As",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 4, template_var 2),
             template_var 0),
           template_var 1),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_hole 0)),
           template_var 1)))),
    ("NominalSequents.extendFalsum",
     "extend ?S ( \<LM> ff  \<RM> \<Rightarrow>* \<Empt>) =
      ( ?\<Gamma> \<Rightarrow>* ?\<Delta>) ==>
      ff :# ?\<Gamma>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_hole 2)),
              template_hole 2)),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 3),
             template_app (template_hole 0, template_var 1))
           ))),
    ("NominalSequents.abs_fresh",
     "finite (supp ?x) ==>
      ?b \<sharp> [?a].?x = (?b = ?a | ?b \<sharp> ?x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app (template_hole 6, template_var 2))
            )],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 2))
              )],
         template_predicate
          (
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2))
             )))),
    ("NominalSequents.getFresh",
     "EX y. y \<sharp> ?x &
            y \<sharp> ?A &
            y \<sharp> NominalSequents.set_of_seq ?S &
            y \<sharp> set_of_prem ?Ps",
     template_predicate (template_app (template_hole 6, t_empty))),
    ("NominalSequents.perm_fresh_fresh",
     "[| ?a \<sharp> ?x; ?b \<sharp> ?x |]
      ==> [(?a, ?b)] \<bullet> ?x = ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_hole 0)),
           template_var 1),
         template_var 1))),
    ("NominalSequents.containFalsum",
     "[| ff :# ?\<Gamma>; Ax <= ?R |]
      ==> ( ?\<Gamma> \<Rightarrow>* ?\<Delta>, 0) : derivable  ?R*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_app (template_hole 8, template_var 2))
            ),
        template_inequation (less_equals, template_hole 6, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_hole 2)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("NominalSequents.formSubst",
     "?y \<sharp> ?x & ?y \<sharp> ?A ==>
      ?F \<nabla> [?x].?A = ?F \<nabla> [?y].[?y,?x]?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 3),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2),
             template_var 1))))),
    ("NominalSequents.swap_simps",
     "[| ?a ~= ?c; ?b ~= ?c |] ==> [(?a, ?b)] \<bullet> ?c = ?c",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_var 1))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 0)),
               template_hole 0)),
           template_var 1),
         template_var 1))),
    ("NominalSequents.the_eqvt",
     "EX! x. ?P x ==>
      ?pi \<bullet> (THE x. ?P x) =
      (THE x. ?pi \<bullet> ?P (rev ?pi \<bullet> x))",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 3, template_var 0),
           template_app (template_hole 2, t_empty)),
         template_app (template_hole 2, t_empty)))),
    ("NominalSequents.fresh_aux",
     "[| ?c ~= ?a; ?a \<sharp> ?x; ?c \<sharp> ?x |]
      ==> ?c \<sharp> [(?a, ?b)] \<bullet> ?x",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 2),
                       template_var 0)),
                   template_hole 0)),
               template_var 1))
           ))),
    ("NominalSequents.extendContain",
     "[| ?r = (?ps, ?c); (?Ps, ?C) = extendRule ?S ?r; ?p : set ?ps |]
      ==> extend ?S ?p : set ?Ps",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 4, template_var 5),
            template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 3))
           ))),
    ("NominalSequents.containID",
     "[| At ?i ?xs :# ?\<Gamma> & At ?i ?xs :# ?\<Delta>; Ax <= ?R |]
      ==> ( ?\<Gamma> \<Rightarrow>* ?\<Delta>, 0) : derivable  ?R*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_var 4),
                      template_var 3)),
                  template_app (template_hole 8, template_var 2))),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 4),
                    template_var 3)),
                template_app (template_hole 8, template_var 1)))
            ),
        template_inequation (less_equals, template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_hole 2)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NominalSequents.propRuleCharacterise",
     "(?Ps, ?C) : upRules ==>
      EX F Fs.
         ?C = ( \<Empt> \<Rightarrow>* \<LM> Cpd0 F Fs  \<RM>) |
         ?C = ( \<LM> Cpd0 F Fs  \<RM> \<Rightarrow>* \<Empt>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)),
              template_hole 8)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("NominalSequents.extendID",
     "extend ?S
       ( \<LM> At ?i ?xs  \<RM> \<Rightarrow>* \<LM> At ?i ?xs  \<RM>) =
      ( ?\<Gamma> \<Rightarrow>* ?\<Delta>) ==>
      At ?i ?xs :# ?\<Gamma> & At ?i ?xs :# ?\<Delta>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 4),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_hole 3)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2)),
                template_hole 3))),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 2)),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_var 2)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("NominalSequents.alpha",
     "([?a].?x = [?b].?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b & ?x = [(?a, ?b)] \<bullet> ?y & ?a \<sharp> ?y)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 10, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 6, template_var 2),
                     template_app
                      (template_app
                        (template_hole 4,
                         template_app
                          (template_app
                            (template_hole 3,
                             template_app
                              (template_app
                                (template_hole 2, template_var 3),
                               template_var 1)),
                           template_hole 1)),
                       template_var 0))),
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0))))
           ))),
    ("NominalSequents.alpha'",
     "([?a].?x = [?b].?y) =
      (?a = ?b & ?x = ?y |
       ?a ~= ?b & [(?b, ?a)] \<bullet> ?x = ?y & ?b \<sharp> ?x)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 10, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 10, template_var 1),
           template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 7, template_var 3),
                     template_var 1))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app
                          (template_hole 4,
                           template_app
                            (template_app
                              (template_hole 3,
                               template_app
                                (template_app
                                  (template_hole 2, template_var 1),
                                 template_var 3)),
                             template_hole 1)),
                         template_var 2)),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2))))
           ))),
    ("NominalSequents.characteriseAx",
     "?r : Ax ==>
      ?r = ([],  \<LM> ff  \<RM> \<Rightarrow>* \<Empt>) |
      (EX i xs.
          ?r =
          ([],  \<LM> At i xs  \<RM> \<Rightarrow>* \<LM> At i xs  \<RM>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 0),
              template_hole 11)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app (template_hole 9, template_var 0),
                 template_app
                  (template_app (template_hole 8, template_hole 7),
                   template_app
                    (template_app
                      (template_hole 6,
                       template_app
                        (template_app (template_hole 5, template_hole 4),
                         template_hole 3)),
                     template_hole 3)))),
             template_app (template_hole 2, t_empty))
           ))),
    ("NominalSequents.nprovRuleCharacterise",
     "(?Ps, ?C) : nprovRules ==>
      EX F x A.
         ?C = ( \<Empt> \<Rightarrow>* \<LM> F \<nabla> [x].A  \<RM>) |
         ?C = ( \<LM> F \<nabla> [x].A  \<RM> \<Rightarrow>* \<Empt>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)),
              template_hole 9)
            )],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("NominalSequents.extend_for_any_seq",
     "[| ?R1.0 <= upRules & ?R2.0 <= nprovRules & ?R3.0 <= provRules;
         ?R = Ax Un ?R1.0 Un ?R2.0 Un ?R3.0; ?r : ?R |]
      ==> extendRule ?S ?r :  ?R*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 5),
                  template_hole 8)),
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 9, template_var 4),
                    template_hole 7)),
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_hole 6)))
            ),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 4,
              template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 4, template_hole 3),
                    template_var 5)),
                template_var 4)),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app (template_hole 0, template_var 2))
           ))),
    ("NominalSequents.characteriseLast",
     "(?C, ?m + 1) : derivable ?R ==>
      EX Ps.
         Ps ~= [] &
         (Ps, ?C) : ?R & (ALL p:set Ps. EX n<=?m. (p, n) : derivable ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_hole 12))),
              template_app (template_hole 11, template_var 0))
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("NominalSequents.provRuleCharacterise",
     "(?Ps, ?C) : provRules ==>
      EX F x A.
         (?C = ( \<Empt> \<Rightarrow>* \<LM> F \<nabla> [x].A  \<RM>) |
          ?C = ( \<LM> F \<nabla> [x].A  \<RM> \<Rightarrow>* \<Empt>)) &
         x \<sharp> set_of_prem ( ?Ps - A )",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 1),
                  template_var 0)),
              template_hole 13)
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("NominalSequents.alpha_fresh",
     "[| ?c ~= ?a; ?c ~= ?b; ?c \<sharp> ?x; ?c \<sharp> ?y |]
      ==> ([?a].?x = [?b].?y) =
          ([(?a, ?c)] \<bullet> ?x = [(?b, ?c)] \<bullet> ?y)",
     template_implication
      ([template_negation
         (template_equation (template_var 4, template_var 3)),
        template_negation
         (template_equation (template_var 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app
            (template_app (template_hole 5, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 0)),
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 4)),
                 template_hole 0)),
             template_var 1),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 4)),
                 template_hole 0)),
             template_var 0))))),
    ("NominalSequents.alpha_fresh'",
     "[| [?a].?x = [?b].?y; ?c ~= ?a; ?c ~= ?b; ?c \<sharp> ?x;
         ?c \<sharp> ?y |]
      ==> ?x = [(?a, ?c)] \<bullet> [(?b, ?c)] \<bullet> ?y",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 4), template_var 3),
          template_app
           (template_app (template_hole 8, template_var 2),
            template_var 1)),
        template_negation
         (template_equation (template_var 0, template_var 4)),
        template_negation
         (template_equation (template_var 0, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 1)
            )],
       template_equation
        (template_var 3,
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 0)),
               template_hole 0)),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 2),
                     template_var 0)),
                 template_hole 0)),
             template_var 1))))),
    ("NominalSequents.ruleSet",
     "[| ?R1.0 <= upRules; ?R2.0 <= nprovRules; ?R3.0 <= provRules;
         ?R = Ax Un ?R1.0 Un ?R2.0 Un ?R3.0; (?Ps, ?C) :  ?R* |]
      ==> EX S r.
             extendRule S r = (?Ps, ?C) &
             (r : ?R1.0 | r : ?R2.0 | r : ?R3.0 | r : Ax)",
     template_implication
      ([template_inequation (less_equals, template_var 5, template_hole 14),
        template_inequation (less_equals, template_var 4, template_hole 13),
        template_inequation (less_equals, template_var 3, template_hole 12),
        template_equation
         (template_var 2,
          template_app
           (template_app
             (template_hole 10,
              template_app
               (template_app
                 (template_hole 10,
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_var 5)),
                template_var 4)),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_app (template_hole 6, template_var 2))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("NominalSequents.rightInvert",
     "[| ?R1.0 <= upRules &
         ?R2.0 <= nprovRules &
         ?R3.0 <= provRules & ?R = Ax Un ?R1.0 Un ?R2.0 Un ?R3.0;
         ( ?\<Gamma> \<Rightarrow>* ?\<Delta> \<oplus> ?F \<nabla> [?x].?A,
          ?n)
         : derivable  ?R*;
         ALL r':?R.
            rightPrincipal r' (?F \<nabla> [?x].?A) -->
            ( ?\<Gamma>' \<Rightarrow>* ?\<Delta>') : set (fst r');
         ~ multSubst ?\<Gamma>' & ~ multSubst ?\<Delta>' |]
      ==> EX m<=?n.
             ( ?\<Gamma> + ?\<Gamma>' \<Rightarrow>* ?\<Delta> + ?\<Delta>',
              m)
             : derivable  ?R*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app (template_hole 25, template_var 11),
                  template_hole 24)),
              template_app
               (template_app
                 (template_hole 26,
                  template_app
                   (template_app (template_hole 25, template_var 10),
                    template_hole 23)),
                template_app
                 (template_app
                   (template_hole 26,
                    template_app
                     (template_app (template_hole 25, template_var 9),
                      template_hole 22)),
                  template_app
                   (template_app (template_hole 21, template_var 8),
                    template_app
                     (template_app
                       (template_hole 20,
                        template_app
                         (template_app
                           (template_hole 20,
                            template_app
                             (template_app
                               (template_hole 20, template_hole 19),
                              template_var 11)),
                          template_var 10)),
                      template_var 9)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app
                     (template_app (template_hole 16, template_var 7),
                      template_app
                       (template_app (template_hole 15, template_var 6),
                        template_app
                         (template_app
                           (template_hole 14,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 13, template_var 5),
                                template_var 4),
                              template_var 3)),
                          template_hole 12)))),
                  template_var 2)),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 8), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("NominalSequents.leftInvert",
     "[| ?R1.0 <= upRules &
         ?R2.0 <= nprovRules &
         ?R3.0 <= provRules & ?R = Ax Un ?R1.0 Un ?R2.0 Un ?R3.0;
         ( ?\<Gamma> \<oplus> ?F \<nabla> [?x].?A \<Rightarrow>* ?\<Delta>,
          ?n)
         : derivable  ?R*;
         ALL r':?R.
            leftPrincipal r' (?F \<nabla> [?x].?A) -->
            ( ?\<Gamma>' \<Rightarrow>* ?\<Delta>') : set (fst r');
         ~ multSubst ?\<Gamma>' & ~ multSubst ?\<Delta>' |]
      ==> EX m<=?n.
             ( ?\<Gamma> + ?\<Gamma>' \<Rightarrow>* ?\<Delta> + ?\<Delta>',
              m)
             : derivable  ?R*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_app (template_hole 25, template_var 11),
                  template_hole 24)),
              template_app
               (template_app
                 (template_hole 26,
                  template_app
                   (template_app (template_hole 25, template_var 10),
                    template_hole 23)),
                template_app
                 (template_app
                   (template_hole 26,
                    template_app
                     (template_app (template_hole 25, template_var 9),
                      template_hole 22)),
                  template_app
                   (template_app (template_hole 21, template_var 8),
                    template_app
                     (template_app
                       (template_hole 20,
                        template_app
                         (template_app
                           (template_hole 20,
                            template_app
                             (template_app
                               (template_hole 20, template_hole 19),
                              template_var 11)),
                          template_var 10)),
                      template_var 9)))))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_hole 17,
                    template_app
                     (template_app
                       (template_hole 16,
                        template_app
                         (template_app (template_hole 15, template_var 7),
                          template_app
                           (template_app
                             (template_hole 14,
                              template_app
                               (template_app
                                 (template_app
                                   (template_hole 13, template_var 6),
                                  template_var 5),
                                template_var 4)),
                            template_hole 12))),
                      template_var 3)),
                  template_var 2)),
              template_app
               (template_hole 11,
                template_app (template_hole 10, template_var 8)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 8), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 26,
                template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("NominalSequents.nonPrincipalInvertRight",
     "[| ?R1.0 <= upRules; ?R2.0 <= nprovRules; ?R3.0 <= provRules;
         ?R = Ax Un ?R1.0 Un ?R2.0 Un ?R3.0;
         ?r : ?R1.0 | ?r : ?R2.0 | ?r : ?R3.0; ?r = (?ps, ?c);
         ALL m<?n.
            ALL \<Gamma> \<Delta>.
               ( \<Gamma> \<Rightarrow>* \<Delta> \<oplus>
   ?F \<nabla> [?x].?A,
                m)
               : derivable  ?R* -->
               (ALL r':?R.
                   rightPrincipal r' (?F \<nabla> [?x].?A) -->
                   ( ?\<Gamma>' \<Rightarrow>* ?\<Delta>')
                   : set (fst r')) -->
               ~ multSubst ?\<Gamma>' & ~ multSubst ?\<Delta>' -->
               (EX m'<=m.
                   ( \<Gamma> +
                     ?\<Gamma>' \<Rightarrow>* \<Delta> + ?\<Delta>',
                    m')
                   : derivable  ?R*);
         ( ?\<Gamma> \<Rightarrow>* ?\<Delta> \<oplus> ?F \<nabla> [?x].?A,
          ?n)
         : derivable  ?R*;
         ALL r':?R.
            rightPrincipal r' (?F \<nabla> [?x].?A) -->
            ( ?\<Gamma>' \<Rightarrow>* ?\<Delta>') : set (fst r');
         ~ multSubst ?\<Gamma>' & ~ multSubst ?\<Delta>';
         ~ rightPrincipal ?r (?F \<nabla> [?x].?A);
         extendRule ?S ?r =
         (?Ps,
           ?\<Gamma> \<Rightarrow>* ?\<Delta> \<oplus> ?F \<nabla> [?x].?A);
         ?n = ?n' + 1; ALL p:set ?Ps. EX n<=?n'. (p, n) : derivable  ?R*;
         ?Ps ~= [] |]
      ==> EX m<=?n.
             ( ?\<Gamma> + ?\<Gamma>' \<Rightarrow>* ?\<Delta> + ?\<Delta>',
              m)
             : derivable  ?R*",
     template_implication
      ([template_inequation
         (less_equals, template_var 17, template_hole 39),
        template_inequation
         (less_equals, template_var 16, template_hole 38),
        template_inequation
         (less_equals, template_var 15, template_hole 37),
        template_equation
         (template_var 14,
          template_app
           (template_app
             (template_hole 35,
              template_app
               (template_app
                 (template_hole 35,
                  template_app
                   (template_app (template_hole 35, template_hole 34),
                    template_var 17)),
                template_var 16)),
            template_var 15)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 33,
                template_app
                 (template_app (template_hole 32, template_var 13),
                  template_var 17)),
              template_app
               (template_app
                 (template_hole 33,
                  template_app
                   (template_app (template_hole 32, template_var 13),
                    template_var 16)),
                template_app
                 (template_app (template_hole 32, template_var 13),
                  template_var 15)))
            ),
        template_equation
         (template_var 13,
          template_app
           (template_app (template_hole 30, template_var 12),
            template_var 11)),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app
                   (template_hole 24,
                    template_app
                     (template_app (template_hole 23, template_var 4),
                      template_app
                       (template_app (template_hole 22, template_var 3),
                        template_app
                         (template_app
                           (template_hole 21,
                            template_app
                             (template_app
                               (template_app
                                 (template_hole 20, template_var 9),
                                template_var 8),
                              template_var 7)),
                          template_hole 19)))),
                  template_var 10)),
              template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 14)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 14), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 6))),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 5)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 15, template_var 13),
                  template_app
                   (template_app
                     (template_app (template_hole 20, template_var 9),
                      template_var 8),
                    template_var 7))
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_var 13),
          template_app
           (template_app (template_hole 30, template_var 1),
            template_app
             (template_app (template_hole 23, template_var 4),
              template_app
               (template_app (template_hole 22, template_var 3),
                template_app
                 (template_app
                   (template_hole 21,
                    template_app
                     (template_app
                       (template_app (template_hole 20, template_var 9),
                        template_var 8),
                      template_var 7)),
                  template_hole 19))))),
        template_equation
         (template_var 10,
          template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 13, template_var 1)),
              t_empty)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_predicate (template_app (template_hole 8, t_empty)))),
    ("NominalSequents.nonPrincipalInvertLeft",
     "[| ?R1.0 <= upRules; ?R2.0 <= nprovRules; ?R3.0 <= provRules;
         ?R = Ax Un ?R1.0 Un ?R2.0 Un ?R3.0;
         ?r : ?R1.0 | ?r : ?R2.0 | ?r : ?R3.0; ?r = (?ps, ?c);
         ALL m<?n.
            ALL \<Gamma> \<Delta>.
               ( \<Gamma> \<oplus>
                 ?F \<nabla> [?x].?A \<Rightarrow>* \<Delta>,
                m)
               : derivable  ?R* -->
               (ALL r':?R.
                   leftPrincipal r' (?F \<nabla> [?x].?A) -->
                   ( ?\<Gamma>' \<Rightarrow>* ?\<Delta>')
                   : set (fst r')) -->
               ~ multSubst ?\<Gamma>' & ~ multSubst ?\<Delta>' -->
               (EX m'<=m.
                   ( \<Gamma> +
                     ?\<Gamma>' \<Rightarrow>* \<Delta> + ?\<Delta>',
                    m')
                   : derivable  ?R*);
         ( ?\<Gamma> \<oplus> ?F \<nabla> [?x].?A \<Rightarrow>* ?\<Delta>,
          ?n)
         : derivable  ?R*;
         ALL r':?R.
            leftPrincipal r' (?F \<nabla> [?x].?A) -->
            ( ?\<Gamma>' \<Rightarrow>* ?\<Delta>') : set (fst r');
         ~ multSubst ?\<Gamma>' & ~ multSubst ?\<Delta>';
         ~ leftPrincipal ?r (?F \<nabla> [?x].?A);
         extendRule ?S ?r =
         (?Ps,
           ?\<Gamma> \<oplus> ?F \<nabla> [?x].?A \<Rightarrow>* ?\<Delta>);
         ?n = ?n' + 1; ALL p:set ?Ps. EX n<=?n'. (p, n) : derivable  ?R*;
         ?Ps ~= [] |]
      ==> EX m<=?n.
             ( ?\<Gamma> + ?\<Gamma>' \<Rightarrow>* ?\<Delta> + ?\<Delta>',
              m)
             : derivable  ?R*",
     template_implication
      ([template_inequation
         (less_equals, template_var 17, template_hole 39),
        template_inequation
         (less_equals, template_var 16, template_hole 38),
        template_inequation
         (less_equals, template_var 15, template_hole 37),
        template_equation
         (template_var 14,
          template_app
           (template_app
             (template_hole 35,
              template_app
               (template_app
                 (template_hole 35,
                  template_app
                   (template_app (template_hole 35, template_hole 34),
                    template_var 17)),
                template_var 16)),
            template_var 15)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 33,
                template_app
                 (template_app (template_hole 32, template_var 13),
                  template_var 17)),
              template_app
               (template_app
                 (template_hole 33,
                  template_app
                   (template_app (template_hole 32, template_var 13),
                    template_var 16)),
                template_app
                 (template_app (template_hole 32, template_var 13),
                  template_var 15)))
            ),
        template_equation
         (template_var 13,
          template_app
           (template_app (template_hole 30, template_var 12),
            template_var 11)),
        template_predicate (template_app (template_hole 29, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 25,
                template_app
                 (template_app
                   (template_hole 24,
                    template_app
                     (template_app
                       (template_hole 23,
                        template_app
                         (template_app (template_hole 22, template_var 4),
                          template_app
                           (template_app
                             (template_hole 21,
                              template_app
                               (template_app
                                 (template_app
                                   (template_hole 20, template_var 9),
                                  template_var 8),
                                template_var 7)),
                            template_hole 19))),
                      template_var 3)),
                  template_var 10)),
              template_app
               (template_hole 18,
                template_app (template_hole 17, template_var 14)))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 14), t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 6))),
              template_app
               (template_hole 10,
                template_app (template_hole 9, template_var 5)))
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 15, template_var 13),
                  template_app
                   (template_app
                     (template_app (template_hole 20, template_var 9),
                      template_var 8),
                    template_var 7))
                )
            ),
        template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_var 13),
          template_app
           (template_app (template_hole 30, template_var 1),
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_var 4),
                  template_app
                   (template_app
                     (template_hole 21,
                      template_app
                       (template_app
                         (template_app (template_hole 20, template_var 9),
                          template_var 8),
                        template_var 7)),
                    template_hole 19))),
              template_var 3))),
        template_equation
         (template_var 10,
          template_app
           (template_app (template_hole 4, template_var 0),
            template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 13, template_var 1)),
              t_empty)
            ),
        template_negation
         (template_equation (template_var 1, template_hole 0))],
       template_predicate (template_app (template_hole 8, t_empty))))]
