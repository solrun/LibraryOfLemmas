Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SRCTransformsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Cancellation" (required by "Draft.SRCTransformsMoreTemplates" via "Draft.SRCTransforms" via "HOL-Library.Multiset")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SRCTransformsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SRCTransformsMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.143s elapsed time, 0.593s cpu time, 0.054s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SRCTransformsMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Set_Algebras"
### 0.203s elapsed time, 0.826s cpu time, 0.054s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SRCTransformsMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
### theory "HOL-Library.Nat_Bijection"
### 0.343s elapsed time, 1.380s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SRCTransformsMoreTemplates" via "Draft.ExtrEqs")
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.428s elapsed time, 1.718s cpu time, 0.126s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.SRCTransformsMoreTemplates" via "Draft.SRCTransforms")
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.965s elapsed time, 3.625s cpu time, 0.869s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
### theory "HOL-Library.Stream"
### 1.098s elapsed time, 3.927s cpu time, 0.921s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  mset :: "'a list => 'a multiset"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Tree"
### 1.995s elapsed time, 6.197s cpu time, 1.170s GC time
Loading theory "Draft.Templates" (required by "Draft.SRCTransformsMoreTemplates" via "Draft.ExtrEqs")
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.106s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SRCTransformsMoreTemplates")
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.544s elapsed time, 1.131s cpu time, 0.106s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
### theory "HOL-Library.Multiset"
### 3.050s elapsed time, 7.055s cpu time, 1.328s GC time
Loading theory "Draft.SRCTransforms" (required by "Draft.SRCTransformsMoreTemplates")
consts
  antec :: "'a sequent => 'a form multiset"
consts
  succ :: "'a sequent => 'a form multiset"
consts
  mset :: "'a sequent => 'a form multiset"
consts
  seq_size :: "'a sequent => nat"
overloading
  extend \<equiv> extend :: 'a sequent => 'a sequent => 'a sequent
  extendRule \<equiv> extendRule ::
    'a sequent
    => 'a sequent list * 'a sequent => 'a sequent list * 'a sequent
  uniqueConclusion \<equiv> uniqueConclusion ::
    ('a sequent list * 'a sequent) set => bool
consts
  max_list :: "nat list => nat"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "Axp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "upRulesp"
  Proving monotonicity ...
### Ambiguous input (line 101 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 4 parse trees:
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" extendRule)
###       ("_cargs" ("_position" seq)
###         ("\<^fixed>extRules"
###           ("\<^const>Set.member" ("_position" r) ("_position" R)))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" extendRule)
###       ("\<^fixed>extRules"
###         ("\<^const>Set.member" ("_applC" ("_position" seq) ("_position" r))
###           ("_position" R))))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member"
###       ("_applC" ("_position" extendRule)
###         ("_cargs" ("_position" seq) ("_position" r)))
###       ("\<^fixed>extRules" ("_position" R)))))
### ("\<^const>Pure.imp"
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Set.member" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.Trueprop"
###     ("\<^fixed>extRules"
###       ("\<^const>Set.member"
###         ("_applC" ("_position" extendRule)
###           ("_cargs" ("_position" seq) ("_position" r)))
###         ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "extRulesp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "leftPrincipal"
  Proving monotonicity ...
Proofs for inductive predicate(s) "rightPrincipal"
  Proving monotonicity ...
Proofs for inductive predicate(s) "derivablep"
  Proving monotonicity ...
Proofs for inductive predicate(s) "derivable'p"
  Proving monotonicity ...
overloading
  invertible \<equiv> invertible ::
    'a sequent list * 'a sequent
    => ('a sequent list * 'a sequent) set => bool
  invertible_set \<equiv> invertible_set ::
    ('a sequent list * 'a sequent) set => bool
### Ambiguous input (line 187 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 25 parse trees (10 displayed):
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invertible)
###     ("_cargs" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" S))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" r) ("_position" R))
###         ("\<^const>Set.member"
###           ("_tuple"
###             ("_applC" ("_position" snd)
###               ("_applC" ("_position" extendRule)
###                 ("_cargs" ("_position" S) ("_position" r))))
###             ("_tuple_arg" ("_position" n)))
###           ("\<^const>SRCTransforms.extRules"
###             ("_applC" ("_position" derivable) ("_position" R)))))
###       ("_Ball" ("_position" p)
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" extendRule)
###               ("_cargs" ("_position" S) ("_position" r)))))
###         ("_Ex_less_eq" ("_position" m) ("_position" n)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###             ("\<^const>SRCTransforms.extRules"
###               ("_applC" ("_position" derivable) ("_position" R)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invertible)
###     ("_cargs" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" S))
###     ("\<^const>HOL.implies"
###       ("\<^const>SRCTransforms.extRules"
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" r) ("_position" R))
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("_applC" ("_position" snd)
###                 ("_applC" ("_position" extendRule)
###                   ("_cargs" ("_position" S) ("_position" r))))
###               ("_tuple_arg" ("_position" n)))
###             ("_applC" ("_position" derivable) ("_position" R)))))
###       ("_Ball" ("_position" p)
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" extendRule)
###               ("_cargs" ("_position" S) ("_position" r)))))
###         ("_Ex_less_eq" ("_position" m) ("_position" n)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###             ("\<^const>SRCTransforms.extRules"
###               ("_applC" ("_position" derivable) ("_position" R)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invertible)
###     ("_cargs" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" S))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" r) ("_position" R))
###         ("\<^const>SRCTransforms.extRules"
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("_applC" ("_position" snd)
###                 ("_applC" ("_position" extendRule)
###                   ("_cargs" ("_position" S) ("_position" r))))
###               ("_tuple_arg" ("_position" n)))
###             ("_applC" ("_position" derivable) ("_position" R)))))
###       ("_Ball" ("_position" p)
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" extendRule)
###               ("_cargs" ("_position" S) ("_position" r)))))
###         ("_Ex_less_eq" ("_position" m) ("_position" n)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###             ("\<^const>SRCTransforms.extRules"
###               ("_applC" ("_position" derivable) ("_position" R)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invertible)
###     ("_cargs" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" S))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.member" ("_position" r)
###         ("\<^const>SRCTransforms.extRules"
###           ("\<^const>HOL.conj" ("_position" R)
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" extendRule)
###                     ("_cargs" ("_position" S) ("_position" r))))
###                 ("_tuple_arg" ("_position" n)))
###               ("_applC" ("_position" derivable) ("_position" R))))))
###       ("_Ball" ("_position" p)
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" extendRule)
###               ("_cargs" ("_position" S) ("_position" r)))))
###         ("_Ex_less_eq" ("_position" m) ("_position" n)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###             ("\<^const>SRCTransforms.extRules"
###               ("_applC" ("_position" derivable) ("_position" R)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invertible)
###     ("_cargs" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" S))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" r) ("_position" R))
###         ("\<^const>Set.member"
###           ("_tuple"
###             ("_applC" ("_position" snd)
###               ("_applC" ("_position" extendRule)
###                 ("_cargs" ("_position" S) ("_position" r))))
###             ("_tuple_arg" ("_position" n)))
###           ("_applC" ("_position" derivable)
###             ("\<^const>SRCTransforms.extRules" ("_position" R)))))
###       ("_Ball" ("_position" p)
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" extendRule)
###               ("_cargs" ("_position" S) ("_position" r)))))
###         ("_Ex_less_eq" ("_position" m) ("_position" n)
###           ("\<^const>Set.member"
###             ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###             ("\<^const>SRCTransforms.extRules"
###               ("_applC" ("_position" derivable) ("_position" R)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invertible)
###     ("_cargs" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" S))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" r) ("_position" R))
###         ("\<^const>Set.member"
###           ("_tuple"
###             ("_applC" ("_position" snd)
###               ("_applC" ("_position" extendRule)
###                 ("_cargs" ("_position" S) ("_position" r))))
###             ("_tuple_arg" ("_position" n)))
###           ("\<^const>SRCTransforms.extRules"
###             ("_applC" ("_position" derivable) ("_position" R)))))
###       ("_Ball" ("_position" p)
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" extendRule)
###               ("_cargs" ("_position" S) ("_position" r)))))
###         ("\<^const>SRCTransforms.extRules"
###           ("_Ex_less_eq" ("_position" m) ("_position" n)
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" derivable) ("_position" R)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invertible)
###     ("_cargs" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" S))
###     ("\<^const>HOL.implies"
###       ("\<^const>SRCTransforms.extRules"
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" r) ("_position" R))
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("_applC" ("_position" snd)
###                 ("_applC" ("_position" extendRule)
###                   ("_cargs" ("_position" S) ("_position" r))))
###               ("_tuple_arg" ("_position" n)))
###             ("_applC" ("_position" derivable) ("_position" R)))))
###       ("_Ball" ("_position" p)
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" extendRule)
###               ("_cargs" ("_position" S) ("_position" r)))))
###         ("\<^const>SRCTransforms.extRules"
###           ("_Ex_less_eq" ("_position" m) ("_position" n)
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" derivable) ("_position" R)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invertible)
###     ("_cargs" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" S))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" r) ("_position" R))
###         ("\<^const>SRCTransforms.extRules"
###           ("\<^const>Set.member"
###             ("_tuple"
###               ("_applC" ("_position" snd)
###                 ("_applC" ("_position" extendRule)
###                   ("_cargs" ("_position" S) ("_position" r))))
###               ("_tuple_arg" ("_position" n)))
###             ("_applC" ("_position" derivable) ("_position" R)))))
###       ("_Ball" ("_position" p)
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" extendRule)
###               ("_cargs" ("_position" S) ("_position" r)))))
###         ("\<^const>SRCTransforms.extRules"
###           ("_Ex_less_eq" ("_position" m) ("_position" n)
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" derivable) ("_position" R)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invertible)
###     ("_cargs" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" S))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.member" ("_position" r)
###         ("\<^const>SRCTransforms.extRules"
###           ("\<^const>HOL.conj" ("_position" R)
###             ("\<^const>Set.member"
###               ("_tuple"
###                 ("_applC" ("_position" snd)
###                   ("_applC" ("_position" extendRule)
###                     ("_cargs" ("_position" S) ("_position" r))))
###                 ("_tuple_arg" ("_position" n)))
###               ("_applC" ("_position" derivable) ("_position" R))))))
###       ("_Ball" ("_position" p)
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" extendRule)
###               ("_cargs" ("_position" S) ("_position" r)))))
###         ("\<^const>SRCTransforms.extRules"
###           ("_Ex_less_eq" ("_position" m) ("_position" n)
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" derivable) ("_position" R)))))))))
### ("\<^const>Pure.eq"
###   ("_applC" ("_position" invertible)
###     ("_cargs" ("_position" r) ("_position" R)))
###   ("\<^const>HOL.All_binder" ("_idts" ("_position" n) ("_position" S))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" r) ("_position" R))
###         ("\<^const>Set.member"
###           ("_tuple"
###             ("_applC" ("_position" snd)
###               ("_applC" ("_position" extendRule)
###                 ("_cargs" ("_position" S) ("_position" r))))
###             ("_tuple_arg" ("_position" n)))
###           ("_applC" ("_position" derivable)
###             ("\<^const>SRCTransforms.extRules" ("_position" R)))))
###       ("_Ball" ("_position" p)
###         ("_applC" ("_position" set)
###           ("_applC" ("_position" fst)
###             ("_applC" ("_position" extendRule)
###               ("_cargs" ("_position" S) ("_position" r)))))
###         ("\<^const>SRCTransforms.extRules"
###           ("_Ex_less_eq" ("_position" m) ("_position" n)
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" derivable) ("_position" R)))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 258 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###         ("_position" \<Delta>))
###       ("_tuple_arg" ("\<^const>Groups.zero_class.zero")))
###     ("_applC" ("_position" derivable)
###       ("\<^const>SRCTransforms.extRules" ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###         ("_position" \<Delta>))
###       ("_tuple_arg" ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>SRCTransforms.extRules"
###       ("_applC" ("_position" derivable) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SRCTransforms.extRules"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_tuple_arg" ("\<^const>Groups.zero_class.zero")))
###       ("_applC" ("_position" derivable) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 276 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###         ("_position" \<Delta>))
###       ("_tuple_arg" ("\<^const>Groups.zero_class.zero")))
###     ("_applC" ("_position" derivable)
###       ("\<^const>SRCTransforms.extRules" ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###         ("_position" \<Delta>))
###       ("_tuple_arg" ("\<^const>Groups.zero_class.zero")))
###     ("\<^const>SRCTransforms.extRules"
###       ("_applC" ("_position" derivable) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SRCTransforms.extRules"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_tuple_arg" ("\<^const>Groups.zero_class.zero")))
###       ("_applC" ("_position" derivable) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 420 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 5 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" r) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" r) ("_position" Ax)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" snd)
###               ("_applC" ("_position" extendRule)
###                 ("_cargs" ("_position" S) ("_position" r))))
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("_position" \<Delta>))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" p)
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" fst)
###                   ("_applC" ("_position" extendRule)
###                     ("_cargs" ("_position" S) ("_position" r)))))
###               ("_Ex_less_eq" ("_position" m) ("_position" n)
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###                   ("\<^const>SRCTransforms.extRules"
###                     ("_applC" ("_position" derivable)
###                       ("_position" R)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" lastRule)
###       ("_cargs"
###         ("_tuple"
###           ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###             ("_position" \<Delta>))
###           ("_tuple_arg"
###             ("\<^const>Groups.plus_class.plus" ("_position" n)
###               ("\<^const>Groups.one_class.one"))))
###         ("_cargs" ("_position" r) ("_position" R))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" r) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" r) ("_position" Ax)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" snd)
###               ("_applC" ("_position" extendRule)
###                 ("_cargs" ("_position" S) ("_position" r))))
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("_position" \<Delta>))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" p)
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" fst)
###                   ("_applC" ("_position" extendRule)
###                     ("_cargs" ("_position" S) ("_position" r)))))
###               ("\<^const>SRCTransforms.extRules"
###                 ("_Ex_less_eq" ("_position" m) ("_position" n)
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" p)
###                       ("_tuple_arg" ("_position" m)))
###                     ("_applC" ("_position" derivable)
###                       ("_position" R)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" lastRule)
###       ("_cargs"
###         ("_tuple"
###           ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###             ("_position" \<Delta>))
###           ("_tuple_arg"
###             ("\<^const>Groups.plus_class.plus" ("_position" n)
###               ("\<^const>Groups.one_class.one"))))
###         ("_cargs" ("_position" r) ("_position" R))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" r) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" r) ("_position" Ax)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" snd)
###               ("_applC" ("_position" extendRule)
###                 ("_cargs" ("_position" S) ("_position" r))))
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("_position" \<Delta>))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>SRCTransforms.extRules"
###               ("_Ball" ("_position" p)
###                 ("_applC" ("_position" set)
###                   ("_applC" ("_position" fst)
###                     ("_applC" ("_position" extendRule)
###                       ("_cargs" ("_position" S) ("_position" r)))))
###                 ("_Ex_less_eq" ("_position" m) ("_position" n)
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" p)
###                       ("_tuple_arg" ("_position" m)))
###                     ("_applC" ("_position" derivable)
###                       ("_position" R)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" lastRule)
###       ("_cargs"
###         ("_tuple"
###           ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###             ("_position" \<Delta>))
###           ("_tuple_arg"
###             ("\<^const>Groups.plus_class.plus" ("_position" n)
###               ("\<^const>Groups.one_class.one"))))
###         ("_cargs" ("_position" r) ("_position" R))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" r) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" r) ("_position" Ax)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" snd)
###               ("_applC" ("_position" extendRule)
###                 ("_cargs" ("_position" S) ("_position" r))))
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("_position" \<Delta>))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" p)
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" fst)
###                   ("_applC" ("_position" extendRule)
###                     ("_cargs" ("_position" S) ("_position" r)))))
###               ("_Ex_less_eq" ("_position" m) ("_position" n)
###                 ("\<^const>SRCTransforms.extRules"
###                   ("\<^const>Set.member"
###                     ("_tuple" ("_position" p)
###                       ("_tuple_arg" ("_position" m)))
###                     ("_applC" ("_position" derivable)
###                       ("_position" R)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" lastRule)
###       ("_cargs"
###         ("_tuple"
###           ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###             ("_position" \<Delta>))
###           ("_tuple_arg"
###             ("\<^const>Groups.plus_class.plus" ("_position" n)
###               ("\<^const>Groups.one_class.one"))))
###         ("_cargs" ("_position" r) ("_position" R))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Set.member" ("_position" r) ("_position" R)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" r) ("_position" Ax)))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("_applC" ("_position" snd)
###               ("_applC" ("_position" extendRule)
###                 ("_cargs" ("_position" S) ("_position" r))))
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("_position" \<Delta>))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_Ball" ("_position" p)
###               ("_applC" ("_position" set)
###                 ("_applC" ("_position" fst)
###                   ("_applC" ("_position" extendRule)
###                     ("_cargs" ("_position" S) ("_position" r)))))
###               ("_Ex_less_eq" ("_position" m) ("_position" n)
###                 ("\<^const>Set.member"
###                   ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###                   ("_applC" ("_position" derivable)
###                     ("\<^const>SRCTransforms.extRules"
###                       ("_position" R)))))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" lastRule)
###       ("_cargs"
###         ("_tuple"
###           ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###             ("_position" \<Delta>))
###           ("_tuple_arg"
###             ("\<^const>Groups.plus_class.plus" ("_position" n)
###               ("\<^const>Groups.one_class.one"))))
###         ("_cargs" ("_position" r) ("_position" R))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Proofs for inductive predicate(s) "lastRule"
  Proving monotonicity ...
### Ambiguous input (line 430 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 5 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S) ("_position" Ps))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" extendRule)
###           ("_cargs" ("_position" S) ("_position" r)))
###         ("_tuple" ("_position" Ps)
###           ("_tuple_arg"
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("_position" \<Delta>)))))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" p)
###           ("_applC" ("_position" set) ("_position" Ps))
###           ("_Ex_less_eq" ("_position" m) ("_position" n)
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###               ("\<^const>SRCTransforms.extRules"
###                 ("_applC" ("_position" derivable) ("_position" R))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" r) ("_position" R))
###           ("\<^const>Set.not_member" ("_position" r) ("_position" Ax)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S) ("_position" Ps))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" extendRule)
###           ("_cargs" ("_position" S) ("_position" r)))
###         ("_tuple" ("_position" Ps)
###           ("_tuple_arg"
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("_position" \<Delta>)))))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" p)
###           ("_applC" ("_position" set) ("_position" Ps))
###           ("\<^const>SRCTransforms.extRules"
###             ("_Ex_less_eq" ("_position" m) ("_position" n)
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" derivable) ("_position" R))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" r) ("_position" R))
###           ("\<^const>Set.not_member" ("_position" r) ("_position" Ax)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S) ("_position" Ps))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" extendRule)
###           ("_cargs" ("_position" S) ("_position" r)))
###         ("_tuple" ("_position" Ps)
###           ("_tuple_arg"
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("_position" \<Delta>)))))
###       ("\<^const>HOL.conj"
###         ("\<^const>SRCTransforms.extRules"
###           ("_Ball" ("_position" p)
###             ("_applC" ("_position" set) ("_position" Ps))
###             ("_Ex_less_eq" ("_position" m) ("_position" n)
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" derivable) ("_position" R))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" r) ("_position" R))
###           ("\<^const>Set.not_member" ("_position" r) ("_position" Ax)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S) ("_position" Ps))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" extendRule)
###           ("_cargs" ("_position" S) ("_position" r)))
###         ("_tuple" ("_position" Ps)
###           ("_tuple_arg"
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("_position" \<Delta>)))))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" p)
###           ("_applC" ("_position" set) ("_position" Ps))
###           ("_Ex_less_eq" ("_position" m) ("_position" n)
###             ("\<^const>SRCTransforms.extRules"
###               ("\<^const>Set.member"
###                 ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###                 ("_applC" ("_position" derivable) ("_position" R))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" r) ("_position" R))
###           ("\<^const>Set.not_member" ("_position" r) ("_position" Ax)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.Ex_binder" ("_idts" ("_position" S) ("_position" Ps))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq"
###         ("_applC" ("_position" extendRule)
###           ("_cargs" ("_position" S) ("_position" r)))
###         ("_tuple" ("_position" Ps)
###           ("_tuple_arg"
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("_position" \<Delta>)))))
###       ("\<^const>HOL.conj"
###         ("_Ball" ("_position" p)
###           ("_applC" ("_position" set) ("_position" Ps))
###           ("_Ex_less_eq" ("_position" m) ("_position" n)
###             ("\<^const>Set.member"
###               ("_tuple" ("_position" p) ("_tuple_arg" ("_position" m)))
###               ("_applC" ("_position" derivable)
###                 ("\<^const>SRCTransforms.extRules" ("_position" R))))))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" r) ("_position" R))
###           ("\<^const>Set.not_member" ("_position" r) ("_position" Ax)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 463 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" Ps) ("_tuple_arg" ("_position" C)))
###     ("\<^const>SRCTransforms.extRules" ("_position" R))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SRCTransforms.extRules"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" Ps) ("_tuple_arg" ("_position" C)))
###       ("_position" R))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 474 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###         ("_position" \<Delta>))
###       ("_tuple_arg" ("_position" n)))
###     ("_applC" ("_position" derivable)
###       ("\<^const>SRCTransforms.extRules" ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###         ("_position" \<Delta>))
###       ("_tuple_arg" ("_position" n)))
###     ("\<^const>SRCTransforms.extRules"
###       ("_applC" ("_position" derivable) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SRCTransforms.extRules"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_tuple_arg" ("_position" n)))
###       ("_applC" ("_position" derivable) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 477 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>SRCTransforms.sequent.Sequent"
###         ("\<^const>Groups.plus_class.plus" ("_position" \<Gamma>)
###           ("_position" \<Gamma>'))
###         ("\<^const>Groups.plus_class.plus" ("_position" \<Delta>)
###           ("_position" \<Delta>')))
###       ("_tuple_arg" ("_position" n)))
###     ("_applC" ("_position" derivable)
###       ("\<^const>SRCTransforms.extRules" ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple"
###       ("\<^const>SRCTransforms.sequent.Sequent"
###         ("\<^const>Groups.plus_class.plus" ("_position" \<Gamma>)
###           ("_position" \<Gamma>'))
###         ("\<^const>Groups.plus_class.plus" ("_position" \<Delta>)
###           ("_position" \<Delta>')))
###       ("_tuple_arg" ("_position" n)))
###     ("\<^const>SRCTransforms.extRules"
###       ("_applC" ("_position" derivable) ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SRCTransforms.extRules"
###     ("\<^const>Set.member"
###       ("_tuple"
###         ("\<^const>SRCTransforms.sequent.Sequent"
###           ("\<^const>Groups.plus_class.plus" ("_position" \<Gamma>)
###             ("_position" \<Gamma>'))
###           ("\<^const>Groups.plus_class.plus" ("_position" \<Delta>)
###             ("_position" \<Delta>')))
###         ("_tuple_arg" ("_position" n)))
###       ("_applC" ("_position" derivable) ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 567 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" T) ("_tuple_arg" ("_position" n)))
###     ("_applC" ("_position" derivable)
###       ("\<^const>SRCTransforms.extRules"
###         ("\<^const>Set.union"
###           ("\<^const>Set.union" ("_position" R)
###             ("_Finset" ("_position" r1)))
###           ("_Finset" ("_position" r2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" T) ("_tuple_arg" ("_position" n)))
###     ("\<^const>SRCTransforms.extRules"
###       ("_applC" ("_position" derivable)
###         ("\<^const>Set.union"
###           ("\<^const>Set.union" ("_position" R)
###             ("_Finset" ("_position" r1)))
###           ("_Finset" ("_position" r2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SRCTransforms.extRules"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" T) ("_tuple_arg" ("_position" n)))
###       ("_applC" ("_position" derivable)
###         ("\<^const>Set.union"
###           ("\<^const>Set.union" ("_position" R)
###             ("_Finset" ("_position" r1)))
###           ("_Finset" ("_position" r2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 568 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_Ex_less_eq" ("_position" m) ("_position" n)
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" T) ("_tuple_arg" ("_position" m)))
###       ("_applC" ("_position" derivable)
###         ("\<^const>SRCTransforms.extRules"
###           ("\<^const>Set.union" ("_position" R)
###             ("_Finset" ("_position" r2))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SRCTransforms.extRules"
###     ("_Ex_less_eq" ("_position" m) ("_position" n)
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" T) ("_tuple_arg" ("_position" m)))
###         ("_applC" ("_position" derivable)
###           ("\<^const>Set.union" ("_position" R)
###             ("_Finset" ("_position" r2))))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ex_less_eq" ("_position" m) ("_position" n)
###     ("\<^const>SRCTransforms.extRules"
###       ("\<^const>Set.member"
###         ("_tuple" ("_position" T) ("_tuple_arg" ("_position" m)))
###         ("_applC" ("_position" derivable)
###           ("\<^const>Set.union" ("_position" R)
###             ("_Finset" ("_position" r2))))))))
### ("\<^const>HOL.Trueprop"
###   ("_Ex_less_eq" ("_position" m) ("_position" n)
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" T) ("_tuple_arg" ("_position" m)))
###       ("\<^const>SRCTransforms.extRules"
###         ("_applC" ("_position" derivable)
###           ("\<^const>Set.union" ("_position" R)
###             ("_Finset" ("_position" r2))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 667 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" T) ("_tuple_arg" ("_position" n)))
###     ("_applC" ("_position" derivable)
###       ("\<^const>SRCTransforms.extRules"
###         ("\<^const>Set.union" ("_position" R)
###           ("_Finset" ("_position" r1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" T) ("_tuple_arg" ("_position" n)))
###     ("\<^const>SRCTransforms.extRules"
###       ("_applC" ("_position" derivable)
###         ("\<^const>Set.union" ("_position" R)
###           ("_Finset" ("_position" r1)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SRCTransforms.extRules"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" T) ("_tuple_arg" ("_position" n)))
###       ("_applC" ("_position" derivable)
###         ("\<^const>Set.union" ("_position" R)
###           ("_Finset" ("_position" r1)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 668 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 75 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" \<Gamma>)
###       ("_idts" ("_position" \<Delta>) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.implies"
###         ("\<^const>SRCTransforms.extRules"
###           ("\<^const>Set.member"
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Delta>)
###                 ("_position" A)))
###             ("_applC" ("_position" derivable') ("_position" R))))
###         ("\<^const>Set.member"
###           ("\<^const>SRCTransforms.sequent.Sequent"
###             ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Gamma>)
###               ("_position" A))
###             ("_position" \<Delta>))
###           ("\<^const>SRCTransforms.extRules"
###             ("_applC" ("_position" derivable') ("_position" R)))))
###       ("\<^const>Set.member"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_applC" ("_position" derivable')
###           ("\<^const>SRCTransforms.extRules" ("_position" R)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" \<Gamma>)
###       ("_idts" ("_position" \<Delta>) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member"
###           ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###             ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Delta>)
###               ("_position" A)))
###           ("\<^const>SRCTransforms.extRules"
###             ("_applC" ("_position" derivable') ("_position" R))))
###         ("\<^const>Set.member"
###           ("\<^const>SRCTransforms.sequent.Sequent"
###             ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Gamma>)
###               ("_position" A))
###             ("_position" \<Delta>))
###           ("\<^const>SRCTransforms.extRules"
###             ("_applC" ("_position" derivable') ("_position" R)))))
###       ("\<^const>Set.member"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_applC" ("_position" derivable')
###           ("\<^const>SRCTransforms.extRules" ("_position" R)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" \<Gamma>)
###       ("_idts" ("_position" \<Delta>) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member"
###           ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###             ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Delta>)
###               ("_position" A)))
###           ("_applC" ("_position" derivable')
###             ("\<^const>SRCTransforms.extRules" ("_position" R))))
###         ("\<^const>Set.member"
###           ("\<^const>SRCTransforms.sequent.Sequent"
###             ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Gamma>)
###               ("_position" A))
###             ("_position" \<Delta>))
###           ("\<^const>SRCTransforms.extRules"
###             ("_applC" ("_position" derivable') ("_position" R)))))
###       ("\<^const>Set.member"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_applC" ("_position" derivable')
###           ("\<^const>SRCTransforms.extRules" ("_position" R)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" \<Gamma>)
###       ("_idts" ("_position" \<Delta>) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>SRCTransforms.extRules"
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Delta>)
###                 ("_position" A)))
###             ("_applC" ("_position" derivable')
###               ("\<^const>SRCTransforms.extRules" ("_position" R))))
###           ("\<^const>Set.member"
###             ("\<^const>SRCTransforms.sequent.Sequent"
###               ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Gamma>)
###                 ("_position" A))
###               ("_position" \<Delta>))
###             ("_applC" ("_position" derivable') ("_position" R)))))
###       ("\<^const>Set.member"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_applC" ("_position" derivable')
###           ("\<^const>SRCTransforms.extRules" ("_position" R)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" \<Gamma>)
###       ("_idts" ("_position" \<Delta>) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.implies"
###         ("\<^const>SRCTransforms.extRules"
###           ("\<^const>Set.member"
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Delta>)
###                 ("_position" A)))
###             ("_applC" ("_position" derivable') ("_position" R))))
###         ("\<^const>SRCTransforms.extRules"
###           ("\<^const>Set.member"
###             ("\<^const>SRCTransforms.sequent.Sequent"
###               ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Gamma>)
###                 ("_position" A))
###               ("_position" \<Delta>))
###             ("_applC" ("_position" derivable') ("_position" R)))))
###       ("\<^const>Set.member"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_applC" ("_position" derivable')
###           ("\<^const>SRCTransforms.extRules" ("_position" R)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" \<Gamma>)
###       ("_idts" ("_position" \<Delta>) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member"
###           ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###             ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Delta>)
###               ("_position" A)))
###           ("\<^const>SRCTransforms.extRules"
###             ("_applC" ("_position" derivable') ("_position" R))))
###         ("\<^const>SRCTransforms.extRules"
###           ("\<^const>Set.member"
###             ("\<^const>SRCTransforms.sequent.Sequent"
###               ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Gamma>)
###                 ("_position" A))
###               ("_position" \<Delta>))
###             ("_applC" ("_position" derivable') ("_position" R)))))
###       ("\<^const>Set.member"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_applC" ("_position" derivable')
###           ("\<^const>SRCTransforms.extRules" ("_position" R)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" \<Gamma>)
###       ("_idts" ("_position" \<Delta>) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.implies"
###         ("\<^const>Set.member"
###           ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###             ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Delta>)
###               ("_position" A)))
###           ("_applC" ("_position" derivable')
###             ("\<^const>SRCTransforms.extRules" ("_position" R))))
###         ("\<^const>SRCTransforms.extRules"
###           ("\<^const>Set.member"
###             ("\<^const>SRCTransforms.sequent.Sequent"
###               ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Gamma>)
###                 ("_position" A))
###               ("_position" \<Delta>))
###             ("_applC" ("_position" derivable') ("_position" R)))))
###       ("\<^const>Set.member"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_applC" ("_position" derivable')
###           ("\<^const>SRCTransforms.extRules" ("_position" R)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" \<Gamma>)
###       ("_idts" ("_position" \<Delta>) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.member"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Delta>)
###             ("_position" A)))
###         ("\<^const>SRCTransforms.extRules"
###           ("\<^const>HOL.implies"
###             ("_applC" ("_position" derivable')
###               ("\<^const>SRCTransforms.extRules" ("_position" R)))
###             ("\<^const>Set.member"
###               ("\<^const>SRCTransforms.sequent.Sequent"
###                 ("\<^const>SRCTransforms.multiset_plus"
###                   ("_position" \<Gamma>) ("_position" A))
###                 ("_position" \<Delta>))
###               ("_applC" ("_position" derivable') ("_position" R))))))
###       ("\<^const>Set.member"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_applC" ("_position" derivable')
###           ("\<^const>SRCTransforms.extRules" ("_position" R)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" \<Gamma>)
###       ("_idts" ("_position" \<Delta>) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>Set.member"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Delta>)
###             ("_position" A)))
###         ("_applC" ("_position" derivable')
###           ("\<^const>SRCTransforms.extRules"
###             ("\<^const>HOL.implies"
###               ("\<^const>SRCTransforms.extRules" ("_position" R))
###               ("\<^const>Set.member"
###                 ("\<^const>SRCTransforms.sequent.Sequent"
###                   ("\<^const>SRCTransforms.multiset_plus"
###                     ("_position" \<Gamma>) ("_position" A))
###                   ("_position" \<Delta>))
###                 ("_applC" ("_position" derivable') ("_position" R)))))))
###       ("\<^const>Set.member"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_applC" ("_position" derivable')
###           ("\<^const>SRCTransforms.extRules" ("_position" R)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.All_binder"
###     ("_idts" ("_position" \<Gamma>)
###       ("_idts" ("_position" \<Delta>) ("_position" A)))
###     ("\<^const>HOL.implies"
###       ("\<^const>SRCTransforms.extRules"
###         ("\<^const>HOL.implies"
###           ("\<^const>Set.member"
###             ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###               ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Delta>)
###                 ("_position" A)))
###             ("\<^const>SRCTransforms.extRules"
###               ("_applC" ("_position" derivable') ("_position" R))))
###           ("\<^const>Set.member"
###             ("\<^const>SRCTransforms.sequent.Sequent"
###               ("\<^const>SRCTransforms.multiset_plus" ("_position" \<Gamma>)
###                 ("_position" A))
###               ("_position" \<Delta>))
###             ("_applC" ("_position" derivable') ("_position" R)))))
###       ("\<^const>Set.member"
###         ("\<^const>SRCTransforms.sequent.Sequent" ("_position" \<Gamma>)
###           ("_position" \<Delta>))
###         ("_applC" ("_position" derivable')
###           ("\<^const>SRCTransforms.extRules" ("_position" R)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 671 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" T)
###     ("_applC" ("_position" derivable')
###       ("\<^const>SRCTransforms.extRules" ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member" ("_position" T)
###     ("\<^const>SRCTransforms.extRules"
###       ("_applC" ("_position" derivable') ("_position" R)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SRCTransforms.extRules"
###     ("\<^const>Set.member" ("_position" T)
###       ("_applC" ("_position" derivable') ("_position" R)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 743 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" T) ("_tuple_arg" ("_position" n)))
###     ("_applC" ("_position" derivable)
###       ("\<^const>SRCTransforms.extRules"
###         ("\<^const>Set.union"
###           ("\<^const>Set.union" ("_position" R)
###             ("_Finset" ("_position" r1)))
###           ("_Finset" ("_position" r2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" T) ("_tuple_arg" ("_position" n)))
###     ("\<^const>SRCTransforms.extRules"
###       ("_applC" ("_position" derivable)
###         ("\<^const>Set.union"
###           ("\<^const>Set.union" ("_position" R)
###             ("_Finset" ("_position" r1)))
###           ("_Finset" ("_position" r2)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SRCTransforms.extRules"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" T) ("_tuple_arg" ("_position" n)))
###       ("_applC" ("_position" derivable)
###         ("\<^const>Set.union"
###           ("\<^const>Set.union" ("_position" R)
###             ("_Finset" ("_position" r1)))
###           ("_Finset" ("_position" r2)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 744 of "$AFP/SequentInvertibility/SRCTransforms.thy") produces 3 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" T) ("_tuple_arg" ("_position" n)))
###     ("_applC" ("_position" derivable)
###       ("\<^const>SRCTransforms.extRules"
###         ("\<^const>Set.union" ("_position" R)
###           ("_Finset" ("_position" r3)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Set.member"
###     ("_tuple" ("_position" T) ("_tuple_arg" ("_position" n)))
###     ("\<^const>SRCTransforms.extRules"
###       ("_applC" ("_position" derivable)
###         ("\<^const>Set.union" ("_position" R)
###           ("_Finset" ("_position" r3)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>SRCTransforms.extRules"
###     ("\<^const>Set.member"
###       ("_tuple" ("_position" T) ("_tuple_arg" ("_position" n)))
###       ("_applC" ("_position" derivable)
###         ("\<^const>Set.union" ("_position" R)
###           ("_Finset" ("_position" r3)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.SRCTransforms"
### 1.477s elapsed time, 2.199s cpu time, 0.904s GC time
Loading theory "Draft.SRCTransformsMoreTemplates"
val templateLemmas =
   [("SRCTransforms.obv", "?a = (fst ?a, snd ?a)",
     template_equation
      (template_var 0,
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("SRCTransforms.extendEmpty",
     "extend ( \<Empt> \<Rightarrow>* \<Empt>) ?C = ?C",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_hole 0)),
         template_var 0),
       template_var 0)),
    ("SRCTransforms.characteriseSeq", "EX A B. ?C = ( A \<Rightarrow>* B)",
     template_predicate (template_app (template_hole 2, t_empty))),
    ("SRCTransforms.upRule_Size", "?r : upRules ==> seq_size (snd ?r) = 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("SRCTransforms.extRulesp_extRules_eq",
     "extRulesp (%x. x : ?R) = (%x. x : ?R*)",
     template_equation (template_app (template_hole 2, t_empty), t_empty)),
    ("SRCTransforms.derivable'p_derivable'_eq",
     "derivable'p (%x. x : ?R) = (%x. x : derivable' ?R)",
     template_equation (template_app (template_hole 3, t_empty), t_empty)),
    ("SRCTransforms.extendCommute",
     "extend ?S (extend ?R ?c) = extend ?R (extend ?S ?c)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("SRCTransforms.extendAssoc",
     "extend ?S (extend ?R ?c) = extend (extend ?S ?R) ?c",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("SRCTransforms.nonEmptySet", "?A ~= [] --> (EX a. a : set ?A)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_hole 3))),
           template_app (template_hole 2, t_empty))
         )),
    ("SRCTransforms.extended_Ax_prems_empty",
     "?r : Ax ==> fst (extendRule ?S ?r) = []",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_hole 0))),
    ("SRCTransforms.deriv_to_deriv",
     "(?C, ?n) : derivable ?R ==> ?C : derivable' ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SRCTransforms.derivablep_derivable_eq",
     "derivablep (%x. x : ?R) = (%x xa. (x, xa) : derivable ?R)",
     template_equation (template_app (template_hole 4, t_empty), t_empty)),
    ("SRCTransforms.mapAssoc",
     "map (extend ?S) (map (extend ?R) ?c) =
      map (extend (extend ?S ?R)) ?c",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1))),
         template_var 0))),
    ("SRCTransforms.nonPrincipalID",
     "?r : Ax ==> ~ rightPrincipal ?r ?A & ~ leftPrincipal ?r ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_hole 4)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 0))),
             template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("SRCTransforms.deriv_to_deriv2",
     "?C : derivable' ?R ==> EX n. (?C, n) : derivable ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("SRCTransforms.mapCommute",
     "map (extend ?S) (map (extend ?R) ?c) =
      map (extend ?R) (map (extend ?S) ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("SRCTransforms.extendFalsum",
     "extend ?S ( \<LM> ff  \<RM> \<Rightarrow>* \<Empt>) =
      ( ?\<Gamma> \<Rightarrow>* ?\<Delta>) ==>
      ff :# ?\<Gamma>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 2),
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_hole 3),
                  template_hole 2)),
              template_hole 2)),
          template_app
           (template_app (template_hole 5, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_hole 3),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SRCTransforms.antec_upRule",
     "(?Ps,  ?\<Phi> \<Rightarrow>* ?\<Psi>) : upRules ==>
      ?\<Phi> = \<Empt> | (EX A. ?\<Phi> = \<LM> A  \<RM>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 2)),
             template_app (template_hole 1, t_empty))
           ))),
    ("SRCTransforms.succ_upRule",
     "(?Ps,  ?\<Phi> \<Rightarrow>* ?\<Psi>) : upRules ==>
      ?\<Psi> = \<Empt> | (EX A. ?\<Psi> = \<LM> A  \<RM>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))),
              template_hole 5)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_hole 2)),
             template_app (template_hole 1, t_empty))
           ))),
    ("SRCTransforms.containFalsum",
     "[| ff :# ?\<Gamma>; Ax <= ?R |]
      ==> ( ?\<Gamma> \<Rightarrow>* ?\<Delta>, 0) : derivable ?R*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_hole 9),
              template_app (template_hole 8, template_var 2))
            ),
        template_inequation (less_equals, template_hole 6, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_hole 2)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)))
           ))),
    ("SRCTransforms.getAx",
     "lastRule ( ?\<Gamma> \<Rightarrow>* ?\<Delta>, 0) ?r ?R ==>
      ?r : Ax &
      (EX S. extendRule S ?r = ([],  ?\<Gamma> \<Rightarrow>* ?\<Delta>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app
                     (template_hole 10,
                      template_app
                       (template_app (template_hole 9, template_var 3),
                        template_var 2)),
                    template_hole 8)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 1),
                 template_hole 5)),
             template_app (template_hole 4, t_empty))
           ))),
    ("SRCTransforms.containID",
     "[| At ?i :# ?\<Gamma> & At ?i :# ?\<Delta>; Ax <= ?R |]
      ==> ( ?\<Gamma> \<Rightarrow>* ?\<Delta>, 0) : derivable ?R*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 3)),
                  template_app (template_hole 8, template_var 2))),
              template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 9, template_var 3)),
                template_app (template_hole 8, template_var 1)))
            ),
        template_inequation (less_equals, template_hole 6, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 1)),
                 template_hole 2)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SRCTransforms.extendID",
     "extend ?S ( \<LM> At ?i  \<RM> \<Rightarrow>* \<LM> At ?i  \<RM>) =
      ( ?\<Gamma> \<Rightarrow>* ?\<Delta>) ==>
      At ?i :# ?\<Gamma> & At ?i :# ?\<Delta>",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 7, template_var 3),
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app (template_hole 4, template_var 2)),
                  template_hole 3)),
              template_app
               (template_app
                 (template_hole 5,
                  template_app (template_hole 4, template_var 2)),
                template_hole 3))),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 4, template_var 2)),
                 template_app (template_hole 0, template_var 1))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 4, template_var 2)),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SRCTransforms.extendContain",
     "[| ?r = (?ps, ?c); (?Ps, ?C) = extendRule ?S ?r; ?p : set ?ps |]
      ==> extend ?S ?p : set ?Ps",
     template_implication
      ([template_equation
         (template_var 6,
          template_app
           (template_app (template_hole 4, template_var 5),
            template_var 4)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_app
           (template_app (template_hole 3, template_var 1),
            template_var 6)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 0),
              template_app (template_hole 1, template_var 5))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app (template_hole 1, template_var 3))
           ))),
    ("SRCTransforms.characteriseAx",
     "?r : Ax ==>
      ?r = ([],  \<LM> ff  \<RM> \<Rightarrow>* \<Empt>) |
      (EX i. ?r =
             ([],  \<LM> At i  \<RM> \<Rightarrow>* \<LM> At i  \<RM>))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_hole 10)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app
                  (template_app (template_hole 7, template_hole 6),
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_hole 2)),
                     template_hole 2)))),
             template_app (template_hole 1, t_empty))
           ))),
    ("SRCTransforms.upRuleCharacterise",
     "(?Ps, ?C) : upRules ==>
      EX F Fs.
         ?C = ( \<Empt> \<Rightarrow>* \<LM> Compound F Fs  \<RM>) |
         ?C = ( \<LM> Compound F Fs  \<RM> \<Rightarrow>* \<Empt>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 0)),
              template_hole 8)
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("SRCTransforms.midMultiset",
     "[| ?\<Gamma> \<oplus> ?A = ?\<Gamma>' \<oplus> ?B; ?A ~= ?B |]
      ==> EX \<Gamma>''.
             ?\<Gamma> = \<Gamma>'' \<oplus> ?B &
             ?\<Gamma>' = \<Gamma>'' \<oplus> ?A",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 3),
            template_app
             (template_app (template_hole 5, template_var 2),
              template_hole 4)),
          template_app
           (template_app (template_hole 6, template_var 1),
            template_app
             (template_app (template_hole 5, template_var 0),
              template_hole 4))),
        template_negation
         (template_equation (template_var 2, template_var 0))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SRCTransforms.dpWeak",
     "[| ( ?\<Gamma> \<Rightarrow>* ?\<Delta>, ?n) : derivable ?R*;
         ?R' <= upRules; ?R = Ax Un ?R' |]
      ==> ( ?\<Gamma> + ?\<Gamma>' \<Rightarrow>* ?\<Delta> + ?\<Delta>',
           ?n)
          : derivable ?R*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_var 6),
                      template_var 5)),
                  template_var 4)),
              template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 3)))
            ),
        template_inequation (less_equals, template_var 2, template_hole 4),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 2, template_hole 1),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 9,
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 0, template_var 6),
                         template_var 1)),
                     template_app
                      (template_app (template_hole 0, template_var 5),
                       template_var 0))),
                 template_var 4)),
             template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 3)))
           ))),
    ("SRCTransforms.characteriseLast",
     "(?C, ?m + 1) : derivable ?R ==>
      EX Ps.
         Ps ~= [] &
         (Ps, ?C) : ?R & (ALL p:set Ps. EX n<=?m. (p, n) : derivable ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 15,
                template_app
                 (template_app (template_hole 14, template_var 2),
                  template_app
                   (template_app (template_hole 13, template_var 1),
                    template_hole 12))),
              template_app (template_hole 11, template_var 0))
            )],
       template_predicate (template_app (template_hole 10, t_empty)))),
    ("SRCTransforms.ruleSet",
     "[| ?R' <= upRules; ?R = Ax Un ?R'; (?Ps, ?C) : ?R* |]
      ==> EX S r. extendRule S r = (?Ps, ?C) & (r : ?R' | r : Ax)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_hole 12),
        template_equation
         (template_var 2,
          template_app
           (template_app (template_hole 10, template_hole 9),
            template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)),
              template_app (template_hole 6, template_var 2))
            )],
       template_predicate (template_app (template_hole 5, t_empty)))),
    ("SRCTransforms.getLast",
     "lastRule ( ?\<Gamma> \<Rightarrow>* ?\<Delta>, ?n + 1) ?r ?R ==>
      EX S Ps.
         extendRule S ?r = (Ps,  ?\<Gamma> \<Rightarrow>* ?\<Delta>) &
         (ALL p:set Ps. EX m<=?n. (p, m) : derivable ?R*) &
         ?r : ?R & ?r ~: Ax",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 20,
                  template_app
                   (template_app
                     (template_hole 19,
                      template_app
                       (template_app (template_hole 18, template_var 4),
                        template_var 3)),
                    template_app
                     (template_app (template_hole 17, template_var 2),
                      template_hole 16))),
                template_var 1),
              template_var 0)
            )],
       template_predicate (template_app (template_hole 15, t_empty)))),
    ("SRCTransforms.removeRedundant",
     "[| ?r1.0 = (?p # ?ps, ?c) & ?r1.0 : upRules;
         ?r2.0 = (?ps, ?c) & ?r2.0 : upRules;
         ?R1.0 <= upRules & ?R = Ax Un ?R1.0;
         (?T, ?n) : derivable ?R Un {?r1.0} Un {?r2.0}* |]
      ==> EX m<=?n. (?T, m) : derivable ?R Un {?r2.0}*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 8),
                  template_app
                   (template_app
                     (template_hole 15,
                      template_app
                       (template_app (template_hole 14, template_var 7),
                        template_var 6)),
                    template_var 5))),
              template_app
               (template_app (template_hole 13, template_var 8),
                template_hole 12))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 4),
                  template_app
                   (template_app (template_hole 15, template_var 6),
                    template_var 5))),
              template_app
               (template_app (template_hole 13, template_var 4),
                template_hole 12))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 11, template_var 3),
                  template_hole 12)),
              template_app
               (template_app (template_hole 10, template_var 2),
                template_app
                 (template_app (template_hole 9, template_hole 8),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app
                       (template_app (template_hole 9, template_var 2),
                        template_app
                         (template_app (template_hole 3, template_var 8),
                          template_hole 2))),
                    template_app
                     (template_app (template_hole 3, template_var 4),
                      template_hole 2)))))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("SRCTransforms.removeCombinable",
     "[| ?r1.0 = (?p # ?ps, ?c) & ?r1.0 : upRules;
         ?r2.0 = (?q # ?ps, ?c) & ?r2.0 : upRules;
         ?r3.0 = (extend ?p ?q # ?ps, ?c) & ?r3.0 : upRules;
         ?R1.0 <= upRules & ?R = Ax Un ?R1.0;
         (?T, ?n) : derivable ?R Un {?r1.0} Un {?r2.0}* |]
      ==> (?T, ?n) : derivable ?R Un {?r3.0}*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 10),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app (template_hole 13, template_var 9),
                        template_var 8)),
                    template_var 7))),
              template_app
               (template_app (template_hole 12, template_var 10),
                template_hole 11))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 6),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app (template_hole 13, template_var 5),
                        template_var 8)),
                    template_var 7))),
              template_app
               (template_app (template_hole 12, template_var 6),
                template_hole 11))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 4),
                  template_app
                   (template_app
                     (template_hole 14,
                      template_app
                       (template_app
                         (template_hole 13,
                          template_app
                           (template_app (template_hole 10, template_var 9),
                            template_var 5)),
                        template_var 8)),
                    template_var 7))),
              template_app
               (template_app (template_hole 12, template_var 4),
                template_hole 11))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_hole 11)),
              template_app
               (template_app (template_hole 8, template_var 2),
                template_app
                 (template_app (template_hole 7, template_hole 6),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_hole 7,
                      template_app
                       (template_app (template_hole 7, template_var 2),
                        template_app
                         (template_app (template_hole 1, template_var 10),
                          template_hole 0))),
                    template_app
                     (template_app (template_hole 1, template_var 6),
                      template_hole 0)))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)),
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 4),
                     template_hole 0)))))
           ))),
    ("SRCTransforms.removeSuperfluous",
     "[| ?r1.0 =
         (( \<Empt> \<Rightarrow>* \<LM> ?A  \<RM>) #
          ( \<LM> ?A  \<RM> \<Rightarrow>* \<Empt>) # ?ps,
          ?c) &
         ?r1.0 : upRules;
         ?R1.0 <= upRules & ?R = Ax Un ?R1.0;
         (?T, ?n) : derivable ?R Un {?r1.0}*;
         ALL \<Gamma> \<Delta> A.
            (( \<Gamma> \<Rightarrow>* \<Delta> \<oplus> A)
             : derivable' ?R* -->
             ( \<Gamma> \<oplus> A \<Rightarrow>* \<Delta>)
             : derivable' ?R*) -->
            ( \<Gamma> \<Rightarrow>* \<Delta>) : derivable' ?R* |]
      ==> ?T : derivable' ?R*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app (template_hole 23, template_var 7),
                  template_app
                   (template_app
                     (template_hole 22,
                      template_app
                       (template_app
                         (template_hole 21,
                          template_app
                           (template_app
                             (template_hole 20, template_hole 19),
                            template_app
                             (template_app
                               (template_hole 18, template_var 6),
                              template_hole 19))),
                        template_app
                         (template_app
                           (template_hole 21,
                            template_app
                             (template_app
                               (template_hole 20,
                                template_app
                                 (template_app
                                   (template_hole 18, template_var 6),
                                  template_hole 19)),
                              template_hole 19)),
                          template_var 5))),
                    template_var 4))),
              template_app
               (template_app (template_hole 17, template_var 7),
                template_hole 16))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 24,
                template_app
                 (template_app (template_hole 15, template_var 3),
                  template_hole 16)),
              template_app
               (template_app (template_hole 14, template_var 2),
                template_app
                 (template_app (template_hole 13, template_hole 12),
                  template_var 3)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 1),
                  template_var 0)),
              template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 13, template_var 2),
                    template_app
                     (template_app (template_hole 7, template_var 7),
                      template_hole 6)))))
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 0,
               template_app (template_hole 8, template_var 2)))
           )))]:
   (string * thm * template) list
### theory "Draft.SRCTransformsMoreTemplates"
### 0.397s elapsed time, 0.632s cpu time, 0.076s GC time
val it = (): unit
