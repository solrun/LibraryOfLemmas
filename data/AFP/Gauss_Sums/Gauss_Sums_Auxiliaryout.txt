Loading theory "HOL-Computational_Algebra.Group_Closure" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Fraction_Field" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Library.Cancellation" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring" via "HOL-Library.Multiset")
Loading theory "HOL-Library.FuncSet" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order" via "HOL-Algebra.Congruence")
class ab_group_add = cancel_comm_monoid_add + group_add +
  assumes "ab_left_minus": "!!a. - a + a = (0::'a)"
  assumes "ab_diff_conv_add_uminus": "!!a b. a - b = a + - b"
Proofs for inductive predicate(s) "group_closurep"
  Proving monotonicity ...
signature CANCEL = sig val proc: Proof.context -> cterm -> thm option end
functor Cancel_Fun (Data: CANCEL_NUMERALS_DATA): CANCEL
instantiation
  fract :: (idom) comm_ring_1
  uminus_fract == uminus :: 'a fract => 'a fract
  one_fract == one_class.one :: 'a fract
  times_fract == times :: 'a fract => 'a fract => 'a fract
  zero_fract == zero_class.zero :: 'a fract
  minus_fract == minus :: 'a fract => 'a fract => 'a fract
  plus_fract == plus :: 'a fract => 'a fract => 'a fract
signature CANCEL_DATA =
  sig
    val dest_coeff: term -> int * term
    val dest_sum: term -> term list
    val find_first_coeff: term -> term list -> int * term list
    val mk_coeff: int * term -> term
    val mk_sum: typ -> term list -> term
    val norm_ss1: simpset
    val norm_ss2: simpset
    val norm_tac: Proof.context -> tactic
    val numeral_simp_tac: Proof.context -> tactic
    val prove_conv:
       tactic list -> Proof.context -> thm list -> term * term -> thm option
    val simplify_meta_eq: Proof.context -> thm -> thm
    val trans_tac: Proof.context -> thm option -> tactic
  end
structure Cancel_Data: CANCEL_DATA
### theory "HOL-Library.FuncSet"
### 0.388s elapsed time, 1.553s cpu time, 0.107s GC time
Loading theory "HOL-Algebra.Congruence" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice" via "HOL-Algebra.Order")
signature CANCEL_SIMPROCS =
  sig
    val diff_cancel: Proof.context -> cterm -> thm option
    val eq_cancel: Proof.context -> cterm -> thm option
    val less_cancel: Proof.context -> cterm -> thm option
    val less_eq_cancel: Proof.context -> cterm -> thm option
  end
structure Cancel_Simprocs: CANCEL_SIMPROCS
### theory "HOL-Library.Cancellation"
### 0.452s elapsed time, 1.809s cpu time, 0.107s GC time
Loading theory "HOL-Library.Multiset" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm" via "HOL-Computational_Algebra.Factorial_Ring")
### theory "HOL-Computational_Algebra.Group_Closure"
### 0.527s elapsed time, 2.105s cpu time, 0.172s GC time
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  multiset :: (type) cancel_comm_monoid_add
  zero_multiset == zero_class.zero :: 'a multiset
  minus_multiset == minus :: 'a multiset => 'a multiset => 'a multiset
  plus_multiset == plus :: 'a multiset => 'a multiset => 'a multiset
### theory "HOL-Library.Function_Algebras"
### 0.110s elapsed time, 0.446s cpu time, 0.000s GC time
Loading theory "HOL-Library.Infinite_Set" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Elementary_Groups")
instantiation
  fract :: (idom) field
  inverse_fract == inverse :: 'a fract => 'a fract
  divide_fract == divide :: 'a fract => 'a fract => 'a fract
instantiation
  fract :: (linordered_idom) linorder
  less_eq_fract == less_eq :: 'a fract => 'a fract => bool
  less_fract == less :: 'a fract => 'a fract => bool
instantiation
  fract :: (linordered_idom) linordered_field
  sgn_fract == sgn :: 'a fract => 'a fract
  abs_fract == abs :: 'a fract => 'a fract
consts
  enumerate :: "'a set => nat => 'a"
instantiation
  fract :: (linordered_idom) distrib_lattice
  inf_fract == inf :: 'a fract => 'a fract => 'a fract
  sup_fract == sup :: 'a fract => 'a fract => 'a fract
### theory "HOL-Computational_Algebra.Fraction_Field"
### 1.037s elapsed time, 3.955s cpu time, 0.622s GC time
Loading theory "HOL-Library.More_List" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS" via "HOL-Computational_Algebra.Polynomial")
locale equivalence
  fixes S :: "('a, 'b) eq_object_scheme"  (structure)
  assumes "equivalence S"
locale partition
  fixes A :: "'a set"
    and B :: "'a set set"
  assumes "Congruence.partition A B"
### theory "HOL-Library.Infinite_Set"
### 0.492s elapsed time, 1.781s cpu time, 0.526s GC time
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.More_List"
### 0.195s elapsed time, 0.769s cpu time, 0.076s GC time
Loading theory "HOL-Library.Power_By_Squaring" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Mod_Exp")
### theory "HOL-Algebra.Congruence"
### 0.917s elapsed time, 3.456s cpu time, 0.691s GC time
Loading theory "HOL-Algebra.Order" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice" via "HOL-Algebra.Lattice")
Found termination order: "size_list size <*mlex*> {}"
### Partially applied constant "Multiset.inter_mset" on left hand side of equation, in theorem:
### semilattice_inf.Inf_fin (\<inter>#) (set (?x # ?xs)) ==
### fold (\<inter>#) ?xs ?x
class monoid_mult = semigroup_mult + power +
  assumes "mult_1_left": "!!a. (1::'a) * a = a"
    and "mult_1_right": "!!a. a * (1::'a) = a"
### theory "HOL-Library.Power_By_Squaring"
### 0.229s elapsed time, 0.898s cpu time, 0.177s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### theory "HOL-Library.Nat_Bijection"
### 0.357s elapsed time, 1.402s cpu time, 0.177s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
### Partially applied constant "Multiset.union_mset" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (\<union>#) (set (?x # ?xs)) ==
### fold (\<union>#) ?xs ?x
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
### theory "HOL-Library.Set_Algebras"
### 0.226s elapsed time, 0.886s cpu time, 0.078s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature MULTISET_SIMPROCS =
  sig
    val subset_cancel_msets: Proof.context -> cterm -> thm option
    val subseteq_cancel_msets: Proof.context -> cterm -> thm option
  end
structure Multiset_Simprocs: MULTISET_SIMPROCS
instantiation
  multiset :: (type) Inf
  Inf_multiset == Inf :: 'a multiset set => 'a multiset
instantiation
  multiset :: (type) Sup
  Sup_multiset == Sup :: 'a multiset set => 'a multiset
consts
  shift :: "'a list => 'a stream => 'a stream"
locale weak_partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order L"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
instantiation
  multiset :: (type) size
  size_multiset == size :: 'a multiset => nat
consts
  snth :: "'a stream => nat => 'a"
locale partial_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "partial_order L"
consts
  stake :: "nat => 'a stream => 'a list"
locale comp_fun_commute
  fixes f :: "'a => 'b => 'b"
  assumes "comp_fun_commute f"
consts
  sdrop :: "nat => 'a stream => 'a stream"
locale weak_partial_order_bottom
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_bottom L"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
locale weak_partial_order_top
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_partial_order_top L"
consts
  mset :: "'a list => 'a multiset"
consts
  cycle :: "'a list => 'a stream"
locale weak_total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_total_order L"
locale total_order
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "total_order L"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Algebra.Order"
### 1.217s elapsed time, 4.607s cpu time, 1.173s GC time
Loading theory "HOL-Algebra.Lattice" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group" via "HOL-Algebra.Complete_Lattice")
consts
  left :: "'a tree => 'a tree"
consts
  flat :: "'a list stream => 'a stream"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
locale weak_upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_upper_semilattice L"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
locale weak_lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lower_semilattice L"
### theory "HOL-Library.Stream"
### 1.260s elapsed time, 4.766s cpu time, 1.283s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
locale weak_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_lattice L"
locale comm_monoid_mset
  fixes f :: "'a => 'a => 'a"  (infixl \<open>\<^bold>*\<close> 70)
    and z :: "'a"  (\<open>\<^bold>1\<close>)
  assumes "comm_monoid_mset (\<^bold>*) \<^bold>1"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class comm_monoid_add = ab_semigroup_add + monoid_add +
  assumes "add_0": "!!a. (0::'a) + a = a"
Found termination order: "size <*mlex*> {}"
class canonically_ordered_monoid_add = ordered_comm_monoid_add +
  assumes "le_iff_add": "!!a b. (a <= b) = (EX c. b = a + c)"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale weak_bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_bounded_lattice L"
Found termination order: "size <*mlex*> {}"
locale upper_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "upper_semilattice L"
locale lower_semilattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lower_semilattice L"
Found termination order: "size <*mlex*> {}"
class comm_monoid_mult = ab_semigroup_mult + monoid_mult + dvd +
  assumes "mult_1": "!!a. (1::'a) * a = a"
locale Lattice.lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "lattice L"
Found termination order: "size <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Lattice.bounded_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "bounded_lattice L"
### theory "HOL-Algebra.Lattice"
### 1.218s elapsed time, 4.585s cpu time, 1.549s GC time
Loading theory "HOL-Algebra.Complete_Lattice" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.Group")
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.278s elapsed time, 4.821s cpu time, 1.558s GC time
Loading theory "HOL-Number_Theory.Fib" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Number_Theory.Fib"
### 0.293s elapsed time, 1.163s cpu time, 0.148s GC time
locale Complete_Lattice.complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "complete_lattice L"
locale weak_complete_lattice
  fixes L :: "('a, 'b) gorder_scheme"  (structure)
  assumes "weak_complete_lattice L"
### theory "HOL-Library.Tree"
### 2.720s elapsed time, 10.253s cpu time, 2.911s GC time
Loading theory "Draft.Templates" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.198s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates")
### theory "HOL-Algebra.Complete_Lattice"
### 0.733s elapsed time, 2.734s cpu time, 0.345s GC time
Loading theory "HOL-Algebra.Group" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group")
instantiation
  multiset :: (preorder) order
  less_eq_multiset == less_eq :: 'a multiset => 'a multiset => bool
  less_multiset == less :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (preorder) ordered_ab_semigroup_add
Proofs for inductive predicate(s) "pw_leq"
  Proving monotonicity ...
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
instantiation
  multiset :: (equal) equal
  equal_multiset == equal_class.equal :: 'a multiset => 'a multiset => bool
instantiation
  multiset :: (random) random
  random_multiset == random_class.random ::
    natural
    => natural * natural
       => ('a multiset * (unit => term)) * natural * natural
instantiation
  multiset :: (full_exhaustive) full_exhaustive
  full_exhaustive_multiset == full_exhaustive_class.full_exhaustive ::
    ('a multiset * (unit => term) => (bool * term list) option)
    => natural => (bool * term list) option
Proofs for inductive predicate(s) "pred_mset"
  Proving monotonicity ...
overloading
  nat_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => nat => 'a
Proofs for inductive predicate(s) "rel_mset'"
  Proving monotonicity ...
overloading
  int_pow \<equiv> pow :: ('a, 'b) monoid_scheme => 'a => int => 'a
### theory "HOL-Library.Multiset"
### 4.663s elapsed time, 17.126s cpu time, 4.145s GC time
Loading theory "HOL-Computational_Algebra.Factorial_Ring" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Computational_Algebra.Primes" via "HOL-Computational_Algebra.Euclidean_Algorithm")
locale submonoid
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "submonoid H G"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.699s elapsed time, 2.207s cpu time, 0.387s GC time
locale subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "subgroup H G"
locale group_hom
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and H :: "('c, 'd) monoid_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "group_hom G H h"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "comm_group G"
### theory "HOL-Algebra.Group"
### 1.404s elapsed time, 3.729s cpu time, 0.560s GC time
Loading theory "HOL-Algebra.Coset" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group")
Loading theory "HOL-Algebra.FiniteProduct" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module" via "HOL-Algebra.Ring")
Proofs for inductive predicate(s) "foldSetDp"
class normalization_semidom = algebraic_semidom +
  semidom_divide_unit_factor +
  fixes normalize :: "'a => 'a"
  assumes
    "unit_factor_mult_normalize": "!!a. unit_factor a * normalize a = a"
    and "normalize_0": "normalize (0::'a) = (0::'a)"
  Proving monotonicity ...
locale normal
  fixes H :: "'a set"
    and G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "normal H G"
locale LCD
  fixes B :: "'b set"
    and D :: "'a set"
    and f :: "'b => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
  assumes "LCD B D (\<cdot>)"
locale ACeD
  fixes D :: "'a set"
    and f :: "'a => 'a => 'a"  (infixl \<open>\<cdot>\<close> 70)
    and e :: "'a"
  assumes "ACeD D (\<cdot>) e"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
locale Group.comm_monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.comm_monoid G"
class semiring_gcd = gcd + normalization_semidom +
  assumes "gcd_dvd1": "!!a b. gcd a b dvd a"
    and "gcd_dvd2": "!!a b. gcd a b dvd b"
    and "gcd_greatest": "!!c a b. [| c dvd a; c dvd b |] ==> c dvd gcd a b"
    and "normalize_gcd": "!!a b. normalize (gcd a b) = gcd a b"
    and "lcm_gcd": "!!a b. lcm a b = normalize (a * b div gcd a b)"
### theory "HOL-Algebra.FiniteProduct"
### 0.459s elapsed time, 1.416s cpu time, 0.230s GC time
Loading theory "HOL-Algebra.Ring" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.Module")
### Ambiguous input (line 611 of "~~/src/HOL/Algebra/Coset.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###       ("_position" H))
###     ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###       ("\<^const>HOL.conj"
###         ("\<^const>Set.member" ("_position" x)
###           ("_applC" ("_position" carrier) ("_position" G)))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" y)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>Set.member"
###             ("\<^const>Group.monoid.mult_indexed"
###               ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                 ("_position" x))
###               ("_index" ("_position" G)) ("_position" y))
###             ("_position" H)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^fixed>r_congruent_indexed" ("_index" ("_position" G))
###     ("\<^const>HOL.eq" ("_position" H)
###       ("_Coll" ("_pattern" ("_position" x) ("_position" y))
###         ("\<^const>HOL.conj"
###           ("\<^const>Set.member" ("_position" x)
###             ("_applC" ("_position" carrier) ("_position" G)))
###           ("\<^const>HOL.conj"
###             ("\<^const>Set.member" ("_position" y)
###               ("_applC" ("_position" carrier) ("_position" G)))
###             ("\<^const>Set.member"
###               ("\<^const>Group.monoid.mult_indexed"
###                 ("\<^const>Group.m_inv_indexed" ("_index" ("_position" G))
###                   ("_position" x))
###                 ("_index" ("_position" G)) ("_position" y))
###               ("_position" H))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
locale abelian_monoid
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_monoid G"
### Cannot skip proof of schematic goal statement
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
### Cannot skip proof of schematic goal statement
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
### theory "HOL-Algebra.Coset"
### 1.183s elapsed time, 3.633s cpu time, 0.554s GC time
Loading theory "HOL-Algebra.Generated_Groups" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group")
class factorial_semiring = normalization_semidom +
  assumes
    "prime_factorization_exists":
      "!!x. x ~= (0::'a) ==>
            EX A. (ALL x. x :# A --> prime_elem x) &
                  normalize (\<Prod>\<^sub># A) = normalize x"
Proofs for inductive predicate(s) "generatep"
  Proving monotonicity ...
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "cring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
carrier (| carrier = ?carrier, ... = ?more |) = ?carrier
partial_object.more (| carrier = ?carrier, ... = ?more |) = ?more
carrier_update ?carrier' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier' ?carrier, ... = ?more |)
partial_object.more_update ?more' (| carrier = ?carrier, ... = ?more |) =
(| carrier = ?carrier, ... = ?more' ?more |)
(\<otimes>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub>) =
?mult
\<one>\<^bsub>(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |)\<^esub> =
?one
monoid.more
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
?more
mult_update ?mult'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult' ?mult, one = ?one, ... = ?more |)
one_update ?one'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one' ?one, ... = ?more |)
monoid.more_update ?more'
 (| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more |) =
(| carrier = ?carrier, mult = ?mult, one = ?one, ... = ?more' ?more |)
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
### ML warning (line 44 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Value identifier (s) has not been referenced.
### ML warning (line 47 of "~~/src/HOL/Algebra/ringsimp.ML"):
### Matches are not exhaustive.
signature RINGSIMP =
  sig
    val add_struct: string * term list -> attribute
    val algebra_tac: Proof.context -> int -> tactic
    val del_struct: string * term list -> attribute
    val print_structures: Proof.context -> unit
  end
structure Ringsimp: RINGSIMP
### theory "HOL-Algebra.Generated_Groups"
### 0.655s elapsed time, 2.010s cpu time, 0.293s GC time
Loading theory "HOL-Algebra.Elementary_Groups" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group")
locale group_disjoint_sum
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and A :: "'a set"
    and B :: "'a set"
  assumes "group_disjoint_sum G A B"
locale Ring.semiring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "semiring R"
locale domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "domain R"
### theory "HOL-Algebra.Elementary_Groups"
### 0.504s elapsed time, 1.540s cpu time, 0.206s GC time
locale ring_hom_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_cring R S h"
class factorial_semiring_gcd = factorial_semiring + Gcd +
  assumes "gcd_eq_gcd_factorial": "!!a b. gcd a b = gcd_factorial a b"
    and "lcm_eq_lcm_factorial": "!!a b. lcm a b = lcm_factorial a b"
    and "Gcd_eq_Gcd_factorial": "!!A. Gcd A = Gcd_factorial A"
    and "Lcm_eq_Lcm_factorial": "!!A. Lcm A = Lcm_factorial A"
### theory "HOL-Algebra.Ring"
### 2.569s elapsed time, 7.250s cpu time, 1.047s GC time
Loading theory "HOL-Algebra.AbelCoset" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom" via "HOL-Algebra.Ideal")
Loading theory "HOL-Algebra.Module" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
locale module
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "module R M"
locale abelian_group_hom
  fixes G :: "('a, 'b) ring_scheme"  (structure)
    and H :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "abelian_group_hom G H h"
### Cannot skip proof of schematic goal statement
locale abelian_group
  fixes G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_group G"
[| ?M <= carrier G; ?g : carrier G; ?h : carrier G |]
==> ?M #>\<^bsub>add_monoid G\<^esub> ?g #>\<^bsub>add_monoid G\<^esub> ?h =
    ?M #>\<^bsub>add_monoid G\<^esub> ?g \<oplus> ?h
[| abelian_group ?G; ?M <= carrier ?G; ?g : carrier ?G; ?h : carrier ?G |]
==> ?M +>\<^bsub>?G\<^esub> ?g +>\<^bsub>?G\<^esub> ?h =
    ?M +>\<^bsub>?G\<^esub> ?g \<oplus>\<^bsub>?G\<^esub> ?h
locale algebra
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "algebra R M"
locale additive_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "additive_subgroup H G"
locale abelian_subgroup
  fixes H :: "'a set"
    and G :: "('a, 'b) ring_scheme"  (structure)
  assumes "abelian_subgroup H G"
locale submodule
  fixes H :: "'c set"
    and R :: "('a, 'b) ring_scheme"
    and M :: "('a, 'c, 'd) module_scheme"  (structure)
  assumes "submodule H R M"
### theory "HOL-Algebra.Module"
### 1.371s elapsed time, 4.189s cpu time, 0.622s GC time
### theory "HOL-Computational_Algebra.Factorial_Ring"
### 6.008s elapsed time, 16.444s cpu time, 2.446s GC time
Loading theory "HOL-Computational_Algebra.Euclidean_Algorithm" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary" via "HOL-Algebra.IntRing" via "HOL-Computational_Algebra.Primes")
Loading theory "HOL-Computational_Algebra.Polynomial" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Algebra.AbelCoset"
### 2.445s elapsed time, 6.825s cpu time, 1.043s GC time
Loading theory "HOL-Algebra.Ideal" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly" via "HOL-Algebra.RingHom")
locale ideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ideal I R"
locale principalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "principalideal I R"
locale maximalideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "maximalideal I R"
instantiation
  poly :: (zero) zero
  zero_poly == zero_class.zero :: 'a poly
locale primeideal
  fixes I :: "'a set"
    and R :: "('a, 'b) ring_scheme"  (structure)
  assumes "primeideal I R"
consts
  Poly :: "'a list => 'a poly"
instantiation
  poly :: ({zero,equal}) equal
  equal_poly == equal_class.equal :: 'a poly => 'a poly => bool
instantiation
  poly :: (comm_monoid_add) comm_monoid_add
  plus_poly == plus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (cancel_comm_monoid_add) cancel_comm_monoid_add
  minus_poly == minus :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (ab_group_add) ab_group_add
  uminus_poly == uminus :: 'a poly => 'a poly
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
instantiation
  poly :: (comm_semiring_0) comm_semiring_0
  times_poly == times :: 'a poly => 'a poly => 'a poly
instantiation
  poly :: (comm_semiring_1) comm_semiring_1
  one_poly == one_class.one :: 'a poly
instantiation
  poly :: (linordered_idom) linordered_idom
  sgn_poly == sgn :: 'a poly => 'a poly
  abs_poly == abs :: 'a poly => 'a poly
  less_eq_poly == less_eq :: 'a poly => 'a poly => bool
  less_poly == less :: 'a poly => 'a poly => bool
class euclidean_semiring_gcd = normalization_euclidean_semiring + Gcd +
  assumes "gcd_eucl": "normalization_euclidean_semiring_class.gcd = gcd"
    and "lcm_eucl": "normalization_euclidean_semiring_class.lcm = lcm"
  assumes "Gcd_eucl": "normalization_euclidean_semiring_class.Gcd = Gcd"
    and "Lcm_eucl": "normalization_euclidean_semiring_class.Lcm = Lcm"
### theory "HOL-Algebra.Ideal"
### 2.051s elapsed time, 6.323s cpu time, 1.303s GC time
Loading theory "HOL-Algebra.RingHom" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group" via "HOL-Algebra.UnivPoly")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale ring_hom_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
  assumes "ring_hom_ring R S h"
Proofs for inductive predicate(s) "algebraic_int"
  Proving monotonicity ...
instantiation
  poly :: (idom_divide) idom_divide
  divide_poly == divide :: 'a poly => 'a poly => 'a poly
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
Found termination order:
  "(%p. size (snd (snd (snd (snd (snd p)))))) <*mlex*> {}"
### theory "HOL-Algebra.RingHom"
### 1.603s elapsed time, 5.329s cpu time, 3.111s GC time
Loading theory "HOL-Algebra.QuotRing" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary" via "HOL-Algebra.IntRing")
Loading theory "HOL-Algebra.UnivPoly" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication" via "HOL-Algebra.Multiplicative_Group")
instantiation
  poly :: ({idom_divide,semidom_divide_unit_factor}) normalization_semidom
  normalize_poly == normalize :: 'a poly => 'a poly
  unit_factor_poly == unit_factor :: 'a poly => 'a poly
locale bound
  fixes z :: "'a"
    and n :: "nat"
    and f :: "nat => 'a"
  assumes "bound z n f"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
class field_unit_factor = field + unit_factor +
  assumes "unit_factor_field": "unit_factor = id"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Proofs for inductive predicate(s) "eucl_rel_poly"
  Proving monotonicity ...
instantiation
  poly :: (field) semidom_modulo
  modulo_poly == modulo :: 'a poly => 'a poly => 'a poly
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd p)))) <*mlex*> {}"
### theory "HOL-Algebra.QuotRing"
### 2.417s elapsed time, 9.261s cpu time, 1.416s GC time
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd (snd (snd p))))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Polynomial"
### 8.610s elapsed time, 29.561s cpu time, 11.975s GC time
Loading theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Fundamental_Theorem_Algebra"
### 0.286s elapsed time, 0.881s cpu time, 0.151s GC time
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "ring R"
locale UP
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  defines "P == UP R"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale UP_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
    and s :: "'c"
    and Eval :: "(nat => 'a) => 'c"
  assumes "UP_univ_prop R S h s"
  defines "P == UP R"
    and "Eval == eval R S h s"
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
### theory "HOL-Computational_Algebra.Euclidean_Algorithm"
### 11.294s elapsed time, 35.551s cpu time, 12.638s GC time
Loading theory "HOL-Computational_Algebra.Normalized_Fraction" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
Loading theory "HOL-Computational_Algebra.Primes" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary" via "HOL-Algebra.IntRing")
Loading theory "HOL-Computational_Algebra.Formal_Power_Series" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series" via "HOL-Computational_Algebra.Polynomial_FPS")
### theory "HOL-Computational_Algebra.Primes"
### 0.293s elapsed time, 1.180s cpu time, 0.165s GC time
Loading theory "HOL-Computational_Algebra.Nth_Powers" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
locale fract_as_normalized_quot
### theory "HOL-Computational_Algebra.Normalized_Fraction"
### 0.473s elapsed time, 1.895s cpu time, 0.274s GC time
Loading theory "HOL-Computational_Algebra.Squarefree" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu")
instantiation
  fps :: (zero) zero
  zero_fps == zero_class.zero :: 'a fps
### theory "HOL-Computational_Algebra.Nth_Powers"
### 0.204s elapsed time, 0.806s cpu time, 0.109s GC time
Loading theory "HOL-Number_Theory.Cong" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "HOL-Number_Theory.Residues")
instantiation
  fps :: ({one,zero}) one
  one_fps == one_class.one :: 'a fps
instantiation
  fps :: (plus) plus
  plus_fps == plus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (minus) minus
  minus_fps == minus :: 'a fps => 'a fps => 'a fps
instantiation
  fps :: (uminus) uminus
  uminus_fps == uminus :: 'a fps => 'a fps
instantiation
  fps :: ({comm_monoid_add,times}) times
  times_fps == times :: 'a fps => 'a fps => 'a fps
### theory "HOL-Computational_Algebra.Squarefree"
### 0.175s elapsed time, 0.695s cpu time, 0.105s GC time
Loading theory "HOL-Algebra.IntRing" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.General_Auxiliary")
class unique_euclidean_semiring = euclidean_semiring_cancel +
  fixes division_segment :: "'a => 'a"
  assumes
    "euclidean_size_mult":
      "!!a b. euclidean_size (a * b) = euclidean_size a * euclidean_size b"
  assumes "is_unit_division_segment": "!!a. is_unit (division_segment a)"
    and
    "division_segment_mult":
      "!!a b.
          [| a ~= (0::'a); b ~= (0::'a) |]
          ==> division_segment (a * b) =
              division_segment a * division_segment b"
    and
    "division_segment_mod":
      "!!b a.
          [| b ~= (0::'a); ~ b dvd a |]
          ==> division_segment (a mod b) = division_segment b"
  assumes
    "div_bounded":
      "!!b r q.
          [| b ~= (0::'a); division_segment r = division_segment b;
             euclidean_size r < euclidean_size b |]
          ==> (q * b + r) div b = q"
instantiation
  fps :: (zero) unit_factor
  unit_factor_fps == unit_factor :: 'a fps => 'a fps
instantiation
  fps :: ({minus,zero}) dist
  dist_fps == dist :: 'a fps => 'a fps => real
instantiation
  fps :: (group_add) metric_space
  uniformity_fps == uniformity :: ('a fps * 'a fps) filter
  open_fps == open :: 'a fps set => bool
locale UP_pre_univ_prop
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and S :: "('c, 'd) ring_scheme"  (structure)
    and h :: "'a => 'c"
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_pre_univ_prop R S h"
  defines "P == UP R"
locale Group.monoid
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.monoid G"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Number_Theory.Cong"
### 0.949s elapsed time, 3.725s cpu time, 0.538s GC time
Loading theory "HOL-Number_Theory.Mod_Exp" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
instantiation
  fps :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fps == inverse :: 'a fps => 'a fps
  divide_fps == divide :: 'a fps => 'a fps => 'a fps
### Cannot skip proof of schematic goal statement
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
class euclidean_semiring_cancel = euclidean_semiring +
  assumes
    "div_mult_self1":
      "!!b a c. b ~= (0::'a) ==> (a + c * b) div b = c + a div b"
    and
    "div_mult_mult1":
      "!!c a b. c ~= (0::'a) ==> c * a div (c * b) = a div b"
### theory "HOL-Algebra.IntRing"
### 1.244s elapsed time, 4.883s cpu time, 0.671s GC time
Loading theory "HOL-Number_Theory.Eratosthenes" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
instantiation
  fps :: ({inverse,uminus,comm_semiring_1}) modulo
  modulo_fps == modulo :: 'a fps => 'a fps => 'a fps
### theory "HOL-Number_Theory.Mod_Exp"
### 0.536s elapsed time, 2.089s cpu time, 0.318s GC time
Loading theory "Finitely_Generated_Abelian_Groups.General_Auxiliary" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds")
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
instantiation
  fps :: (field) normalization_semidom_multiplicative
  normalize_fps == normalize :: 'a fps => 'a fps
instantiation
  fps :: (field) euclidean_ring_cancel
  euclidean_size_fps == euclidean_size :: 'a fps => nat
instantiation
  fps :: (field) euclidean_ring_gcd
  Gcd_fps == Gcd :: 'a fps set => 'a fps
  Lcm_fps == Lcm :: 'a fps set => 'a fps
  gcd_fps == gcd :: 'a fps => 'a fps => 'a fps
  lcm_fps == lcm :: 'a fps => 'a fps => 'a fps
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "HOL-Number_Theory.Eratosthenes"
### 0.267s elapsed time, 1.049s cpu time, 0.159s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_Factorial" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Finitely_Generated_Abelian_Groups.General_Auxiliary"
### 0.623s elapsed time, 2.443s cpu time, 0.405s GC time
Loading theory "HOL-Number_Theory.Prime_Powers" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
### Cannot skip proof of schematic goal statement
### theory "HOL-Algebra.UnivPoly"
### 10.388s elapsed time, 34.882s cpu time, 9.845s GC time
Loading theory "HOL-Algebra.Multiplicative_Group" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" via "Finitely_Generated_Abelian_Groups.Set_Multiplication")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
instantiation
  poly :: ({factorial_ring_gcd,semiring_gcd_mult_normalize})
    factorial_ring_gcd
  Gcd_poly == Gcd :: 'a poly set => 'a poly
  Lcm_poly == Lcm :: 'a poly set => 'a poly
  gcd_poly == gcd :: 'a poly => 'a poly => 'a poly
  lcm_poly == lcm :: 'a poly => 'a poly => 'a poly
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
instantiation
  poly :: ({factorial_ring_gcd,field,semiring_gcd_mult_normalize})
    {normalization_euclidean_semiring,unique_euclidean_ring}
  division_segment_poly == division_segment :: 'a poly => 'a poly
  euclidean_size_poly == euclidean_size :: 'a poly => nat
### theory "HOL-Computational_Algebra.Polynomial_Factorial"
### 1.217s elapsed time, 4.759s cpu time, 0.804s GC time
Loading theory "HOL-Number_Theory.Totient" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "HOL-Number_Theory.Residues")
### theory "HOL-Number_Theory.Prime_Powers"
### 0.857s elapsed time, 3.356s cpu time, 0.572s GC time
consts
  totient_naive :: "nat => nat => nat => nat"
bundle fps_notation
### theory "HOL-Computational_Algebra.Formal_Power_Series"
### 3.857s elapsed time, 15.123s cpu time, 2.357s GC time
Loading theory "HOL-Computational_Algebra.Polynomial_FPS" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra" via "HOL-Computational_Algebra.Formal_Laurent_Series")
### theory "HOL-Number_Theory.Totient"
### 0.603s elapsed time, 2.339s cpu time, 0.422s GC time
locale UP_ring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_ring R"
  defines "P == UP R"
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
locale Group.group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "Group.group G"
signature POLY_FPS =
  sig
    val eq_conv: conv
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
structure Poly_Fps:
  sig
    val const_binop_conv: string -> conv -> cterm -> thm
    val eq_conv: cterm -> thm
    val eq_simproc: cterm -> thm option
    val reify_conv: conv
  end
consts
  prefix_length_aux :: "('a => bool) => nat => 'a list => nat"
### theory "HOL-Computational_Algebra.Polynomial_FPS"
### 0.565s elapsed time, 1.534s cpu time, 0.306s GC time
Loading theory "HOL-Computational_Algebra.Formal_Laurent_Series" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series" via "HOL-Computational_Algebra.Computational_Algebra")
instantiation
  fls :: (zero) zero
  zero_fls == zero_class.zero :: 'a fls
instantiation
  fls :: ({one,zero}) one
  one_fls == one_class.one :: 'a fls
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
instantiation
  fls :: (monoid_add) plus
  plus_fls == plus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) minus
  minus_fls == minus :: 'a fls => 'a fls => 'a fls
instantiation
  fls :: (group_add) uminus
  uminus_fls == uminus :: 'a fls => 'a fls
instantiation
  fls :: ({comm_monoid_add,times}) times
  times_fls == times :: 'a fls => 'a fls => 'a fls
locale UP_cring
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_cring R"
  defines "P == UP R"
instantiation
  fls :: ({inverse,comm_monoid_add,times,uminus}) inverse
  inverse_fls == inverse :: 'a fls => 'a fls
  divide_fls == divide :: 'a fls => 'a fls => 'a fls
locale UP_domain
  fixes R :: "('a, 'b) ring_scheme"  (structure)
    and P :: "('a, nat => 'a) up_ring"  (structure)
  assumes "UP_domain R"
  defines "P == UP R"
locale Ring.field
  fixes R :: "('a, 'b) ring_scheme"  (structure)
  assumes "field R"
### theory "HOL-Algebra.Multiplicative_Group"
### 2.612s elapsed time, 7.491s cpu time, 1.409s GC time
Loading theory "Finitely_Generated_Abelian_Groups.Set_Multiplication" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" via "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups")
Loading theory "HOL-Number_Theory.Residues" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters")
### theory "Finitely_Generated_Abelian_Groups.Set_Multiplication"
### 0.184s elapsed time, 0.595s cpu time, 0.126s GC time
Loading theory "Finitely_Generated_Abelian_Groups.Group_Hom" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds")
Loading theory "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds" via "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend")
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
### theory "Finitely_Generated_Abelian_Groups.Group_Hom"
### 0.387s elapsed time, 1.479s cpu time, 0.358s GC time
### theory "Finitely_Generated_Abelian_Groups.Miscellaneous_Groups"
### 0.391s elapsed time, 1.491s cpu time, 0.358s GC time
Loading theory "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" via "Finitely_Generated_Abelian_Groups.IDirProds")
instantiation
  fls :: (group_add) metric_space
  dist_fls == dist :: 'a fls => 'a fls => real
  uniformity_fls == uniformity :: ('a fls * 'a fls) filter
  open_fls == open :: 'a fls set => bool
bundle fls_notation
### theory "HOL-Computational_Algebra.Formal_Laurent_Series"
### 2.017s elapsed time, 5.519s cpu time, 1.302s GC time
Loading theory "HOL-Computational_Algebra.Computational_Algebra" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series")
locale residues
  fixes m :: "int"
    and R :: "int ring"  (structure)
  assumes "residues m"
  defines "R == residue_ring m"
### theory "Finitely_Generated_Abelian_Groups.Generated_Groups_Extend"
### 0.343s elapsed time, 1.066s cpu time, 0.295s GC time
Loading theory "Finitely_Generated_Abelian_Groups.Finite_And_Cyclic_Groups" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds")
Loading theory "Finitely_Generated_Abelian_Groups.IDirProds" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds" via "Finitely_Generated_Abelian_Groups.Finite_Product_Extend")
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
locale finite_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "finite_group G"
locale finite_comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "finite_comm_group G"
locale residues_prime
  fixes p :: "nat"
    and R :: "int ring"  (structure)
  assumes "residues_prime p"
  defines "R == residue_ring (int p)"
locale cyclic_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and gen :: "'a"
  assumes "Finite_And_Cyclic_Groups.cyclic_group G gen"
locale finite_cyclic_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and gen :: "'a"
  assumes "finite_cyclic_group G gen"
### theory "HOL-Number_Theory.Residues"
### 3.817s elapsed time, 13.951s cpu time, 7.154s GC time
Loading theory "HOL-Number_Theory.Euler_Criterion" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity" via "HOL-Number_Theory.Gauss")
### theory "HOL-Computational_Algebra.Computational_Algebra"
### 3.002s elapsed time, 11.154s cpu time, 6.396s GC time
Loading theory "HOL-Number_Theory.Pocklington" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
### theory "Finitely_Generated_Abelian_Groups.IDirProds"
### 2.912s elapsed time, 10.870s cpu time, 6.295s GC time
Loading theory "Finitely_Generated_Abelian_Groups.Finite_Product_Extend" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" via "Finitely_Generated_Abelian_Groups.DirProds")
### theory "HOL-Number_Theory.Euler_Criterion"
### 0.153s elapsed time, 0.597s cpu time, 0.059s GC time
Loading theory "HOL-Number_Theory.Gauss" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory" via "HOL-Number_Theory.Quadratic_Reciprocity")
### theory "Finitely_Generated_Abelian_Groups.Finite_And_Cyclic_Groups"
### 3.069s elapsed time, 11.476s cpu time, 6.452s GC time
locale GAUSS
  fixes p :: "nat"
    and a :: "int"
  assumes "GAUSS p a"
### theory "HOL-Number_Theory.Pocklington"
### 0.363s elapsed time, 1.316s cpu time, 0.282s GC time
Loading theory "HOL-Number_Theory.Residue_Primitive_Roots" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
### theory "HOL-Number_Theory.Gauss"
### 0.301s elapsed time, 1.058s cpu time, 0.311s GC time
Loading theory "HOL-Number_Theory.Quadratic_Reciprocity" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function" via "HOL-Number_Theory.Number_Theory")
Proofs for inductive predicate(s) "residue_primroot"
locale QR
  fixes p :: "nat"
    and q :: "nat"
  assumes "QR p q"
  Proving monotonicity ...
### theory "Finitely_Generated_Abelian_Groups.Finite_Product_Extend"
### 0.593s elapsed time, 2.030s cpu time, 0.496s GC time
Loading theory "Finitely_Generated_Abelian_Groups.DirProds" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups")
Loading theory "Finitely_Generated_Abelian_Groups.Group_Relations" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters" via "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups")
### theory "HOL-Number_Theory.Residue_Primitive_Roots"
### 0.365s elapsed time, 1.312s cpu time, 0.258s GC time
### theory "HOL-Number_Theory.Quadratic_Reciprocity"
### 0.391s elapsed time, 1.388s cpu time, 0.258s GC time
Loading theory "HOL-Number_Theory.Number_Theory" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function")
### theory "Finitely_Generated_Abelian_Groups.Group_Relations"
### 0.369s elapsed time, 1.306s cpu time, 0.213s GC time
### theory "Finitely_Generated_Abelian_Groups.DirProds"
### 0.738s elapsed time, 2.094s cpu time, 0.374s GC time
Loading theory "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_L.Multiplicative_Characters")
locale fin_gen_comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and gen :: "'a set"
  assumes "fin_gen_comm_group G gen"
### theory "Finitely_Generated_Abelian_Groups.Finitely_Generated_Abelian_Groups"
### 0.619s elapsed time, 1.378s cpu time, 0.294s GC time
Loading theory "Dirichlet_L.Multiplicative_Characters" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters")
bundle character_syntax
locale character
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
    and \<chi> :: "'a => complex"
  assumes "character G \<chi>"
### theory "HOL-Number_Theory.Number_Theory"
### 1.328s elapsed time, 3.076s cpu time, 0.603s GC time
Loading theory "Dirichlet_Series.Dirichlet_Misc" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters" via "Dirichlet_Series.Multiplicative_Function")
locale finite_comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "finite_comm_group G"
### theory "Dirichlet_Series.Dirichlet_Misc"
### 0.095s elapsed time, 0.214s cpu time, 0.061s GC time
Loading theory "Dirichlet_Series.Multiplicative_Function" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_L.Dirichlet_Characters")
locale multiplicative_function
  fixes f :: "nat => 'a"
  assumes "multiplicative_function f"
locale multiplicative_function'
  fixes f :: "nat => 'a"
    and f_prime_power :: "nat => nat => 'a"
    and f_prime :: "nat => 'a"
  assumes "multiplicative_function' f f_prime_power f_prime"
locale completely_multiplicative_function
  fixes f :: "nat => 'a"
  assumes "completely_multiplicative_function f"
locale completely_multiplicative_function'
  fixes f :: "nat => 'a"
    and f_prime :: "nat => 'a"
  assumes "completely_multiplicative_function' f f_prime"
### theory "Dirichlet_Series.Multiplicative_Function"
### 0.217s elapsed time, 0.493s cpu time, 0.164s GC time
Loading theory "Dirichlet_Series.Dirichlet_Product" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu" via "Dirichlet_Series.Dirichlet_Series")
Found termination order: "(%p. size (snd (snd p))) <*mlex*> {}"
locale multiplicative_dirichlet_prod
  fixes f :: "nat => 'a"
    and g :: "nat => 'a"
  assumes "multiplicative_dirichlet_prod f g"
locale multiplicative_dirichlet_prod'
  fixes f :: "nat => 'a"
    and g :: "nat => 'a"
    and f_prime_power :: "nat => nat => 'a"
    and g_prime_power :: "nat => nat => 'a"
    and f_prime :: "nat => 'a"
    and g_prime :: "nat => 'a"
  assumes
    "multiplicative_dirichlet_prod' f g f_prime_power g_prime_power f_prime
      g_prime"
### theory "Dirichlet_Series.Dirichlet_Product"
### 18.323s elapsed time, 61.215s cpu time, 60.549s GC time
Loading theory "Dirichlet_Series.Dirichlet_Series" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary" via "Dirichlet_Series.Moebius_Mu")
locale finite_comm_group
  fixes G :: "('a, 'b) monoid_scheme"  (structure)
  assumes "finite_comm_group G"
### theory "Dirichlet_L.Multiplicative_Characters"
### 19.011s elapsed time, 62.698s cpu time, 60.841s GC time
Loading theory "Dirichlet_L.Dirichlet_Characters" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary")
bundle dcharacter_syntax
locale residues_nat
  fixes n :: "nat"  (structure)
    and G :: "nat monoid"
  assumes "residues_nat n"
  defines "G == residue_mult_group n"
bundle fds_syntax
instantiation
  fds :: (zero) zero
  zero_fds == zero_class.zero :: 'a fds
instantiation
  fds :: ({one,zero}) one
  one_fds == one_class.one :: 'a fds
instantiation
  fds :: ({plus,zero}) plus
  plus_fds == plus :: 'a fds => 'a fds => 'a fds
instantiation
  fds :: (semiring_0) times
  times_fds == times :: 'a fds => 'a fds => 'a fds
instantiation
  fds :: ({uminus,zero}) uminus
  uminus_fds == uminus :: 'a fds => 'a fds
instantiation
  fds :: ({minus,zero}) minus
  minus_fds == minus :: 'a fds => 'a fds => 'a fds
locale dcharacter
  fixes n :: "nat"  (structure)
    and G :: "nat monoid"
    and \<chi> :: "nat => complex"
  assumes "dcharacter n \<chi>"
  defines "G == residue_mult_group n"
instantiation
  fds :: (real_vector) real_vector
  scaleR_fds == scaleR :: real => 'a fds => 'a fds
instantiation
  fds :: ({inverse,comm_ring_1}) inverse
  inverse_fds == inverse :: 'a fds => 'a fds
  divide_fds == divide :: 'a fds => 'a fds => 'a fds
locale residues_nat
  fixes n :: "nat"  (structure)
    and G :: "nat monoid"
  assumes "residues_nat n"
  defines "G == residue_mult_group n"
### theory "Dirichlet_L.Dirichlet_Characters"
### 0.853s elapsed time, 1.855s cpu time, 0.250s GC time
class nat_power = semiring_1 +
  fixes nat_power :: "nat => 'a => 'a"
  assumes
    "nat_power_0_left": "!!x. x ~= (0::'a) ==> nat_power 0 x = (0::'a)"
  assumes
    "nat_power_0_right": "!!n. 0 < n ==> nat_power n (0::'a) = (1::'a)"
  assumes "nat_power_1_left": "!!x. nat_power (Suc 0) x = (1::'a)"
  assumes "nat_power_1_right": "!!n. nat_power n (1::'a) = of_nat n"
  assumes
    "nat_power_add":
      "!!n a b.
          0 < n ==> nat_power n (a + b) = nat_power n a * nat_power n b"
  assumes
    "nat_power_mult_distrib":
      "!!m n a.
          [| 0 < m; 0 < n |]
          ==> nat_power (m * n) a = nat_power m a * nat_power n a"
  assumes
    "nat_power_power":
      "!!n a m. 0 < n ==> nat_power n (a * of_nat m) = nat_power n a ^ m"
class nat_power_field = nat_power + field +
  assumes "nat_power_nonzero": "!!n z. 0 < n ==> nat_power n z ~= (0::'a)"
instantiation
  nat :: nat_power
  nat_power_nat == nat_power :: nat => nat => nat
instantiation
  real :: nat_power_field
  nat_power_real == nat_power :: nat => real => real
### theory "Dirichlet_Series.Dirichlet_Series"
### 2.174s elapsed time, 3.518s cpu time, 0.399s GC time
Loading theory "Dirichlet_Series.Moebius_Mu" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary")
### theory "Dirichlet_Series.Moebius_Mu"
### 0.116s elapsed time, 0.116s cpu time, 0.000s GC time
Loading theory "Dirichlet_Series.More_Totient" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates" via "Draft.Gauss_Sums_Auxiliary")
### theory "Dirichlet_Series.More_Totient"
### 0.060s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.Gauss_Sums_Auxiliary" (required by "Draft.Gauss_Sums_AuxiliaryMoreTemplates")
### theory "Draft.Gauss_Sums_Auxiliary"
### 0.504s elapsed time, 0.504s cpu time, 0.000s GC time
Loading theory "Draft.Gauss_Sums_AuxiliaryMoreTemplates"
val templateLemmas =
   [("Gauss_Sums_Auxiliary.multiplicative_ind_coprime",
     "multiplicative_function (ind (coprime ?N))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Gauss_Sums_Auxiliary.comp_to_mult",
     "completely_multiplicative_function ?f ==> multiplicative_function ?f",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Gauss_Sums_Auxiliary.dirichlet_prod_neutral_left_neutral",
     "0 < ?n ==> dirichlet_prod dirichlet_prod_neutral ?f ?n = ?f ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0),
           template_var 1),
         template_app (template_var 0, template_var 1)))),
    ("Gauss_Sums_Auxiliary.dirichlet_prod_neutral_right_neutral",
     "0 < ?n ==> dirichlet_prod ?f dirichlet_prod_neutral ?n = ?f ?n",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0),
           template_var 1),
         template_app (template_var 0, template_var 1)))),
    ("Gauss_Sums_Auxiliary.moebius_prod_not_coprime",
     "~ coprime ?N ?d ==> moebius_mu (?N * ?d) = (0::?'a)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)
                )
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0))),
    ("Gauss_Sums_Auxiliary.I_right_neutral_0",
     "?f 0 = 0 ==> dirichlet_prod ?f dirichlet_prod_neutral ?n = ?f ?n",
     template_implication
      ([template_equation
         (template_app (template_var 1, template_hole 3), template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0),
         template_app (template_var 1, template_var 0)))),
    ("Gauss_Sums_Auxiliary.coprime_iff_prime_factors_disjoint",
     "[| ?x ~= (0::?'a); ?y ~= (0::?'a) |]
      ==> coprime ?x ?y = (prime_factors ?x Int prime_factors ?y = {})",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 7)),
        template_negation
         (template_equation (template_var 0, template_hole 7))],
       template_implication
        ([template_predicate
           (
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0)
              )],
         template_equation
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1))),
             template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0))),
           template_hole 0)))),
    ("Gauss_Sums_Auxiliary.completely_multiplicative_nonzero",
     "[| completely_multiplicative_function ?f; ?d ~= 0;
         !!p. prime p ==> ?f p ~= 0 |]
      ==> ?f ?d ~= 0",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 1)),
        template_negation
         (template_equation (template_var 0, template_hole 4)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_negation
        (
           template_equation
            (template_app (template_var 1, template_var 0), template_hole 0)
           ))),
    ("Gauss_Sums_Auxiliary.p_div_set",
     "{p. p :# prime_factorization ?a & ~ p dvd ?N} =
      {p. p :# prime_factorization (?a * ?N)} -
      {p. p :# prime_factorization ?N}",
     template_equation
      (template_app (template_hole 8, t_empty),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 8, t_empty)),
         template_app (template_hole 8, t_empty)))),
    ("Gauss_Sums_Auxiliary.dirichlet_prod_neutral_intro",
     "(SUM k | k : {1..?n} & coprime k ?n. ?f k ?n) =
      (SUM k = 1..?n. ?f k ?n * dirichlet_prod_neutral (gcd k ?n))",
     template_equation
      (template_app
        (template_app (template_hole 9, t_empty),
         template_app (template_hole 8, t_empty)),
       template_app
        (template_app (template_hole 9, t_empty),
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_var 0)))),
    ("Gauss_Sums_Auxiliary.sum_divisors_moebius_mu_times_multiplicative",
     "[| multiplicative_function ?f; 0 < ?n |]
      ==> (SUM d | d dvd ?n. moebius_mu d * ?f d) =
          (PROD p:prime_factors ?n. (1::?'a) - ?f p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 13, template_var 1)),
        template_inequation (less_than, template_hole 11, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 9, t_empty),
           template_app (template_hole 6, t_empty)),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Gauss_Sums_Auxiliary.sum_div_reduce",
     "[| ?d dvd ?k; 0 < ?d |]
      ==> (SUM n | n : {1..?k} & ?d dvd n. ?f n) =
          (SUM c = 1..?k div ?d. ?f (c * ?d))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_inequation (less_than, template_hole 9, template_var 2)],
       template_equation
        (template_app
          (template_app (template_hole 7, t_empty),
           template_app (template_hole 6, t_empty)),
         template_app
          (template_app (template_hole 7, t_empty),
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2)))))),
    ("Gauss_Sums_Auxiliary.multipl_div_mono",
     "[| completely_multiplicative_function ?f; ?d dvd ?k; 0 < ?d;
         !!p. prime p ==> ?f p ~= 0 |]
      ==> ?f (?k div ?d) = ?f ?k / ?f ?d",
     template_implication
      ([template_predicate
         (template_app (template_hole 10, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_var 0)
            ),
        template_inequation (less_than, template_hole 7, template_var 1),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_var 2,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app (template_var 2, template_var 0)),
           template_app (template_var 2, template_var 1))))),
    ("Gauss_Sums_Auxiliary.multipl_div",
     "[| multiplicative_function ?f; ?d1.0 dvd ?m; ?d2.0 dvd ?k;
         coprime ?m ?k |]
      ==> ?f (?m * ?k div (?d1.0 * ?d2.0)) =
          ?f (?m div ?d1.0) * ?f (?k div ?d2.0)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 4)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_var 4,
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_var 4,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 3))),
           template_app
            (template_var 4,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)))))),
    ("Gauss_Sums_Auxiliary.reindex_product_bij",
     "coprime ?a ?k ==>
      bij_betw (%(d1, d2). d1 * d2)
       {(d1, d2). d1 dvd gcd ?a ?m & d2 dvd gcd ?k ?b}
       {d. d dvd gcd ?a ?m * gcd ?k ?b}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 8, template_app (template_hole 7, t_empty)),
               template_app
                (template_hole 5, template_app (template_hole 4, t_empty))),
             template_app (template_hole 0, t_empty))
           ))),
    ("Gauss_Sums_Auxiliary.prod_div_sub",
     "[| finite ?A; ?B <= ?A; ALL b:?B. ?f b ~= 0 |]
      ==> prod ?f (?A - ?B) = prod ?f ?A / prod ?f ?B",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 2)),
        template_inequation (less_equals, template_var 1, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1), t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, t_empty), template_var 2)),
           template_app
            (template_app (template_hole 2, t_empty), template_var 1))))),
    ("Gauss_Sums_Auxiliary.linear_gcd",
     "[| 0 < ?a; 0 < ?b; 0 < ?c; 0 < ?d; coprime ?a ?c; coprime ?b ?d |]
      ==> gcd (?a * ?b) (?c * ?d) = gcd ?a ?d * gcd ?b ?c",
     template_implication
      ([template_inequation (less_than, template_hole 4, template_var 3),
        template_inequation (less_than, template_hole 4, template_var 2),
        template_inequation (less_than, template_hole 4, template_var 1),
        template_inequation (less_than, template_hole 4, template_var 0),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1))))),
    ("Gauss_Sums_Auxiliary.sum_divisors_moebius_mu_times_multiplicative_revisited",
     "[| multiplicative_function ?f; 0 < ?n; 0 < ?N |]
      ==> (SUM d | d dvd ?n & coprime ?N d. moebius_mu d * ?f d) =
          (PROD p:{p. p :# prime_factorization ?n & ~ p dvd ?N}.
               (1::?'a) - ?f p)",
     template_implication
      ([template_predicate
         (template_app (template_hole 17, template_var 2)),
        template_inequation (less_than, template_hole 15, template_var 1),
        template_inequation (less_than, template_hole 15, template_var 0)],
       template_equation
        (template_app
          (template_app (template_hole 13, t_empty),
           template_app (template_hole 10, t_empty)),
         template_app
          (template_app (template_hole 6, t_empty),
           template_app (template_hole 10, t_empty))))),
    ("Gauss_Sums_Auxiliary.coprime_cong_prime_factors",
     "[| ?x ~= (0::?'a); ?y ~= (0::?'a); ?x' ~= (0::?'a); ?y' ~= (0::?'a);
         prime_factors ?x = prime_factors ?x';
         prime_factors ?y = prime_factors ?y' |]
      ==> coprime ?x ?y = coprime ?x' ?y'",
     template_implication
      ([template_negation
         (template_equation (template_var 3, template_hole 5)),
        template_negation
         (template_equation (template_var 2, template_hole 5)),
        template_negation
         (template_equation (template_var 1, template_hole 5)),
        template_negation
         (template_equation (template_var 0, template_hole 5)),
        template_equation
         (template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 3)),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 1))),
        template_equation
         (template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 2)),
          template_app
           (template_hole 3,
            template_app (template_hole 2, template_var 0)))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.Gauss_Sums_AuxiliaryMoreTemplates"
### 0.857s elapsed time, 1.338s cpu time, 0.246s GC time
val it = (): unit
