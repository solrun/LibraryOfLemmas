   [("Finite_Fourier_Series.degree_poly_of_list_le",
     "degree (poly_of_list ?ws) <= length ?ws - 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Finite_Fourier_Series.degree_finite_fourier_poly",
     "degree (finite_fourier_poly ?ws) <= length ?ws - 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Finite_Fourier_Series.degree_finite_fourier_poly'",
     "degree (finite_fourier_poly' ?ws ?k) <= ?k - 1",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Finite_Fourier_Series.finite_fourier_poly'_conv_finite_fourier_poly",
     "finite_fourier_poly' ?ws ?k = finite_fourier_poly (map ?ws [0..<?k])",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, t_empty),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Finite_Fourier_Series.lagrange_exists",
     "distinct (map fst ?zs_ws) ==>
      degree (lagrange_interpolation_poly ?zs_ws) <= length ?zs_ws - 1",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)))),
    ("Finite_Fourier_Series.poly_finite_fourier_poly'",
     "?m : {0..<int ?k} ==>
      poly (finite_fourier_poly' ?ws ?k) (unity_root ?k ?m) = ?ws (nat ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 2),
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_app (template_hole 5, template_var 1)))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1)),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 2)),
         template_app
          (template_var 0,
           template_app (template_hole 0, template_var 2))))),
    ("Finite_Fourier_Series.poly_altdef'",
     "degree ?p <= ?k ==> poly ?p ?z = (SUM i<=?k. coeff ?p i * ?z ^ i)",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 7, template_var 2),
          template_var 1)],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 4, t_empty),
           template_app (template_hole 0, template_var 1))))),
    ("Finite_Fourier_Series.lagrange_exists",
     "distinct (map fst ?zs_ws) ==>
      ALL x y.
         (x, y) : set ?zs_ws -->
         poly (lagrange_interpolation_poly ?zs_ws) x = y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 10,
              template_app
               (template_app (template_hole 9, template_hole 8),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 7, t_empty)))),
    ("Finite_Fourier_Series.poly_finite_fourier_poly",
     "[| ?m : {0..<int (length ?ws)}; ?m < int (length ?ws) |]
      ==> poly (finite_fourier_poly ?ws) (unity_root (length ?ws) ?m) =
          ?ws ! nat ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 0))))
            ),
        template_inequation
         (less_than, template_var 1,
          template_app
           (template_hole 8,
            template_app (template_hole 7, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app (template_hole 3, template_var 0)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 7, template_var 0)),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 1))))),
    ("Finite_Fourier_Series.coeff_finite_fourier_poly'",
     "?n < ?k ==>
      coeff (finite_fourier_poly' ?ws ?k) ?n =
      1 / of_nat ?k * (SUM m<?k. ?ws m * unity_root ?k (- int ?n * int m))",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1)],
       template_equation
        (template_app
          (template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 0),
               template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_hole 7),
               template_app (template_hole 6, template_var 1))),
           template_app
            (template_app (template_hole 5, t_empty),
             template_app (template_hole 0, template_var 1)))))),
    ("Finite_Fourier_Series.fourier_expansion_periodic_arithmetic",
     "[| 0 < ?k; periodic_arithmetic ?f ?k |]
      ==> periodic_arithmetic
           (%x. 1 / of_nat ?k *
                (SUM m<?k. ?f m * unity_root ?k (- int x * int m)))
           ?k",
     template_implication
      ([template_inequation (less_than, template_hole 11, template_var 1),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, t_empty), template_var 1)
           ))),
    ("Finite_Fourier_Series.coeff_finite_fourier_poly",
     "?n < length ?ws ==>
      coeff (finite_fourier_poly ?ws) ?n =
      1 / of_nat (length ?ws) *
      (SUM m<length ?ws.
       ?ws ! m * unity_root (length ?ws) (- int ?n * int m))",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 14, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 12,
             template_app (template_hole 11, template_var 0)),
           template_var 1),
         template_app
          (template_app
            (template_hole 10,
             template_app
              (template_app (template_hole 9, template_hole 8),
               template_app
                (template_hole 7,
                 template_app (template_hole 14, template_var 0)))),
           template_app
            (template_app (template_hole 6, t_empty),
             template_app
              (template_hole 0,
               template_app (template_hole 14, template_var 0))))))),
    ("Finite_Fourier_Series.finite_fourier_poly'_unique",
     "[| 0 < ?k; degree ?p <= ?k - 1;
         ALL m<=?k - 1. ?ws m = poly ?p (unity_root ?k (int m)) |]
      ==> ?p = finite_fourier_poly' ?ws ?k",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 2),
        template_inequation
         (less_equals, template_app (template_hole 10, template_var 1),
          template_app
           (template_app (template_hole 9, template_var 2),
            template_hole 8)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_var 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2)))),
    ("Finite_Fourier_Series.lagrange",
     "[| 0 < length ?zs_ws; distinct (map fst ?zs_ws) |]
      ==> EX! p.
             degree p <= length ?zs_ws - 1 &
             (ALL x y. (x, y) : set ?zs_ws --> poly p x = y)",
     template_implication
      ([template_inequation
         (less_than, template_hole 17,
          template_app (template_hole 16, template_var 0)),
        template_predicate
         (
            template_app
             (template_hole 15,
              template_app
               (template_app (template_hole 14, template_hole 13),
                template_var 0))
            )],
       template_predicate (template_app (template_hole 12, t_empty)))),
    ("Finite_Fourier_Series.finite_fourier_poly_unique",
     "[| 0 < length ?ws; degree ?p <= length ?ws - 1;
         ALL m<=length ?ws - 1.
            ?ws ! m = poly ?p (unity_root (length ?ws) (int m)) |]
      ==> ?p = finite_fourier_poly ?ws",
     template_implication
      ([template_inequation
         (less_than, template_hole 14,
          template_app (template_hole 13, template_var 1)),
        template_inequation
         (less_equals, template_app (template_hole 11, template_var 0),
          template_app
           (template_app
             (template_hole 10,
              template_app (template_hole 13, template_var 1)),
            template_hole 9)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_equation
        (template_var 0, template_app (template_hole 0, template_var 1)))),
    ("Finite_Fourier_Series.fourier_expansion_periodic_arithmetic",
     "[| 0 < ?k; periodic_arithmetic ?f ?k |]
      ==> ?f ?m =
          (SUM n<?k.
           1 / of_nat ?k *
           (SUM m<?k. ?f m * unity_root ?k (- int n * int m)) *
           unity_root ?k (int ?m * int n))",
     template_implication
      ([template_inequation (less_than, template_hole 12, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 1),
              template_var 2)
            )],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app
          (template_app (template_hole 9, t_empty),
           template_app (template_hole 0, template_var 2))))),
    ("Finite_Fourier_Series.fourier_unity_root",
     "0 < ?k ==>
      poly (finite_fourier_poly' ?f ?k) (unity_root ?k (int ?m)) =
      (SUM n<?k.
       complex_of_real (1 / real ?k) *
       (SUM m<?k. ?f m * unity_root ?k (- int n * int m)) *
       unity_root ?k (int (?m * n)))",
     template_implication
      ([template_inequation (less_than, template_hole 15, template_var 2)],
       template_equation
        (template_app
          (template_app
            (template_hole 13,
             template_app
              (template_app (template_hole 12, template_var 1),
               template_var 2)),
           template_app
            (template_app (template_hole 11, template_var 2),
             template_app (template_hole 10, template_var 0))),
         template_app
          (template_app (template_hole 9, t_empty),
           template_app (template_hole 1, template_var 2))))),
    ("Finite_Fourier_Series.fourier_expansion_periodic_arithmetic_unique",
     "[| 0 < ?k; periodic_arithmetic ?f ?k; periodic_arithmetic ?g ?k;
         !!m. m < ?k ==>
              ?f m = (SUM n<?k. ?g n * unity_root ?k (int (m * n))) |]
      ==> ?g ?n =
          1 / of_nat ?k *
          (SUM m<?k. ?f m * unity_root ?k (- int ?n * int m))",
     template_implication
      ([template_inequation (less_than, template_hole 14, template_var 3),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 1),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_equation
        (template_app (template_var 1, template_var 0),
         template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 4, template_hole 3),
               template_app (template_hole 2, template_var 3))),
           template_app
            (template_app (template_hole 10, t_empty),
             template_app (template_hole 5, template_var 3)))))),
    ("Finite_Fourier_Series.lagrange_unique",
     "[| 0 < length ?zs_ws; distinct (map fst ?zs_ws);
         degree ?p1.0 <= length ?zs_ws - 1 &
         (ALL x y. (x, y) : set ?zs_ws --> poly ?p1.0 x = y);
         degree ?p2.0 <= length ?zs_ws - 1 &
         (ALL x y. (x, y) : set ?zs_ws --> poly ?p2.0 x = y) |]
      ==> ?p1.0 = ?p2.0",
     template_implication
      ([template_inequation
         (less_than, template_hole 17,
          template_app (template_hole 16, template_var 2)),
        template_predicate
         (
            template_app
             (template_hole 15,
              template_app
               (template_app (template_hole 14, template_hole 13),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 1)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 16, template_var 2)),
                    template_hole 8))),
              template_app (template_hole 7, t_empty))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app
                   (template_hole 11,
                    template_app (template_hole 10, template_var 0)),
                  template_app
                   (template_app
                     (template_hole 9,
                      template_app (template_hole 16, template_var 2)),
                    template_hole 8))),
              template_app (template_hole 7, t_empty))
            )],
       template_equation (template_var 1, template_var 0)))]
