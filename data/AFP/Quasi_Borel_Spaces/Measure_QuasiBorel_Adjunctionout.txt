Loading theory "Draft.StandardBorel" (required by "Draft.Measure_QuasiBorel_AdjunctionTemplates" via "Draft.Measure_QuasiBorel_Adjunction" via "Draft.QuasiBorel")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Measure_QuasiBorel_AdjunctionTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Templates" (required by "Draft.Measure_QuasiBorel_AdjunctionTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.079s elapsed time, 0.279s cpu time, 0.000s GC time
locale standard_borel
  fixes M :: "'a measure"
  assumes "standard_borel M"
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.369s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Measure_QuasiBorel_AdjunctionTemplates" via "Draft.ExtrEqs")
locale standard_borel_space_UNIV
  fixes M :: "'a measure"
  assumes "standard_borel_space_UNIV M"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale pair_standard_borel
  fixes M :: "'a measure"
    and N :: "'b measure"
  assumes "pair_standard_borel M N"
locale pair_standard_borel_space_UNIV
  fixes M :: "'a measure"
    and N :: "'b measure"
  assumes "pair_standard_borel_space_UNIV M N"
### theory "HOL-Library.BigO"
### 0.622s elapsed time, 1.324s cpu time, 0.166s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Measure_QuasiBorel_AdjunctionTemplates")
### theory "Draft.StandardBorel"
### 0.758s elapsed time, 1.673s cpu time, 0.216s GC time
Loading theory "Draft.QuasiBorel" (required by "Draft.Measure_QuasiBorel_AdjunctionTemplates" via "Draft.Measure_QuasiBorel_Adjunction")
Proofs for inductive predicate(s) "generating_Mxp"
  Proving monotonicity ...
instantiation
  quasi_borel :: (type) order_bot
  bot_quasi_borel == bot :: 'a quasi_borel
  less_eq_quasi_borel == less_eq :: 'a quasi_borel => 'a quasi_borel => bool
  less_quasi_borel == less :: 'a quasi_borel => 'a quasi_borel => bool
Proofs for inductive predicate(s) "less_eq_quasi_borel"
  Proving monotonicity ...
instantiation
  quasi_borel :: (type) semilattice_sup
  sup_quasi_borel == sup ::
    'a quasi_borel => 'a quasi_borel => 'a quasi_borel
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.488s elapsed time, 0.995s cpu time, 0.058s GC time
### theory "Draft.QuasiBorel"
### 0.504s elapsed time, 1.037s cpu time, 0.098s GC time
Loading theory "Draft.Measure_QuasiBorel_Adjunction" (required by "Draft.Measure_QuasiBorel_AdjunctionTemplates")
### theory "Draft.Measure_QuasiBorel_Adjunction"
### 0.174s elapsed time, 0.174s cpu time, 0.000s GC time
Loading theory "Draft.Measure_QuasiBorel_AdjunctionTemplates"
val templateLemmas =
   [("Measure_QuasiBorel_Adjunction.R_qbs_closed1",
     "qbs_closed1 (real_borel \<rightarrow>\<^sub>M ?X)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Measure_QuasiBorel_Adjunction.R_qbs_closed3",
     "qbs_closed3 (real_borel \<rightarrow>\<^sub>M ?X)",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Measure_QuasiBorel_Adjunction.qbs_space_R",
     "qbs_space (measure_to_qbs ?X) = space ?X",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Measure_QuasiBorel_Adjunction.space_L",
     "space (qbs_to_measure ?X) = qbs_space ?X",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Measure_QuasiBorel_Adjunction.sets_L",
     "sets (qbs_to_measure ?X) = sigma_Mx ?X",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Measure_QuasiBorel_Adjunction.R_qbs_closed2",
     "qbs_closed2 (space ?X) (real_borel \<rightarrow>\<^sub>M ?X)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Measure_QuasiBorel_Adjunction.qbs_Mx_is_morphisms",
     "qbs_Mx ?X = \<real>\<^sub>Q \<rightarrow>\<^sub>Q ?X",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_var 0))),
    ("Measure_QuasiBorel_Adjunction.qbs_Mx_R",
     "qbs_Mx (measure_to_qbs ?X) = real_borel \<rightarrow>\<^sub>M ?X",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_hole 0), template_var 0))),
    ("Measure_QuasiBorel_Adjunction.qbs_Mx_subset_of_measurable",
     "qbs_Mx ?X <= real_borel \<rightarrow>\<^sub>M qbs_to_measure ?X",
     template_inequation
      (less_equals, template_app (template_hole 3, template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Measure_QuasiBorel_Adjunction.lr_sets",
     "sets ?X <= sets (qbs_to_measure (measure_to_qbs ?X))",
     template_inequation
      (less_equals, template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Measure_QuasiBorel_Adjunction.lr_adjunction_correspondence",
     "?X \<rightarrow>\<^sub>Q measure_to_qbs ?Y =
      qbs_to_measure ?X \<rightarrow>\<^sub>M ?Y",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Measure_QuasiBorel_Adjunction.rl_order_adjunction",
     "(?X <= qbs_to_measure ?Y) = (measure_to_qbs ?X <= ?Y)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Measure_QuasiBorel_Adjunction.l_preserves_morphisms",
     "?X \<rightarrow>\<^sub>Q ?Y
      <= qbs_to_measure ?X \<rightarrow>\<^sub>M qbs_to_measure ?Y",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Measure_QuasiBorel_Adjunction.r_preserves_morphisms",
     "?X \<rightarrow>\<^sub>M ?Y
      <= measure_to_qbs ?X \<rightarrow>\<^sub>Q measure_to_qbs ?Y",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Measure_QuasiBorel_Adjunction.R_Mx_correct",
     "real_borel \<rightarrow>\<^sub>M ?X <= UNIV \<rightarrow> space ?X",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 4, template_hole 3), template_var 0),
       template_app
        (template_app (template_hole 2, template_hole 1), t_empty))),
    ("Measure_QuasiBorel_Adjunction.R_correct",
     "Rep_quasi_borel (measure_to_qbs ?X) =
      (space ?X, real_borel \<rightarrow>\<^sub>M ?X)",
     template_equation
      (template_app
        (template_hole 5, template_app (template_hole 4, template_var 0)),
       template_app
        (template_app
          (template_hole 3, template_app (template_hole 2, template_var 0)),
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Measure_QuasiBorel_Adjunction.qbs_Mx_are_measurable",
     "?\<alpha> : qbs_Mx ?X ==>
      ?\<alpha> : real_borel \<rightarrow>\<^sub>M qbs_to_measure ?X",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 1),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Measure_QuasiBorel_Adjunction.measure_to_qbs_cong_sets",
     "sets ?M = sets ?N ==> measure_to_qbs ?M = measure_to_qbs ?N",
     template_implication
      ([template_equation
         (template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Measure_QuasiBorel_Adjunction.qbs_morphism_dest",
     "?f : ?X \<rightarrow>\<^sub>Q measure_to_qbs ?Y ==>
      ?f : qbs_to_measure ?X \<rightarrow>\<^sub>M ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_app (template_hole 2, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_var 0))
           ))),
    ("Measure_QuasiBorel_Adjunction.qbs_morphism_measurable_intro",
     "?f : qbs_to_measure ?X \<rightarrow>\<^sub>M ?Y ==>
      ?f : ?X \<rightarrow>\<^sub>Q measure_to_qbs ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app
               (template_app
                 (template_hole 3,
                  template_app (template_hole 2, template_var 1)),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Measure_QuasiBorel_Adjunction.nat_qbs_morphism",
     "(!!n. ?f n : qbs_space ?Y) ==>
      ?f : \<nat>\<^sub>Q \<rightarrow>\<^sub>Q ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)),
               template_var 0))
           ))),
    ("Measure_QuasiBorel_Adjunction.bool_qbs_morphism",
     "(!!b. ?f b : qbs_space ?Y) ==>
      ?f : \<bool>\<^sub>Q \<rightarrow>\<^sub>Q ?Y",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 1),
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)),
               template_var 0))
           ))),
    ("Measure_QuasiBorel_Adjunction.emeasure_L",
     "emeasure (qbs_to_measure ?X) =
      (%A. if A = {} | A ~: sigma_Mx ?X then 0 else \<infinity>)",
     template_equation
      (template_app
        (template_hole 10, template_app (template_hole 9, template_var 0)),
       t_empty)),
    ("Measure_QuasiBorel_Adjunction.measure_space_L",
     "measure_space (qbs_space ?X) (sigma_Mx ?X)
       (%A. if A = {} then 0
            else if A : - sigma_Mx ?X then 0 else \<infinity>)",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 8, template_var 0)),
             template_app (template_hole 7, template_var 0)),
           t_empty)
         )),
    ("Measure_QuasiBorel_Adjunction.qbs_Mx_sigma_Mx_contra",
     "[| qbs_space ?X = qbs_space ?Y; qbs_Mx ?X <= qbs_Mx ?Y |]
      ==> sigma_Mx ?Y <= sigma_Mx ?X",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 1),
          template_app (template_hole 4, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 0),
         template_app (template_hole 0, template_var 1)))),
    ("Measure_QuasiBorel_Adjunction.L_max_of_measurables",
     "[| space ?M = qbs_space ?X;
         qbs_Mx ?X <= real_borel \<rightarrow>\<^sub>M ?M |]
      ==> sets ?M <= sets (qbs_to_measure ?X)",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 1),
          template_app (template_hole 7, template_var 0)),
        template_inequation
         (less_equals, template_app (template_hole 5, template_var 0),
          template_app
           (template_app (template_hole 4, template_hole 3),
            template_var 1))],
       template_inequation
        (less_equals, template_app (template_hole 1, template_var 1),
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Measure_QuasiBorel_Adjunction.L_correct",
     "Rep_measure (qbs_to_measure ?X) =
      (qbs_space ?X, sigma_Mx ?X,
       %A. if A = {} then 0
           else if A : - sigma_Mx ?X then 0 else \<infinity>)",
     template_equation
      (template_app
        (template_hole 12, template_app (template_hole 11, template_var 0)),
       template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 0)),
         template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_var 0)),
           t_empty)))),
    ("Measure_QuasiBorel_Adjunction.qbs_morphisn_from_countable",
     "[| countable (qbs_space ?X);
         qbs_Mx ?X
         <= real_borel \<rightarrow>\<^sub>M count_space (qbs_space ?X);
         !!i. i : qbs_space ?X ==> ?f i : qbs_space ?Y |]
      ==> ?f : ?X \<rightarrow>\<^sub>Q ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12,
              template_app (template_hole 11, template_var 2))
            ),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 2),
          template_app
           (template_app (template_hole 8, template_hole 7),
            template_app
             (template_hole 6,
              template_app (template_hole 11, template_var 2)))),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           )))]:
   (string * thm * template) list
### theory "Draft.Measure_QuasiBorel_AdjunctionTemplates"
### 1.429s elapsed time, 2.111s cpu time, 0.721s GC time
val it = (): unit
