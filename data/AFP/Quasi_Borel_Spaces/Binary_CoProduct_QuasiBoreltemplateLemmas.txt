   [("Binary_CoProduct_QuasiBorel.copair_qbs_closed1",
     "qbs_closed1 (copair_qbs_Mx ?X ?Y)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Binary_CoProduct_QuasiBorel.copair_qbs_closed3",
     "qbs_closed3 (copair_qbs_Mx ?X ?Y)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Binary_CoProduct_QuasiBorel.copair_qbs_Mx_equiv",
     "copair_qbs_Mx ?X ?Y = copair_qbs_Mx2 ?X ?Y",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Binary_CoProduct_QuasiBorel.Inl_qbs_morphism",
     "Inl : ?X \<rightarrow>\<^sub>Q ?X <+>\<^sub>Q ?Y",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)))
         )),
    ("Binary_CoProduct_QuasiBorel.Inr_qbs_morphism",
     "Inr : ?Y \<rightarrow>\<^sub>Q ?X <+>\<^sub>Q ?Y",
     template_predicate
      (
         template_app
          (template_app (template_hole 3, template_hole 2),
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1)))
         )),
    ("Binary_CoProduct_QuasiBorel.copair_qbs_Mx",
     "qbs_Mx (?X <+>\<^sub>Q ?Y) = copair_qbs_Mx ?X ?Y",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Binary_CoProduct_QuasiBorel.copair_qbs_closed2",
     "qbs_closed2 (qbs_space ?X <+> qbs_space ?Y) (copair_qbs_Mx ?X ?Y)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app (template_hole 1, template_var 0))),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Binary_CoProduct_QuasiBorel.copair_qbs_space",
     "qbs_space (?X <+>\<^sub>Q ?Y) = qbs_space ?X <+> qbs_space ?Y",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Binary_CoProduct_QuasiBorel.copair_qbs_f",
     "copair_qbs_Mx ?X ?Y
      <= UNIV \<rightarrow> qbs_space ?X <+> qbs_space ?Y",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 4, template_hole 3), t_empty))),
    ("Binary_CoProduct_QuasiBorel.copair_qbs_correct",
     "Rep_quasi_borel (?X <+>\<^sub>Q ?Y) =
      (qbs_space ?X <+> qbs_space ?Y, copair_qbs_Mx ?X ?Y)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 1, template_var 0))),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Binary_CoProduct_QuasiBorel.case_sum_preserves_morphisms",
     "[| ?f : ?X \<rightarrow>\<^sub>Q ?Z;
         ?g : ?Y \<rightarrow>\<^sub>Q ?Z |]
      ==> case_sum ?f ?g : ?X <+>\<^sub>Q ?Y \<rightarrow>\<^sub>Q ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_app (template_hole 4, template_var 0),
                template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 0)),
               template_var 2))
           ))),
    ("Binary_CoProduct_QuasiBorel.map_sum_preserves_morphisms",
     "[| ?f : ?X \<rightarrow>\<^sub>Q ?Y;
         ?g : ?X' \<rightarrow>\<^sub>Q ?Y' |]
      ==> map_sum ?f ?g
          : ?X <+>\<^sub>Q ?X' \<rightarrow>\<^sub>Q ?Y <+>\<^sub>Q ?Y'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 5),
              template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 5),
                 template_var 2)),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)))
           )))]
