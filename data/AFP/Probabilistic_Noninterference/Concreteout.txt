Loading theory "Draft.Interface" (required by "Draft.ConcreteTemplates" via "Draft.Concrete" via "Draft.Syntactic_Criteria" via "Draft.Compositionality" via "Draft.Resumption_Based" via "Draft.Language_Semantics")
Loading theory "Draft.Templates" (required by "Draft.ConcreteTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ConcreteTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.092s elapsed time, 0.306s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.125s elapsed time, 0.376s cpu time, 0.051s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ConcreteTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.BigO"
### 0.608s elapsed time, 1.257s cpu time, 0.089s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ConcreteTemplates")
### theory "Draft.Interface"
### 1.151s elapsed time, 2.505s cpu time, 0.211s GC time
Loading theory "Draft.Language_Semantics" (required by "Draft.ConcreteTemplates" via "Draft.Concrete" via "Draft.Syntactic_Criteria" via "Draft.Compositionality" via "Draft.Resumption_Based")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.525s elapsed time, 1.114s cpu time, 0.172s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale PL
  fixes aval :: "'atom => 'state => 'state"
    and tval :: "'test => 'state => bool"
    and cval :: "'choice => 'state => real"
  assumes "PL cval"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Language_Semantics"
### 3.022s elapsed time, 3.822s cpu time, 0.798s GC time
Loading theory "Draft.Resumption_Based" (required by "Draft.ConcreteTemplates" via "Draft.Concrete" via "Draft.Syntactic_Criteria" via "Draft.Compositionality")
Proofs for inductive predicate(s) "genp"
  Proving monotonicity ...
locale PL_Indis
  fixes aval :: "'atom => 'state => 'state"
    and tval :: "'test => 'state => bool"
    and cval :: "'choice => 'state => real"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis cval indis"
locale PL_Indis
  fixes aval :: "'atom => 'state => 'state"
    and tval :: "'test => 'state => bool"
    and cval :: "'choice => 'state => real"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis cval indis"
Proofs for coinductive predicate(s) "discr"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "siso"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "discrCf"
  Proving monotonicity ...
### theory "Draft.Resumption_Based"
### 1.421s elapsed time, 1.944s cpu time, 0.753s GC time
Loading theory "Draft.Compositionality" (required by "Draft.ConcreteTemplates" via "Draft.Concrete" via "Draft.Syntactic_Criteria")
locale PL_Indis
  fixes aval :: "'atom => 'state => 'state"
    and tval :: "'test => 'state => bool"
    and cval :: "'choice => 'state => real"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis cval indis"
### theory "Draft.Compositionality"
### 1.278s elapsed time, 1.373s cpu time, 0.144s GC time
Loading theory "Draft.Syntactic_Criteria" (required by "Draft.ConcreteTemplates" via "Draft.Concrete")
locale PL_Indis
  fixes aval :: "'atom => 'state => 'state"
    and tval :: "'test => 'state => bool"
    and cval :: "'choice => 'state => real"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis cval indis"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Syntactic_Criteria"
### 1.049s elapsed time, 1.190s cpu time, 0.094s GC time
Loading theory "Draft.Concrete" (required by "Draft.ConcreteTemplates")
instantiation
  level :: complete_lattice
  Inf_level == Inf :: level set => level
  Sup_level == Sup :: level set => level
  bot_level == bot :: level
  sup_level == sup :: level => level => level
  top_level == top :: level
  inf_level == inf :: level => level => level
  less_eq_level == less_eq :: level => level => bool
  less_level == less :: level => level => bool
consts
  sec :: "Concrete.var => level"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Concrete"
### 3.720s elapsed time, 4.596s cpu time, 1.202s GC time
Loading theory "Draft.ConcreteTemplates"
val templateLemmas =
   [("Concrete.compatPrchSyntactic", "Example_PL.compatCh (Inl ?p)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Concrete.compatIfchSyntactic",
     "Example_PL.compatCh (Inr ?tst) = Example_PL.compatTst ?tst",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 5, template_hole 4),
           template_hole 3),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 1, template_hole 0),
           template_hole 3),
         template_var 0))),
    ("Concrete.compatTstSyntactic",
     "tstSec ?tst = Lo ==> Example_PL.compatTst ?tst",
     template_implication
      ([template_equation
         (template_app (template_hole 4, template_var 0), template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0),
             template_var 0)
           ))),
    ("Concrete.presAtmSyntactic",
     "sec ?v = Hi ==> Example_PL.presAtm (Assign ?v ?expr)",
     template_implication
      ([template_equation
         (template_app (template_hole 5, template_var 1), template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Concrete.sup_eq_Lo", "(?a \<squnion> ?b = Lo) = (?a = Lo & ?b = Lo)",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_hole 1)),
             template_app
              (template_app (template_hole 3, template_var 0),
               template_hole 1))
           ))),
    ("Concrete.compatAtmSyntactic",
     "exprSec ?expr = Lo | sec ?v = Hi ==>
      Example_PL.compatAtm (Assign ?v ?expr)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_var 1)),
                  template_hole 6)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 5, template_var 0)),
                template_hole 4))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Concrete.exprSec_Lo_eval_eq",
     "[| exprSec ?expr = Lo; Example_PL.indisAbbrev ?s ?t |]
      ==> eval ?expr ?s = eval ?expr ?t",
     template_implication
      ([template_equation
         (template_app (template_hole 6, template_var 2), template_hole 5),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)),
              template_hole 2)
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0))))]:
   (string * thm * template) list
### theory "Draft.ConcreteTemplates"
### 1.370s elapsed time, 1.835s cpu time, 0.211s GC time
val it = (): unit
