Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Trace_BasedTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.Interface" (required by "Draft.Trace_BasedTemplates" via "Draft.Trace_Based" via "Draft.Resumption_Based" via "Draft.Language_Semantics")
Loading theory "Draft.Templates" (required by "Draft.Trace_BasedTemplates" via "Draft.ExtrEqs")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.080s elapsed time, 0.270s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.121s elapsed time, 0.357s cpu time, 0.045s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Trace_BasedTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.BigO"
### 0.612s elapsed time, 1.262s cpu time, 0.080s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Trace_BasedTemplates")
### theory "Draft.Interface"
### 1.132s elapsed time, 2.447s cpu time, 0.187s GC time
Loading theory "Draft.Language_Semantics" (required by "Draft.Trace_BasedTemplates" via "Draft.Trace_Based" via "Draft.Resumption_Based")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.521s elapsed time, 1.103s cpu time, 0.164s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
locale PL
  fixes aval :: "'atom => 'state => 'state"
    and tval :: "'test => 'state => bool"
    and cval :: "'choice => 'state => real"
  assumes "PL cval"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Language_Semantics"
### 3.202s elapsed time, 4.048s cpu time, 0.811s GC time
Loading theory "Draft.Resumption_Based" (required by "Draft.Trace_BasedTemplates" via "Draft.Trace_Based")
Proofs for inductive predicate(s) "genp"
  Proving monotonicity ...
locale PL_Indis
  fixes aval :: "'atom => 'state => 'state"
    and tval :: "'test => 'state => bool"
    and cval :: "'choice => 'state => real"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis cval indis"
locale PL_Indis
  fixes aval :: "'atom => 'state => 'state"
    and tval :: "'test => 'state => bool"
    and cval :: "'choice => 'state => real"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis cval indis"
Proofs for coinductive predicate(s) "discr"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "siso"
  Proving monotonicity ...
Proofs for coinductive predicate(s) "discrCf"
  Proving monotonicity ...
### theory "Draft.Resumption_Based"
### 1.511s elapsed time, 2.070s cpu time, 0.801s GC time
Loading theory "Draft.Trace_Based" (required by "Draft.Trace_BasedTemplates")
locale PL_Indis
  fixes aval :: "'atom => 'state => 'state"
    and tval :: "'test => 'state => bool"
    and cval :: "'choice => 'state => real"
    and indis :: "('state * 'state) set"
  assumes "PL_Indis cval indis"
### theory "Draft.Trace_Based"
### 0.636s elapsed time, 0.670s cpu time, 0.052s GC time
Loading theory "Draft.Trace_BasedTemplates"
val templateLemmas =
   [("Trace_Based.case_nat_comp_Suc", "case_nat ?x ?f o Suc = ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_hole 0),
       template_var 0)),
    ("Trace_Based.part_is_subset", "[| part ?S ?P; ?p : ?P |] ==> ?p <= ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 0),
              template_var 1)
            )],
       template_inequation (less_equals, template_var 0, template_var 2))),
    ("Trace_Based.dist_mult",
     "dist (?x * ?y) (?x * ?z) = \<bar>?x\<bar> * dist ?y ?z",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Trace_Based.dist_divide",
     "dist (?y / ?r) (?z / ?r) = dist ?y ?z / \<bar>?r\<bar>",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 0), template_var 1)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app (template_hole 0, template_var 1)))),
    ("Trace_Based.Least_eq_0_iff",
     "EX i. ?P i ==> ((LEAST i. ?P i) = 0) = ?P 0",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2, template_app (template_hole 1, t_empty)),
           template_hole 0),
         template_app (template_var 0, template_hole 0)))),
    ("Trace_Based.field_abs_le_zero_epsilon",
     "(!!e. (0::?'a) < e ==> \<bar>?x\<bar> <= e) ==>
      \<bar>?x\<bar> = (0::?'a)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app (template_hole 1, template_var 0), template_hole 3))),
    ("Trace_Based.part_insert_subset",
     "[| part (?A - ?X) ?P; ?X <= ?A |] ==> part ?A (insert ?X ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 2),
                  template_var 1)),
              template_var 0)
            ),
        template_inequation (less_equals, template_var 1, template_var 2)],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Trace_Based.integrable_count_space_finite_support",
     "finite {x: ?X. ?f x ~= (0::?'b)} ==> integrable (count_space ?X) ?f",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8, template_app (template_hole 7, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("Trace_Based.part_insert",
     "[| part ?A ?P; ?X Int ?A = {} |] ==> part (?A Un ?X) (insert ?X ?P)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 0), template_var 2),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Trace_Based.dist_nonneg_bounded",
     "[| ?l <= ?x; ?x <= ?u; ?l <= ?y; ?y <= ?u |]
      ==> dist ?x ?y <= ?u - ?l",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 2, template_var 1),
        template_inequation (less_equals, template_var 3, template_var 0),
        template_inequation (less_equals, template_var 0, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 3)))),
    ("Trace_Based.nat_nat_induct",
     "(!!n m. (!!j k. j + k < n + m ==> ?P j k) ==> ?P n m) ==> ?P ?n ?m",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_var 2, template_var 1), template_var 0)
           ))),
    ("Trace_Based.sum_eq_0_iff",
     "[| finite ?A; !!i. i : ?A ==> (0::?'a) <= ?f i |]
      ==> (sum ?f ?A = (0::?'a)) = (ALL i:?A. ?f i = (0::?'a))",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty), template_var 1)),
           template_hole 4),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Trace_Based.sum_less_0_iff",
     "[| finite ?A; !!i. i : ?A ==> (0::?'a) <= ?f i |]
      ==> ((0::?'a) < sum ?f ?A) = (EX i:?A. (0::?'a) < ?f i)",
     template_implication
      ([template_predicate (template_app (template_hole 8, template_var 1)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_hole 4),
           template_app
            (template_app (template_hole 1, t_empty), template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("Trace_Based.dist_sum",
     "(!!i. i : ?I ==> dist (?f i) (?g i) <= ?e i) ==>
      dist (sum ?f ?I) (sum ?g ?I) <= sum ?e ?I",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, t_empty), template_var 3)),
           template_app
            (template_app (template_hole 0, t_empty), template_var 3)),
         template_app
          (template_app (template_hole 0, t_empty), template_var 3)))),
    ("Trace_Based.lebesgue_integral_point_measure",
     "finite {a: ?A. 0 < ?f a & ?g a ~= 0} ==>
      integral\<^sup>L (point_measure ?A (%x. ennreal (?f x))) ?g =
      (SUM a | a : ?A & 0 < ?f a & ?g a ~= 0. ?f a * ?g a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 12, template_app (template_hole 11, t_empty))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2), t_empty)),
           template_var 0),
         template_app
          (template_app (template_hole 1, t_empty),
           template_app (template_hole 11, t_empty))))),
    ("Trace_Based.dist_weighted_sum",
     "[| !!i j.
            [| i : ?I; j : ?J; ?w i ~= 0; ?v j ~= 0 |]
            ==> dist (?f i) (?g j) <= ?d i + ?e j;
         !!i. i : ?I ==> 0 <= ?w i; !!j. j : ?J ==> 0 <= ?v j;
         sum ?w ?I = 1; sum ?v ?J = 1 |]
      ==> dist (SUM i:?I. ?w i * ?f i) (SUM j:?J. ?v j * ?g j)
          <= (SUM i:?I. ?w i * ?d i) + (SUM j:?J. ?v j * ?e j)",
     template_implication
      ([template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_equation
         (template_app
           (template_app (template_hole 3, t_empty), template_var 7),
          template_hole 2),
        template_equation
         (template_app
           (template_app (template_hole 1, t_empty), template_var 6),
          template_hole 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 3, t_empty), template_var 7)),
           template_app
            (template_app (template_hole 1, t_empty), template_var 6)),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, t_empty), template_var 7)),
           template_app
            (template_app (template_hole 1, t_empty), template_var 6)))))]:
   (string * thm * template) list
### theory "Draft.Trace_BasedTemplates"
### 1.319s elapsed time, 1.685s cpu time, 0.229s GC time
val it = (): unit
