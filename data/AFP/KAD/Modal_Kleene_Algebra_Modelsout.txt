Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.124s elapsed time, 0.509s cpu time, 0.047s GC time
Loading theory "Draft.Domain_Semiring" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates" via "Draft.Modal_Kleene_Algebra_Models" via "Draft.Modal_Kleene_Algebra" via "Draft.Range_Semiring" via "Draft.Antidomain_Semiring")
class domain_op = type +
  fixes domain_op :: "'a => 'a"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.224s elapsed time, 0.902s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates" via "Draft.ExtrEqs")
class domain_semigroup = domain_op + semigroup_mult +
  assumes "dsg1": "!!x. d x \<cdot> x = x"
    and "dsg2": "!!x y. d (x \<cdot> d y) = d (x \<cdot> y)"
    and "dsg3": "!!x y. d (d x \<cdot> y) = d x \<cdot> d y"
    and "dsg4": "!!x y. d x \<cdot> d y = d y \<cdot> d x"
### theory "HOL-Library.Nat_Bijection"
### 0.335s elapsed time, 1.324s cpu time, 0.129s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class domain_near_semiring = ab_near_semiring + domain_op + plus_ord +
  assumes "dns1": "!!x. d x \<cdot> x = x"
    and "dns2": "!!x y. d (x \<cdot> d y) = d (x \<cdot> y)"
    and "dns3": "!!x y. d (x + y) = d x + d y"
    and "dns4": "!!x y. d x \<cdot> d y = d y \<cdot> d x"
    and "dns5": "!!x y. d x \<cdot> (d x + d y) = d x"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.886s elapsed time, 3.316s cpu time, 0.734s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 0.948s elapsed time, 3.418s cpu time, 0.692s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class domain_near_semiring_one = ab_near_semiring_one + domain_op +
  plus_ord +
  assumes "dnso1": "!!x. x + d x \<cdot> x = d x \<cdot> x"
    and "dnso2": "!!x y. d (x \<cdot> d y) = d (x \<cdot> y)"
    and "dnso3": "!!x. d x + (1::'a) = (1::'a)"
    and "dnso4": "!!x y. d (x + y) = d x + d y"
    and "dnso5": "!!x y. d x \<cdot> d y = d y \<cdot> d x"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.881s elapsed time, 6.001s cpu time, 0.927s GC time
Loading theory "Draft.Templates" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.113s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates")
class domain_near_semiring_one_zerol = ab_near_semiring_one_zerol +
  domain_near_semiring_one +
  assumes "dnso6": "d (0::'a) = (0::'a)"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.505s elapsed time, 1.046s cpu time, 0.094s GC time
class domain_pre_dioid_one = pre_dioid_one + domain_op +
  assumes "dpd1": "!!x. x <= d x \<cdot> x"
    and "dpd2": "!!x y. d (x \<cdot> d y) = d (x \<cdot> y)"
    and "dpd3": "!!x. d x <= (1::'a)"
    and "dpd4": "!!x y. d (x + y) = d x + d y"
class domain_pre_dioid_one_zerol = pre_dioid_one_zerol +
  domain_pre_dioid_one +
  assumes "dpd5": "d (0::'a) = (0::'a)"
class domain_semiringl = semiring_one_zerol + domain_op + plus_ord +
  assumes "dsr1": "!!x. x + d x \<cdot> x = d x \<cdot> x"
    and "dsr2": "!!x y. d (x \<cdot> d y) = d (x \<cdot> y)"
    and "dsr3": "!!x. d x + (1::'a) = (1::'a)"
    and "dsr4": "d (0::'a) = (0::'a)"
    and "dsr5": "!!x y. d (x + y) = d x + d y"
instantiation
  d_element :: (domain_semiring) bounded_lattice
  bot_d_element == bot :: 'a d_element
  sup_d_element == sup :: 'a d_element => 'a d_element => 'a d_element
  top_d_element == top :: 'a d_element
  inf_d_element == inf :: 'a d_element => 'a d_element => 'a d_element
  less_eq_d_element == less_eq :: 'a d_element => 'a d_element => bool
  less_d_element == less :: 'a d_element => 'a d_element => bool
class domain_semiringl = dioid_one_zerol + semiring_one_zerol +
  domain_pre_dioid_one_zerol +
  assumes "dsr1": "!!x. x + d x \<cdot> x = d x \<cdot> x"
    and "dsr2": "!!x y. d (x \<cdot> d y) = d (x \<cdot> y)"
    and "dsr3": "!!x. d x + (1::'a) = (1::'a)"
    and "dsr4": "d (0::'a) = (0::'a)"
    and "dsr5": "!!x y. d (x + y) = d x + d y"
### theory "Draft.Domain_Semiring"
### 6.152s elapsed time, 10.627s cpu time, 1.196s GC time
Loading theory "Draft.Antidomain_Semiring" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates" via "Draft.Modal_Kleene_Algebra_Models" via "Draft.Modal_Kleene_Algebra" via "Draft.Range_Semiring")
class antidomain_op = type +
  fixes antidomain_op :: "'a => 'a"
class antidomain_left_monoid = antidomain_op + monoid_mult +
  assumes "am1": "!!x. ad x \<cdot> x = ad (1::'a)"
    and "am2": "!!x y. ad x \<cdot> ad y = ad y \<cdot> ad x"
    and "am3": "!!x. ad (ad x) \<cdot> x = x"
    and "am4": "!!x y. ad (x \<cdot> y) \<cdot> ad (x \<cdot> ad y) = ad x"
    and
    "am5":
      "!!x y.
          ad (x \<cdot> y) \<cdot> x \<cdot> ad y =
          ad (x \<cdot> y) \<cdot> x"
class antidomain_monoid = antidomain_left_monoid +
  assumes "am6": "!!x. x \<cdot> ad (1::'a) = ad (1::'a)"
class antidomain_near_semiring = antidomain_op +
  ab_near_semiring_one_zerol + plus_ord +
  assumes "ans1": "!!x. ad x \<cdot> x = (0::'a)"
    and
    "ans2":
      "!!x y.
          ad (x \<cdot> y) + ad (x \<cdot> ad (ad y)) =
          ad (x \<cdot> ad (ad y))"
    and "ans3": "!!x. ad (ad x) + ad x = (1::'a)"
    and "ans4": "!!x y. ad (x + y) = ad x \<cdot> ad y"
class antidomain_pre_dioid = antidomain_op + pre_dioid_one_zerol +
  assumes "apd1": "!!x. ad x \<cdot> x = (0::'a)"
    and "apd2": "!!x y. ad (x \<cdot> y) <= ad (x \<cdot> ad (ad y))"
    and "apd3": "!!x. ad (ad x) + ad x = (1::'a)"
class antidomain_semiringl = antidomain_op + semiring_one_zerol + plus_ord +
  assumes "as1": "!!x. ad x \<cdot> x = (0::'a)"
    and
    "as2":
      "!!x y.
          ad (x \<cdot> y) + ad (x \<cdot> ad (ad y)) =
          ad (x \<cdot> ad (ad y))"
    and "as3": "!!x. ad (ad x) + ad x = (1::'a)"
instantiation
  a2_element :: (antidomain_semiring) boolean_algebra
  minus_a2_element == minus ::
    'a a2_element => 'a a2_element => 'a a2_element
  uminus_a2_element == uminus :: 'a a2_element => 'a a2_element
  bot_a2_element == bot :: 'a a2_element
  top_a2_element == top :: 'a a2_element
  inf_a2_element == inf :: 'a a2_element => 'a a2_element => 'a a2_element
  sup_a2_element == sup :: 'a a2_element => 'a a2_element => 'a a2_element
  less_eq_a2_element == less_eq :: 'a a2_element => 'a a2_element => bool
  less_a2_element == less :: 'a a2_element => 'a a2_element => bool
class antidomain_semiringl = antidomain_left_monoid + antidomain_pre_dioid +
  Dioid.dioid + semiring_one_zerol +
  assumes "as1": "!!x. ad x \<cdot> x = (zero_class.zero::'a)"
    and
    "as2":
      "!!x y.
          ad (x \<cdot> y) + ad (x \<cdot> ad (ad y)) =
          ad (x \<cdot> ad (ad y))"
    and "as3": "!!x. ad (ad x) + ad x = (1::'a)"
### theory "Draft.Antidomain_Semiring"
### 12.547s elapsed time, 14.690s cpu time, 3.081s GC time
Loading theory "Draft.Range_Semiring" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates" via "Draft.Modal_Kleene_Algebra_Models" via "Draft.Modal_Kleene_Algebra")
class range_op = type +
  fixes range_op :: "'a => 'a"
class range_semiring = semiring_one_zero + range_op + plus_ord +
  assumes "rsr1": "!!x. x + x \<cdot> r x = x \<cdot> r x"
    and "rsr2": "!!x y. r (r x \<cdot> y) = r (x \<cdot> y)"
    and "rsr3": "!!x. r x + (1::'a) = (1::'a)"
    and "rsr4": "r (0::'a) = (0::'a)"
    and "rsr5": "!!x y. r (x + y) = r x + r y"
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (%x y. y \<cdot> x) ?xs ==
### foldr (%x y. y \<cdot> x) ?xs (1::?'a)
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (+) (set (?x # ?xs)) == fold (+) ?xs ?x
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### monoid_add.sum_list (+) (0::?'a) ?xs == foldr (+) ?xs (0::?'a)
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### comm_monoid_add.sum (+) (0::?'a) ?g (set ?xs) ==
### rdual.sum_list (map ?g (remdups ?xs))
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (%x y. y \<cdot> x) ?xs ==
### foldr (%x y. y \<cdot> x) ?xs (1::?'a)
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (%x y. y \<cdot> x) ?xs ==
### foldr (%x y. y \<cdot> x) ?xs (1::?'a)
class antirange_op = type +
  fixes antirange_op :: "'a => 'a"
class antirange_semiring = semiring_one_zero + antirange_op + plus_ord +
  assumes "ars1": "!!x. x \<cdot> ar x = (0::'a)"
    and
    "ars2":
      "!!x y.
          ar (x \<cdot> y) + ar (ar ar x \<cdot> y) =
          ar (ar ar x \<cdot> y)"
    and "ars3": "!!x. ar ar x + ar x = (1::'a)"
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list (1::?'a) (%x y. y \<cdot> x) ?xs ==
### foldr (%x y. y \<cdot> x) ?xs (1::?'a)
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### semilattice_sup.Sup_fin (+) (set (?x # ?xs)) == fold (+) ?xs ?x
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### monoid_add.sum_list (+) (0::?'a) ?xs == foldr (+) ?xs (0::?'a)
### Partially applied constant "Groups.plus_class.plus" on left hand side of equation, in theorem:
### comm_monoid_add.sum (+) (0::?'a) ?g (set ?xs) ==
### ardual.sum_list (map ?g (remdups ?xs))
class antirange_semiring = semiring_one_zero + antirange_op + plus_ord +
  assumes "ars1": "!!x. x \<cdot> ar x = (zero_class.zero::'a)"
    and
    "ars2":
      "!!x y.
          ar (x \<cdot> y) + ar (ar ar x \<cdot> y) =
          ar (ar ar x \<cdot> y)"
    and "ars3": "!!x. ar ar x + ar x = (1::'a)"
### theory "Draft.Range_Semiring"
### 9.576s elapsed time, 9.977s cpu time, 0.407s GC time
Loading theory "Draft.Modal_Kleene_Algebra" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates" via "Draft.Modal_Kleene_Algebra_Models")
class modal_semiring = antidomain_semiring + antirange_semiring +
  assumes "domrange": "!!x. d (r x) = r x"
    and "rangedom": "!!x. r (d x) = d x"
### theory "Draft.Modal_Kleene_Algebra"
### 4.319s elapsed time, 5.050s cpu time, 0.181s GC time
Loading theory "Draft.Modal_Kleene_Algebra_Models" (required by "Draft.Modal_Kleene_Algebra_ModelsTemplates")
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list Id (%x y. y O x) ?xs == foldr (%x y. y O x) ?xs Id
### Abstraction on left hand side of equation, in theorem:
### monoid_mult.prod_list t_one (%x y. t_prod y x) ?xs ==
### foldr (%x y. t_prod y x) ?xs t_one
### theory "Draft.Modal_Kleene_Algebra_Models"
### 4.052s elapsed time, 4.215s cpu time, 0.219s GC time
Loading theory "Draft.Modal_Kleene_Algebra_ModelsTemplates"
### theory "Draft.Modal_Kleene_Algebra_ModelsTemplates"
### 0.127s elapsed time, 0.271s cpu time, 0.054s GC time
*** Conflict of type arities:
***   set :: (monoid_mult) plus and
***   set :: (plus) plus
*** At command "theory" (line 1 of "~/ResearchIdeas/templateAnalysis/Isabelle/GeneratedThys/DebugAFP/KAD/Modal_Kleene_Algebra_ModelsTemplates.thy")
Exception- TOPLEVEL_ERROR raised
