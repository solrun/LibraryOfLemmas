Loading theory "Draft.Tree" (required by "Draft.Ta_impl_codegenTemplates" via "Draft.Ta_impl_codegen" via "Draft.Ta_impl" via "Draft.Ta")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Ta_impl_codegenTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Ta_impl_codegenTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Ta_impl_codegenTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.538s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Ta_impl_codegenTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.225s elapsed time, 0.908s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Ta_impl_codegenTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.347s elapsed time, 1.374s cpu time, 0.138s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Ta_impl_codegenTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
### theory "Draft.Tree"
### 0.697s elapsed time, 2.728s cpu time, 0.279s GC time
Loading theory "Draft.Ta" (required by "Draft.Ta_impl_codegenTemplates" via "Draft.Ta_impl_codegen" via "Draft.Ta_impl")
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.948s elapsed time, 3.548s cpu time, 0.841s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.029s elapsed time, 3.721s cpu time, 0.840s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "size <*mlex*> {}"
locale tree_automaton
  fixes TA :: "('Q, 'L) tree_automaton_rec"
  assumes "tree_automaton TA"
Proofs for inductive predicate(s) "accs"
  Proving monotonicity ...
Proofs for inductive predicate(s) "accs_laz"
  Proving monotonicity ...
locale tree_automaton
  fixes TA :: "('Q, 'L) tree_automaton_rec"
  assumes "tree_automaton TA"
Proofs for inductive predicate(s) "ranked_treesp"
  Proving monotonicity ...
locale finite_alphabet
  fixes A :: "'L => nat option"
  assumes "finite_alphabet A"
locale finite_alphabet
  fixes A :: "'L => nat option"
  assumes "finite_alphabet A"
### theory "HOL-Library.Tree"
### 2.002s elapsed time, 6.148s cpu time, 1.092s GC time
Loading theory "Draft.Templates" (required by "Draft.Ta_impl_codegenTemplates" via "Draft.ExtrEqs")
locale ranked_tree_automaton
  fixes TA :: "('Q, 'L) tree_automaton_rec"
    and A :: "'L => nat option"
  assumes "ranked_tree_automaton TA A"
locale det_tree_automaton
  fixes TA :: "('Q, 'L) tree_automaton_rec"
    and A :: "'L => nat option"
  assumes "det_tree_automaton TA A"
locale complete_tree_automaton
  fixes TA :: "('Q, 'L) tree_automaton_rec"
    and A :: "'L => nat option"
  assumes "complete_tree_automaton TA A"
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.059s elapsed time, 0.121s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Ta_impl_codegenTemplates")
Found termination order: "{}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.808s elapsed time, 1.964s cpu time, 0.904s GC time
Proofs for inductive predicate(s) "f_succp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "f_accessible_altp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "b_accessiblep"
  Proving monotonicity ...
Found termination order: "{}"
locale ranked_tree_automaton
  fixes TA :: "('Q, 'L) tree_automaton_rec"
    and A :: "'L => nat option"
  assumes "ranked_tree_automaton TA A"
Proofs for inductive predicate(s) "\<delta>ssp"
  Proving monotonicity ...
locale det_tree_automaton
  fixes TA :: "('Q, 'L) tree_automaton_rec"
    and A :: "'L => nat option"
  assumes "det_tree_automaton TA A"
locale complete_tree_automaton
  fixes TA :: "('Q, 'L) tree_automaton_rec"
    and A :: "'L => nat option"
  assumes "complete_tree_automaton TA A"
locale ranked_tree_automaton
  fixes TA :: "('Q, 'L) tree_automaton_rec"
    and A :: "'L => nat option"
  assumes "ranked_tree_automaton TA A"
### theory "Draft.Ta"
### 2.918s elapsed time, 6.672s cpu time, 1.830s GC time
Loading theory "Draft.AbsAlgo" (required by "Draft.Ta_impl_codegenTemplates" via "Draft.Ta_impl_codegen" via "Draft.Ta_impl")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "bacc_stepp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "br_stepp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "br'_stepp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "br'_initialp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "brw_stepp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "brw_iqp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "brw_initialp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "brw_inner_stepp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "frp_stepp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "frp_initialp"
  Proving monotonicity ...
### theory "Draft.AbsAlgo"
### 3.928s elapsed time, 4.933s cpu time, 1.356s GC time
Loading theory "Draft.Ta_impl" (required by "Draft.Ta_impl_codegenTemplates" via "Draft.Ta_impl_codegen")
instantiation
  ta_rule :: (hashable, hashable) hashable
  hashcode_ta_rule == hashcode :: ('a, 'b) ta_rule => uint32
  def_hashmap_size_ta_rule == def_hashmap_size ::
    ('a, 'b) ta_rule itself => nat
Found termination order: "{}"
instantiation
  ustate_wrapper :: (hashable, hashable) hashable
  hashcode_ustate_wrapper == hashcode :: ('a, 'b) ustate_wrapper => uint32
  def_hashmap_size_ustate_wrapper == def_hashmap_size ::
    ('a, 'b) ustate_wrapper itself => nat
locale hashedTa
  fixes H :: "('Q, 'L) hashedTa"
  assumes "hashedTa H"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale hashedTa
  fixes H :: "('Q, 'L) hashedTa"
  assumes "hashedTa H"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "{}"
locale htai
  fixes H :: "(nat, nat) hashedTa"
  assumes "htai H"
See theory exports
See theory exports
See theory exports
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.equal *
     'b Isabelle9812568.Generated_Code.hashable
       ->
       'a Isabelle9812568.Generated_Code.tree ->
         ('b, 'a, 'c) Isabelle9812568.Generated_Code.hashedTa_ext -> bool
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.equal *
     'b Isabelle9812568.Generated_Code.hashable
       ->
       'a Isabelle9812568.Generated_Code.tree ->
         ('b, 'a, 'c) Isabelle9812568.Generated_Code.hashedTa_ext -> bool
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.equal *
     'b Isabelle9812568.Generated_Code.hashable
       ->
       'c Isabelle9812568.Generated_Code.equal *
       'c Isabelle9812568.Generated_Code.hashable
         ->
         ('a, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext ->
           ('c, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext ->
             ('a * 'c, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.equal *
     'b Isabelle9812568.Generated_Code.hashable
       ->
       'c Isabelle9812568.Generated_Code.equal *
       'c Isabelle9812568.Generated_Code.hashable
         ->
         ('a, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext ->
           ('c, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext ->
             ('a * 'c, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.equal *
     'b Isabelle9812568.Generated_Code.hashable
       ->
       'c Isabelle9812568.Generated_Code.equal *
       'c Isabelle9812568.Generated_Code.hashable
         ->
         ('a, 'b, 'd) Isabelle9812568.Generated_Code.hashedTa_ext ->
           ('c, 'b, 'e) Isabelle9812568.Generated_Code.hashedTa_ext ->
             ('a * 'c, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.equal *
     'b Isabelle9812568.Generated_Code.hashable
       ->
       'c Isabelle9812568.Generated_Code.equal *
       'c Isabelle9812568.Generated_Code.hashable
         ->
         ('a, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext ->
           ('c, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext ->
             (('a, 'c) Isabelle9812568.Generated_Code.ustate_wrapper, 'b,
             unit)
             Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   'a Isabelle9812568.Generated_Code.hashable ->
     'b Isabelle9812568.Generated_Code.hashable ->
       unit -> ('a, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.hashable ->
       'a ->
         ('a, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext ->
           ('a, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.equal *
     'b Isabelle9812568.Generated_Code.hashable
       ->
       ('a, 'b) Isabelle9812568.Generated_Code.ta_rule ->
         ('a, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext ->
           ('a, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.equal ->
       ('a, 'b, 'c) Isabelle9812568.Generated_Code.hashedTa_ext ->
         ('a, unit) Isabelle9812568.Generated_Code.hashmap ->
           ('a, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.equal *
     'b Isabelle9812568.Generated_Code.hashable
       ->
       ('a, 'b, 'c) Isabelle9812568.Generated_Code.hashedTa_ext ->
         ('a, 'b, unit) Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.equal *
     'b Isabelle9812568.Generated_Code.hashable
       ->
       ('a, 'b, 'c) Isabelle9812568.Generated_Code.hashedTa_ext ->
         'b Isabelle9812568.Generated_Code.tree option
val it = fn:
   'a Isabelle9812568.Generated_Code.equal ->
     'b Isabelle9812568.Generated_Code.equal *
     'b Isabelle9812568.Generated_Code.hashable
       ->
       ('a, 'b, 'c) Isabelle9812568.Generated_Code.hashedTa_ext ->
         ('a, 'b, 'c) Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.equal ->
       ('a, 'b, 'c) Isabelle9812568.Generated_Code.hashedTa_ext ->
         ('a, 'b, 'c) Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   'a Isabelle9812568.Generated_Code.equal *
   'a Isabelle9812568.Generated_Code.hashable
     ->
     'b Isabelle9812568.Generated_Code.equal *
     'b Isabelle9812568.Generated_Code.hashable
       ->
       ('a, 'b, 'c) Isabelle9812568.Generated_Code.hashedTa_ext ->
         ('a, 'b, 'c) Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   Isabelle9812568.Generated_Code.nat Isabelle9812568.Generated_Code.tree ->
     (Isabelle9812568.Generated_Code.nat,
     Isabelle9812568.Generated_Code.nat, unit)
     Isabelle9812568.Generated_Code.hashedTa_ext
       -> bool
val it = fn:
   (Isabelle9812568.Generated_Code.nat, Isabelle9812568.Generated_Code.nat,
   unit)
   Isabelle9812568.Generated_Code.hashedTa_ext
     ->
     (Isabelle9812568.Generated_Code.nat,
     Isabelle9812568.Generated_Code.nat, unit)
     Isabelle9812568.Generated_Code.hashedTa_ext
       ->
       (Isabelle9812568.Generated_Code.nat,
       Isabelle9812568.Generated_Code.nat, unit)
       Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   (Isabelle9812568.Generated_Code.nat, Isabelle9812568.Generated_Code.nat,
   unit)
   Isabelle9812568.Generated_Code.hashedTa_ext
     ->
     (Isabelle9812568.Generated_Code.nat,
     Isabelle9812568.Generated_Code.nat, unit)
     Isabelle9812568.Generated_Code.hashedTa_ext
       ->
       (Isabelle9812568.Generated_Code.nat,
       Isabelle9812568.Generated_Code.nat, unit)
       Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   (Isabelle9812568.Generated_Code.nat, Isabelle9812568.Generated_Code.nat,
   unit)
   Isabelle9812568.Generated_Code.hashedTa_ext
     ->
     (Isabelle9812568.Generated_Code.nat,
     Isabelle9812568.Generated_Code.nat, unit)
     Isabelle9812568.Generated_Code.hashedTa_ext
       ->
       (Isabelle9812568.Generated_Code.nat,
       Isabelle9812568.Generated_Code.nat, unit)
       Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   unit ->
     (Isabelle9812568.Generated_Code.nat,
     Isabelle9812568.Generated_Code.nat, unit)
     Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   Isabelle9812568.Generated_Code.nat ->
     (Isabelle9812568.Generated_Code.nat,
     Isabelle9812568.Generated_Code.nat, unit)
     Isabelle9812568.Generated_Code.hashedTa_ext
       ->
       (Isabelle9812568.Generated_Code.nat,
       Isabelle9812568.Generated_Code.nat, unit)
       Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   (Isabelle9812568.Generated_Code.nat, Isabelle9812568.Generated_Code.nat)
   Isabelle9812568.Generated_Code.ta_rule
     ->
     (Isabelle9812568.Generated_Code.nat,
     Isabelle9812568.Generated_Code.nat, unit)
     Isabelle9812568.Generated_Code.hashedTa_ext
       ->
       (Isabelle9812568.Generated_Code.nat,
       Isabelle9812568.Generated_Code.nat, unit)
       Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   (Isabelle9812568.Generated_Code.nat, Isabelle9812568.Generated_Code.nat,
   unit)
   Isabelle9812568.Generated_Code.hashedTa_ext
     ->
     (Isabelle9812568.Generated_Code.nat,
     Isabelle9812568.Generated_Code.nat, unit)
     Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   (Isabelle9812568.Generated_Code.nat, Isabelle9812568.Generated_Code.nat,
   unit)
   Isabelle9812568.Generated_Code.hashedTa_ext
     ->
     Isabelle9812568.Generated_Code.nat Isabelle9812568.Generated_Code.tree
     option
val it = fn:
   (Isabelle9812568.Generated_Code.nat, Isabelle9812568.Generated_Code.nat,
   unit)
   Isabelle9812568.Generated_Code.hashedTa_ext
     ->
     (Isabelle9812568.Generated_Code.nat,
     Isabelle9812568.Generated_Code.nat, unit)
     Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   (Isabelle9812568.Generated_Code.nat, Isabelle9812568.Generated_Code.nat,
   unit)
   Isabelle9812568.Generated_Code.hashedTa_ext
     ->
     (Isabelle9812568.Generated_Code.nat,
     Isabelle9812568.Generated_Code.nat, unit)
     Isabelle9812568.Generated_Code.hashedTa_ext
val it = fn:
   (Isabelle9812568.Generated_Code.nat, Isabelle9812568.Generated_Code.nat,
   unit)
   Isabelle9812568.Generated_Code.hashedTa_ext
     ->
     (Isabelle9812568.Generated_Code.nat,
     Isabelle9812568.Generated_Code.nat, unit)
     Isabelle9812568.Generated_Code.hashedTa_ext
### theory "Draft.Ta_impl"
### 10.858s elapsed time, 11.354s cpu time, 0.737s GC time
Loading theory "Draft.Ta_impl_codegen" (required by "Draft.Ta_impl_codegenTemplates")
### Legacy feature! export_code with file argument (line 39 of "$AFP/Tree-Automata/Ta_impl_codegen.thy")
### Legacy feature! export_code with file argument (line 64 of "$AFP/Tree-Automata/Ta_impl_codegen.thy")
### theory "Draft.Ta_impl_codegen"
### 3.852s elapsed time, 3.988s cpu time, 0.167s GC time
*** Failed to load theory "Draft.Ta_impl_codegenTemplates" (unresolved "Draft.Ta_impl_codegen")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "182")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 48 of "$AFP/Tree-Automata/Ta_impl_codegen.thy")
Exception- TOPLEVEL_ERROR raised
