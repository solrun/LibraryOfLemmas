   [("Mndet.mono_Mndet", "monofun (mndet ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Mndet.contlub_Mndet", "contlub (mndet ?A)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Mndet.mt_mndet", "mndet {} ?P = STOP",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Mndet.D_mndet1", "D (mndet {} ?P) = {}",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_var 0)),
       template_hole 0)),
    ("Mndet.T_mdet1", "T (mndet {} ?P) = {[]}",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_hole 3),
           template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_hole 0))),
    ("Mndet.F_mndet1", "F (mndet {} ?P) = {(s, X). s = []}",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_hole 4),
           template_var 0)),
       template_app
        (template_hole 3, template_app (template_hole 2, t_empty)))),
    ("Mndet.mndet_unit", "mndet {?a} ?P = (?a \<rightarrow> ?P ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         t_empty),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_var 0, template_var 1)))),
    ("Mndet.mndet_chainpreserving",
     "chain ?Y ==> chain (%i. mndet ?A (?Y i))",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 1))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Mndet.Mndet_cont",
     "(!!x. cont (?f x)) ==>
      cont (%y. \<sqinter>z\<in>?A \<rightarrow>  ?f z y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Mndet.Mndet_cont_finite",
     "[| finite ?A; !!x. cont (?f x) |]
      ==> cont (%y. \<sqinter>z\<in>?A \<rightarrow>  ?f z y)",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 1)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Mndet.D_mndet",
     "?A ~= {} ==> D (mndet ?A ?P) = (UN x:?A. D (x \<rightarrow> ?P x))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1))))),
    ("Mndet.T_mndet",
     "?A ~= {} ==> T (mndet ?A ?P) = (UN x:?A. T (x \<rightarrow> ?P x))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1))))),
    ("Mndet.F_mndet",
     "?A ~= {} ==> F (mndet ?A ?P) = (UN x:?A. F (x \<rightarrow> ?P x))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, t_empty), template_var 1))))),
    ("Mndet.mndet_is_process",
     "?A ~= {} ==>
      is_process
       (UN x:?A. F (x \<rightarrow> ?P x),
        UN x:?A. D (x \<rightarrow> ?P x))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 9))],
       template_predicate
        (
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, t_empty),
                     template_var 1))),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 1))))
           ))),
    ("Mndet.mndet_distrib",
     "[| ?A ~= {}; ?B ~= {} |]
      ==> mndet (?A Un ?B) ?P = (mndet ?A ?P |-| mndet ?B ?P)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 4)),
        template_negation
         (template_equation (template_var 1, template_hole 4))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           t_empty),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 2, template_var 2), t_empty)),
           template_app
            (template_app (template_hole 2, template_var 1), t_empty))))),
    ("Mndet.mndet_distrib_unit",
     "?A - {?a} ~= {} ==>
      mndet (insert ?a ?A) ?P =
      (?a \<rightarrow> ?P ?a |-| mndet (?A - {?a}) ?P)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_app
               (template_app (template_hole 6, template_var 2),
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_hole 4)),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 5, template_var 1),
               template_var 2)),
           t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_var 0, template_var 1))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 6, template_var 2),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_hole 4))),
             t_empty))))),
    ("Mndet.rep_abs_mndet",
     "?A ~= {} ==>
      Rep_process
       (Abs_process
         (UN x:?A. F (x \<rightarrow> ?P x),
          UN x:?A. D (x \<rightarrow> ?P x))) =
      (UN x:?A. F (x \<rightarrow> ?P x),
       UN x:?A. D (x \<rightarrow> ?P x))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 11))],
       template_equation
        (template_app
          (template_hole 9,
           template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 5, t_empty),
                     template_var 1))),
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, t_empty),
                   template_var 1))))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, t_empty), template_var 1))),
           template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, t_empty),
               template_var 1))))))]
