   [("CSP.bot_less2", "Bot <= ?X",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("CSP.bot_less1", "\<bottom> <= ?X",
     template_inequation (less_equals, template_hole 0, template_var 0)),
    ("CSP.det_id", "(?P [+] ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("CSP.det_bot", "(?P [+] \<bottom>) = \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("CSP.det_STOP", "(?P [+] STOP) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("CSP.hide_set_empty", "?P \ {} = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("CSP.hide_set_bot", "\<bottom> \ ?A = \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("CSP.hide_set_SKIP", "SKIP \ ?A = SKIP",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("CSP.hide_set_STOP", "STOP \ ?A = STOP",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("CSP.Mprefix_STOP", "Mprefix {} ?P = STOP",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("CSP.ndet_id", "(?P |-| ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 0), template_var 0),
       template_var 0)),
    ("CSP.ndet_bot", "(?P |-| \<bottom>) = \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("CSP.SEQ_SKIP", "(?P `;` SKIP) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("CSP.Bot_SEQ", "(\<bottom> `;` ?P) = \<bottom>",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("CSP.SKIP_SEQ", "(SKIP `;` ?P) = ?P",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("CSP.STOP_SEQ", "(STOP `;` ?P) = STOP",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_hole 0)),
    ("CSP.par_Int_bot", "(?P \<lbrakk>?A\<rbrakk> \<bottom>) = \<bottom>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("CSP.Inter_skip1", "(?P|||SKIP) = ?P",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 0), template_hole 1),
         template_hole 0),
       template_var 0)),
    ("CSP.par_Int_skip", "(SKIP \<lbrakk>?A\<rbrakk> SKIP) = SKIP",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("CSP.par_Int_skip_stop", "(SKIP \<lbrakk>?A\<rbrakk> STOP) = STOP",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_hole 1), template_var 0),
         template_hole 0),
       template_hole 0)),
    ("CSP.event_set", "?e : insert tick (range ev)",
     template_predicate
      (
         template_app
          (template_app (template_hole 5, template_var 0),
           template_app
            (template_app (template_hole 4, template_hole 3),
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_hole 0)))
         )),
    ("CSP.Inter_stop_seq_stop", "(?P|||STOP) = (?P `;` STOP)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 3, template_var 0), template_hole 2),
         template_hole 1),
       template_app
        (template_app (template_hole 0, template_var 0), template_hole 1))),
    ("CSP.sync_commute",
     "(?P \<lbrakk>?A\<rbrakk> ?Q) = (?Q \<lbrakk>?A\<rbrakk> ?P)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 2))),
    ("CSP.Inter_commute", "(?P|||?Q) = (?Q|||?P)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 1))),
    ("CSP.par_comm", "(?P||?Q) = (?Q||?P)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 0), template_hole 0),
         template_var 1))),
    ("CSP.mprefix_singl", "Mprefix {?a} ?P = (?a \<rightarrow> ?P ?a)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_var 0, template_var 1)))),
    ("CSP.mono_ndet_FD_left", "?P <= ?Q ==> (?P |-| ?S) <= ?Q",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("CSP.mono_ndet_FD_right", "?P <= ?Q ==> (?S |-| ?P) <= ?Q",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_var 1))),
    ("CSP.det_assoc", "(?M [+] ?P [+] ?Q) = (?M [+] (?P [+] ?Q))",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CSP.non_det_assoc", "(?M |-| ?P |-| ?Q) = (?M |-| (?P |-| ?Q))",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CSP.SEQ_assoc", "(?P `;` (?Q `;` ?S)) = (?P `;` ?Q `;` ?S)",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("CSP.Mprefix_refines_Mndet", "mndet ?A ?P <= Mprefix ?A ?P",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1), t_empty),
       template_app
        (template_app (template_hole 0, template_var 1), t_empty))),
    ("CSP.mono_det_FD_onside", "?P <= ?P' ==> (?P [+] ?S) <= (?P' [+] ?S)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CSP.mono_hide_FD", "?P <= ?Q ==> ?P \ ?A <= ?Q \ ?A",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("CSP.mono_write0_FD",
     "?P <= ?Q ==> (?a \<rightarrow> ?P) <= (?a \<rightarrow> ?Q)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("CSP.mono_hide_ref", "?P << ?Q ==> ?P \ ?A << ?Q \ ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("CSP.mono_write0_ref",
     "?P << ?Q ==> (?a \<rightarrow> ?P) << (?a \<rightarrow> ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("CSP.par_stop", "?P ~= \<bottom> ==> (?P||STOP) = STOP",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_equation
        (template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1),
           template_hole 0),
         template_hole 0))),
    ("CSP.SEQ_assoc_D", "D (?P `;` (?Q `;` ?S)) = D (?P `;` ?Q `;` ?S)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("CSP.det_distrib", "(?M [+] (?P |-| ?Q)) = (?M [+] ?P |-| ?M [+] ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("CSP.hide_ndet", "(?P |-| ?Q) \ ?A = (?P \ ?A |-| ?Q \ ?A)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("CSP.mprefix_Un_distr",
     "Mprefix (?A Un ?B) ?P = (Mprefix ?A ?P [+] Mprefix ?B ?P)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("CSP.write0_non_det",
     "(?a \<rightarrow> (?P |-| ?Q)) =
      (?a \<rightarrow> ?P |-| ?a \<rightarrow> ?Q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("CSP.non_det_distrib",
     "(?M |-| ?P [+] ?Q) = ((?M |-| ?P) [+] (?M |-| ?Q))",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("CSP.SEQ_Ndet_distrL",
     "(?P `;` (?Q |-| ?S)) = (?P `;` ?Q |-| ?P `;` ?S)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("CSP.mprefix_seq",
     "(Mprefix ?A ?P `;` ?Q) = Mprefix ?A (%x. ?P x `;` ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2), t_empty))),
    ("CSP.SEQ_Ndet_distrR",
     "((?P |-| ?Q) `;` ?S) = (?P `;` ?S |-| ?Q `;` ?S)",
     template_equation
      (template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_var 0)))),
    ("CSP.hide_un_D1", "D (?P \ (?A Un ?B)) <= D ((?P \ ?A) \ ?B)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("CSP.length_strict_mono",
     "strict_mono ?f ==> ?i + length (?f 0) <= length (?f ?i)",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 1))],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 2, template_var 0),
           template_app
            (template_hole 1,
             template_app (template_var 1, template_hole 0))),
         template_app
          (template_hole 1,
           template_app (template_var 1, template_var 0))))),
    ("CSP.prefix_Par_Int_skip2",
     "?a : ?A ==> (?a \<rightarrow> ?P \<lbrakk>?A\<rbrakk> SKIP) = STOP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_var 0)),
             template_var 1),
           template_hole 1),
         template_hole 0))),
    ("CSP.mono_sync_FD_oneside",
     "?P <= ?P' ==>
      (?P \<lbrakk>?A\<rbrakk> ?Q) <= (?P' \<lbrakk>?A\<rbrakk> ?Q)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("CSP.mono_write_FD",
     "?P <= ?Q ==>
      (?c`!`?x \<rightarrow> ?P) <= (?c`!`?x \<rightarrow> ?Q)",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 3),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0),
           template_var 2)))),
    ("CSP.mono_write_ref",
     "?P << ?Q ==>
      (?c`!`?x \<rightarrow> ?P) << (?c`!`?x \<rightarrow> ?Q)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0),
               template_var 2))
           ))),
    ("CSP.hide_write0", "?a : ?B ==> (?a \<rightarrow> ?P) \ ?B = ?P \ ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("CSP.write0_det_non_det",
     "(?a \<rightarrow> ?P [+] ?a \<rightarrow> ?Q) =
      (?a \<rightarrow> ?P |-| ?a \<rightarrow> ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("CSP.sync_assoc",
     "(?P \<lbrakk>?C\<rbrakk> ?Q \<lbrakk>?C\<rbrakk> ?S) =
      (?P \<lbrakk>?C\<rbrakk> (?Q \<lbrakk>?C\<rbrakk> ?S))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 2),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("CSP.par_assoc", "(?P||?Q||?S) = (?P||(?Q||?S))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0),
               template_var 1)),
           template_hole 0),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 1, template_var 2), template_hole 0),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 1),
             template_hole 0),
           template_var 0)))),
    ("CSP.prefix_par",
     "(?a \<rightarrow> ?P||?a \<rightarrow> ?Q) =
      (?a \<rightarrow> (?P||?Q))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_hole 0),
         template_app
          (template_app (template_hole 1, template_var 2), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 0),
           template_var 0)))),
    ("CSP.sync_assoc_oneside",
     "(?P \<lbrakk>?C\<rbrakk> ?Q \<lbrakk>?C\<rbrakk> ?S)
      <= (?P \<lbrakk>?C\<rbrakk> (?Q \<lbrakk>?C\<rbrakk> ?S))",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1)),
           template_var 2),
         template_var 0),
       template_app
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 1),
             template_var 2),
           template_var 0)))),
    ("CSP.hide_un", "finite ?A ==> ?P \ (?A Un ?B) = (?P \ ?A) \ ?B",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 2))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2)),
           template_var 0)))),
    ("CSP.mndet_refine_FD",
     "?a : ?A ==> mndet ?A ?P <= (?a \<rightarrow> ?P ?a)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 1, template_var 1), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app (template_var 0, template_var 2))))),
    ("CSP.par_int_ndet_distrib",
     "(?P |-| ?Q \<lbrakk>?A\<rbrakk> ?M) =
      ((?P \<lbrakk>?A\<rbrakk> ?M) |-| (?Q \<lbrakk>?A\<rbrakk> ?M))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 2)),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1),
           template_var 0)))),
    ("CSP.par_ndet_distrib2", "(?P |-| ?Q||?M) = ((?P||?M) |-| (?Q||?M))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_hole 0),
         template_var 0),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app (template_hole 2, template_var 2),
               template_hole 0),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 0),
           template_var 0)))),
    ("CSP.hide_write",
     "?c ?a : ?B ==> (?c`!`?a \<rightarrow> ?P) \ ?B = ?P \ ?B",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_var 3, template_var 2)),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_var 1)))),
    ("CSP.mprefix_Par_Int_skip",
     "(Mprefix ?A ?P \<lbrakk>?B\<rbrakk> SKIP) =
      Mprefix (?A - ?B) (%x. ?P x \<lbrakk>?B\<rbrakk> SKIP)",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 1),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         t_empty))),
    ("CSP.sync_assoc_oneside_D",
     "D (?P \<lbrakk>?C\<rbrakk> (?Q \<lbrakk>?C\<rbrakk> ?S))
      <= D (?P \<lbrakk>?C\<rbrakk> ?Q \<lbrakk>?C\<rbrakk> ?S)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0))),
       template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 3),
                   template_var 2),
                 template_var 1)),
             template_var 2),
           template_var 0)))),
    ("CSP.hide_un_D",
     "finite ?A ==> D ((?P \ ?A) \ ?B) = D (?P \ (?A Un ?B))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("CSP.hide_un_D2",
     "finite ?A ==> D ((?P \ ?A) \ ?B) <= D (?P \ (?A Un ?B))",
     template_implication
      ([template_predicate
         (template_app (template_hole 4, template_var 2))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)))))),
    ("CSP.mndet_subset_FD",
     "?A ~= {} ==>
      (\<sqinter>xa\<in>?A Un ?B \<rightarrow>  ?P)
      <= (\<sqinter>xa\<in>?A \<rightarrow>  ?P)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           t_empty),
         template_app
          (template_app (template_hole 1, template_var 2), t_empty)))),
    ("CSP.no_hide_write0",
     "?a ~: ?B ==> (?a \<rightarrow> ?P) \ ?B = (?a \<rightarrow> ?P \ ?B)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0)),
           template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("CSP.mono_mprefix_FD",
     "ALL x:?A. ?P x <= ?P' x ==> Mprefix ?A ?P <= Mprefix ?A ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("CSP.mono_mprefix_ref",
     "ALL x:?A. ?P x << ?Q x ==> Mprefix ?A ?P << Mprefix ?A ?Q",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("CSP.mono_det_FD",
     "[| ?P <= ?P'; ?S <= ?S' |] ==> (?P [+] ?S) <= (?P' [+] ?S')",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("CSP.mono_ndet_FD",
     "[| ?P <= ?P'; ?S <= ?S' |] ==> (?P |-| ?S) <= (?P' |-| ?S')",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("CSP.mono_seq_FD",
     "[| ?P <= ?P'; ?S <= ?S' |] ==> (?P `;` ?S) <= (?P' `;` ?S')",
     template_implication
      ([template_inequation (less_equals, template_var 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("CSP.mono_det_ref",
     "[| ?P << ?P'; ?S << ?S' |] ==> (?P [+] ?S) << (?P' [+] ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("CSP.mono_ndet_ref",
     "[| ?P << ?P'; ?S << ?S' |] ==> (?P |-| ?S) << (?P' |-| ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("CSP.mono_seq_ref",
     "[| ?P << ?P'; ?S << ?S' |] ==> (?P `;` ?S) << (?P' `;` ?S')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("CSP.prefix_Par_Int_skip",
     "(?a \<rightarrow> ?P \<lbrakk>?A\<rbrakk> SKIP) =
      (if ?a : ?A then STOP
       else ?a \<rightarrow> (?P \<lbrakk>?A\<rbrakk> SKIP))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_var 1)),
           template_var 0),
         template_hole 3),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0)),
           template_hole 0),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 5, template_var 1),
               template_var 0),
             template_hole 3))))),
    ("CSP.interleave_set",
     "?s setinterleaves ((?t, ?u), ?C) ==> set ?t Un set ?u <= set ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 3)))),
    ("CSP.prefix_Par_Int_skip1",
     "?a ~: ?A ==>
      (?a \<rightarrow> ?P \<lbrakk>?A\<rbrakk> SKIP) =
      (?a \<rightarrow> (?P \<lbrakk>?A\<rbrakk> SKIP))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 1)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 0)),
             template_var 1),
           template_hole 0),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 0),
               template_var 1),
             template_hole 0))))),
    ("CSP.mono_sync_FD",
     "[| ?P <= ?P'; ?Q <= ?Q' |]
      ==> (?P \<lbrakk>?A\<rbrakk> ?Q) <= (?P' \<lbrakk>?A\<rbrakk> ?Q')",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 4),
             template_var 0),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0),
           template_var 1)))),
    ("CSP.mono_sync_ref",
     "[| ?P << ?P'; ?Q << ?Q' |]
      ==> (?P \<lbrakk>?A\<rbrakk> ?Q) << (?P' \<lbrakk>?A\<rbrakk> ?Q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 0),
                 template_var 2)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0),
               template_var 1))
           ))),
    ("CSP.mono_Inter_ref",
     "[| ?P << ?P'; ?Q << ?Q' |] ==> (?P|||?Q) << (?P'|||?Q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0),
               template_var 0))
           ))),
    ("CSP.mono_Par_ref",
     "[| ?P << ?P'; ?Q << ?Q' |] ==> (?P||?Q) << (?P'||?Q')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0),
                 template_var 1)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0),
               template_var 0))
           ))),
    ("CSP.prefix_par_Int2",
     "?a : ?A ==>
      (?a \<rightarrow> ?P \<lbrakk>?A\<rbrakk> ?a \<rightarrow> ?Q) =
      (?a \<rightarrow> (?P \<lbrakk>?A\<rbrakk> ?Q))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_var 2),
           template_app
            (template_app (template_hole 0, template_var 3),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 1),
               template_var 2),
             template_var 0))))),
    ("CSP.elemDIselemHD",
     "?t : D ?P ==> trace_hide ?t (ev ` ?A) : D (?P \ ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 5, t_empty), template_var 2)),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("CSP.elemTIselemHT",
     "?t : T ?P ==> trace_hide ?t (ev ` ?A) : T (?P \ ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app (template_hole 6, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 5, t_empty), template_var 2)),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)))
           ))),
    ("CSP.hide_mprefix_distr",
     "?B Int ?A = {} ==> Mprefix ?A ?P \ ?B = Mprefix ?A (%x. ?P x \ ?B)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 4, template_var 2), template_var 1),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("CSP.syncTlEmpty",
     "?a setinterleaves (([], ?u), ?A) ==>
      tl ?a setinterleaves (([], tl ?u), ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_hole 2),
                  template_app
                   (template_app (template_hole 1, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app (template_hole 0, template_var 2)),
             template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_app (template_hole 0, template_var 0)))))
           ))),
    ("CSP.EmptyLeftSync",
     "?s setinterleaves (([], ?t), ?A) ==> ?s = ?t & set ?t Int ?A = {}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_hole 7),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 2),
                 template_var 0)),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 0)),
                   template_var 1)),
               template_hole 0))
           ))),
    ("CSP.tick_T_F", "?t @ [tick] : T ?P ==> (?t @ [tick], ?X) : F ?P",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_hole 5),
                    template_hole 4))),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 7, template_var 2),
                     template_app
                      (template_app (template_hole 6, template_hole 5),
                       template_hole 4))),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("CSP.non_sync_interleaving",
     "(set ?t Un set ?u) Int ?C = {} ==>
      setinterleaving (?t, ?C, ?u) ~= {}",
     template_implication
      ([template_equation
         (template_app
           (template_app
             (template_hole 9,
              template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 7, template_var 2)),
                template_app (template_hole 7, template_var 1))),
            template_var 0),
          template_hole 6)],
       template_negation
        (
           template_equation
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 2),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 1))),
             template_hole 0)
           ))),
    ("CSP.interleave_order",
     "?s setinterleaves ((?t1.0 @ ?t2.0, ?u), ?C) ==>
      set ?t2.0 <= set (drop (length ?t1.0) ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_hole 7,
                template_app
                 (template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))))
            )],
       template_inequation
        (less_equals, template_app (template_hole 2, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 3)),
             template_var 4))))),
    ("CSP.mono_mndet_FD",
     "ALL x:?A. ?P x <= ?P' x ==> mndet ?A ?P <= mndet ?A ?P'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2), t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("CSP.no_hide_write",
     "ALL y. ?c y ~: ?B ==>
      (?c`!`?a \<rightarrow> ?P) \ ?B = (?c`!`?a \<rightarrow> ?P \ ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1),
               template_var 0)),
           template_var 2),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 1),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 2))))),
    ("CSP.mono_read_FD",
     "(!!x. ?P x <= ?Q x) ==> read ?c UNIV ?P <= read ?c UNIV ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0),
           t_empty),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0),
           t_empty)))),
    ("CSP.mono_read_ref",
     "(!!x. ?P x << ?Q x) ==> read ?c UNIV ?P << read ?c UNIV ?Q",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 0),
                   template_hole 0),
                 t_empty)),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 0),
                 template_hole 0),
               t_empty))
           ))),
    ("CSP.mndet_FD_subset",
     "[| ?A ~= {}; ?A <= ?B |] ==> mndet ?B ?P <= mndet ?A ?P",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 3)),
        template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 1), t_empty),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("CSP.F_minus_D_seq_opt",
     "((?a, ?b) : F (?P `;` ?Q)) =
      (?a : D (?P `;` ?Q) | (?a, ?b) : F_minus_D_seq ?P ?Q)",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 3),
             template_var 2)),
         template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 4, template_var 1),
                 template_var 0)))),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("CSP.mono_trace_hide",
     "?a <= ?b ==> trace_hide ?a (ev ` ?A) <= trace_hide ?b (ev ` ?A)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 4, t_empty), template_var 2),
         template_app
          (template_app (template_hole 4, t_empty), template_var 1)))),
    ("CSP.hide_sync_D2",
     "?A Int ?C = {} ==>
      D (?P \ ?A \<lbrakk>?C\<rbrakk> ?Q \ ?A)
      <= D ((?P \<lbrakk>?C\<rbrakk> ?Q) \ ?A)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_hole 4)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3))),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_var 3))))),
    ("CSP.mono_constant",
     "[| incseq ?f; ALL i. ?f i <= ?a |] ==> EX i. ALL j>=i. ?f j = ?f i",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 1)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("CSP.interleave_eq_size",
     "[| ?s setinterleaves ((?t, ?u), ?C);
         ?s' setinterleaves ((?t, ?u), ?C) |]
      ==> length ?s = length ?s'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))))
            )],
       template_equation
        (template_app (template_hole 0, template_var 4),
         template_app (template_hole 0, template_var 0)))),
    ("CSP.prefix_Inter",
     "(?a \<rightarrow> ?P|||?b \<rightarrow> ?Q) =
      (?a \<rightarrow> (?P|||?b \<rightarrow> ?Q) [+]
       ?b \<rightarrow> (?a \<rightarrow> ?P|||?Q))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 2)),
           template_hole 1),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 3),
             template_app
              (template_app
                (template_app (template_hole 3, template_var 2),
                 template_hole 1),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_var 0)))),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 2)),
               template_hole 1),
             template_var 0))))),
    ("CSP.no_hide_read",
     "ALL y. ?c y ~: ?B ==>
      read ?c UNIV ?P \ ?B = (?c`?`x \<rightarrow> ?P x \ ?B)",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0),
               t_empty)),
           template_var 1),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0),
           t_empty)))),
    ("CSP.interleave_size",
     "?s setinterleaves ((?t, ?u), ?C) ==>
      length ?s = length ?t + length ?u - length (filter (%x. x : ?C) ?t)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 3),
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 2),
                  template_app
                   (template_app (template_hole 6, template_var 1),
                    template_var 0))))
            )],
       template_equation
        (template_app (template_hole 4, template_var 3),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 4, template_var 2)),
               template_app (template_hole 4, template_var 0))),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, t_empty),
               template_var 2)))))),
    ("CSP.hide_sync",
     "[| finite ?A; ?A Int ?C = {} |]
      ==> (?P \<lbrakk>?C\<rbrakk> ?Q) \ ?A =
          (?P \ ?A \<lbrakk>?C\<rbrakk> ?Q \ ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 3), template_var 2),
          template_hole 3)],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0)),
           template_var 3),
         template_app
          (template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 3)),
             template_var 2),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 3))))),
    ("CSP.prefix_par_Int1",
     "[| ?a : ?A; ?b : ?A; ?a ~= ?b |]
      ==> (?a \<rightarrow> ?P \<lbrakk>?A\<rbrakk> ?b \<rightarrow> ?Q) =
          STOP",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 3)
            ),
        template_negation
         (template_equation (template_var 4, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_hole 0))),
    ("CSP.synSingleHeadAdd",
     "?a setinterleaves ((?t, ?u), ?A) & ?h ~: ?A ==>
      ?h # ?a setinterleaves ((?h # ?t, ?u), ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 4),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_var 1))))),
              template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 3)),
                 template_app
                  (template_app (template_hole 3, template_var 2),
                   template_var 1))))
           ))),
    ("CSP.TickLeftSync",
     "tick : ?A &
      front_tickFree ?t & ?s setinterleaves (([tick], ?t), ?A) ==>
      ?s = ?t & last ?t = tick",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_hole 10),
                  template_var 2)),
              template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 9, template_var 1)),
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_app
                   (template_hole 7,
                    template_app
                     (template_app
                       (template_hole 6,
                        template_app
                         (template_app (template_hole 5, template_hole 10),
                          template_hole 4)),
                      template_app
                       (template_app (template_hole 3, template_var 2),
                        template_var 1))))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1)),
               template_hole 10))
           ))),
    ("CSP.hide_sync_D1",
     "[| finite ?A; ?A Int ?C = {} |]
      ==> D ((?P \<lbrakk>?C\<rbrakk> ?Q) \ ?A)
          <= D (?P \ ?A \<lbrakk>?C\<rbrakk> ?Q \ ?A)",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 3)),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 2),
          template_hole 4)],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 2),
                 template_var 0)),
             template_var 3)),
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 3)),
               template_var 2),
             template_app
              (template_app (template_hole 1, template_var 0),
               template_var 3)))))),
    ("CSP.prefix_Par_Int3",
     "[| ?a : ?C; ?b ~: ?C |]
      ==> (?a \<rightarrow> ?P \<lbrakk>?C\<rbrakk> ?b \<rightarrow> ?Q) =
          (?b \<rightarrow> (?a \<rightarrow> ?P \<lbrakk>?C\<rbrakk> ?Q))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 4),
              template_var 3)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_var 3)
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 1)),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 1)),
               template_var 3),
             template_var 0))))),
    ("CSP.mprefix_Par_distr",
     "[| ?A <= ?C; ?B <= ?C |]
      ==> (Mprefix ?A ?P \<lbrakk>?C\<rbrakk> Mprefix ?B ?Q) =
          Mprefix (?A Int ?B) (%x. ?P x \<lbrakk>?C\<rbrakk> ?Q x)",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 0)),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2)),
           t_empty)))),
    ("CSP.interleave_append_tail_sym",
     "[| ?s setinterleaves ((?t, ?u1.0), ?C); set ?u2.0 Int ?C = {} |]
      ==> ?s @ ?u2.0 setinterleaves ((?t, ?u1.0 @ ?u2.0), ?C)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0)),
            template_var 2),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 3),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)))))
           ))),
    ("CSP.interleave_append_tail",
     "[| ?s setinterleaves ((?t1.0, ?u), ?C); set ?t2.0 Int ?C = {} |]
      ==> ?s @ ?t2.0 setinterleaves ((?t1.0 @ ?t2.0, ?u), ?C)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_app
                   (template_app (template_hole 5, template_var 2),
                    template_var 1))))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 3,
              template_app (template_hole 2, template_var 0)),
            template_var 2),
          template_hole 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 0)),
             template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app (template_hole 0, template_var 3),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_var 1))))
           ))),
    ("CSP.write0_write_nonsync",
     "[| ?d ?a ~: ?C; ?c : ?C |]
      ==> (?c \<rightarrow> ?Q \<lbrakk>?C\<rbrakk>
              ?d`!`?a \<rightarrow> ?P) =
          (?d`!`?a 
              \<rightarrow> (?c \<rightarrow> ?Q \<lbrakk>?C\<rbrakk> ?P))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 4,
                    template_app (template_var 5, template_var 4)),
                  template_var 3)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 3)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 5),
               template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 1)),
               template_var 3),
             template_var 0))))),
    ("CSP.syncHdAdd1",
     "?r setinterleaves ((?t, ?u), ?A) & ?a ~: ?A & hd ?t : ?A ==>
      ?a # ?r setinterleaves ((?t, ?a # ?u), ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 4),
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 3),
                      template_app
                       (template_app (template_hole 4, template_var 2),
                        template_var 1))))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_hole 3,
                    template_app
                     (template_app (template_hole 2, template_var 0),
                      template_var 2))),
                template_app
                 (template_app
                   (template_hole 2,
                    template_app (template_hole 1, template_var 3)),
                  template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 4)),
             template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app (template_hole 0, template_var 0),
                     template_var 1)))))
           ))),
    ("CSP.mprefix_Par_Int_distr1_D",
     "[| ?A <= ?C; ?B <= ?C |]
      ==> D (Mprefix ?A ?P \<lbrakk>?C\<rbrakk> Mprefix ?B ?Q) =
          D (Mprefix (?A Int ?B) (%x. ?P x \<lbrakk>?C\<rbrakk> ?Q x))",
     template_implication
      ([template_inequation (less_equals, template_var 4, template_var 3),
        template_inequation (less_equals, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1)),
               template_var 3),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 0))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 4),
                 template_var 2)),
             t_empty))))),
    ("CSP.read_read_sync",
     "(!!y. ?c y : ?C) ==>
      (read ?c UNIV ?P \<lbrakk>?C\<rbrakk> read ?c UNIV ?Q) =
      (?c`?`x \<rightarrow> (?P x \<lbrakk>?C\<rbrakk> ?Q x))",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 3),
                   template_hole 0),
                 t_empty)),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_hole 0),
             t_empty)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_hole 0),
           t_empty)))),
    ("CSP.syncHdAddEmpty",
     "tl ?a setinterleaves (([], ?u), ?A) & hd ?a ~: ?A & ?a ~= [] ==>
      ?a setinterleaves (([], hd ?a # ?u), ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 2)),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_app
                       (template_app (template_hole 5, template_var 1),
                        template_var 0))))),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_app
                       (template_hole 3,
                        template_app (template_hole 2, template_var 2)),
                      template_var 1))),
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_hole 6))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, template_var 2),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_hole 6),
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 2, template_var 2)),
                     template_var 0)))))
           ))),
    ("CSP.write_read_sync",
     "[| !!y. ?c y : ?C; inj ?c |]
      ==> (?c`!`?a \<rightarrow> ?P \<lbrakk>?C\<rbrakk> read ?c UNIV ?Q) =
          (?c`!`?a \<rightarrow> (?P \<lbrakk>?C\<rbrakk> ?Q ?a))",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 4),
              template_hole 4)
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 2),
                 template_var 1)),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_hole 4),
             t_empty)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 4),
             template_var 2),
           template_app
            (template_app
              (template_app (template_hole 2, template_var 1),
               template_var 3),
             template_app (template_var 0, template_var 2)))))),
    ("CSP.Process_eq_spec_optimized_seq",
     "((?P `;` ?Q) = (?U `;` ?S)) =
      (D (?P `;` ?Q) = D (?U `;` ?S) &
       F_minus_D_seq ?P ?Q <= F (?U `;` ?S) &
       F_minus_D_seq ?U ?S <= F (?P `;` ?Q))",
     template_bimplication
      (template_equation
        (template_app
          (template_app (template_hole 6, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 6, template_var 1), template_var 0)),
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 6, template_var 3),
                       template_var 2))),
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 6, template_var 1),
                     template_var 0)))),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 2,
                     template_app
                      (template_app (template_hole 1, template_var 3),
                       template_var 2)),
                   template_app
                    (template_hole 0,
                     template_app
                      (template_app (template_hole 6, template_var 1),
                       template_var 0)))),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 1),
                     template_var 0)),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app (template_hole 6, template_var 3),
                     template_var 2)))))
           ))),
    ("CSP.syncHd_Tl",
     "?a setinterleaves ((?t, ?u), ?A) & hd ?t : ?A & hd ?u ~: ?A ==>
      hd ?a = hd ?u & tl ?a setinterleaves ((?t, tl ?u), ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_app (template_hole 8, template_var 3),
                  template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, template_var 2),
                      template_app
                       (template_app (template_hole 5, template_var 1),
                        template_var 0))))),
              template_app
               (template_app
                 (template_hole 9,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 2)),
                    template_var 1)),
                template_app
                 (template_hole 2,
                  template_app
                   (template_app
                     (template_hole 4,
                      template_app (template_hole 3, template_var 0)),
                    template_var 1))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 3, template_var 3)),
                 template_app (template_hole 3, template_var 0))),
             template_app
              (template_app
                (template_hole 8,
                 template_app (template_hole 0, template_var 3)),
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_var 2),
                   template_app
                    (template_app (template_hole 5, template_var 1),
                     template_app (template_hole 0, template_var 0))))))
           ))),
    ("CSP.write0_read_nonsync",
     "[| ?d : ?C; !!y. ?c y ~: ?C |]
      ==> (?d \<rightarrow> ?P \<lbrakk>?C\<rbrakk> read ?c UNIV ?Q) =
          (?c`?`x 
              \<rightarrow> (?d \<rightarrow> ?P \<lbrakk>?C\<rbrakk>
                                ?Q x))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 2, template_var 4),
                 template_var 1)),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0),
             t_empty)),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 2),
             template_hole 0),
           t_empty)))),
    ("CSP.mprefix_Par_Int_distr",
     "[| ?B Int ?C = {}; ?A <= ?C |]
      ==> (Mprefix ?A ?P \<lbrakk>?C\<rbrakk> Mprefix ?B ?Q) =
          Mprefix ?B (%x. Mprefix ?A ?P \<lbrakk>?C\<rbrakk> ?Q x)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_hole 4),
        template_inequation (less_equals, template_var 2, template_var 3)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2), t_empty)),
             template_var 3),
           template_app
            (template_app (template_hole 0, template_var 4), t_empty)),
         template_app
          (template_app (template_hole 0, template_var 4), t_empty)))),
    ("CSP.syncHdAdd",
     "tl ?a setinterleaves ((?t, ?u), ?A) &
      hd ?a ~: ?A & hd ?t : ?A & ?a ~= [] ==>
      ?a setinterleaves ((?t, hd ?a # ?u), ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app
                   (template_hole 10,
                    template_app (template_hole 9, template_var 3)),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_var 2),
                      template_app
                       (template_app (template_hole 6, template_var 1),
                        template_var 0))))),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_var 3)),
                      template_var 1))),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app
                       (template_hole 4,
                        template_app (template_hole 3, template_var 2)),
                      template_var 1)),
                  template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 2, template_var 3),
                      template_hole 1)))))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 10, template_var 3),
             template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 7, template_var 2),
                 template_app
                  (template_app (template_hole 6, template_var 1),
                   template_app
                    (template_app
                      (template_hole 0,
                       template_app (template_hole 3, template_var 3)),
                     template_var 0)))))
           ))),
    ("CSP.interleave_assoc_1",
     "[| ?tu setinterleaves ((?t, ?u), ?A);
         ?tuv setinterleaves ((?tu, ?v), ?A) |]
      ==> EX uv.
             uv setinterleaves ((?u, ?v), ?A) &
             ?tuv setinterleaves ((?t, uv), ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 5),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("CSP.interleave_assoc_2",
     "[| ?uv setinterleaves ((?u, ?v), ?A);
         ?tuv setinterleaves ((?t, ?uv), ?A) |]
      ==> EX tu.
             tu setinterleaves ((?t, ?u), ?A) &
             ?tuv setinterleaves ((tu, ?v), ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 5),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 4),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 2))))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_app
                   (template_app (template_hole 2, template_var 3),
                    template_var 5))))
            )],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("CSP.write_read_nonsync",
     "[| ?d ?a ~: ?C; !!y. ?c y : ?C |]
      ==> (?d`!`?a \<rightarrow> ?P \<lbrakk>?C\<rbrakk> read ?c UNIV ?Q) =
          (?d`!`?a 
              \<rightarrow> (?P \<lbrakk>?C\<rbrakk> read ?c UNIV ?Q))",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app
                   (template_hole 6,
                    template_app (template_var 5, template_var 4)),
                  template_var 3)
                )
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 4),
                 template_var 1)),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0),
             t_empty)),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 5),
             template_var 4),
           template_app
            (template_app
              (template_app (template_hole 3, template_var 1),
               template_var 3),
             template_app
              (template_app
                (template_app (template_hole 1, template_var 2),
                 template_hole 0),
               t_empty)))))),
    ("CSP.syncSameHdTl",
     "?a setinterleaves ((?t, ?u), ?A) & hd ?t : ?A & hd ?u : ?A ==>
      hd ?t = hd ?u &
      hd ?a = hd ?t & tl ?a setinterleaves ((tl ?t, tl ?u), ?A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 3),
                  template_app
                   (template_hole 6,
                    template_app
                     (template_app (template_hole 5, template_var 2),
                      template_app
                       (template_app (template_hole 4, template_var 1),
                        template_var 0))))),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app
                     (template_hole 3,
                      template_app (template_hole 2, template_var 2)),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 3,
                    template_app (template_hole 2, template_var 0)),
                  template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_hole 2, template_var 2)),
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 2, template_var 3)),
                   template_app (template_hole 2, template_var 2))),
               template_app
                (template_app
                  (template_hole 7,
                   template_app (template_hole 0, template_var 3)),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 5,
                       template_app (template_hole 0, template_var 2)),
                     template_app
                      (template_app (template_hole 4, template_var 1),
                       template_app (template_hole 0, template_var 0)))))))
           ))),
    ("CSP.hide_interleave",
     "[| ?A Int ?C = {}; ?r setinterleaves ((?t, ?u), ?C) |]
      ==> trace_hide ?r
           ?A setinterleaves ((trace_hide ?t ?A, trace_hide ?u ?A), ?C)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 8, template_var 4), template_var 3),
          template_hole 7),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 2, t_empty), template_var 2)),
             template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 2, t_empty),
                     template_var 1)),
                 template_app
                  (template_app (template_hole 3, template_var 3),
                   template_app
                    (template_app (template_hole 2, t_empty),
                     template_var 0)))))
           ))),
    ("CSP.mprefix_Par_Int",
     "[| ?B Int ?C = {}; ?A Int ?C = {} |]
      ==> (Mprefix ?A ?P \<lbrakk>?C\<rbrakk> Mprefix ?B ?Q) =
          (Mprefix ?A (%x. ?P x \<lbrakk>?C\<rbrakk> Mprefix ?B ?Q) [+]
           Mprefix ?B (%y. Mprefix ?A ?P \<lbrakk>?C\<rbrakk> ?Q y))",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 3),
          template_hole 4),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 2), template_var 3),
          template_hole 4)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_var 3),
           template_app
            (template_app (template_hole 1, template_var 4),
             template_var 0)),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_app (template_hole 1, template_var 2), t_empty)),
           template_app
            (template_app (template_hole 1, template_var 4), t_empty))))),
    ("CSP.read_read_nonsync",
     "[| !!y. ?c y ~: ?C; !!y. ?d y : ?C |]
      ==> (read ?c UNIV ?P \<lbrakk>?C\<rbrakk> read ?d UNIV ?Q) =
          (?c`?`x 
              \<rightarrow> (?P x \<lbrakk>?C\<rbrakk> read ?d UNIV ?Q))",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_app (template_hole 3, template_var 4),
                   template_hole 2),
                 t_empty)),
             template_var 3),
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_hole 0),
             t_empty)),
         template_app
          (template_app
            (template_app (template_hole 3, template_var 4),
             template_hole 2),
           t_empty)))),
    ("CSP.interleave_append_sym",
     "?s setinterleaves ((?t, ?u1.0 @ ?u2.0), ?C) ==>
      EX t1 t2 s1 s2.
         ?t = t1 @ t2 &
         ?s = s1 @ s2 &
         s1 setinterleaves ((t1, ?u1.0), ?C) &
         s2 setinterleaves ((t2, ?u2.0), ?C)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_app
                   (template_app (template_hole 4, template_var 2),
                    template_app
                     (template_app (template_hole 3, template_var 1),
                      template_var 0)))))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("CSP.interleave_append",
     "?s setinterleaves ((?t1.0 @ ?t2.0, ?u), ?C) ==>
      EX u1 u2 s1 s2.
         ?u = u1 @ u2 &
         ?s = s1 @ s2 &
         s1 setinterleaves ((?t1.0, u1), ?C) &
         s2 setinterleaves ((?t2.0, u2), ?C)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_app
               (template_hole 6,
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_var 3),
                      template_var 2)),
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))))
            )],
       template_predicate (template_app (template_hole 2, t_empty)))),
    ("CSP.interleave_hide",
     "[| ?A Int ?C = {};
         ?ra setinterleaves ((trace_hide ?t ?A, trace_hide ?u ?A), ?C) |]
      ==> EX r. ?ra = trace_hide r ?A & r setinterleaves ((?t, ?u), ?C)",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 4),
            template_var 3),
          template_hole 10),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app
               (template_hole 8,
                template_app
                 (template_app
                   (template_hole 7,
                    template_app
                     (template_app (template_hole 6, t_empty),
                      template_var 1)),
                  template_app
                   (template_app (template_hole 3, template_var 3),
                    template_app
                     (template_app (template_hole 6, t_empty),
                      template_var 0)))))
            )],
       template_predicate (template_app (template_hole 2, t_empty))))]
