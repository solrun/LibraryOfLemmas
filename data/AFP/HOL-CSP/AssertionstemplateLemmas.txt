   [("Assertions.DF_unfold",
     "DF ?A = (\<sqinter>z\<in>?A \<rightarrow>  DF ?A)",
     template_equation
      (template_app (template_hole 1, template_var 0),
       template_app
        (template_app (template_hole 0, template_var 0), t_empty))),
    ("Assertions.deadlock_free_ndet",
     "[| deadlock_free ?P; deadlock_free ?Q |]
      ==> deadlock_free (?P |-| ?Q)",
     template_implication
      ([template_predicate (template_app (template_hole 1, template_var 1)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Assertions.DF_Univ_freeness",
     "[| ?A ~= {}; DF ?A \<sqsubseteq>\<^sub>F\<^sub>D ?P |]
      ==> deadlock_free ?P",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app (template_hole 1, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Assertions.DF_subset",
     "[| ?A ~= {}; ?A <= ?B |]
      ==> DF ?B \<sqsubseteq>\<^sub>F\<^sub>D DF ?A",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3)),
        template_inequation (less_equals, template_var 1, template_var 0)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             template_app (template_hole 0, template_var 1))
           )))]
