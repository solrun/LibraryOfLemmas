   [("Lazy_Sequence.lazy_sequence_of_list_of_lazy_sequence",
     "lazy_sequence_of_list (list_of_lazy_sequence ?xq) = ?xq",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Lazy_Sequence.yield_Seq",
     "Lazy_Sequence.yield (Lazy_Sequence ?f) = ?f ()",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_var 0, template_hole 0))),
    ("Lazy_Sequence.case_lazy_sequence",
     "(case ?xq of lazy_sequence_of_list x => ?f x) =
      ?f (list_of_lazy_sequence ?xq)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.rec_lazy_sequence",
     "rec_lazy_sequence ?f ?xq = ?f (list_of_lazy_sequence ?xq)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 1), template_var 0),
       template_app
        (template_var 1, template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.list_of_lazy_sequence_single",
     "list_of_lazy_sequence (Lazy_Sequence.single ?x) = [?x]",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Lazy_Sequence.lazy_sequence_eq_iff",
     "(?xq = ?yq) =
      (list_of_lazy_sequence ?xq = list_of_lazy_sequence ?yq)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.list_of_lazy_sequence_flat",
     "list_of_lazy_sequence (Lazy_Sequence.flat ?xqq) =
      concat (map list_of_lazy_sequence (list_of_lazy_sequence ?xqq))",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 4),
           template_app (template_hole 0, template_var 0))))),
    ("Lazy_Sequence.list_of_lazy_sequence_map",
     "list_of_lazy_sequence (Lazy_Sequence.map ?f ?xq) =
      map ?f (list_of_lazy_sequence ?xq)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.single_code",
     "Lazy_Sequence.single ?x =
      Lazy_Sequence (%_. Some (?x, Lazy_Sequence.empty))",
     template_equation
      (template_app (template_hole 4, template_var 0),
       template_app (template_hole 3, t_empty))),
    ("Lazy_Sequence.list_of_lazy_sequence_append",
     "list_of_lazy_sequence (Lazy_Sequence.append ?xq ?yq) =
      list_of_lazy_sequence ?xq @ list_of_lazy_sequence ?yq",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Lazy_Sequence.case_yield_eq",
     "(case Lazy_Sequence.yield ?xq of None => ?g | Some x => ?h x) =
      (case list_of_lazy_sequence ?xq of [] => ?g
       | x # xa => (curry ?h x o lazy_sequence_of_list) xa)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 6, template_var 2), template_var 1),
         template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, template_var 2), t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Lazy_Sequence.list_of_Lazy_Sequence",
     "list_of_lazy_sequence (Lazy_Sequence ?f) =
      (case ?f () of None => []
       | Some (x, xq) => x # list_of_lazy_sequence xq)",
     template_equation
      (template_app
        (template_hole 6, template_app (template_hole 5, template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 4, template_hole 3), t_empty),
         template_app (template_var 0, template_hole 0)))),
    ("Lazy_Sequence.map_code",
     "Lazy_Sequence.map ?f ?xq =
      Lazy_Sequence
       (%_. map_option (%(x, xq'). (?f x, Lazy_Sequence.map ?f xq'))
             (Lazy_Sequence.yield ?xq))",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 1), template_var 0),
       template_app (template_hole 4, t_empty))),
    ("Lazy_Sequence.list_of_lazy_sequence_hb_flat",
     "list_of_lazy_sequence (hb_flat ?xqq) =
      concat
       (map ((%x. case x of None => [None] | Some xs => xs) o
             map_option list_of_lazy_sequence)
         (list_of_lazy_sequence ?xqq))",
     template_equation
      (template_app
        (template_hole 10, template_app (template_hole 9, template_var 0)),
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, t_empty),
               template_app (template_hole 1, template_hole 10))),
           template_app (template_hole 0, template_var 0))))),
    ("Lazy_Sequence.flat_code",
     "Lazy_Sequence.flat ?xqq =
      Lazy_Sequence
       (%_. case Lazy_Sequence.yield ?xqq of None => None
            | Some (xq, xqq') =>
                Lazy_Sequence.yield
                 (Lazy_Sequence.append xq (Lazy_Sequence.flat xqq')))",
     template_equation
      (template_app (template_hole 7, template_var 0),
       template_app (template_hole 6, t_empty))),
    ("Lazy_Sequence.hb_map_code",
     "hb_map ?f ?xq =
      Lazy_Sequence
       (%_. map_option (%(x, xq'). (map_option ?f x, hb_map ?f xq'))
             (Lazy_Sequence.yield ?xq))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Lazy_Sequence.append_code",
     "Lazy_Sequence.append ?xq ?yq =
      Lazy_Sequence
       (%_. case Lazy_Sequence.yield ?xq of None => Lazy_Sequence.yield ?yq
            | Some (x, xq') => Some (x, Lazy_Sequence.append xq' ?yq))",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app (template_hole 5, t_empty))),
    ("Lazy_Sequence.hb_flat_code",
     "hb_flat ?xqq =
      Lazy_Sequence
       (%_. case Lazy_Sequence.yield ?xqq of None => None
            | Some (xq, xqq') =>
                Lazy_Sequence.yield
                 (Lazy_Sequence.append
                   (case xq of None => hit_bound | Some xq => xq)
                   (hb_flat xqq')))",
     template_equation
      (template_app (template_hole 9, template_var 0),
       template_app (template_hole 8, t_empty))),
    ("Limited_Sequence.map_seq_code",
     "Limited_Sequence.map_seq ?f ?xq ?i ?pol =
      (case Lazy_Sequence.yield ?xq of None => Some Lazy_Sequence.empty
       | Some (x, xq') =>
           case Limited_Sequence.eval (?f x) ?i ?pol of None => None
           | Some yq =>
               case Limited_Sequence.map_seq ?f xq' ?i ?pol of None => None
               | Some zq => Some (Lazy_Sequence.append yq zq))",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_app (template_hole 9, template_var 3),
             template_var 2),
           template_var 1),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 8,
             template_app (template_hole 7, template_hole 6)),
           t_empty),
         template_app (template_hole 0, template_var 2)))),
    ("Lazy_Sequence.equal_lazy_sequence_code",
     "equal_class.equal ?xq ?yq =
      (case (Lazy_Sequence.yield ?xq, Lazy_Sequence.yield ?yq) of
       (None, None) => True | (None, Some a) => False
       | (Some (x, xq'), None) => False
       | (Some (x, xq'), Some (y, yq')) =>
           equal_class.equal x y & equal_class.equal ?xq ?yq)",
     template_equation
      (template_app
        (template_app (template_hole 9, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 8, t_empty),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_app (template_hole 0, template_var 0))))),
    ("Seq.D_seq", "D (?P `;` ?Q) = div_seq ?P ?Q",
     template_equation
      (template_app
        (template_hole 14,
         template_app
          (template_app (template_hole 13, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 12, template_app (template_hole 11, t_empty)),
         template_app (template_hole 11, t_empty)))),
    ("Seq.F_seq",
     "F (?P `;` ?Q) =
      {(t, X). (t, X Un {tick}) : F ?P & tickFree t} Un
      {(t, X).
       EX t1 t2. t = t1 @ t2 & t1 @ [tick] : T ?P & (t2, X) : F ?Q} Un
      {(t, X).
       EX t1 t2.
          t = t1 @ t2 & t1 : D ?P & tickFree t1 & front_tickFree t2} Un
      {(t, X). EX t1 t2. t = t1 @ t2 & t1 @ [tick] : T ?P & t2 : D ?Q}",
     template_equation
      (template_app
        (template_hole 21,
         template_app
          (template_app (template_hole 20, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 19,
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 19,
                   template_app
                    (template_hole 18,
                     template_app (template_hole 17, t_empty))),
                 template_app
                  (template_hole 18,
                   template_app (template_hole 17, t_empty)))),
             template_app
              (template_hole 18,
               template_app (template_hole 17, t_empty)))),
         template_app
          (template_hole 18, template_app (template_hole 17, t_empty))))),
    ("Seq.T_seq",
     "T (?P `;` ?Q) =
      {t. EX X. (t, X Un {tick}) : F ?P & tickFree t} Un
      {t1 @ t2 |t1 t2. t1 @ [tick] : T ?P & t2 : T ?Q} Un
      {t1 @ t2 |t1 t2. t1 : D ?P & tickFree t1 & front_tickFree t2} Un
      {t1 @ t2 |t1 t2. t1 @ [tick] : T ?P & t2 : D ?Q} Un
      {t1 @ t2 |t1 t2. t1 : D ?P & tickFree t1 & front_tickFree t2} Un
      {t1 @ t2 |t1 t2. t1 @ [tick] : T ?P & t2 : D ?Q}",
     template_equation
      (template_app
        (template_hole 21,
         template_app
          (template_app (template_hole 20, template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 19,
           template_app
            (template_app
              (template_hole 19,
               template_app
                (template_app
                  (template_hole 19,
                   template_app
                    (template_app
                      (template_hole 19,
                       template_app
                        (template_app
                          (template_hole 19,
                           template_app (template_hole 18, t_empty)),
                         template_app (template_hole 18, t_empty))),
                     template_app (template_hole 18, t_empty))),
                 template_app (template_hole 18, t_empty))),
             template_app (template_hole 18, t_empty))),
         template_app (template_hole 18, t_empty)))),
    ("Seq.Rep_Abs_Seq",
     "Rep_process
       (Abs_process
         ({(t, X). (t, X Un {tick}) : F ?P & tickFree t} Un
          {(t, X).
           EX t1 t2. t = t1 @ t2 & t1 @ [tick] : T ?P & (t2, X) : F ?Q} Un
          {(t, X). t : div_seq ?P ?Q},
          div_seq ?P ?Q)) =
      ({(t, X). (t, X Un {tick}) : F ?P & tickFree t} Un
       {(t, X).
        EX t1 t2. t = t1 @ t2 & t1 @ [tick] : T ?P & (t2, X) : F ?Q} Un
       {(t, X). t : div_seq ?P ?Q},
       div_seq ?P ?Q)",
     template_equation
      (template_app
        (template_hole 25,
         template_app
          (template_hole 24,
           template_app
            (template_app
              (template_hole 23,
               template_app
                (template_app
                  (template_hole 22,
                   template_app
                    (template_app
                      (template_hole 22,
                       template_app
                        (template_hole 21,
                         template_app (template_hole 20, t_empty))),
                     template_app
                      (template_hole 21,
                       template_app (template_hole 20, t_empty)))),
                 template_app
                  (template_hole 21,
                   template_app (template_hole 20, t_empty)))),
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_app (template_hole 2, t_empty))))),
       template_app
        (template_app
          (template_hole 23,
           template_app
            (template_app
              (template_hole 22,
               template_app
                (template_app
                  (template_hole 22,
                   template_app
                    (template_hole 21,
                     template_app (template_hole 20, t_empty))),
                 template_app
                  (template_hole 21,
                   template_app (template_hole 20, t_empty)))),
             template_app
              (template_hole 21,
               template_app (template_hole 20, t_empty)))),
         template_app
          (template_app
            (template_hole 3, template_app (template_hole 2, t_empty)),
           template_app (template_hole 2, t_empty)))))]
