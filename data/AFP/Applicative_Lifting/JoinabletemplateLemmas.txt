   [("Joinable.sym_joinable", "sym (joinable ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Joinable.reflp_joinablep", "reflp ?P ==> reflp (joinablep ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Joinable.joinablep_refl", "reflp ?P ==> joinablep ?P ?x ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 0)
           ))),
    ("Joinable.reflp_le_joinablep", "reflp ?P ==> ?P <= joinablep ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 0)))),
    ("Joinable.joinable_le_rtscl", "joinable (?R^*) <= (?R Un ?R^-1)^*",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Joinable.refl_le_joinable", "refl ?R ==> ?R <= joinable ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 0)))),
    ("Joinable.refl_joinable", "refl ?R ==> refl (joinable ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Joinable.joinable_mono", "?R <= ?S ==> joinable ?R <= joinable ?S",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Joinable.joinable_refl", "refl ?R ==> (?x, ?x) : joinable ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Joinable.trans_joinable",
     "[| trans ?R; confluent ?R |] ==> trans (joinable ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Joinable.refl_on_joinable",
     "refl_on {x. EX y. (x, y) : ?R} (joinable ?R)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Joinable.refl_joinable_iff",
     "(ALL x. EX y. (x, y) : ?R) = refl (joinable ?R)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Joinable.joinable_eq_rtscl",
     "confluent (?R^*) ==> joinable (?R^*) = (?R Un ?R^-1)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0)))))),
    ("Joinable.joinable_sym",
     "(?x, ?y) : joinable ?R ==> (?y, ?x) : joinable ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Joinable.joinablep_joinable",
     "joinablep (%x y. (x, y) : ?R) = (%x y. (x, y) : joinable ?R)",
     template_equation (template_app (template_hole 5, t_empty), t_empty)),
    ("Joinable.joinable_simp",
     "((?x, ?y) : joinable ?R) = (EX z. (?x, z) : ?R & (?y, z) : ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Joinable.joinableI",
     "[| (?x, ?z) : ?R; (?y, ?z) : ?R |] ==> (?x, ?y) : joinable ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Joinable.joinableD",
     "(?x, ?y) : joinable ?R ==> EX z. (?x, z) : ?R & (?y, z) : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Joinable.confluentD",
     "[| confluent ?R; (?x, ?y) : ?R; (?x, ?y') : ?R |]
      ==> (?y, ?y') : joinable ?R",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Joinable.joinableE",
     "[| (?x, ?y) : joinable ?R;
         !!z. [| (?x, z) : ?R; (?y, z) : ?R |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Joinable.joinable_subst",
     "[| !!x y. (x, y) : ?R ==> (?P x, ?P y) : ?R; (?x, ?y) : joinable ?R |]
      ==> (?P ?x, ?P ?y) : joinable ?R",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_app (template_hole 0, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 2, template_var 1)),
                 template_app (template_var 2, template_var 0))),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Joinable.confluentI",
     "(!!x y y'.
          [| (x, y) : ?R; (x, y') : ?R |]
          ==> EX z. (y, z) : ?R & (y', z) : ?R) ==>
      confluent ?R",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Joinable.confluentE",
     "[| confluent ?R; (?x, ?y) : ?R; (?x, ?y') : ?R;
         !!z. [| (?y, z) : ?R; (?y', z) : ?R |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 1)),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0)))]
