Loading theory "Draft.Joinable" (required by "Draft.Beta_EtaTemplates" via "Draft.Beta_Eta")
Loading theory "HOL-Library.BigO" (required by "Draft.Beta_EtaTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Templates" (required by "Draft.Beta_EtaTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.081s elapsed time, 0.278s cpu time, 0.000s GC time
### theory "Draft.Joinable"
### 0.116s elapsed time, 0.346s cpu time, 0.000s GC time
Loading theory "Draft.Beta_Eta" (required by "Draft.Beta_EtaTemplates")
### theory "Draft.Beta_Eta"
### 0.174s elapsed time, 0.353s cpu time, 0.037s GC time
### theory "HOL-Library.BigO"
### 0.686s elapsed time, 1.128s cpu time, 0.106s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Beta_EtaTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.460s elapsed time, 0.460s cpu time, 0.000s GC time
Loading theory "Draft.Beta_EtaTemplates"
val templateLemmas =
   [("Beta_Eta.term_refl", "?t \<leftrightarrow> ?t",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Beta_Eta.term_sym",
     "?s \<leftrightarrow> ?t ==> ?t \<leftrightarrow> ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Beta_Eta.eta_into_equiv",
     "?s \<rightarrow>\<^sub>\<eta> ?t ==> ?s \<leftrightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Beta_Eta.beta_into_equiv",
     "?s \<rightarrow>\<^sub>\<beta> ?t ==> ?s \<leftrightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Beta_Eta.eta_reds_into_equiv",
     "?s \<rightarrow>\<^sub>\<eta>\<^sup>* ?t ==> ?s \<leftrightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Beta_Eta.beta_reds_into_equiv",
     "?s \<rightarrow>\<^sub>\<beta>\<^sup>* ?t ==>
      ?s \<leftrightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Beta_Eta.equiv_abs",
     "?t \<leftrightarrow> ?t' ==> Abs ?t \<leftrightarrow> Abs ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Beta_Eta.eta_into_beta_eta_reds",
     "?s \<rightarrow>\<^sub>\<eta> ?t ==>
      ?s \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_hole 3)),
               template_var 1),
             template_var 0)
           ))),
    ("Beta_Eta.beta_into_beta_eta_reds",
     "?s \<rightarrow>\<^sub>\<beta> ?t ==>
      ?s \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 3),
                   template_hole 0)),
               template_var 1),
             template_var 0)
           ))),
    ("Beta_Eta.reds_into_equiv",
     "?s \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* ?t ==>
      ?s \<leftrightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_hole 1)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Beta_Eta.equiv_appL",
     "?s \<leftrightarrow> ?s' ==>
      ?s \<degree> ?t \<leftrightarrow> ?s' \<degree> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Beta_Eta.equiv_lift",
     "?s \<leftrightarrow> ?t ==> lift ?s ?k \<leftrightarrow> lift ?t ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Beta_Eta.equiv_appR",
     "?t \<leftrightarrow> ?t' ==>
      ?s \<degree> ?t \<leftrightarrow> ?s \<degree> ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Beta_Eta.eta_reds_into_beta_eta_reds",
     "?s \<rightarrow>\<^sub>\<eta>\<^sup>* ?t ==>
      ?s \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_hole 2)),
               template_var 1),
             template_var 0)
           ))),
    ("Beta_Eta.beta_reds_into_beta_eta_reds",
     "?s \<rightarrow>\<^sub>\<beta>\<^sup>* ?t ==>
      ?s \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_hole 2),
                   template_hole 0)),
               template_var 1),
             template_var 0)
           ))),
    ("Beta_Eta.liftn_lift_swap",
     "liftn ?n (lift ?t ?k) ?k = lift (liftn ?n ?t ?k) ?k",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 2),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1),
             template_var 0)),
         template_var 0))),
    ("Beta_Eta.subst_lift2", "lift (lift ?t 0) 0[?x/Suc 0] = lift ?t 0",
     template_equation
      (template_app
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_hole 1)),
           template_var 0),
         template_app (template_hole 0, template_hole 1)),
       template_app
        (template_app (template_hole 2, template_var 1), template_hole 1))),
    ("Beta_Eta.term_trans",
     "[| ?s \<leftrightarrow> ?t; ?t \<leftrightarrow> ?u |]
      ==> ?s \<leftrightarrow> ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Beta_Eta.term_eta_trans",
     "[| ?s \<leftrightarrow> ?t; ?t \<rightarrow>\<^sub>\<eta> ?u |]
      ==> ?s \<leftrightarrow> ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Beta_Eta.term_beta_trans",
     "[| ?s \<leftrightarrow> ?t; ?t \<rightarrow>\<^sub>\<beta> ?u |]
      ==> ?s \<leftrightarrow> ?u",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Beta_Eta.equiv_liftn",
     "?s \<leftrightarrow> ?t ==>
      liftn ?n ?s ?k \<leftrightarrow> liftn ?n ?t ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 0)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 0))
           ))),
    ("Beta_Eta.beta_eta_abs",
     "?t \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* ?t' ==>
      Abs ?t \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* Abs ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_hole 1)),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 1)),
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Beta_Eta.equiv_app",
     "[| ?s \<leftrightarrow> ?s'; ?t \<leftrightarrow> ?t' |]
      ==> ?s \<degree> ?t \<leftrightarrow> ?s' \<degree> ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Beta_Eta.beta_eta_appL",
     "?s \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* ?s' ==>
      ?s \<degree> ?t \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>*
      ?s' \<degree> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_hole 1)),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Beta_Eta.beta_eta_lift",
     "?s \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* ?t ==>
      lift ?s ?k \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>*
      lift ?t ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_hole 1)),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 1)),
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("Beta_Eta.beta_eta_appR",
     "?t \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* ?t' ==>
      ?s \<degree> ?t \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>*
      ?s \<degree> ?t'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_hole 1)),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 1)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Beta_Eta.term_equivI",
     "[| ?s \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* ?u;
         ?t \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* ?u |]
      ==> ?s \<leftrightarrow> ?t",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_hole 1)),
                template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_hole 2),
                    template_hole 1)),
                template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Beta_Eta.subst_liftn",
     "?i <= ?n + ?k & ?k <= ?i ==>
      liftn (Suc ?n) ?s ?k[?t/?i] = liftn ?n ?s ?k",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 4),
                  template_app
                   (template_app (template_hole 4, template_var 3),
                    template_var 2))),
              template_app
               (template_app (template_hole 5, template_var 2),
                template_var 4))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_app
                    (template_hole 1,
                     template_app (template_hole 0, template_var 3)),
                   template_var 1),
                 template_var 2)),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app (template_hole 1, template_var 3),
             template_var 1),
           template_var 2)))),
    ("Beta_Eta.free_liftn",
     "free (liftn ?n ?t ?k) ?i =
      (?i < ?k & free ?t ?i | ?k + ?n <= ?i & free ?t (?i - ?n))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app
              (template_app (template_hole 6, template_var 3),
               template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 1)),
             template_app
              (template_app (template_hole 7, template_var 2),
               template_var 0))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 3)),
               template_var 0)),
           template_app
            (template_app (template_hole 7, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 3)))))),
    ("Beta_Eta.term_equivE",
     "[| ?s \<leftrightarrow> ?t;
         !!u. [| ?s \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* u;
                 ?t \<rightarrow>\<^sub>\<beta>\<^sub>\<eta>\<^sup>* u |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.Beta_EtaTemplates"
### 0.337s elapsed time, 0.454s cpu time, 0.055s GC time
val it = (): unit
