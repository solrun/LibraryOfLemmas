Loading theory "Draft.Joinable" (required by "Draft.CombinatorsTemplates" via "Draft.Combinators" via "Draft.Beta_Eta")
Loading theory "Draft.Templates" (required by "Draft.CombinatorsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.BigO" (required by "Draft.CombinatorsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.072s elapsed time, 0.247s cpu time, 0.000s GC time
### theory "Draft.Joinable"
### 0.109s elapsed time, 0.322s cpu time, 0.000s GC time
Loading theory "Draft.Beta_Eta" (required by "Draft.CombinatorsTemplates" via "Draft.Combinators")
### theory "Draft.Beta_Eta"
### 0.165s elapsed time, 0.335s cpu time, 0.034s GC time
Loading theory "Draft.Combinators" (required by "Draft.CombinatorsTemplates")
### theory "Draft.Combinators"
### 0.042s elapsed time, 0.082s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.646s elapsed time, 1.115s cpu time, 0.116s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.CombinatorsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.433s elapsed time, 0.433s cpu time, 0.000s GC time
Loading theory "Draft.CombinatorsTemplates"
val templateLemmas =
   [("Combinators.I_equiv", "\<I> \<degree> ?x \<leftrightarrow> ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)),
           template_var 0)
         )),
    ("Combinators.I_eval",
     "\<I> \<degree> ?x \<rightarrow>\<^sub>\<beta> ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0)),
           template_var 0)
         )),
    ("Combinators.B_closed", "liftn ?n \<B> ?k = \<B>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_hole 0)),
    ("Combinators.I_closed", "liftn ?n \<I> ?k = \<I>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_hole 0)),
    ("Combinators.T_closed", "liftn ?n \<T> ?k = \<T>",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 1, template_var 1), template_hole 0),
         template_var 0),
       template_hole 0)),
    ("Combinators.T_equiv",
     "\<T> \<degree> ?x \<degree> ?f \<leftrightarrow> ?f \<degree> ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))
         )),
    ("Combinators.T_eval",
     "\<T> \<degree> ?x \<degree> ?f \<rightarrow>\<^sub>\<beta>\<^sup>*
      ?f \<degree> ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))
         )),
    ("Combinators.T_eval1",
     "\<T> \<degree> ?x \<rightarrow>\<^sub>\<beta>
      Abs (Var 0 \<degree> lift ?x 0)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app
              (template_app (template_hole 5, template_hole 4),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 5,
                 template_app (template_hole 2, template_hole 1)),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_hole 1))))
         )),
    ("Combinators.B_equiv",
     "\<B> \<degree> ?g \<degree> ?f \<degree> ?x \<leftrightarrow>
      ?g \<degree> (?f \<degree> ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 2)),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))
         )),
    ("Combinators.B_eval",
     "\<B> \<degree> ?g \<degree> ?f \<degree>
      ?x \<rightarrow>\<^sub>\<beta>\<^sup>*
      ?g \<degree> (?f \<degree> ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 3, template_hole 2),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 1, template_hole 0),
                       template_var 2)),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_var 0)))
         )),
    ("Combinators.B_eval1",
     "\<B> \<degree> ?g \<rightarrow>\<^sub>\<beta>
      Abs (Abs (lift (lift ?g 0) 0 \<degree> (Var 1 \<degree> Var 0)))",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app (template_hole 6, template_hole 5),
               template_var 0)),
           template_app
            (template_hole 4,
             template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 3, template_var 0),
                         template_hole 2)),
                     template_hole 2)),
                 template_app
                  (template_app
                    (template_hole 6,
                     template_app (template_hole 1, template_hole 0)),
                   template_app (template_hole 1, template_hole 2))))))
         )),
    ("Combinators.B_eval2",
     "\<B> \<degree> ?g \<degree> ?f \<rightarrow>\<^sub>\<beta>\<^sup>*
      Abs (lift ?g 0 \<degree> (lift ?f 0 \<degree> Var 0))",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 1)),
               template_var 0)),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_hole 1)),
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_app (template_hole 2, template_var 0),
                     template_hole 1)),
                 template_app (template_hole 0, template_hole 1)))))
         ))]:
   (string * thm * template) list
### theory "Draft.CombinatorsTemplates"
### 0.336s elapsed time, 0.495s cpu time, 0.070s GC time
val it = (): unit
