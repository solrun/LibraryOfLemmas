Loading theory "Draft.Applicative" (required by "Draft.Tree_RelabellingTemplates" via "Draft.Tree_Relabelling" via "Draft.Applicative_State")
Loading theory "Draft.Templates" (required by "Draft.Tree_RelabellingTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.BigO" (required by "Draft.Tree_RelabellingTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.263s cpu time, 0.000s GC time
### ML warning (line 241 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 369 of "$AFP/Applicative_Lifting/applicative.ML"):
### Matches are not exhaustive.
### ML warning (line 483 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 495 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 677 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 687 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 789 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 900 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 999 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1061 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1084 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1137 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1148 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1164 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1225 of "$AFP/Applicative_Lifting/applicative.ML"):
### Matches are not exhaustive.
### ML warning (line 1313 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1317 of "$AFP/Applicative_Lifting/applicative.ML"):
### Matches are not exhaustive.
### ML warning (line 1336 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1337 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
signature APPLICATIVE =
  sig
    val add_unfold_attrib: xstring option -> attribute
    type afun
    val afun_fold_tac: Proof.context -> afun -> int -> tactic
    type afun_inst
    val afun_of: Proof.context -> string -> afun
    val afun_of_generic: Context.generic -> string -> afun
    val afun_unfold_tac: Proof.context -> afun -> int -> tactic
    val afuns_of_term: Proof.context -> term -> afun list
    val afuns_of_term_generic: Context.generic -> term -> afun list
    val afuns_of_typ: Proof.context -> typ -> afun list
    val afuns_of_typ_generic: Context.generic -> typ -> afun list
    val applicative_cmd:
       ((((binding * string list) * string) * string) * string option) *
       string option
         -> local_theory -> Proof.state
    val combinator_rule_attrib: string list option -> attribute
    val dest_comb: Proof.context -> afun_inst -> term -> term * term
    val dest_pure: Proof.context -> afun_inst -> term -> term
    val dest_type: Proof.context -> afun_inst -> typ -> typ option
    val dest_type': Proof.context -> afun_inst -> typ -> typ
    val extern: Context.generic -> string -> xstring
    val fold_wrapper_tac: Proof.context -> afun option -> int -> tactic
    val forward_lift_attrib: xstring -> attribute
    val forward_lift_rule: Proof.context -> afun -> thm -> thm
    val general_normalform_conv:
       Proof.context -> afun -> cterm * cterm -> thm * thm
    val general_normalize_rel_tac: Proof.context -> afun -> int -> tactic
    val generalize_lift_terms:
       afun_inst -> term list -> Proof.context -> term list * Proof.context
    val import_afun_inst: afun -> Proof.context -> afun_inst * Proof.context
    val infer_comb: Proof.context -> afun_inst -> term * term -> term
    val inner_sort_of: afun_inst -> sort
    val intern: Context.generic -> xstring -> string
    val lift_term: afun_inst -> term -> term
    val lifting_wrapper_tac: Proof.context -> afun option -> int -> tactic
    val match_afun_inst: Proof.context -> afun -> term * int -> afun_inst
    val mk_ap: afun_inst -> typ * typ -> term
    val mk_comb: afun_inst -> typ -> term * term -> term
    val mk_pure: afun_inst -> typ -> term
    val mk_set: afun_inst -> typ -> term
    val mk_type: afun_inst -> typ -> typ
    val name_of_afun: afun -> binding
    val normalform_conv: Proof.context -> afun -> conv
    val normalize_rel_tac: Proof.context -> afun -> int -> tactic
    val normalize_wrapper_tac: Proof.context -> afun option -> int -> tactic
    val parse_opt_afun: afun option context_parser
    val print_afuns: Proof.context -> unit
    val setup_combinators:
       (string * thm) list -> local_theory -> local_theory
    val subst_lift_term: afun_inst -> (term * term) list -> term -> term
    val unfold_all_tac: Proof.context -> int -> tactic
    val unfold_wrapper_tac: Proof.context -> afun option -> int -> tactic
    val unfolds_of_afun: afun -> thm list
  end
structure Applicative: APPLICATIVE
val it = (): unit
val it = (): unit
### theory "HOL-Library.BigO"
### 0.723s elapsed time, 1.565s cpu time, 0.101s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Tree_RelabellingTemplates")
bundle applicative_syntax
### theory "Draft.Applicative"
### 0.760s elapsed time, 1.672s cpu time, 0.156s GC time
Loading theory "Draft.Applicative_Option" (required by "Draft.Tree_RelabellingTemplates" via "Draft.Tree_Relabelling")
Loading theory "Draft.Applicative_State" (required by "Draft.Tree_RelabellingTemplates" via "Draft.Tree_Relabelling")
Loading theory "Draft.Applicative_PMF" (required by "Draft.Tree_RelabellingTemplates" via "Draft.Tree_Relabelling")
### theory "Draft.Applicative_State"
### 0.180s elapsed time, 0.691s cpu time, 0.122s GC time
Found termination order: "{}"
### theory "Draft.Applicative_Option"
### 0.239s elapsed time, 0.872s cpu time, 0.122s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.648s elapsed time, 1.747s cpu time, 0.242s GC time
### theory "Draft.Applicative_PMF"
### 1.184s elapsed time, 2.255s cpu time, 0.187s GC time
Loading theory "Draft.Tree_Relabelling" (required by "Draft.Tree_RelabellingTemplates")
consts
  fold_tree ::
    "('a => 'b) => ('b => 'b => 'b) => 'a Tree_Relabelling.tree => 'b"
locale labelling
  fixes fresh :: "('s, 'x) state"
consts
  label_list :: "'a list => ('s, 'x list) state"
consts
  traverse ::
    "('a => ('s, 'b) state)
     => 'a Tree_Relabelling.tree => ('s, 'b Tree_Relabelling.tree) state"
consts
  traverse_rev ::
    "('a => ('s, 'b) state dual)
     => 'a Tree_Relabelling.tree
        => ('s, 'b Tree_Relabelling.tree) state dual"
consts
  traverse_rev_rev ::
    "('a => ('s, 'b) state dual dual)
     => 'a Tree_Relabelling.tree
        => ('s, 'b Tree_Relabelling.tree) state dual dual"
### Ambiguous input (line 273 of "$AFP/Applicative_Lifting/Tree_Relabelling.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Inner_Product.real_inner_class.inner" ("_position" f)
###       ("_position" g))
###     ("_position" pure)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tree_Relabelling.kleisli_state" ("_position" f)
###       ("_position" g))
###     ("_position" pure)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 274 of "$AFP/Applicative_Lifting/Tree_Relabelling.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tree_Relabelling.kleisli_state"
###       ("_applC" ("_position" recurse) ("_position" f))
###       ("_applC" ("_position" traverse) ("_position" g)))
###     ("_position" pure)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Inner_Product.real_inner_class.inner"
###       ("_applC" ("_position" recurse) ("_position" f))
###       ("_applC" ("_position" traverse) ("_position" g)))
###     ("_position" pure)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 308 of "$AFP/Applicative_Lifting/Tree_Relabelling.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Inner_Product.real_inner_class.inner" ("_position" strip)
###       ("_position" adorn))
###     ("_position" pure)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tree_Relabelling.kleisli_state" ("_position" strip)
###       ("_position" adorn))
###     ("_position" pure)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 311 of "$AFP/Applicative_Lifting/Tree_Relabelling.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Inner_Product.real_inner_class.inner" ("_position" unlabel)
###       ("_position" label))
###     ("_position" pure)))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("\<^const>Tree_Relabelling.kleisli_state" ("_position" unlabel)
###       ("_position" label))
###     ("_position" pure)))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  repeatM :: "nat => ('s, 'x) state => ('s, 'x list) state"
Found termination order: "{}"
locale labelling
  fixes fresh :: "('s, 'x) state"
consts
  mirror :: "'a Tree_Relabelling.tree => 'a Tree_Relabelling.tree"
consts
  plabel :: "'a Tree_Relabelling.tree => 'b Tree_Relabelling.tree pmf"
### theory "Draft.Tree_Relabelling"
### 2.979s elapsed time, 3.619s cpu time, 0.903s GC time
Loading theory "Draft.Tree_RelabellingTemplates"
val templateLemmas =
   [("Tree_Relabelling.assert_fail", "assert ?P None = None",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_hole 0)),
    ("Tree_Relabelling.leaves_simps",
     "leaves (Tree_Relabelling.tree.Leaf ?x) = Suc 0",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app (template_hole 1, template_hole 0))),
    ("Tree_Relabelling.traverse_pure", "traverse pure ?t = pure ?t",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_app (template_hole 0, template_var 0))),
    ("Tree_Relabelling.B_pure", "pure ?x = B (pure ?x)",
     template_equation
      (template_app (template_hole 2, template_var 0),
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)))),
    ("Tree_Relabelling.labels_simps",
     "labels (Tree_Relabelling.tree.Leaf ?x) = [?x]",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 0), template_hole 0))),
    ("Tree_Relabelling.BB_pure", "pure ?x = B (B (pure ?x))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Tree_Relabelling.traverse_recurse",
     "traverse ?f = un_B o recurse_rev (B o ?f)",
     template_equation
      (template_app (template_hole 5, template_var 0),
       template_app
        (template_app (template_hole 4, template_hole 3),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))))),
    ("Tree_Relabelling.leaves_simps",
     "leaves (Tree_Relabelling.tree.Node ?l ?r) = leaves ?l + leaves ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Tree_Relabelling.labels_simps",
     "labels (Tree_Relabelling.tree.Node ?l ?r) = labels ?l @ labels ?r",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Tree_Relabelling.recurse_Leaf",
     "recurse ?f (Tree_Relabelling.tree.Leaf ?x) =
      pure Tree_Relabelling.tree.Leaf \<diamondop> ?f ?x",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_app (template_var 1, template_var 0)))),
    ("Tree_Relabelling.assert_pure",
     "assert ?P (pure ?x) = (if ?P ?x then pure ?x else None)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_var 1, template_var 0)),
           template_app (template_hole 2, template_var 0)),
         template_hole 0))),
    ("Tree_Relabelling.ap_state_rev_pure_B",
     "pure ?f \<diamondop> B ?x = B (pure ?f \<diamondop> ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Tree_Relabelling.ap_state_rev_rev_pure_B",
     "pure ?f \<diamondop> B ?x = B (pure ?f \<diamondop> ?x)",
     template_equation
      (template_app
        (template_app
          (template_hole 5, template_app (template_hole 4, template_var 1)),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Tree_Relabelling.plabel_mirror",
     "plabel ?p (Tree_Relabelling.mirror ?t) =
      pure Tree_Relabelling.mirror \<diamondop> plabel ?p ?t",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0)),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_var 0)))),
    ("Tree_Relabelling.ap_conv_bind_state",
     "?f \<diamondop> ?x = ?f >>= (%f. ?x >>= pure o f)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_app (template_hole 3, template_var 1), t_empty))),
    ("Tree_Relabelling.traverse_B_B",
     "traverse_rev_rev (B o B o ?f) = B o B o traverse ?f",
     template_equation
      (template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_hole 6),
               template_hole 5)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_hole 2),
             template_hole 1)),
         template_app (template_hole 0, template_var 0)))),
    ("Tree_Relabelling.BB_ap",
     "B (B ?f) \<diamondop> B (B ?x) = B (B (?f \<diamondop> ?x))",
     template_equation
      (template_app
        (template_app
          (template_hole 7,
           template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 1))),
         template_app
          (template_hole 4,
           template_app (template_hole 3, template_var 0))),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))))),
    ("Tree_Relabelling.plabel_subtree",
     "plabel ?p (subtree ?path ?t) =
      pure (subtree ?path) \<diamondop> plabel ?p ?t",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 2),
         template_app
          (template_app (template_hole 3, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1))),
         template_app
          (template_app (template_hole 4, template_var 2),
           template_var 0)))),
    ("Tree_Relabelling.ap_pure_bind_state",
     "pure ?x \<diamondop> (?y >>= ?f) =
      ?y >>= (\<diamondop>) (pure ?x) o ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 2)),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 2))),
           template_var 0)))),
    ("Tree_Relabelling.recurse_traverse",
     "?f \<bullet> ?g = pure ==> recurse ?f \<bullet> traverse ?g = pure",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 6, template_var 1), template_var 0),
          template_hole 5)],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 1)),
           template_app (template_hole 1, template_var 0)),
         template_hole 0))),
    ("Tree_Relabelling.repeatM_plus",
     "repeatM (?n + ?m) ?f =
      pure (@) \<diamondop> repeatM ?n ?f \<diamondop> repeatM ?m ?f",
     template_equation
      (template_app
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_hole 0)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 5, template_var 1),
           template_var 0)))),
    ("Tree_Relabelling.ap_state_rev_B",
     "B ?f \<diamondop> B ?x =
      B (pure (%x f. f x) \<diamondop> ?x \<diamondop> ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1, template_app (template_hole 0, t_empty)),
               template_var 0)),
           template_var 1)))),
    ("Tree_Relabelling.ap_state_rev_rev_B",
     "B ?f \<diamondop> B ?x =
      B (pure (%x f. f x) \<diamondop> ?x \<diamondop> ?f)",
     template_equation
      (template_app
        (template_app
          (template_hole 6, template_app (template_hole 5, template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app
                (template_hole 1, template_app (template_hole 0, t_empty)),
               template_var 0)),
           template_var 1)))),
    ("Tree_Relabelling.recurse_Node",
     "recurse ?f (Tree_Relabelling.tree.Node ?l ?r) =
      pure (%r l. Tree_Relabelling.tree.Node l r) \<diamondop>
      recurse ?f ?r \<diamondop>
      recurse ?f ?l",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 2, template_app (template_hole 1, t_empty)),
             template_app
              (template_app (template_hole 5, template_var 2),
               template_var 0))),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_var 1))))]:
   (string * thm * template) list
### theory "Draft.Tree_RelabellingTemplates"
### 1.295s elapsed time, 1.668s cpu time, 0.263s GC time
val it = (): unit
