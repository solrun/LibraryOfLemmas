Loading theory "Draft.Applicative" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor" via "Draft.Applicative_Environment")
Loading theory "Draft.Templates" (required by "Draft.Applicative_FunctorTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.BigO" (required by "Draft.Applicative_FunctorTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.068s elapsed time, 0.239s cpu time, 0.000s GC time
### ML warning (line 241 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 369 of "$AFP/Applicative_Lifting/applicative.ML"):
### Matches are not exhaustive.
### ML warning (line 483 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 495 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 677 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 687 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 789 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 900 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 999 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1061 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1084 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1137 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1148 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1164 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1225 of "$AFP/Applicative_Lifting/applicative.ML"):
### Matches are not exhaustive.
### ML warning (line 1313 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1317 of "$AFP/Applicative_Lifting/applicative.ML"):
### Matches are not exhaustive.
### ML warning (line 1336 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
### ML warning (line 1337 of "$AFP/Applicative_Lifting/applicative.ML"):
### Pattern is not exhaustive.
signature APPLICATIVE =
  sig
    val add_unfold_attrib: xstring option -> attribute
    type afun
    val afun_fold_tac: Proof.context -> afun -> int -> tactic
    type afun_inst
    val afun_of: Proof.context -> string -> afun
    val afun_of_generic: Context.generic -> string -> afun
    val afun_unfold_tac: Proof.context -> afun -> int -> tactic
    val afuns_of_term: Proof.context -> term -> afun list
    val afuns_of_term_generic: Context.generic -> term -> afun list
    val afuns_of_typ: Proof.context -> typ -> afun list
    val afuns_of_typ_generic: Context.generic -> typ -> afun list
    val applicative_cmd:
       ((((binding * string list) * string) * string) * string option) *
       string option
         -> local_theory -> Proof.state
    val combinator_rule_attrib: string list option -> attribute
    val dest_comb: Proof.context -> afun_inst -> term -> term * term
    val dest_pure: Proof.context -> afun_inst -> term -> term
    val dest_type: Proof.context -> afun_inst -> typ -> typ option
    val dest_type': Proof.context -> afun_inst -> typ -> typ
    val extern: Context.generic -> string -> xstring
    val fold_wrapper_tac: Proof.context -> afun option -> int -> tactic
    val forward_lift_attrib: xstring -> attribute
    val forward_lift_rule: Proof.context -> afun -> thm -> thm
    val general_normalform_conv:
       Proof.context -> afun -> cterm * cterm -> thm * thm
    val general_normalize_rel_tac: Proof.context -> afun -> int -> tactic
    val generalize_lift_terms:
       afun_inst -> term list -> Proof.context -> term list * Proof.context
    val import_afun_inst: afun -> Proof.context -> afun_inst * Proof.context
    val infer_comb: Proof.context -> afun_inst -> term * term -> term
    val inner_sort_of: afun_inst -> sort
    val intern: Context.generic -> xstring -> string
    val lift_term: afun_inst -> term -> term
    val lifting_wrapper_tac: Proof.context -> afun option -> int -> tactic
    val match_afun_inst: Proof.context -> afun -> term * int -> afun_inst
    val mk_ap: afun_inst -> typ * typ -> term
    val mk_comb: afun_inst -> typ -> term * term -> term
    val mk_pure: afun_inst -> typ -> term
    val mk_set: afun_inst -> typ -> term
    val mk_type: afun_inst -> typ -> typ
    val name_of_afun: afun -> binding
    val normalform_conv: Proof.context -> afun -> conv
    val normalize_rel_tac: Proof.context -> afun -> int -> tactic
    val normalize_wrapper_tac: Proof.context -> afun option -> int -> tactic
    val parse_opt_afun: afun option context_parser
    val print_afuns: Proof.context -> unit
    val setup_combinators:
       (string * thm) list -> local_theory -> local_theory
    val subst_lift_term: afun_inst -> (term * term) list -> term -> term
    val unfold_all_tac: Proof.context -> int -> tactic
    val unfold_wrapper_tac: Proof.context -> afun option -> int -> tactic
    val unfolds_of_afun: afun -> thm list
  end
structure Applicative: APPLICATIVE
val it = (): unit
### theory "HOL-Library.BigO"
### 0.643s elapsed time, 1.406s cpu time, 0.114s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Applicative_FunctorTemplates")
val it = (): unit
bundle applicative_syntax
### theory "Draft.Applicative"
### 0.679s elapsed time, 1.509s cpu time, 0.162s GC time
Loading theory "Draft.Applicative_Environment" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
Loading theory "Draft.Applicative_List" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
Loading theory "Draft.Applicative_Monoid" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
### theory "Draft.Applicative_Environment"
### 0.124s elapsed time, 0.495s cpu time, 0.000s GC time
Loading theory "Draft.Applicative_Open_State" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
### theory "Draft.Applicative_List"
### 0.127s elapsed time, 0.509s cpu time, 0.000s GC time
Loading theory "Draft.Applicative_Option" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
### theory "Draft.Applicative_Open_State"
### 0.142s elapsed time, 0.539s cpu time, 0.075s GC time
Loading theory "Draft.Applicative_Set" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
Found termination order: "{}"
### theory "Draft.Applicative_Option"
### 0.204s elapsed time, 0.794s cpu time, 0.075s GC time
Loading theory "Draft.Applicative_Sum" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
### theory "Draft.Applicative_Set"
### 0.130s elapsed time, 0.514s cpu time, 0.000s GC time
Loading theory "Draft.Applicative_State" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
Found termination order: "{}"
### theory "Draft.Applicative_State"
### 0.163s elapsed time, 0.633s cpu time, 0.075s GC time
Loading theory "Draft.Applicative_DNEList" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.592s elapsed time, 2.281s cpu time, 0.198s GC time
Loading theory "Draft.Applicative_Star" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
locale either_af
  fixes B :: "'b => 'b => bool"
  assumes "either_af B"
Found termination order: "{}"
### theory "Draft.Applicative_Sum"
### 0.474s elapsed time, 1.757s cpu time, 0.557s GC time
Loading theory "Draft.Applicative_Stream" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
### Ignoring duplicate rewrite rule:
### zip ?xs1 ?ys1 = [] == ?xs1 = [] | ?ys1 = []
### Redundant combinators: C
### theory "Draft.Applicative_Star"
### 0.355s elapsed time, 1.274s cpu time, 0.518s GC time
Loading theory "Draft.Applicative_Filter" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
class idemp_monoid_add = monoid_add +
  assumes "add_idemp": "!!x. x + x = x"
### theory "Draft.Applicative_Monoid"
### 0.955s elapsed time, 3.628s cpu time, 0.668s GC time
Loading theory "Draft.Applicative_Probability_List" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
consts
  ap_stream :: "('a => 'b) stream => 'a stream => 'b stream"
### theory "Draft.Applicative_Stream"
### 0.380s elapsed time, 1.461s cpu time, 0.105s GC time
Loading theory "Draft.Applicative_Vector" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
### theory "Draft.Applicative_DNEList"
### 0.642s elapsed time, 2.396s cpu time, 0.587s GC time
Loading theory "Draft.Applicative_PMF" (required by "Draft.Applicative_FunctorTemplates" via "Draft.Applicative_Functor")
theorem
  pure_filter_parametric: rel_fun ?A (rel_filter ?A) pure_filter pure_filter
theorem
  ap_filter_parametric:
    rel_fun (rel_filter (rel_fun ?A2.0 ?A1.0))
     (rel_fun (rel_filter ?A2.0) (rel_filter ?A1.0)) ap_filter ap_filter
### theory "Draft.Applicative_Filter"
### 0.571s elapsed time, 2.229s cpu time, 0.202s GC time
### theory "Draft.Applicative_Probability_List"
### 0.567s elapsed time, 2.206s cpu time, 0.202s GC time
### theory "Draft.Applicative_Vector"
### 0.724s elapsed time, 2.130s cpu time, 0.200s GC time
### theory "Draft.Applicative_PMF"
### 1.207s elapsed time, 2.637s cpu time, 0.273s GC time
Loading theory "Draft.Applicative_Functor" (required by "Draft.Applicative_FunctorTemplates")
### theory "Draft.Applicative_Functor"
### 2.843s elapsed time, 3.009s cpu time, 0.243s GC time
Loading theory "Draft.Applicative_FunctorTemplates"
Registered applicative functors:
  Applicative_DNEList.dnelist: "?'a dnelist" of ?'a
    pure: "Applicative_DNEList.single"
    ap: "Applicative.ap"
    set: "%x. UNIV"
    combinators: B, I, K
  Applicative_Environment.env: "?'b => ?'a" of ?'a
    pure: "pure"
    ap: "Applicative.ap"
    set: "range"
    rel: "rel_fun (=)"
    combinators: B, C, I, K, S, T, W
  Applicative_Filter.filter: "?'a filter" of ?'a
    pure: "pure_filter"
    ap: "ap_filter"
    set: "%x. UNIV"
    rel: "rel_filter"
    combinators: B, C, I, T
  Applicative_List.list: "?'a list" of ?'a
    pure: "%x. [x]"
    ap: "Applicative.ap"
    set: "set"
    rel: "list_all2"
    combinators: B, I
  Applicative_Monoid.comm_monoid_add: "(?'b, ?'a) monoid_ap" of ?'a
    pure: "pure"
    ap: "Applicative.ap"
    set: "%x. UNIV"
    combinators: B, C, I, T
  Applicative_Monoid.idemp_monoid_add: "(?'b, ?'a) monoid_ap" of ?'a
    pure: "pure"
    ap: "Applicative.ap"
    set: "%x. UNIV"
    combinators: B, I, W
  Applicative_Monoid.monoid_add: "(?'b, ?'a) monoid_ap" of ?'a
    pure: "pure"
    ap: "Applicative.ap"
    set: "%x. UNIV"
    combinators: B, I
  Applicative_Open_State.state: "?'b => ?'a * ?'b" of ?'a
    pure: "Pair"
    ap: "Applicative.ap"
    set: "%x. UNIV"
    combinators: B, I
  Applicative_Option.option: "?'a option" of ?'a
    pure: "Some"
    ap: "Applicative.ap"
    set: "set_option"
    rel: "rel_option"
    combinators: B, C, I, S, T, W
  Applicative_PMF.pmf: "?'a pmf" of ?'a
    pure: "return_pmf"
    ap: "Applicative.ap"
    set: "set_pmf"
    rel: "rel_pmf"
    combinators: B, C, I, K, T
  Applicative_Probability_List.pfp: "?'a pfp" of ?'a
    pure: "pure_pfp"
    ap: "Applicative.ap"
    set: "%x. UNIV"
    combinators: B, I
  Applicative_Set.set: "?'a set" of ?'a
    pure: "%x. {x}"
    ap: "Applicative.ap"
    set: "%x. x"
    rel: "rel_set"
    combinators: B, C, I, T
  Applicative_Star.star: "?'a star" of ?'a
    pure: "star_of"
    ap: "Ifun"
    set: "%x. UNIV"
    combinators: B, C, I, K, S, T, W
  Applicative_State.state: "(?'b, ?'a) State_Monad.state" of ?'a
    pure: "State_Monad.return"
    ap: "State_Monad.ap"
    set: "%x. UNIV"
    combinators: B, I
  Applicative_Stream.stream: "?'a stream" of ?'a
    pure: "pure"
    ap: "Applicative.ap"
    set: "sset"
    rel: "stream_all2"
    combinators: B, C, I, K, S, T, W
  Applicative_Sum.either: "?'a + ?'c" of ?'a
    pure: "Inl"
    ap: "Applicative.ap"
    set: "%x. UNIV"
    rel: "%A. rel_sum A (=)"
    combinators: B, I, W
  Applicative_Sum.semigroup_sum: "?'aa + ?'a" of ?'aa
    pure: "Inl"
    ap: "ap_plus"
    set: "%x. UNIV"
    combinators: B, I
  Applicative_Vector.vec: "(?'a, ?'b) vec" of ?'a
    pure: "pure_vec"
    ap: "Applicative.ap"
    set: "%x. UNIV"
    combinators: B, C, I, K, S, T, W
val templateLemmas = []: (string * thm * template) list
### theory "Draft.Applicative_FunctorTemplates"
### 1.615s elapsed time, 2.592s cpu time, 1.136s GC time
val it = (): unit
