Loading theory "Draft.Joinable" (required by "Draft.JoinableTemplates")
Loading theory "Draft.Templates" (required by "Draft.JoinableTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.BigO" (required by "Draft.JoinableTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.230s cpu time, 0.000s GC time
### theory "Draft.Joinable"
### 0.128s elapsed time, 0.350s cpu time, 0.000s GC time
### theory "HOL-Library.BigO"
### 0.640s elapsed time, 0.863s cpu time, 0.036s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.JoinableTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.534s elapsed time, 0.596s cpu time, 0.089s GC time
Loading theory "Draft.JoinableTemplates"
val templateLemmas =
   [("Joinable.sym_joinable", "sym (joinable ?R)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Joinable.reflp_joinablep", "reflp ?P ==> reflp (joinablep ?P)",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Joinable.joinablep_refl", "reflp ?P ==> joinablep ?P ?x ?x",
     template_implication
      ([template_predicate
         (template_app (template_hole 1, template_var 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_var 0)
           ))),
    ("Joinable.reflp_le_joinablep", "reflp ?P ==> ?P <= joinablep ?P",
     template_implication
      ([template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 0)))),
    ("Joinable.joinable_le_rtscl", "joinable (?R^*) <= (?R Un ?R^-1)^*",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))))),
    ("Joinable.refl_le_joinable", "refl ?R ==> ?R <= joinable ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_hole 2),
              template_var 0)
            )],
       template_inequation
        (less_equals, template_var 0,
         template_app (template_hole 0, template_var 0)))),
    ("Joinable.refl_joinable", "refl ?R ==> refl (joinable ?R)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Joinable.joinable_mono", "?R <= ?S ==> joinable ?R <= joinable ?S",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Joinable.joinable_refl", "refl ?R ==> (?x, ?x) : joinable ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_hole 3),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Joinable.trans_joinable",
     "[| trans ?R; confluent ?R |] ==> trans (joinable ?R)",
     template_implication
      ([template_predicate (template_app (template_hole 2, template_var 0)),
        template_predicate
         (template_app (template_hole 1, template_var 0))],
       template_predicate
        (
           template_app
            (template_hole 2,
             template_app (template_hole 0, template_var 0))
           ))),
    ("Joinable.refl_on_joinable",
     "refl_on {x. EX y. (x, y) : ?R} (joinable ?R)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 5, template_app (template_hole 4, t_empty)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Joinable.refl_joinable_iff",
     "(ALL x. EX y. (x, y) : ?R) = refl (joinable ?R)",
     template_equation
      (template_app (template_hole 6, t_empty),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Joinable.joinable_eq_rtscl",
     "confluent (?R^*) ==> joinable (?R^*) = (?R Un ?R^-1)^*",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app (template_hole 4, template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 2, template_app (template_hole 4, template_var 0)),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 0)))))),
    ("Joinable.joinable_sym",
     "(?x, ?y) : joinable ?R ==> (?y, ?x) : joinable ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 2)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Joinable.joinablep_joinable",
     "joinablep (%x y. (x, y) : ?R) = (%x y. (x, y) : joinable ?R)",
     template_equation (template_app (template_hole 5, t_empty), t_empty)),
    ("Joinable.joinable_simp",
     "((?x, ?y) : joinable ?R) = (EX z. (?x, z) : ?R & (?y, z) : ?R)",
     template_equation
      (template_app
        (template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 2),
             template_var 1)),
         template_app (template_hole 4, template_var 0)),
       template_app (template_hole 3, t_empty))),
    ("Joinable.joinableI",
     "[| (?x, ?z) : ?R; (?y, ?z) : ?R |] ==> (?x, ?y) : joinable ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 0)),
             template_app (template_hole 0, template_var 1))
           ))),
    ("Joinable.joinableD",
     "(?x, ?y) : joinable ?R ==> EX z. (?x, z) : ?R & (?y, z) : ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 2),
                  template_var 1)),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate (template_app (template_hole 3, t_empty)))),
    ("Joinable.confluentD",
     "[| confluent ?R; (?x, ?y) : ?R; (?x, ?y') : ?R |]
      ==> (?y, ?y') : joinable ?R",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 3)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0)),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Joinable.joinableE",
     "[| (?x, ?y) : joinable ?R;
         !!z. [| (?x, z) : ?R; (?y, z) : ?R |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_predicate (template_var 0))),
    ("Joinable.joinable_subst",
     "[| !!x y. (x, y) : ?R ==> (?P x, ?P y) : ?R; (?x, ?y) : joinable ?R |]
      ==> (?P ?x, ?P ?y) : joinable ?R",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 0)),
              template_app (template_hole 0, template_var 3))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 2, template_var 1)),
                 template_app (template_var 2, template_var 0))),
             template_app (template_hole 0, template_var 3))
           ))),
    ("Joinable.confluentI",
     "(!!x y y'.
          [| (x, y) : ?R; (x, y') : ?R |]
          ==> EX z. (y, z) : ?R & (y', z) : ?R) ==>
      confluent ?R",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Joinable.confluentE",
     "[| confluent ?R; (?x, ?y) : ?R; (?x, ?y') : ?R;
         !!z. [| (?y, z) : ?R; (?y', z) : ?R |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 3, template_var 4)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 1)),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 0, t_empty))],
       template_predicate (template_var 0)))]:
   (string * thm * template) list
### theory "Draft.JoinableTemplates"
### 0.289s elapsed time, 0.384s cpu time, 0.000s GC time
val it = (): unit
