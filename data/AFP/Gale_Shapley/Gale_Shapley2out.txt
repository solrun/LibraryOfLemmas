Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Gale_Shapley2Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Gale_Shapley2Templates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Gale_Shapley2Templates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Gale_Shapley2Templates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.511s cpu time, 0.055s GC time
Loading theory "Draft.Gale_Shapley1" (required by "Draft.Gale_Shapley2Templates" via "Draft.Gale_Shapley2")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.912s cpu time, 0.055s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Gale_Shapley2Templates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.342s elapsed time, 1.374s cpu time, 0.133s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Gale_Shapley2Templates" via "Draft.ExtrEqs")
### Ambiguous input (line 21 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P) ("_position" s)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" b) ("_position" s)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" P)
###                 ("_applC" ("_position" c) ("_position" s)))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_applC" ("_position" c) ("_position" s))
###                   ("_tuple_arg" ("_position" s)))
###                 ("_position" r))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" s)
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P) ("_position" s)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.Not"
###                     ("_applC" ("_position" b) ("_position" s))))))
###             ("\<^const>HOL.Trueprop"
###               ("_Seq" ("_applC" ("_position" Q) ("_position" s))
###                 ("_applC" ("_position" wf) ("_position" r)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Q)
###       ("_applC" ("_position" while)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c) ("_position" s)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("_bigimpl"
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_Seq" ("_applC" ("_position" P) ("_position" s))
###                 ("_applC" ("_position" b) ("_position" s)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" P)
###                 ("_applC" ("_position" c) ("_position" s)))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_applC" ("_position" c) ("_position" s))
###                   ("_tuple_arg" ("_position" s)))
###                 ("_position" r))))))
###       ("_asm"
###         ("\<^const>Pure.all_binder" ("_position" s)
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P) ("_position" s)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.Not"
###                     ("_applC" ("_position" b) ("_position" s))))))
###             ("\<^const>HOL.Trueprop"
###               ("_Seq" ("_applC" ("_position" Q) ("_position" s))
###                 ("_applC" ("_position" wf) ("_position" r)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Q)
###       ("_applC" ("_position" while)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c) ("_position" s)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("_bigimpl"
###           ("_asms"
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" P) ("_position" s)))
###             ("_asm"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" b) ("_position" s)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" P)
###                 ("_applC" ("_position" c) ("_position" s)))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_applC" ("_position" c) ("_position" s))
###                   ("_tuple_arg" ("_position" s)))
###                 ("_position" r))))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" s)
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P) ("_position" s)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.Not"
###                     ("_applC" ("_position" b) ("_position" s))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" Q) ("_position" s)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wf) ("_position" r)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Q)
###       ("_applC" ("_position" while)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c) ("_position" s)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" P) ("_position" s)))
###     ("_asms"
###       ("\<^const>Pure.all_binder" ("_position" s)
###         ("_bigimpl"
###           ("_asm"
###             ("\<^const>HOL.Trueprop"
###               ("_Seq" ("_applC" ("_position" P) ("_position" s))
###                 ("_applC" ("_position" b) ("_position" s)))))
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.conj"
###               ("_applC" ("_position" P)
###                 ("_applC" ("_position" c) ("_position" s)))
###               ("\<^const>Set.member"
###                 ("_tuple" ("_applC" ("_position" c) ("_position" s))
###                   ("_tuple_arg" ("_position" s)))
###                 ("_position" r))))))
###       ("_asms"
###         ("\<^const>Pure.all_binder" ("_position" s)
###           ("_bigimpl"
###             ("_asms"
###               ("\<^const>HOL.Trueprop"
###                 ("_applC" ("_position" P) ("_position" s)))
###               ("_asm"
###                 ("\<^const>HOL.Trueprop"
###                   ("\<^const>HOL.Not"
###                     ("_applC" ("_position" b) ("_position" s))))))
###             ("\<^const>HOL.Trueprop"
###               ("_applC" ("_position" Q) ("_position" s)))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("_applC" ("_position" wf) ("_position" r)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" Q)
###       ("_applC" ("_position" while)
###         ("_cargs" ("_position" b)
###           ("_cargs" ("_position" c) ("_position" s)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 30 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 6 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###         ("_applC" ("_position" Some) ("_position" y))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" inj_on)
###           ("_cargs" ("_position" m)
###             ("_applC" ("_position" dom) ("_position" m)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" z)
###             ("_applC" ("_position" ran) ("_position" m)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" m)
###           ("_assign" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" z)))))
###       ("\<^const>Set.union"
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" ran) ("_position" m))
###           ("_Finset" ("_position" y)))
###         ("_Finset" ("_position" z))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###         ("_Seq" ("_applC" ("_position" Some) ("_position" y))
###           ("_applC" ("_position" inj_on)
###             ("_cargs" ("_position" m)
###               ("_applC" ("_position" dom) ("_position" m)))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" z)
###           ("_applC" ("_position" ran) ("_position" m))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" m)
###           ("_assign" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" z)))))
###       ("\<^const>Set.union"
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" ran) ("_position" m))
###           ("_Finset" ("_position" y)))
###         ("_Finset" ("_position" z))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###         ("_applC" ("_position" Some) ("_position" y))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member"
###           ("_Seq"
###             ("_applC" ("_position" inj_on)
###               ("_cargs" ("_position" m)
###                 ("_applC" ("_position" dom) ("_position" m))))
###             ("_position" z))
###           ("_applC" ("_position" ran) ("_position" m))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" m)
###           ("_assign" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" z)))))
###       ("\<^const>Set.union"
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" ran) ("_position" m))
###           ("_Finset" ("_position" y)))
###         ("_Finset" ("_position" z))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###         ("_applC" ("_position" Some) ("_position" y))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" inj_on)
###           ("_cargs" ("_position" m)
###             ("_applC" ("_position" dom) ("_position" m)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member" ("_position" z)
###             ("_applC" ("_position" ran) ("_position" m)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_Update" ("_position" m)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" z)))))
###       ("\<^const>Set.union"
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" ran) ("_position" m))
###           ("_Finset" ("_position" y)))
###         ("_Finset" ("_position" z))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###         ("_Seq" ("_applC" ("_position" Some) ("_position" y))
###           ("_applC" ("_position" inj_on)
###             ("_cargs" ("_position" m)
###               ("_applC" ("_position" dom) ("_position" m)))))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member" ("_position" z)
###           ("_applC" ("_position" ran) ("_position" m))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_Update" ("_position" m)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" z)))))
###       ("\<^const>Set.union"
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" ran) ("_position" m))
###           ("_Finset" ("_position" y)))
###         ("_Finset" ("_position" z))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq" ("_applC" ("_position" m) ("_position" x))
###         ("_applC" ("_position" Some) ("_position" y))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member"
###           ("_Seq"
###             ("_applC" ("_position" inj_on)
###               ("_cargs" ("_position" m)
###                 ("_applC" ("_position" dom) ("_position" m))))
###             ("_position" z))
###           ("_applC" ("_position" ran) ("_position" m))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_Update" ("_position" m)
###           ("_updbind" ("_position" x)
###             ("_applC" ("_position" Some) ("_position" z)))))
###       ("\<^const>Set.union"
###         ("\<^const>Groups.minus_class.minus"
###           ("_applC" ("_position" ran) ("_position" m))
###           ("_Finset" ("_position" y)))
###         ("_Finset" ("_position" z))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 56 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rk_of_pref)
###       ("_cargs" ("_position" r)
###         ("_cargs" ("_position" rs)
###           ("\<^const>List.list.Cons" ("_position" n) ("_position" ns)))))
###     ("_LUpdate"
###       ("_applC" ("_position" rk_of_pref)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" r)
###             ("\<^const>Groups.one_class.one"))
###           ("_cargs" ("_position" rs) ("_position" ns))))
###       ("_lupdbind" ("_position" n) ("_position" r)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" rk_of_pref)
###       ("_cargs" ("_position" r)
###         ("_cargs" ("_position" rs)
###           ("\<^const>List.list.Cons" ("_position" n) ("_position" ns)))))
###     ("_applC"
###       ("_applC" ("_position" rk_of_pref)
###         ("_cargs"
###           ("\<^const>Groups.plus_class.plus" ("_position" r)
###             ("\<^const>Groups.one_class.one"))
###           ("_cargs" ("_position" rs) ("_position" ns))))
###       ("_list" ("_assign" ("_position" n) ("_position" r))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 65 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("_applC" ("_position" length) ("_position" P))
###         ("_applC" ("_position" length) ("_position" rs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" i)
###           ("_Seq" ("_applC" ("_position" set) ("_position" P))
###             ("_applC" ("_position" distinct) ("_position" P)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("_position" set) ("_position" P))
###             ("\<^const>Gale_Shapley1.upt_set"
###               ("_applC" ("_position" length) ("_position" rs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.nth"
###         ("_applC" ("_position" rk_of_pref)
###           ("_cargs" ("_position" r)
###             ("_cargs" ("_position" rs) ("_position" P))))
###         ("_position" i))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" index)
###           ("_cargs" ("_position" P) ("_position" i)))
###         ("_position" r)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("_applC" ("_position" length) ("_position" P))
###         ("_applC" ("_position" length) ("_position" rs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" i)
###           ("_applC" ("_position" set) ("_position" P))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" distinct) ("_position" P)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" set) ("_position" P))
###               ("\<^const>Gale_Shapley1.upt_set"
###                 ("_applC" ("_position" length) ("_position" rs)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.nth"
###         ("_applC" ("_position" rk_of_pref)
###           ("_cargs" ("_position" r)
###             ("_cargs" ("_position" rs) ("_position" P))))
###         ("_position" i))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" index)
###           ("_cargs" ("_position" P) ("_position" i)))
###         ("_position" r)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("_applC" ("_position" length) ("_position" P))
###         ("_applC" ("_position" length) ("_position" rs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" i)
###           ("_applC" ("_position" set) ("_position" P))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_Seq" ("_applC" ("_position" distinct) ("_position" P))
###               ("_applC" ("_position" set) ("_position" P)))
###             ("\<^const>Gale_Shapley1.upt_set"
###               ("_applC" ("_position" length) ("_position" rs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>List.nth"
###         ("_applC" ("_position" rk_of_pref)
###           ("_cargs" ("_position" r)
###             ("_cargs" ("_position" rs) ("_position" P))))
###         ("_position" i))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" index)
###           ("_cargs" ("_position" P) ("_position" i)))
###         ("_position" r)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Pref
  fixes n :: "nat"
    and P\<^sub>a :: "nat list list"
    and P\<^sub>b :: "nat list list"
  assumes "Pref P\<^sub>a P\<^sub>b"
  defines "n == length P\<^sub>a"
### Ambiguous input (line 92 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" wf) ("_position" A)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" a)
###           ("_position" n)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less"
###       ("\<^const>List.nth" ("_position" A) ("_position" a))
###       ("_position" n))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less"
###         ("_Seq" ("_applC" ("_position" wf) ("_position" A)) ("_position" a))
###         ("_position" n))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less"
###       ("\<^const>List.nth" ("_position" A) ("_position" a))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 95 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" wf) ("_position" A)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" a)
###           ("_position" n)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>List.nth" ("_position" A) ("_position" a))
###       ("\<^const>Groups.minus_class.minus" ("_position" n)
###         ("\<^const>Groups.one_class.one")))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less"
###         ("_Seq" ("_applC" ("_position" wf) ("_position" A)) ("_position" a))
###         ("_position" n))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less_eq"
###       ("\<^const>List.nth" ("_position" A) ("_position" a))
###       ("\<^const>Groups.minus_class.minus" ("_position" n)
###         ("\<^const>Groups.one_class.one")))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 124 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less"
###     ("_applC" ("_position" var0)
###       ("_cargs"
###         ("_LUpdate" ("_position" A)
###           ("_lupdbind" ("_position" a')
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>List.nth" ("_position" A) ("_position" a'))
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" M)))
###     ("_applC" ("_position" var0)
###       ("_cargs" ("_position" A) ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less"
###     ("_applC" ("_position" var0)
###       ("_cargs"
###         ("_applC" ("_position" A)
###           ("_list"
###             ("_assign" ("_position" a')
###               ("\<^const>Groups.plus_class.plus"
###                 ("\<^const>List.nth" ("_position" A) ("_position" a'))
###                 ("\<^const>Groups.one_class.one")))))
###         ("_position" M)))
###     ("_applC" ("_position" var0)
###       ("_cargs" ("_position" A) ("_position" M)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 162 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" wf) ("_position" A)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" a)
###           ("_position" n)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less"
###       ("_applC" ("_position" match)
###         ("_cargs" ("_position" A) ("_position" a)))
###       ("_position" n))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less"
###         ("_Seq" ("_applC" ("_position" wf) ("_position" A)) ("_position" a))
###         ("_position" n))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>Orderings.ord_class.less"
###       ("_applC" ("_position" match)
###         ("_cargs" ("_position" A) ("_position" a)))
###       ("_position" n))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 165 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 4 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" wf) ("_position" A)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" a)
###           ("_position" n)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" a'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" match)
###         ("_cargs"
###           ("_LUpdate" ("_position" A)
###             ("_lupdbind" ("_position" a) ("_position" b)))
###           ("_position" a')))
###       ("_applC" ("_position" match)
###         ("_cargs" ("_position" A) ("_position" a'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less"
###         ("_Seq" ("_applC" ("_position" wf) ("_position" A)) ("_position" a))
###         ("_position" n)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" a')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" match)
###         ("_cargs"
###           ("_LUpdate" ("_position" A)
###             ("_lupdbind" ("_position" a) ("_position" b)))
###           ("_position" a')))
###       ("_applC" ("_position" match)
###         ("_cargs" ("_position" A) ("_position" a'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop" ("_applC" ("_position" wf) ("_position" A)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" a)
###           ("_position" n)))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.not_equal" ("_position" a) ("_position" a'))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" match)
###         ("_cargs"
###           ("_applC" ("_position" A)
###             ("_list" ("_assign" ("_position" a) ("_position" b))))
###           ("_position" a')))
###       ("_applC" ("_position" match)
###         ("_cargs" ("_position" A) ("_position" a'))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less"
###         ("_Seq" ("_applC" ("_position" wf) ("_position" A)) ("_position" a))
###         ("_position" n)))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.not_equal" ("_position" a) ("_position" a')))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" match)
###         ("_cargs"
###           ("_applC" ("_position" A)
###             ("_list" ("_assign" ("_position" a) ("_position" b))))
###           ("_position" a')))
###       ("_applC" ("_position" match)
###         ("_cargs" ("_position" A) ("_position" a'))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 296 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less"
###     ("_applC" ("_position" var)
###       ("_cargs"
###         ("_LUpdate" ("_position" A)
###           ("_lupdbind" ("_position" a)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>List.nth" ("_position" A) ("_position" a))
###               ("\<^const>Groups.one_class.one"))))
###         ("_position" M)))
###     ("_applC" ("_position" var)
###       ("_cargs" ("_position" A) ("_position" M)))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>Orderings.ord_class.less"
###     ("_applC" ("_position" var)
###       ("_cargs"
###         ("_applC" ("_position" A)
###           ("_list"
###             ("_assign" ("_position" a)
###               ("\<^const>Groups.plus_class.plus"
###                 ("\<^const>List.nth" ("_position" A) ("_position" a))
###                 ("\<^const>Groups.one_class.one")))))
###         ("_position" M)))
###     ("_applC" ("_position" var)
###       ("_cargs" ("_position" A) ("_position" M)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### Ambiguous input (line 345 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" opti\<^sub>a)
###     ("_applC" ("_position" A)
###       ("_list"
###         ("_assign" ("_position" a)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>List.nth" ("_position" A) ("_position" a))
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" opti\<^sub>a)
###     ("_LUpdate" ("_position" A)
###       ("_lupdbind" ("_position" a)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>List.nth" ("_position" A) ("_position" a))
###           ("\<^const>Groups.one_class.one"))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 377 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("_Seq"
###         ("_applC" ("_position" matching)
###           ("_cargs" ("_position" A)
###             ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))
###         ("_applC" ("_position" pref_match)
###           ("_cargs" ("_position" A)
###             ("\<^const>Gale_Shapley1.upt_set" ("_position" n)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" stable)
###       ("_cargs" ("_position" A)
###         ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" matching)
###         ("_cargs" ("_position" A)
###           ("\<^const>Gale_Shapley1.upt_set" ("_position" n)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("_applC" ("_position" pref_match)
###           ("_cargs" ("_position" A)
###             ("\<^const>Gale_Shapley1.upt_set" ("_position" n)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" stable)
###       ("_cargs" ("_position" A)
###         ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 385 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" invAM)
###         ("_cargs" ("_position" A) ("_position" M))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.conj"
###           ("\<^const>Orderings.ord_class.less" ("_position" a)
###             ("_position" n))
###           ("\<^const>Set.not_member" ("_position" a) ("_position" M))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.not_member"
###             ("_applC" ("_position" match)
###               ("_cargs" ("_position" A) ("_position" a)))
###             ("\<^const>Set.image"
###               ("_applC" ("_position" match) ("_position" A))
###               ("_position" M)))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" invAM)
###       ("_cargs" ("_position" A)
###         ("\<^const>Set.union" ("_position" M)
###           ("_Finset" ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.conj"
###         ("\<^const>Orderings.ord_class.less"
###           ("_Seq"
###             ("_applC" ("_position" invAM)
###               ("_cargs" ("_position" A) ("_position" M)))
###             ("_position" a))
###           ("_position" n))
###         ("\<^const>Set.not_member" ("_position" a) ("_position" M))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.not_member"
###           ("_applC" ("_position" match)
###             ("_cargs" ("_position" A) ("_position" a)))
###           ("\<^const>Set.image"
###             ("_applC" ("_position" match) ("_position" A))
###             ("_position" M))))))
###   ("\<^const>HOL.Trueprop"
###     ("_applC" ("_position" invAM)
###       ("_cargs" ("_position" A)
###         ("\<^const>Set.union" ("_position" M)
###           ("_Finset" ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 391 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" invAM)
###     ("_cargs"
###       ("_LUpdate" ("_position" A)
###         ("_lupdbind" ("_position" a')
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>List.nth" ("_position" A) ("_position" a'))
###             ("\<^const>Groups.one_class.one"))))
###       ("\<^const>Set.union"
###         ("\<^const>Groups.minus_class.minus" ("_position" M)
###           ("_Finset" ("_position" a')))
###         ("_Finset" ("_position" a))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" invAM)
###     ("_cargs"
###       ("_applC" ("_position" A)
###         ("_list"
###           ("_assign" ("_position" a')
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>List.nth" ("_position" A) ("_position" a'))
###               ("\<^const>Groups.one_class.one")))))
###       ("\<^const>Set.union"
###         ("\<^const>Groups.minus_class.minus" ("_position" M)
###           ("_Finset" ("_position" a')))
###         ("_Finset" ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 417 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" invAM)
###     ("_cargs"
###       ("_LUpdate" ("_position" A)
###         ("_lupdbind" ("_position" a)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>List.nth" ("_position" A) ("_position" a))
###             ("\<^const>Groups.one_class.one"))))
###       ("_position" M))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" invAM)
###     ("_cargs"
###       ("_applC" ("_position" A)
###         ("_list"
###           ("_assign" ("_position" a)
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>List.nth" ("_position" A) ("_position" a))
###               ("\<^const>Groups.one_class.one")))))
###       ("_position" M))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
### Ambiguous input (line 624 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" invAB)
###     ("_cargs"
###       ("_LUpdate" ("_position" A)
###         ("_lupdbind" ("_position" a')
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>List.nth" ("_position" A) ("_position" a'))
###             ("\<^const>Groups.one_class.one"))))
###       ("_cargs"
###         ("_Update" ("_position" B)
###           ("_updbind"
###             ("_applC" ("_position" match)
###               ("_cargs" ("_position" A) ("_position" a)))
###             ("_applC" ("_position" Some) ("_position" a))))
###         ("\<^const>Set.union"
###           ("\<^const>Groups.minus_class.minus" ("_position" M)
###             ("_Finset" ("_position" a')))
###           ("_Finset" ("_position" a)))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" invAB)
###     ("_cargs"
###       ("_applC" ("_position" A)
###         ("_list"
###           ("_assign" ("_position" a')
###             ("\<^const>Groups.plus_class.plus"
###               ("\<^const>List.nth" ("_position" A) ("_position" a'))
###               ("\<^const>Groups.one_class.one")))))
###       ("_cargs"
###         ("_Update" ("_position" B)
###           ("_updbind"
###             ("_applC" ("_position" match)
###               ("_cargs" ("_position" A) ("_position" a)))
###             ("_applC" ("_position" Some) ("_position" a))))
###         ("\<^const>Set.union"
###           ("\<^const>Groups.minus_class.minus" ("_position" M)
###             ("_Finset" ("_position" a')))
###           ("_Finset" ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 634 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_hoare_vars_tc"
###     ("_idts" ("_position" A)
###       ("_idts" ("_position" B)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" a')
###             ("_idts" ("_position" as) ("_position" b))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" as)
###         ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###           ("_position" n)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" A)
###           ("_applC" ("_position" replicate)
###             ("_cargs" ("_position" n) ("\<^const>Groups.zero_class.zero"))))
###         ("\<^const>HOL.eq" ("_position" B)
###           ("_lambda" ("_idtdummy") ("_position" None)))))
###     ("_While"
###       ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" invAM)
###           ("_cargs" ("_position" A)
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Gale_Shapley1.upt_set" ("_position" n))
###               ("_applC" ("_position" set) ("_position" as)))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" invAB)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("\<^const>Gale_Shapley1.upt_set" ("_position" n))
###                   ("_applC" ("_position" set) ("_position" as))))))
###           ("_applC" ("_position" invas) ("_position" as))))
###       ("_applC" ("_position" var)
###         ("_cargs" ("_position" A)
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Gale_Shapley1.upt_set" ("_position" n))
###             ("_applC" ("_position" set) ("_position" as)))))
###       ("_Seq"
###         ("_assign" ("_position" a)
###           ("_applC" ("_position" hd) ("_position" as)))
###         ("_Seq"
###           ("_assign" ("_position" b)
###             ("_applC" ("_position" match)
###               ("_cargs" ("_position" A) ("_position" a))))
###           ("_Cond"
###             ("\<^const>HOL.eq" ("_applC" ("_position" B) ("_position" b))
###               ("_position" None))
###             ("_Seq"
###               ("_assign" ("_position" B)
###                 ("_applC" ("_position" B)
###                   ("_assign" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" a)))))
###               ("_assign" ("_position" as)
###                 ("_applC" ("_position" tl) ("_position" as))))
###             ("_Seq"
###               ("_assign" ("_position" a')
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" B) ("_position" b))))
###               ("_Cond"
###                 ("\<^const>Gale_Shapley1.prefa"
###                   ("\<^const>List.nth" ("_position" P\<^sub>b)
###                     ("_applC" ("_position" match)
###                       ("_cargs" ("_position" A) ("_position" a'))))
###                   ("_position" a) ("_position" a'))
###                 ("_Seq"
###                   ("_assign" ("_position" B)
###                     ("_Update" ("_position" B)
###                       ("_updbind" ("_position" b)
###                         ("_applC" ("_position" Some) ("_position" a)))))
###                   ("_Seq"
###                     ("_assign_list" ("_position" A) ("_position" a')
###                       ("\<^const>Groups.plus_class.plus"
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a'))
###                         ("\<^const>Groups.one_class.one")))
###                     ("_assign" ("_position" as)
###                       ("\<^const>List.list.Cons" ("_position" a')
###                         ("_applC" ("_position" tl) ("_position" as))))))
###                 ("_assign_list" ("_position" A) ("_position" a)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("\<^const>List.nth" ("_position" A) ("_position" a))
###                     ("\<^const>Groups.one_class.one")))))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" matching)
###         ("_cargs" ("_position" A)
###           ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" stable)
###           ("_cargs" ("_position" A)
###             ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))
###         ("_applC" ("_position" opti\<^sub>a) ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("_hoare_vars_tc"
###     ("_idts" ("_position" A)
###       ("_idts" ("_position" B)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" a')
###             ("_idts" ("_position" as) ("_position" b))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" as)
###         ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###           ("_position" n)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" A)
###           ("_applC" ("_position" replicate)
###             ("_cargs" ("_position" n) ("\<^const>Groups.zero_class.zero"))))
###         ("\<^const>HOL.eq" ("_position" B)
###           ("_lambda" ("_idtdummy") ("_position" None)))))
###     ("_While"
###       ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" invAM)
###           ("_cargs" ("_position" A)
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Gale_Shapley1.upt_set" ("_position" n))
###               ("_applC" ("_position" set) ("_position" as)))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" invAB)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("\<^const>Gale_Shapley1.upt_set" ("_position" n))
###                   ("_applC" ("_position" set) ("_position" as))))))
###           ("_applC" ("_position" invas) ("_position" as))))
###       ("_applC" ("_position" var)
###         ("_cargs" ("_position" A)
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Gale_Shapley1.upt_set" ("_position" n))
###             ("_applC" ("_position" set) ("_position" as)))))
###       ("_Seq"
###         ("_assign" ("_position" a)
###           ("_applC" ("_position" hd) ("_position" as)))
###         ("_Seq"
###           ("_assign" ("_position" b)
###             ("_applC" ("_position" match)
###               ("_cargs" ("_position" A) ("_position" a))))
###           ("_Cond"
###             ("\<^const>HOL.eq" ("_applC" ("_position" B) ("_position" b))
###               ("_position" None))
###             ("_Seq"
###               ("_assign" ("_position" B)
###                 ("_Update" ("_position" B)
###                   ("_updbind" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" a)))))
###               ("_assign" ("_position" as)
###                 ("_applC" ("_position" tl) ("_position" as))))
###             ("_Seq"
###               ("_assign" ("_position" a')
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" B) ("_position" b))))
###               ("_Cond"
###                 ("\<^const>Gale_Shapley1.prefa"
###                   ("\<^const>List.nth" ("_position" P\<^sub>b)
###                     ("_applC" ("_position" match)
###                       ("_cargs" ("_position" A) ("_position" a'))))
###                   ("_position" a) ("_position" a'))
###                 ("_Seq"
###                   ("_assign" ("_position" B)
###                     ("_Update" ("_position" B)
###                       ("_updbind" ("_position" b)
###                         ("_applC" ("_position" Some) ("_position" a)))))
###                   ("_Seq"
###                     ("_assign_list" ("_position" A) ("_position" a')
###                       ("\<^const>Groups.plus_class.plus"
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a'))
###                         ("\<^const>Groups.one_class.one")))
###                     ("_assign" ("_position" as)
###                       ("\<^const>List.list.Cons" ("_position" a')
###                         ("_applC" ("_position" tl) ("_position" as))))))
###                 ("_assign_list" ("_position" A) ("_position" a)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("\<^const>List.nth" ("_position" A) ("_position" a))
###                     ("\<^const>Groups.one_class.one")))))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" matching)
###         ("_cargs" ("_position" A)
###           ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" stable)
###           ("_cargs" ("_position" A)
###             ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))
###         ("_applC" ("_position" opti\<^sub>a) ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("_hoare_vars_tc"
###     ("_idts" ("_position" A)
###       ("_idts" ("_position" B)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" a')
###             ("_idts" ("_position" as) ("_position" b))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" as)
###         ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###           ("_position" n)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" A)
###           ("_applC" ("_position" replicate)
###             ("_cargs" ("_position" n) ("\<^const>Groups.zero_class.zero"))))
###         ("\<^const>HOL.eq" ("_position" B)
###           ("_lambda" ("_idtdummy") ("_position" None)))))
###     ("_While"
###       ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" invAM)
###           ("_cargs" ("_position" A)
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Gale_Shapley1.upt_set" ("_position" n))
###               ("_applC" ("_position" set) ("_position" as)))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" invAB)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("\<^const>Gale_Shapley1.upt_set" ("_position" n))
###                   ("_applC" ("_position" set) ("_position" as))))))
###           ("_applC" ("_position" invas) ("_position" as))))
###       ("_applC" ("_position" var)
###         ("_cargs" ("_position" A)
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Gale_Shapley1.upt_set" ("_position" n))
###             ("_applC" ("_position" set) ("_position" as)))))
###       ("_Seq"
###         ("_assign" ("_position" a)
###           ("_applC" ("_position" hd) ("_position" as)))
###         ("_Seq"
###           ("_assign" ("_position" b)
###             ("_applC" ("_position" match)
###               ("_cargs" ("_position" A) ("_position" a))))
###           ("_Cond"
###             ("\<^const>HOL.eq" ("_applC" ("_position" B) ("_position" b))
###               ("_position" None))
###             ("_Seq"
###               ("_assign" ("_position" B)
###                 ("_applC" ("_position" B)
###                   ("_assign" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" a)))))
###               ("_assign" ("_position" as)
###                 ("_applC" ("_position" tl) ("_position" as))))
###             ("_Seq"
###               ("_assign" ("_position" a')
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" B) ("_position" b))))
###               ("_Cond"
###                 ("\<^const>Gale_Shapley1.prefa"
###                   ("\<^const>List.nth" ("_position" P\<^sub>b)
###                     ("_applC" ("_position" match)
###                       ("_cargs" ("_position" A) ("_position" a'))))
###                   ("_position" a) ("_position" a'))
###                 ("_Seq"
###                   ("_assign" ("_position" B)
###                     ("_applC" ("_position" B)
###                       ("_assign" ("_position" b)
###                         ("_applC" ("_position" Some) ("_position" a)))))
###                   ("_Seq"
###                     ("_assign_list" ("_position" A) ("_position" a')
###                       ("\<^const>Groups.plus_class.plus"
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a'))
###                         ("\<^const>Groups.one_class.one")))
###                     ("_assign" ("_position" as)
###                       ("\<^const>List.list.Cons" ("_position" a')
###                         ("_applC" ("_position" tl) ("_position" as))))))
###                 ("_assign_list" ("_position" A) ("_position" a)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("\<^const>List.nth" ("_position" A) ("_position" a))
###                     ("\<^const>Groups.one_class.one")))))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" matching)
###         ("_cargs" ("_position" A)
###           ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" stable)
###           ("_cargs" ("_position" A)
###             ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))
###         ("_applC" ("_position" opti\<^sub>a) ("_position" A))))))
### ("\<^const>HOL.Trueprop"
###   ("_hoare_vars_tc"
###     ("_idts" ("_position" A)
###       ("_idts" ("_position" B)
###         ("_idts" ("_position" a)
###           ("_idts" ("_position" a')
###             ("_idts" ("_position" as) ("_position" b))))))
###     ("\<^const>HOL.conj"
###       ("\<^const>HOL.eq" ("_position" as)
###         ("\<^const>List.upt" ("\<^const>Groups.zero_class.zero")
###           ("_position" n)))
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq" ("_position" A)
###           ("_applC" ("_position" replicate)
###             ("_cargs" ("_position" n) ("\<^const>Groups.zero_class.zero"))))
###         ("\<^const>HOL.eq" ("_position" B)
###           ("_lambda" ("_idtdummy") ("_position" None)))))
###     ("_While"
###       ("\<^const>HOL.not_equal" ("_position" as) ("\<^const>List.list.Nil"))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" invAM)
###           ("_cargs" ("_position" A)
###             ("\<^const>Groups.minus_class.minus"
###               ("\<^const>Gale_Shapley1.upt_set" ("_position" n))
###               ("_applC" ("_position" set) ("_position" as)))))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" invAB)
###             ("_cargs" ("_position" A)
###               ("_cargs" ("_position" B)
###                 ("\<^const>Groups.minus_class.minus"
###                   ("\<^const>Gale_Shapley1.upt_set" ("_position" n))
###                   ("_applC" ("_position" set) ("_position" as))))))
###           ("_applC" ("_position" invas) ("_position" as))))
###       ("_applC" ("_position" var)
###         ("_cargs" ("_position" A)
###           ("\<^const>Groups.minus_class.minus"
###             ("\<^const>Gale_Shapley1.upt_set" ("_position" n))
###             ("_applC" ("_position" set) ("_position" as)))))
###       ("_Seq"
###         ("_assign" ("_position" a)
###           ("_applC" ("_position" hd) ("_position" as)))
###         ("_Seq"
###           ("_assign" ("_position" b)
###             ("_applC" ("_position" match)
###               ("_cargs" ("_position" A) ("_position" a))))
###           ("_Cond"
###             ("\<^const>HOL.eq" ("_applC" ("_position" B) ("_position" b))
###               ("_position" None))
###             ("_Seq"
###               ("_assign" ("_position" B)
###                 ("_Update" ("_position" B)
###                   ("_updbind" ("_position" b)
###                     ("_applC" ("_position" Some) ("_position" a)))))
###               ("_assign" ("_position" as)
###                 ("_applC" ("_position" tl) ("_position" as))))
###             ("_Seq"
###               ("_assign" ("_position" a')
###                 ("_applC" ("_position" the)
###                   ("_applC" ("_position" B) ("_position" b))))
###               ("_Cond"
###                 ("\<^const>Gale_Shapley1.prefa"
###                   ("\<^const>List.nth" ("_position" P\<^sub>b)
###                     ("_applC" ("_position" match)
###                       ("_cargs" ("_position" A) ("_position" a'))))
###                   ("_position" a) ("_position" a'))
###                 ("_Seq"
###                   ("_assign" ("_position" B)
###                     ("_applC" ("_position" B)
###                       ("_assign" ("_position" b)
###                         ("_applC" ("_position" Some) ("_position" a)))))
###                   ("_Seq"
###                     ("_assign_list" ("_position" A) ("_position" a')
###                       ("\<^const>Groups.plus_class.plus"
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a'))
###                         ("\<^const>Groups.one_class.one")))
###                     ("_assign" ("_position" as)
###                       ("\<^const>List.list.Cons" ("_position" a')
###                         ("_applC" ("_position" tl) ("_position" as))))))
###                 ("_assign_list" ("_position" A) ("_position" a)
###                   ("\<^const>Groups.plus_class.plus"
###                     ("\<^const>List.nth" ("_position" A) ("_position" a))
###                     ("\<^const>Groups.one_class.one")))))))))
###     ("\<^const>HOL.conj"
###       ("_applC" ("_position" matching)
###         ("_cargs" ("_position" A)
###           ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" stable)
###           ("_cargs" ("_position" A)
###             ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))
###         ("_applC" ("_position" opti\<^sub>a) ("_position" A))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 1.095s elapsed time, 4.139s cpu time, 0.873s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 947 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>List.nth" ("_position" M) ("_position" b))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" B))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>Orderings.ord_class.less" ("_position" b)
###               ("_Seq" ("_applC" ("_position" length) ("_position" M))
###                 ("_position" n)))
###             ("_applC" ("_position" length) ("_position" M)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs"
###             ("_applC" ("_position" B)
###               ("_list" ("_assign" ("_position" b) ("_position" a))))
###             ("_LUpdate" ("_position" M)
###               ("_lupdbind" ("_position" b) ("_position" True))))))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" ran)
###           ("_applC" ("_position" \<alpha>)
###             ("_cargs" ("_position" B) ("_position" M))))
###         ("_Finset" ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>Orderings.ord_class.less"
###           ("_Seq" ("\<^const>List.nth" ("_position" M) ("_position" b))
###             ("_position" b))
###           ("_applC" ("_position" length) ("_position" B)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>Orderings.ord_class.less" ("_position" b)
###             ("_Seq" ("_applC" ("_position" length) ("_position" M))
###               ("_position" n)))
###           ("_applC" ("_position" length) ("_position" M))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs"
###             ("_applC" ("_position" B)
###               ("_list" ("_assign" ("_position" b) ("_position" a))))
###             ("_LUpdate" ("_position" M)
###               ("_lupdbind" ("_position" b) ("_position" True))))))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" ran)
###           ("_applC" ("_position" \<alpha>)
###             ("_cargs" ("_position" B) ("_position" M))))
###         ("_Finset" ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>List.nth" ("_position" M) ("_position" b))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" B))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" b)
###             ("_applC" ("_position" length) ("_position" M))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" length) ("_position" M))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs"
###             ("_applC" ("_position" B)
###               ("_list" ("_assign" ("_position" b) ("_position" a))))
###             ("_LUpdate" ("_position" M)
###               ("_lupdbind" ("_position" b) ("_position" True))))))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" ran)
###           ("_applC" ("_position" \<alpha>)
###             ("_cargs" ("_position" B) ("_position" M))))
###         ("_Finset" ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>Orderings.ord_class.less"
###           ("_Seq" ("\<^const>List.nth" ("_position" M) ("_position" b))
###             ("_position" b))
###           ("_applC" ("_position" length) ("_position" B)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" M))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" length) ("_position" M)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs"
###             ("_applC" ("_position" B)
###               ("_list" ("_assign" ("_position" b) ("_position" a))))
###             ("_LUpdate" ("_position" M)
###               ("_lupdbind" ("_position" b) ("_position" True))))))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" ran)
###           ("_applC" ("_position" \<alpha>)
###             ("_cargs" ("_position" B) ("_position" M))))
###         ("_Finset" ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>List.nth" ("_position" M) ("_position" b))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" B))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>Orderings.ord_class.less" ("_position" b)
###               ("_Seq" ("_applC" ("_position" length) ("_position" M))
###                 ("_position" n)))
###             ("_applC" ("_position" length) ("_position" M)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs"
###             ("_LUpdate" ("_position" B)
###               ("_lupdbind" ("_position" b) ("_position" a)))
###             ("_LUpdate" ("_position" M)
###               ("_lupdbind" ("_position" b) ("_position" True))))))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" ran)
###           ("_applC" ("_position" \<alpha>)
###             ("_cargs" ("_position" B) ("_position" M))))
###         ("_Finset" ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>Orderings.ord_class.less"
###           ("_Seq" ("\<^const>List.nth" ("_position" M) ("_position" b))
###             ("_position" b))
###           ("_applC" ("_position" length) ("_position" B)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>Orderings.ord_class.less" ("_position" b)
###             ("_Seq" ("_applC" ("_position" length) ("_position" M))
###               ("_position" n)))
###           ("_applC" ("_position" length) ("_position" M))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs"
###             ("_LUpdate" ("_position" B)
###               ("_lupdbind" ("_position" b) ("_position" a)))
###             ("_LUpdate" ("_position" M)
###               ("_lupdbind" ("_position" b) ("_position" True))))))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" ran)
###           ("_applC" ("_position" \<alpha>)
###             ("_cargs" ("_position" B) ("_position" M))))
###         ("_Finset" ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>List.nth" ("_position" M) ("_position" b))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" B))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" b)
###             ("_applC" ("_position" length) ("_position" M))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq" ("_position" n)
###               ("_applC" ("_position" length) ("_position" M))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs"
###             ("_LUpdate" ("_position" B)
###               ("_lupdbind" ("_position" b) ("_position" a)))
###             ("_LUpdate" ("_position" M)
###               ("_lupdbind" ("_position" b) ("_position" True))))))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" ran)
###           ("_applC" ("_position" \<alpha>)
###             ("_cargs" ("_position" B) ("_position" M))))
###         ("_Finset" ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>Orderings.ord_class.less"
###           ("_Seq" ("\<^const>List.nth" ("_position" M) ("_position" b))
###             ("_position" b))
###           ("_applC" ("_position" length) ("_position" B)))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" M))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_position" n)
###             ("_applC" ("_position" length) ("_position" M)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs"
###             ("_LUpdate" ("_position" B)
###               ("_lupdbind" ("_position" b) ("_position" a)))
###             ("_LUpdate" ("_position" M)
###               ("_lupdbind" ("_position" b) ("_position" True))))))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" ran)
###           ("_applC" ("_position" \<alpha>)
###             ("_cargs" ("_position" B) ("_position" M))))
###         ("_Finset" ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>List.nth" ("_position" M) ("_position" b))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" B))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>Orderings.ord_class.less" ("_position" b)
###               ("_Seq" ("_applC" ("_position" length) ("_position" M))
###                 ("_position" n)))
###             ("_applC" ("_position" length) ("_position" M)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs"
###             ("_applC" ("_position" B)
###               ("_list" ("_assign" ("_position" b) ("_position" a))))
###             ("_applC" ("_position" M)
###               ("_list" ("_assign" ("_position" b) ("_position" True)))))))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" ran)
###           ("_applC" ("_position" \<alpha>)
###             ("_cargs" ("_position" B) ("_position" M))))
###         ("_Finset" ("_position" a))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.Not"
###         ("\<^const>Orderings.ord_class.less"
###           ("_Seq" ("\<^const>List.nth" ("_position" M) ("_position" b))
###             ("_position" b))
###           ("_applC" ("_position" length) ("_position" B)))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>Orderings.ord_class.less" ("_position" b)
###             ("_Seq" ("_applC" ("_position" length) ("_position" M))
###               ("_position" n)))
###           ("_applC" ("_position" length) ("_position" M))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" ran)
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs"
###             ("_applC" ("_position" B)
###               ("_list" ("_assign" ("_position" b) ("_position" a))))
###             ("_applC" ("_position" M)
###               ("_list" ("_assign" ("_position" b) ("_position" True)))))))
###       ("\<^const>Set.union"
###         ("_applC" ("_position" ran)
###           ("_applC" ("_position" \<alpha>)
###             ("_cargs" ("_position" B) ("_position" M))))
###         ("_Finset" ("_position" a))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 951 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 16 parse trees (10 displayed):
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less"
###         ("_Seq" ("\<^const>List.nth" ("_position" M) ("_position" b))
###           ("_position" b))
###         ("_applC" ("_position" length) ("_position" B))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>Orderings.ord_class.less" ("_position" b)
###             ("_Seq" ("_applC" ("_position" length) ("_position" M))
###               ("_applC" ("_position" length) ("_position" M))))
###           ("_position" n)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" \<alpha>)
###         ("_cargs"
###           ("_LUpdate" ("_position" B)
###             ("_lupdbind" ("_position" b) ("_position" a)))
###           ("_position" M)))
###       ("_Update"
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs" ("_position" B) ("_position" M)))
###         ("_updbind" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>List.nth" ("_position" M) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" B))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>Orderings.ord_class.less" ("_position" b)
###               ("_Seq" ("_applC" ("_position" length) ("_position" M))
###                 ("_applC" ("_position" length) ("_position" M))))
###             ("_position" n))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" \<alpha>)
###         ("_cargs"
###           ("_LUpdate" ("_position" B)
###             ("_lupdbind" ("_position" b) ("_position" a)))
###           ("_position" M)))
###       ("_Update"
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs" ("_position" B) ("_position" M)))
###         ("_updbind" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less"
###         ("_Seq" ("\<^const>List.nth" ("_position" M) ("_position" b))
###           ("_position" b))
###         ("_applC" ("_position" length) ("_position" B))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" M))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" M))
###             ("_position" n))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" \<alpha>)
###         ("_cargs"
###           ("_LUpdate" ("_position" B)
###             ("_lupdbind" ("_position" b) ("_position" a)))
###           ("_position" M)))
###       ("_Update"
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs" ("_position" B) ("_position" M)))
###         ("_updbind" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>List.nth" ("_position" M) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" B))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" b)
###             ("_applC" ("_position" length) ("_position" M))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" length) ("_position" M))
###               ("_position" n)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" \<alpha>)
###         ("_cargs"
###           ("_LUpdate" ("_position" B)
###             ("_lupdbind" ("_position" b) ("_position" a)))
###           ("_position" M)))
###       ("_Update"
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs" ("_position" B) ("_position" M)))
###         ("_updbind" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less"
###         ("_Seq" ("\<^const>List.nth" ("_position" M) ("_position" b))
###           ("_position" b))
###         ("_applC" ("_position" length) ("_position" B))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>Orderings.ord_class.less" ("_position" b)
###             ("_Seq" ("_applC" ("_position" length) ("_position" M))
###               ("_applC" ("_position" length) ("_position" M))))
###           ("_position" n)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" \<alpha>)
###         ("_cargs"
###           ("_applC" ("_position" B)
###             ("_list" ("_assign" ("_position" b) ("_position" a))))
###           ("_position" M)))
###       ("_Update"
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs" ("_position" B) ("_position" M)))
###         ("_updbind" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>List.nth" ("_position" M) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" B))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>Orderings.ord_class.less" ("_position" b)
###               ("_Seq" ("_applC" ("_position" length) ("_position" M))
###                 ("_applC" ("_position" length) ("_position" M))))
###             ("_position" n))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" \<alpha>)
###         ("_cargs"
###           ("_applC" ("_position" B)
###             ("_list" ("_assign" ("_position" b) ("_position" a))))
###           ("_position" M)))
###       ("_Update"
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs" ("_position" B) ("_position" M)))
###         ("_updbind" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less"
###         ("_Seq" ("\<^const>List.nth" ("_position" M) ("_position" b))
###           ("_position" b))
###         ("_applC" ("_position" length) ("_position" B))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" M))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq" ("_applC" ("_position" length) ("_position" M))
###             ("_position" n))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" \<alpha>)
###         ("_cargs"
###           ("_applC" ("_position" B)
###             ("_list" ("_assign" ("_position" b) ("_position" a))))
###           ("_position" M)))
###       ("_Update"
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs" ("_position" B) ("_position" M)))
###         ("_updbind" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>List.nth" ("_position" M) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" B))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Orderings.ord_class.less" ("_position" b)
###             ("_applC" ("_position" length) ("_position" M))))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>HOL.eq"
###               ("_applC" ("_position" length) ("_position" M))
###               ("_position" n)))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" \<alpha>)
###         ("_cargs"
###           ("_applC" ("_position" B)
###             ("_list" ("_assign" ("_position" b) ("_position" a))))
###           ("_position" M)))
###       ("_Update"
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs" ("_position" B) ("_position" M)))
###         ("_updbind" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less"
###         ("_Seq" ("\<^const>List.nth" ("_position" M) ("_position" b))
###           ("_position" b))
###         ("_applC" ("_position" length) ("_position" B))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq"
###           ("\<^const>Orderings.ord_class.less" ("_position" b)
###             ("_Seq" ("_applC" ("_position" length) ("_position" M))
###               ("_applC" ("_position" length) ("_position" M))))
###           ("_position" n)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" \<alpha>)
###         ("_cargs"
###           ("_LUpdate" ("_position" B)
###             ("_lupdbind" ("_position" b) ("_position" a)))
###           ("_position" M)))
###       ("_applC"
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs" ("_position" B) ("_position" M)))
###         ("_assign" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" a)))))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>List.nth" ("_position" M) ("_position" b)))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Orderings.ord_class.less" ("_position" b)
###           ("_applC" ("_position" length) ("_position" B))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>HOL.eq"
###             ("\<^const>Orderings.ord_class.less" ("_position" b)
###               ("_Seq" ("_applC" ("_position" length) ("_position" M))
###                 ("_applC" ("_position" length) ("_position" M))))
###             ("_position" n))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" \<alpha>)
###         ("_cargs"
###           ("_LUpdate" ("_position" B)
###             ("_lupdbind" ("_position" b) ("_position" a)))
###           ("_position" M)))
###       ("_applC"
###         ("_applC" ("_position" \<alpha>)
###           ("_cargs" ("_position" B) ("_position" M)))
###         ("_assign" ("_position" b)
###           ("_applC" ("_position" Some) ("_position" a)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### Ambiguous input (line 1062 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" invar1)
###     ("_cargs" ("_position" A)
###       ("_cargs"
###         ("_LUpdate" ("_position" B)
###           ("_lupdbind" ("_position" b) ("_position" a)))
###         ("_cargs"
###           ("_LUpdate" ("_position" M)
###             ("_lupdbind" ("_position" b) ("_position" True)))
###           ("\<^const>Groups.plus_class.plus" ("_position" ai)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" invar1)
###     ("_cargs" ("_position" A)
###       ("_cargs"
###         ("_applC" ("_position" B)
###           ("_list" ("_assign" ("_position" b) ("_position" a))))
###         ("_cargs"
###           ("_LUpdate" ("_position" M)
###             ("_lupdbind" ("_position" b) ("_position" True)))
###           ("\<^const>Groups.plus_class.plus" ("_position" ai)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" invar1)
###     ("_cargs" ("_position" A)
###       ("_cargs"
###         ("_LUpdate" ("_position" B)
###           ("_lupdbind" ("_position" b) ("_position" a)))
###         ("_cargs"
###           ("_applC" ("_position" M)
###             ("_list" ("_assign" ("_position" b) ("_position" True))))
###           ("\<^const>Groups.plus_class.plus" ("_position" ai)
###             ("\<^const>Groups.one_class.one")))))))
### ("\<^const>HOL.Trueprop"
###   ("_applC" ("_position" invar1)
###     ("_cargs" ("_position" A)
###       ("_cargs"
###         ("_applC" ("_position" B)
###           ("_list" ("_assign" ("_position" b) ("_position" a))))
###         ("_cargs"
###           ("_applC" ("_position" M)
###             ("_list" ("_assign" ("_position" b) ("_position" True))))
###           ("\<^const>Groups.plus_class.plus" ("_position" ai)
###             ("\<^const>Groups.one_class.one")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1078 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" A2)
###     ("_LUpdate" ("_position" A)
###       ("_lupdbind" ("_position" a)
###         ("\<^const>Groups.plus_class.plus"
###           ("\<^const>List.nth" ("_position" A) ("_position" a))
###           ("\<^const>Groups.one_class.one"))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq" ("_position" A2)
###     ("_applC" ("_position" A)
###       ("_list"
###         ("_assign" ("_position" a)
###           ("\<^const>Groups.plus_class.plus"
###             ("\<^const>List.nth" ("_position" A) ("_position" a))
###             ("\<^const>Groups.one_class.one")))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1080 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less"
###         ("\<^const>List.nth" ("_position" r) ("_position" a))
###         ("\<^const>List.nth" ("_position" r) ("_position" a')))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" invar2)
###           ("_cargs" ("_position" A1)
###             ("_cargs"
###               ("_applC" ("_position" B)
###                 ("_list" ("_assign" ("_position" b) ("_position" a))))
###               ("_cargs" ("_position" M)
###                 ("_cargs" ("_position" ai) ("_position" a'))))))
###         ("\<^const>Orderings.ord_class.less"
###           ("_applC" ("_position" var)
###             ("_cargs" ("_position" A1)
###               ("\<^const>Gale_Shapley1.upt_set" ("_position" ai))))
###           ("_position" v))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.Not"
###         ("\<^const>Orderings.ord_class.less"
###           ("\<^const>List.nth" ("_position" r) ("_position" a))
###           ("\<^const>List.nth" ("_position" r) ("_position" a'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" invar2)
###           ("_cargs" ("_position" A2)
###             ("_cargs" ("_position" B)
###               ("_cargs" ("_position" M)
###                 ("_cargs" ("_position" ai) ("_position" a))))))
###         ("\<^const>Orderings.ord_class.less"
###           ("_applC" ("_position" var)
###             ("_cargs" ("_position" A2)
###               ("\<^const>Gale_Shapley1.upt_set" ("_position" ai))))
###           ("_position" v))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.conj"
###     ("\<^const>HOL.implies"
###       ("\<^const>Orderings.ord_class.less"
###         ("\<^const>List.nth" ("_position" r) ("_position" a))
###         ("\<^const>List.nth" ("_position" r) ("_position" a')))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" invar2)
###           ("_cargs" ("_position" A1)
###             ("_cargs"
###               ("_LUpdate" ("_position" B)
###                 ("_lupdbind" ("_position" b) ("_position" a)))
###               ("_cargs" ("_position" M)
###                 ("_cargs" ("_position" ai) ("_position" a'))))))
###         ("\<^const>Orderings.ord_class.less"
###           ("_applC" ("_position" var)
###             ("_cargs" ("_position" A1)
###               ("\<^const>Gale_Shapley1.upt_set" ("_position" ai))))
###           ("_position" v))))
###     ("\<^const>HOL.implies"
###       ("\<^const>HOL.Not"
###         ("\<^const>Orderings.ord_class.less"
###           ("\<^const>List.nth" ("_position" r) ("_position" a))
###           ("\<^const>List.nth" ("_position" r) ("_position" a'))))
###       ("\<^const>HOL.conj"
###         ("_applC" ("_position" invar2)
###           ("_cargs" ("_position" A2)
###             ("_cargs" ("_position" B)
###               ("_cargs" ("_position" M)
###                 ("_cargs" ("_position" ai) ("_position" a))))))
###         ("\<^const>Orderings.ord_class.less"
###           ("_applC" ("_position" var)
###             ("_cargs" ("_position" A2)
###               ("\<^const>Gale_Shapley1.upt_set" ("_position" ai))))
###           ("_position" v))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.175s elapsed time, 4.296s cpu time, 0.882s GC time
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 1185 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 16 parse trees (10 displayed):
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs_inner)
###       ("_cargs" ("_position" P\<^sub>a)
###         ("_cargs" ("_position" R) ("_position" M))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("\<^const>List.nth" ("_position" M) ("_position" b)))
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("_Let"
###             ("_binds"
###               ("_bind" ("_position" a')
###                 ("\<^const>List.nth" ("_position" B) ("_position" b)))
###               ("_bind" ("_position" r)
###                 ("\<^const>List.nth" ("_position" R)
###                   ("\<^const>List.nth"
###                     ("\<^const>List.nth" ("_position" P\<^sub>a)
###                       ("_position" a'))
###                     ("\<^const>List.nth" ("_position" A)
###                       ("_position" a'))))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B) ("_position" a)))
###                 ("\<^const>HOL.If"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>List.nth" ("_position" r) ("_position" a))
###                     ("\<^const>List.nth" ("_position" r) ("_position" a')))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a')
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a'))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args"
###                       ("_LUpdate" ("_position" B)
###                         ("_lupdbind" ("_position" b) ("_position" a)))
###                       ("_tuple_arg" ("_position" a'))))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" a))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg"
###                       ("\<^const>List.nth"
###                         ("\<^const>List.nth" ("_position" P\<^sub>a)
###                           ("_position" a))
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs_inner)
###       ("_cargs" ("_position" P\<^sub>a)
###         ("_cargs" ("_position" R) ("_position" M))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("\<^const>List.nth" ("_position" M) ("_position" b)))
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("_Let"
###             ("_bind" ("_position" a')
###               ("\<^const>HOL.eq"
###                 ("_Seq"
###                   ("\<^const>List.nth" ("_position" B) ("_position" b))
###                   ("_position" r))
###                 ("\<^const>List.nth" ("_position" R)
###                   ("\<^const>List.nth"
###                     ("\<^const>List.nth" ("_position" P\<^sub>a)
###                       ("_position" a'))
###                     ("\<^const>List.nth" ("_position" A)
###                       ("_position" a'))))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B) ("_position" a)))
###                 ("\<^const>HOL.If"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>List.nth" ("_position" r) ("_position" a))
###                     ("\<^const>List.nth" ("_position" r) ("_position" a')))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a')
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a'))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args"
###                       ("_LUpdate" ("_position" B)
###                         ("_lupdbind" ("_position" b) ("_position" a)))
###                       ("_tuple_arg" ("_position" a'))))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" a))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg"
###                       ("\<^const>List.nth"
###                         ("\<^const>List.nth" ("_position" P\<^sub>a)
###                           ("_position" a))
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs_inner)
###       ("_cargs" ("_position" P\<^sub>a)
###         ("_cargs" ("_position" R) ("_position" M))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("\<^const>List.nth" ("_position" M) ("_position" b)))
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("_Let"
###             ("_binds"
###               ("_bind" ("_position" a')
###                 ("\<^const>List.nth" ("_position" B) ("_position" b)))
###               ("_bind" ("_position" r)
###                 ("\<^const>List.nth" ("_position" R)
###                   ("\<^const>List.nth"
###                     ("\<^const>List.nth" ("_position" P\<^sub>a)
###                       ("_position" a'))
###                     ("\<^const>List.nth" ("_position" A)
###                       ("_position" a'))))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B) ("_position" a)))
###                 ("\<^const>HOL.If"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>List.nth" ("_position" r) ("_position" a))
###                     ("\<^const>List.nth" ("_position" r) ("_position" a')))
###                   ("_tuple"
###                     ("_applC" ("_position" A)
###                       ("_list"
###                         ("_assign" ("_position" a')
###                           ("\<^const>Groups.plus_class.plus"
###                             ("\<^const>List.nth" ("_position" A)
###                               ("_position" a'))
###                             ("\<^const>Groups.one_class.one")))))
###                     ("_tuple_args"
###                       ("_LUpdate" ("_position" B)
###                         ("_lupdbind" ("_position" b) ("_position" a)))
###                       ("_tuple_arg" ("_position" a'))))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" a))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg"
###                       ("\<^const>List.nth"
###                         ("\<^const>List.nth" ("_position" P\<^sub>a)
###                           ("_position" a))
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs_inner)
###       ("_cargs" ("_position" P\<^sub>a)
###         ("_cargs" ("_position" R) ("_position" M))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("\<^const>List.nth" ("_position" M) ("_position" b)))
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("_Let"
###             ("_bind" ("_position" a')
###               ("\<^const>HOL.eq"
###                 ("_Seq"
###                   ("\<^const>List.nth" ("_position" B) ("_position" b))
###                   ("_position" r))
###                 ("\<^const>List.nth" ("_position" R)
###                   ("\<^const>List.nth"
###                     ("\<^const>List.nth" ("_position" P\<^sub>a)
###                       ("_position" a'))
###                     ("\<^const>List.nth" ("_position" A)
###                       ("_position" a'))))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B) ("_position" a)))
###                 ("\<^const>HOL.If"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>List.nth" ("_position" r) ("_position" a))
###                     ("\<^const>List.nth" ("_position" r) ("_position" a')))
###                   ("_tuple"
###                     ("_applC" ("_position" A)
###                       ("_list"
###                         ("_assign" ("_position" a')
###                           ("\<^const>Groups.plus_class.plus"
###                             ("\<^const>List.nth" ("_position" A)
###                               ("_position" a'))
###                             ("\<^const>Groups.one_class.one")))))
###                     ("_tuple_args"
###                       ("_LUpdate" ("_position" B)
###                         ("_lupdbind" ("_position" b) ("_position" a)))
###                       ("_tuple_arg" ("_position" a'))))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" a))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg"
###                       ("\<^const>List.nth"
###                         ("\<^const>List.nth" ("_position" P\<^sub>a)
###                           ("_position" a))
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs_inner)
###       ("_cargs" ("_position" P\<^sub>a)
###         ("_cargs" ("_position" R) ("_position" M))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("\<^const>List.nth" ("_position" M) ("_position" b)))
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("_Let"
###             ("_binds"
###               ("_bind" ("_position" a')
###                 ("\<^const>List.nth" ("_position" B) ("_position" b)))
###               ("_bind" ("_position" r)
###                 ("\<^const>List.nth" ("_position" R)
###                   ("\<^const>List.nth"
###                     ("\<^const>List.nth" ("_position" P\<^sub>a)
###                       ("_position" a'))
###                     ("\<^const>List.nth" ("_position" A)
###                       ("_position" a'))))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B) ("_position" a)))
###                 ("\<^const>HOL.If"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>List.nth" ("_position" r) ("_position" a))
###                     ("\<^const>List.nth" ("_position" r) ("_position" a')))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a')
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a'))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args"
###                       ("_applC" ("_position" B)
###                         ("_list"
###                           ("_assign" ("_position" b) ("_position" a))))
###                       ("_tuple_arg" ("_position" a'))))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" a))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg"
###                       ("\<^const>List.nth"
###                         ("\<^const>List.nth" ("_position" P\<^sub>a)
###                           ("_position" a))
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs_inner)
###       ("_cargs" ("_position" P\<^sub>a)
###         ("_cargs" ("_position" R) ("_position" M))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("\<^const>List.nth" ("_position" M) ("_position" b)))
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("_Let"
###             ("_bind" ("_position" a')
###               ("\<^const>HOL.eq"
###                 ("_Seq"
###                   ("\<^const>List.nth" ("_position" B) ("_position" b))
###                   ("_position" r))
###                 ("\<^const>List.nth" ("_position" R)
###                   ("\<^const>List.nth"
###                     ("\<^const>List.nth" ("_position" P\<^sub>a)
###                       ("_position" a'))
###                     ("\<^const>List.nth" ("_position" A)
###                       ("_position" a'))))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B) ("_position" a)))
###                 ("\<^const>HOL.If"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>List.nth" ("_position" r) ("_position" a))
###                     ("\<^const>List.nth" ("_position" r) ("_position" a')))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a')
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a'))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args"
###                       ("_applC" ("_position" B)
###                         ("_list"
###                           ("_assign" ("_position" b) ("_position" a))))
###                       ("_tuple_arg" ("_position" a'))))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" a))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg"
###                       ("\<^const>List.nth"
###                         ("\<^const>List.nth" ("_position" P\<^sub>a)
###                           ("_position" a))
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs_inner)
###       ("_cargs" ("_position" P\<^sub>a)
###         ("_cargs" ("_position" R) ("_position" M))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("\<^const>List.nth" ("_position" M) ("_position" b)))
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("_Let"
###             ("_binds"
###               ("_bind" ("_position" a')
###                 ("\<^const>List.nth" ("_position" B) ("_position" b)))
###               ("_bind" ("_position" r)
###                 ("\<^const>List.nth" ("_position" R)
###                   ("\<^const>List.nth"
###                     ("\<^const>List.nth" ("_position" P\<^sub>a)
###                       ("_position" a'))
###                     ("\<^const>List.nth" ("_position" A)
###                       ("_position" a'))))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B) ("_position" a)))
###                 ("\<^const>HOL.If"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>List.nth" ("_position" r) ("_position" a))
###                     ("\<^const>List.nth" ("_position" r) ("_position" a')))
###                   ("_tuple"
###                     ("_applC" ("_position" A)
###                       ("_list"
###                         ("_assign" ("_position" a')
###                           ("\<^const>Groups.plus_class.plus"
###                             ("\<^const>List.nth" ("_position" A)
###                               ("_position" a'))
###                             ("\<^const>Groups.one_class.one")))))
###                     ("_tuple_args"
###                       ("_applC" ("_position" B)
###                         ("_list"
###                           ("_assign" ("_position" b) ("_position" a))))
###                       ("_tuple_arg" ("_position" a'))))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" a))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg"
###                       ("\<^const>List.nth"
###                         ("\<^const>List.nth" ("_position" P\<^sub>a)
###                           ("_position" a))
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs_inner)
###       ("_cargs" ("_position" P\<^sub>a)
###         ("_cargs" ("_position" R) ("_position" M))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("\<^const>List.nth" ("_position" M) ("_position" b)))
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("_Let"
###             ("_bind" ("_position" a')
###               ("\<^const>HOL.eq"
###                 ("_Seq"
###                   ("\<^const>List.nth" ("_position" B) ("_position" b))
###                   ("_position" r))
###                 ("\<^const>List.nth" ("_position" R)
###                   ("\<^const>List.nth"
###                     ("\<^const>List.nth" ("_position" P\<^sub>a)
###                       ("_position" a'))
###                     ("\<^const>List.nth" ("_position" A)
###                       ("_position" a'))))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B) ("_position" a)))
###                 ("\<^const>HOL.If"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>List.nth" ("_position" r) ("_position" a))
###                     ("\<^const>List.nth" ("_position" r) ("_position" a')))
###                   ("_tuple"
###                     ("_applC" ("_position" A)
###                       ("_list"
###                         ("_assign" ("_position" a')
###                           ("\<^const>Groups.plus_class.plus"
###                             ("\<^const>List.nth" ("_position" A)
###                               ("_position" a'))
###                             ("\<^const>Groups.one_class.one")))))
###                     ("_tuple_args"
###                       ("_applC" ("_position" B)
###                         ("_list"
###                           ("_assign" ("_position" b) ("_position" a))))
###                       ("_tuple_arg" ("_position" a'))))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a)
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" a))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg"
###                       ("\<^const>List.nth"
###                         ("\<^const>List.nth" ("_position" P\<^sub>a)
###                           ("_position" a))
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs_inner)
###       ("_cargs" ("_position" P\<^sub>a)
###         ("_cargs" ("_position" R) ("_position" M))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("\<^const>List.nth" ("_position" M) ("_position" b)))
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("_Let"
###             ("_binds"
###               ("_bind" ("_position" a')
###                 ("\<^const>List.nth" ("_position" B) ("_position" b)))
###               ("_bind" ("_position" r)
###                 ("\<^const>List.nth" ("_position" R)
###                   ("\<^const>List.nth"
###                     ("\<^const>List.nth" ("_position" P\<^sub>a)
###                       ("_position" a'))
###                     ("\<^const>List.nth" ("_position" A)
###                       ("_position" a'))))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B) ("_position" a)))
###                 ("\<^const>HOL.If"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>List.nth" ("_position" r) ("_position" a))
###                     ("\<^const>List.nth" ("_position" r) ("_position" a')))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a')
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a'))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args"
###                       ("_LUpdate" ("_position" B)
###                         ("_lupdbind" ("_position" b) ("_position" a)))
###                       ("_tuple_arg" ("_position" a'))))
###                   ("_tuple"
###                     ("_applC" ("_position" A)
###                       ("_list"
###                         ("_assign" ("_position" a)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("\<^const>List.nth" ("_position" A)
###                               ("_position" a))
###                             ("\<^const>Groups.one_class.one")))))
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" a))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg"
###                       ("\<^const>List.nth"
###                         ("\<^const>List.nth" ("_position" P\<^sub>a)
###                           ("_position" a))
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs_inner)
###       ("_cargs" ("_position" P\<^sub>a)
###         ("_cargs" ("_position" R) ("_position" M))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("\<^const>List.nth" ("_position" M) ("_position" b)))
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("_Let"
###             ("_bind" ("_position" a')
###               ("\<^const>HOL.eq"
###                 ("_Seq"
###                   ("\<^const>List.nth" ("_position" B) ("_position" b))
###                   ("_position" r))
###                 ("\<^const>List.nth" ("_position" R)
###                   ("\<^const>List.nth"
###                     ("\<^const>List.nth" ("_position" P\<^sub>a)
###                       ("_position" a'))
###                     ("\<^const>List.nth" ("_position" A)
###                       ("_position" a'))))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B) ("_position" a)))
###                 ("\<^const>HOL.If"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>List.nth" ("_position" r) ("_position" a))
###                     ("\<^const>List.nth" ("_position" r) ("_position" a')))
###                   ("_tuple"
###                     ("_LUpdate" ("_position" A)
###                       ("_lupdbind" ("_position" a')
###                         ("\<^const>Groups.plus_class.plus"
###                           ("\<^const>List.nth" ("_position" A)
###                             ("_position" a'))
###                           ("\<^const>Groups.one_class.one"))))
###                     ("_tuple_args"
###                       ("_LUpdate" ("_position" B)
###                         ("_lupdbind" ("_position" b) ("_position" a)))
###                       ("_tuple_arg" ("_position" a'))))
###                   ("_tuple"
###                     ("_applC" ("_position" A)
###                       ("_list"
###                         ("_assign" ("_position" a)
###                           ("\<^const>Groups.plus_class.plus"
###                             ("\<^const>List.nth" ("_position" A)
###                               ("_position" a))
###                             ("\<^const>Groups.one_class.one")))))
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" a))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg"
###                       ("\<^const>List.nth"
###                         ("\<^const>List.nth" ("_position" P\<^sub>a)
###                           ("_position" a))
###                         ("\<^const>List.nth" ("_position" A)
###                           ("_position" a))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1197 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" P\<^sub>a) ("_position" R))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" M) ("_position" ai))))
###           ("\<^const>Orderings.ord_class.less" ("_position" ai)
###             ("_position" n)))
###         ("_cargs"
###           ("_lambda"
###             ("_pattern" ("_position" A)
###               ("_patterns" ("_position" B)
###                 ("_patterns" ("_position" M) ("_position" ai))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B)
###                     ("_patterns" ("_position" a) ("_position" b))))
###                 ("_applC" ("_position" gs_inner)
###                   ("_cargs" ("_position" P\<^sub>a)
###                     ("_cargs" ("_position" R)
###                       ("_cargs" ("_position" M)
###                         ("_tuple" ("_position" A)
###                           ("_tuple_args" ("_position" B)
###                             ("_tuple_args" ("_position" ai)
###                               ("_tuple_arg"
###                                 ("\<^const>List.nth"
###                                   ("\<^const>List.nth"
###                                     ("_position" P\<^sub>a)
###                                     ("_position" ai))
###                                   ("\<^const>List.nth" ("_position" A)
###                                     ("_position" ai))))))))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args"
###                   ("_applC" ("_position" B)
###                     ("_list" ("_assign" ("_position" b) ("_position" a))))
###                   ("_tuple_args"
###                     ("_applC" ("_position" M)
###                       ("_list"
###                         ("_assign" ("_position" b) ("_position" True))))
###                     ("_tuple_arg"
###                       ("\<^const>Groups.plus_class.plus" ("_position" ai)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("_tuple"
###             ("_applC" ("_position" replicate)
###               ("_cargs" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_tuple_args"
###               ("_applC" ("_position" replicate)
###                 ("_cargs" ("_position" n)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_args"
###                 ("_applC" ("_position" replicate)
###                   ("_cargs" ("_position" n) ("_position" False)))
###                 ("_tuple_arg" ("\<^const>Groups.zero_class.zero"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" P\<^sub>a) ("_position" R))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" M) ("_position" ai))))
###           ("\<^const>Orderings.ord_class.less" ("_position" ai)
###             ("_position" n)))
###         ("_cargs"
###           ("_lambda"
###             ("_pattern" ("_position" A)
###               ("_patterns" ("_position" B)
###                 ("_patterns" ("_position" M) ("_position" ai))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B)
###                     ("_patterns" ("_position" a) ("_position" b))))
###                 ("_applC" ("_position" gs_inner)
###                   ("_cargs" ("_position" P\<^sub>a)
###                     ("_cargs" ("_position" R)
###                       ("_cargs" ("_position" M)
###                         ("_tuple" ("_position" A)
###                           ("_tuple_args" ("_position" B)
###                             ("_tuple_args" ("_position" ai)
###                               ("_tuple_arg"
###                                 ("\<^const>List.nth"
###                                   ("\<^const>List.nth"
###                                     ("_position" P\<^sub>a)
###                                     ("_position" ai))
###                                   ("\<^const>List.nth" ("_position" A)
###                                     ("_position" ai))))))))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args"
###                   ("_LUpdate" ("_position" B)
###                     ("_lupdbind" ("_position" b) ("_position" a)))
###                   ("_tuple_args"
###                     ("_applC" ("_position" M)
###                       ("_list"
###                         ("_assign" ("_position" b) ("_position" True))))
###                     ("_tuple_arg"
###                       ("\<^const>Groups.plus_class.plus" ("_position" ai)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("_tuple"
###             ("_applC" ("_position" replicate)
###               ("_cargs" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_tuple_args"
###               ("_applC" ("_position" replicate)
###                 ("_cargs" ("_position" n)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_args"
###                 ("_applC" ("_position" replicate)
###                   ("_cargs" ("_position" n) ("_position" False)))
###                 ("_tuple_arg" ("\<^const>Groups.zero_class.zero"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" P\<^sub>a) ("_position" R))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" M) ("_position" ai))))
###           ("\<^const>Orderings.ord_class.less" ("_position" ai)
###             ("_position" n)))
###         ("_cargs"
###           ("_lambda"
###             ("_pattern" ("_position" A)
###               ("_patterns" ("_position" B)
###                 ("_patterns" ("_position" M) ("_position" ai))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B)
###                     ("_patterns" ("_position" a) ("_position" b))))
###                 ("_applC" ("_position" gs_inner)
###                   ("_cargs" ("_position" P\<^sub>a)
###                     ("_cargs" ("_position" R)
###                       ("_cargs" ("_position" M)
###                         ("_tuple" ("_position" A)
###                           ("_tuple_args" ("_position" B)
###                             ("_tuple_args" ("_position" ai)
###                               ("_tuple_arg"
###                                 ("\<^const>List.nth"
###                                   ("\<^const>List.nth"
###                                     ("_position" P\<^sub>a)
###                                     ("_position" ai))
###                                   ("\<^const>List.nth" ("_position" A)
###                                     ("_position" ai))))))))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args"
###                   ("_applC" ("_position" B)
###                     ("_list" ("_assign" ("_position" b) ("_position" a))))
###                   ("_tuple_args"
###                     ("_LUpdate" ("_position" M)
###                       ("_lupdbind" ("_position" b) ("_position" True)))
###                     ("_tuple_arg"
###                       ("\<^const>Groups.plus_class.plus" ("_position" ai)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("_tuple"
###             ("_applC" ("_position" replicate)
###               ("_cargs" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_tuple_args"
###               ("_applC" ("_position" replicate)
###                 ("_cargs" ("_position" n)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_args"
###                 ("_applC" ("_position" replicate)
###                   ("_cargs" ("_position" n) ("_position" False)))
###                 ("_tuple_arg" ("\<^const>Groups.zero_class.zero"))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs)
###       ("_cargs" ("_position" n)
###         ("_cargs" ("_position" P\<^sub>a) ("_position" R))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" M) ("_position" ai))))
###           ("\<^const>Orderings.ord_class.less" ("_position" ai)
###             ("_position" n)))
###         ("_cargs"
###           ("_lambda"
###             ("_pattern" ("_position" A)
###               ("_patterns" ("_position" B)
###                 ("_patterns" ("_position" M) ("_position" ai))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B)
###                     ("_patterns" ("_position" a) ("_position" b))))
###                 ("_applC" ("_position" gs_inner)
###                   ("_cargs" ("_position" P\<^sub>a)
###                     ("_cargs" ("_position" R)
###                       ("_cargs" ("_position" M)
###                         ("_tuple" ("_position" A)
###                           ("_tuple_args" ("_position" B)
###                             ("_tuple_args" ("_position" ai)
###                               ("_tuple_arg"
###                                 ("\<^const>List.nth"
###                                   ("\<^const>List.nth"
###                                     ("_position" P\<^sub>a)
###                                     ("_position" ai))
###                                   ("\<^const>List.nth" ("_position" A)
###                                     ("_position" ai))))))))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args"
###                   ("_LUpdate" ("_position" B)
###                     ("_lupdbind" ("_position" b) ("_position" a)))
###                   ("_tuple_args"
###                     ("_LUpdate" ("_position" M)
###                       ("_lupdbind" ("_position" b) ("_position" True)))
###                     ("_tuple_arg"
###                       ("\<^const>Groups.plus_class.plus" ("_position" ai)
###                         ("\<^const>Groups.one_class.one"))))))))
###           ("_tuple"
###             ("_applC" ("_position" replicate)
###               ("_cargs" ("_position" n)
###                 ("\<^const>Groups.zero_class.zero")))
###             ("_tuple_args"
###               ("_applC" ("_position" replicate)
###                 ("_cargs" ("_position" n)
###                   ("\<^const>Groups.zero_class.zero")))
###               ("_tuple_args"
###                 ("_applC" ("_position" replicate)
###                   ("_cargs" ("_position" n) ("_position" False)))
###                 ("_tuple_arg" ("\<^const>Groups.zero_class.zero"))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
locale Pref
  fixes n :: "nat"
    and P\<^sub>a :: "nat list list"
    and P\<^sub>b :: "nat list list"
  assumes "Pref P\<^sub>a P\<^sub>b"
  defines "n == length P\<^sub>a"
### Ambiguous input (line 1210 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" gs_inner)
###         ("_cargs" ("_position" P\<^sub>a)
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" M)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg" ("_position" b)))))))))
###       ("_tuple" ("_position" A')
###         ("_tuple_args" ("_position" B')
###           ("_tuple_args" ("_position" a')
###             ("_tuple_arg" ("_position" b'))))))
###     ("_applC" ("_position" invar1)
###       ("_cargs" ("_position" A')
###         ("_cargs"
###           ("_LUpdate" ("_position" B')
###             ("_lupdbind" ("_position" b') ("_position" a')))
###           ("_cargs"
###             ("_LUpdate" ("_position" M)
###               ("_lupdbind" ("_position" b') ("_position" True)))
###             ("\<^const>Groups.plus_class.plus" ("_position" ai)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" gs_inner)
###         ("_cargs" ("_position" P\<^sub>a)
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" M)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg" ("_position" b)))))))))
###       ("_tuple" ("_position" A')
###         ("_tuple_args" ("_position" B')
###           ("_tuple_args" ("_position" a')
###             ("_tuple_arg" ("_position" b'))))))
###     ("_applC" ("_position" invar1)
###       ("_cargs" ("_position" A')
###         ("_cargs"
###           ("_applC" ("_position" B')
###             ("_list" ("_assign" ("_position" b') ("_position" a'))))
###           ("_cargs"
###             ("_LUpdate" ("_position" M)
###               ("_lupdbind" ("_position" b') ("_position" True)))
###             ("\<^const>Groups.plus_class.plus" ("_position" ai)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" gs_inner)
###         ("_cargs" ("_position" P\<^sub>a)
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" M)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg" ("_position" b)))))))))
###       ("_tuple" ("_position" A')
###         ("_tuple_args" ("_position" B')
###           ("_tuple_args" ("_position" a')
###             ("_tuple_arg" ("_position" b'))))))
###     ("_applC" ("_position" invar1)
###       ("_cargs" ("_position" A')
###         ("_cargs"
###           ("_LUpdate" ("_position" B')
###             ("_lupdbind" ("_position" b') ("_position" a')))
###           ("_cargs"
###             ("_applC" ("_position" M)
###               ("_list" ("_assign" ("_position" b') ("_position" True))))
###             ("\<^const>Groups.plus_class.plus" ("_position" ai)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" gs_inner)
###         ("_cargs" ("_position" P\<^sub>a)
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" M)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg" ("_position" b)))))))))
###       ("_tuple" ("_position" A')
###         ("_tuple_args" ("_position" B')
###           ("_tuple_args" ("_position" a')
###             ("_tuple_arg" ("_position" b'))))))
###     ("_applC" ("_position" invar1)
###       ("_cargs" ("_position" A')
###         ("_cargs"
###           ("_applC" ("_position" B')
###             ("_list" ("_assign" ("_position" b') ("_position" a'))))
###           ("_cargs"
###             ("_applC" ("_position" M)
###               ("_list" ("_assign" ("_position" b') ("_position" True))))
###             ("\<^const>Groups.plus_class.plus" ("_position" ai)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 1274 of "$AFP/Gale_Shapley/Gale_Shapley1.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Pref)
###         ("_cargs" ("_position" P\<^sub>a) ("_position" P\<^sub>b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" length) ("_position" P\<^sub>a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" A)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Gale_Shapley)
###             ("_cargs" ("_position" P\<^sub>a) ("_position" P\<^sub>b)))
###           ("_applC" ("_position" Some) ("_position" A)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" Pref.matching)
###             ("_cargs" ("_position" P\<^sub>a)
###               ("_cargs" ("_position" A)
###                 ("\<^const>Gale_Shapley1.upt_set" ("_position" n)))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" Pref.stable)
###               ("_cargs" ("_position" P\<^sub>a)
###                 ("_cargs" ("_position" P\<^sub>b)
###                   ("_cargs" ("_position" A)
###                     ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))))
###             ("_applC" ("_position" Pref.opti\<^sub>a)
###               ("_cargs" ("_position" P\<^sub>a)
###                 ("_cargs" ("_position" P\<^sub>b) ("_position" A))))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_Seq"
###           ("_applC" ("_position" Pref)
###             ("_cargs" ("_position" P\<^sub>a) ("_position" P\<^sub>b)))
###           ("_position" n))
###         ("_applC" ("_position" length) ("_position" P\<^sub>a)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" A)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Gale_Shapley)
###             ("_cargs" ("_position" P\<^sub>a) ("_position" P\<^sub>b)))
###           ("_applC" ("_position" Some) ("_position" A)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" Pref.matching)
###             ("_cargs" ("_position" P\<^sub>a)
###               ("_cargs" ("_position" A)
###                 ("\<^const>Gale_Shapley1.upt_set" ("_position" n)))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" Pref.stable)
###               ("_cargs" ("_position" P\<^sub>a)
###                 ("_cargs" ("_position" P\<^sub>b)
###                   ("_cargs" ("_position" A)
###                     ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))))
###             ("_applC" ("_position" Pref.opti\<^sub>a)
###               ("_cargs" ("_position" P\<^sub>a)
###                 ("_cargs" ("_position" P\<^sub>b) ("_position" A))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "size <*mlex*> {}"
### theory "Draft.Gale_Shapley1"
### 1.556s elapsed time, 5.490s cpu time, 0.959s GC time
Loading theory "Draft.Gale_Shapley2" (required by "Draft.Gale_Shapley2Templates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
locale Pref
  fixes n :: "nat"
    and P\<^sub>a :: "nat list list"
    and P\<^sub>b :: "nat list list"
  assumes "Pref P\<^sub>a P\<^sub>b"
  defines "n == length P\<^sub>a"
Found termination order: "size <*mlex*> {}"
### Ambiguous input (line 93 of "$AFP/Gale_Shapley/Gale_Shapley2.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs_inner)
###       ("_cargs" ("_position" P\<^sub>a)
###         ("_cargs" ("_position" R) ("_position" M))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("\<^const>Diff_Array.array_get" ("_position" M) ("_position" b)))
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("_Let"
###             ("_binds"
###               ("_bind" ("_position" a')
###                 ("\<^const>Diff_Array.array_get" ("_position" B)
###                   ("_position" b)))
###               ("_bind" ("_position" r)
###                 ("\<^const>Diff_Array.array_get" ("_position" R)
###                   ("\<^const>Diff_Array.array_get"
###                     ("\<^const>Diff_Array.array_get" ("_position" P\<^sub>a)
###                       ("_position" a'))
###                     ("\<^const>Diff_Array.array_get" ("_position" A)
###                       ("_position" a'))))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B) ("_position" a)))
###                 ("\<^const>HOL.If"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>Diff_Array.array_get" ("_position" r)
###                       ("_position" a))
###                     ("\<^const>Diff_Array.array_get" ("_position" r)
###                       ("_position" a')))
###                   ("_tuple"
###                     ("\<^const>Diff_Array.array_set" ("_position" A)
###                       ("_position" a')
###                       ("\<^const>Groups.plus_class.plus"
###                         ("\<^const>Diff_Array.array_get" ("_position" A)
###                           ("_position" a'))
###                         ("\<^const>Groups.one_class.one")))
###                     ("_tuple_args"
###                       ("\<^const>Diff_Array.array_set" ("_position" B)
###                         ("_position" b) ("_position" a))
###                       ("_tuple_arg" ("_position" a'))))
###                   ("_tuple"
###                     ("\<^const>Diff_Array.array_set" ("_position" A)
###                       ("_position" a)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("\<^const>Diff_Array.array_get" ("_position" A)
###                           ("_position" a))
###                         ("\<^const>Groups.one_class.one")))
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" a))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg"
###                       ("\<^const>Diff_Array.array_get"
###                         ("\<^const>Diff_Array.array_get"
###                           ("_position" P\<^sub>a) ("_position" a))
###                         ("\<^const>Diff_Array.array_get" ("_position" A)
###                           ("_position" a))))))))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.eq"
###     ("_applC" ("_position" gs_inner)
###       ("_cargs" ("_position" P\<^sub>a)
###         ("_cargs" ("_position" R) ("_position" M))))
###     ("_applC" ("_position" while)
###       ("_cargs"
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("\<^const>Diff_Array.array_get" ("_position" M) ("_position" b)))
###         ("_lambda"
###           ("_pattern" ("_position" A)
###             ("_patterns" ("_position" B)
###               ("_patterns" ("_position" a) ("_position" b))))
###           ("_Let"
###             ("_bind" ("_position" a')
###               ("\<^const>HOL.eq"
###                 ("_Seq"
###                   ("\<^const>Diff_Array.array_get" ("_position" B)
###                     ("_position" b))
###                   ("_position" r))
###                 ("\<^const>Diff_Array.array_get" ("_position" R)
###                   ("\<^const>Diff_Array.array_get"
###                     ("\<^const>Diff_Array.array_get" ("_position" P\<^sub>a)
###                       ("_position" a'))
###                     ("\<^const>Diff_Array.array_get" ("_position" A)
###                       ("_position" a'))))))
###             ("_Let"
###               ("_bind"
###                 ("_pattern" ("_position" A)
###                   ("_patterns" ("_position" B) ("_position" a)))
###                 ("\<^const>HOL.If"
###                   ("\<^const>Orderings.ord_class.less"
###                     ("\<^const>Diff_Array.array_get" ("_position" r)
###                       ("_position" a))
###                     ("\<^const>Diff_Array.array_get" ("_position" r)
###                       ("_position" a')))
###                   ("_tuple"
###                     ("\<^const>Diff_Array.array_set" ("_position" A)
###                       ("_position" a')
###                       ("\<^const>Groups.plus_class.plus"
###                         ("\<^const>Diff_Array.array_get" ("_position" A)
###                           ("_position" a'))
###                         ("\<^const>Groups.one_class.one")))
###                     ("_tuple_args"
###                       ("\<^const>Diff_Array.array_set" ("_position" B)
###                         ("_position" b) ("_position" a))
###                       ("_tuple_arg" ("_position" a'))))
###                   ("_tuple"
###                     ("\<^const>Diff_Array.array_set" ("_position" A)
###                       ("_position" a)
###                       ("\<^const>Groups.plus_class.plus"
###                         ("\<^const>Diff_Array.array_get" ("_position" A)
###                           ("_position" a))
###                         ("\<^const>Groups.one_class.one")))
###                     ("_tuple_args" ("_position" B)
###                       ("_tuple_arg" ("_position" a))))))
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg"
###                       ("\<^const>Diff_Array.array_get"
###                         ("\<^const>Diff_Array.array_get"
###                           ("_position" P\<^sub>a) ("_position" a))
###                         ("\<^const>Diff_Array.array_get" ("_position" A)
###                           ("_position" a))))))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
Found termination order: "(%p. size_list size (snd (snd p))) <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.136s elapsed time, 6.994s cpu time, 1.141s GC time
Loading theory "Draft.Templates" (required by "Draft.Gale_Shapley2Templates" via "Draft.ExtrEqs")
### Ambiguous input (line 132 of "$AFP/Gale_Shapley/Gale_Shapley2.thy") produces 3 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("_applC" ("_position" length) ("_position" P))
###         ("_applC" ("_position" array_length) ("_position" rs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" i)
###           ("_Seq" ("_applC" ("_position" set) ("_position" P))
###             ("_applC" ("_position" distinct) ("_position" P)))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_applC" ("_position" set) ("_position" P))
###             ("\<^const>Gale_Shapley1.upt_set"
###               ("_applC" ("_position" array_length) ("_position" rs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Diff_Array.array_get"
###         ("_applC" ("_position" rk_of_pref)
###           ("_cargs" ("_position" r)
###             ("_cargs" ("_position" rs) ("_position" P))))
###         ("_position" i))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" index)
###           ("_cargs" ("_position" P) ("_position" i)))
###         ("_position" r)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("_applC" ("_position" length) ("_position" P))
###         ("_applC" ("_position" array_length) ("_position" rs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" i)
###           ("_applC" ("_position" set) ("_position" P))))
###       ("_asms"
###         ("\<^const>HOL.Trueprop"
###           ("_applC" ("_position" distinct) ("_position" P)))
###         ("_asm"
###           ("\<^const>HOL.Trueprop"
###             ("\<^const>Set.subset_eq"
###               ("_applC" ("_position" set) ("_position" P))
###               ("\<^const>Gale_Shapley1.upt_set"
###                 ("_applC" ("_position" array_length)
###                   ("_position" rs)))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Diff_Array.array_get"
###         ("_applC" ("_position" rk_of_pref)
###           ("_cargs" ("_position" r)
###             ("_cargs" ("_position" rs) ("_position" P))))
###         ("_position" i))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" index)
###           ("_cargs" ("_position" P) ("_position" i)))
###         ("_position" r)))))
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>Orderings.ord_class.less_eq"
###         ("_applC" ("_position" length) ("_position" P))
###         ("_applC" ("_position" array_length) ("_position" rs))))
###     ("_asms"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>Set.member" ("_position" i)
###           ("_applC" ("_position" set) ("_position" P))))
###       ("_asm"
###         ("\<^const>HOL.Trueprop"
###           ("\<^const>Set.subset_eq"
###             ("_Seq" ("_applC" ("_position" distinct) ("_position" P))
###               ("_applC" ("_position" set) ("_position" P)))
###             ("\<^const>Gale_Shapley1.upt_set"
###               ("_applC" ("_position" array_length) ("_position" rs))))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.eq"
###       ("\<^const>Diff_Array.array_get"
###         ("_applC" ("_position" rk_of_pref)
###           ("_cargs" ("_position" r)
###             ("_cargs" ("_position" rs) ("_position" P))))
###         ("_position" i))
###       ("\<^const>Groups.plus_class.plus"
###         ("_applC" ("_position" index)
###           ("_cargs" ("_position" P) ("_position" i)))
###         ("_position" r)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
locale Pref
  fixes n :: "nat"
    and P\<^sub>a :: "nat list list"
    and P\<^sub>b :: "nat list list"
  assumes "Pref P\<^sub>a P\<^sub>b"
  defines "n == length P\<^sub>a"
### Ambiguous input (line 154 of "$AFP/Gale_Shapley/Gale_Shapley2.thy") produces 4 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" gs_inner)
###         ("_cargs"
###           ("_applC" ("_position" pref_array) ("_position" P\<^sub>a))
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" M)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg" ("_position" b)))))))))
###       ("_tuple" ("_position" A')
###         ("_tuple_args" ("_position" B')
###           ("_tuple_args" ("_position" a')
###             ("_tuple_arg" ("_position" b'))))))
###     ("_applC" ("_position" invar1)
###       ("_cargs" ("_applC" ("_position" list) ("_position" A'))
###         ("_cargs"
###           ("_applC" ("_applC" ("_position" list) ("_position" B'))
###             ("_list" ("_assign" ("_position" b') ("_position" a'))))
###           ("_cargs"
###             ("_applC" ("_applC" ("_position" list) ("_position" M))
###               ("_list" ("_assign" ("_position" b') ("_position" True))))
###             ("\<^const>Groups.plus_class.plus" ("_position" ai)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" gs_inner)
###         ("_cargs"
###           ("_applC" ("_position" pref_array) ("_position" P\<^sub>a))
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" M)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg" ("_position" b)))))))))
###       ("_tuple" ("_position" A')
###         ("_tuple_args" ("_position" B')
###           ("_tuple_args" ("_position" a')
###             ("_tuple_arg" ("_position" b'))))))
###     ("_applC" ("_position" invar1)
###       ("_cargs" ("_applC" ("_position" list) ("_position" A'))
###         ("_cargs"
###           ("_LUpdate" ("_applC" ("_position" list) ("_position" B'))
###             ("_lupdbind" ("_position" b') ("_position" a')))
###           ("_cargs"
###             ("_applC" ("_applC" ("_position" list) ("_position" M))
###               ("_list" ("_assign" ("_position" b') ("_position" True))))
###             ("\<^const>Groups.plus_class.plus" ("_position" ai)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" gs_inner)
###         ("_cargs"
###           ("_applC" ("_position" pref_array) ("_position" P\<^sub>a))
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" M)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg" ("_position" b)))))))))
###       ("_tuple" ("_position" A')
###         ("_tuple_args" ("_position" B')
###           ("_tuple_args" ("_position" a')
###             ("_tuple_arg" ("_position" b'))))))
###     ("_applC" ("_position" invar1)
###       ("_cargs" ("_applC" ("_position" list) ("_position" A'))
###         ("_cargs"
###           ("_applC" ("_applC" ("_position" list) ("_position" B'))
###             ("_list" ("_assign" ("_position" b') ("_position" a'))))
###           ("_cargs"
###             ("_LUpdate" ("_applC" ("_position" list) ("_position" M))
###               ("_lupdbind" ("_position" b') ("_position" True)))
###             ("\<^const>Groups.plus_class.plus" ("_position" ai)
###               ("\<^const>Groups.one_class.one"))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOL.implies"
###     ("\<^const>HOL.eq"
###       ("_applC" ("_position" gs_inner)
###         ("_cargs"
###           ("_applC" ("_position" pref_array) ("_position" P\<^sub>a))
###           ("_cargs" ("_position" R)
###             ("_cargs" ("_position" M)
###               ("_tuple" ("_position" A)
###                 ("_tuple_args" ("_position" B)
###                   ("_tuple_args" ("_position" a)
###                     ("_tuple_arg" ("_position" b)))))))))
###       ("_tuple" ("_position" A')
###         ("_tuple_args" ("_position" B')
###           ("_tuple_args" ("_position" a')
###             ("_tuple_arg" ("_position" b'))))))
###     ("_applC" ("_position" invar1)
###       ("_cargs" ("_applC" ("_position" list) ("_position" A'))
###         ("_cargs"
###           ("_LUpdate" ("_applC" ("_position" list) ("_position" B'))
###             ("_lupdbind" ("_position" b') ("_position" a')))
###           ("_cargs"
###             ("_LUpdate" ("_applC" ("_position" list) ("_position" M))
###               ("_lupdbind" ("_position" b') ("_position" True)))
###             ("\<^const>Groups.plus_class.plus" ("_position" ai)
###               ("\<^const>Groups.one_class.one"))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 231 of "$AFP/Gale_Shapley/Gale_Shapley2.thy") produces 2 parse trees:
### ("_bigimpl"
###   ("_asms"
###     ("\<^const>HOL.Trueprop"
###       ("_applC" ("_position" Pref)
###         ("_cargs" ("_position" P\<^sub>a) ("_position" P\<^sub>b))))
###     ("_asm"
###       ("\<^const>HOL.Trueprop"
###         ("\<^const>HOL.eq" ("_position" n)
###           ("_applC" ("_position" length) ("_position" P\<^sub>a))))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" A)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Gale_Shapley)
###             ("_cargs" ("_position" P\<^sub>a) ("_position" P\<^sub>b)))
###           ("_applC" ("_position" Some) ("_position" A)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" Pref.matching)
###             ("_cargs" ("_position" P\<^sub>a)
###               ("_cargs" ("_applC" ("_position" list) ("_position" A))
###                 ("\<^const>Gale_Shapley1.upt_set" ("_position" n)))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" Pref.stable)
###               ("_cargs" ("_position" P\<^sub>a)
###                 ("_cargs" ("_position" P\<^sub>b)
###                   ("_cargs" ("_applC" ("_position" list) ("_position" A))
###                     ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))))
###             ("_applC" ("_position" Pref.opti\<^sub>a)
###               ("_cargs" ("_position" P\<^sub>a)
###                 ("_cargs" ("_position" P\<^sub>b)
###                   ("_applC" ("_position" list) ("_position" A)))))))))))
### ("_bigimpl"
###   ("_asm"
###     ("\<^const>HOL.Trueprop"
###       ("\<^const>HOL.eq"
###         ("_Seq"
###           ("_applC" ("_position" Pref)
###             ("_cargs" ("_position" P\<^sub>a) ("_position" P\<^sub>b)))
###           ("_position" n))
###         ("_applC" ("_position" length) ("_position" P\<^sub>a)))))
###   ("\<^const>HOL.Trueprop"
###     ("\<^const>HOL.Ex_binder" ("_position" A)
###       ("\<^const>HOL.conj"
###         ("\<^const>HOL.eq"
###           ("_applC" ("_position" Gale_Shapley)
###             ("_cargs" ("_position" P\<^sub>a) ("_position" P\<^sub>b)))
###           ("_applC" ("_position" Some) ("_position" A)))
###         ("\<^const>HOL.conj"
###           ("_applC" ("_position" Pref.matching)
###             ("_cargs" ("_position" P\<^sub>a)
###               ("_cargs" ("_applC" ("_position" list) ("_position" A))
###                 ("\<^const>Gale_Shapley1.upt_set" ("_position" n)))))
###           ("\<^const>HOL.conj"
###             ("_applC" ("_position" Pref.stable)
###               ("_cargs" ("_position" P\<^sub>a)
###                 ("_cargs" ("_position" P\<^sub>b)
###                   ("_cargs" ("_applC" ("_position" list) ("_position" A))
###                     ("\<^const>Gale_Shapley1.upt_set" ("_position" n))))))
###             ("_applC" ("_position" Pref.opti\<^sub>a)
###               ("_cargs" ("_position" P\<^sub>a)
###                 ("_cargs" ("_position" P\<^sub>b)
###                   ("_applC" ("_position" list) ("_position" A)))))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.080s elapsed time, 0.203s cpu time, 0.059s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Gale_Shapley2Templates")
### theory "Draft.Gale_Shapley2"
### 0.541s elapsed time, 1.186s cpu time, 0.186s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.476s elapsed time, 0.499s cpu time, 0.000s GC time
Loading theory "Draft.Gale_Shapley2Templates"
val templateLemmas =
   [("Gale_Shapley2.array_get", "?a !! ?i = list ?a ! ?i",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("Gale_Shapley2.length_rk_of_pref",
     "array_length (Gale_Shapley2.rk_of_pref ?v ?vs ?P) = array_length ?vs",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)),
       template_app (template_hole 1, template_var 1))),
    ("Gale_Shapley2.list_array", "list (array ?x ?n) = replicate ?n ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 0), template_var 1))),
    ("Gale_Shapley2.list_list_pref_array",
     "?i < length ?Pa ==> list (list (pref_array ?Pa) ! ?i) = ?Pa ! ?i",
     template_implication
      ([template_inequation
         (less_than, template_var 1,
          template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))),
             template_var 1)),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Gale_Shapley2.rank_array1_iff_pref",
     "[| set ?P = {<length ?P}; ?i < length ?P; ?j < length ?P |]
      ==> (rank_array1 ?P !! ?i < rank_array1 ?P !! ?j) =
          (?P \<turnstile> ?i < ?j)",
     template_implication
      ([template_equation
         (template_app (template_hole 8, template_var 2),
          template_app
           (template_app (template_hole 7, template_hole 6),
            template_app (template_hole 5, template_var 2))),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 5, template_var 2)),
        template_inequation
         (less_than, template_var 0,
          template_app (template_hole 5, template_var 2))],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 2)),
               template_var 1)),
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 2)),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Gale_Shapley2.nth_rk_of_pref",
     "[| length ?P <= array_length ?rs; ?i : set ?P; distinct ?P;
         set ?P <= {<array_length ?rs} |]
      ==> Gale_Shapley2.rk_of_pref ?r ?rs ?P !! ?i = index ?P ?i + ?r",
     template_implication
      ([template_inequation
         (less_equals, template_app (template_hole 12, template_var 3),
          template_app (template_hole 11, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 1),
              template_app (template_hole 9, template_var 3))
            ),
        template_predicate (template_app (template_hole 8, template_var 3)),
        template_inequation
         (less_equals, template_app (template_hole 9, template_var 3),
          template_app
           (template_app (template_hole 6, template_hole 5),
            template_app (template_hole 11, template_var 2)))],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2),
               template_var 3)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 1)),
           template_var 0)))),
    ("Gale_Shapley2.gs",
     "[| Pref ?P\<^sub>a ?P\<^sub>b; ?n = length ?P\<^sub>a |]
      ==> EX A. Gale_Shapley2.Gale_Shapley ?P\<^sub>a ?P\<^sub>b = Some A &
                Pref.matching ?P\<^sub>a (list A) {<?n} &
                Pref.stable ?P\<^sub>a ?P\<^sub>b (list A) {<?n} &
                Pref.opti\<^sub>a ?P\<^sub>a ?P\<^sub>b (list A)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_var 0, template_app (template_hole 11, template_var 2))],
       template_predicate (template_app (template_hole 10, t_empty))))]:
   (string * thm * template) list
### theory "Draft.Gale_Shapley2Templates"
### 0.435s elapsed time, 0.568s cpu time, 0.059s GC time
val it = (): unit
