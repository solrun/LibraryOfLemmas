Loading theory "Draft.Fresh" (required by "Draft.Fresh_StringMoreTemplates" via "Draft.Fresh_String")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Fresh_StringMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Fresh_StringMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Fresh_StringMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
class fresh = type +
  fixes fresh :: "'a set => 'a => 'a"
  assumes "fresh_notIn": "!!xs x. finite xs ==> fresh xs x ~: xs"
    and "fresh_eq": "!!xs x. x ~: xs ==> fresh xs x = x"
### Additional type variable(s) in locale specification "infinite": 'a
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
class infinite = type +
  assumes "infinite_UNIV": "infinite UNIV"
### theory "HOL-Library.Function_Algebras"
### 0.123s elapsed time, 0.512s cpu time, 0.039s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Fresh_StringMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.193s elapsed time, 0.786s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Fresh_StringMoreTemplates" via "Draft.ExtrEqs")
### theory "Draft.Fresh"
### 0.222s elapsed time, 0.907s cpu time, 0.039s GC time
Loading theory "Draft.Fresh_String" (required by "Draft.Fresh_StringMoreTemplates")
### theory "HOL-Library.Nat_Bijection"
### 0.308s elapsed time, 1.230s cpu time, 0.111s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Fresh_StringMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "{}"
instantiation
  String.literal :: fresh
  fresh_literal == fresh ::
    String.literal set => String.literal => String.literal
### theory "Draft.Fresh_String"
### 0.192s elapsed time, 0.757s cpu time, 0.072s GC time
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.792s elapsed time, 3.011s cpu time, 0.658s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.859s elapsed time, 3.281s cpu time, 0.615s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
"[''Abc'', ''Abd'', ''Ya'', ''Yb'', ''Yzb'', ''Ya'']"
  :: "char list list"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.652s elapsed time, 5.538s cpu time, 0.830s GC time
Loading theory "Draft.Templates" (required by "Draft.Fresh_StringMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.046s elapsed time, 0.094s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Fresh_StringMoreTemplates")
"[STR ''Abc'', STR ''Abd'', STR ''Ya'', STR ''Yb'', STR ''Yzb'',
  STR ''Ya'']"
  :: "String.literal list"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.456s elapsed time, 0.545s cpu time, 0.034s GC time
Loading theory "Draft.Fresh_StringMoreTemplates"
val templateLemmas =
   [("Fresh_String.ordstNS_refl", "ordstNS ?X ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Fresh_String.upChar_ordst", "ordst ?Y (upChar ?Y)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("Fresh_String.ordst_antirefl", "~ ordst ?X ?X",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 0)
             )
         )),
    ("Fresh_String.fresh_string_ordstNS",
     "ordstNS ?Y (fresh_string ?Xs ?Y)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Fresh_String.upChar_literal_upChar",
     "upChar_literal ?s = String.implode (upChar (literal.explode ?s))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Fresh_String.fresh_string_set",
     "finite ?Xs ==> fresh_string ?Xs ?Y ~: ?Xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_var 1)
               )
           ))),
    ("Fresh_String.ordst_trans",
     "[| ordst ?X ?Y; ordst ?Y ?Z |] ==> ordst ?X ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Fresh_String.ordst_ordstNS_trans",
     "[| ordst ?X ?Y; ordstNS ?Y ?Z |] ==> ordst ?X ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Fresh_String.ordstNS_ordst_trans",
     "[| ordstNS ?X ?Y; ordst ?Y ?Z |] ==> ordst ?X ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Fresh_String.ordstNS_trans",
     "[| ordstNS ?X ?Y; ordstNS ?Y ?Z |] ==> ordstNS ?X ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Fresh_String.map_ascii_of_idem",
     "is_ascii ?str ==> map String.ascii_of ?str = ?str",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_var 0))),
    ("Fresh_String.Fresh",
     "?Y ~: ?Xs | infinite ?Xs ==> fresh_string ?Xs ?Y = ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 4,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Fresh_String.is_ascii_upChar",
     "is_ascii ?str ==> is_ascii (upChar ?str)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 0))),
             t_empty)
           ))),
    ("Fresh_String.is_ascii_butlast",
     "is_ascii ?str ==> is_ascii (butlast ?str)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 0))),
             t_empty)
           ))),
    ("Fresh_String.ascii_char_of", "?c < 128 ==> ~ digit7 (char_of ?c)",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 5,
            template_app
             (template_hole 4,
              template_app
               (template_hole 4,
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_hole 4,
                        template_app
                         (template_hole 4, template_hole 3)))))))))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Fresh_String.is_ascii_fresh_string",
     "is_ascii ?Y ==> is_ascii (fresh_string ?Xs ?Y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             t_empty)
           ))),
    ("Fresh_String.ascii_of_char_of_idem",
     "?c < 128 ==> String.ascii_of (char_of ?c) = char_of ?c",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 5,
            template_app
             (template_hole 4,
              template_app
               (template_hole 4,
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_hole 4,
                        template_app
                         (template_hole 4, template_hole 3)))))))))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Fresh_String.fresh_string_if",
     "fresh_string ?Xs ?Y =
      (if ?Y : ?Xs & finite ?Xs then fresh_string (?Xs - {?Y}) (upChar ?Y)
       else ?Y)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 1)),
               template_app (template_hole 4, template_var 1))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Fresh_String.fresh_string_list",
     "fresh_string (set ?Xs) ?Y =
      (if ?Y : set ?Xs then fresh_string (set ?Xs - {?Y}) (upChar ?Y)
       else ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 6, template_var 1))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 6, template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Fresh_String.fresh_literal_if",
     "fresh ?xs ?y =
      (if ?y : ?xs & finite ?xs then fresh (?xs - {?y}) (upChar_literal ?y)
       else ?y)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 1)),
               template_app (template_hole 4, template_var 1))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Fresh_String.fresh_literal_list",
     "fresh (set ?xs) ?y =
      (if ?y : set ?xs then fresh (set ?xs - {?y}) (upChar_literal ?y)
       else ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 6, template_var 1))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 6, template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Fresh_String.Up",
     "[| ?Y : ?Xs; finite ?Xs |]
      ==> fresh_string ?Xs ?Y = fresh_string (?Xs - {?Y}) (upChar ?Y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1))),
           template_app (template_hole 0, template_var 1)))))]:
   (string * thm * template) list
### theory "Draft.Fresh_StringMoreTemplates"
### 0.283s elapsed time, 0.415s cpu time, 0.068s GC time
val it = (): unit
