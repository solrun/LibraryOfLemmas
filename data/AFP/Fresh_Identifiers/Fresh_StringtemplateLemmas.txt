   [("Fresh_String.ordstNS_refl", "ordstNS ?X ?X",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("Fresh_String.upChar_ordst", "ordst ?Y (upChar ?Y)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 0),
           template_app (template_hole 0, template_var 0))
         )),
    ("Fresh_String.ordst_antirefl", "~ ordst ?X ?X",
     template_negation
      (
         template_predicate
          (
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 0)
             )
         )),
    ("Fresh_String.fresh_string_ordstNS",
     "ordstNS ?Y (fresh_string ?Xs ?Y)",
     template_predicate
      (
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("Fresh_String.upChar_literal_upChar",
     "upChar_literal ?s = String.implode (upChar (literal.explode ?s))",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_hole 1,
           template_app (template_hole 0, template_var 0))))),
    ("Fresh_String.fresh_string_set",
     "finite ?Xs ==> fresh_string ?Xs ?Y ~: ?Xs",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 1))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 0, template_var 1),
                     template_var 0)),
                 template_var 1)
               )
           ))),
    ("Fresh_String.ordst_trans",
     "[| ordst ?X ?Y; ordst ?Y ?Z |] ==> ordst ?X ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Fresh_String.ordst_ordstNS_trans",
     "[| ordst ?X ?Y; ordstNS ?Y ?Z |] ==> ordst ?X ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("Fresh_String.ordstNS_ordst_trans",
     "[| ordstNS ?X ?Y; ordst ?Y ?Z |] ==> ordst ?X ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Fresh_String.ordstNS_trans",
     "[| ordstNS ?X ?Y; ordstNS ?Y ?Z |] ==> ordstNS ?X ?Z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Fresh_String.map_ascii_of_idem",
     "is_ascii ?str ==> map String.ascii_of ?str = ?str",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 0)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_hole 0), template_var 0),
         template_var 0))),
    ("Fresh_String.Fresh",
     "?Y ~: ?Xs | infinite ?Xs ==> fresh_string ?Xs ?Y = ?Y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app
                   (template_app (template_hole 3, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 4,
                template_app (template_hole 2, template_var 0)))
            )],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 1),
         template_var 1))),
    ("Fresh_String.is_ascii_upChar",
     "is_ascii ?str ==> is_ascii (upChar ?str)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 0))),
             t_empty)
           ))),
    ("Fresh_String.is_ascii_butlast",
     "is_ascii ?str ==> is_ascii (butlast ?str)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 0, template_var 0))),
             t_empty)
           ))),
    ("Fresh_String.ascii_char_of", "?c < 128 ==> ~ digit7 (char_of ?c)",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 5,
            template_app
             (template_hole 4,
              template_app
               (template_hole 4,
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_hole 4,
                        template_app
                         (template_hole 4, template_hole 3)))))))))],
       template_negation
        (
           template_predicate
            (
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))
               )
           ))),
    ("Fresh_String.is_ascii_fresh_string",
     "is_ascii ?Y ==> is_ascii (fresh_string ?Xs ?Y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 1))),
             t_empty)
           ))),
    ("Fresh_String.ascii_of_char_of_idem",
     "?c < 128 ==> String.ascii_of (char_of ?c) = char_of ?c",
     template_implication
      ([template_inequation
         (less_than, template_var 0,
          template_app
           (template_hole 5,
            template_app
             (template_hole 4,
              template_app
               (template_hole 4,
                template_app
                 (template_hole 4,
                  template_app
                   (template_hole 4,
                    template_app
                     (template_hole 4,
                      template_app
                       (template_hole 4,
                        template_app
                         (template_hole 4, template_hole 3)))))))))],
       template_equation
        (template_app
          (template_hole 1, template_app (template_hole 0, template_var 0)),
         template_app (template_hole 0, template_var 0)))),
    ("Fresh_String.fresh_string_if",
     "fresh_string ?Xs ?Y =
      (if ?Y : ?Xs & finite ?Xs then fresh_string (?Xs - {?Y}) (upChar ?Y)
       else ?Y)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 1)),
               template_app (template_hole 4, template_var 1))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Fresh_String.fresh_string_list",
     "fresh_string (set ?Xs) ?Y =
      (if ?Y : set ?Xs then fresh_string (set ?Xs - {?Y}) (upChar ?Y)
       else ?Y)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 6, template_var 1))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 6, template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Fresh_String.fresh_literal_if",
     "fresh ?xs ?y =
      (if ?y : ?xs & finite ?xs then fresh (?xs - {?y}) (upChar_literal ?y)
       else ?y)",
     template_equation
      (template_app
        (template_app (template_hole 8, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 1)),
               template_app (template_hole 4, template_var 1))),
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Fresh_String.fresh_literal_list",
     "fresh (set ?xs) ?y =
      (if ?y : set ?xs then fresh (set ?xs - {?y}) (upChar_literal ?y)
       else ?y)",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app (template_hole 6, template_var 1))),
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 6, template_var 1)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_hole 1))),
             template_app (template_hole 0, template_var 0))),
         template_var 0))),
    ("Fresh_String.Up",
     "[| ?Y : ?Xs; finite ?Xs |]
      ==> fresh_string ?Xs ?Y = fresh_string (?Xs - {?Y}) (upChar ?Y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_var 0)
            ),
        template_predicate
         (template_app (template_hole 6, template_var 0))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 0), template_var 1),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 0),
               template_app
                (template_app (template_hole 2, template_var 1),
                 template_hole 1))),
           template_app (template_hole 0, template_var 1)))))]
