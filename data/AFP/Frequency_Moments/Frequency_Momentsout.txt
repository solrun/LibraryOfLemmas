Loading theory "Draft.Frequency_Moments_Preliminary_Results" (required by "Draft.Frequency_MomentsTemplates" via "Draft.Frequency_Moments")
Loading theory "Draft.Templates" (required by "Draft.Frequency_MomentsTemplates" via "Draft.ExtrEqs")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Frequency_MomentsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.088s elapsed time, 0.311s cpu time, 0.000s GC time
### theory "HOL-Library.Function_Algebras"
### 0.141s elapsed time, 0.420s cpu time, 0.055s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Frequency_MomentsTemplates" via "Draft.ExtrEqs")
### theory "Draft.Frequency_Moments_Preliminary_Results"
### 0.677s elapsed time, 1.507s cpu time, 0.133s GC time
Loading theory "Draft.Frequency_Moments" (required by "Draft.Frequency_MomentsTemplates")
### theory "HOL-Library.BigO"
### 0.606s elapsed time, 1.239s cpu time, 0.078s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Frequency_MomentsTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.535s elapsed time, 1.110s cpu time, 0.161s GC time
### theory "Draft.Frequency_Moments"
### 0.631s elapsed time, 1.283s cpu time, 0.161s GC time
Loading theory "Draft.Frequency_MomentsTemplates"
val templateLemmas =
   [("Frequency_Moments_Preliminary_Results.prime_above_prime",
     "normalization_semidom_class.prime (prime_above ?n)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Frequency_Moments_Preliminary_Results.sorted_sorted_list_of_multiset",
     "sorted (sorted_list_of_multiset ?M)",
     template_predicate
      (
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))
         )),
    ("Frequency_Moments_Preliminary_Results.prime_above_lower_bound",
     "?n <= prime_above ?n",
     template_inequation
      (less_equals, template_var 0,
       template_app (template_hole 0, template_var 0))),
    ("Frequency_Moments.poly_encoding", "is_encoding (P\<^sub>e ?p ?n)",
     template_predicate
      (
         template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("Frequency_Moments.F_ge_0", "0 <= F ?k ?as",
     template_inequation
      (less_equals, template_hole 1,
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Frequency_Moments_Preliminary_Results.real_of_rat_of_float",
     "real_of_rat (rat_of_float ?x) = real_of_float ?x",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Frequency_Moments_Preliminary_Results.prime_above_min",
     "2 <= prime_above ?n",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3, template_app (template_hole 2, template_hole 1)),
       template_app (template_hole 0, template_var 0))),
    ("Frequency_Moments_Preliminary_Results.count_mset",
     "count (mset ?xs) ?a = count_list ?xs ?a",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Frequency_Moments_Preliminary_Results.count_list_gr_1",
     "(?x : set ?xs) = (1 <= count_list ?xs ?x)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Frequency_Moments_Preliminary_Results.ereal_mono",
     "?x <= ?y ==> ereal ?x <= ereal ?y",
     template_implication
      ([template_inequation (less_equals, template_var 1, template_var 0)],
       template_inequation
        (less_equals, template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Frequency_Moments_Preliminary_Results.log_est",
     "log 2 (real ?n + 1) <= real ?n",
     template_inequation
      (less_equals,
       template_app
        (template_app
          (template_hole 6,
           template_app
            (template_hole 5,
             template_app (template_hole 4, template_hole 3))),
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_hole 0)),
       template_app (template_hole 1, template_var 0))),
    ("Frequency_Moments.F_gr_0", "?as ~= [] ==> 0 < F ?k ?as",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 3))],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Frequency_Moments_Preliminary_Results.prime_above_upper_bound",
     "prime_above ?n <= 2 * ?n + 2",
     template_inequation
      (less_equals, template_app (template_hole 5, template_var 0),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0))),
             template_var 0)),
         template_app
          (template_hole 2,
           template_app (template_hole 1, template_hole 0))))),
    ("Frequency_Moments_Preliminary_Results.suffix_drop_drop",
     "?y <= ?x ==> suffix (drop ?x ?a) (drop ?y ?a)",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 0)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Frequency_Moments_Preliminary_Results.count_list_append",
     "count_list (?xs @ ?ys) ?v = count_list ?xs ?v + count_list ?ys ?v",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 0)),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Frequency_Moments_Preliminary_Results.abs_ge_iff",
     "(?x <= \<bar>?y\<bar>) = (?x <= ?y | ?x <= - ?y)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_app
          (template_hole 1,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 3, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Frequency_Moments_Preliminary_Results.swap_filter_image",
     "filter_mset ?g (image_mset ?f ?A) =
      image_mset ?f (filter_mset (?g o ?f) ?A)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1)),
           template_var 0)))),
    ("Frequency_Moments_Preliminary_Results.round_down_ge",
     "?x <= round_down ?prec ?x + 2 powr - real_of_int ?prec",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_hole 4,
               template_app (template_hole 3, template_hole 2))),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))))),
    ("Frequency_Moments_Preliminary_Results.sorted_list_of_multiset_image_commute",
     "mono ?f ==>
      sorted_list_of_multiset (image_mset ?f ?M) =
      map ?f (sorted_list_of_multiset ?M)",
     template_implication
      ([template_predicate
         (template_app (template_hole 5, template_var 1))],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 1),
             template_var 0)),
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("Frequency_Moments_Preliminary_Results.prime_above_range",
     "prime_above ?n : {?n..2 * ?n + 2}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 0)),
           template_app
            (template_app (template_hole 5, template_var 0),
             template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app
                    (template_hole 3,
                     template_app
                      (template_hole 2,
                       template_app (template_hole 1, template_hole 0))),
                   template_var 0)),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_hole 0)))))
         )),
    ("Frequency_Moments_Preliminary_Results.prod_mset_conv",
     "\<Prod>\<^sub># (image_mset ?f ?A) =
      (PROD x:set_mset ?A. ?f x ^ count ?A x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Frequency_Moments_Preliminary_Results.prod_list_eval",
     "prod_list (map ?f ?xs) = (PROD x:set ?xs. ?f x ^ count_list ?xs x)",
     template_equation
      (template_app
        (template_hole 5,
         template_app
          (template_app (template_hole 4, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 3, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Frequency_Moments_Preliminary_Results.sum_list_eval",
     "sum_list (map ?f ?xs) =
      (SUM x:set ?xs. of_nat (count_list ?xs x) * ?f x)",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 4, t_empty),
         template_app (template_hole 0, template_var 0)))),
    ("Frequency_Moments_Preliminary_Results.truncate_down_ge",
     "?x <= truncate_down ?prec ?x + \<bar>?x\<bar> * 2 powr - real ?prec",
     template_inequation
      (less_equals, template_var 1,
       template_app
        (template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 1)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0))))))),
    ("Frequency_Moments_Preliminary_Results.count_list_card",
     "count_list ?xs ?x = card {k. k < length ?xs & ?xs ! k = ?x}",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app
        (template_hole 6, template_app (template_hole 5, t_empty)))),
    ("Frequency_Moments_Preliminary_Results.ex_subset",
     "[| EX x:?A. ?P x; ?A <= ?B |] ==> EX x:?B. ?P x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2), t_empty)
            ),
        template_inequation (less_equals, template_var 2, template_var 0)],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0), t_empty)
           ))),
    ("Frequency_Moments_Preliminary_Results.truncate_down_pos",
     "0 <= ?x ==> ?x * (1 - 2 powr - real ?prec) <= truncate_down ?prec ?x",
     template_implication
      ([template_inequation
         (less_equals, template_hole 10, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 9, template_var 1),
           template_app
            (template_app (template_hole 8, template_hole 7),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 4, template_hole 3))),
               template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 0))))),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 1)))),
    ("Frequency_Moments_Preliminary_Results.list_eq_iff",
     "[| mset ?xs = mset ?ys; sorted ?xs; sorted ?ys |] ==> ?xs = ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 3, template_var 1),
          template_app (template_hole 3, template_var 0)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 1, template_var 0))),
    ("Frequency_Moments_Preliminary_Results.log_mono",
     "[| 1 < ?a; ?x <= ?y; 0 < ?x |] ==> log ?a ?x <= log ?a ?y",
     template_implication
      ([template_inequation (less_than, template_hole 3, template_var 2),
        template_inequation (less_equals, template_var 1, template_var 0),
        template_inequation (less_than, template_hole 1, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 2),
           template_var 0)))),
    ("Frequency_Moments_Preliminary_Results.card_gr_1_iff",
     "[| finite ?S; ?x : ?S; ?y : ?S; ?x ~= ?y |] ==> 1 < card ?S",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_var 2)
            ),
        template_negation
         (template_equation (template_var 1, template_var 0))],
       template_inequation
        (less_than, template_hole 1,
         template_app (template_hole 0, template_var 2)))),
    ("Frequency_Moments_Preliminary_Results.truncate_mantissa_bound",
     "\<bar>\<lfloor>?x *
                     2 powr
                     (real ?r -
                      real_of_int
                       \<lfloor>log 2
                                 \<bar>?x\<bar>\<rfloor>)\<rfloor>\<bar>
      <= 2 ^ (?r + 1)",
     template_inequation
      (less_equals,
       template_app
        (template_hole 15,
         template_app
          (template_hole 14,
           template_app
            (template_app (template_hole 13, template_var 1),
             template_app
              (template_app
                (template_hole 12,
                 template_app
                  (template_hole 11,
                   template_app (template_hole 10, template_hole 9))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app (template_hole 7, template_var 0)),
                 template_app
                  (template_hole 6,
                   template_app
                    (template_hole 14,
                     template_app
                      (template_app
                        (template_hole 5,
                         template_app
                          (template_hole 11,
                           template_app
                            (template_hole 10, template_hole 9))),
                       template_app
                        (template_hole 4, template_var 1))))))))),
       template_app
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 10, template_hole 9))),
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Frequency_Moments_Preliminary_Results.truncate_down_eq",
     "truncate_down ?r ?x = truncate_down ?r ?y ==>
      \<bar>?x - ?y\<bar>
      <= max \<bar>?x\<bar> \<bar>?y\<bar> * 2 powr - real ?r",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 11, template_var 2),
            template_var 1),
          template_app
           (template_app (template_hole 11, template_var 2),
            template_var 0))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 9,
           template_app
            (template_app (template_hole 8, template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_hole 7,
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_hole 9, template_var 1)),
               template_app (template_hole 9, template_var 0))),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 4,
                 template_app (template_hole 3, template_hole 2))),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 2))))))),
    ("Frequency_Moments_Preliminary_Results.count_list_ge_2_iff",
     "[| ?y < ?z; ?z < length ?xs; ?xs ! ?y = ?xs ! ?z |]
      ==> 1 < count_list ?xs (?xs ! ?y)",
     template_implication
      ([template_inequation (less_than, template_var 2, template_var 1),
        template_inequation
         (less_than, template_var 1,
          template_app (template_hole 4, template_var 0)),
        template_equation
         (template_app
           (template_app (template_hole 2, template_var 0), template_var 2),
          template_app
           (template_app (template_hole 2, template_var 0),
            template_var 1))],
       template_inequation
        (less_than, template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 0),
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 2))))),
    ("Frequency_Moments.bounded_degree_polynomial_bit_count",
     "[| 1 < ?p; ?x : bounded_degree_polynomials (mod_ring ?p) ?n |]
      ==> bit_count (P\<^sub>e ?p ?n ?x)
          <= ereal (real ?n * (log 2 (real ?p) + 1))",
     template_implication
      ([template_inequation (less_than, template_hole 15, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 14, template_var 1),
              template_app
               (template_app
                 (template_hole 13,
                  template_app (template_hole 12, template_var 2)),
                template_var 0))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_hole 10,
           template_app
            (template_app
              (template_app (template_hole 9, template_var 2),
               template_var 0),
             template_var 1)),
         template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 6, template_var 0)),
             template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 4,
                     template_app
                      (template_hole 3,
                       template_app (template_hole 2, template_hole 1))),
                   template_app (template_hole 6, template_var 2))),
               template_hole 0)))))),
    ("Frequency_Moments_Preliminary_Results.card_ordered_pairs",
     "finite ?M ==>
      2 * card {(x, y). (x, y) : ?M \<times> ?M & x < y} =
      card ?M * (card ?M - 1)",
     template_implication
      ([template_predicate
         (template_app (template_hole 16, template_var 0))],
       template_equation
        (template_app
          (template_app
            (template_hole 14,
             template_app
              (template_hole 13,
               template_app (template_hole 12, template_hole 11))),
           template_app
            (template_hole 10,
             template_app
              (template_hole 9, template_app (template_hole 8, t_empty)))),
         template_app
          (template_app
            (template_hole 14,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 2, template_var 0)),
             template_hole 0))))),
    ("Frequency_Moments_Preliminary_Results.count_list_lt_suffix",
     "[| suffix ?a ?b; ?x : {?b ! i |i. i < length ?b - length ?a} |]
      ==> count_list ?a ?x < count_list ?b ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 0),
              template_app (template_hole 8, t_empty))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Frequency_Moments_Preliminary_Results.sum_collapse",
     "[| finite ?A; ?z : ?A;
         !!y. [| y : ?A; y ~= ?z |] ==> ?f y = (0::?'b) |]
      ==> sum ?f ?A = ?f ?z",
     template_implication
      ([template_predicate (template_app (template_hole 7, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 0), template_var 2),
         template_app (template_var 0, template_var 1)))),
    ("Frequency_Moments_Preliminary_Results.disj_induct_mset",
     "[| ?P {#};
         !!n M x.
            [| ?P M; x ~:# M; 0 < n |] ==> ?P (M + replicate_mset n x) |]
      ==> ?P ?M",
     template_implication
      ([template_predicate
         (template_app (template_var 1, template_hole 10)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Frequency_Moments_Preliminary_Results.truncate_float_bit_count",
     "bit_count (F\<^sub>e (float_of (truncate_down ?r ?x)))
      <= ereal
          (10 + 4 * real ?r +
           2 * log 2 (2 + \<bar>log 2 \<bar>?x\<bar>\<bar>))",
     template_inequation
      (less_equals,
       template_app
        (template_hole 13,
         template_app
          (template_hole 12,
           template_app
            (template_hole 11,
             template_app
              (template_app (template_hole 10, template_var 1),
               template_var 0)))),
       template_app
        (template_hole 9,
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_hole 7,
                   template_app
                    (template_hole 6,
                     template_app
                      (template_hole 5,
                       template_app (template_hole 6, template_hole 4))))),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 7,
                     template_app
                      (template_hole 6,
                       template_app (template_hole 6, template_hole 4)))),
                 template_app (template_hole 2, template_var 1)))),
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 7,
                 template_app (template_hole 6, template_hole 4))),
             template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_hole 7,
                   template_app (template_hole 6, template_hole 4))),
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_hole 7,
                     template_app (template_hole 6, template_hole 4))),
                 template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_hole 1,
                       template_app
                        (template_hole 7,
                         template_app (template_hole 6, template_hole 4))),
                     template_app
                      (template_hole 0, template_var 0))))))))))]:
   (string * thm * template) list
### theory "Draft.Frequency_MomentsTemplates"
### 0.876s elapsed time, 1.408s cpu time, 0.586s GC time
val it = (): unit
