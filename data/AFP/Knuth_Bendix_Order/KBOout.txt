Loading theory "Draft.Order_Pair" (required by "Draft.KBOTemplates" via "Draft.KBO" via "Draft.Lexicographic_Extension")
Loading theory "Draft.Templates" (required by "Draft.KBOTemplates" via "Draft.ExtrEqs")
Loading theory "Draft.Subterm_and_Context" (required by "Draft.KBOTemplates" via "Draft.KBO" via "Draft.Term_Aux")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.067s elapsed time, 0.228s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.KBOTemplates")
locale pre_order_pair
  fixes S :: "('a * 'a) set"
    and NS :: "('a * 'a) set"
  assumes "pre_order_pair S NS"
locale compat_pair
  fixes S :: "('a * 'a) set"
    and NS :: "('a * 'a) set"
  assumes "compat_pair S NS"
locale order_pair
  fixes S :: "('a * 'a) set"
    and NS :: "('a * 'a) set"
  assumes "order_pair S NS"
locale SN_ars
  fixes S :: "('a * 'a) set"
  assumes "SN_ars S"
locale SN_pair
  fixes S :: "('a * 'a) set"
    and NS :: "('a * 'a) set"
  assumes "SN_pair S NS"
locale SN_order_pair
  fixes S :: "('a * 'a) set"
    and NS :: "('a * 'a) set"
  assumes "SN_order_pair S NS"
### theory "Draft.Order_Pair"
### 0.182s elapsed time, 0.574s cpu time, 0.039s GC time
Loading theory "Draft.Lexicographic_Extension" (required by "Draft.KBOTemplates" via "Draft.KBO")
Proofs for inductive predicate(s) "supteqp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "suptp"
  Proving monotonicity ...
Found termination order: "{}"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.620s elapsed time, 1.882s cpu time, 0.224s GC time
### theory "Draft.Lexicographic_Extension"
### 0.617s elapsed time, 1.797s cpu time, 0.295s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### Partially applied constant "Subterm_and_Context.ctxt_compose" on left hand side of equation, in theorem:
### monoid_mult.prod_list \<box> (\<circ>\<^sub>c) ?xs ==
### foldr (\<circ>\<^sub>c) ?xs \<box>
instantiation
  ctxt :: (type, type) monoid_mult
  one_ctxt == one_class.one :: ('a, 'b) ctxt
  times_ctxt == times :: ('a, 'b) ctxt => ('a, 'b) ctxt => ('a, 'b) ctxt
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Subterm_and_Context"
### 1.445s elapsed time, 3.082s cpu time, 0.400s GC time
Loading theory "Draft.Term_Aux" (required by "Draft.KBOTemplates" via "Draft.KBO")
### theory "Draft.Term_Aux"
### 0.312s elapsed time, 0.690s cpu time, 0.500s GC time
*** Failed to load theory "Draft.KBO" (unresolved "Draft.Term_Aux")
*** Failed to load theory "Draft.KBOTemplates" (unresolved "Draft.KBO")
*** Unknown ancestor theory "Knuth_Bendix_Order.Subterm_and_Context" (line 11 of "$AFP/Knuth_Bendix_Order/Term_Aux.thy")
*** At command "text" (line 9 of "$AFP/Knuth_Bendix_Order/Term_Aux.thy")
Exception- TOPLEVEL_ERROR raised
