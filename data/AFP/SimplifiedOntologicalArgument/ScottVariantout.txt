Loading theory "Draft.HOML" (required by "Draft.ScottVariantMoreTemplates" via "Draft.ScottVariant")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ScottVariantMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ScottVariantMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ScottVariantMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Default parameters for Nitpick:
assms = true
batch_size = smart
binary_ints = smart
bisim_depth = 9
bits = 1-10
box = smart
card = 1-10
datatype_sym_break = 5
debug = false
destroy_constrs = true
expect = genuine
falsify = true
finitize = smart
format = 1
iter = 0,1,2,4,8,12,16,20,24,28
kodkod_sym_break = 15
max_genuine = 1
max_potential = 1
max_threads = 0
merge_type_vars = false
mono = smart
overlord = false
peephole_optim = true
sat_solver = smart
show_consts = false
show_skolems = true
show_types = false
specialize = true
spy = false
star_linear_preds = true
tac_timeout = 0.5
timeout = 30
total_consts = smart
user_axioms = 
verbose = false
wf = smart
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### Ambiguous input (line 26 of "$AFP/SimplifiedOntologicalArgument/HOML.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>c10" ("_position" \<Phi>))
###   ("_lambda" ("_position" x)
###     ("_lambda" ("_position" w)
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" \<Phi>)
###           ("_cargs" ("_position" x) ("_position" w)))))))
### ("\<^const>Pure.eq" ("\<^const>HOML.c3" ("_position" \<Phi>))
###   ("_lambda" ("_position" x)
###     ("_lambda" ("_position" w)
###       ("\<^const>HOL.Not"
###         ("_applC" ("_position" \<Phi>)
###           ("_cargs" ("_position" x) ("_position" w)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "Draft.HOML"
### 0.121s elapsed time, 0.480s cpu time, 0.039s GC time
Loading theory "Draft.BaseDefs" (required by "Draft.ScottVariantMoreTemplates" via "Draft.ScottVariant")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.542s cpu time, 0.039s GC time
Loading theory "Draft.MFilter" (required by "Draft.ScottVariantMoreTemplates" via "Draft.ScottVariant")
### theory "Draft.BaseDefs"
### 0.045s elapsed time, 0.177s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ScottVariantMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### Ambiguous input (line 13 of "$AFP/SimplifiedOntologicalArgument/MFilter.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("\<^fixed>f" ("_position" \<psi>))
###   ("_lambda" ("_position" x)
###     ("\<^const>HOML.c10" ("_applC" ("_position" \<psi>) ("_position" x)))))
### ("\<^const>Pure.eq" ("\<^fixed>f" ("_position" \<psi>))
###   ("_lambda" ("_position" x)
###     ("\<^const>HOML.c3" ("_applC" ("_position" \<psi>) ("_position" x)))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 17 of "$AFP/SimplifiedOntologicalArgument/MFilter.thy") produces 2 parse trees:
### ("\<^const>Pure.eq" ("_applC" ("\<^fixed>g") ("_position" \<Phi>))
###   ("\<^const>HOML.c4"
###     ("\<^const>HOML.c4"
###       ("\<^const>HOML.c4"
###         ("\<^const>MFilter.a" ("\<^const>MFilter.c") ("_position" \<Phi>))
###         ("\<^const>HOML.c10"
###           ("\<^const>MFilter.a" ("\<^const>MFilter.b")
###             ("_position" \<Phi>))))
###       ("\<^const>HOML.q2_binder"
###         ("_idts" ("_position" \<phi>) ("_position" \<psi>))
###         ("\<^const>HOML.c6"
###           ("\<^const>HOML.c4"
###             ("\<^const>MFilter.a" ("_position" \<phi>) ("_position" \<Phi>))
###             ("\<^const>MFilter.d" ("_position" \<phi>)
###               ("_position" \<psi>)))
###           ("\<^const>MFilter.a" ("_position" \<psi>)
###             ("_position" \<Phi>)))))
###     ("\<^const>HOML.q2_binder"
###       ("_idts" ("_position" \<phi>) ("_position" \<psi>))
###       ("\<^const>HOML.c6"
###         ("\<^const>HOML.c4"
###           ("\<^const>MFilter.a" ("_position" \<phi>) ("_position" \<Phi>))
###           ("\<^const>MFilter.a" ("_position" \<psi>) ("_position" \<Phi>)))
###         ("\<^const>MFilter.a"
###           ("\<^const>MFilter.e" ("_position" \<phi>) ("_position" \<psi>))
###           ("_position" \<Phi>))))))
### ("\<^const>Pure.eq" ("_applC" ("\<^fixed>g") ("_position" \<Phi>))
###   ("\<^const>HOML.c4"
###     ("\<^const>HOML.c4"
###       ("\<^const>HOML.c4"
###         ("\<^const>MFilter.a" ("\<^const>MFilter.c") ("_position" \<Phi>))
###         ("\<^const>HOML.c3"
###           ("\<^const>MFilter.a" ("\<^const>MFilter.b")
###             ("_position" \<Phi>))))
###       ("\<^const>HOML.q2_binder"
###         ("_idts" ("_position" \<phi>) ("_position" \<psi>))
###         ("\<^const>HOML.c6"
###           ("\<^const>HOML.c4"
###             ("\<^const>MFilter.a" ("_position" \<phi>) ("_position" \<Phi>))
###             ("\<^const>MFilter.d" ("_position" \<phi>)
###               ("_position" \<psi>)))
###           ("\<^const>MFilter.a" ("_position" \<psi>)
###             ("_position" \<Phi>)))))
###     ("\<^const>HOML.q2_binder"
###       ("_idts" ("_position" \<phi>) ("_position" \<psi>))
###       ("\<^const>HOML.c6"
###         ("\<^const>HOML.c4"
###           ("\<^const>MFilter.a" ("_position" \<phi>) ("_position" \<Phi>))
###           ("\<^const>MFilter.a" ("_position" \<psi>) ("_position" \<Phi>)))
###         ("\<^const>MFilter.a"
###           ("\<^const>MFilter.e" ("_position" \<phi>) ("_position" \<psi>))
###           ("_position" \<Phi>))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### Ambiguous input (line 26 of "$AFP/SimplifiedOntologicalArgument/MFilter.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOML.g1"
###     ("\<^const>HOML.q2_binder"
###       ("_idts" ("_position" \<Phi>) ("_position" \<phi>))
###       ("\<^const>HOML.c6"
###         ("_applC" ("\<^const>MFilter.h") ("_position" \<Phi>))
###         ("\<^const>HOML.c10"
###           ("\<^const>HOML.c4"
###             ("\<^const>MFilter.a" ("_position" \<phi>) ("_position" \<Phi>))
###             ("\<^const>MFilter.a"
###               ("\<^const>MFilter.f" ("_position" \<phi>))
###               ("_position" \<Phi>))))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOML.g1"
###     ("\<^const>HOML.q2_binder"
###       ("_idts" ("_position" \<Phi>) ("_position" \<phi>))
###       ("\<^const>HOML.c6"
###         ("_applC" ("\<^const>MFilter.h") ("_position" \<Phi>))
###         ("\<^const>HOML.c3"
###           ("\<^const>HOML.c4"
###             ("\<^const>MFilter.a" ("_position" \<phi>) ("_position" \<Phi>))
###             ("\<^const>MFilter.a"
###               ("\<^const>MFilter.f" ("_position" \<phi>))
###               ("_position" \<Phi>))))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.MFilter"
### 0.052s elapsed time, 0.204s cpu time, 0.000s GC time
Loading theory "Draft.ScottVariant" (required by "Draft.ScottVariantMoreTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.269s elapsed time, 1.071s cpu time, 0.039s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ScottVariantMoreTemplates" via "Draft.ExtrEqs")
### Ambiguous input (line 10 of "$AFP/SimplifiedOntologicalArgument/ScottVariant.thy") produces 2 parse trees:
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOML.g1"
###     ("\<^const>HOML.q2_binder" ("_position" X)
###       ("\<^const>HOML.c7"
###         ("\<^const>HOML.c3"
###           ("_applC" ("\<^const>BaseDefs.posProp") ("_position" X)))
###         ("_applC" ("\<^const>BaseDefs.posProp")
###           ("\<^const>HOML.c11" ("_position" X)))))))
### ("\<^const>HOL.Trueprop"
###   ("\<^const>HOML.g1"
###     ("\<^const>HOML.q2_binder" ("_position" X)
###       ("\<^const>HOML.c7"
###         ("\<^const>HOML.c10"
###           ("_applC" ("\<^const>BaseDefs.posProp") ("_position" X)))
###         ("_applC" ("\<^const>BaseDefs.posProp")
###           ("\<^const>HOML.c11" ("_position" X)))))))
### Fortunately, only one parse tree is well-formed and type-correct,
### but you may still want to disambiguate your grammar or your input.
### theory "Draft.ScottVariant"
### 0.192s elapsed time, 0.758s cpu time, 0.091s GC time
### theory "HOL-Library.Nat_Bijection"
### 0.388s elapsed time, 1.523s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ScottVariantMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.748s elapsed time, 2.381s cpu time, 0.333s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.968s elapsed time, 2.797s cpu time, 0.770s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.844s elapsed time, 4.406s cpu time, 0.944s GC time
Loading theory "Draft.Templates" (required by "Draft.ScottVariantMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.062s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ScottVariantMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.462s elapsed time, 0.518s cpu time, 0.070s GC time
Loading theory "Draft.ScottVariantMoreTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ScottVariantMoreTemplates"
### 0.287s elapsed time, 0.363s cpu time, 0.000s GC time
val it = (): unit
