Loading theory "AWN.Lib" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv" via "Draft.E_Aodv_Data" via "Draft.E_All_ABCD" via "Draft.Aodv_Basic" via "AWN.AWN_SOS" via "AWN.AWN")
Loading theory "AWN.TransitionSystems" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv" via "Draft.E_Aodv_Data" via "Draft.E_All_ABCD" via "Draft.Aodv_Basic" via "AWN.AWN_SOS")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
### theory "AWN.Lib"
### 0.049s elapsed time, 0.232s cpu time, 0.000s GC time
Loading theory "AWN.AWN" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv" via "Draft.E_Aodv_Data" via "Draft.E_All_ABCD" via "Draft.Aodv_Basic" via "AWN.AWN_SOS")
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.551s cpu time, 0.042s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
class msg = type +
  fixes newpkt :: "nat * nat => 'a"
    and eq_newpkt :: "'a => bool"
  assumes "eq_newpkt_eq": "!!d i. eq_newpkt (newpkt (d, i))"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "AWN.TransitionSystems"
### 0.276s elapsed time, 1.120s cpu time, 0.042s GC time
Loading theory "AWN.Invariants" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv" via "AWN.AWN_Invariants")
### theory "HOL-Library.Set_Algebras"
### 0.211s elapsed time, 0.835s cpu time, 0.066s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.360s elapsed time, 1.434s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.ExtrEqs")
Proofs for inductive predicate(s) "reachablep"
  Proving monotonicity ...
### theory "AWN.Invariants"
### 0.294s elapsed time, 1.148s cpu time, 0.142s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.ExtrEqs")
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  right :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.074s elapsed time, 4.071s cpu time, 0.923s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.066s elapsed time, 3.867s cpu time, 0.936s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.246s elapsed time, 6.997s cpu time, 1.875s GC time
Loading theory "Draft.Templates" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.074s elapsed time, 0.161s cpu time, 0.039s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.E_Loop_FreedomMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.540s elapsed time, 1.102s cpu time, 0.051s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class tau = type +
  fixes tau :: "'a"
instantiation
  seq_action :: (type) tau
  tau_seq_action == tau :: 'a seq_action
instantiation
  node_action :: (type) tau
  tau_node_action == tau :: 'a node_action
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "{}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "AWN.AWN"
### 7.093s elapsed time, 14.358s cpu time, 3.400s GC time
Loading theory "AWN.AWN_Cterms" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv" via "AWN.AWN_SOS_Labels" via "AWN.Inv_Cterms" via "AWN.AWN_Labels")
Loading theory "AWN.AWN_SOS" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv" via "Draft.E_Aodv_Data" via "Draft.E_All_ABCD" via "Draft.Aodv_Basic")
Proofs for inductive predicate(s) "microstep"
  Proving monotonicity ...
Proofs for inductive predicate(s) "seqp_sosp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "parp_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "node_sosp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "ctermsp"
  Proving monotonicity ...
Proofs for inductive predicate(s) "pnet_sosp"
  Proving monotonicity ...
### theory "AWN.AWN_Cterms"
### 1.766s elapsed time, 3.908s cpu time, 0.455s GC time
Loading theory "AWN.AWN_Labels" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv" via "AWN.AWN_SOS_Labels" via "AWN.Inv_Cterms")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
consts
  labelfrom ::
    "int => int => ('s, 'm, 'p, 'a) seqp => int * ('s, 'm, 'p, int) seqp"
Proofs for inductive predicate(s) "cnet_sosp"
  Proving monotonicity ...
### theory "AWN.AWN_SOS"
### 2.425s elapsed time, 5.328s cpu time, 0.602s GC time
Loading theory "Draft.Aodv_Basic" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv" via "Draft.E_Aodv_Data" via "Draft.E_All_ABCD")
instantiation
  label :: (ord) ord
  less_eq_label == less_eq :: 'a label => 'a label => bool
  less_label == less :: 'a label => 'a label => bool
Found termination order: "{}"
### theory "AWN.AWN_Labels"
### 0.797s elapsed time, 1.685s cpu time, 0.147s GC time
Loading theory "AWN.Inv_Cterms" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv" via "AWN.AWN_SOS_Labels")
Loading theory "AWN.AWN_Invariants" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv")
### theory "Draft.Aodv_Basic"
### 0.717s elapsed time, 2.023s cpu time, 0.096s GC time
Loading theory "Draft.E_All_ABCD" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv" via "Draft.E_Aodv_Data")
### theory "Draft.E_All_ABCD"
### 0.052s elapsed time, 0.175s cpu time, 0.097s GC time
Loading theory "Draft.E_Aodv_Data" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv")
Loading theory "Draft.E_Aodv_Message" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv")
val simp_only = fn: thm list -> Proof.context -> int -> tactic
val shallow_simp = fn: Proof.context -> int -> tactic
val create_vcs = fn: Proof.context -> int -> tactic
val try_invs = fn: Proof.context -> int -> tactic
val try_final = fn: Proof.context -> int -> tactic
val each = fn: Proof.context -> int -> tactic
val simp_all = fn: Proof.context -> tactic
val intro_and_invs = fn: Proof.context -> int -> tactic
val process_vcs = fn: Proof.context -> 'a -> tactic
### theory "AWN.Inv_Cterms"
### 0.706s elapsed time, 2.237s cpu time, 0.193s GC time
Loading theory "AWN.AWN_SOS_Labels" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates" via "Draft.E_Aodv")
### theory "AWN.AWN_Invariants"
### 0.975s elapsed time, 3.314s cpu time, 0.293s GC time
### theory "AWN.AWN_SOS_Labels"
### 0.335s elapsed time, 1.275s cpu time, 0.100s GC time
### theory "Draft.E_Aodv_Data"
### 0.538s elapsed time, 1.847s cpu time, 0.100s GC time
Loading theory "Draft.E_Fresher" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom")
instantiation
  msg :: msg
  newpkt_msg == newpkt :: nat * nat => msg
  eq_newpkt_msg == eq_newpkt :: msg => bool
### theory "Draft.E_Aodv_Message"
### 0.843s elapsed time, 2.521s cpu time, 0.196s GC time
Loading theory "Draft.E_Aodv" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom" via "Draft.E_Aodv_Predicates")
### theory "Draft.E_Fresher"
### 0.336s elapsed time, 0.716s cpu time, 0.096s GC time
Found termination order: "{}"
instantiation
  pseqp :: ord
  less_eq_pseqp == less_eq :: pseqp => pseqp => bool
  less_pseqp == less :: pseqp => pseqp => bool
Found termination order: "{}"
Found termination order: "{}"
### theory "Draft.E_Aodv"
### 22.409s elapsed time, 48.458s cpu time, 0.926s GC time
Loading theory "Draft.E_Aodv_Predicates" (required by "Draft.E_Loop_FreedomMoreTemplates" via "Draft.E_Loop_Freedom")
### theory "Draft.E_Aodv_Predicates"
### 0.135s elapsed time, 0.293s cpu time, 0.031s GC time
Loading theory "Draft.E_Loop_Freedom" (required by "Draft.E_Loop_FreedomMoreTemplates")
### theory "Draft.E_Loop_Freedom"
### 0.175s elapsed time, 0.175s cpu time, 0.000s GC time
Loading theory "Draft.E_Loop_FreedomMoreTemplates"
val templateLemmas =
   [("E_Loop_Freedom.rt_graph_not_dip",
     "(?ip, ?ip') : rt_graph ?\<sigma> ?dip ==> ?ip ~= ?dip",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 2, template_var 1),
                template_var 0))
            )],
       template_negation
        (template_equation (template_var 3, template_var 0)))),
    ("E_Loop_Freedom.rt_graph_not_dip_trans",
     "(?ip, ?ip') : (rt_graph ?\<sigma> ?dip)^+ ==> ?ip ~= ?dip",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 3,
                template_app
                 (template_app (template_hole 2, template_var 1),
                  template_var 0)))
            )],
       template_negation
        (template_equation (template_var 3, template_var 0)))),
    ("E_Loop_Freedom.rt_graph_vD",
     "(?ip, ?ip') : rt_graph ?\<sigma> ?dip ==>
      ?dip : vD (rt (?\<sigma> ?ip))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 3, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_var 1, template_var 3))))
           ))),
    ("E_Loop_Freedom.rt_graph_vD_trans",
     "(?ip, ?ip') : (rt_graph ?\<sigma> ?dip)^+ ==>
      ?dip : vD (rt (?\<sigma> ?ip))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 3),
                  template_var 2)),
              template_app
               (template_hole 4,
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 0),
             template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app (template_var 1, template_var 3))))
           ))),
    ("E_Loop_Freedom.rt_graph_nhip_is_nhop",
     "(?ip, ?ip') : rt_graph ?\<sigma> ?dip ==>
      ?ip' = the (nhop (rt (?\<sigma> ?ip)) ?dip)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 5, template_var 1),
                template_var 0))
            )],
       template_equation
        (template_var 2,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 1, template_var 3)),
               template_var 0)))))),
    ("E_Loop_Freedom.rt_graphE",
     "(?ip, ?ip') : rt_graph ?\<sigma> ?dip ==>
      ?ip ~= ?dip &
      (EX r. rt (?\<sigma> ?ip) = r &
             (EX dsn dsk hops. r ?dip = Some (dsn, dsk, val, hops, ?ip')))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 3),
                  template_var 2)),
              template_app
               (template_app (template_hole 14, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 13,
               template_app
                (template_hole 12,
                 template_app
                  (template_app (template_hole 11, template_var 3),
                   template_var 0))),
             template_app (template_hole 10, t_empty))
           ))),
    ("E_Loop_Freedom.inv_to_loop_freedom",
     "ALL i dip.
         let nhip = the (nhop (rt (?\<sigma> i)) dip)
         in dip : vD (rt (?\<sigma> i)) Int vD (rt (?\<sigma> nhip)) &
            nhip ~= dip -->
            rt (?\<sigma> i)
            \<sqsubset>\<^bsub>dip\<^esub> rt (?\<sigma> nhip) ==>
      ALL dip. irrefl ((rt_graph ?\<sigma> dip)^+)",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate (template_app (template_hole 16, t_empty))))]:
   (string * thm * template) list
### theory "Draft.E_Loop_FreedomMoreTemplates"
### 0.491s elapsed time, 0.626s cpu time, 0.000s GC time
val it = (): unit
