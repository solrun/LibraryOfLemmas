Loading theory "Draft.Goodstein_Lambda" (required by "Draft.Goodstein_LambdaMoreTemplates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Goodstein_LambdaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Goodstein_LambdaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Goodstein_LambdaMoreTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.126s elapsed time, 0.515s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Goodstein_LambdaMoreTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.874s cpu time, 0.046s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Goodstein_LambdaMoreTemplates" via "Draft.ExtrEqs")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Proofs for inductive predicate(s) "hbasep"
  Proving monotonicity ...
### theory "HOL-Library.Nat_Bijection"
### 0.349s elapsed time, 1.402s cpu time, 0.126s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Goodstein_LambdaMoreTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  addO :: "Ord => Ord => Ord"
consts
  snth :: "'a stream => nat => 'a"
consts
  mulO :: "Ord => Ord => Ord"
consts
  exp\<omega> :: "Ord => Ord"
consts
  evalO :: "nat => Ord => nat"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  goodsteinO :: "nat => Ord => nat"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  stepO :: "nat => Ord => Ord"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 1.011s elapsed time, 3.811s cpu time, 0.849s GC time
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
"0"
  :: "nat"
Found termination order: "size <*mlex*> {}"
"1"
  :: "nat"
"2"
  :: "nat"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
"2"
  :: "nat"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.103s elapsed time, 4.187s cpu time, 0.825s GC time
Found termination order: "size <*mlex*> {}"
"[4, 26, 41, 60, 83, 109, 139, 173, 211, 253]"
  :: "nat list"
Found termination order: "size <*mlex*> {}"
Proofs for inductive predicate(s) "hbase_extp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
"[4, 26, 41, 60, 83, 109, 139, 173, 211, 253]"
  :: "nat list"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  fold_nat :: "nat => ('a => 'a) => 'a => 'a"
consts
  fold_Ord :: "Ord => 'a => ('a => 'a) => ((nat => 'a) => 'a) => 'a"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Goodstein_Lambda"
### 1.739s elapsed time, 6.374s cpu time, 1.004s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.005s elapsed time, 6.339s cpu time, 1.023s GC time
Loading theory "Draft.Templates" (required by "Draft.Goodstein_LambdaMoreTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.117s cpu time, 0.041s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Goodstein_LambdaMoreTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.448s elapsed time, 0.453s cpu time, 0.000s GC time
Loading theory "Draft.Goodstein_LambdaMoreTemplates"
val templateLemmas =
   [("Goodstein_Lambda.evalO_\<omega>", "evalO ?b \<omega> = ?b",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Goodstein_Lambda.O2C_C2O", "O2C (C2O ?n) = ?n",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Goodstein_Lambda.addO_Z", "addO Z ?n = ?n",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("Goodstein_Lambda.funC_ne", "funC ?m (Suc ?n) ~= []",
     template_negation
      (
         template_equation
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_app (template_hole 1, template_var 0)),
           template_hole 0)
         )),
    ("Goodstein_Lambda.hbase_extp_hbase_ext_eq",
     "hbase_extp ?b = (%x. x : hbase_ext ?b)",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("Goodstein_Lambda.hbasep_hbase_eq", "hbasep ?b = (%x. x : hbase ?b)",
     template_equation
      (template_app (template_hole 2, template_var 0), t_empty)),
    ("Goodstein_Lambda.sum_list_replicate",
     "sum_list (replicate ?n ?x) = ?n * ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Goodstein_Lambda.evalO_n", "evalO ?b ((S ^^ ?n) Z) = ?n",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 0),
             template_hole 1),
           template_hole 0)),
       template_var 0)),
    ("Goodstein_Lambda.N2H_0", "N2H (Suc (Suc ?c)) 0 = C []",
     template_equation
      (template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 3, template_var 0))),
         template_hole 2),
       template_app (template_hole 1, template_hole 0))),
    ("Goodstein_Lambda.evalO_exp\<omega>",
     "evalO ?b (exp\<omega> ?n) = ?b ^ evalO ?b ?n",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app
          (template_app (template_hole 2, template_var 1),
           template_var 0)))),
    ("Goodstein_Lambda.exp\<omega>_addO",
     "exp\<omega> (addO ?n ?m) = mulO (exp\<omega> ?n) (exp\<omega> ?m)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0, template_app (template_hole 2, template_var 1)),
         template_app (template_hole 2, template_var 0)))),
    ("Goodstein_Lambda.C2O_inj", "C2O ?n = C2O ?m ==> ?n = ?m",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Goodstein_Lambda.H2N_inv",
     "H2N (Suc (Suc ?b)) (N2H (Suc (Suc ?b)) ?n) = ?n",
     template_equation
      (template_app
        (template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 1, template_var 1))),
         template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 1,
               template_app (template_hole 1, template_var 1))),
           template_var 0)),
       template_var 0)),
    ("Goodstein_Lambda.addO_assoc",
     "addO ?n (addO ?m ?p) = addO (addO ?n ?m) ?p",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Goodstein_Lambda.mulO_assoc",
     "mulO ?n (mulO ?m ?p) = mulO (mulO ?n ?m) ?p",
     template_equation
      (template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0))),
    ("Goodstein_Lambda.hbase_mono", "?n : hbase ?b ==> ?n : hbase (Suc ?b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 2, template_var 1),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Goodstein_Lambda.evalO_addO",
     "evalO ?b (addO ?n ?m) = evalO ?b ?n + evalO ?b ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Goodstein_Lambda.evalO_mulO",
     "evalO ?b (mulO ?n ?m) = evalO ?b ?n * evalO ?b ?m",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 2, template_var 2),
           template_var 0)))),
    ("Goodstein_Lambda.evalC_funC",
     "evalC ?b (C (funC ?n ?b)) = evalC ?b (C [?n])",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 0),
             template_var 1))),
       template_app
        (template_app (template_hole 4, template_var 1),
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))))),
    ("Goodstein_Lambda.C2O_app",
     "C2O (C (?xs @ ?ys)) = addO (C2O (C ?ys)) (C2O (C ?xs))",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0))),
         template_app
          (template_hole 3,
           template_app (template_hole 2, template_var 1))))),
    ("Goodstein_Lambda.mul0_distrib",
     "mulO ?n (addO ?p ?q) = addO (mulO ?n ?p) (mulO ?n ?q)",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 2),
             template_var 1)),
         template_app
          (template_app (template_hole 1, template_var 2),
           template_var 0)))),
    ("Goodstein_Lambda.evalC_surjective",
     "EX n':hbase (Suc (Suc ?b)). evalC (Suc (Suc ?b)) n' = ?n",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_hole 3,
               template_app
                (template_hole 2,
                 template_app (template_hole 2, template_var 1)))),
           t_empty)
         )),
    ("Goodstein_Lambda.N2H_inv",
     "?n : hbase ?b ==> N2H ?b (H2N ?b ?n) = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_var 1))),
    ("Goodstein_Lambda.hbase_hd'",
     "C (?n # ?ns) : hbase ?b ==> ?n : hbase ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Goodstein_Lambda.hbase_ext_hd'",
     "C (?n # ?ns) : hbase_ext ?b ==> ?n : hbase_ext ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Goodstein_Lambda.evalC_sum_list",
     "evalC ?b (C ?ns) = (SUM n<-?ns. ?b ^ evalC ?b n)",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1),
         template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, t_empty), template_var 0)))),
    ("Goodstein_Lambda.C2O_replicate",
     "C2O (C (replicate ?i ?n)) =
      mulO (exp\<omega> (C2O ?n)) ((S ^^ ?i) Z)",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_hole 6,
           template_app
            (template_app (template_hole 5, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 4,
           template_app
            (template_hole 3,
             template_app (template_hole 7, template_var 0))),
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_hole 0)))),
    ("Goodstein_Lambda.N2H_nz", "0 < ?n ==> N2H (Suc (Suc ?c)) ?n ~= C []",
     template_implication
      ([template_inequation (less_than, template_hole 6, template_var 1)],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 2, template_var 0))),
               template_var 1),
             template_app (template_hole 1, template_hole 0))
           ))),
    ("Goodstein_Lambda.hbase_tl'",
     "C (?n # ?ns) : hbase ?b ==> C ?ns : hbase ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app
                   (template_app (template_hole 1, template_var 2),
                    template_var 1))),
              template_app (template_hole 0, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Goodstein_Lambda.hbase_ext_tl'",
     "C (?n # ?ns) : hbase_ext ?b ==> C ?ns : hbase ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app
                   (template_app (template_hole 2, template_var 2),
                    template_var 1))),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app (template_hole 3, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Goodstein_Lambda.addO_exp\<omega>_inj",
     "addO ?n (exp\<omega> ?m) = addO ?n' (exp\<omega> ?m') ==> ?m = ?m'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3),
            template_app (template_hole 0, template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app (template_hole 0, template_var 0)))],
       template_equation (template_var 2, template_var 0))),
    ("Goodstein_Lambda.addO_exp\<omega>_inj",
     "addO ?n (exp\<omega> ?m) = addO ?n' (exp\<omega> ?m') ==> ?n = ?n'",
     template_implication
      ([template_equation
         (template_app
           (template_app (template_hole 1, template_var 3),
            template_app (template_hole 0, template_var 2)),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_app (template_hole 0, template_var 0)))],
       template_equation (template_var 3, template_var 1))),
    ("Goodstein_Lambda.evalC_replicate",
     "evalC ?b (C (replicate ?c ?n)) = ?c * evalC ?b (C [?n])",
     template_equation
      (template_app
        (template_app (template_hole 5, template_var 2),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_var 1),
         template_app
          (template_app (template_hole 5, template_var 2),
           template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 1, template_var 0),
               template_hole 0)))))),
    ("Goodstein_Lambda.evalC_app",
     "evalC ?b (C (?ns @ ?ms)) = evalC ?b (C ?ns) + evalC ?b (C ?ms)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 2),
         template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0))),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 3, template_var 2),
             template_app (template_hole 2, template_var 1))),
         template_app
          (template_app (template_hole 3, template_var 2),
           template_app (template_hole 2, template_var 0))))),
    ("Goodstein_Lambda.stepC_sound",
     "?n : hbase_ext (Suc (Suc ?c)) ==> stepC ?c ?n : hbase (Suc (Suc ?c))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app
               (template_hole 3,
                template_app
                 (template_hole 2,
                  template_app (template_hole 2, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 1)),
             template_app
              (template_hole 0,
               template_app
                (template_hole 2,
                 template_app (template_hole 2, template_var 0))))
           ))),
    ("Goodstein_Lambda.add\<^sub>O",
     "\<langle>addO ?n ?m\<rangle>\<^sub>O =
      (%z s l.
          \<langle>?m\<rangle>\<^sub>O (\<langle>?n\<rangle>\<^sub>O z s l)
           s l)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       t_empty)),
    ("Goodstein_Lambda.hbase_singletonI",
     "?n : hbase (Suc (Suc ?b)) ==> C [?n] : hbase (Suc (Suc ?b))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app
               (template_hole 4,
                template_app
                 (template_hole 3,
                  template_app (template_hole 3, template_var 0))))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0))),
             template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 3, template_var 0))))
           ))),
    ("Goodstein_Lambda.hbase_elt",
     "[| C ?ns : hbase ?b; ?n : set ?ns |] ==> ?n : hbase ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              template_app (template_hole 1, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_app (template_hole 0, template_var 2))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 3, template_var 0),
             template_app (template_hole 1, template_var 1))
           ))),
    ("Goodstein_Lambda.mul\<^sub>O",
     "\<langle>mulO ?n ?m\<rangle>\<^sub>O =
      (%z s l.
          \<langle>?m\<rangle>\<^sub>O z
           (%m. \<langle>?n\<rangle>\<^sub>O m s l) l)",
     template_equation
      (template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       t_empty)),
    ("Goodstein_Lambda.goodstein_impl",
     "?c ~= 0 ==> goodstein ?c ?n = goodsteinO ?c (C2O (N2H (?c + 1) ?n))",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 6))],
       template_equation
        (template_app
          (template_app (template_hole 5, template_var 1), template_var 0),
         template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 3,
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_hole 0)),
               template_var 0)))))),
    ("Goodstein_Lambda.hbase_hd",
     "[| C ?ns : hbase ?b; ?ns ~= [] |] ==> hd ?ns : hbase ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_app (template_hole 4, template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 4, template_var 0))
           ))),
    ("Goodstein_Lambda.hbase_tl",
     "[| C ?ns : hbase ?b; ?ns ~= [] |] ==> C (tl ?ns) : hbase ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app (template_hole 5, template_var 1)),
              template_app (template_hole 4, template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app (template_hole 0, template_var 1))),
             template_app (template_hole 4, template_var 0))
           ))),
    ("Goodstein_Lambda.hbase_ext_tl",
     "[| C ?ns : hbase_ext ?b; ?ns ~= [] |] ==> C (tl ?ns) : hbase ?b",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 6, template_var 1)),
              template_app (template_hole 5, template_var 0))
            ),
        template_negation
         (template_equation (template_var 1, template_hole 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app (template_hole 1, template_var 1))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Goodstein_Lambda.stepC_dec",
     "?n ~= C [] ==>
      Suc (evalC (Suc (Suc ?c)) (stepC ?c ?n)) = evalC (Suc (Suc ?c)) ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 5, template_hole 4))
            )],
       template_equation
        (template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 2,
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))),
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_hole 2,
               template_app (template_hole 2, template_var 0))),
           template_var 1)))),
    ("Goodstein_Lambda.stepC_app",
     "?n ~= C [] ==>
      stepC ?c (C (unC ?n @ ?ns)) = C (unC (stepC ?c ?n) @ ?ns)",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 2,
              template_app (template_hole 4, template_hole 3))
            )],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 1),
           template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 0))),
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 2, template_var 1),
                   template_var 2))),
             template_var 0))))),
    ("Goodstein_Lambda.stepC_cons",
     "?ns ~= [] ==>
      stepC ?c (C (?n # ?ns)) = C (unC (stepC ?c (C [?n])) @ ?ns)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 6))],
       template_equation
        (template_app
          (template_app (template_hole 4, template_var 1),
           template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 0),
               template_var 2))),
         template_app
          (template_hole 3,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 0,
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_app
                    (template_hole 3,
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_hole 6))))),
             template_var 2))))),
    ("Goodstein_Lambda.goodstein\<^sub>O",
     "goodsteinO ?c ?n =
      \<langle>?n\<rangle>\<^sub>O (%x. x) (%n m. n (m + 1))
       (%f m. f (m + 2) m) ?c",
     template_equation
      (template_app
        (template_app (template_hole 6, template_var 1), template_var 0),
       template_app
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 0), t_empty),
             t_empty),
           t_empty),
         template_var 1))),
    ("Goodstein_Lambda.C2O_cons",
     "C2O (C (?n # ?ns)) =
      (if ?n = C [] then S (C2O (C ?ns))
       else L (%i. C2O (C (funC ?n i @ ?ns))))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_hole 8,
                template_app
                 (template_app (template_hole 7, template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 1),
                   template_app (template_hole 8, template_hole 4))),
               template_app
                (template_hole 3,
                 template_app
                  (template_hole 9,
                   template_app (template_hole 8, template_var 0)))),
             template_app (template_hole 2, t_empty))
           ))),
    ("Goodstein_Lambda.stepC_dec'",
     "?n ~= C [] ==> evalC (?c + 3) (stepC ?c ?n) < evalC (?c + 3) ?n",
     template_implication
      ([template_negation
         (
            template_equation
             (template_var 1,
              template_app (template_hole 8, template_hole 7))
            )],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 0),
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_hole 1)))),
           template_var 1)))),
    ("Goodstein_Lambda.N2H_eqI",
     "[| ?n : hbase (Suc (Suc ?b)); H2N (Suc (Suc ?b)) ?n = ?m |]
      ==> N2H (Suc (Suc ?b)) ?m = ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_app
               (template_hole 5,
                template_app
                 (template_hole 4,
                  template_app (template_hole 4, template_var 1))))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 2,
              template_app
               (template_hole 4,
                template_app (template_hole 4, template_var 1))),
            template_var 2),
          template_var 0)],
       template_equation
        (template_app
          (template_app
            (template_hole 0,
             template_app
              (template_hole 4,
               template_app (template_hole 4, template_var 1))),
           template_var 0),
         template_var 2))),
    ("Goodstein_Lambda.evalC_inj_on_hbase",
     "[| ?n : hbase ?b; ?m : hbase ?b; evalC ?b ?n = evalC ?b ?m |]
      ==> ?n = ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            ),
        template_equation
         (template_app
           (template_app (template_hole 1, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_equation (template_var 2, template_var 0))),
    ("Goodstein_Lambda.exp\<omega>\<^sub>O",
     "\<langle>exp\<omega> ?n\<rangle>\<^sub>O =
      (%z s l.
          \<langle>?n\<rangle>\<^sub>O s
           (%x z. l (%n. \<langle>n\<rangle>\<^sub>N x z))
           (%f z. l (%n. f n z)) z)",
     template_equation
      (template_app
        (template_hole 3, template_app (template_hole 2, template_var 0)),
       t_empty)),
    ("Goodstein_Lambda.N2H_neI",
     "[| ?n : hbase (Suc (Suc ?b)); H2N (Suc (Suc ?b)) ?n ~= ?m |]
      ==> N2H (Suc (Suc ?b)) ?m ~= ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app (template_hole 5, template_var 1))))
            ),
        template_negation
         (
            template_equation
             (template_app
               (template_app
                 (template_hole 2,
                  template_app
                   (template_hole 5,
                    template_app (template_hole 5, template_var 1))),
                template_var 2),
              template_var 0)
            )],
       template_negation
        (
           template_equation
            (template_app
              (template_app
                (template_hole 0,
                 template_app
                  (template_hole 5,
                   template_app (template_hole 5, template_var 1))),
               template_var 0),
             template_var 2)
           ))),
    ("Goodstein_Lambda.hbase_funC",
     "[| ?c ~= 0; C (?n # ?ns) : hbase_ext (Suc ?c) |]
      ==> C (funC ?n (Suc ?c) @ ?ns) : hbase_ext (Suc ?c)",
     template_implication
      ([template_negation
         (template_equation (template_var 2, template_hole 7)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_hole 5,
                  template_app
                   (template_app (template_hole 4, template_var 1),
                    template_var 0))),
              template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 1),
                       template_app (template_hole 2, template_var 2))),
                   template_var 0))),
             template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 2)))
           ))),
    ("Goodstein_Lambda.hbase_evalC_mono",
     "[| ?n : hbase ?b; ?m : hbase ?b; evalC ?b ?n < evalC ?b ?m |]
      ==> evalC (Suc ?b) ?n < evalC (Suc ?b) ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            ),
        template_inequation
         (less_than,
          template_app
           (template_app (template_hole 1, template_var 1), template_var 2),
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 0))],
       template_inequation
        (less_than,
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 2),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 1)),
           template_var 0)))),
    ("Goodstein_Lambda.freeOrd",
     "[| !!n. ?h (?s n) = ?s' (?h n); !!f. ?h (?l f) = ?l' (%i. ?h (f i)) |]
      ==> ?h (\<langle>?n\<rangle>\<^sub>O ?z ?s ?l) =
          \<langle>?n\<rangle>\<^sub>O (?h ?z) ?s' ?l'",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 2, t_empty))],
       template_equation
        (template_app
          (template_var 6,
           template_app
            (template_app
              (template_app
                (template_app (template_hole 1, template_var 1),
                 template_var 0),
               template_var 5),
             template_var 3)),
         template_app
          (template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_app (template_var 6, template_var 0)),
             template_var 4),
           template_var 2)))),
    ("Goodstein_Lambda.goodstein_aux",
     "goodsteinC (Suc ?c) (N2H (Suc (Suc ?c)) (Suc ?n)) =
      goodsteinC (?c + 2)
       (N2H (?c + 3) (H2N (?c + 3) (N2H (?c + 2) (?n + 1)) - 1))",
     template_equation
      (template_app
        (template_app
          (template_hole 10,
           template_app (template_hole 9, template_var 1)),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_hole 9,
               template_app (template_hole 9, template_var 1))),
           template_app (template_hole 9, template_var 0))),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app (template_hole 7, template_var 1),
             template_app
              (template_hole 6,
               template_app (template_hole 5, template_hole 4)))),
         template_app
          (template_app
            (template_hole 8,
             template_app
              (template_app (template_hole 7, template_var 1),
               template_app
                (template_hole 6,
                 template_app (template_hole 3, template_hole 4)))),
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app (template_hole 7, template_var 1),
                     template_app
                      (template_hole 6,
                       template_app (template_hole 3, template_hole 4)))),
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app
                      (template_app (template_hole 7, template_var 1),
                       template_app
                        (template_hole 6,
                         template_app (template_hole 5, template_hole 4)))),
                   template_app
                    (template_app (template_hole 7, template_var 0),
                     template_hole 0)))),
             template_hole 0))))),
    ("Goodstein_Lambda.hbaseI2",
     "[| ?i < ?b; ?n : hbase ?b; C ?m : hbase ?b;
         !!m'. m' : set ?m ==> evalC ?b ?n < evalC ?b m' |]
      ==> C (replicate ?i ?n @ ?m) : hbase ?b",
     template_implication
      ([template_inequation (less_than, template_var 3, template_var 2),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 1),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app (template_hole 5, template_var 0)),
              template_app (template_hole 6, template_var 2))
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app (template_hole 0, template_var 3),
                       template_var 1)),
                   template_var 0))),
             template_app (template_hole 6, template_var 2))
           ))),
    ("Goodstein_Lambda.C_Ord_induct",
     "[| ?P (C []); !!ns. ?P (C ns) ==> ?P (C (C [] # ns));
         !!n ns ms.
            (!!i. ?P (C (funC (C (n # ns)) i @ ms))) ==>
            ?P (C (C (n # ns) # ms)) |]
      ==> ?P ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_var 1,
              template_app (template_hole 7, template_hole 6))
            ),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_var 1, template_var 0)))),
    ("Goodstein_Lambda.base_red",
     "[| !!n'. n' : set ?ns ==> ?n < n'; ?i < ?b; ?i ~= 0;
         !!m'. m' : set ?ms ==> ?m < m'; ?j < ?b; ?j ~= 0;
         ?i * ?b ^ ?n + sum_list (map ((^) ?b) ?ns) =
         ?j * ?b ^ ?m + sum_list (map ((^) ?b) ?ms) |]
      ==> ?i = ?j & ?n = ?m",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_inequation (less_than, template_var 4, template_var 3),
        template_negation
         (template_equation (template_var 4, template_hole 6)),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_inequation (less_than, template_var 0, template_var 3),
        template_negation
         (template_equation (template_var 0, template_hole 6)),
        template_equation
         (template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 4),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 5))),
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, t_empty), template_var 6))),
          template_app
           (template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_var 0),
                template_app
                 (template_app (template_hole 3, template_var 3),
                  template_var 1))),
            template_app
             (template_hole 2,
              template_app
               (template_app (template_hole 1, t_empty),
                template_var 2))))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app
                (template_app (template_hole 7, template_var 4),
                 template_var 0)),
             template_app
              (template_app (template_hole 7, template_var 5),
               template_var 1))
           )))]:
   (string * thm * template) list
### theory "Draft.Goodstein_LambdaMoreTemplates"
### 0.350s elapsed time, 0.481s cpu time, 0.057s GC time
val it = (): unit
