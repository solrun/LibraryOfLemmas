Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Impl_Array_MapTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "Draft.Intf_Comp" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map")
Loading theory "Draft.SetIterator" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map" via "Draft.Diff_Array" via "Draft.Assoc_List" via "Draft.SetIteratorOperations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Impl_Array_MapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.133s elapsed time, 0.543s cpu time, 0.049s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Impl_Array_MapTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.347s elapsed time, 1.376s cpu time, 0.124s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Impl_Array_MapTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.223s elapsed time, 0.860s cpu time, 0.075s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Impl_Array_MapTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale linorder_on
  fixes D :: "'a set"
    and cmp :: "'a => 'a => comp_res"
  assumes "linorder_on D cmp"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "(%p. length (snd (snd p))) <*mlex*> {}"
consts
  cmp_lex' :: "('a => 'b => comp_res) => 'a list => 'b list => comp_res"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "{}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  left :: "'a tree => 'a tree"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  right :: "'a tree => 'a tree"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale eq_linorder_on
  fixes D :: "'a set"
    and cmp :: "'a => 'a => comp_res"
  assumes "eq_linorder_on D cmp"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.SetIterator"
### 1.423s elapsed time, 5.359s cpu time, 1.014s GC time
Loading theory "Draft.Idx_Iterator" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map" via "Draft.Iterator")
Found termination order: "size <*mlex*> {}"
### theory "Draft.Intf_Comp"
### 1.516s elapsed time, 5.704s cpu time, 1.100s GC time
Loading theory "Draft.SetIteratorOperations" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map" via "Draft.Diff_Array" via "Draft.Assoc_List")
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.297s elapsed time, 4.853s cpu time, 0.976s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Impl_Array_MapTemplates" via "Draft.ExtrEqs")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Idx_Iterator"
### 0.586s elapsed time, 2.273s cpu time, 0.205s GC time
Loading theory "Draft.Intf_Map" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map" via "Draft.Gen_Map")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Intf_Map"
### 0.329s elapsed time, 1.268s cpu time, 0.098s GC time
linorder_on (?f ` ?D) ?cmp ==> linorder_on ?D (cmp_img ?f ?cmp)
"cmp_lex"
  :: "('a => 'b => comp_res) => 'a list => 'b list => comp_res"
"cmp_prod"
  :: "('a => 'b => comp_res)
      => ('c => 'd => comp_res) => 'a * 'c => 'b * 'd => comp_res"
"op_map_restrict"
  :: "('a * 'b => bool) => ('a => 'b option) => 'a => 'b option"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 0.991s elapsed time, 3.665s cpu time, 0.367s GC time
### theory "HOL-Library.Tree"
### 2.340s elapsed time, 8.634s cpu time, 1.344s GC time
Loading theory "Draft.Templates" (required by "Draft.Impl_Array_MapTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.059s elapsed time, 0.119s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Impl_Array_MapTemplates")
### theory "Draft.SetIteratorOperations"
### 1.702s elapsed time, 5.393s cpu time, 0.460s GC time
Loading theory "Draft.Assoc_List" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map" via "Draft.Diff_Array")
Loading theory "Draft.Proper_Iterator" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map" via "Draft.Iterator" via "Draft.It_to_It")
Loading theory "Draft.SetIteratorGA" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map" via "Draft.Iterator")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.613s elapsed time, 1.553s cpu time, 0.134s GC time
structure Icf_Proper_Iterator:
  sig
    val add: attribute
    val add_thm: thm -> Context.generic -> Context.generic
    val del: attribute
    val del_thm: thm -> Context.generic -> Context.generic
    val get: Proof.context -> thm list
    structure icf_proper_iteratorI: NAMED_THMS
    val setup: theory -> theory
  end
instantiation
  assoc_list :: (equal, equal) equal
  equal_assoc_list == equal_class.equal ::
    ('a, 'b) assoc_list => ('a, 'b) assoc_list => bool
instantiation
  assoc_list :: (type, type) size
  size_assoc_list == size :: ('a, 'b) assoc_list => nat
consts
  map_ran ::
    "('key => 'val => 'val') => ('key * 'val) list => ('key * 'val') list"
### theory "Draft.Assoc_List"
### 0.393s elapsed time, 1.335s cpu time, 0.136s GC time
Loading theory "Draft.Diff_Array" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map")
### theory "Draft.Proper_Iterator"
### 0.450s elapsed time, 1.490s cpu time, 0.176s GC time
Loading theory "Draft.It_to_It" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map" via "Draft.Iterator")
Loading theory "Draft.Gen_Iterator" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map" via "Draft.Iterator")
locale proper_it_loc
  fixes
    it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
    and
    it' ::
      "'s => ('\<sigma> => bool)
             => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
  assumes "proper_it_loc it it'"
### theory "Draft.It_to_It"
### 0.103s elapsed time, 0.410s cpu time, 0.000s GC time
### theory "Draft.SetIteratorGA"
### 0.660s elapsed time, 2.221s cpu time, 0.219s GC time
### theory "Draft.Gen_Iterator"
### 0.481s elapsed time, 1.282s cpu time, 0.108s GC time
Loading theory "Draft.Iterator" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map")
consts
  array_length :: "'a array => nat"
consts
  array_get :: "'a array => nat => 'a"
consts
  array_set :: "'a array => nat => 'a => 'a array"
consts
  array_grow :: "'a array => nat => 'a => 'a array"
consts
  array_shrink :: "'a array => nat => 'a array"
consts
  list_of_array :: "'a array => 'a list"
consts
  assoc_list_of_array :: "'a array => (nat * 'a) list"
### Rewrite rule not in simpset:
### Wellfounded.accp assoc_list_of_array_code_rel (?a1, ?n1) ==>
### assoc_list_of_array_code ?a1 ?n1 ==
### if array_length ?a1 <= ?n1 then []
### else (?n1, array_get ?a1 ?n1) # assoc_list_of_array_code ?a1 (?n1 + 1)
### theory "Draft.Iterator"
### 0.437s elapsed time, 0.917s cpu time, 0.124s GC time
Loading theory "Draft.Gen_Map" (required by "Draft.Impl_Array_MapTemplates" via "Draft.Impl_Array_Map")
### theory "Draft.Diff_Array"
### 1.051s elapsed time, 2.520s cpu time, 0.272s GC time
is_map_to_list ?Rk ?Rv ?Rm ?tsl ==
is_map_to_sorted_list (%_ _. True) ?Rk ?Rv ?Rm ?tsl
[| is_map_to_sorted_list ?ordR ?Rk ?Rv ?Rm ?tsl;
   (?m, ?m') : \<langle>?Rk, ?Rv\<rangle>?Rm;
   !!l'. [| (?tsl ?m, l')
            : \<langle>?Rk \<times>\<^sub>r ?Rv\<rangle>list_rel;
            RETURN l'
            <= it_to_sorted_list (key_rel ?ordR) (map_to_set ?m') |]
         ==> ?thesis |]
==> ?thesis
### theory "Draft.Gen_Map"
### 0.747s elapsed time, 1.599s cpu time, 1.009s GC time
*** Failed to load theory "Draft.Impl_Array_Map" (unresolved "Draft.Diff_Array")
*** Failed to load theory "Draft.Impl_Array_MapTemplates" (unresolved "Draft.Impl_Array_Map")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "180")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 1067 of "$AFP/Collections/Lib/Diff_Array.thy")
Exception- TOPLEVEL_ERROR raised
