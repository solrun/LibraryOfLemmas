Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Intf_HashTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Intf_HashTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Intf_HashTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Intf_HashTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.145s elapsed time, 0.592s cpu time, 0.050s GC time
Loading theory "Draft.Code_Target_ICF" (required by "Draft.Intf_HashTemplates" via "Draft.Intf_Hash")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.281s elapsed time, 1.132s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Intf_HashTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.401s elapsed time, 1.589s cpu time, 0.144s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Intf_HashTemplates" via "Draft.ExtrEqs")
### theory "Draft.Code_Target_ICF"
### 0.312s elapsed time, 1.220s cpu time, 0.094s GC time
Loading theory "Draft.HashCode" (required by "Draft.Intf_HashTemplates" via "Draft.Intf_Hash")
class hashable = type +
  fixes hashcode :: "'a => uint32"
    and def_hashmap_size :: "'a itself => nat"
  assumes "def_hashmap_size": "1 < def_hashmap_size TYPE('a)"
consts
  left :: "'a tree => 'a tree"
instantiation
  unit :: hashable
  hashcode_unit == hashcode :: unit => uint32
  def_hashmap_size_unit == def_hashmap_size :: unit itself => nat
consts
  right :: "'a tree => 'a tree"
instantiation
  bool :: hashable
  hashcode_bool == hashcode :: bool => uint32
  def_hashmap_size_bool == def_hashmap_size :: bool itself => nat
instantiation
  int :: hashable
  hashcode_int == hashcode :: int => uint32
  def_hashmap_size_int == def_hashmap_size :: int itself => nat
instantiation
  integer :: hashable
  hashcode_integer == hashcode :: integer => uint32
  def_hashmap_size_integer == def_hashmap_size :: integer itself => nat
Found termination order: "size <*mlex*> {}"
instantiation
  nat :: hashable
  hashcode_nat == hashcode :: nat => uint32
  def_hashmap_size_nat == def_hashmap_size :: nat itself => nat
instantiation
  char :: hashable
  hashcode_char == hashcode :: char => uint32
  def_hashmap_size_char == def_hashmap_size :: char itself => nat
instantiation
  prod :: (hashable, hashable) hashable
  hashcode_prod == hashcode :: 'a * 'b => uint32
  def_hashmap_size_prod == def_hashmap_size :: ('a * 'b) itself => nat
Found termination order: "size <*mlex*> {}"
instantiation
  sum :: (hashable, hashable) hashable
  hashcode_sum == hashcode :: 'a + 'b => uint32
  def_hashmap_size_sum == def_hashmap_size :: ('a + 'b) itself => nat
instantiation
  list :: (hashable) hashable
  hashcode_list == hashcode :: 'a list => uint32
  def_hashmap_size_list == def_hashmap_size :: 'a list itself => nat
instantiation
  option :: (hashable) hashable
  hashcode_option == hashcode :: 'a option => uint32
  def_hashmap_size_option == def_hashmap_size :: 'a option itself => nat
Found termination order: "size <*mlex*> {}"
instantiation
  String.literal :: hashable
  hashcode_literal == hashcode :: String.literal => uint32
  def_hashmap_size_literal == def_hashmap_size ::
    String.literal itself => nat
### theory "Draft.HashCode"
### 0.330s elapsed time, 1.286s cpu time, 0.133s GC time
Loading theory "Draft.Intf_Hash" (required by "Draft.Intf_HashTemplates")
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
Found termination order: "size <*mlex*> {}"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "HOL-Library.BigO"
### 0.942s elapsed time, 3.540s cpu time, 0.801s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.018s elapsed time, 3.680s cpu time, 0.760s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Intf_Hash"
### 0.732s elapsed time, 2.420s cpu time, 0.696s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.935s elapsed time, 5.969s cpu time, 1.019s GC time
Loading theory "Draft.Templates" (required by "Draft.Intf_HashTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Intf_HashTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.447s elapsed time, 0.495s cpu time, 0.062s GC time
Loading theory "Draft.Intf_HashTemplates"
val templateLemmas =
   [("Intf_Hash.abstract_bhc_is_bhc",
     "is_bounded_hashcode ?Rk ?eq ?bhc ==>
      is_bounded_hashcode Id (=) (abstract_bounded_hashcode ?Rk ?bhc)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 3, template_hole 2),
               template_hole 1),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("Intf_Hash.hashable_bhc_is_bhc",
     "[| STRUCT_EQ_tag ?eq (=); REL_FORCE_ID ?R |]
      ==> is_bounded_hashcode ?R ?eq bounded_hashcode_nat",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_hole 3)
            ),
        template_predicate
         (template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_var 1),
             template_hole 0)
           ))),
    ("Intf_Hash.is_bounded_hashcodeD",
     "[| is_bounded_hashcode ?R ?eq ?bhc; 1 < ?n |] ==> ?bhc ?n ?x < ?n",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_inequation (less_than, template_hole 0, template_var 1)],
       template_inequation
        (less_than,
         template_app
          (template_app (template_var 2, template_var 1), template_var 0),
         template_var 1))),
    ("Intf_Hash.is_bounded_hashcodeD",
     "is_bounded_hashcode ?R ?eq ?bhc ==>
      (?eq, (=)) : ?R \<rightarrow> ?R \<rightarrow> bool_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 1),
                 template_hole 7)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_var 2)),
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_var 2)),
                 template_hole 0)))
           ))),
    ("Intf_Hash.abstract_bhc_correct",
     "is_bounded_hashcode ?Rk ?eq ?bhc ==>
      (?bhc, abstract_bounded_hashcode ?Rk ?bhc)
      : nat_rel \<rightarrow> ?Rk \<rightarrow> nat_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app (template_hole 8, template_var 0),
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_var 0))),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_hole 4),
                   template_hole 3)),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_hole 0),
                     template_var 2)),
                 template_hole 3)))
           ))),
    ("Intf_Hash.bounded_hashcode_welldefined",
     "[| is_bounded_hashcode ?Rk ?eq ?bhc; (?x1.0, ?x') : ?Rk;
         (?x2.0, ?x') : ?Rk |]
      ==> ?bhc ?n ?x1.0 = ?bhc ?n ?x2.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 3),
                  template_var 2)),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 1),
                  template_var 2)),
              template_var 6)
            )],
       template_equation
        (template_app
          (template_app (template_var 4, template_var 0), template_var 3),
         template_app
          (template_app (template_var 4, template_var 0),
           template_var 1)))),
    ("Intf_Hash.is_bounded_hashcodeD",
     "[| is_bounded_hashcode ?R ?eq ?bhc; ?x : Domain ?R; ?y : Domain ?R;
         ?eq ?x ?y |]
      ==> ?bhc ?n ?x = ?bhc ?n ?y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_app (template_hole 1, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_app (template_hole 1, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 2), template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_var 3, template_var 0), template_var 2),
         template_app
          (template_app (template_var 3, template_var 0),
           template_var 1)))),
    ("Intf_Hash.is_bounded_hashcodeI",
     "[| (?eq, (=)) : ?R \<rightarrow> ?R \<rightarrow> bool_rel;
         !!x y n.
            [| x : Domain ?R; y : Domain ?R; ?eq x y |]
            ==> ?bhc n x = ?bhc n y;
         !!x n. 1 < n ==> ?bhc n x < n |]
      ==> is_bounded_hashcode ?R ?eq ?bhc",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 17,
                template_app
                 (template_app (template_hole 16, template_var 2),
                  template_hole 15)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_hole 12),
                    template_var 1)),
                template_app
                 (template_app
                   (template_hole 11,
                    template_app
                     (template_app (template_hole 10, template_hole 9),
                      template_var 1)),
                  template_hole 8)))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 2),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.Intf_HashTemplates"
### 0.546s elapsed time, 0.714s cpu time, 0.071s GC time
val it = (): unit
