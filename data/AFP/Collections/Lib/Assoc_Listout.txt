Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Assoc_ListTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.SetIterator" (required by "Draft.Assoc_ListTemplates" via "Draft.Assoc_List" via "Draft.SetIteratorOperations")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Assoc_ListTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Assoc_ListTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.173s elapsed time, 0.697s cpu time, 0.053s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Assoc_ListTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
### theory "HOL-Library.Set_Algebras"
### 0.224s elapsed time, 0.901s cpu time, 0.053s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Assoc_ListTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.407s elapsed time, 1.605s cpu time, 0.153s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Assoc_ListTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 1.042s elapsed time, 3.848s cpu time, 0.919s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "Draft.SetIterator"
### 1.376s elapsed time, 5.081s cpu time, 0.972s GC time
Loading theory "Draft.SetIteratorOperations" (required by "Draft.Assoc_ListTemplates" via "Draft.Assoc_List")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.137s elapsed time, 3.994s cpu time, 0.896s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.153s elapsed time, 6.659s cpu time, 1.173s GC time
Loading theory "Draft.Templates" (required by "Draft.Assoc_ListTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.109s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Assoc_ListTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.SetIteratorOperations"
### 1.533s elapsed time, 3.445s cpu time, 0.379s GC time
Loading theory "Draft.Assoc_List" (required by "Draft.Assoc_ListTemplates")
### theory "Draft.ExtrEqs"
### 0.547s elapsed time, 1.131s cpu time, 0.125s GC time
instantiation
  assoc_list :: (equal, equal) equal
  equal_assoc_list == equal_class.equal ::
    ('a, 'b) assoc_list => ('a, 'b) assoc_list => bool
instantiation
  assoc_list :: (type, type) size
  size_assoc_list == size :: ('a, 'b) assoc_list => nat
consts
  map_ran ::
    "('key => 'val => 'val') => ('key * 'val) list => ('key * 'val') list"
### theory "Draft.Assoc_List"
### 0.291s elapsed time, 0.324s cpu time, 0.000s GC time
Loading theory "Draft.Assoc_ListTemplates"
val templateLemmas =
   [("Assoc_List.impl_of_distinct_full",
     "distinct (assoc_list.impl_of ?al)",
     template_predicate
      (
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 0))
         )),
    ("Assoc_List.finite_dom_lookup", "finite (dom (Assoc_List.lookup ?m))",
     template_predicate
      (
         template_app
          (template_hole 2,
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Assoc_List.lookup_empty",
     "Assoc_List.lookup Assoc_List.empty ?k = None",
     template_equation
      (template_app
        (template_app (template_hole 2, template_hole 1), template_var 0),
       template_hole 0)),
    ("Assoc_List.Assoc_List_impl_of",
     "Assoc_List (assoc_list.impl_of ?al) = ?al",
     template_equation
      (template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_var 0)),
    ("Assoc_List.impl_of_distinct",
     "distinct (map fst (assoc_list.impl_of ?al))",
     template_predicate
      (
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_hole 1),
             template_app (template_hole 0, template_var 0)))
         )),
    ("Assoc_List.set_clearjunk_subset",
     "set (AList.clearjunk ?al) <= set ?al",
     template_inequation
      (less_equals,
       template_app
        (template_hole 1, template_app (template_hole 0, template_var 0)),
       template_app (template_hole 1, template_var 0))),
    ("Assoc_List.iteratei_correct",
     "map_iterator (Assoc_List.iteratei ?m) (Assoc_List.lookup ?m)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0)))
         )),
    ("Assoc_List.length_map_ran", "length (map_ran ?f ?xs) = length ?xs",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("Assoc_List.size_list_clearjunk",
     "size_list ?f (AList.clearjunk ?al) <= size_list ?f ?al",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1), template_var 0))),
    ("Assoc_List.finite_Assoc_List_set_image",
     "finite (Assoc_List.set ` ?A) ==> finite ?A",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 3,
              template_app
               (template_app (template_hole 2, template_hole 1),
                template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("Assoc_List.expand_assoc_list_eq",
     "(?xs = ?ys) = (assoc_list.impl_of ?xs = assoc_list.impl_of ?ys)",
     template_bimplication
      (template_equation (template_var 1, template_var 0),
       template_equation
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Assoc_List.clearjunk_map_ran",
     "AList.clearjunk (map_ran ?f ?al) = map_ran ?f (AList.clearjunk ?al)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 0, template_var 0)))),
    ("Assoc_List.impl_of_delete",
     "assoc_list.impl_of (Assoc_List.delete ?k ?al) =
      AList.delete_aux ?k (assoc_list.impl_of ?al)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Assoc_List.size_list_delete",
     "size_list ?f (AList.delete ?a ?al) <= size_list ?f ?al",
     template_inequation
      (less_equals,
       template_app
        (template_app (template_hole 1, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 1, template_var 2), template_var 0))),
    ("Assoc_List.lookup_delete",
     "Assoc_List.lookup (Assoc_List.delete ?k ?al) = (Assoc_List.lookup ?al)
      (?k := None)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app (template_hole 2, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 1),
         template_hole 0))),
    ("Assoc_List.assoc_list_ext",
     "assoc_list.impl_of ?xs = assoc_list.impl_of ?ys ==> ?xs = ?ys",
     template_implication
      ([template_equation
         (template_app (template_hole 1, template_var 1),
          template_app (template_hole 1, template_var 0))],
       template_equation (template_var 1, template_var 0))),
    ("Assoc_List.dom_map_ran", "fst ` set (map_ran ?f ?al) = fst ` set ?al",
     template_equation
      (template_app
        (template_app (template_hole 6, template_hole 5),
         template_app
          (template_hole 4,
           template_app
            (template_app (template_hole 3, template_var 1),
             template_var 0))),
       template_app
        (template_app (template_hole 2, template_hole 1),
         template_app (template_hole 0, template_var 0)))),
    ("Assoc_List.lookup_update",
     "Assoc_List.lookup (Assoc_List.update ?k ?v ?al) =
      Assoc_List.lookup ?al(?k |-> ?v)",
     template_equation
      (template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 3, template_var 0)),
           template_var 2),
         template_app (template_hole 0, template_var 1)))),
    ("Assoc_List.map_ran_conv",
     "map_of (map_ran ?f ?al) ?k = map_option (?f ?k) (map_of ?al ?k)",
     template_equation
      (template_app
        (template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app
          (template_hole 1, template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Assoc_List.distinct_map_ran",
     "distinct (map fst ?al) ==> distinct (map fst (map_ran ?f ?al))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 5,
              template_app
               (template_app (template_hole 4, template_hole 3),
                template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 2, template_hole 1),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("Assoc_List.impl_of_update_with",
     "assoc_list.impl_of (Assoc_List.update_with ?v ?k ?f ?al) =
      AList.update_with_aux ?v ?k ?f (assoc_list.impl_of ?al)",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_app (template_hole 0, template_var 3),
             template_var 2),
           template_var 1),
         template_app (template_hole 2, template_var 0)))),
    ("Assoc_List.card_dom_map_of",
     "distinct (map fst ?al) ==> card (dom (map_of ?al)) = length ?al",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 3,
           template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0))),
         template_app (template_hole 0, template_var 0)))),
    ("Assoc_List.set_delete",
     "Assoc_List.set (Assoc_List.delete ?k ?al) =
      Assoc_List.set ?al - {?k} \<times> UNIV",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           t_empty)))),
    ("Assoc_List.set_delete_conv",
     "set (AList.delete ?a ?al) = set ?al - {?a} \<times> UNIV",
     template_equation
      (template_app
        (template_hole 6,
         template_app
          (template_app (template_hole 5, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 4, template_app (template_hole 6, template_var 0)),
         template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 1),
               template_hole 1)),
           t_empty)))),
    ("Assoc_List.map_ran_conv_map",
     "map_ran ?f ?xs = map (%(k, v). (k, ?f k v)) ?xs",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, t_empty)),
         template_var 0))),
    ("Assoc_List.length_update",
     "length (AList.update ?k ?v ?xs) =
      (if ?k : fst ` set ?xs then length ?xs else Suc (length ?xs))",
     template_equation
      (template_app
        (template_hole 7,
         template_app
          (template_app
            (template_app (template_hole 6, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 4, template_var 2),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app (template_hole 1, template_var 0)))),
           template_app (template_hole 7, template_var 0)),
         template_app
          (template_hole 0,
           template_app (template_hole 7, template_var 0))))),
    ("Assoc_List.lookup_update_with",
     "Assoc_List.lookup (Assoc_List.update_with ?v ?k ?f ?al) =
      Assoc_List.lookup ?al(?k |->
      case Assoc_List.lookup ?al ?k of None => ?f ?v | Some v => ?f v)",
     template_equation
      (template_app
        (template_hole 4,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 3, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 4, template_var 0)),
           template_var 2),
         template_app
          (template_hole 1,
           template_app
            (template_app
              (template_app
                (template_hole 0,
                 template_app (template_var 1, template_var 3)),
               t_empty),
             template_app
              (template_app (template_hole 4, template_var 0),
               template_var 2)))))),
    ("Assoc_List.set_update",
     "Assoc_List.set (Assoc_List.update ?k ?v ?al) =
      Assoc_List.set ?al - {?k} \<times> UNIV Un {(?k, ?v)}",
     template_equation
      (template_app
        (template_hole 10,
         template_app
          (template_app
            (template_app (template_hole 9, template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 8,
           template_app
            (template_app
              (template_hole 7,
               template_app (template_hole 10, template_var 0)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_app (template_hole 5, template_var 2),
                   template_hole 4)),
               t_empty))),
         template_app
          (template_app
            (template_hole 2,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_var 1)),
           template_hole 0)))),
    ("Assoc_List.map_of_map_inj_fst",
     "inj ?f ==>
      map_of (map (%(k, v). (?f k, v)) ?xs) (?f ?x) = map_of ?xs ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 2),
              template_hole 6)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_hole 3, template_app (template_hole 2, t_empty)),
               template_var 1)),
           template_app (template_var 2, template_var 0)),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Assoc_List.length_distinct",
     "distinct (map fst ?xs) ==>
      length (AList.delete ?k ?xs) =
      (if ?k : fst ` set ?xs then length ?xs - 1 else length ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 11,
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_var 1))
            )],
       template_equation
        (template_app
          (template_hole 7,
           template_app
            (template_app (template_hole 6, template_var 0),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_var 0),
                 template_app
                  (template_app (template_hole 3, template_hole 9),
                   template_app (template_hole 2, template_var 1)))),
             template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 7, template_var 1)),
               template_hole 0)),
           template_app (template_hole 7, template_var 1))))),
    ("Assoc_List.map_ran_filter",
     "map_ran ?f (filter (%(a, uu_). fst ?p ~= a) ?ps) =
      filter (%(a, uu_). fst ?p ~= a) (map_ran ?f ?ps)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 2),
         template_app
          (template_app
            (template_hole 6, template_app (template_hole 5, t_empty)),
           template_var 0)),
       template_app
        (template_app
          (template_hole 1, template_app (template_hole 0, t_empty)),
         template_app
          (template_app (template_hole 7, template_var 2),
           template_var 0)))),
    ("Assoc_List.set_update_with",
     "Assoc_List.set (Assoc_List.update_with ?v ?k ?f ?al) =
      Assoc_List.set ?al - {?k} \<times> UNIV Un
      {(?k,
        ?f (case Assoc_List.lookup ?al ?k of None => ?v | Some v => v))}",
     template_equation
      (template_app
        (template_hole 12,
         template_app
          (template_app
            (template_app
              (template_app (template_hole 11, template_var 3),
               template_var 2),
             template_var 1),
           template_var 0)),
       template_app
        (template_app
          (template_hole 10,
           template_app
            (template_app
              (template_hole 9,
               template_app (template_hole 12, template_var 0)),
             template_app
              (template_app
                (template_hole 8,
                 template_app
                  (template_app (template_hole 7, template_var 2),
                   template_hole 6)),
               t_empty))),
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_var 1,
                 template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     t_empty),
                   template_app
                    (template_app (template_hole 1, template_var 0),
                     template_var 2))))),
           template_hole 0)))),
    ("Assoc_List.map_ran_cong",
     "[| ?al = ?al'; !!k v. (k, v) : set ?al ==> ?f k v = ?g k v |]
      ==> map_ran ?f ?al = map_ran ?g ?al'",
     template_implication
      ([template_equation (template_var 3, template_var 2),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 1), template_var 3),
         template_app
          (template_app (template_hole 0, template_var 0),
           template_var 2))))]:
   (string * thm * template) list
### theory "Draft.Assoc_ListTemplates"
### 0.381s elapsed time, 0.575s cpu time, 0.056s GC time
val it = (): unit
