Loading theory "Draft.ICF_Tools" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Record_Intf")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ICF_UserguideTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.SetIterator" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It" via "Draft.Proper_Iterator" via "Draft.SetIteratorOperations")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ICF_UserguideTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
infix 0 ##
signature ICF_TOOLS =
  sig
    val changed_conv: conv -> conv
    val chead_of: cterm -> cterm
    val chead_of_thm: thm -> cterm
    val define_simple:
       string -> term -> local_theory -> (term * thm) * local_theory
    val define_simple_global:
       string -> term -> theory -> (term * thm) * theory
    val define_simple_local:
       string -> term -> local_theory -> (term * thm) * local_theory
    val dest_def_eq: term -> term * term
    val dt_head: term -> term
    val dt_lhs: term -> term
    val dt_params: term -> term list
    val dt_rhs: term -> term
    val dthm_head: thm -> term
    val dthm_lhs: thm -> term
    val dthm_params: thm -> term list
    val dthm_rhs: thm -> term
    val gen_variant: (string -> bool) -> string -> string
    val import_cterm: cterm -> Proof.context -> cterm * Proof.context
    val inst_meta_cong: Proof.context -> cterm -> thm
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val norm_def_thm: thm -> thm
    val parse_cpat: cterm context_parser
    val rem_dup_prems: Proof.context -> thm -> thm
    val rename_cterm: cterm * cterm -> ctyp TVars.table * cterm Vars.table
    val renames_cterm: cterm * cterm -> bool
    val repeat_top_sweep_conv:
       (Proof.context -> conv) -> Proof.context -> conv
    val revert_abbrevs: string -> theory -> theory
    val sss_add: thm list -> Proof.context -> Proof.context
    val wrap_lthy_global: (local_theory -> local_theory) -> theory -> theory
    val wrap_lthy_local:
       (local_theory -> local_theory) -> local_theory -> local_theory
    val wrap_lthy_result_global:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> theory -> 'b * theory
    val wrap_lthy_result_local:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> local_theory -> 'b * local_theory
  end
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
structure ICF_Tools: ICF_TOOLS
### theory "Draft.ICF_Tools"
### 0.106s elapsed time, 0.421s cpu time, 0.031s GC time
Loading theory "Draft.Ord_Code_Preproc" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Record_Intf")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### ML warning (line 26 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 37 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (trace_ft) has not been referenced.
### ML warning (line 50 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (process) has not been referenced.
signature ORD_CODE_PREPROC =
  sig
    val add: int * string * (theory -> thm -> thm) -> theory -> theory
    val get: theory -> (int * string * (theory -> thm -> thm)) list
    val rem: string -> theory -> theory
    val setup: theory -> theory
    val trace_enabled: bool ref
  end
signature OC_SIMPSET =
  sig
    val get: theory -> simpset
    val map: (simpset -> simpset) -> theory -> theory
    val setup: theory -> theory
  end
structure Ord_Code_Preproc: ORD_CODE_PREPROC
functor Oc_Simpset (sig val name: string val prio: int end): OC_SIMPSET
### theory "Draft.Ord_Code_Preproc"
### 0.044s elapsed time, 0.170s cpu time, 0.000s GC time
Loading theory "Draft.Locale_Code" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec" via "Draft.ICF_Spec_Base")
### theory "HOL-Library.Function_Algebras"
### 0.168s elapsed time, 0.674s cpu time, 0.031s GC time
Loading theory "Draft.Record_Intf" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec" via "Draft.ICF_Spec_Base")
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
signature RECORD_INTF =
  sig
    val add_unf_thms: thm list -> Context.generic -> Context.generic
    val add_unf_thms_global: thm list -> theory -> theory
    val get_unf_ss: Context.generic -> simpset
    val get_unf_thms: Context.generic -> thm list
    val icf_locales_tac: Proof.context -> tactic
    val icf_rec_def: thm -> Context.generic -> Context.generic
    val icf_rec_def_attr: attribute context_parser
    val setup: theory -> theory
  end
structure Record_Intf: RECORD_INTF
### ML warning (line 343 of "$AFP/Collections/ICF/tools/Locale_Code.thy"):
### Pattern is not exhaustive.
signature LOCALE_CODE =
  sig
    val add_pat_eq: cterm -> thm list -> theory -> theory
    val close_block: theory -> theory
    val del_pat: cterm -> theory -> theory
    val get_unf_ss: theory -> simpset
    val lc_decl_del: term -> local_theory -> local_theory
    val lc_decl_eq: thm list -> local_theory -> local_theory
    val open_block: theory -> theory
    type pat_eq = cterm * thm list
    val setup: theory -> theory
    val tracing_enabled: bool ref
  end
structure Locale_Code: LOCALE_CODE
### theory "Draft.Record_Intf"
### 0.091s elapsed time, 0.364s cpu time, 0.000s GC time
Loading theory "Draft.Sorted_List_Operations" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.ListSetImpl_Sorted")
### theory "Draft.Locale_Code"
### 0.122s elapsed time, 0.488s cpu time, 0.000s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ICF_UserguideTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Found termination order: "size_list size <*mlex*> {}"
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.406s elapsed time, 1.597s cpu time, 0.087s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ICF_UserguideTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
### theory "HOL-Library.Set_Algebras"
### 0.237s elapsed time, 0.896s cpu time, 0.141s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.ICF_UserguideTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Found termination order:
  "(%p. length (snd p)) <*mlex*> (%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
Found termination order: "(%p. length (fst p)) <*mlex*> {}"
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
### theory "Draft.Sorted_List_Operations"
### 0.797s elapsed time, 2.927s cpu time, 0.714s GC time
Loading theory "Draft.DatRef" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections")
consts
  snth :: "'a stream => nat => 'a"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  left :: "'a tree => 'a tree"
consts
  cycle :: "'a list => 'a stream"
consts
  right :: "'a tree => 'a tree"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.SetIterator"
### 1.283s elapsed time, 4.818s cpu time, 0.841s GC time
Loading theory "Draft.Idx_Iterator" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
locale while_algo
  fixes WA :: "'S while_algo"
  assumes "while_algo WA"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
locale wa_refine
  fixes WAC :: "'C while_algo"
    and WAA :: "'A while_algo"
    and \<alpha> :: "'C => 'A"
  assumes "wa_refine WAC WAA \<alpha>"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
locale wa_precise_refine
  fixes WAC :: "'C while_algo"
    and WAA :: "'A while_algo"
    and \<alpha> :: "'C => 'A"
  assumes "wa_precise_refine WAC WAA \<alpha>"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
### theory "HOL-Library.Stream"
### 1.055s elapsed time, 3.908s cpu time, 0.817s GC time
Loading theory "Draft.SetIteratorOperations" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It" via "Draft.Proper_Iterator")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Idx_Iterator"
### 0.421s elapsed time, 1.612s cpu time, 0.185s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ICF_UserguideTemplates" via "Draft.ExtrEqs")
locale det_while_algo
  fixes WA :: "'S det_while_algo"
  assumes "det_while_algo WA"
Found termination order: "size <*mlex*> {}"
### theory "Draft.DatRef"
### 0.701s elapsed time, 2.691s cpu time, 0.281s GC time
Loading theory "Draft.Intf_Map" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Autoref")
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
### theory "Draft.Intf_Map"
### 0.329s elapsed time, 1.265s cpu time, 0.093s GC time
Loading theory "Draft.Intf_Set" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Autoref")
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.Intf_Set"
### 0.343s elapsed time, 1.294s cpu time, 0.167s GC time
Loading theory "Draft.Code_Target_ICF" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.HashSet" via "Draft.HashMap" via "Draft.HashMap_Impl")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.196s elapsed time, 4.463s cpu time, 1.198s GC time
Loading theory "Draft.HashCode" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.HashSet" via "Draft.HashMap" via "Draft.HashMap_Impl")
class hashable = type +
  fixes hashcode :: "'a => uint32"
    and def_hashmap_size :: "'a itself => nat"
  assumes "def_hashmap_size": "1 < def_hashmap_size TYPE('a)"
instantiation
  unit :: hashable
  hashcode_unit == hashcode :: unit => uint32
  def_hashmap_size_unit == def_hashmap_size :: unit itself => nat
### theory "Draft.Code_Target_ICF"
### 0.593s elapsed time, 2.173s cpu time, 0.938s GC time
val it = fn:
   (theory -> theory) ->
     (Proof.context -> Proof.context) -> Context.generic -> Context.generic
"op_map_restrict"
  :: "('a * 'b => bool) => ('a => 'b option) => 'a => 'b option"
instantiation
  bool :: hashable
  hashcode_bool == hashcode :: bool => uint32
  def_hashmap_size_bool == def_hashmap_size :: bool itself => nat
instantiation
  int :: hashable
  hashcode_int == hashcode :: int => uint32
  def_hashmap_size_int == def_hashmap_size :: int itself => nat
instantiation
  integer :: hashable
  hashcode_integer == hashcode :: integer => uint32
  def_hashmap_size_integer == def_hashmap_size :: integer itself => nat
instantiation
  nat :: hashable
  hashcode_nat == hashcode :: nat => uint32
  def_hashmap_size_nat == def_hashmap_size :: nat itself => nat
### theory "HOL-Library.Tree"
### 2.609s elapsed time, 9.763s cpu time, 2.113s GC time
Loading theory "Draft.Templates" (required by "Draft.ICF_UserguideTemplates" via "Draft.ExtrEqs")
instantiation
  char :: hashable
  hashcode_char == hashcode :: char => uint32
  def_hashmap_size_char == def_hashmap_size :: char itself => nat
instantiation
  prod :: (hashable, hashable) hashable
  hashcode_prod == hashcode :: 'a * 'b => uint32
  def_hashmap_size_prod == def_hashmap_size :: ('a * 'b) itself => nat
instantiation
  sum :: (hashable, hashable) hashable
  hashcode_sum == hashcode :: 'a + 'b => uint32
  def_hashmap_size_sum == def_hashmap_size :: ('a + 'b) itself => nat
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.065s elapsed time, 0.258s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ICF_UserguideTemplates")
instantiation
  list :: (hashable) hashable
  hashcode_list == hashcode :: 'a list => uint32
  def_hashmap_size_list == def_hashmap_size :: 'a list itself => nat
instantiation
  option :: (hashable) hashable
  hashcode_option == hashcode :: 'a option => uint32
  def_hashmap_size_option == def_hashmap_size :: 'a option itself => nat
instantiation
  String.literal :: hashable
  hashcode_literal == hashcode :: String.literal => uint32
  def_hashmap_size_literal == def_hashmap_size ::
    String.literal itself => nat
### theory "Draft.HashCode"
### 0.356s elapsed time, 1.370s cpu time, 0.100s GC time
### theory "Draft.SetIteratorOperations"
### 2.255s elapsed time, 7.703s cpu time, 1.514s GC time
Loading theory "Draft.Assoc_List" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.HashSet" via "Draft.HashMap" via "Draft.HashMap_Impl" via "Draft.ListMapImpl")
Loading theory "Draft.Dlist_add" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.ListSetImpl")
Loading theory "Draft.Proper_Iterator" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.598s elapsed time, 1.534s cpu time, 0.132s GC time
Loading theory "Draft.SetIteratorGA" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
consts
  dlist_remove1' :: "'a => 'a list => 'a list => 'a list"
structure Icf_Proper_Iterator:
  sig
    val add: attribute
    val add_thm: thm -> Context.generic -> Context.generic
    val del: attribute
    val del_thm: thm -> Context.generic -> Context.generic
    val get: Proof.context -> thm list
    structure icf_proper_iteratorI: NAMED_THMS
    val setup: theory -> theory
  end
### theory "Draft.Dlist_add"
### 0.263s elapsed time, 1.088s cpu time, 0.075s GC time
instantiation
  assoc_list :: (equal, equal) equal
  equal_assoc_list == equal_class.equal ::
    ('a, 'b) assoc_list => ('a, 'b) assoc_list => bool
instantiation
  assoc_list :: (type, type) size
  size_assoc_list == size :: ('a, 'b) assoc_list => nat
consts
  map_ran ::
    "('key => 'val => 'val') => ('key * 'val) list => ('key * 'val') list"
### theory "Draft.Assoc_List"
### 0.750s elapsed time, 2.671s cpu time, 1.166s GC time
Loading theory "Draft.Diff_Array" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.ArrayHashSet" via "Draft.ArrayHashMap" via "Draft.ArrayHashMap_Impl")
Loading theory "Draft.Trie_Impl" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.TrieSetImpl" via "Draft.TrieMapImpl" via "Draft.Trie2")
### theory "Draft.Proper_Iterator"
### 0.785s elapsed time, 2.792s cpu time, 1.200s GC time
Loading theory "Draft.It_to_It" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
locale proper_it_loc
  fixes
    it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
    and
    it' ::
      "'s => ('\<sigma> => bool)
             => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
  assumes "proper_it_loc it it'"
### theory "Draft.It_to_It"
### 0.105s elapsed time, 0.419s cpu time, 0.000s GC time
Loading theory "Draft.Gen_Iterator" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
### theory "Draft.SetIteratorGA"
### 1.035s elapsed time, 3.708s cpu time, 1.266s GC time
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
### theory "Draft.Trie_Impl"
### 0.424s elapsed time, 1.585s cpu time, 0.150s GC time
Loading theory "Draft.Trie2" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.TrieSetImpl" via "Draft.TrieMapImpl")
instantiation
  trie :: (equal, equal) equal
  equal_trie == equal_class.equal :: ('a, 'b) trie => ('a, 'b) trie => bool
### theory "Draft.Trie2"
### 0.120s elapsed time, 0.360s cpu time, 0.000s GC time
### theory "Draft.Gen_Iterator"
### 0.541s elapsed time, 1.707s cpu time, 0.237s GC time
Loading theory "Draft.Iterator" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec" via "Draft.ICF_Spec_Base")
consts
  array_length :: "'a array => nat"
consts
  array_get :: "'a array => nat => 'a"
consts
  array_set :: "'a array => nat => 'a => 'a array"
consts
  array_grow :: "'a array => nat => 'a => 'a array"
consts
  array_shrink :: "'a array => nat => 'a array"
consts
  list_of_array :: "'a array => 'a list"
consts
  assoc_list_of_array :: "'a array => (nat * 'a) list"
### Rewrite rule not in simpset:
### Wellfounded.accp assoc_list_of_array_code_rel (?a1, ?n1) ==>
### assoc_list_of_array_code ?a1 ?n1 ==
### if array_length ?a1 <= ?n1 then []
### else (?n1, array_get ?a1 ?n1) # assoc_list_of_array_code ?a1 (?n1 + 1)
### theory "Draft.Iterator"
### 0.438s elapsed time, 0.915s cpu time, 0.092s GC time
Loading theory "Draft.ICF_Spec_Base" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetSpec")
Loading theory "Draft.RBT_add" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.RBTSetImpl" via "Draft.RBTMapImpl")
### theory "Draft.Diff_Array"
### 1.122s elapsed time, 3.171s cpu time, 0.329s GC time
### theory "Draft.ICF_Spec_Base"
### 0.236s elapsed time, 0.548s cpu time, 0.000s GC time
Loading theory "Draft.AnnotatedListSpec" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl")
Loading theory "Draft.ListSpec" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl")
Loading theory "Draft.MapSpec" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl")
locale al
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
locale al_no_invar
  fixes \<alpha> :: "'a => ('b * 'c) list"
    and invar :: "'a => bool"
  assumes "al_no_invar invar"
locale list
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
locale al_empty
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "al_empty \<alpha> invar empty"
locale list_no_invar
  fixes \<alpha> :: "'a => 'b list"
    and invar :: "'a => bool"
  assumes "list_no_invar invar"
consts
  rm_iterateoi ::
    "('k, 'v) rbt
     => ('\<sigma> => bool)
        => ('k * 'v => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
locale map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
locale al_isEmpty
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "al_isEmpty \<alpha> invar isEmpty"
locale list_empty
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "list_empty \<alpha> invar empty"
locale map_no_invar
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "map_no_invar invar"
locale al_count
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and count :: "'s => nat"
  assumes "al_count \<alpha> invar count"
locale list_isEmpty
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "list_isEmpty \<alpha> invar isEmpty"
locale poly_list_iteratei
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
locale map_empty
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "map_empty \<alpha> invar empty"
locale map_lookup
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and lookup :: "'u => 's => 'v option"
  assumes "map_lookup \<alpha> invar lookup"
locale al_consl
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and consl :: "'e => 'a => 's => 's"
  assumes "al_consl \<alpha> invar consl"
consts
  rm_reverse_iterateoi ::
    "('k, 'v) rbt
     => ('\<sigma> => bool)
        => ('k * 'v => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
locale poly_list_rev_iteratei
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
locale al_consr
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and consr :: "'s => 'e => 'a => 's"
  assumes "al_consr \<alpha> invar consr"
locale map_update
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and update :: "'u => 'v => 's => 's"
  assumes "map_update \<alpha> invar update"
locale al_head
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and head :: "'s => 'e * 'a"
  assumes "al_head \<alpha> invar head"
locale list_size
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and size :: "'s => nat"
  assumes "list_size \<alpha> invar size"
locale map_update_dj
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and update_dj :: "'u => 'v => 's => 's"
  assumes "map_update_dj \<alpha> invar update_dj"
locale list_appendl
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and appendl :: "'x => 's => 's"
  assumes "list_appendl \<alpha> invar appendl"
locale al_tail
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and tail :: "'s => 's"
  assumes "al_tail \<alpha> invar tail"
locale map_delete
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and delete :: "'u => 's => 's"
  assumes "map_delete \<alpha> invar delete"
locale al_headR
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and headR :: "'s => 'e * 'a"
  assumes "al_headR \<alpha> invar headR"
locale list_removel
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and removel :: "'s => 'x * 's"
  assumes "list_removel \<alpha> invar removel"
locale map_add
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and add :: "'s => 's => 's"
  assumes "MapSpec.map_add \<alpha> invar add"
locale al_tailR
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and tailR :: "'s => 's"
  assumes "al_tailR \<alpha> invar tailR"
locale list_leftmost
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and leftmost :: "'s => 'x"
  assumes "list_leftmost \<alpha> invar leftmost"
locale al_foldl
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and foldl :: "('z => 'e * 'a => 'z) => 'z => 's => 'z"
  assumes "al_foldl \<alpha> invar foldl"
locale map_add_dj
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and add_dj :: "'s => 's => 's"
  assumes "map_add_dj \<alpha> invar add_dj"
locale map_isEmpty
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "map_isEmpty \<alpha> invar isEmpty"
locale al_foldr
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and foldr :: "('e * 'a => 'z => 'z) => 's => 'z => 'z"
  assumes "al_foldr \<alpha> invar foldr"
locale list_appendr
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and appendr :: "'x => 's => 's"
  assumes "list_appendr \<alpha> invar appendr"
locale poly_al_fold
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
locale map_sng
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and sng :: "'u => 'v => 's"
  assumes "map_sng \<alpha> invar sng"
locale list_remover
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and remover :: "'s => 's * 'x"
  assumes "list_remover \<alpha> invar remover"
locale map_isSng
  fixes \<alpha> :: "'s => 'k => 'v option"
    and invar :: "'s => bool"
    and isSng :: "'s => bool"
  assumes "map_isSng \<alpha> invar isSng"
locale list_rightmost
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and rightmost :: "'s => 'x"
  assumes "list_rightmost \<alpha> invar rightmost"
locale al_app
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and app :: "'s => 's => 's"
  assumes "al_app \<alpha> invar app"
locale list_get
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and get :: "'s => nat => 'x"
  assumes "list_get \<alpha> invar get"
locale finite_map
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "finite_map \<alpha> invar"
locale al_annot
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and annot :: "'s => 'a"
  assumes "al_annot \<alpha> invar annot"
locale list_set
  fixes \<alpha> :: "'s => 'x list"
    and invar :: "'s => bool"
    and set :: "'s => nat => 'x => 's"
  assumes "list_set \<alpha> invar set"
locale map_size
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and size :: "'s => nat"
  assumes "map_size \<alpha> invar size"
locale al_splits
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and splits :: "('a => bool) => 'a => 's => 's * ('e * 'a) * 's"
  assumes "al_splits \<alpha> invar splits"
locale map_size_abort
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and size_abort :: "nat => 's => nat"
  assumes "map_size_abort \<alpha> invar size_abort"
locale poly_map_iteratei_defs
  fixes
    list_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
locale poly_map_iteratei
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and
    list_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
  assumes "poly_map_iteratei \<alpha> invar list_it"
locale map_ball
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and ball :: "'s => ('u * 'v => bool) => bool"
  assumes "map_ball \<alpha> invar ball"
locale map_bex
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and bex :: "'s => ('u * 'v => bool) => bool"
  assumes "map_bex \<alpha> invar bex"
locale map_sel
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and sel :: "'s => ('u * 'v => 'r option) => 'r option"
  assumes "map_sel \<alpha> invar sel"
locale map_sel'
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and sel' :: "'s => ('u * 'v => bool) => ('u * 'v) option"
  assumes "map_sel' \<alpha> invar sel'"
locale map_to_list
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_list :: "'s => ('u * 'v) list"
  assumes "map_to_list \<alpha> invar to_list"
locale list_to_map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_map :: "('u * 'v) list => 's"
  assumes "list_to_map \<alpha> invar to_map"
locale map_image_filter
  fixes \<alpha>1 :: "'m1 => 'u1 => 'v1 option"
    and invar1 :: "'m1 => bool"
    and \<alpha>2 :: "'m2 => 'u2 => 'v2 option"
    and invar2 :: "'m2 => bool"
    and
    map_image_filter :: "('u1 * 'v1 => ('u2 * 'v2) option) => 'm1 => 'm2"
  assumes
    "map_image_filter \<alpha>1 invar1 \<alpha>2 invar2 map_image_filter"
locale map_value_image_filter
  fixes \<alpha>1 :: "'m1 => 'u => 'v1 option"
    and invar1 :: "'m1 => bool"
    and \<alpha>2 :: "'m2 => 'u => 'v2 option"
    and invar2 :: "'m2 => bool"
    and map_value_image_filter :: "('u => 'v1 => 'v2 option) => 'm1 => 'm2"
  assumes
    "map_value_image_filter \<alpha>1 invar1 \<alpha>2 invar2
      map_value_image_filter"
locale map_restrict
  fixes \<alpha>1 :: "'m1 => 'u => 'v option"
    and invar1 :: "'m1 => bool"
    and \<alpha>2 :: "'m2 => 'u => 'v option"
    and invar2 :: "'m2 => bool"
    and restrict :: "('u * 'v => bool) => 'm1 => 'm2"
  assumes "map_restrict \<alpha>1 invar1 \<alpha>2 invar2 restrict"
locale ordered_map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
locale ordered_finite_map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
  assumes "ordered_finite_map \<alpha> invar"
locale poly_map_iterateoi_defs
  fixes
    olist_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
locale poly_map_iterateoi
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and
    list_ordered_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
  assumes "poly_map_iterateoi \<alpha> invar list_ordered_it"
locale poly_map_rev_iterateoi_defs
  fixes
    list_rev_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
locale poly_map_rev_iterateoi
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and
    list_rev_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
  assumes "poly_map_rev_iterateoi \<alpha> invar list_rev_it"
locale map_min
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and min :: "'s => ('u * 'v => bool) => ('u * 'v) option"
  assumes "map_min \<alpha> invar min"
locale map_max
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and max :: "'s => ('u * 'v => bool) => ('u * 'v) option"
  assumes "map_max \<alpha> invar max"
locale map_to_sorted_list
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_sorted_list :: "'s => ('u * 'v) list"
  assumes "MapSpec.map_to_sorted_list \<alpha> invar to_sorted_list"
locale map_to_rev_list
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_rev_list :: "'s => ('u * 'v) list"
  assumes "map_to_rev_list \<alpha> invar to_rev_list"
consts
  bheight_aux :: "('a, 'b) rbt => nat => nat"
### theory "Draft.RBT_add"
### 1.802s elapsed time, 6.452s cpu time, 2.137s GC time
Loading theory "Draft.PrioSpec" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl")
locale prio
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
locale prio_no_invar
  fixes \<alpha> :: "'a => ('b * 'c) multiset"
    and invar :: "'a => bool"
  assumes "prio_no_invar invar"
locale prio_empty
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and empty :: "unit => 'p"
  assumes "prio_empty \<alpha> invar empty"
locale prio_isEmpty
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and isEmpty :: "'p => bool"
  assumes "prio_isEmpty \<alpha> invar isEmpty"
locale prio_find
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and find :: "'p => 'e * 'a"
  assumes "prio_find \<alpha> invar find"
locale prio_insert
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and insert :: "'e => 'a => 'p => 'p"
  assumes "prio_insert \<alpha> invar insert"
locale StdListDefs
  fixes ops :: "('a, 's, 'more) list_ops_scheme"
locale prio_meld
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and meld :: "'p => 'p => 'p"
  assumes "prio_meld \<alpha> invar meld"
locale prio_delete
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and find :: "'p => 'e * 'a"
    and delete :: "'p => 'p"
  assumes "prio_delete \<alpha> invar find delete"
locale StdList
  fixes ops :: "('a, 's, 'more) list_ops_scheme"
  assumes "StdList ops"
locale StdList_no_invar
  fixes ops :: "('a, 'b, 'c) list_ops_scheme"
  assumes "StdList_no_invar ops"
### theory "Draft.ListSpec"
### 1.836s elapsed time, 6.957s cpu time, 2.213s GC time
Loading theory "Draft.ListGA" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.ArrayHashSet" via "Draft.ArrayHashMap" via "Draft.ArrayHashMap_Impl")
locale idx_iteratei_loc
  fixes \<alpha> :: "'s => 'a list"
    and invar :: "'s => bool"
    and size :: "'s => nat"
    and get :: "'s => nat => 'a"
  assumes "idx_iteratei_loc \<alpha> invar size get"
locale StdALDefs
  fixes ops :: "('e, 'a, 's, 'more) alist_ops_scheme"
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
locale StdAL
  fixes ops :: "('a, 'b, 'c, 'd) alist_ops_scheme"
  assumes "StdAL ops"
locale StdAL_no_invar
  fixes ops :: "('a, 'b, 'c, 'd) alist_ops_scheme"
  assumes "StdAL_no_invar ops"
### theory "Draft.AnnotatedListSpec"
### 2.227s elapsed time, 8.489s cpu time, 2.341s GC time
Loading theory "Draft.FTAnnotatedListImpl" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl")
Found termination order: "(%p. size (fst (snd p))) <*mlex*> {}"
locale it_size_loc
  fixes \<alpha> :: "'s => 'a list"
    and invar :: "'s => bool"
locale rev_it_size_loc
  fixes \<alpha> :: "'s => 'a list"
    and invar :: "'s => bool"
locale StdPrioDefs
  fixes ops :: "('e, 'a, 'p) prio_ops"
locale it_get_loc
  fixes \<alpha> :: "'s => 'a list"
    and invar :: "'s => bool"
### theory "Draft.ListGA"
### 0.533s elapsed time, 2.084s cpu time, 0.212s GC time
Loading theory "Draft.Fifo" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl")
locale StdPrio
  fixes ops :: "('a, 'b, 'c) prio_ops"
  assumes "StdPrio ops"
locale StdPrio_no_invar
  fixes ops :: "('a, 'b, 'c) prio_ops"
  assumes "StdPrio_no_invar ops"
### theory "Draft.PrioSpec"
### 0.878s elapsed time, 3.418s cpu time, 0.362s GC time
Loading theory "Draft.BinoPrioImpl" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl")
locale StdMapDefs
  fixes ops :: "('k, 'v, 's, 'more) map_ops_scheme"
locale StdMap
  fixes ops :: "('k, 'v, 's, 'more) map_ops_scheme"
  assumes "StdMap ops"
locale StdMap_no_invar
  fixes ops :: "('a, 'b, 'c, 'd) map_ops_scheme"
  assumes "StdMap_no_invar ops"
### theory "Draft.Fifo"
### 0.546s elapsed time, 2.141s cpu time, 0.203s GC time
Loading theory "Draft.PrioByAnnotatedList" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.FTPrioImpl")
### theory "Draft.BinoPrioImpl"
### 0.563s elapsed time, 2.194s cpu time, 0.203s GC time
Loading theory "Draft.SkewPrioImpl" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl")
### theory "Draft.FTAnnotatedListImpl"
### 1.204s elapsed time, 4.692s cpu time, 0.548s GC time
Loading theory "Draft.PrioUniqueSpec" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl")
locale uprio
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
locale uprio_no_invar
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "uprio_no_invar invar"
locale uprio_finite
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "uprio_finite \<alpha> invar"
locale uprio_empty
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "uprio_empty \<alpha> invar empty"
locale uprio_isEmpty
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "uprio_isEmpty \<alpha> invar isEmpty"
locale uprio_pop
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and pop :: "'s => 'e * 'a * 's"
  assumes "uprio_pop \<alpha> invar pop"
locale uprio_insert
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and insert :: "'s => 'e => 'a => 's"
  assumes "uprio_insert \<alpha> invar insert"
locale uprio_distinct_insert
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and insert :: "'s => 'e => 'a => 's"
  assumes "uprio_distinct_insert \<alpha> invar insert"
locale uprio_prio
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and prio :: "'s => 'e => 'a option"
  assumes "uprio_prio \<alpha> invar prio"
locale StdOMapDefs
  fixes ops :: "('k, 'v, 's, 'more) omap_ops_scheme"
### Missing patterns in function definition:
### p_unwrap Infty = undefined
### theory "Draft.SkewPrioImpl"
### 0.816s elapsed time, 3.162s cpu time, 0.468s GC time
Loading theory "Draft.SetSpec" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl")
locale StdOMap
  fixes ops :: "('k, 'v, 's, 'more) omap_ops_scheme"
  assumes "StdOMap ops"
### theory "Draft.MapSpec"
### 3.815s elapsed time, 14.681s cpu time, 3.095s GC time
Found termination order: "{}"
locale set
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
locale set_no_invar
  fixes \<alpha> :: "'a => 'b set"
    and invar :: "'a => bool"
  assumes "set_no_invar invar"
locale set_empty
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "set_empty \<alpha> invar empty"
locale set_memb
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and memb :: "'x => 's => bool"
  assumes "set_memb \<alpha> invar memb"
locale set_ins
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and ins :: "'x => 's => 's"
  assumes "set_ins \<alpha> invar ins"
locale set_ins_dj
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and ins_dj :: "'x => 's => 's"
  assumes "set_ins_dj \<alpha> invar ins_dj"
locale set_delete
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and delete :: "'x => 's => 's"
  assumes "set_delete \<alpha> invar delete"
locale set_isEmpty
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "set_isEmpty \<alpha> invar isEmpty"
locale set_ball
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and ball :: "'s => ('x => bool) => bool"
  assumes "set_ball \<alpha> invar ball"
locale set_bex
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and bex :: "'s => ('x => bool) => bool"
  assumes "set_bex \<alpha> invar bex"
locale finite_set
  fixes \<alpha> :: "'a => 'b set"
    and invar :: "'a => bool"
  assumes "finite_set \<alpha> invar"
locale set_size
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and size :: "'s => nat"
  assumes "set_size \<alpha> invar size"
Found termination order: "{}"
locale set_size_abort
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and size_abort :: "nat => 's => nat"
  assumes "set_size_abort \<alpha> invar size_abort"
locale set_sng
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and sng :: "'x => 's"
  assumes "set_sng \<alpha> invar sng"
instantiation
  Prio :: (type, linorder) monoid_add
  zero_Prio == zero_class.zero :: ('a, 'b) Prio
  plus_Prio == plus :: ('a, 'b) Prio => ('a, 'b) Prio => ('a, 'b) Prio
locale set_isSng
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and isSng :: "'s => bool"
  assumes "set_isSng \<alpha> invar isSng"
locale poly_set_iteratei_defs
  fixes
    list_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
locale poly_set_iteratei
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and
    list_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
  assumes "poly_set_iteratei \<alpha> invar list_it"
locale set_copy
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and copy :: "'s1 => 's2"
  assumes "set_copy \<alpha>1 invar1 \<alpha>2 invar2 copy"
Found termination order: "{}"
locale set_union
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and \<alpha>3 :: "'s3 => 'a set"
    and invar3 :: "'s3 => bool"
    and union :: "'s1 => 's2 => 's3"
  assumes
    "set_union \<alpha>1 invar1 \<alpha>2 invar2 \<alpha>3 invar3 union"
locale set_union_dj
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and \<alpha>3 :: "'s3 => 'a set"
    and invar3 :: "'s3 => bool"
    and union_dj :: "'s1 => 's2 => 's3"
  assumes
    "set_union_dj \<alpha>1 invar1 \<alpha>2 invar2 \<alpha>3 invar3
      union_dj"
locale set_union_list
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and union_list :: "'s1 list => 's2"
  assumes "set_union_list \<alpha>1 invar1 \<alpha>2 invar2 union_list"
locale set_diff
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and diff :: "'s1 => 's2 => 's1"
  assumes "set_diff \<alpha>1 invar1 \<alpha>2 invar2 diff"
locale set_inter
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and \<alpha>3 :: "'s3 => 'a set"
    and invar3 :: "'s3 => bool"
    and inter :: "'s1 => 's2 => 's3"
  assumes
    "set_inter \<alpha>1 invar1 \<alpha>2 invar2 \<alpha>3 invar3 inter"
locale set_subset
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and subset :: "'s1 => 's2 => bool"
  assumes "set_subset \<alpha>1 invar1 \<alpha>2 invar2 subset"
Found termination order: "{}"
locale set_equal
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and equal :: "'s1 => 's2 => bool"
  assumes "set_equal \<alpha>1 invar1 \<alpha>2 invar2 equal"
locale set_image_filter
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and image_filter :: "('a => 'b option) => 's1 => 's2"
  assumes "set_image_filter \<alpha>1 invar1 \<alpha>2 invar2 image_filter"
instantiation
  Prio :: (type, linorder) preorder
  less_eq_Prio == less_eq :: ('a, 'b) Prio => ('a, 'b) Prio => bool
  less_Prio == less :: ('a, 'b) Prio => ('a, 'b) Prio => bool
locale StdUprioDefs
  fixes ops :: "('e, 'a, 's, 'more) uprio_ops_scheme"
locale set_inj_image_filter
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and inj_image_filter :: "('a => 'b option) => 's1 => 's2"
  assumes
    "set_inj_image_filter \<alpha>1 invar1 \<alpha>2 invar2
      inj_image_filter"
locale set_image
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and image :: "('a => 'b) => 's1 => 's2"
  assumes "set_image \<alpha>1 invar1 \<alpha>2 invar2 image"
locale set_inj_image
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and inj_image :: "('a => 'b) => 's1 => 's2"
  assumes "set_inj_image \<alpha>1 invar1 \<alpha>2 invar2 inj_image"
locale StdUprio
  fixes ops :: "('a, 'b, 'c, 'd) uprio_ops_scheme"
  assumes "StdUprio ops"
locale set_filter
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and filter :: "('a => bool) => 's1 => 's2"
  assumes "set_filter \<alpha>1 invar1 \<alpha>2 invar2 filter"
locale StdUprio_no_invar
  fixes ops :: "('a, 'b, 'c, 'd) uprio_ops_scheme"
  assumes "StdUprio_no_invar ops"
### theory "Draft.PrioUniqueSpec"
### 0.828s elapsed time, 2.850s cpu time, 0.337s GC time
Loading theory "Draft.PrioUniqueByAnnotatedList" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.FTPrioUniqueImpl")
locale set_Union_image
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and \<alpha>3 :: "'s3 => 'b set"
    and invar3 :: "'s3 => bool"
    and Union_image :: "('a => 's2) => 's1 => 's3"
  assumes
    "set_Union_image \<alpha>1 invar1 \<alpha>2 invar2 \<alpha>3 invar3
      Union_image"
locale set_disjoint
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and disjoint :: "'s1 => 's2 => bool"
  assumes "set_disjoint \<alpha>1 invar1 \<alpha>2 invar2 disjoint"
locale set_disjoint_witness
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and disjoint_witness :: "'s1 => 's2 => 'a option"
  assumes
    "set_disjoint_witness \<alpha>1 invar1 \<alpha>2 invar2
      disjoint_witness"
locale set_sel
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and sel :: "'s => ('x => 'r option) => 'r option"
  assumes "set_sel \<alpha> invar sel"
locale set_sel'
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and sel' :: "'s => ('x => bool) => 'x option"
  assumes "set_sel' \<alpha> invar sel'"
locale set_to_list
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and to_list :: "'s => 'x list"
  assumes "set_to_list \<alpha> invar to_list"
locale list_to_set
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and to_set :: "'x list => 's"
  assumes "list_to_set \<alpha> invar to_set"
locale ordered_set
  fixes \<alpha> :: "'s => 'u set"
    and invar :: "'s => bool"
locale ordered_finite_set
  fixes \<alpha> :: "'s => 'u set"
    and invar :: "'s => bool"
  assumes "ordered_finite_set \<alpha> invar"
locale poly_set_iterateoi_defs
  fixes
    olist_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
locale poly_set_iterateoi
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and
    list_ordered_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
  assumes "poly_set_iterateoi \<alpha> invar list_ordered_it"
locale alprio_defs
  fixes ops :: "(unit, ('e, 'a) Prio, 's) alist_ops"
locale poly_set_rev_iterateoi_defs
  fixes
    list_rev_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
locale alprio
  fixes ops :: "(unit, ('e, 'a) Prio, 's) alist_ops"
  assumes "alprio ops"
### theory "Draft.PrioByAnnotatedList"
### 1.546s elapsed time, 5.452s cpu time, 0.681s GC time
locale poly_set_rev_iterateoi
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and
    list_rev_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
  assumes "poly_set_rev_iterateoi \<alpha> invar list_rev_it"
locale set_min
  fixes \<alpha> :: "'s => 'u set"
    and invar :: "'s => bool"
    and min :: "'s => ('u => bool) => 'u option"
  assumes "set_min \<alpha> invar min"
locale set_max
  fixes \<alpha> :: "'s => 'u set"
    and invar :: "'s => bool"
    and max :: "'s => ('u => bool) => 'u option"
  assumes "set_max \<alpha> invar max"
locale set_to_sorted_list
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and to_sorted_list :: "'s => 'x list"
  assumes "SetSpec.set_to_sorted_list \<alpha> invar to_sorted_list"
locale set_to_rev_list
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and to_rev_list :: "'s => 'x list"
  assumes "set_to_rev_list \<alpha> invar to_rev_list"
### Missing patterns in function definition:
### p_unwrap Infty = undefined
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  LP :: (linorder, linorder) monoid_add
  zero_LP == zero_class.zero :: ('a, 'b) LP
  plus_LP == plus :: ('a, 'b) LP => ('a, 'b) LP => ('a, 'b) LP
Found termination order: "{}"
locale StdSetDefs
  fixes ops :: "('x, 's, 'more) set_ops_scheme"
Found termination order: "{}"
instantiation
  LP :: (type, linorder) preorder
  less_eq_LP == less_eq :: ('a, 'b) LP => ('a, 'b) LP => bool
  less_LP == less :: ('a, 'b) LP => ('a, 'b) LP => bool
locale StdSet
  fixes ops :: "('x, 's, 'more) set_ops_scheme"
  assumes "StdSet ops"
locale aluprio_defs
  fixes ops :: "(unit, ('e, 'a) LP, 's) alist_ops"
locale StdSet_no_invar
  fixes ops :: "('a, 'b, 'c) set_ops_scheme"
  assumes "StdSet_no_invar ops"
locale aluprio
  fixes ops :: "(unit, ('e, 'a) LP, 's) alist_ops"
  assumes "aluprio ops"
### theory "Draft.PrioUniqueByAnnotatedList"
### 1.436s elapsed time, 3.248s cpu time, 0.420s GC time
locale StdOSetDefs
  fixes ops :: "('x, 's, 'more) oset_ops_scheme"
locale StdOSet
  fixes ops :: "('x, 's, 'more) oset_ops_scheme"
  assumes "StdOSet ops"
### theory "Draft.SetSpec"
### 2.517s elapsed time, 5.433s cpu time, 0.739s GC time
Loading theory "Draft.Algos" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl")
Loading theory "Draft.SetIndex" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl")
Loading theory "Draft.SetIteratorCollectionsGA" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.ListSetImpl" via "Draft.SetGA")
locale index_loc
  fixes m_ops :: "('i, 's, 'm, 'more1) map_ops_scheme"
    and s_ops :: "('x, 's, 'more2) set_ops_scheme"
  assumes "index_loc m_ops s_ops"
### theory "Draft.SetIteratorCollectionsGA"
### 0.271s elapsed time, 0.818s cpu time, 0.042s GC time
Loading theory "Draft.MapGA" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.RBTSetImpl" via "Draft.RBTMapImpl")
Loading theory "Draft.SetGA" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.ListSetImpl")
locale map_to_nat_loc
  fixes s_ops :: "('x, 's, 'more1) set_ops_scheme"
    and m_ops :: "('x, nat, 'm, 'more2) map_ops_scheme"
  assumes "map_to_nat_loc s_ops m_ops"
locale g_set_xx_defs_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x, 's2, 'more2) set_ops_scheme"
locale build_index_loc
  fixes m_ops :: "('i, 's, 'm, 'more1) map_ops_scheme"
    and s_ops :: "('x, 's, 'more3) set_ops_scheme"
    and t_ops :: "('x, 't, 'more2) set_ops_scheme"
  assumes "build_index_loc m_ops s_ops t_ops"
### theory "Draft.SetIndex"
### 0.422s elapsed time, 1.380s cpu time, 0.124s GC time
locale it_dom_fun_to_map_loc
  fixes s_ops :: "('k, 's, 'more1) set_ops_scheme"
    and m_ops :: "('k, 'v, 'm, 'more2) map_ops_scheme"
  assumes "it_dom_fun_to_map_loc s_ops m_ops"
locale set_to_list_defs_loc
  fixes s_ops :: "('x, 's, 'more1) set_ops_scheme"
    and l_ops :: "('x, 'l, 'more2) list_ops_scheme"
locale set_to_list_loc
  fixes s_ops :: "('x, 's, 'more1) set_ops_scheme"
    and l_ops :: "('x, 'l, 'more2) list_ops_scheme"
  assumes "set_to_list_loc s_ops l_ops"
locale g_set_xx_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x, 's2, 'more2) set_ops_scheme"
  assumes "g_set_xx_loc ops1 ops2"
### theory "Draft.Algos"
### 0.527s elapsed time, 1.693s cpu time, 0.124s GC time
locale g_set_xxx_defs_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('x, 's3, 'more3) set_ops_scheme"
locale g_set_xxx_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('x, 's3, 'more3) set_ops_scheme"
  assumes "g_set_xxx_loc ops1 ops2 ops3"
locale g_set_xy_defs_loc
  fixes ops1 :: "('x1, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x2, 's2, 'more2) set_ops_scheme"
  assumes "g_set_xy_defs_loc ops1 ops2"
locale g_set_xy_loc
  fixes ops1 :: "('x1, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x2, 's2, 'more2) set_ops_scheme"
  assumes "g_set_xy_loc ops1 ops2"
locale StdBasicMapDefs
  fixes ops :: "('k, 'v, 's, 'more) map_basic_ops_scheme"
locale StdBasicOMapDefs
  fixes ops :: "('k, 'v, 's, 'more) omap_basic_ops_scheme"
locale StdBasicMap
  fixes ops :: "('k, 'v, 's, 'more) map_basic_ops_scheme"
  assumes "StdBasicMap ops"
locale g_set_xyy_defs_loc
  fixes ops0 :: "('x0, 's0, 'more0) set_ops_scheme"
    and ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x, 's2, 'more2) set_ops_scheme"
locale StdBasicOMap
  fixes ops :: "('k, 'v, 's, 'more) omap_basic_ops_scheme"
  assumes "StdBasicOMap ops"
locale StdBasicMapDefs
  fixes ops :: "('k, 'v, 's, 'more) map_basic_ops_scheme"
locale g_set_xyy_loc
  fixes ops0 :: "('x0, 's0, 'more0) set_ops_scheme"
    and ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('x, 's2, 'more2) set_ops_scheme"
  assumes "g_set_xyy_loc ops0 ops1 ops2"
locale StdBasicMap
  fixes ops :: "('k, 'v, 's, 'more) map_basic_ops_scheme"
  assumes "StdBasicMap ops"
locale StdBasicOMapDefs
  fixes ops :: "('k, 'v, 's, 'more) omap_basic_ops_scheme"
locale StdBasicOMap
  fixes ops :: "('k, 'v, 's, 'more) omap_basic_ops_scheme"
  assumes "StdBasicOMap ops"
locale g_image_filter_defs_loc
  fixes ops1 :: "('k1, 'v1, 's1, 'm1) map_ops_scheme"
    and ops2 :: "('k2, 'v2, 's2, 'm2) map_ops_scheme"
locale StdBasicSetDefs
  fixes ops :: "('x, 's, 'more) set_basic_ops_scheme"
locale StdBasicOSetDefs
  fixes ops :: "('x, 's, 'more) oset_basic_ops_scheme"
locale g_image_filter_loc
  fixes ops1 :: "('k1, 'v1, 's1, 'm1) map_ops_scheme"
    and ops2 :: "('k2, 'v2, 's2, 'm2) map_ops_scheme"
  assumes "g_image_filter_loc ops1 ops2"
locale StdBasicSet
  fixes ops :: "('x, 's, 'more) set_basic_ops_scheme"
  assumes "StdBasicSet ops"
locale g_value_image_filter_defs_loc
  fixes ops1 :: "('k, 'v1, 's1, 'm1) map_ops_scheme"
    and ops2 :: "('k, 'v2, 's2, 'm2) map_ops_scheme"
locale StdBasicOSet
  fixes ops :: "('x, 's, 'more) oset_basic_ops_scheme"
  assumes "StdBasicOSet ops"
locale StdBasicSetDefs
  fixes ops :: "('x, 's, 'more) set_basic_ops_scheme"
locale g_value_image_filter_loc
  fixes ops1 :: "('k, 'v1, 's1, 'm1) map_ops_scheme"
    and ops2 :: "('k, 'v2, 's2, 'm2) map_ops_scheme"
  assumes "g_value_image_filter_loc ops1 ops2"
### theory "Draft.MapGA"
### 1.542s elapsed time, 3.569s cpu time, 0.494s GC time
Loading theory "Draft.ListMapImpl_Invar" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.MapStdImpl")
Loading theory "Draft.ListMapImpl" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.HashSet" via "Draft.HashMap" via "Draft.HashMap_Impl")
Loading theory "Draft.TrieMapImpl" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.TrieSetImpl")
Found termination order: "(%p. length (snd p)) <*mlex*> {}"
locale StdBasicSet
  fixes ops :: "('x, 's, 'more) set_basic_ops_scheme"
  assumes "StdBasicSet ops"
locale StdBasicSet
  fixes ops :: "('x, 's, 'more) set_basic_ops_scheme"
  assumes "StdBasicSet ops"
locale StdBasicOSetDefs
  fixes ops :: "('x, 's, 'more) oset_basic_ops_scheme"
locale StdBasicOSet
  fixes ops :: "('x, 's, 'more) oset_basic_ops_scheme"
  assumes "StdBasicOSet ops"
locale image_filter_cp_defs_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('y, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('z, 's3, 'more3) set_ops_scheme"
locale image_filter_cp_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('y, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('z, 's3, 'more3) set_ops_scheme"
  assumes "image_filter_cp_loc ops1 ops2 ops3"
### theory "Draft.ListMapImpl"
### 1.172s elapsed time, 4.392s cpu time, 0.511s GC time
Loading theory "Draft.RBTMapImpl" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.RBTSetImpl")
locale inj_image_filter_cp_defs_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('y, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('z, 's3, 'more3) set_ops_scheme"
### theory "Draft.TrieMapImpl"
### 1.319s elapsed time, 4.937s cpu time, 0.569s GC time
"revg"
  :: "'a list => 'a list => 'a list"
locale inj_image_filter_cp_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('y, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('z, 's3, 'more3) set_ops_scheme"
  assumes "inj_image_filter_cp_loc ops1 ops2 ops3"
locale cart_defs_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('y, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('x * 'y, 's3, 'more3) set_ops_scheme"
locale cart_loc
  fixes ops1 :: "('x, 's1, 'more1) set_ops_scheme"
    and ops2 :: "('y, 's2, 'more2) set_ops_scheme"
    and ops3 :: "('x * 'y, 's3, 'more3) set_ops_scheme"
  assumes "cart_loc ops1 ops2 ops3"
### theory "Draft.SetGA"
### 3.148s elapsed time, 9.345s cpu time, 1.187s GC time
Loading theory "Draft.ListSetImpl" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl")
Loading theory "Draft.ListSetImpl_Invar" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl")
### theory "Draft.ListMapImpl_Invar"
### 1.882s elapsed time, 6.803s cpu time, 0.779s GC time
Loading theory "Draft.ListSetImpl_NotDist" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl")
### theory "Draft.ListSetImpl"
### 1.480s elapsed time, 5.063s cpu time, 0.877s GC time
Loading theory "Draft.ListSetImpl_Sorted" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl")
### theory "Draft.ListSetImpl_Invar"
### 2.447s elapsed time, 8.633s cpu time, 4.195s GC time
Loading theory "Draft.SetByMap" (required by "Draft.ICF_UserguideTemplates" via "Draft.ICF_Userguide" via "Draft.Collections" via "Draft.ICF_Impl" via "Draft.SetStdImpl" via "Draft.RBTSetImpl")
locale SetByMapDefs
  fixes ops :: "('x, unit, 's, 'more) map_basic_ops_scheme"
locale SetByMap
  fixes ops :: "('x, unit, 's, 'more) map_basic_ops_scheme"
  assumes "SetByMap ops"
### theory "Draft.ListSetImpl_NotDist"
### 2.765s elapsed time, 9.873s cpu time, 4.316s GC time
locale OSetByOMapDefs
  fixes ops :: "('x, unit, 's, 'more) omap_basic_ops_scheme"
### theory "Draft.RBTMapImpl"
### 3.872s elapsed time, 13.462s cpu time, 4.722s GC time
locale OSetByOMap
  fixes ops :: "('x, unit, 's, 'more) omap_basic_ops_scheme"
  assumes "OSetByOMap ops"
### theory "Draft.SetByMap"
### 1.446s elapsed time, 4.380s cpu time, 0.450s GC time
### theory "Draft.ListSetImpl_Sorted"
### 3.032s elapsed time, 8.600s cpu time, 3.819s GC time
*** Failed to load theory "Draft.Array_Iterator" (unresolved "Draft.Diff_Array")
*** Failed to load theory "Draft.FTPrioImpl" (unresolved "Draft.FTAnnotatedListImpl")
*** Failed to load theory "Draft.FTPrioUniqueImpl" (unresolved "Draft.FTAnnotatedListImpl")
*** Failed to load theory "Draft.ArrayMapImpl" (unresolved "Draft.Diff_Array")
*** Failed to load theory "Draft.ArrayHashMap_Impl" (unresolved "Draft.Array_Iterator", "Draft.Diff_Array", "Draft.ListMapImpl")
*** Failed to load theory "Draft.ArrayHashMap" (unresolved "Draft.ArrayHashMap_Impl")
*** Failed to load theory "Draft.HashMap_Impl" (unresolved "Draft.ListMapImpl", "Draft.RBTMapImpl")
*** Failed to load theory "Draft.HashMap" (unresolved "Draft.HashMap_Impl")
*** Failed to load theory "Draft.MapStdImpl" (unresolved "Draft.ArrayHashMap", "Draft.ArrayMapImpl", "Draft.HashMap", "Draft.ListMapImpl", "Draft.ListMapImpl_Invar", "Draft.RBTMapImpl", "Draft.TrieMapImpl")
*** Failed to load theory "Draft.ArraySetImpl" (unresolved "Draft.ArrayMapImpl")
*** Failed to load theory "Draft.TrieSetImpl" (unresolved "Draft.TrieMapImpl")
*** Failed to load theory "Draft.RBTSetImpl" (unresolved "Draft.RBTMapImpl")
*** Failed to load theory "Draft.ArrayHashSet" (unresolved "Draft.ArrayHashMap")
*** Failed to load theory "Draft.HashSet" (unresolved "Draft.HashMap")
*** Failed to load theory "Draft.SetStdImpl" (unresolved "Draft.ArrayHashSet", "Draft.ArraySetImpl", "Draft.HashSet", "Draft.ListSetImpl", "Draft.ListSetImpl_Invar", "Draft.ListSetImpl_NotDist", "Draft.ListSetImpl_Sorted", "Draft.RBTSetImpl", "Draft.TrieSetImpl")
*** Failed to load theory "Draft.ICF_Impl" (unresolved "Draft.BinoPrioImpl", "Draft.FTAnnotatedListImpl", "Draft.FTPrioImpl", "Draft.FTPrioUniqueImpl", "Draft.Fifo", "Draft.MapStdImpl", "Draft.SetStdImpl", "Draft.SkewPrioImpl")
*** Failed to load theory "Draft.ICF_Refine_Monadic" (unresolved "Draft.ICF_Impl")
*** Failed to load theory "Draft.ICF_Autoref" (unresolved "Draft.ICF_Refine_Monadic")
*** Failed to load theory "Draft.Collections" (unresolved "Draft.ICF_Autoref", "Draft.ICF_Impl", "Draft.ICF_Refine_Monadic")
*** Failed to load theory "Draft.ICF_Userguide" (unresolved "Draft.Collections")
*** Failed to load theory "Draft.ICF_UserguideTemplates" (unresolved "Draft.ICF_Userguide")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "204")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 298 of "$AFP/Collections/ICF/impl/ListSetImpl_Sorted.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "202")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 135 of "$AFP/Collections/ICF/impl/RBTMapImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "200")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 202 of "$AFP/Collections/ICF/impl/ListSetImpl_NotDist.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "198")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 105 of "$AFP/Collections/ICF/impl/ListSetImpl_Invar.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "196")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 120 of "$AFP/Collections/ICF/impl/ListSetImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "194")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 155 of "$AFP/Collections/ICF/impl/ListMapImpl_Invar.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "192")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 163 of "$AFP/Collections/ICF/impl/TrieMapImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "190")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 101 of "$AFP/Collections/ICF/impl/ListMapImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "188")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 110 of "$AFP/Collections/ICF/impl/SkewPrioImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "186")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 219 of "$AFP/Collections/ICF/impl/FTAnnotatedListImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "184")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 114 of "$AFP/Collections/ICF/impl/BinoPrioImpl.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "182")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 224 of "$AFP/Collections/ICF/impl/Fifo.thy")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "180")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 1067 of "$AFP/Collections/Lib/Diff_Array.thy")
Exception- TOPLEVEL_ERROR raised
