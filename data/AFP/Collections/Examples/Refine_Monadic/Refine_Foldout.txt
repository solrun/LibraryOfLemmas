Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Refine_FoldTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Refine_FoldTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Refine_FoldTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.Refine_FoldTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.136s elapsed time, 0.559s cpu time, 0.048s GC time
Loading theory "Draft.Refine_Fold" (required by "Draft.Refine_FoldTemplates")
Found termination order: "size_list size <*mlex*> {}"
### Cannot skip proof of schematic goal statement
### theory "Draft.Refine_Fold"
### 0.124s elapsed time, 0.495s cpu time, 0.000s GC time
### theory "HOL-Library.Set_Algebras"
### 0.319s elapsed time, 1.270s cpu time, 0.134s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Refine_FoldTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.358s elapsed time, 1.421s cpu time, 0.134s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Refine_FoldTemplates" via "Draft.ExtrEqs")
"Code_Target_Nat.Nat
  (of_nat
    (the (foldli
           (list_of_dlist
             (list_to_ls
               [(1::'a) + (1::'a) + (1::'a), (1::'a) + (1::'a), 1::'a]))
           (%u. u = None) (%u ua. Some u) None)) +
   of_nat
    (the (foldli
           (list_of_dlist
             (list_to_ls
               [1::'a, (1::'a) + (1::'a), (1::'a) + (1::'a) + (1::'a)]))
           (%u. u = None) (%u ua. Some u) None)) +
   of_nat
    (the (foldli (list_of_dlist (list_to_ls [(1::'a) + (1::'a), 1::'a]))
           (%u. u = None) (%u ua. Some u) None)))"
  :: "nat"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.868s elapsed time, 2.870s cpu time, 0.808s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 0.964s elapsed time, 3.032s cpu time, 0.881s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.955s elapsed time, 5.165s cpu time, 1.093s GC time
Loading theory "Draft.Templates" (required by "Draft.Refine_FoldTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.148s cpu time, 0.068s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Refine_FoldTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.478s elapsed time, 0.485s cpu time, 0.000s GC time
Loading theory "Draft.Refine_FoldTemplates"
val templateLemmas =
   [("Refine_Fold.rfoldl_simps", "rfoldl ?f ?s [] = RETURN ?s",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 1), template_var 0),
         template_hole 1),
       template_app (template_hole 0, template_var 0))),
    ("Refine_Fold.pick_sum_code_refines",
     "RETURN (pick_sum_code ?s ?l) <= pick_sum_impl ?s ?l",
     template_inequation
      (less_equals,
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Fold.foldl_mono",
     "(!!x. mono (%s. ?f s x)) ==> mono (%s. foldl ?f s ?l)",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate (template_app (template_hole 1, t_empty)))),
    ("Refine_Fold.rfoldl_simps",
     "rfoldl ?f ?s (?x # ?ls) = ?f ?s ?x >>= (%s. rfoldl ?f s ?ls)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 2, template_var 3), template_var 2),
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_var 3, template_var 2),
             template_var 1)),
         t_empty))),
    ("Refine_Fold.pick_sum_code_aux",
     "RETURN
       (foldl (%s x. Let (the (ls.sel x (%_. True))) ((+) s)) ?s0.0 ?l)
      <= pick_sum_impl ?s0.0 ?l",
     template_inequation
      (less_equals,
       template_app
        (template_hole 8,
         template_app
          (template_app
            (template_app (template_hole 7, t_empty), template_var 1),
           template_var 0)),
       template_app
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("Refine_Fold.pick_sum_impl_refine",
     "(?l, ?l') : \<langle>br ls.\<alpha> ls.invar\<rangle>list_rel ==>
      pick_sum_impl ?s0.0 ?l <= \<Down> nat_rel (pick_sum ?s0.0 ?l')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 12,
                template_app
                 (template_app (template_hole 11, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 10, template_hole 9),
                template_app
                 (template_app
                   (template_hole 8,
                    template_app (template_hole 7, template_hole 6)),
                  template_app (template_hole 5, template_hole 6))))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 3, template_var 0), template_var 2),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))))),
    ("Refine_Fold.transfer_rfoldl",
     "(!!s x. RETURN (?f s x) <= ?F s x) ==>
      RETURN (foldl ?f ?s ?l) <= rfoldl ?F ?s ?l",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_app (template_hole 1, template_var 3),
               template_var 1),
             template_var 0)),
         template_app
          (template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1),
           template_var 0)))),
    ("Refine_Fold.pick_sum_correct",
     "[| {} ~: set ?l; ALL x:set ?l. finite x |]
      ==> pick_sum ?s0.0 ?l
          <= SPEC (%s. s <= foldl (%s x. s + Max x) ?s0.0 ?l)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 12, template_hole 11),
                  template_app (template_hole 10, template_var 1))
                )
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app (template_hole 10, template_var 1)),
              t_empty)
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 6, template_var 0), template_var 1),
         template_app
          (template_hole 5, template_app (template_hole 4, t_empty))))),
    ("Refine_Fold.rfoldl_refines",
     "[| !!x x' s s'.
            [| (s, s') : ?Rs; (x, x') : ?Rl |]
            ==> ?f s x <= \<Down> ?Rs (?f' s' x');
         (?s0.0, ?s0') : ?Rs; (?l, ?l') : \<langle>?Rl\<rangle>list_rel |]
      ==> rfoldl ?f ?s0.0 ?l <= \<Down> ?Rs (rfoldl ?f' ?s0' ?l')",
     template_implication
      ([template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 11,
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_var 2)),
              template_var 7)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 1),
                  template_var 0)),
              template_app
               (template_app (template_hole 3, template_hole 2),
                template_var 6))
            )],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app (template_hole 1, template_var 5),
             template_var 3),
           template_var 1),
         template_app
          (template_app (template_hole 6, template_var 7),
           template_app
            (template_app
              (template_app (template_hole 0, template_var 4),
               template_var 2),
             template_var 0)))))]:
   (string * thm * template) list
### theory "Draft.Refine_FoldTemplates"
### 1.740s elapsed time, 2.210s cpu time, 0.327s GC time
val it = (): unit
