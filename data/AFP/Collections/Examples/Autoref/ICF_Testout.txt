Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.ICF_TestTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.ICF_TestTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.ICF_TestTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.ICF_TestTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
### theory "HOL-Library.Function_Algebras"
### 0.138s elapsed time, 0.569s cpu time, 0.049s GC time
Loading theory "Draft.ICF_Test" (required by "Draft.ICF_TestTemplates")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Cannot skip proof of schematic goal statement
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.327s elapsed time, 1.298s cpu time, 0.144s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.ICF_TestTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.417s elapsed time, 1.652s cpu time, 0.144s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.ICF_TestTemplates" via "Draft.ExtrEqs")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.920s elapsed time, 3.454s cpu time, 0.772s GC time
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.093s elapsed time, 3.897s cpu time, 0.865s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### Cannot skip proof of schematic goal statement
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.954s elapsed time, 6.518s cpu time, 1.123s GC time
Loading theory "Draft.Templates" (required by "Draft.ICF_TestTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.127s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.ICF_TestTemplates")
### Cannot skip proof of schematic goal statement
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.796s elapsed time, 1.850s cpu time, 0.775s GC time
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
"[(3, 4)]"
  :: "(nat * nat) list"
"{1, 2} Un {3, 4}"
  :: "nat set"
### Cannot skip proof of schematic goal statement
Phase "id_op"
0.001s elapsed time, 0.001s cpu time, 0.000s GC time
Success (Phase "id_op")
Phase "rel_inf"
0.011s elapsed time, 0.011s cpu time, 0.000s GC time
Success (Phase "rel_inf")
Phase "fix_rel"
0.006s elapsed time, 0.006s cpu time, 0.000s GC time
Success (Phase "fix_rel")
Phase "trans"
0.006s elapsed time, 0.006s cpu time, 0.000s GC time
Success (Phase "trans")
### Cannot skip proof of schematic goal statement
theorems:
  array_set_test.refine:
    (RETURN array_set_test,
     RETURN ({1, 2} Un {3, 4} ::: \<langle>nat_rel\<rangle>iam_set_rel))
    : \<langle>\<langle>nat_rel\<rangle>iam_set_rel\<rangle>nres_rel
  array_set_test_def:
    array_set_test ==
    the_res
     (dRETURN
       (gen_add iam_iteratei Impl_Array_Map.iam_update
         (map2set_insert Impl_Array_Map.iam_update 1
           (map2set_insert Impl_Array_Map.iam_update 2
             (Impl_Array_Map.iam_empty ())))
         (map2set_insert Impl_Array_Map.iam_update 3
           (map2set_insert Impl_Array_Map.iam_update 4
             (Impl_Array_Map.iam_empty ())))))
Phase "id_op"
0.001s elapsed time, 0.001s cpu time, 0.000s GC time
Success (Phase "id_op")
Phase "rel_inf"
0.004s elapsed time, 0.008s cpu time, 0.000s GC time
Success (Phase "rel_inf")
Phase "fix_rel"
"iam_iteratei_aux
  (Code_Target_Nat.Nat
    (max 0
      (array_length'
        (if 3 < max 0
                 (array_length'
                   (if 4 < max 0 (array_length' (Array []))
                    then array_set' (Array []) 4 (Some ())
                    else array_set'
                          (array_grow' (Array [])
                            (of_nat
                              (max (Code_Target_Nat.Nat
                                     (max 0
 (5 - max 0 (array_length' (Array [])))))
                                (Code_Target_Nat.Nat
                                  (2 * max 0 (array_length' (Array [])) +
                                   3))))
                            None)
                          4 (Some ())))
         then array_set'
               (if 4 < max 0 (array_length' (Array []))
                then array_set' (Array []) 4 (Some ())
                else array_set'
                      (array_grow' (Array [])
                        (of_nat
                          (max (Code_Target_Nat.Nat
                                 (max 0
                                   (5 - max 0 (array_length' (Array [])))))
                            (Code_Target_Nat.Nat
                              (2 * max 0 (array_length' (Array [])) + 3))))
                        None)
                      4 (Some ()))
               3 (Some ())
         else array_set'
               (array_grow'
                 (if 4 < max 0 (array_length' (Array []))
                  then array_set' (Array []) 4 (Some ())
                  else array_set'
                        (array_grow' (Array [])
                          (of_nat
                            (max (Code_Target_Nat.Nat
                                   (max 0
                                     (5 -
max 0 (array_length' (Array [])))))
                              (Code_Target_Nat.Nat
                                (2 * max 0 (array_length' (Array [])) +
                                 3))))
                          None)
                        4 (Some ()))
                 (of_nat
                   (max (Code_Target_Nat.Nat
                          (max 0
                            (4 -
                             max 0
                              (array_length'
                                (if 4 < max 0 (array_length' (Array []))
                                 then array_set' (Array []) 4 (Some ())
                                 else array_set'
 (array_grow' (Array [])
   (of_nat
     (max (Code_Target_Nat.Nat
            (max 0 (5 - max 0 (array_length' (Array [])))))
       (Code_Target_Nat.Nat (2 * max 0 (array_length' (Array [])) + 3))))
   None)
 4 (Some ()))))))
                     (Code_Target_Nat.Nat
                       (2 *
                        max 0
                         (array_length'
                           (if 4 < max 0 (array_length' (Array []))
                            then array_set' (Array []) 4 (Some ())
                            else array_set'
                                  (array_grow' (Array [])
                                    (of_nat
(max (Code_Target_Nat.Nat (max 0 (5 - max 0 (array_length' (Array [])))))
  (Code_Target_Nat.Nat (2 * max 0 (array_length' (Array [])) + 3))))
                                    None)
                                  4 (Some ()))) +
                        3))))
                 None)
               3 (Some ())))))
  (if 3 < max 0
           (array_length'
             (if 4 < max 0 (array_length' (Array []))
              then array_set' (Array []) 4 (Some ())
              else array_set'
                    (array_grow' (Array [])
                      (of_nat
                        (max (Code_Target_Nat.Nat
                               (max 0
                                 (5 - max 0 (array_length' (Array [])))))
                          (Code_Target_Nat.Nat
                            (2 * max 0 (array_length' (Array [])) + 3))))
                      None)
                    4 (Some ())))
   then array_set'
         (if 4 < max 0 (array_length' (Array []))
          then array_set' (Array []) 4 (Some ())
          else array_set'
                (array_grow' (Array [])
                  (of_nat
                    (max (Code_Target_Nat.Nat
                           (max 0 (5 - max 0 (array_length' (Array [])))))
                      (Code_Target_Nat.Nat
                        (2 * max 0 (array_length' (Array [])) + 3))))
                  None)
                4 (Some ()))
         3 (Some ())
   else array_set'
         (array_grow'
           (if 4 < max 0 (array_length' (Array []))
            then array_set' (Array []) 4 (Some ())
            else array_set'
                  (array_grow' (Array [])
                    (of_nat
                      (max (Code_Target_Nat.Nat
                             (max 0 (5 - max 0 (array_length' (Array [])))))
                        (Code_Target_Nat.Nat
                          (2 * max 0 (array_length' (Array [])) + 3))))
                    None)
                  4 (Some ()))
           (of_nat
             (max (Code_Target_Nat.Nat
                    (max 0
                      (4 -
                       max 0
                        (array_length'
                          (if 4 < max 0 (array_length' (Array []))
                           then array_set' (Array []) 4 (Some ())
                           else array_set'
                                 (array_grow' (Array [])
                                   (of_nat
                                     (max
 (Code_Target_Nat.Nat (max 0 (5 - max 0 (array_length' (Array [])))))
 (Code_Target_Nat.Nat (2 * max 0 (array_length' (Array [])) + 3))))
                                   None)
                                 4 (Some ()))))))
               (Code_Target_Nat.Nat
                 (2 *
                  max 0
                   (array_length'
                     (if 4 < max 0 (array_length' (Array []))
                      then array_set' (Array []) 4 (Some ())
                      else array_set'
                            (array_grow' (Array [])
                              (of_nat
                                (max (Code_Target_Nat.Nat
 (max 0 (5 - max 0 (array_length' (Array [])))))
                                  (Code_Target_Nat.Nat
                                    (2 * max 0 (array_length' (Array [])) +
                                     3))))
                              None)
                            4 (Some ()))) +
                  3))))
           None)
         3 (Some ()))
  Impl_Array_Map.iam_invar
  (%u. case u of
       (u, ua) =>
         %ub. if max 0 (of_nat u) < max 0 (array_length' ub)
              then array_set' ub (max 0 (of_nat u)) (Some ua)
              else array_set'
                    (array_grow' ub
                      (of_nat
                        (max (Code_Target_Nat.Nat
                               (max 0
                                 (of_nat u + 1 - max 0 (array_length' ub))))
                          (Code_Target_Nat.Nat
                            (2 * max 0 (array_length' ub) + 3))))
                      None)
                    (of_nat u) (Some ua))
  (if 1 < max 0
           (array_length'
             (if 2 < max 0 (array_length' (Array []))
              then array_set' (Array []) 2 (Some ())
              else array_set'
                    (array_grow' (Array [])
                      (of_nat
                        (max (Code_Target_Nat.Nat
                               (max 0
                                 (3 - max 0 (array_length' (Array [])))))
                          (Code_Target_Nat.Nat
                            (2 * max 0 (array_length' (Array [])) + 3))))
                      None)
                    2 (Some ())))
   then array_set'
         (if 2 < max 0 (array_length' (Array []))
          then array_set' (Array []) 2 (Some ())
          else array_set'
                (array_grow' (Array [])
                  (of_nat
                    (max (Code_Target_Nat.Nat
                           (max 0 (3 - max 0 (array_length' (Array [])))))
                      (Code_Target_Nat.Nat
                        (2 * max 0 (array_length' (Array [])) + 3))))
                  None)
                2 (Some ()))
         1 (Some ())
   else array_set'
         (array_grow'
           (if 2 < max 0 (array_length' (Array []))
            then array_set' (Array []) 2 (Some ())
            else array_set'
                  (array_grow' (Array [])
                    (of_nat
                      (max (Code_Target_Nat.Nat
                             (max 0 (3 - max 0 (array_length' (Array [])))))
                        (Code_Target_Nat.Nat
                          (2 * max 0 (array_length' (Array [])) + 3))))
                    None)
                  2 (Some ()))
           (of_nat
             (max (Code_Target_Nat.Nat
                    (max 0
                      (2 -
                       max 0
                        (array_length'
                          (if 2 < max 0 (array_length' (Array []))
                           then array_set' (Array []) 2 (Some ())
                           else array_set'
                                 (array_grow' (Array [])
                                   (of_nat
                                     (max
 (Code_Target_Nat.Nat (max 0 (3 - max 0 (array_length' (Array [])))))
 (Code_Target_Nat.Nat (2 * max 0 (array_length' (Array [])) + 3))))
                                   None)
                                 2 (Some ()))))))
               (Code_Target_Nat.Nat
                 (2 *
                  max 0
                   (array_length'
                     (if 2 < max 0 (array_length' (Array []))
                      then array_set' (Array []) 2 (Some ())
                      else array_set'
                            (array_grow' (Array [])
                              (of_nat
                                (max (Code_Target_Nat.Nat
 (max 0 (3 - max 0 (array_length' (Array [])))))
                                  (Code_Target_Nat.Nat
                                    (2 * max 0 (array_length' (Array [])) +
                                     3))))
                              None)
                            2 (Some ()))) +
                  3))))
           None)
         1 (Some ()))"
  :: "unit option array"
0.003s elapsed time, 0.003s cpu time, 0.000s GC time
Success (Phase "fix_rel")
Phase "trans"
0.003s elapsed time, 0.003s cpu time, 0.000s GC time
Success (Phase "trans")
### Cannot skip proof of schematic goal statement
Phase "id_op"
0.001s elapsed time, 0.001s cpu time, 0.000s GC time
Success (Phase "id_op")
Phase "rel_inf"
0.007s elapsed time, 0.007s cpu time, 0.000s GC time
Success (Phase "rel_inf")
Phase "fix_rel"
0.016s elapsed time, 0.016s cpu time, 0.000s GC time
Success (Phase "fix_rel")
Phase "trans"
0.005s elapsed time, 0.005s cpu time, 0.000s GC time
Success (Phase "trans")
### Cannot skip proof of schematic goal statement
Phase "id_op"
0.002s elapsed time, 0.002s cpu time, 0.000s GC time
Success (Phase "id_op")
Phase "rel_inf"
0.023s elapsed time, 0.044s cpu time, 0.034s GC time
Success (Phase "rel_inf")
Phase "fix_rel"
0.018s elapsed time, 0.018s cpu time, 0.000s GC time
Success (Phase "fix_rel")
Phase "trans"
0.005s elapsed time, 0.005s cpu time, 0.000s GC time
Success (Phase "trans")
### Cannot skip proof of schematic goal statement
Phase "id_op"
0.003s elapsed time, 0.003s cpu time, 0.000s GC time
Success (Phase "id_op")
Phase "rel_inf"
0.011s elapsed time, 0.011s cpu time, 0.000s GC time
Success (Phase "rel_inf")
Phase "fix_rel"
0.018s elapsed time, 0.018s cpu time, 0.000s GC time
Success (Phase "fix_rel")
Phase "trans"
0.005s elapsed time, 0.005s cpu time, 0.000s GC time
Success (Phase "trans")
### Cannot skip proof of schematic goal statement
Phase "id_op"
0.001s elapsed time, 0.001s cpu time, 0.000s GC time
Success (Phase "id_op")
Phase "rel_inf"
0.004s elapsed time, 0.004s cpu time, 0.000s GC time
Success (Phase "rel_inf")
Phase "fix_rel"
0.003s elapsed time, 0.003s cpu time, 0.000s GC time
Success (Phase "fix_rel")
Phase "trans"
0.002s elapsed time, 0.002s cpu time, 0.000s GC time
Success (Phase "trans")
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### Cannot skip proof of schematic goal statement
### theory "Draft.ICF_Test"
### 34.224s elapsed time, 41.451s cpu time, 3.328s GC time
Loading theory "Draft.ICF_TestTemplates"
val templateLemmas = []: (string * thm * template) list
### theory "Draft.ICF_TestTemplates"
### 1.801s elapsed time, 2.112s cpu time, 0.124s GC time
val it = (): unit
