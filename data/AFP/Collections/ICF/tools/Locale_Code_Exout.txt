Loading theory "Draft.ICF_Tools" (required by "Draft.Locale_Code_ExTemplates" via "Draft.Locale_Code_Ex" via "Draft.Locale_Code")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.Locale_Code_ExTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.Locale_Code_ExTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.Locale_Code_ExTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
infix 0 ##
signature ICF_TOOLS =
  sig
    val changed_conv: conv -> conv
    val chead_of: cterm -> cterm
    val chead_of_thm: thm -> cterm
    val define_simple:
       string -> term -> local_theory -> (term * thm) * local_theory
    val define_simple_global:
       string -> term -> theory -> (term * thm) * theory
    val define_simple_local:
       string -> term -> local_theory -> (term * thm) * local_theory
    val dest_def_eq: term -> term * term
    val dt_head: term -> term
    val dt_lhs: term -> term
    val dt_params: term -> term list
    val dt_rhs: term -> term
    val dthm_head: thm -> term
    val dthm_lhs: thm -> term
    val dthm_params: thm -> term list
    val dthm_rhs: thm -> term
    val gen_variant: (string -> bool) -> string -> string
    val import_cterm: cterm -> Proof.context -> cterm * Proof.context
    val inst_meta_cong: Proof.context -> cterm -> thm
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val norm_def_thm: thm -> thm
    val parse_cpat: cterm context_parser
    val rem_dup_prems: Proof.context -> thm -> thm
    val rename_cterm: cterm * cterm -> ctyp TVars.table * cterm Vars.table
    val renames_cterm: cterm * cterm -> bool
    val repeat_top_sweep_conv:
       (Proof.context -> conv) -> Proof.context -> conv
    val revert_abbrevs: string -> theory -> theory
    val sss_add: thm list -> Proof.context -> Proof.context
    val wrap_lthy_global: (local_theory -> local_theory) -> theory -> theory
    val wrap_lthy_local:
       (local_theory -> local_theory) -> local_theory -> local_theory
    val wrap_lthy_result_global:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> theory -> 'b * theory
    val wrap_lthy_result_local:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> local_theory -> 'b * local_theory
  end
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
structure ICF_Tools: ICF_TOOLS
### theory "Draft.ICF_Tools"
### 0.108s elapsed time, 0.443s cpu time, 0.035s GC time
Loading theory "Draft.Ord_Code_Preproc" (required by "Draft.Locale_Code_ExTemplates" via "Draft.Locale_Code_Ex" via "Draft.Locale_Code")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.134s elapsed time, 0.541s cpu time, 0.035s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.Locale_Code_ExTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### ML warning (line 26 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 37 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (trace_ft) has not been referenced.
### ML warning (line 50 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (process) has not been referenced.
signature ORD_CODE_PREPROC =
  sig
    val add: int * string * (theory -> thm -> thm) -> theory -> theory
    val get: theory -> (int * string * (theory -> thm -> thm)) list
    val rem: string -> theory -> theory
    val setup: theory -> theory
    val trace_enabled: bool ref
  end
signature OC_SIMPSET =
  sig
    val get: theory -> simpset
    val map: (simpset -> simpset) -> theory -> theory
    val setup: theory -> theory
  end
structure Ord_Code_Preproc: ORD_CODE_PREPROC
functor Oc_Simpset (sig val name: string val prio: int end): OC_SIMPSET
### theory "Draft.Ord_Code_Preproc"
### 0.041s elapsed time, 0.159s cpu time, 0.000s GC time
Loading theory "Draft.Locale_Code" (required by "Draft.Locale_Code_ExTemplates" via "Draft.Locale_Code_Ex")
### ML warning (line 343 of "$AFP/Collections/ICF/tools/Locale_Code.thy"):
### Pattern is not exhaustive.
signature LOCALE_CODE =
  sig
    val add_pat_eq: cterm -> thm list -> theory -> theory
    val close_block: theory -> theory
    val del_pat: cterm -> theory -> theory
    val get_unf_ss: theory -> simpset
    val lc_decl_del: term -> local_theory -> local_theory
    val lc_decl_eq: thm list -> local_theory -> local_theory
    val open_block: theory -> theory
    type pat_eq = cterm * thm list
    val setup: theory -> theory
    val tracing_enabled: bool ref
  end
structure Locale_Code: LOCALE_CODE
### theory "Draft.Locale_Code"
### 0.116s elapsed time, 0.463s cpu time, 0.000s GC time
Loading theory "Draft.Code_Target_ICF" (required by "Draft.Locale_Code_ExTemplates" via "Draft.Locale_Code_Ex")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.320s elapsed time, 1.262s cpu time, 0.108s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.Locale_Code_ExTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.433s elapsed time, 1.712s cpu time, 0.108s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.Locale_Code_ExTemplates" via "Draft.ExtrEqs")
### theory "Draft.Code_Target_ICF"
### 0.301s elapsed time, 1.156s cpu time, 0.170s GC time
Loading theory "Draft.Locale_Code_Ex" (required by "Draft.Locale_Code_ExTemplates")
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
locale test
  fixes a :: "nat"
    and b :: "nat"
  assumes "test a b"
  Proving monotonicity ...
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "case_sum size size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.034s elapsed time, 3.836s cpu time, 0.931s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.161s elapsed time, 4.113s cpu time, 1.030s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Code_Numeral.dup
  Code_Numeral.dup (Code_Numeral.Neg ?n) == Code_Numeral.Neg (num.Bit0 ?n)
  Code_Numeral.dup (Code_Numeral.Pos ?n) == Code_Numeral.Pos (num.Bit0 ?n)
  Code_Numeral.dup 0 == 0
Code_Numeral.sub
  Code_Numeral.sub (num.Bit0 ?m) (num.Bit1 ?n) ==
  Code_Numeral.dup (Code_Numeral.sub ?m ?n) - Code_Numeral.Pos num.One
  Code_Numeral.sub (num.Bit1 ?m) (num.Bit0 ?n) ==
  Code_Numeral.dup (Code_Numeral.sub ?m ?n) + Code_Numeral.Pos num.One
  Code_Numeral.sub (num.Bit1 ?m) (num.Bit1 ?n) ==
  Code_Numeral.dup (Code_Numeral.sub ?m ?n)
  Code_Numeral.sub (num.Bit0 ?m) (num.Bit0 ?n) ==
  Code_Numeral.dup (Code_Numeral.sub ?m ?n)
  Code_Numeral.sub num.One (num.Bit1 ?n) == Code_Numeral.Neg (num.Bit0 ?n)
  Code_Numeral.sub num.One (num.Bit0 ?n) == Code_Numeral.Neg (Num.BitM ?n)
  Code_Numeral.sub (num.Bit1 ?m) num.One == Code_Numeral.Pos (num.Bit0 ?m)
  Code_Numeral.sub (num.Bit0 ?m) num.One == Code_Numeral.Pos (Num.BitM ?m)
  Code_Numeral.sub num.One num.One == 0
If
  if False then ?x else ?y == ?y
  if True then ?x else ?y == ?x
Num.BitM
  Num.BitM num.One == num.One
  Num.BitM (num.Bit0 ?n) == num.Bit1 (Num.BitM ?n)
  Num.BitM (num.Bit1 ?n) == num.Bit1 (num.Bit0 ?n)
Suc
  Suc ?n == ?n + 1
bar
  bar ?x ?y ==
  f_zero_zero ?x + f_Suc_uu_Suc_uu ?x ?y + f_one_one ?x +
  f_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One ?y +
  f_snd_Pair_uu_numeral_Bit1_One_plus_one_numeral_Bit0_One False ?x +
  f_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
   ?y
c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
  c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One ==
  nat_of_integer (Code_Numeral.Pos (num.Bit1 (num.Bit0 num.One))) +
  nat_of_integer (Code_Numeral.Pos (num.Bit1 (num.Bit0 num.One)))
equal_class.equal [integer]
  equal_class.equal ?k ?k == True
  equal_class.equal (Code_Numeral.Neg ?k) (Code_Numeral.Neg ?l) ==
  equal_class.equal ?k ?l
  equal_class.equal (Code_Numeral.Neg ?k) (Code_Numeral.Pos ?l) == False
  equal_class.equal (Code_Numeral.Neg ?k) 0 == False
  equal_class.equal (Code_Numeral.Pos ?k) (Code_Numeral.Neg ?l) == False
  equal_class.equal (Code_Numeral.Pos ?k) (Code_Numeral.Pos ?l) ==
  equal_class.equal ?k ?l
  equal_class.equal (Code_Numeral.Pos ?k) 0 == False
  equal_class.equal 0 (Code_Numeral.Neg ?l) == False
  equal_class.equal 0 (Code_Numeral.Pos ?l) == False
  equal_class.equal 0 0 == True
equal_class.equal [nat]
  equal_class.equal ?m ?n ==
  equal_class.equal (integer_of_nat ?m) (integer_of_nat ?n)
equal_class.equal [num]
  equal_class.equal ?x ?x == True
  equal_class.equal (num.Bit0 ?x2.0) (num.Bit1 ?x3.0) == False
  equal_class.equal (num.Bit1 ?x3.0) (num.Bit0 ?x2.0) == False
  equal_class.equal num.One (num.Bit1 ?x3.0) == False
  equal_class.equal (num.Bit1 ?x3.0) num.One == False
  equal_class.equal num.One (num.Bit0 ?x2.0) == False
  equal_class.equal (num.Bit0 ?x2.0) num.One == False
  equal_class.equal (num.Bit1 ?x3.0) (num.Bit1 ?y3.0) ==
  equal_class.equal ?x3.0 ?y3.0
  equal_class.equal (num.Bit0 ?x2.0) (num.Bit0 ?y2.0) ==
  equal_class.equal ?x2.0 ?y2.0
  equal_class.equal num.One num.One == True
f_Suc_uu_Suc_uu
  f_Suc_uu_Suc_uu ?na ?n ==
  if equal_class.equal ?n 0 then Suc ?na + Suc ?na
  else Suc ?na + f_Suc_uu_Suc_uu ?na (?n - 1) +
       Suc ?na * f_Suc_uu_Suc_uu ?na (?n - 1) +
       g_Suc_uu_Suc_uu ?na (?n - 1)
f_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
  f_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
   ?n ==
  if equal_class.equal ?n 0
  then c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One +
       c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
  else c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One +
       f_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
        (?n - 1) +
       c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One *
       f_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
        (?n - 1) +
       g_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
        (?n - 1)
f_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
  f_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One ?n ==
  if equal_class.equal ?n 0
  then nat_of_integer (Code_Numeral.Pos (num.Bit1 (num.Bit0 num.One))) +
       nat_of_integer (Code_Numeral.Pos (num.Bit1 (num.Bit0 num.One)))
  else nat_of_integer (Code_Numeral.Pos (num.Bit1 (num.Bit0 num.One))) +
       f_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One (?n - 1) +
       nat_of_integer (Code_Numeral.Pos (num.Bit1 (num.Bit0 num.One))) *
       f_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One (?n - 1) +
       g_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One (?n - 1)
f_one_one
  f_one_one ?n ==
  if equal_class.equal ?n 0 then 1 + 1
  else 1 + f_one_one (?n - 1) + 1 * f_one_one (?n - 1) + g_one_one (?n - 1)
f_snd_Pair_uu_numeral_Bit1_One_plus_one_numeral_Bit0_One
  f_snd_Pair_uu_numeral_Bit1_One_plus_one_numeral_Bit0_One ?x ?n ==
  if equal_class.equal ?n 0
  then snd (?x, nat_of_integer (Code_Numeral.Pos (num.Bit1 num.One))) +
       (1 + nat_of_integer (Code_Numeral.Pos (num.Bit0 num.One)))
  else snd (?x, nat_of_integer (Code_Numeral.Pos (num.Bit1 num.One))) +
       f_snd_Pair_uu_numeral_Bit1_One_plus_one_numeral_Bit0_One ?x
        (?n - 1) +
       (1 + nat_of_integer (Code_Numeral.Pos (num.Bit0 num.One))) *
       f_snd_Pair_uu_numeral_Bit1_One_plus_one_numeral_Bit0_One ?x
        (?n - 1) +
       g_snd_Pair_uu_numeral_Bit1_One_plus_one_numeral_Bit0_One ?x (?n - 1)
f_zero_zero
  f_zero_zero ?n ==
  if equal_class.equal ?n 0 then 0
  else f_zero_zero (?n - 1) + g_zero_zero (?n - 1)
g_Suc_uu_Suc_uu
  g_Suc_uu_Suc_uu ?na ?n ==
  if equal_class.equal ?n 0 then Suc ?na
  else f_Suc_uu_Suc_uu ?na (?n - 1) + (?n - 1) + Suc ?na
g_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
  g_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
   ?n ==
  if equal_class.equal ?n 0
  then c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
  else f_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One_c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
        (?n - 1) +
       (?n - 1) +
       c_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
g_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One
  g_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One ?n ==
  if equal_class.equal ?n 0
  then nat_of_integer (Code_Numeral.Pos (num.Bit1 (num.Bit0 num.One)))
  else f_numeral_Bit1_Bit0_One_numeral_Bit1_Bit0_One (?n - 1) + (?n - 1) +
       nat_of_integer (Code_Numeral.Pos (num.Bit1 (num.Bit0 num.One)))
g_one_one
  g_one_one ?n ==
  if equal_class.equal ?n 0 then 1 else f_one_one (?n - 1) + (?n - 1) + 1
g_snd_Pair_uu_numeral_Bit1_One_plus_one_numeral_Bit0_One
  g_snd_Pair_uu_numeral_Bit1_One_plus_one_numeral_Bit0_One ?x ?n ==
  if equal_class.equal ?n 0
  then snd (?x, nat_of_integer (Code_Numeral.Pos (num.Bit1 num.One)))
  else f_snd_Pair_uu_numeral_Bit1_One_plus_one_numeral_Bit0_One ?x
        (?n - 1) +
       (?n - 1) +
       snd (?x, nat_of_integer (Code_Numeral.Pos (num.Bit1 num.One)))
g_zero_zero
  g_zero_zero ?n ==
  if equal_class.equal ?n 0 then 0 else f_zero_zero (?n - 1) + (?n - 1) + 0
integer_of_nat
  integer_of_nat (Code_Target_Nat.Nat ?x) == ?x
less [integer]
  Code_Numeral.Neg ?k < Code_Numeral.Neg ?l == ?l < ?k
  Code_Numeral.Neg ?k < Code_Numeral.Pos ?l == True
  Code_Numeral.Neg ?k < 0 == True
  Code_Numeral.Pos ?k < Code_Numeral.Neg ?l == False
  Code_Numeral.Pos ?k < Code_Numeral.Pos ?l == ?k < ?l
  Code_Numeral.Pos ?k < 0 == False
  0 < Code_Numeral.Neg ?l == False
  0 < Code_Numeral.Pos ?l == True
  0 < 0 == False
less [num]
  num.Bit1 ?m < num.Bit0 ?n == ?m < ?n
  num.Bit1 ?m < num.Bit1 ?n == ?m < ?n
  num.Bit0 ?m < num.Bit1 ?n == ?m <= ?n
  num.Bit0 ?m < num.Bit0 ?n == ?m < ?n
  num.One < num.Bit1 ?n == True
  num.One < num.Bit0 ?n == True
  ?m < num.One == False
less_eq [integer]
  Code_Numeral.Neg ?k <= Code_Numeral.Neg ?l == ?l <= ?k
  Code_Numeral.Neg ?k <= Code_Numeral.Pos ?l == True
  Code_Numeral.Neg ?k <= 0 == True
  Code_Numeral.Pos ?k <= Code_Numeral.Neg ?l == False
  Code_Numeral.Pos ?k <= Code_Numeral.Pos ?l == ?k <= ?l
  Code_Numeral.Pos ?k <= 0 == False
  0 <= Code_Numeral.Neg ?l == False
  0 <= Code_Numeral.Pos ?l == True
  0 <= 0 == True
less_eq [num]
  num.Bit1 ?m <= num.Bit0 ?n == ?m < ?n
  num.Bit1 ?m <= num.Bit1 ?n == ?m <= ?n
  num.Bit0 ?m <= num.Bit1 ?n == ?m <= ?n
  num.Bit0 ?m <= num.Bit0 ?n == ?m <= ?n
  num.Bit1 ?m <= num.One == False
  num.Bit0 ?m <= num.One == False
  num.One <= ?n == True
max
  max ?a ?b == if ?a <= ?b then ?b else ?a
minus [integer]
  Code_Numeral.Neg ?m - Code_Numeral.Neg ?n == Code_Numeral.sub ?n ?m
  Code_Numeral.Neg ?m - Code_Numeral.Pos ?n == Code_Numeral.Neg (?m + ?n)
  Code_Numeral.Pos ?m - Code_Numeral.Neg ?n == Code_Numeral.Pos (?m + ?n)
  Code_Numeral.Pos ?m - Code_Numeral.Pos ?n == Code_Numeral.sub ?m ?n
  0 - ?l == - ?l
  ?k - 0 == ?k
minus [nat]
  integer_of_nat (?m - ?n) == max 0 (integer_of_nat ?m - integer_of_nat ?n)
nat_of_integer
  integer_of_nat (nat_of_integer ?k) == max 0 ?k
one_class.one [nat]
  integer_of_nat 1 == Code_Numeral.Pos num.One
plus [integer]
  Code_Numeral.Neg ?m + Code_Numeral.Neg ?n == Code_Numeral.Neg (?m + ?n)
  Code_Numeral.Neg ?m + Code_Numeral.Pos ?n == Code_Numeral.sub ?n ?m
  Code_Numeral.Pos ?m + Code_Numeral.Neg ?n == Code_Numeral.sub ?m ?n
  Code_Numeral.Pos ?m + Code_Numeral.Pos ?n == Code_Numeral.Pos (?m + ?n)
  0 + ?l == ?l
  ?k + 0 == ?k
plus [nat]
  integer_of_nat (?m + ?n) == integer_of_nat ?m + integer_of_nat ?n
plus [num]
  num.Bit1 ?m + num.Bit1 ?n == num.Bit0 (?m + ?n + num.One)
  num.Bit1 ?m + num.Bit0 ?n == num.Bit1 (?m + ?n)
  num.Bit1 ?m + num.One == num.Bit0 (?m + num.One)
  num.Bit0 ?m + num.Bit1 ?n == num.Bit1 (?m + ?n)
  num.Bit0 ?m + num.Bit0 ?n == num.Bit0 (?m + ?n)
  num.Bit0 ?m + num.One == num.Bit1 ?m
  num.One + num.Bit1 ?n == num.Bit0 (?n + num.One)
  num.One + num.Bit0 ?n == num.Bit1 ?n
  num.One + num.One == num.Bit0 num.One
snd
  snd (?x1.0, ?x2.0) == ?x2.0
times [integer]
  Code_Numeral.Neg ?m * Code_Numeral.Neg ?n == Code_Numeral.Pos (?m * ?n)
  Code_Numeral.Neg ?m * Code_Numeral.Pos ?n == Code_Numeral.Neg (?m * ?n)
  Code_Numeral.Pos ?m * Code_Numeral.Neg ?n == Code_Numeral.Neg (?m * ?n)
  Code_Numeral.Pos ?m * Code_Numeral.Pos ?n == Code_Numeral.Pos (?m * ?n)
  0 * ?l == 0
  ?k * 0 == 0
times [nat]
  integer_of_nat (?m * ?n) == integer_of_nat ?m * integer_of_nat ?n
times [num]
  num.Bit1 ?m * num.Bit1 ?n == num.Bit1 (?m + ?n + num.Bit0 (?m * ?n))
  num.Bit1 ?m * num.Bit0 ?n == num.Bit0 (num.Bit1 ?m * ?n)
  num.Bit0 ?m * num.Bit1 ?n == num.Bit0 (?m * num.Bit1 ?n)
  num.Bit0 ?m * num.Bit0 ?n == num.Bit0 (num.Bit0 (?m * ?n))
  num.One * ?n == ?n
  ?m * num.One == ?m
uminus [integer]
  - Code_Numeral.Neg ?m == Code_Numeral.Pos ?m
  - Code_Numeral.Pos ?m == Code_Numeral.Neg ?m
  - 0 == 0
zero_class.zero [nat]
  integer_of_nat 0 == 0
### theory "Draft.Locale_Code_Ex"
### 1.488s elapsed time, 5.128s cpu time, 1.054s GC time
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.163s elapsed time, 7.067s cpu time, 1.254s GC time
Loading theory "Draft.Templates" (required by "Draft.Locale_Code_ExTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.067s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.Locale_Code_ExTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.465s elapsed time, 0.525s cpu time, 0.077s GC time
*** Failed to load theory "Draft.Locale_Code_ExTemplates" (unresolved "Draft.Locale_Code_Ex")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "180")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 88 of "$AFP/Collections/ICF/tools/Locale_Code_Ex.thy")
Exception- TOPLEVEL_ERROR raised
