Loading theory "HOL-Library.Function_Algebras" (required by "Draft.DatRefTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Tree" (required by "Draft.DatRefTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.DatRefTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.DatRefTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.173s elapsed time, 0.700s cpu time, 0.054s GC time
Loading theory "Draft.DatRef" (required by "Draft.DatRefTemplates")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.335s elapsed time, 1.316s cpu time, 0.166s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.DatRefTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.369s elapsed time, 1.450s cpu time, 0.166s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.DatRefTemplates" via "Draft.ExtrEqs")
locale while_algo
  fixes WA :: "'S while_algo"
  assumes "while_algo WA"
locale wa_refine
  fixes WAC :: "'C while_algo"
    and WAA :: "'A while_algo"
    and \<alpha> :: "'C => 'A"
  assumes "wa_refine WAC WAA \<alpha>"
locale wa_precise_refine
  fixes WAC :: "'C while_algo"
    and WAA :: "'A while_algo"
    and \<alpha> :: "'C => 'A"
  assumes "wa_precise_refine WAC WAA \<alpha>"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
  Proving monotonicity ...
locale det_while_algo
  fixes WA :: "'S det_while_algo"
  assumes "det_while_algo WA"
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
### theory "Draft.DatRef"
### 0.692s elapsed time, 2.678s cpu time, 0.327s GC time
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.929s elapsed time, 3.284s cpu time, 0.819s GC time
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.010s elapsed time, 3.385s cpu time, 0.819s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.919s elapsed time, 5.502s cpu time, 1.113s GC time
Loading theory "Draft.Templates" (required by "Draft.DatRefTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.047s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.DatRefTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.465s elapsed time, 0.535s cpu time, 0.087s GC time
Loading theory "Draft.DatRefTemplates"
val templateLemmas =
   [("DatRef.wa_pref_refl", "wa_precise_refine ?WA ?WA id",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 0),
           template_hole 0)
         )),
    ("DatRef.wa_ref_refl", "wa_refine ?WA ?WA id",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 1, template_var 0),
             template_var 0),
           template_hole 0)
         )),
    ("DatRef.dwa_is_wa",
     "while_algo (det_wa_wa ?DWA) = det_while_algo ?DWA",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("DatRef.det_while_algo_intro",
     "while_algo (det_wa_wa ?DWA) ==> det_while_algo ?DWA",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("DatRef.wa_pref_trans",
     "[| wa_precise_refine ?WC ?WB ?\<alpha>1.0;
         wa_precise_refine ?WB ?WA ?\<alpha>2.0 |]
      ==> wa_precise_refine ?WC ?WA (?\<alpha>2.0 o ?\<alpha>1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("DatRef.wa_ref_trans",
     "[| wa_refine ?WC ?WB ?\<alpha>1.0; wa_refine ?WB ?WA ?\<alpha>2.0 |]
      ==> wa_refine ?WC ?WA (?\<alpha>2.0 o ?\<alpha>1.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 3),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 4),
               template_var 1),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2))
           ))),
    ("DatRef.wa_refine_intro",
     "[| while_algo ?WAA;
         !!s s'.
            [| s : ?invar_addc; s : ?condc; ?\<alpha> s : wa_invar ?WAA;
               (s, s') : ?stepc |]
            ==> s' : ?invar_addc;
         ?initialc <= ?invar_addc;
         !!s. [| s : ?invar_addc; ?\<alpha> s : wa_invar ?WAA; s : ?condc |]
              ==> ?\<alpha> s : wa_cond ?WAA;
         !!s s'.
            [| s : ?invar_addc; s : ?condc; ?\<alpha> s : wa_invar ?WAA;
               (s, s') : ?stepc |]
            ==> (?\<alpha> s, ?\<alpha> s') : wa_step ?WAA;
         ?\<alpha> ` ?initialc <= wa_initial ?WAA |]
      ==> while_algo
           (| wa_cond = ?condc, wa_step = ?stepc, wa_initial = ?initialc,
              wa_invar =
                ?invar_addc Int {s. ?\<alpha> s : wa_invar ?WAA} |) &
          wa_refine
           (| wa_cond = ?condc, wa_step = ?stepc, wa_initial = ?initialc,
              wa_invar = ?invar_addc Int {s. ?\<alpha> s : wa_invar ?WAA} |)
           ?WAA ?\<alpha>",
     template_implication
      ([template_predicate
         (template_app (template_hole 21, template_var 5)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_inequation (less_equals, template_var 0, template_var 4),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_predicate (template_app (template_hole 20, t_empty)),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 8, template_var 2), template_var 0),
          template_app (template_hole 7, template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_hole 5,
                 template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 4, template_var 3),
                         template_var 1),
                       template_var 0),
                     template_app
                      (template_app (template_hole 3, template_var 4),
                       template_app (template_hole 2, t_empty))),
                   template_hole 1))),
             template_app
              (template_app
                (template_app
                  (template_hole 0,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_app (template_hole 4, template_var 3),
                           template_var 1),
                         template_var 0),
                       template_app
                        (template_app (template_hole 3, template_var 4),
                         template_app (template_hole 2, t_empty))),
                     template_hole 1)),
                 template_var 5),
               template_var 2))
           )))]:
   (string * thm * template) list
### theory "Draft.DatRefTemplates"
### 0.275s elapsed time, 0.381s cpu time, 0.000s GC time
val it = (): unit
