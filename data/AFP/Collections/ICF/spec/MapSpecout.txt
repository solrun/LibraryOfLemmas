Loading theory "Draft.ICF_Tools" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec" via "Draft.ICF_Spec_Base" via "Draft.Record_Intf")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.MapSpecTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.SetIterator" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It" via "Draft.Proper_Iterator" via "Draft.SetIteratorOperations")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.MapSpecTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
infix 0 ##
signature ICF_TOOLS =
  sig
    val changed_conv: conv -> conv
    val chead_of: cterm -> cterm
    val chead_of_thm: thm -> cterm
    val define_simple:
       string -> term -> local_theory -> (term * thm) * local_theory
    val define_simple_global:
       string -> term -> theory -> (term * thm) * theory
    val define_simple_local:
       string -> term -> local_theory -> (term * thm) * local_theory
    val dest_def_eq: term -> term * term
    val dt_head: term -> term
    val dt_lhs: term -> term
    val dt_params: term -> term list
    val dt_rhs: term -> term
    val dthm_head: thm -> term
    val dthm_lhs: thm -> term
    val dthm_params: thm -> term list
    val dthm_rhs: thm -> term
    val gen_variant: (string -> bool) -> string -> string
    val import_cterm: cterm -> Proof.context -> cterm * Proof.context
    val inst_meta_cong: Proof.context -> cterm -> thm
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val norm_def_thm: thm -> thm
    val parse_cpat: cterm context_parser
    val rem_dup_prems: Proof.context -> thm -> thm
    val rename_cterm: cterm * cterm -> ctyp TVars.table * cterm Vars.table
    val renames_cterm: cterm * cterm -> bool
    val repeat_top_sweep_conv:
       (Proof.context -> conv) -> Proof.context -> conv
    val revert_abbrevs: string -> theory -> theory
    val sss_add: thm list -> Proof.context -> Proof.context
    val wrap_lthy_global: (local_theory -> local_theory) -> theory -> theory
    val wrap_lthy_local:
       (local_theory -> local_theory) -> local_theory -> local_theory
    val wrap_lthy_result_global:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> theory -> 'b * theory
    val wrap_lthy_result_local:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> local_theory -> 'b * local_theory
  end
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
structure ICF_Tools: ICF_TOOLS
### theory "Draft.ICF_Tools"
### 0.093s elapsed time, 0.409s cpu time, 0.000s GC time
Loading theory "Draft.Ord_Code_Preproc" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec" via "Draft.ICF_Spec_Base" via "Draft.Record_Intf")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.536s cpu time, 0.047s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.MapSpecTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### ML warning (line 26 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 37 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (trace_ft) has not been referenced.
### ML warning (line 50 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (process) has not been referenced.
signature ORD_CODE_PREPROC =
  sig
    val add: int * string * (theory -> thm -> thm) -> theory -> theory
    val get: theory -> (int * string * (theory -> thm -> thm)) list
    val rem: string -> theory -> theory
    val setup: theory -> theory
    val trace_enabled: bool ref
  end
signature OC_SIMPSET =
  sig
    val get: theory -> simpset
    val map: (simpset -> simpset) -> theory -> theory
    val setup: theory -> theory
  end
structure Ord_Code_Preproc: ORD_CODE_PREPROC
functor Oc_Simpset (sig val name: string val prio: int end): OC_SIMPSET
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "Draft.Ord_Code_Preproc"
### 0.057s elapsed time, 0.222s cpu time, 0.000s GC time
Loading theory "Draft.Locale_Code" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec" via "Draft.ICF_Spec_Base")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
Found termination order: "size_list size <*mlex*> {}"
### ML warning (line 343 of "$AFP/Collections/ICF/tools/Locale_Code.thy"):
### Pattern is not exhaustive.
signature LOCALE_CODE =
  sig
    val add_pat_eq: cterm -> thm list -> theory -> theory
    val close_block: theory -> theory
    val del_pat: cterm -> theory -> theory
    val get_unf_ss: theory -> simpset
    val lc_decl_del: term -> local_theory -> local_theory
    val lc_decl_eq: thm list -> local_theory -> local_theory
    val open_block: theory -> theory
    type pat_eq = cterm * thm list
    val setup: theory -> theory
    val tracing_enabled: bool ref
  end
structure Locale_Code: LOCALE_CODE
### theory "Draft.Locale_Code"
### 0.172s elapsed time, 0.665s cpu time, 0.083s GC time
Loading theory "Draft.Record_Intf" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec" via "Draft.ICF_Spec_Base")
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.838s cpu time, 0.083s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.MapSpecTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.379s elapsed time, 1.502s cpu time, 0.130s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.MapSpecTemplates" via "Draft.ExtrEqs")
signature RECORD_INTF =
  sig
    val add_unf_thms: thm list -> Context.generic -> Context.generic
    val add_unf_thms_global: thm list -> theory -> theory
    val get_unf_ss: Context.generic -> simpset
    val get_unf_thms: Context.generic -> thm list
    val icf_locales_tac: Proof.context -> tactic
    val icf_rec_def: thm -> Context.generic -> Context.generic
    val icf_rec_def_attr: attribute context_parser
    val setup: theory -> theory
  end
structure Record_Intf: RECORD_INTF
### theory "Draft.Record_Intf"
### 0.061s elapsed time, 0.242s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.MapSpecTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.SetIterator"
### 1.355s elapsed time, 5.049s cpu time, 1.041s GC time
Loading theory "Draft.Idx_Iterator" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.012s elapsed time, 3.714s cpu time, 0.911s GC time
Loading theory "Draft.SetIteratorOperations" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It" via "Draft.Proper_Iterator")
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.074s elapsed time, 3.958s cpu time, 0.911s GC time
val it = fn:
   (theory -> theory) ->
     (Proof.context -> Proof.context) -> Context.generic -> Context.generic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Idx_Iterator"
### 0.341s elapsed time, 1.270s cpu time, 0.131s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.000s elapsed time, 6.332s cpu time, 1.225s GC time
Loading theory "Draft.Templates" (required by "Draft.MapSpecTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.050s elapsed time, 0.099s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.MapSpecTemplates")
### theory "Draft.SetIteratorOperations"
### 1.690s elapsed time, 4.223s cpu time, 1.099s GC time
Loading theory "Draft.Proper_Iterator" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It")
Loading theory "Draft.SetIteratorGA" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.779s elapsed time, 1.975s cpu time, 0.830s GC time
structure Icf_Proper_Iterator:
  sig
    val add: attribute
    val add_thm: thm -> Context.generic -> Context.generic
    val del: attribute
    val del_thm: thm -> Context.generic -> Context.generic
    val get: Proof.context -> thm list
    structure icf_proper_iteratorI: NAMED_THMS
    val setup: theory -> theory
  end
### theory "Draft.Proper_Iterator"
### 0.369s elapsed time, 0.859s cpu time, 0.082s GC time
Loading theory "Draft.It_to_It" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
Loading theory "Draft.Gen_Iterator" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
locale proper_it_loc
  fixes
    it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
    and
    it' ::
      "'s => ('\<sigma> => bool)
             => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
  assumes "proper_it_loc it it'"
### theory "Draft.It_to_It"
### 0.086s elapsed time, 0.260s cpu time, 0.000s GC time
### theory "Draft.SetIteratorGA"
### 0.586s elapsed time, 1.391s cpu time, 0.134s GC time
### theory "Draft.Gen_Iterator"
### 0.443s elapsed time, 0.841s cpu time, 0.108s GC time
Loading theory "Draft.Iterator" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec" via "Draft.ICF_Spec_Base")
### theory "Draft.Iterator"
### 0.360s elapsed time, 0.360s cpu time, 0.000s GC time
Loading theory "Draft.ICF_Spec_Base" (required by "Draft.MapSpecTemplates" via "Draft.MapSpec")
### theory "Draft.ICF_Spec_Base"
### 0.216s elapsed time, 0.216s cpu time, 0.000s GC time
Loading theory "Draft.MapSpec" (required by "Draft.MapSpecTemplates")
locale map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
locale map_no_invar
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "map_no_invar invar"
locale map_empty
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "map_empty \<alpha> invar empty"
locale map_lookup
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and lookup :: "'u => 's => 'v option"
  assumes "map_lookup \<alpha> invar lookup"
locale map_update
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and update :: "'u => 'v => 's => 's"
  assumes "map_update \<alpha> invar update"
locale map_update_dj
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and update_dj :: "'u => 'v => 's => 's"
  assumes "map_update_dj \<alpha> invar update_dj"
locale map_delete
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and delete :: "'u => 's => 's"
  assumes "map_delete \<alpha> invar delete"
locale map_add
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and add :: "'s => 's => 's"
  assumes "MapSpec.map_add \<alpha> invar add"
locale map_add_dj
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and add_dj :: "'s => 's => 's"
  assumes "map_add_dj \<alpha> invar add_dj"
locale map_isEmpty
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "map_isEmpty \<alpha> invar isEmpty"
locale map_sng
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and sng :: "'u => 'v => 's"
  assumes "map_sng \<alpha> invar sng"
locale map_isSng
  fixes \<alpha> :: "'s => 'k => 'v option"
    and invar :: "'s => bool"
    and isSng :: "'s => bool"
  assumes "map_isSng \<alpha> invar isSng"
locale finite_map
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "finite_map \<alpha> invar"
locale map_size
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and size :: "'s => nat"
  assumes "map_size \<alpha> invar size"
locale map_size_abort
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and size_abort :: "nat => 's => nat"
  assumes "map_size_abort \<alpha> invar size_abort"
locale poly_map_iteratei_defs
  fixes
    list_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
locale poly_map_iteratei
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and
    list_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
  assumes "poly_map_iteratei \<alpha> invar list_it"
locale map_ball
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and ball :: "'s => ('u * 'v => bool) => bool"
  assumes "map_ball \<alpha> invar ball"
locale map_bex
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and bex :: "'s => ('u * 'v => bool) => bool"
  assumes "map_bex \<alpha> invar bex"
locale map_sel
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and sel :: "'s => ('u * 'v => 'r option) => 'r option"
  assumes "map_sel \<alpha> invar sel"
locale map_sel'
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and sel' :: "'s => ('u * 'v => bool) => ('u * 'v) option"
  assumes "map_sel' \<alpha> invar sel'"
locale map_to_list
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_list :: "'s => ('u * 'v) list"
  assumes "map_to_list \<alpha> invar to_list"
locale list_to_map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_map :: "('u * 'v) list => 's"
  assumes "list_to_map \<alpha> invar to_map"
locale map_image_filter
  fixes \<alpha>1 :: "'m1 => 'u1 => 'v1 option"
    and invar1 :: "'m1 => bool"
    and \<alpha>2 :: "'m2 => 'u2 => 'v2 option"
    and invar2 :: "'m2 => bool"
    and
    map_image_filter :: "('u1 * 'v1 => ('u2 * 'v2) option) => 'm1 => 'm2"
  assumes
    "map_image_filter \<alpha>1 invar1 \<alpha>2 invar2 map_image_filter"
locale map_value_image_filter
  fixes \<alpha>1 :: "'m1 => 'u => 'v1 option"
    and invar1 :: "'m1 => bool"
    and \<alpha>2 :: "'m2 => 'u => 'v2 option"
    and invar2 :: "'m2 => bool"
    and map_value_image_filter :: "('u => 'v1 => 'v2 option) => 'm1 => 'm2"
  assumes
    "map_value_image_filter \<alpha>1 invar1 \<alpha>2 invar2
      map_value_image_filter"
locale map_restrict
  fixes \<alpha>1 :: "'m1 => 'u => 'v option"
    and invar1 :: "'m1 => bool"
    and \<alpha>2 :: "'m2 => 'u => 'v option"
    and invar2 :: "'m2 => bool"
    and restrict :: "('u * 'v => bool) => 'm1 => 'm2"
  assumes "map_restrict \<alpha>1 invar1 \<alpha>2 invar2 restrict"
locale ordered_map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
locale ordered_finite_map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
  assumes "ordered_finite_map \<alpha> invar"
locale poly_map_iterateoi_defs
  fixes
    olist_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
locale poly_map_iterateoi
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and
    list_ordered_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
  assumes "poly_map_iterateoi \<alpha> invar list_ordered_it"
locale poly_map_rev_iterateoi_defs
  fixes
    list_rev_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
locale poly_map_rev_iterateoi
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and
    list_rev_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
  assumes "poly_map_rev_iterateoi \<alpha> invar list_rev_it"
locale map_min
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and min :: "'s => ('u * 'v => bool) => ('u * 'v) option"
  assumes "map_min \<alpha> invar min"
locale map_max
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and max :: "'s => ('u * 'v => bool) => ('u * 'v) option"
  assumes "map_max \<alpha> invar max"
locale map_to_sorted_list
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_sorted_list :: "'s => ('u * 'v) list"
  assumes "MapSpec.map_to_sorted_list \<alpha> invar to_sorted_list"
locale map_to_rev_list
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_rev_list :: "'s => ('u * 'v) list"
  assumes "map_to_rev_list \<alpha> invar to_rev_list"
locale StdMapDefs
  fixes ops :: "('k, 'v, 's, 'more) map_ops_scheme"
locale StdMap
  fixes ops :: "('k, 'v, 's, 'more) map_ops_scheme"
  assumes "StdMap ops"
locale StdMap_no_invar
  fixes ops :: "('a, 'b, 'c, 'd) map_ops_scheme"
  assumes "StdMap_no_invar ops"
locale StdOMapDefs
  fixes ops :: "('k, 'v, 's, 'more) omap_ops_scheme"
locale StdOMap
  fixes ops :: "('k, 'v, 's, 'more) omap_ops_scheme"
  assumes "StdOMap ops"
### theory "Draft.MapSpec"
### 2.472s elapsed time, 3.522s cpu time, 1.408s GC time
Loading theory "Draft.MapSpecTemplates"
val templateLemmas =
   [("MapSpec.map_sel_altI",
     "[| !!s f r P.
            [| ?invar s; ?sel s f = Some r;
               !!u v.
                  [| ?\<alpha> s u = Some v; f (u, v) = Some r |] ==> P |]
            ==> P;
         !!s f u v.
            [| ?invar s; ?sel s f = None; ?\<alpha> s u = Some v |]
            ==> f (u, v) = None |]
      ==> map_sel ?\<alpha> ?invar ?sel",
     template_implication
      ([template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 13, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("MapSpec.StdMap_intro",
     "[| map_empty (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_empty ?ops);
         map_lookup (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_lookup ?ops);
         map_update (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_update ?ops);
         map_update_dj (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_update_dj ?ops);
         map_delete (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_delete ?ops);
         poly_map_iteratei (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_list_it ?ops);
         map_sng (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_sng ?ops);
         map_restrict (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_\<alpha> ?ops) (map_op_invar ?ops) (map_op_restrict ?ops);
         MapSpec.map_add (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_add ?ops);
         map_add_dj (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_add_dj ?ops);
         map_isEmpty (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_isEmpty ?ops);
         map_isSng (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_isSng ?ops);
         map_ball (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_ball ?ops);
         map_bex (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_bex ?ops);
         map_size (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_size ?ops);
         map_size_abort (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_size_abort ?ops);
         map_sel' (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_sel ?ops);
         map_to_list (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_to_list ?ops);
         list_to_map (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_to_map ?ops) |]
      ==> StdMap ?ops",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 40,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 37, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 36,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 35, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 34,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 33, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 31, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 30,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 29, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 28,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 27, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 26,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 25, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 24,
                      template_app (template_hole 39, template_var 0)),
                    template_app (template_hole 38, template_var 0)),
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 23, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 22,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 21, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 20,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 19, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 17, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 15, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 13, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 11, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 9, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 5, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 39, template_var 0)),
                template_app (template_hole 38, template_var 0)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("MapSpec.StdOMap_intro",
     "[| map_empty (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_empty ?ops);
         map_lookup (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_lookup ?ops);
         map_update (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_update ?ops);
         map_update_dj (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_update_dj ?ops);
         map_delete (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_delete ?ops);
         poly_map_iteratei (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_list_it ?ops);
         map_sng (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_sng ?ops);
         map_restrict (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_\<alpha> ?ops) (map_op_invar ?ops) (map_op_restrict ?ops);
         MapSpec.map_add (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_add ?ops);
         map_add_dj (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_add_dj ?ops);
         map_isEmpty (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_isEmpty ?ops);
         map_isSng (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_isSng ?ops);
         map_ball (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_ball ?ops);
         map_bex (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_bex ?ops);
         map_size (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_size ?ops);
         map_size_abort (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_size_abort ?ops);
         map_sel' (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_sel ?ops);
         map_to_list (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_to_list ?ops);
         list_to_map (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_to_map ?ops);
         poly_map_iterateoi (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_ordered_list_it ?ops);
         poly_map_rev_iterateoi (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_rev_list_it ?ops);
         map_min (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_min ?ops);
         map_max (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_max ?ops);
         MapSpec.map_to_sorted_list (map_op_\<alpha> ?ops)
          (map_op_invar ?ops) (map_op_to_sorted_list ?ops);
         map_to_rev_list (map_op_\<alpha> ?ops) (map_op_invar ?ops)
          (map_op_to_rev_list ?ops) |]
      ==> StdOMap ?ops",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 52,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 49, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 48,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 47, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 46,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 45, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 44,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 43, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 42,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 41, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 40,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 39, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 38,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 37, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app
                     (template_hole 36,
                      template_app (template_hole 51, template_var 0)),
                    template_app (template_hole 50, template_var 0)),
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 35, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 34,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 33, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 32,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 31, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 30,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 29, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 28,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 27, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 26,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 25, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 24,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 23, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 22,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 21, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 20,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 19, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 18,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 17, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 16,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 15, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 14,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 13, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 12,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 11, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 10,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 9, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 8,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 7, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 6,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 5, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 4,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 3, template_var 0))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 2,
                  template_app (template_hole 51, template_var 0)),
                template_app (template_hole 50, template_var 0)),
              template_app (template_hole 1, template_var 0))
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0))))]:
   (string * thm * template) list
### theory "Draft.MapSpecTemplates"
### 0.504s elapsed time, 0.721s cpu time, 0.102s GC time
val it = (): unit
