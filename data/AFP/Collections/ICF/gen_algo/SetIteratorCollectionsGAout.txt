Loading theory "Draft.ICF_Tools" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Record_Intf")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.SetIterator" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It" via "Draft.Proper_Iterator" via "Draft.SetIteratorOperations")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
infix 0 ##
signature ICF_TOOLS =
  sig
    val changed_conv: conv -> conv
    val chead_of: cterm -> cterm
    val chead_of_thm: thm -> cterm
    val define_simple:
       string -> term -> local_theory -> (term * thm) * local_theory
    val define_simple_global:
       string -> term -> theory -> (term * thm) * theory
    val define_simple_local:
       string -> term -> local_theory -> (term * thm) * local_theory
    val dest_def_eq: term -> term * term
    val dt_head: term -> term
    val dt_lhs: term -> term
    val dt_params: term -> term list
    val dt_rhs: term -> term
    val dthm_head: thm -> term
    val dthm_lhs: thm -> term
    val dthm_params: thm -> term list
    val dthm_rhs: thm -> term
    val gen_variant: (string -> bool) -> string -> string
    val import_cterm: cterm -> Proof.context -> cterm * Proof.context
    val inst_meta_cong: Proof.context -> cterm -> thm
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val norm_def_thm: thm -> thm
    val parse_cpat: cterm context_parser
    val rem_dup_prems: Proof.context -> thm -> thm
    val rename_cterm: cterm * cterm -> ctyp TVars.table * cterm Vars.table
    val renames_cterm: cterm * cterm -> bool
    val repeat_top_sweep_conv:
       (Proof.context -> conv) -> Proof.context -> conv
    val revert_abbrevs: string -> theory -> theory
    val sss_add: thm list -> Proof.context -> Proof.context
    val wrap_lthy_global: (local_theory -> local_theory) -> theory -> theory
    val wrap_lthy_local:
       (local_theory -> local_theory) -> local_theory -> local_theory
    val wrap_lthy_result_global:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> theory -> 'b * theory
    val wrap_lthy_result_local:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> local_theory -> 'b * local_theory
  end
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
structure ICF_Tools: ICF_TOOLS
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "Draft.ICF_Tools"
### 0.119s elapsed time, 0.472s cpu time, 0.049s GC time
Loading theory "Draft.Ord_Code_Preproc" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Record_Intf")
### theory "HOL-Library.Function_Algebras"
### 0.132s elapsed time, 0.519s cpu time, 0.049s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### ML warning (line 26 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 37 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (trace_ft) has not been referenced.
### ML warning (line 50 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (process) has not been referenced.
signature ORD_CODE_PREPROC =
  sig
    val add: int * string * (theory -> thm -> thm) -> theory -> theory
    val get: theory -> (int * string * (theory -> thm -> thm)) list
    val rem: string -> theory -> theory
    val setup: theory -> theory
    val trace_enabled: bool ref
  end
signature OC_SIMPSET =
  sig
    val get: theory -> simpset
    val map: (simpset -> simpset) -> theory -> theory
    val setup: theory -> theory
  end
structure Ord_Code_Preproc: ORD_CODE_PREPROC
functor Oc_Simpset (sig val name: string val prio: int end): OC_SIMPSET
### theory "Draft.Ord_Code_Preproc"
### 0.058s elapsed time, 0.232s cpu time, 0.000s GC time
Loading theory "Draft.Locale_Code" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec" via "Draft.ICF_Spec_Base")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
### theory "HOL-Library.Nat_Bijection"
### 0.336s elapsed time, 1.313s cpu time, 0.132s GC time
Loading theory "Draft.Record_Intf" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec" via "Draft.ICF_Spec_Base")
### ML warning (line 343 of "$AFP/Collections/ICF/tools/Locale_Code.thy"):
### Pattern is not exhaustive.
signature LOCALE_CODE =
  sig
    val add_pat_eq: cterm -> thm list -> theory -> theory
    val close_block: theory -> theory
    val del_pat: cterm -> theory -> theory
    val get_unf_ss: theory -> simpset
    val lc_decl_del: term -> local_theory -> local_theory
    val lc_decl_eq: thm list -> local_theory -> local_theory
    val open_block: theory -> theory
    type pat_eq = cterm * thm list
    val setup: theory -> theory
    val tracing_enabled: bool ref
  end
structure Locale_Code: LOCALE_CODE
### theory "Draft.Locale_Code"
### 0.183s elapsed time, 0.711s cpu time, 0.083s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.229s elapsed time, 0.901s cpu time, 0.083s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature RECORD_INTF =
  sig
    val add_unf_thms: thm list -> Context.generic -> Context.generic
    val add_unf_thms_global: thm list -> theory -> theory
    val get_unf_ss: Context.generic -> simpset
    val get_unf_thms: Context.generic -> thm list
    val icf_locales_tac: Proof.context -> tactic
    val icf_rec_def: thm -> Context.generic -> Context.generic
    val icf_rec_def_attr: attribute context_parser
    val setup: theory -> theory
  end
structure Record_Intf: RECORD_INTF
### theory "Draft.Record_Intf"
### 0.055s elapsed time, 0.217s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 0.940s elapsed time, 3.483s cpu time, 0.779s GC time
val it = fn:
   (theory -> theory) ->
     (Proof.context -> Proof.context) -> Context.generic -> Context.generic
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "Draft.SetIterator"
### 1.368s elapsed time, 5.135s cpu time, 0.911s GC time
Loading theory "Draft.Idx_Iterator" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
Loading theory "Draft.SetIteratorOperations" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It" via "Draft.Proper_Iterator")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.070s elapsed time, 3.979s cpu time, 0.779s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
### theory "Draft.Idx_Iterator"
### 0.412s elapsed time, 1.446s cpu time, 0.128s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.081s elapsed time, 6.567s cpu time, 1.099s GC time
Loading theory "Draft.Templates" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.054s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SetIteratorCollectionsGATemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.801s elapsed time, 1.905s cpu time, 0.808s GC time
### theory "Draft.SetIteratorOperations"
### 1.926s elapsed time, 4.800s cpu time, 1.128s GC time
Loading theory "Draft.Proper_Iterator" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It")
Loading theory "Draft.SetIteratorGA" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
structure Icf_Proper_Iterator:
  sig
    val add: attribute
    val add_thm: thm -> Context.generic -> Context.generic
    val del: attribute
    val del_thm: thm -> Context.generic -> Context.generic
    val get: Proof.context -> thm list
    structure icf_proper_iteratorI: NAMED_THMS
    val setup: theory -> theory
  end
### theory "Draft.Proper_Iterator"
### 0.335s elapsed time, 0.722s cpu time, 0.043s GC time
Loading theory "Draft.It_to_It" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
Loading theory "Draft.Gen_Iterator" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
locale proper_it_loc
  fixes
    it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
    and
    it' ::
      "'s => ('\<sigma> => bool)
             => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
  assumes "proper_it_loc it it'"
### theory "Draft.It_to_It"
### 0.105s elapsed time, 0.315s cpu time, 0.058s GC time
### theory "Draft.SetIteratorGA"
### 0.565s elapsed time, 1.291s cpu time, 0.101s GC time
### theory "Draft.Gen_Iterator"
### 0.438s elapsed time, 0.849s cpu time, 0.111s GC time
Loading theory "Draft.Iterator" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec" via "Draft.ICF_Spec_Base")
### theory "Draft.Iterator"
### 0.338s elapsed time, 0.338s cpu time, 0.000s GC time
Loading theory "Draft.ICF_Spec_Base" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA" via "Draft.SetSpec")
### theory "Draft.ICF_Spec_Base"
### 0.201s elapsed time, 0.201s cpu time, 0.000s GC time
Loading theory "Draft.MapSpec" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA")
Loading theory "Draft.SetSpec" (required by "Draft.SetIteratorCollectionsGATemplates" via "Draft.SetIteratorCollectionsGA")
locale map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
locale set
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
locale set_no_invar
  fixes \<alpha> :: "'a => 'b set"
    and invar :: "'a => bool"
  assumes "set_no_invar invar"
locale map_no_invar
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "map_no_invar invar"
locale set_empty
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "set_empty \<alpha> invar empty"
locale map_empty
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "map_empty \<alpha> invar empty"
locale set_memb
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and memb :: "'x => 's => bool"
  assumes "set_memb \<alpha> invar memb"
locale map_lookup
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and lookup :: "'u => 's => 'v option"
  assumes "map_lookup \<alpha> invar lookup"
locale set_ins
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and ins :: "'x => 's => 's"
  assumes "set_ins \<alpha> invar ins"
locale map_update
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and update :: "'u => 'v => 's => 's"
  assumes "map_update \<alpha> invar update"
locale set_ins_dj
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and ins_dj :: "'x => 's => 's"
  assumes "set_ins_dj \<alpha> invar ins_dj"
locale map_update_dj
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and update_dj :: "'u => 'v => 's => 's"
  assumes "map_update_dj \<alpha> invar update_dj"
locale set_delete
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and delete :: "'x => 's => 's"
  assumes "set_delete \<alpha> invar delete"
locale map_delete
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and delete :: "'u => 's => 's"
  assumes "map_delete \<alpha> invar delete"
locale set_isEmpty
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "set_isEmpty \<alpha> invar isEmpty"
locale set_ball
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and ball :: "'s => ('x => bool) => bool"
  assumes "set_ball \<alpha> invar ball"
locale map_add
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and add :: "'s => 's => 's"
  assumes "MapSpec.map_add \<alpha> invar add"
locale set_bex
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and bex :: "'s => ('x => bool) => bool"
  assumes "set_bex \<alpha> invar bex"
locale finite_set
  fixes \<alpha> :: "'a => 'b set"
    and invar :: "'a => bool"
  assumes "finite_set \<alpha> invar"
locale map_add_dj
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and add_dj :: "'s => 's => 's"
  assumes "map_add_dj \<alpha> invar add_dj"
locale map_isEmpty
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "map_isEmpty \<alpha> invar isEmpty"
locale set_size
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and size :: "'s => nat"
  assumes "set_size \<alpha> invar size"
locale map_sng
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and sng :: "'u => 'v => 's"
  assumes "map_sng \<alpha> invar sng"
locale set_size_abort
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and size_abort :: "nat => 's => nat"
  assumes "set_size_abort \<alpha> invar size_abort"
locale map_isSng
  fixes \<alpha> :: "'s => 'k => 'v option"
    and invar :: "'s => bool"
    and isSng :: "'s => bool"
  assumes "map_isSng \<alpha> invar isSng"
locale set_sng
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and sng :: "'x => 's"
  assumes "set_sng \<alpha> invar sng"
locale finite_map
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "finite_map \<alpha> invar"
locale set_isSng
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and isSng :: "'s => bool"
  assumes "set_isSng \<alpha> invar isSng"
locale poly_set_iteratei_defs
  fixes
    list_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
locale map_size
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and size :: "'s => nat"
  assumes "map_size \<alpha> invar size"
locale map_size_abort
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and size_abort :: "nat => 's => nat"
  assumes "map_size_abort \<alpha> invar size_abort"
locale poly_map_iteratei_defs
  fixes
    list_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
locale poly_set_iteratei
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and
    list_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
  assumes "poly_set_iteratei \<alpha> invar list_it"
locale poly_map_iteratei
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and
    list_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
  assumes "poly_map_iteratei \<alpha> invar list_it"
locale set_copy
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and copy :: "'s1 => 's2"
  assumes "set_copy \<alpha>1 invar1 \<alpha>2 invar2 copy"
locale set_union
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and \<alpha>3 :: "'s3 => 'a set"
    and invar3 :: "'s3 => bool"
    and union :: "'s1 => 's2 => 's3"
  assumes
    "set_union \<alpha>1 invar1 \<alpha>2 invar2 \<alpha>3 invar3 union"
locale set_union_dj
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and \<alpha>3 :: "'s3 => 'a set"
    and invar3 :: "'s3 => bool"
    and union_dj :: "'s1 => 's2 => 's3"
  assumes
    "set_union_dj \<alpha>1 invar1 \<alpha>2 invar2 \<alpha>3 invar3
      union_dj"
locale set_union_list
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and union_list :: "'s1 list => 's2"
  assumes "set_union_list \<alpha>1 invar1 \<alpha>2 invar2 union_list"
locale set_diff
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and diff :: "'s1 => 's2 => 's1"
  assumes "set_diff \<alpha>1 invar1 \<alpha>2 invar2 diff"
locale set_inter
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and \<alpha>3 :: "'s3 => 'a set"
    and invar3 :: "'s3 => bool"
    and inter :: "'s1 => 's2 => 's3"
  assumes
    "set_inter \<alpha>1 invar1 \<alpha>2 invar2 \<alpha>3 invar3 inter"
locale set_subset
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and subset :: "'s1 => 's2 => bool"
  assumes "set_subset \<alpha>1 invar1 \<alpha>2 invar2 subset"
locale map_ball
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and ball :: "'s => ('u * 'v => bool) => bool"
  assumes "map_ball \<alpha> invar ball"
locale map_bex
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and bex :: "'s => ('u * 'v => bool) => bool"
  assumes "map_bex \<alpha> invar bex"
locale set_equal
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and equal :: "'s1 => 's2 => bool"
  assumes "set_equal \<alpha>1 invar1 \<alpha>2 invar2 equal"
locale set_image_filter
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and image_filter :: "('a => 'b option) => 's1 => 's2"
  assumes "set_image_filter \<alpha>1 invar1 \<alpha>2 invar2 image_filter"
locale map_sel
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and sel :: "'s => ('u * 'v => 'r option) => 'r option"
  assumes "map_sel \<alpha> invar sel"
locale set_inj_image_filter
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and inj_image_filter :: "('a => 'b option) => 's1 => 's2"
  assumes
    "set_inj_image_filter \<alpha>1 invar1 \<alpha>2 invar2
      inj_image_filter"
locale set_image
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and image :: "('a => 'b) => 's1 => 's2"
  assumes "set_image \<alpha>1 invar1 \<alpha>2 invar2 image"
locale map_sel'
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and sel' :: "'s => ('u * 'v => bool) => ('u * 'v) option"
  assumes "map_sel' \<alpha> invar sel'"
locale set_inj_image
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and inj_image :: "('a => 'b) => 's1 => 's2"
  assumes "set_inj_image \<alpha>1 invar1 \<alpha>2 invar2 inj_image"
locale set_filter
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and filter :: "('a => bool) => 's1 => 's2"
  assumes "set_filter \<alpha>1 invar1 \<alpha>2 invar2 filter"
locale map_to_list
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_list :: "'s => ('u * 'v) list"
  assumes "map_to_list \<alpha> invar to_list"
locale list_to_map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_map :: "('u * 'v) list => 's"
  assumes "list_to_map \<alpha> invar to_map"
locale set_Union_image
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'b set"
    and invar2 :: "'s2 => bool"
    and \<alpha>3 :: "'s3 => 'b set"
    and invar3 :: "'s3 => bool"
    and Union_image :: "('a => 's2) => 's1 => 's3"
  assumes
    "set_Union_image \<alpha>1 invar1 \<alpha>2 invar2 \<alpha>3 invar3
      Union_image"
locale set_disjoint
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and disjoint :: "'s1 => 's2 => bool"
  assumes "set_disjoint \<alpha>1 invar1 \<alpha>2 invar2 disjoint"
locale map_image_filter
  fixes \<alpha>1 :: "'m1 => 'u1 => 'v1 option"
    and invar1 :: "'m1 => bool"
    and \<alpha>2 :: "'m2 => 'u2 => 'v2 option"
    and invar2 :: "'m2 => bool"
    and
    map_image_filter :: "('u1 * 'v1 => ('u2 * 'v2) option) => 'm1 => 'm2"
  assumes
    "map_image_filter \<alpha>1 invar1 \<alpha>2 invar2 map_image_filter"
locale set_disjoint_witness
  fixes \<alpha>1 :: "'s1 => 'a set"
    and invar1 :: "'s1 => bool"
    and \<alpha>2 :: "'s2 => 'a set"
    and invar2 :: "'s2 => bool"
    and disjoint_witness :: "'s1 => 's2 => 'a option"
  assumes
    "set_disjoint_witness \<alpha>1 invar1 \<alpha>2 invar2
      disjoint_witness"
locale map_value_image_filter
  fixes \<alpha>1 :: "'m1 => 'u => 'v1 option"
    and invar1 :: "'m1 => bool"
    and \<alpha>2 :: "'m2 => 'u => 'v2 option"
    and invar2 :: "'m2 => bool"
    and map_value_image_filter :: "('u => 'v1 => 'v2 option) => 'm1 => 'm2"
  assumes
    "map_value_image_filter \<alpha>1 invar1 \<alpha>2 invar2
      map_value_image_filter"
locale set_sel
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and sel :: "'s => ('x => 'r option) => 'r option"
  assumes "set_sel \<alpha> invar sel"
locale set_sel'
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and sel' :: "'s => ('x => bool) => 'x option"
  assumes "set_sel' \<alpha> invar sel'"
locale map_restrict
  fixes \<alpha>1 :: "'m1 => 'u => 'v option"
    and invar1 :: "'m1 => bool"
    and \<alpha>2 :: "'m2 => 'u => 'v option"
    and invar2 :: "'m2 => bool"
    and restrict :: "('u * 'v => bool) => 'm1 => 'm2"
  assumes "map_restrict \<alpha>1 invar1 \<alpha>2 invar2 restrict"
locale ordered_map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
locale set_to_list
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and to_list :: "'s => 'x list"
  assumes "set_to_list \<alpha> invar to_list"
locale ordered_finite_map
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
  assumes "ordered_finite_map \<alpha> invar"
locale poly_map_iterateoi_defs
  fixes
    olist_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
locale list_to_set
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and to_set :: "'x list => 's"
  assumes "list_to_set \<alpha> invar to_set"
locale ordered_set
  fixes \<alpha> :: "'s => 'u set"
    and invar :: "'s => bool"
locale ordered_finite_set
  fixes \<alpha> :: "'s => 'u set"
    and invar :: "'s => bool"
  assumes "ordered_finite_set \<alpha> invar"
locale poly_set_iterateoi_defs
  fixes
    olist_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
locale poly_map_iterateoi
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and
    list_ordered_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
  assumes "poly_map_iterateoi \<alpha> invar list_ordered_it"
locale poly_set_iterateoi
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and
    list_ordered_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
  assumes "poly_set_iterateoi \<alpha> invar list_ordered_it"
locale poly_set_rev_iterateoi_defs
  fixes
    list_rev_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
locale poly_map_rev_iterateoi_defs
  fixes
    list_rev_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
locale poly_set_rev_iterateoi
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and
    list_rev_it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
  assumes "poly_set_rev_iterateoi \<alpha> invar list_rev_it"
locale poly_map_rev_iterateoi
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and
    list_rev_it ::
      "'s => (('u * 'v) list => bool)
             => ('u * 'v => ('u * 'v) list => ('u * 'v) list)
                => ('u * 'v) list => ('u * 'v) list"
  assumes "poly_map_rev_iterateoi \<alpha> invar list_rev_it"
locale set_min
  fixes \<alpha> :: "'s => 'u set"
    and invar :: "'s => bool"
    and min :: "'s => ('u => bool) => 'u option"
  assumes "set_min \<alpha> invar min"
locale map_min
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and min :: "'s => ('u * 'v => bool) => ('u * 'v) option"
  assumes "map_min \<alpha> invar min"
locale set_max
  fixes \<alpha> :: "'s => 'u set"
    and invar :: "'s => bool"
    and max :: "'s => ('u => bool) => 'u option"
  assumes "set_max \<alpha> invar max"
locale map_max
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and max :: "'s => ('u * 'v => bool) => ('u * 'v) option"
  assumes "map_max \<alpha> invar max"
locale set_to_sorted_list
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and to_sorted_list :: "'s => 'x list"
  assumes "SetSpec.set_to_sorted_list \<alpha> invar to_sorted_list"
locale set_to_rev_list
  fixes \<alpha> :: "'s => 'x set"
    and invar :: "'s => bool"
    and to_rev_list :: "'s => 'x list"
  assumes "set_to_rev_list \<alpha> invar to_rev_list"
locale map_to_sorted_list
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_sorted_list :: "'s => ('u * 'v) list"
  assumes "MapSpec.map_to_sorted_list \<alpha> invar to_sorted_list"
locale map_to_rev_list
  fixes \<alpha> :: "'s => 'u => 'v option"
    and invar :: "'s => bool"
    and to_rev_list :: "'s => ('u * 'v) list"
  assumes "map_to_rev_list \<alpha> invar to_rev_list"
locale StdSetDefs
  fixes ops :: "('x, 's, 'more) set_ops_scheme"
locale StdMapDefs
  fixes ops :: "('k, 'v, 's, 'more) map_ops_scheme"
locale StdMap
  fixes ops :: "('k, 'v, 's, 'more) map_ops_scheme"
  assumes "StdMap ops"
locale StdMap_no_invar
  fixes ops :: "('a, 'b, 'c, 'd) map_ops_scheme"
  assumes "StdMap_no_invar ops"
locale StdSet
  fixes ops :: "('x, 's, 'more) set_ops_scheme"
  assumes "StdSet ops"
locale StdSet_no_invar
  fixes ops :: "('a, 'b, 'c) set_ops_scheme"
  assumes "StdSet_no_invar ops"
locale StdOSetDefs
  fixes ops :: "('x, 's, 'more) oset_ops_scheme"
locale StdOMapDefs
  fixes ops :: "('k, 'v, 's, 'more) omap_ops_scheme"
locale StdOSet
  fixes ops :: "('x, 's, 'more) oset_ops_scheme"
  assumes "StdOSet ops"
locale StdOMap
  fixes ops :: "('k, 'v, 's, 'more) omap_ops_scheme"
  assumes "StdOMap ops"
### theory "Draft.MapSpec"
### 3.134s elapsed time, 7.660s cpu time, 3.183s GC time
### theory "Draft.SetSpec"
### 3.231s elapsed time, 7.795s cpu time, 3.226s GC time
Loading theory "Draft.SetIteratorCollectionsGA" (required by "Draft.SetIteratorCollectionsGATemplates")
### theory "Draft.SetIteratorCollectionsGA"
### 0.260s elapsed time, 0.264s cpu time, 0.000s GC time
Loading theory "Draft.SetIteratorCollectionsGATemplates"
val templateLemmas =
   [("SetIteratorCollectionsGA.iterate_to_set_correct",
     "[| set_ins_dj ?\<alpha> ?invar ?ins_dj;
         set_empty ?\<alpha> ?invar ?emp; set_iterator ?it ?S0.0 |]
      ==> ?\<alpha> (iterate_to_set ?emp ?ins_dj ?it) = ?S0.0 &
          ?invar (iterate_to_set ?emp ?ins_dj ?it)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 5),
                template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_var 5,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 3),
                       template_var 1))),
                 template_var 0)),
             template_app
              (template_var 4,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 1)))
           ))),
    ("SetIteratorCollectionsGA.iterate_to_map_correct",
     "[| map_update_dj ?\<alpha> ?invar ?upd_dj;
         map_empty ?\<alpha> ?invar ?emp; map_iterator ?it ?M |]
      ==> ?\<alpha> (iterate_to_map ?emp ?upd_dj ?it) = ?M &
          ?invar (iterate_to_map ?emp ?upd_dj ?it)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_var 5,
                     template_app
                      (template_app
                        (template_app (template_hole 0, template_var 2),
                         template_var 3),
                       template_var 1))),
                 template_var 0)),
             template_app
              (template_var 4,
               template_app
                (template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 3),
                 template_var 1)))
           ))),
    ("SetIteratorCollectionsGA.iterate_diff_correct",
     "[| set_delete ?\<alpha> ?invar ?del; ?invar ?s;
         set_iterator ?it ?S0.0 |]
      ==> ?\<alpha> (iterate_diff_set ?s ?del ?it) = ?\<alpha> ?s - ?S0.0 &
          ?invar (iterate_diff_set ?s ?del ?it)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_var 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_var 5,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 3),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 5, template_var 2)),
                   template_var 0))),
             template_app
              (template_var 4,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3),
                 template_var 1)))
           ))),
    ("SetIteratorCollectionsGA.iterate_add_to_set_correct",
     "[| set_ins ?\<alpha> ?invar ?ins; ?invar ?s; set_iterator ?it ?S0.0 |]
      ==> ?\<alpha> (iterate_add_to_set ?s ?ins ?it) =
          ?S0.0 Un ?\<alpha> ?s &
          ?invar (iterate_add_to_set ?s ?ins ?it)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_var 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_var 5,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 3),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app (template_var 5, template_var 2)))),
             template_app
              (template_var 4,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3),
                 template_var 1)))
           ))),
    ("SetIteratorCollectionsGA.iterate_add_to_map_correct",
     "[| map_update ?\<alpha> ?invar ?upd; ?invar ?m; map_iterator ?it ?M |]
      ==> ?\<alpha> (iterate_add_to_map ?m ?upd ?it) = ?\<alpha> ?m ++ ?M &
          ?invar (iterate_add_to_map ?m ?upd ?it)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_var 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_app (template_hole 4, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_var 5,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 3),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 5, template_var 2)),
                   template_var 0))),
             template_app
              (template_var 4,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3),
                 template_var 1)))
           ))),
    ("SetIteratorCollectionsGA.iterate_add_to_set_dj_correct",
     "[| set_ins_dj ?\<alpha> ?invar ?ins_dj; ?invar ?s;
         set_iterator ?it ?S0.0; ?S0.0 Int ?\<alpha> ?s = {} |]
      ==> ?\<alpha> (iterate_add_to_set ?s ?ins_dj ?it) =
          ?S0.0 Un ?\<alpha> ?s &
          ?invar (iterate_add_to_set ?s ?ins_dj ?it)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_var 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app (template_hole 4, template_var 0),
            template_app (template_var 5, template_var 2)),
          template_hole 3)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_var 5,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 3),
                       template_var 1))),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_app (template_var 5, template_var 2)))),
             template_app
              (template_var 4,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3),
                 template_var 1)))
           ))),
    ("SetIteratorCollectionsGA.iterate_add_to_map_dj_correct",
     "[| map_update_dj ?\<alpha> ?invar ?upd; ?invar ?m;
         map_iterator ?it ?M; dom ?M Int dom (?\<alpha> ?m) = {} |]
      ==> ?\<alpha> (iterate_add_to_map ?m ?upd ?it) = ?\<alpha> ?m ++ ?M &
          ?invar (iterate_add_to_map ?m ?upd ?it)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_var 4, template_var 2)),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 1),
              template_app (template_hole 8, template_var 0))
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 6,
              template_app (template_hole 5, template_var 0)),
            template_app
             (template_hole 5,
              template_app (template_var 5, template_var 2))),
          template_hole 4)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_var 5,
                     template_app
                      (template_app
                        (template_app (template_hole 1, template_var 2),
                         template_var 3),
                       template_var 1))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_var 5, template_var 2)),
                   template_var 0))),
             template_app
              (template_var 4,
               template_app
                (template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 3),
                 template_var 1)))
           ))),
    ("SetIteratorCollectionsGA.iterate_image_filter_to_set_correct",
     "[| set_ins ?\<alpha> ?invar ?ins; set_empty ?\<alpha> ?invar ?emp;
         set_iterator ?it ?S0.0 |]
      ==> ?\<alpha>
           (iterate_to_set ?emp ?ins (set_iterator_image_filter ?f ?it)) =
          {b. EX a. a : ?S0.0 & ?f a = Some b} &
          ?invar
           (iterate_to_set ?emp ?ins (set_iterator_image_filter ?f ?it))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 6),
                template_var 5),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_var 6,
                     template_app
                      (template_app
                        (template_app (template_hole 6, template_var 3),
                         template_var 4),
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_var 2)))),
                 template_app (template_hole 4, t_empty))),
             template_app
              (template_var 5,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 4),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 2))))
           ))),
    ("SetIteratorCollectionsGA.iterate_image_filter_add_to_set_correct",
     "[| set_ins ?\<alpha> ?invar ?ins; ?invar ?s; set_iterator ?it ?S0.0 |]
      ==> ?\<alpha>
           (iterate_add_to_set ?s ?ins (set_iterator_image_filter ?f ?it)) =
          {b. EX a. a : ?S0.0 & ?f a = Some b} Un ?\<alpha> ?s &
          ?invar
           (iterate_add_to_set ?s ?ins (set_iterator_image_filter ?f ?it))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate (template_app (template_var 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 9,
               template_app
                (template_app
                  (template_hole 8,
                   template_app
                    (template_var 6,
                     template_app
                      (template_app
                        (template_app (template_hole 7, template_var 3),
                         template_var 4),
                       template_app
                        (template_app (template_hole 6, template_var 0),
                         template_var 2)))),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app (template_hole 4, t_empty)),
                   template_app (template_var 6, template_var 3)))),
             template_app
              (template_var 5,
               template_app
                (template_app
                  (template_app (template_hole 7, template_var 3),
                   template_var 4),
                 template_app
                  (template_app (template_hole 6, template_var 0),
                   template_var 2))))
           ))),
    ("SetIteratorCollectionsGA.iterate_inj_image_filter_to_set_correct",
     "[| set_ins_dj ?\<alpha> ?invar ?ins; set_empty ?\<alpha> ?invar ?emp;
         set_iterator ?it ?S0.0; inj_on ?f (?S0.0 Int dom ?f) |]
      ==> ?\<alpha>
           (iterate_to_set ?emp ?ins (set_iterator_image_filter ?f ?it)) =
          {b. EX a. a : ?S0.0 & ?f a = Some b} &
          ?invar
           (iterate_to_set ?emp ?ins (set_iterator_image_filter ?f ?it))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 14, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 6),
                template_var 5),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 0),
              template_app
               (template_app (template_hole 10, template_var 1),
                template_app (template_hole 9, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_app
                  (template_hole 7,
                   template_app
                    (template_var 6,
                     template_app
                      (template_app
                        (template_app (template_hole 6, template_var 3),
                         template_var 4),
                       template_app
                        (template_app (template_hole 5, template_var 0),
                         template_var 2)))),
                 template_app (template_hole 4, t_empty))),
             template_app
              (template_var 5,
               template_app
                (template_app
                  (template_app (template_hole 6, template_var 3),
                   template_var 4),
                 template_app
                  (template_app (template_hole 5, template_var 0),
                   template_var 2))))
           ))),
    ("SetIteratorCollectionsGA.iterate_inj_image_filter_add_to_set_correct",
     "[| set_ins_dj ?\<alpha> ?invar ?ins; ?invar ?s;
         set_iterator ?it ?S0.0;
         {y. EX x. x : ?S0.0 & ?f x = Some y} Int ?\<alpha> ?s = {};
         inj_on ?f (?S0.0 Int dom ?f) |]
      ==> ?\<alpha>
           (iterate_add_to_set ?s ?ins (set_iterator_image_filter ?f ?it)) =
          {b. EX a. a : ?S0.0 & ?f a = Some b} Un ?\<alpha> ?s &
          ?invar
           (iterate_add_to_set ?s ?ins (set_iterator_image_filter ?f ?it))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 16, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate (template_app (template_var 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 2),
              template_var 1)
            ),
        template_equation
         (template_app
           (template_app
             (template_hole 13, template_app (template_hole 12, t_empty)),
            template_app (template_var 6, template_var 3)),
          template_hole 6),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app
               (template_app (template_hole 4, template_var 1),
                template_app (template_hole 3, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 10,
               template_app
                (template_app
                  (template_hole 14,
                   template_app
                    (template_var 6,
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_var 3),
                         template_var 4),
                       template_app
                        (template_app (template_hole 1, template_var 0),
                         template_var 2)))),
                 template_app
                  (template_app
                    (template_hole 0,
                     template_app (template_hole 12, t_empty)),
                   template_app (template_var 6, template_var 3)))),
             template_app
              (template_var 5,
               template_app
                (template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 4),
                 template_app
                  (template_app (template_hole 1, template_var 0),
                   template_var 2))))
           )))]:
   (string * thm * template) list
### theory "Draft.SetIteratorCollectionsGATemplates"
### 0.560s elapsed time, 0.740s cpu time, 0.093s GC time
val it = (): unit
