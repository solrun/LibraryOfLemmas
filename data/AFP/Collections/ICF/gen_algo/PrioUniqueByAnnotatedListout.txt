Loading theory "Draft.ICF_Tools" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec" via "Draft.ICF_Spec_Base" via "Draft.Record_Intf")
Loading theory "Draft.SetIterator" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It" via "Draft.Proper_Iterator" via "Draft.SetIteratorOperations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
infix 0 ##
signature ICF_TOOLS =
  sig
    val changed_conv: conv -> conv
    val chead_of: cterm -> cterm
    val chead_of_thm: thm -> cterm
    val define_simple:
       string -> term -> local_theory -> (term * thm) * local_theory
    val define_simple_global:
       string -> term -> theory -> (term * thm) * theory
    val define_simple_local:
       string -> term -> local_theory -> (term * thm) * local_theory
    val dest_def_eq: term -> term * term
    val dt_head: term -> term
    val dt_lhs: term -> term
    val dt_params: term -> term list
    val dt_rhs: term -> term
    val dthm_head: thm -> term
    val dthm_lhs: thm -> term
    val dthm_params: thm -> term list
    val dthm_rhs: thm -> term
    val gen_variant: (string -> bool) -> string -> string
    val import_cterm: cterm -> Proof.context -> cterm * Proof.context
    val inst_meta_cong: Proof.context -> cterm -> thm
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val norm_def_thm: thm -> thm
    val parse_cpat: cterm context_parser
    val rem_dup_prems: Proof.context -> thm -> thm
    val rename_cterm: cterm * cterm -> ctyp TVars.table * cterm Vars.table
    val renames_cterm: cterm * cterm -> bool
    val repeat_top_sweep_conv:
       (Proof.context -> conv) -> Proof.context -> conv
    val revert_abbrevs: string -> theory -> theory
    val sss_add: thm list -> Proof.context -> Proof.context
    val wrap_lthy_global: (local_theory -> local_theory) -> theory -> theory
    val wrap_lthy_local:
       (local_theory -> local_theory) -> local_theory -> local_theory
    val wrap_lthy_result_global:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> theory -> 'b * theory
    val wrap_lthy_result_local:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> local_theory -> 'b * local_theory
  end
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
structure ICF_Tools: ICF_TOOLS
### theory "Draft.ICF_Tools"
### 0.103s elapsed time, 0.423s cpu time, 0.036s GC time
Loading theory "Draft.Ord_Code_Preproc" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec" via "Draft.ICF_Spec_Base" via "Draft.Record_Intf")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.131s elapsed time, 0.532s cpu time, 0.036s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
### ML warning (line 26 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 37 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (trace_ft) has not been referenced.
### ML warning (line 50 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (process) has not been referenced.
signature ORD_CODE_PREPROC =
  sig
    val add: int * string * (theory -> thm -> thm) -> theory -> theory
    val get: theory -> (int * string * (theory -> thm -> thm)) list
    val rem: string -> theory -> theory
    val setup: theory -> theory
    val trace_enabled: bool ref
  end
signature OC_SIMPSET =
  sig
    val get: theory -> simpset
    val map: (simpset -> simpset) -> theory -> theory
    val setup: theory -> theory
  end
structure Ord_Code_Preproc: ORD_CODE_PREPROC
functor Oc_Simpset (sig val name: string val prio: int end): OC_SIMPSET
### theory "Draft.Ord_Code_Preproc"
### 0.040s elapsed time, 0.159s cpu time, 0.000s GC time
Loading theory "Draft.Locale_Code" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec" via "Draft.ICF_Spec_Base")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### ML warning (line 343 of "$AFP/Collections/ICF/tools/Locale_Code.thy"):
### Pattern is not exhaustive.
signature LOCALE_CODE =
  sig
    val add_pat_eq: cterm -> thm list -> theory -> theory
    val close_block: theory -> theory
    val del_pat: cterm -> theory -> theory
    val get_unf_ss: theory -> simpset
    val lc_decl_del: term -> local_theory -> local_theory
    val lc_decl_eq: thm list -> local_theory -> local_theory
    val open_block: theory -> theory
    type pat_eq = cterm * thm list
    val setup: theory -> theory
    val tracing_enabled: bool ref
  end
structure Locale_Code: LOCALE_CODE
### theory "Draft.Locale_Code"
### 0.143s elapsed time, 0.542s cpu time, 0.061s GC time
Loading theory "Draft.Record_Intf" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec" via "Draft.ICF_Spec_Base")
signature RECORD_INTF =
  sig
    val add_unf_thms: thm list -> Context.generic -> Context.generic
    val add_unf_thms_global: thm list -> theory -> theory
    val get_unf_ss: Context.generic -> simpset
    val get_unf_thms: Context.generic -> thm list
    val icf_locales_tac: Proof.context -> tactic
    val icf_rec_def: thm -> Context.generic -> Context.generic
    val icf_rec_def_attr: attribute context_parser
    val setup: theory -> theory
  end
structure Record_Intf: RECORD_INTF
### theory "Draft.Record_Intf"
### 0.056s elapsed time, 0.224s cpu time, 0.000s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
### theory "HOL-Library.Nat_Bijection"
### 0.365s elapsed time, 1.442s cpu time, 0.096s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Set_Algebras"
### 0.244s elapsed time, 0.949s cpu time, 0.061s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
consts
  snth :: "'a stream => nat => 'a"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.SetIterator"
### 1.269s elapsed time, 4.786s cpu time, 0.826s GC time
Loading theory "Draft.Idx_Iterator" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
### theory "HOL-Library.BigO"
### 1.020s elapsed time, 3.791s cpu time, 0.808s GC time
Loading theory "Draft.SetIteratorOperations" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It" via "Draft.Proper_Iterator")
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.094s elapsed time, 4.082s cpu time, 0.808s GC time
val it = fn:
   (theory -> theory) ->
     (Proof.context -> Proof.context) -> Context.generic -> Context.generic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Idx_Iterator"
### 0.462s elapsed time, 1.678s cpu time, 0.214s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.102s elapsed time, 6.598s cpu time, 1.109s GC time
Loading theory "Draft.Templates" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.052s elapsed time, 0.108s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.PrioUniqueByAnnotatedListTemplates")
### theory "Draft.SetIteratorOperations"
### 1.836s elapsed time, 4.514s cpu time, 1.050s GC time
Loading theory "Draft.Proper_Iterator" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It")
Loading theory "Draft.SetIteratorGA" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.804s elapsed time, 1.983s cpu time, 0.794s GC time
structure Icf_Proper_Iterator:
  sig
    val add: attribute
    val add_thm: thm -> Context.generic -> Context.generic
    val del: attribute
    val del_thm: thm -> Context.generic -> Context.generic
    val get: Proof.context -> thm list
    structure icf_proper_iteratorI: NAMED_THMS
    val setup: theory -> theory
  end
### theory "Draft.Proper_Iterator"
### 0.353s elapsed time, 0.805s cpu time, 0.085s GC time
Loading theory "Draft.It_to_It" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
Loading theory "Draft.Gen_Iterator" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
locale proper_it_loc
  fixes
    it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
    and
    it' ::
      "'s => ('\<sigma> => bool)
             => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
  assumes "proper_it_loc it it'"
### theory "Draft.It_to_It"
### 0.082s elapsed time, 0.244s cpu time, 0.000s GC time
### theory "Draft.SetIteratorGA"
### 0.675s elapsed time, 1.543s cpu time, 0.128s GC time
### theory "Draft.Gen_Iterator"
### 0.502s elapsed time, 0.984s cpu time, 0.087s GC time
Loading theory "Draft.Iterator" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec" via "Draft.ICF_Spec_Base")
### theory "Draft.Iterator"
### 0.338s elapsed time, 0.338s cpu time, 0.000s GC time
Loading theory "Draft.ICF_Spec_Base" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList" via "Draft.AnnotatedListSpec")
### theory "Draft.ICF_Spec_Base"
### 0.200s elapsed time, 0.200s cpu time, 0.000s GC time
Loading theory "Draft.AnnotatedListSpec" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList")
Loading theory "Draft.PrioUniqueSpec" (required by "Draft.PrioUniqueByAnnotatedListTemplates" via "Draft.PrioUniqueByAnnotatedList")
locale uprio
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
locale al
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
locale uprio_no_invar
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "uprio_no_invar invar"
locale al_no_invar
  fixes \<alpha> :: "'a => ('b * 'c) list"
    and invar :: "'a => bool"
  assumes "al_no_invar invar"
locale uprio_finite
  fixes \<alpha> :: "'a => 'b => 'c option"
    and invar :: "'a => bool"
  assumes "uprio_finite \<alpha> invar"
locale al_empty
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "al_empty \<alpha> invar empty"
locale al_isEmpty
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "al_isEmpty \<alpha> invar isEmpty"
locale uprio_empty
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and empty :: "unit => 's"
  assumes "uprio_empty \<alpha> invar empty"
locale uprio_isEmpty
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and isEmpty :: "'s => bool"
  assumes "uprio_isEmpty \<alpha> invar isEmpty"
locale al_count
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and count :: "'s => nat"
  assumes "al_count \<alpha> invar count"
locale al_consl
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and consl :: "'e => 'a => 's => 's"
  assumes "al_consl \<alpha> invar consl"
locale uprio_pop
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and pop :: "'s => 'e * 'a * 's"
  assumes "uprio_pop \<alpha> invar pop"
locale al_consr
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and consr :: "'s => 'e => 'a => 's"
  assumes "al_consr \<alpha> invar consr"
locale al_head
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and head :: "'s => 'e * 'a"
  assumes "al_head \<alpha> invar head"
locale uprio_insert
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and insert :: "'s => 'e => 'a => 's"
  assumes "uprio_insert \<alpha> invar insert"
locale al_tail
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and tail :: "'s => 's"
  assumes "al_tail \<alpha> invar tail"
locale uprio_distinct_insert
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and insert :: "'s => 'e => 'a => 's"
  assumes "uprio_distinct_insert \<alpha> invar insert"
locale al_headR
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and headR :: "'s => 'e * 'a"
  assumes "al_headR \<alpha> invar headR"
locale uprio_prio
  fixes \<alpha> :: "'s => 'e => 'a option"
    and invar :: "'s => bool"
    and prio :: "'s => 'e => 'a option"
  assumes "uprio_prio \<alpha> invar prio"
locale al_tailR
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and tailR :: "'s => 's"
  assumes "al_tailR \<alpha> invar tailR"
locale al_foldl
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and foldl :: "('z => 'e * 'a => 'z) => 'z => 's => 'z"
  assumes "al_foldl \<alpha> invar foldl"
locale al_foldr
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and foldr :: "('e * 'a => 'z => 'z) => 's => 'z => 'z"
  assumes "al_foldr \<alpha> invar foldr"
locale poly_al_fold
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
locale al_app
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and app :: "'s => 's => 's"
  assumes "al_app \<alpha> invar app"
locale al_annot
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and annot :: "'s => 'a"
  assumes "al_annot \<alpha> invar annot"
locale al_splits
  fixes \<alpha> :: "'s => ('e * 'a) list"
    and invar :: "'s => bool"
    and splits :: "('a => bool) => 'a => 's => 's * ('e * 'a) * 's"
  assumes "al_splits \<alpha> invar splits"
locale StdUprioDefs
  fixes ops :: "('e, 'a, 's, 'more) uprio_ops_scheme"
locale StdUprio
  fixes ops :: "('a, 'b, 'c, 'd) uprio_ops_scheme"
  assumes "StdUprio ops"
locale StdUprio_no_invar
  fixes ops :: "('a, 'b, 'c, 'd) uprio_ops_scheme"
  assumes "StdUprio_no_invar ops"
### theory "Draft.PrioUniqueSpec"
### 0.633s elapsed time, 1.362s cpu time, 0.231s GC time
locale StdALDefs
  fixes ops :: "('e, 'a, 's, 'more) alist_ops_scheme"
locale StdAL
  fixes ops :: "('a, 'b, 'c, 'd) alist_ops_scheme"
  assumes "StdAL ops"
locale StdAL_no_invar
  fixes ops :: "('a, 'b, 'c, 'd) alist_ops_scheme"
  assumes "StdAL_no_invar ops"
### theory "Draft.AnnotatedListSpec"
### 1.202s elapsed time, 1.972s cpu time, 0.292s GC time
Loading theory "Draft.PrioUniqueByAnnotatedList" (required by "Draft.PrioUniqueByAnnotatedListTemplates")
### Missing patterns in function definition:
### p_unwrap Infty = undefined
Found termination order: "{}"
Found termination order: "{}"
Found termination order: "{}"
instantiation
  LP :: (linorder, linorder) monoid_add
  zero_LP == zero_class.zero :: ('a, 'b) LP
  plus_LP == plus :: ('a, 'b) LP => ('a, 'b) LP => ('a, 'b) LP
Found termination order: "{}"
Found termination order: "{}"
instantiation
  LP :: (type, linorder) preorder
  less_eq_LP == less_eq :: ('a, 'b) LP => ('a, 'b) LP => bool
  less_LP == less :: ('a, 'b) LP => ('a, 'b) LP => bool
locale aluprio_defs
  fixes ops :: "(unit, ('e, 'a) LP, 's) alist_ops"
locale aluprio
  fixes ops :: "(unit, ('e, 'a) LP, 's) alist_ops"
  assumes "aluprio ops"
### theory "Draft.PrioUniqueByAnnotatedList"
### 1.107s elapsed time, 1.248s cpu time, 0.178s GC time
Loading theory "Draft.PrioUniqueByAnnotatedListTemplates"
val templateLemmas =
   [("PrioUniqueByAnnotatedList.p_order_refl", "p_less_eq ?x ?x",
     template_predicate
      (
         template_app
          (template_app (template_hole 0, template_var 0), template_var 0)
         )),
    ("PrioUniqueByAnnotatedList.p_min_le_neut", "p_min Infty ?a = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("PrioUniqueByAnnotatedList.p_min_re_neut", "p_min ?a Infty = ?a",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("PrioUniqueByAnnotatedList.aluprio_finite_correct",
     "uprio_finite (aluprio_\<alpha> ?\<alpha>)
       (aluprio_invar ?\<alpha> ?invar)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 1)),
           template_app
            (template_app (template_hole 0, template_var 1),
             template_var 0))
         )),
    ("PrioUniqueByAnnotatedList.p_linear", "?x <= ?y | ?y <= ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("PrioUniqueByAnnotatedList.p_linear2",
     "p_less_eq ?x ?y | p_less_eq ?y ?x",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 1,
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0)),
           template_app
            (template_app (template_hole 0, template_var 0),
             template_var 1))
         )),
    ("PrioUniqueByAnnotatedList.p_le_inf",
     "p_less_eq Infty ?x ==> ?x = Infty",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_hole 1),
              template_var 0)
            )],
       template_equation (template_var 0, template_hole 1))),
    ("PrioUniqueByAnnotatedList.p_unwrap_less_sum",
     "snd (p_unwrap (LP ?e ?aa + ?b)) <= ?aa",
     template_inequation
      (less_equals,
       template_app
        (template_hole 3,
         template_app
          (template_hole 2,
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1)),
             template_var 0))),
       template_var 1)),
    ("PrioUniqueByAnnotatedList.p_less_eq_mon",
     "?x <= ?z ==> ?x + ?y <= ?z",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_var 1))),
    ("PrioUniqueByAnnotatedList.e_less_eq_mon1",
     "e_less_eq ?e ?x ==> e_less_eq ?e (?x + ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0))
           ))),
    ("PrioUniqueByAnnotatedList.e_less_eq_mon2",
     "e_less_eq ?e ?y ==> e_less_eq ?e (?x + ?y)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("PrioUniqueByAnnotatedList.p_min_asso",
     "p_min (p_min ?a ?b) ?c = p_min ?a (p_min ?b ?c)",
     template_equation
      (template_app
        (template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 0, template_var 2),
             template_var 1)),
         template_var 0),
       template_app
        (template_app (template_hole 0, template_var 2),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("PrioUniqueByAnnotatedList.e_less_eq_refl",
     "?b ~= Infty ==> e_less_eq (fst (p_unwrap ?b)) ?b",
     template_implication
      ([template_negation
         (template_equation (template_var 0, template_hole 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 0))),
             template_var 0)
           ))),
    ("PrioUniqueByAnnotatedList.p_less_le_not_le",
     "p_less ?x ?y = (p_less_eq ?x ?y & ~ p_less_eq ?y ?x)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_app
          (template_hole 2,
           template_app
            (template_app (template_hole 1, template_var 1),
             template_var 0)),
         template_app
          (template_hole 0,
           template_app
            (template_app (template_hole 1, template_var 0),
             template_var 1))))),
    ("PrioUniqueByAnnotatedList.infadd", "?x ~= Infty ==> ?x + ?y ~= Infty",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 1))],
       template_negation
        (
           template_equation
            (template_app
              (template_app (template_hole 0, template_var 1),
               template_var 0),
             template_hole 1)
           ))),
    ("PrioUniqueByAnnotatedList.p_order_trans",
     "[| p_less_eq ?x ?y; p_less_eq ?y ?z |] ==> p_less_eq ?x ?z",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("PrioUniqueByAnnotatedList.aluprio_empty_correct",
     "al_empty ?\<alpha> ?invar ?empt ==>
      uprio_empty (aluprio_\<alpha> ?\<alpha>)
       (aluprio_invar ?\<alpha> ?invar) (aluprio_empty ?empt)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("PrioUniqueByAnnotatedList.aluprio_isEmpty_correct",
     "al_isEmpty ?\<alpha> ?invar ?isEmpty ==>
      uprio_isEmpty (aluprio_\<alpha> ?\<alpha>)
       (aluprio_invar ?\<alpha> ?invar) (aluprio_isEmpty ?isEmpty)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 2),
                 template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("PrioUniqueByAnnotatedList.ran_distinct",
     "distinct (map fst ?al) ==> ran (map_of ?al) = snd ` set ?al",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 0))
            )],
       template_equation
        (template_app
          (template_hole 4, template_app (template_hole 3, template_var 0)),
         template_app
          (template_app (template_hole 2, template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("PrioUniqueByAnnotatedList.e_less_eq_sum_list",
     "~ e_less_eq ?e (sum_list ?xs) ==> ALL x:set ?xs. ~ e_less_eq ?e x",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 1),
                  template_app (template_hole 2, template_var 0))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)),
             t_empty)
           ))),
    ("PrioUniqueByAnnotatedList.p_less_eq_lem1",
     "[| ~ ?x <= ?z; ?x + ?y <= ?z |] ==> ?y <= ?z",
     template_implication
      ([template_negation
         (
            template_inequation
             (less_equals, template_var 2, template_var 1)
            ),
        template_inequation
         (less_equals,
          template_app
           (template_app (template_hole 0, template_var 2), template_var 0),
          template_var 1)],
       template_inequation (less_equals, template_var 0, template_var 1))),
    ("PrioUniqueByAnnotatedList.e_less_eq_lem1",
     "[| ~ e_less_eq ?e ?a; e_less_eq ?e (?a + ?b) |] ==> e_less_eq ?e ?b",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 1, template_var 2),
                  template_var 1)
                )
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_app
               (template_app (template_hole 0, template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 2), template_var 0)
           ))),
    ("PrioUniqueByAnnotatedList.e_less_eq_p_unwrap",
     "[| ?x ~= Infty; ~ e_less_eq ?e ?x |] ==> fst (p_unwrap ?x) < ?e",
     template_implication
      ([template_negation
         (template_equation (template_var 1, template_hole 4)),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 3, template_var 0),
                  template_var 1)
                )
            )],
       template_inequation
        (less_than,
         template_app
          (template_hole 1, template_app (template_hole 0, template_var 1)),
         template_var 0))),
    ("PrioUniqueByAnnotatedList.map_of_distinct_upd",
     "?x ~: set (map fst ?xs) ==>
      [?x |-> ?y] ++ map_of ?xs = map_of ?xs(?x |-> ?y)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app
                (template_app (template_hole 3, t_empty), template_var 2),
               template_app (template_hole 1, template_var 0))),
           template_app (template_hole 0, template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 0, template_var 1)),
             template_var 2),
           template_app (template_hole 1, template_var 0))))),
    ("PrioUniqueByAnnotatedList.distinct_sortet_list_app",
     "[| sorted ?xs; distinct ?xs; ?xs = ?as @ ?b # ?cs |]
      ==> ALL x:set ?cs. ?b < x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_hole 7),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 6, template_var 3)),
        template_equation
         (template_var 3,
          template_app
           (template_app (template_hole 4, template_var 2),
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             t_empty)
           ))),
    ("PrioUniqueByAnnotatedList.e_less_eq_sum_list2",
     "[| ALL x:set ?\<alpha>s. snd x ~= Infty; ((), ?b) : set ?\<alpha>s |]
      ==> e_less_eq (fst (p_unwrap ?b)) (sum_list (map snd ?\<alpha>s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app (template_hole 12, template_var 1)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 7,
                template_app
                 (template_app (template_hole 6, template_hole 5),
                  template_var 0)),
              template_app (template_hole 12, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 0))),
             template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_hole 9),
                 template_var 1)))
           ))),
    ("PrioUniqueByAnnotatedList.aluprio_pop_correct",
     "[| al_splits ?\<alpha> ?invar ?splits;
         al_annot ?\<alpha> ?invar ?annot; al_app ?\<alpha> ?invar ?app |]
      ==> uprio_pop (aluprio_\<alpha> ?\<alpha>)
           (aluprio_invar ?\<alpha> ?invar)
           (aluprio_pop ?splits ?annot ?app)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 4)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("PrioUniqueByAnnotatedList.aluprio_prio_correct",
     "[| al_splits ?\<alpha> ?invar ?splits;
         al_annot ?\<alpha> ?invar ?annot;
         al_isEmpty ?\<alpha> ?invar ?isEmpty |]
      ==> uprio_prio (aluprio_\<alpha> ?\<alpha>)
           (aluprio_invar ?\<alpha> ?invar)
           (aluprio_prio ?splits ?annot ?isEmpty)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 4),
                template_var 3),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 4),
                template_var 3),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 4)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 3)),
             template_app
              (template_app
                (template_app (template_hole 0, template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("PrioUniqueByAnnotatedList.sum_list_less_elems",
     "ALL x:set ?xs. snd x ~= Infty ==>
      ALL y:set (map snd (map p_unwrap (map snd ?xs))).
         snd (p_unwrap (sum_list (map snd ?xs))) <= y",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app (template_hole 13, template_var 0)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 8,
               template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app
                      (template_app (template_hole 2, template_hole 10),
                       template_var 0))))),
             t_empty)
           ))),
    ("PrioUniqueByAnnotatedList.map_of_distinct_lookup",
     "[| ?x ~: set (map fst ?xs); ?x ~: set (map fst ?ys) |]
      ==> map_of (?xs @ (?x, ?y) # ?ys) ?x = Some ?y",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_var 2)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 9, template_var 3),
                  template_app
                   (template_hole 8,
                    template_app
                     (template_app (template_hole 7, template_hole 6),
                      template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_app
                (template_app
                  (template_hole 2,
                   template_app
                    (template_app (template_hole 1, template_var 3),
                     template_var 0)),
                 template_var 1))),
           template_var 3),
         template_app (template_hole 0, template_var 0)))),
    ("PrioUniqueByAnnotatedList.annot_inf",
     "[| ?invar ?s; ALL x:set (?\<alpha> ?s). snd x ~= Infty;
         al_annot ?\<alpha> ?invar ?annot |]
      ==> (?annot ?s = Infty) = (?\<alpha> ?s = [])",
     template_implication
      ([template_predicate (template_app (template_var 3, template_var 2)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 9,
                template_app
                 (template_hole 8,
                  template_app (template_var 1, template_var 2))),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 1),
                template_var 3),
              template_var 0)
            )],
       template_bimplication
        (template_equation
          (template_app (template_var 0, template_var 2), template_hole 4),
         template_equation
          (template_app (template_var 1, template_var 2),
           template_hole 0)))),
    ("PrioUniqueByAnnotatedList.map_of_distinct_upd4",
     "[| ?x ~: set (map fst ?xs); ?x ~: set (map fst ?ys) |]
      ==> map_of (?xs @ ?ys) = (map_of (?xs @ (?x, ?y) # ?ys))(?x := None)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 2)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_var 1)),
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_var 3),
                         template_var 0)),
                     template_var 1)))),
             template_var 3),
           template_hole 0)))),
    ("PrioUniqueByAnnotatedList.map_of_distinct_upd2",
     "[| ?x ~: set (map fst ?xs); ?x ~: set (map fst ?ys) |]
      ==> map_of (?xs @ (?x, ?y) # ?ys) = map_of (?xs @ ?ys)(?x |-> ?y)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 2)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 3),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 1)))
                )
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 2),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 3),
                   template_var 0)),
               template_var 1))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 2),
                   template_var 1))),
             template_var 3),
           template_app (template_hole 0, template_var 0))))),
    ("PrioUniqueByAnnotatedList.map_of_distinct_upd3",
     "[| ?x ~: set (map fst ?xs); ?x ~: set (map fst ?ys) |]
      ==> map_of (?xs @ (?x, ?y) # ?ys) = map_of (?xs @ (?x, ?y') # ?ys)(?x 
          |-> ?y)",
     template_implication
      ([template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 3)))
                )
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 10, template_var 4),
                  template_app
                   (template_hole 9,
                    template_app
                     (template_app (template_hole 8, template_hole 7),
                      template_var 2)))
                )
            )],
       template_equation
        (template_app
          (template_hole 5,
           template_app
            (template_app (template_hole 4, template_var 3),
             template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 4),
                   template_var 1)),
               template_var 2))),
         template_app
          (template_app
            (template_app
              (template_hole 1,
               template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 3),
                   template_app
                    (template_app
                      (template_hole 3,
                       template_app
                        (template_app (template_hole 2, template_var 4),
                         template_var 0)),
                     template_var 2)))),
             template_var 4),
           template_app (template_hole 0, template_var 1))))),
    ("PrioUniqueByAnnotatedList.aluprio_insert_correct",
     "[| al_splits ?\<alpha> ?invar ?splits;
         al_annot ?\<alpha> ?invar ?annot;
         al_isEmpty ?\<alpha> ?invar ?isEmpty; al_app ?\<alpha> ?invar ?app;
         al_consr ?\<alpha> ?invar ?consr |]
      ==> uprio_insert (aluprio_\<alpha> ?\<alpha>)
           (aluprio_invar ?\<alpha> ?invar)
           (aluprio_insert ?splits ?annot ?isEmpty ?app ?consr)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 8, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_var 5),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 6),
                template_var 5),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 6),
                template_var 5),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 6),
                template_var 5),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 6)),
               template_app
                (template_app (template_hole 1, template_var 6),
                 template_var 5)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 0))
           ))),
    ("PrioUniqueByAnnotatedList.distinct_sorted_list_lem1",
     "[| sorted ?xs; sorted ?ys; distinct ?xs; distinct ?ys;
         ALL x:set ?xs. x < ?e; ALL y:set ?ys. ?e < y |]
      ==> distinct (?xs @ ?e # ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("PrioUniqueByAnnotatedList.e_less_eq_annot",
     "[| al_annot ?\<alpha> ?invar ?annot; ?invar ?s;
         ALL x:set (?\<alpha> ?s). snd x ~= Infty;
         ~ e_less_eq ?e (?annot ?s) |]
      ==> ALL x:set (map ((fst \<circ>\<circ>\<circ> (o)) p_unwrap snd)
                      (?\<alpha> ?s)).
             x < ?e",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 15, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_var 3, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 14,
                template_app
                 (template_hole 13,
                  template_app (template_var 4, template_var 1))),
              t_empty)
            ),
        template_negation
         (
            template_predicate
             (
                template_app
                 (template_app (template_hole 8, template_var 0),
                  template_app (template_var 2, template_var 1))
                )
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_hole 6,
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_hole 10))),
                   template_app (template_var 4, template_var 1)))),
             t_empty)
           ))),
    ("PrioUniqueByAnnotatedList.distinct_sorted_list_lem1",
     "[| sorted ?xs; sorted ?ys; distinct ?xs; distinct ?ys;
         ALL x:set ?xs. x < ?e; ALL y:set ?ys. ?e < y |]
      ==> sorted (?xs @ ?e # ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 2)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 4,
                template_app (template_hole 3, template_var 1)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app (template_hole 1, template_var 2),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 1)))
           ))),
    ("PrioUniqueByAnnotatedList.distinct_sorted_list_lem2",
     "[| sorted ?xs; sorted ?ys; distinct ?xs; distinct ?ys; ?e < ?e';
         ALL x:set ?xs. x < ?e; ALL y:set ?ys. ?e' < y |]
      ==> distinct (?xs @ ?e # ?e' # ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_hole 5,
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))))
           ))),
    ("PrioUniqueByAnnotatedList.distinct_sorted_list_lem2",
     "[| sorted ?xs; sorted ?ys; distinct ?xs; distinct ?ys; ?e < ?e';
         ALL x:set ?xs. x < ?e; ALL y:set ?ys. ?e' < y |]
      ==> sorted (?xs @ ?e # ?e' # ?ys)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 7, template_hole 6),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, template_var 3)),
        template_predicate (template_app (template_hole 5, template_var 2)),
        template_inequation (less_than, template_var 1, template_var 0),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 3)),
              t_empty)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 3,
                template_app (template_hole 2, template_var 2)),
              t_empty)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_hole 6),
             template_app
              (template_app (template_hole 1, template_var 3),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_app
                  (template_app (template_hole 0, template_var 0),
                   template_var 2))))
           )))]:
   (string * thm * template) list
### theory "Draft.PrioUniqueByAnnotatedListTemplates"
### 0.806s elapsed time, 1.736s cpu time, 1.103s GC time
val it = (): unit
