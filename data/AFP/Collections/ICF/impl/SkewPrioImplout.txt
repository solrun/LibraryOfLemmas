Loading theory "Draft.ICF_Tools" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec" via "Draft.ICF_Spec_Base" via "Draft.Record_Intf")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SkewPrioImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SkewPrioImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "Draft.SetIterator" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It" via "Draft.Proper_Iterator" via "Draft.SetIteratorOperations")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
infix 0 ##
signature ICF_TOOLS =
  sig
    val changed_conv: conv -> conv
    val chead_of: cterm -> cterm
    val chead_of_thm: thm -> cterm
    val define_simple:
       string -> term -> local_theory -> (term * thm) * local_theory
    val define_simple_global:
       string -> term -> theory -> (term * thm) * theory
    val define_simple_local:
       string -> term -> local_theory -> (term * thm) * local_theory
    val dest_def_eq: term -> term * term
    val dt_head: term -> term
    val dt_lhs: term -> term
    val dt_params: term -> term list
    val dt_rhs: term -> term
    val dthm_head: thm -> term
    val dthm_lhs: thm -> term
    val dthm_params: thm -> term list
    val dthm_rhs: thm -> term
    val gen_variant: (string -> bool) -> string -> string
    val import_cterm: cterm -> Proof.context -> cterm * Proof.context
    val inst_meta_cong: Proof.context -> cterm -> thm
    val map_option: ('a -> 'b) -> 'a option -> 'b option
    val norm_def_thm: thm -> thm
    val parse_cpat: cterm context_parser
    val rem_dup_prems: Proof.context -> thm -> thm
    val rename_cterm: cterm * cterm -> ctyp TVars.table * cterm Vars.table
    val renames_cterm: cterm * cterm -> bool
    val repeat_top_sweep_conv:
       (Proof.context -> conv) -> Proof.context -> conv
    val revert_abbrevs: string -> theory -> theory
    val sss_add: thm list -> Proof.context -> Proof.context
    val wrap_lthy_global: (local_theory -> local_theory) -> theory -> theory
    val wrap_lthy_local:
       (local_theory -> local_theory) -> local_theory -> local_theory
    val wrap_lthy_result_global:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> theory -> 'b * theory
    val wrap_lthy_result_local:
       (local_theory -> 'a * local_theory) ->
         (morphism -> 'a -> 'b) -> local_theory -> 'b * local_theory
  end
val ## = fn: ('a -> 'b) * ('c -> 'd) -> 'a * 'c -> 'b * 'd
structure ICF_Tools: ICF_TOOLS
### theory "Draft.ICF_Tools"
### 0.121s elapsed time, 0.483s cpu time, 0.041s GC time
Loading theory "Draft.Ord_Code_Preproc" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec" via "Draft.ICF_Spec_Base" via "Draft.Record_Intf")
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.144s elapsed time, 0.571s cpu time, 0.041s GC time
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SkewPrioImplTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
### ML warning (line 26 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### (=) has infix status but was not preceded by op.
### ML warning (line 37 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (trace_ft) has not been referenced.
### ML warning (line 50 of "$AFP/Collections/ICF/tools/Ord_Code_Preproc.thy"):
### Value identifier (process) has not been referenced.
signature ORD_CODE_PREPROC =
  sig
    val add: int * string * (theory -> thm -> thm) -> theory -> theory
    val get: theory -> (int * string * (theory -> thm -> thm)) list
    val rem: string -> theory -> theory
    val setup: theory -> theory
    val trace_enabled: bool ref
  end
signature OC_SIMPSET =
  sig
    val get: theory -> simpset
    val map: (simpset -> simpset) -> theory -> theory
    val setup: theory -> theory
  end
structure Ord_Code_Preproc: ORD_CODE_PREPROC
functor Oc_Simpset (sig val name: string val prio: int end): OC_SIMPSET
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
### theory "Draft.Ord_Code_Preproc"
### 0.059s elapsed time, 0.241s cpu time, 0.000s GC time
Loading theory "Draft.Locale_Code" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec" via "Draft.ICF_Spec_Base")
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "size_list size <*mlex*> {}"
### ML warning (line 343 of "$AFP/Collections/ICF/tools/Locale_Code.thy"):
### Pattern is not exhaustive.
signature LOCALE_CODE =
  sig
    val add_pat_eq: cterm -> thm list -> theory -> theory
    val close_block: theory -> theory
    val del_pat: cterm -> theory -> theory
    val get_unf_ss: theory -> simpset
    val lc_decl_del: term -> local_theory -> local_theory
    val lc_decl_eq: thm list -> local_theory -> local_theory
    val open_block: theory -> theory
    type pat_eq = cterm * thm list
    val setup: theory -> theory
    val tracing_enabled: bool ref
  end
structure Locale_Code: LOCALE_CODE
### theory "Draft.Locale_Code"
### 0.161s elapsed time, 0.616s cpu time, 0.094s GC time
Loading theory "Draft.Record_Intf" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec" via "Draft.ICF_Spec_Base")
### theory "HOL-Library.Set_Algebras"
### 0.215s elapsed time, 0.829s cpu time, 0.094s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SkewPrioImplTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
signature RECORD_INTF =
  sig
    val add_unf_thms: thm list -> Context.generic -> Context.generic
    val add_unf_thms_global: thm list -> theory -> theory
    val get_unf_ss: Context.generic -> simpset
    val get_unf_thms: Context.generic -> thm list
    val icf_locales_tac: Proof.context -> tactic
    val icf_rec_def: thm -> Context.generic -> Context.generic
    val icf_rec_def_attr: attribute context_parser
    val setup: theory -> theory
  end
structure Record_Intf: RECORD_INTF
### theory "Draft.Record_Intf"
### 0.055s elapsed time, 0.224s cpu time, 0.000s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SkewPrioImplTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.407s elapsed time, 1.607s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SkewPrioImplTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  snth :: "'a stream => nat => 'a"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "Draft.SetIterator"
### 1.355s elapsed time, 5.089s cpu time, 0.982s GC time
Loading theory "Draft.Idx_Iterator" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
consts
  flat :: "'a list stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
### theory "HOL-Library.BigO"
### 1.065s elapsed time, 3.930s cpu time, 0.902s GC time
Loading theory "Draft.SetIteratorOperations" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It" via "Draft.Proper_Iterator")
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.162s elapsed time, 4.317s cpu time, 0.902s GC time
val it = fn:
   (theory -> theory) ->
     (Proof.context -> Proof.context) -> Context.generic -> Context.generic
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Idx_Iterator"
### 0.498s elapsed time, 1.792s cpu time, 0.201s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.456s elapsed time, 7.719s cpu time, 1.869s GC time
Loading theory "Draft.Templates" (required by "Draft.SkewPrioImplTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.076s elapsed time, 0.162s cpu time, 0.039s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SkewPrioImplTemplates")
### theory "Draft.SetIteratorOperations"
### 1.859s elapsed time, 4.635s cpu time, 1.057s GC time
Loading theory "Draft.Proper_Iterator" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator" via "Draft.It_to_It")
Loading theory "Draft.SetIteratorGA" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.556s elapsed time, 1.297s cpu time, 0.103s GC time
structure Icf_Proper_Iterator:
  sig
    val add: attribute
    val add_thm: thm -> Context.generic -> Context.generic
    val del: attribute
    val del_thm: thm -> Context.generic -> Context.generic
    val get: Proof.context -> thm list
    structure icf_proper_iteratorI: NAMED_THMS
    val setup: theory -> theory
  end
### theory "Draft.Proper_Iterator"
### 0.362s elapsed time, 0.911s cpu time, 0.102s GC time
Loading theory "Draft.It_to_It" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
Loading theory "Draft.Gen_Iterator" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec" via "Draft.ICF_Spec_Base" via "Draft.Iterator")
locale proper_it_loc
  fixes
    it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
    and
    it' ::
      "'s => ('\<sigma> => bool)
             => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
  assumes "proper_it_loc it it'"
### theory "Draft.It_to_It"
### 0.084s elapsed time, 0.255s cpu time, 0.000s GC time
### theory "Draft.SetIteratorGA"
### 0.629s elapsed time, 1.546s cpu time, 0.157s GC time
### theory "Draft.Gen_Iterator"
### 0.439s elapsed time, 0.852s cpu time, 0.054s GC time
Loading theory "Draft.Iterator" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec" via "Draft.ICF_Spec_Base")
### theory "Draft.Iterator"
### 0.380s elapsed time, 0.418s cpu time, 0.055s GC time
Loading theory "Draft.ICF_Spec_Base" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl" via "Draft.PrioSpec")
### theory "Draft.ICF_Spec_Base"
### 0.216s elapsed time, 0.216s cpu time, 0.000s GC time
Loading theory "Draft.PrioSpec" (required by "Draft.SkewPrioImplTemplates" via "Draft.SkewPrioImpl")
locale prio
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
locale prio_no_invar
  fixes \<alpha> :: "'a => ('b * 'c) multiset"
    and invar :: "'a => bool"
  assumes "prio_no_invar invar"
locale prio_empty
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and empty :: "unit => 'p"
  assumes "prio_empty \<alpha> invar empty"
locale prio_isEmpty
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and isEmpty :: "'p => bool"
  assumes "prio_isEmpty \<alpha> invar isEmpty"
locale prio_find
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and find :: "'p => 'e * 'a"
  assumes "prio_find \<alpha> invar find"
locale prio_insert
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and insert :: "'e => 'a => 'p => 'p"
  assumes "prio_insert \<alpha> invar insert"
locale prio_meld
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and meld :: "'p => 'p => 'p"
  assumes "prio_meld \<alpha> invar meld"
locale prio_delete
  fixes \<alpha> :: "'p => ('e * 'a) multiset"
    and invar :: "'p => bool"
    and find :: "'p => 'e * 'a"
    and delete :: "'p => 'p"
  assumes "prio_delete \<alpha> invar find delete"
locale StdPrioDefs
  fixes ops :: "('e, 'a, 'p) prio_ops"
locale StdPrio
  fixes ops :: "('a, 'b, 'c) prio_ops"
  assumes "StdPrio ops"
locale StdPrio_no_invar
  fixes ops :: "('a, 'b, 'c) prio_ops"
  assumes "StdPrio_no_invar ops"
### theory "Draft.PrioSpec"
### 0.838s elapsed time, 1.470s cpu time, 0.883s GC time
Loading theory "Draft.SkewPrioImpl" (required by "Draft.SkewPrioImplTemplates")
### theory "Draft.SkewPrioImpl"
### 0.502s elapsed time, 0.502s cpu time, 0.000s GC time
*** Failed to load theory "Draft.SkewPrioImplTemplates" (unresolved "Draft.SkewPrioImpl")
*** exception Protocol_Message
***   [("function", "invoke_scala"), ("name", "make_directory"), ("id", "180")] raised (line 124 of "General/output.ML")
*** At command "export_code" (line 110 of "$AFP/Collections/ICF/impl/SkewPrioImpl.thy")
Exception- TOPLEVEL_ERROR raised
