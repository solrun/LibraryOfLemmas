Loading theory "Draft.SetIterator" (required by "Draft.IteratorTemplates" via "Draft.Iterator" via "Draft.It_to_It" via "Draft.Proper_Iterator" via "Draft.SetIteratorOperations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.IteratorTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.IteratorTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.IteratorTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.130s elapsed time, 0.530s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.IteratorTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.228s elapsed time, 0.919s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.IteratorTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.347s elapsed time, 1.372s cpu time, 0.135s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.IteratorTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.036s elapsed time, 3.824s cpu time, 0.896s GC time
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.SetIterator"
### 1.330s elapsed time, 4.951s cpu time, 0.942s GC time
Loading theory "Draft.Idx_Iterator" (required by "Draft.IteratorTemplates" via "Draft.Iterator")
Loading theory "Draft.SetIteratorOperations" (required by "Draft.IteratorTemplates" via "Draft.Iterator" via "Draft.It_to_It" via "Draft.Proper_Iterator")
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.158s elapsed time, 4.259s cpu time, 0.897s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "(%p. size (fst (snd (snd p)))) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.Idx_Iterator"
### 0.490s elapsed time, 1.713s cpu time, 0.207s GC time
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.178s elapsed time, 7.174s cpu time, 1.243s GC time
Loading theory "Draft.Templates" (required by "Draft.IteratorTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.053s elapsed time, 0.110s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.IteratorTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.773s elapsed time, 1.815s cpu time, 0.710s GC time
### theory "Draft.SetIteratorOperations"
### 1.881s elapsed time, 4.643s cpu time, 1.000s GC time
Loading theory "Draft.Proper_Iterator" (required by "Draft.IteratorTemplates" via "Draft.Iterator" via "Draft.It_to_It")
Loading theory "Draft.SetIteratorGA" (required by "Draft.IteratorTemplates" via "Draft.Iterator")
structure Icf_Proper_Iterator:
  sig
    val add: attribute
    val add_thm: thm -> Context.generic -> Context.generic
    val del: attribute
    val del_thm: thm -> Context.generic -> Context.generic
    val get: Proof.context -> thm list
    structure icf_proper_iteratorI: NAMED_THMS
    val setup: theory -> theory
  end
### theory "Draft.Proper_Iterator"
### 0.319s elapsed time, 0.679s cpu time, 0.039s GC time
Loading theory "Draft.It_to_It" (required by "Draft.IteratorTemplates" via "Draft.Iterator")
Loading theory "Draft.Gen_Iterator" (required by "Draft.IteratorTemplates" via "Draft.Iterator")
locale proper_it_loc
  fixes
    it ::
      "'s => ('x list => bool)
             => ('x => 'x list => 'x list) => 'x list => 'x list"
    and
    it' ::
      "'s => ('\<sigma> => bool)
             => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
  assumes "proper_it_loc it it'"
### theory "Draft.It_to_It"
### 0.100s elapsed time, 0.296s cpu time, 0.041s GC time
### theory "Draft.SetIteratorGA"
### 0.545s elapsed time, 1.229s cpu time, 0.080s GC time
### theory "Draft.Gen_Iterator"
### 0.444s elapsed time, 0.834s cpu time, 0.088s GC time
Loading theory "Draft.Iterator" (required by "Draft.IteratorTemplates")
### theory "Draft.Iterator"
### 0.357s elapsed time, 0.358s cpu time, 0.000s GC time
Loading theory "Draft.IteratorTemplates"
val templateLemmas =
   [("SetIteratorOperations.set_iterator_genord_emp_correct",
     "set_iterator_genord set_iterator_emp {} ?R",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0),
           template_var 0)
         )),
    ("SetIteratorOperations.set_iterator_union_emp",
     "set_iterator_union set_iterator_emp ?it = ?it",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("SetIteratorOperations.set_iterator_union_emp",
     "set_iterator_union ?it set_iterator_emp = ?it",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("Proper_Iterator.icf_proper_iteratorI",
     "proper_it (it_to_it ?I) (it_to_it ?I)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Proper_Iterator.pi_sng",
     "proper_it (set_iterator_sng ?x) (set_iterator_sng ?x)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Proper_Iterator.pi_foldli", "proper_it (foldli ?l) (foldli ?l)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("Proper_Iterator.pi_foldri", "proper_it (foldri ?l) (foldri ?l)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("SetIteratorGA.iterate_to_list_foldli",
     "iterate_to_list (foldli ?xs) = rev ?xs",
     template_equation
      (template_app
        (template_hole 2, template_app (template_hole 1, template_var 0)),
       template_app (template_hole 0, template_var 0))),
    ("SetIteratorOperations.set_iterator_sng_correct",
     "set_iterator (set_iterator_sng ?x) {?x}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("SetIteratorOperations.set_iterator_sng_foldli_conv",
     "set_iterator_sng ?x = foldli [?x]",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("Proper_Iterator.pi'_foldli",
     "proper_it' (foldli o ?tsl) (foldli o ?tsl)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("Proper_Iterator.pi'_foldri",
     "proper_it' (foldri o ?tsl) (foldri o ?tsl)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_hole 2),
               template_var 0)),
           template_app
            (template_app (template_hole 1, template_hole 0),
             template_var 0))
         )),
    ("SetIteratorOperations.set_iterator_genord_sng_correct",
     "set_iterator_genord (set_iterator_sng ?x) {?x} ?R",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)
         )),
    ("SetIteratorGA.set_iterator_finite",
     "set_iterator ?it ?S0.0 ==> finite ?S0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 1),
              template_var 0)
            )],
       template_predicate
        (template_app (template_hole 0, template_var 0)))),
    ("SetIteratorOperations.map_iterator_dom_foldli_conv",
     "map_iterator_dom (foldli ?kvs) = foldli (map fst ?kvs)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("Proper_Iterator.proper_iterator_trigger",
     "proper_it ?it ?it' ==> proper_it ?it ?it'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("Proper_Iterator.proper_iterator_trigger",
     "proper_it' ?itf ?itf' ==> proper_it' ?itf ?itf'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 0, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("SetIteratorGA.iterator_to_ordered_iterator_mergesort_code",
     "iterator_to_ordered_iterator_mergesort ?R ?it =
      foldli (mergesort_by_rel ?R (iterate_to_list ?it))",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1), template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1),
           template_app (template_hole 0, template_var 0))))),
    ("SetIteratorOperations.set_iterator_filter_foldli_conv",
     "set_iterator_filter ?P (foldli ?xs) = foldli (filter ?P ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_image_foldli_conv",
     "set_iterator_image ?g (foldli ?xs) = foldli (map ?g ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_image_filter_foldli_conv",
     "set_iterator_image_filter ?g (foldli ?xs) =
      foldli (List.map_filter ?g ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_foldli_correct",
     "distinct ?xs ==> set_iterator (foldli ?xs) (set ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SetIteratorOperations.set_iterator_foldri_correct",
     "distinct ?xs ==> set_iterator (foldri ?xs) (set ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SetIteratorGA.map_iterator_finite",
     "map_iterator ?it ?m ==> finite (dom ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 0))
           ))),
    ("SetIterator.set_iterator_intro",
     "set_iterator_genord ?it ?S0.0 ?R ==> set_iterator ?it ?S0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("SetIteratorGA.iterator_to_ordered_iterator_quicksort_code",
     "iterator_to_ordered_iterator_quicksort ?R ?it =
      foldli (quicksort_by_rel ?R [] (iterate_to_list ?it))",
     template_equation
      (template_app
        (template_app (template_hole 4, template_var 1), template_var 0),
       template_app
        (template_hole 3,
         template_app
          (template_app
            (template_app (template_hole 2, template_var 1),
             template_hole 1),
           template_app (template_hole 0, template_var 0))))),
    ("Iterator.iterator_cnv_to_comp",
     "foldli (it_to_list ?it ?x) =
      (foldli \<circ>\<circ> it_to_list) ?it ?x",
     template_equation
      (template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 1), template_var 0)),
       template_app
        (template_app
          (template_app (template_hole 0, template_hole 2),
           template_app (template_hole 1, template_var 1)),
         template_var 0))),
    ("SetIteratorOperations.set_iterator_union_foldli_conv",
     "set_iterator_union (foldli ?as) (foldli ?bs) = foldli (?as @ ?bs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Proper_Iterator.pi_dom",
     "proper_it ?it ?it' ==>
      proper_it (map_iterator_dom ?it) (map_iterator_dom ?it')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Proper_Iterator.proper_it'D",
     "proper_it' ?it ?it' ==> proper_it (?it ?s) (?it' ?s)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 1, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 0,
               template_app (template_var 2, template_var 0)),
             template_app (template_var 1, template_var 0))
           ))),
    ("SetIteratorGA.iterate_is_empty_by_size_correct",
     "set_iterator ?it ?S0.0 ==>
      iterate_is_empty_by_size ?it = (?S0.0 = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_implication
        ([template_predicate
           (template_app (template_hole 2, template_var 1))],
         template_equation (template_var 0, template_hole 0)))),
    ("SetIteratorGA.iterate_is_empty_correct",
     "set_iterator ?it ?S0.0 ==> iterate_is_empty ?it = (?S0.0 = {})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 0)
            )],
       template_implication
        ([template_predicate
           (template_app (template_hole 2, template_var 1))],
         template_equation (template_var 0, template_hole 0)))),
    ("SetIteratorOperations.map_iterator_dom_correct",
     "map_iterator ?it ?m ==> set_iterator (map_iterator_dom ?it) (dom ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gen_Iterator.it_to_sorted_list_weaken",
     "?R <= ?R' ==> it_to_sorted_list ?R ?s <= it_to_sorted_list ?R' ?s",
     template_implication
      ([template_inequation (less_equals, template_var 2, template_var 1)],
       template_inequation
        (less_equals,
         template_app
          (template_app (template_hole 0, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("Proper_Iterator.pi_filter",
     "proper_it ?it ?it' ==>
      proper_it (set_iterator_filter ?P ?it) (set_iterator_filter ?P ?it')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Proper_Iterator.pi_image",
     "proper_it ?it ?it' ==>
      proper_it (set_iterator_image ?g ?it) (set_iterator_image ?g ?it')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Proper_Iterator.pi_image_filter",
     "proper_it ?it ?it' ==>
      proper_it (set_iterator_image_filter ?g ?it)
       (set_iterator_image_filter ?g ?it')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_var 2)),
             template_app
              (template_app (template_hole 0, template_var 0),
               template_var 1))
           ))),
    ("Gen_Iterator.pi'_dom",
     "proper_it' ?it ?it' ==>
      proper_it' (map_iterator_dom o ?it) (map_iterator_dom o ?it')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_var 1)),
             template_app
              (template_app (template_hole 1, template_hole 0),
               template_var 0))
           ))),
    ("SetIteratorGA.iterate_is_sng_correct",
     "set_iterator ?it ?S0.0 ==> iterate_is_sng ?it = (card ?S0.0 = 1)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_implication
        ([template_predicate
           (template_app (template_hole 3, template_var 1))],
         template_equation
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("SetIteratorOperations.map_iterator_foldli_correct",
     "distinct (map fst ?xs) ==> map_iterator (foldli ?xs) (map_of ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SetIteratorOperations.map_iterator_foldri_correct",
     "distinct (map fst ?xs) ==> map_iterator (foldri ?xs) (map_of ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("Gen_Iterator.set_to_list_by_set_to_sorted_list",
     "GEN_ALGO_tag (is_set_to_sorted_list ?ordR ?Rk ?Rs ?tsl) ==>
      is_set_to_list ?Rk ?Rs ?tsl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_app
                   (template_app (template_hole 1, template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Proper_Iterator.proper_it'I",
     "(!!s. proper_it (?it s) (?it' s)) ==> proper_it' ?it ?it'",
     template_implication
      ([template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 1), template_var 0)
           ))),
    ("SetIteratorOperations.map_iterator_key_filter_foldli_conv",
     "map_iterator_key_filter ?P (foldli ?kvs) =
      foldli (filter (%(k, v). ?P k) ?kvs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_var 0)))),
    ("SetIteratorGA.iterate_size_correct",
     "set_iterator ?it ?S0.0 ==>
      iterate_size ?it = card ?S0.0 & finite ?S0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app (template_hole 2, template_var 1)),
                 template_app (template_hole 1, template_var 0))),
             template_app (template_hole 0, template_var 0))
           ))),
    ("Gen_Iterator.set_to_sorted_list_itype",
     "set_to_sorted_list ?R ::\<^sub>i
      \<langle>?I\<rangle>\<^sub>i?i_set \<rightarrow>\<^sub>i
      \<langle>\<langle>?I\<rangle>\<^sub>ii_list\<rangle>\<^sub>ii_nres",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 6,
             template_app (template_hole 5, template_var 2)),
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 4, template_var 1),
                   template_var 0))),
             template_app
              (template_app (template_hole 4, template_hole 1),
               template_app
                (template_app (template_hole 4, template_hole 0),
                 template_var 0))))
         )),
    ("SetIteratorGA.iterate_ball_correct",
     "set_iterator ?it ?S0.0 ==> iterate_ball ?it ?P = (ALL x:?S0.0. ?P x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("SetIteratorGA.iterate_bex_correct",
     "set_iterator ?it ?S0.0 ==> iterate_bex ?it ?P = (EX x:?S0.0. ?P x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 2), template_var 0),
         template_app
          (template_app (template_hole 0, template_var 1), t_empty)))),
    ("SetIteratorGA.iterate_to_list_correct",
     "set_iterator ?it ?S0.0 ==>
      set (iterate_to_list ?it) = ?S0.0 & distinct (iterate_to_list ?it)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_hole 2,
                     template_app (template_hole 1, template_var 1))),
                 template_var 0)),
             template_app
              (template_hole 0,
               template_app (template_hole 1, template_var 1)))
           ))),
    ("Gen_Iterator.map_to_list_by_map_to_sorted_list",
     "GEN_ALGO_tag (is_map_to_sorted_list ?ordR ?Rk ?Rv ?Rm ?tsl) ==>
      is_map_to_list ?Rk ?Rv ?Rm ?tsl",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 2,
              template_app
               (template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 1, template_var 4),
                      template_var 3),
                    template_var 2),
                  template_var 1),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Proper_Iterator.proper_itI",
     "?it = foldli ?l & ?it' = foldli ?l ==> proper_it ?it ?it'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app
                 (template_app (template_hole 4, template_var 2),
                  template_app (template_hole 3, template_var 1))),
              template_app
               (template_app (template_hole 2, template_var 0),
                template_app (template_hole 1, template_var 1)))
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 0)
           ))),
    ("Idx_Iterator.idx_iteratei_aux_simps",
     "~ ?c ?\<sigma> ==>
      idx_iteratei_aux ?get ?sz ?i ?l ?c ?f ?\<sigma> = ?\<sigma>",
     template_implication
      ([template_negation
         (
            template_predicate
             (template_app (template_var 6, template_var 5))
            )],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 4),
                     template_var 3),
                   template_var 2),
                 template_var 1),
               template_var 6),
             template_var 0),
           template_var 5),
         template_var 5))),
    ("Idx_Iterator.idx_iteratei_aux_simps",
     "?i = 0 ==>
      idx_iteratei_aux ?get ?sz ?i ?l ?c ?f ?\<sigma> = ?\<sigma>",
     template_implication
      ([template_equation (template_var 6, template_hole 2)],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 0, template_var 5),
                     template_var 4),
                   template_var 6),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_var 0))),
    ("SetIteratorOperations.set_iterator_genord_foldli_correct",
     "[| distinct ?xs; sorted_wrt ?R ?xs |]
      ==> set_iterator_genord (foldli ?xs) (set ?xs) ?R",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("SetIteratorGA.iterate_size_abort_correct",
     "set_iterator ?it ?S0.0 ==>
      iterate_size_abort ?it ?n = min ?n (card ?S0.0) & finite ?S0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 2),
                     template_var 0)),
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_app (template_hole 1, template_var 1)))),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SetIteratorOperations.set_iterator_genord_foldri_correct",
     "[| distinct ?xs; sorted_wrt ?R (rev ?xs) |]
      ==> set_iterator_genord (foldri ?xs) (set ?xs) ?R",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_filter_correct",
     "set_iterator ?it ?S ==>
      set_iterator (set_iterator_filter ?P ?it) {x: ?S. ?P x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 2)),
             template_app (template_hole 2, t_empty))
           ))),
    ("SetIteratorGA.iterate_sel_no_map_correct",
     "set_iterator ?it ?S0.0 ==>
      (iterate_sel_no_map ?it ?P = None) = (ALL x:?S0.0. ~ ?P x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 2),
               template_var 0)),
           template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 1), t_empty)))),
    ("SetIteratorOperations.map_iterator_key_filter_correct",
     "map_iterator ?it ?m ==>
      map_iterator (map_iterator_key_filter ?P ?it) (?m |` {k. ?P k})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, t_empty))))
           ))),
    ("Proper_Iterator.pi_union",
     "[| proper_it ?it_a ?it_a'; proper_it ?it_b ?it_b' |]
      ==> proper_it (set_iterator_union ?it_a ?it_b)
           (set_iterator_union ?it_a' ?it_b')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("SetIterator.set_iterator_foldli_conv",
     "set_iterator ?iti ?S =
      (EX l0. distinct l0 & ?S = set l0 & ?iti = foldli l0)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app (template_hole 6, t_empty))),
    ("SetIteratorGA.iterate_sel_no_map_genord_correct",
     "set_iterator_genord ?it ?S0.0 ?R ==>
      (iterate_sel_no_map ?it ?P = None) = (ALL x:?S0.0. ~ ?P x)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 4,
             template_app
              (template_app (template_hole 3, template_var 3),
               template_var 0)),
           template_hole 2),
         template_app
          (template_app (template_hole 1, template_var 2), t_empty)))),
    ("SetIteratorOperations.map_iterator_genord_foldli_correct",
     "[| distinct (map fst ?xs); sorted_wrt ?R ?xs |]
      ==> map_iterator_genord (foldli ?xs) (map_of ?xs) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_genord_filter_correct",
     "set_iterator_genord ?it ?S ?R ==>
      set_iterator_genord (set_iterator_filter ?P ?it) {x: ?S. ?P x} ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 3)),
               template_app (template_hole 2, t_empty)),
             template_var 1)
           ))),
    ("SetIteratorGA.iterate_sel_genord_correct",
     "set_iterator_genord ?it ?S0.0 ?R ==>
      (iterate_sel ?it ?f = None) = (ALL x:?S0.0. ?f x = None)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 5, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 3,
             template_app
              (template_app (template_hole 2, template_var 3),
               template_var 0)),
           template_hole 1),
         template_app
          (template_app (template_hole 0, template_var 2), t_empty)))),
    ("SetIteratorOperations.map_iterator_genord_key_filter_correct",
     "map_iterator_genord ?it ?m ?R ==>
      map_iterator_genord (map_iterator_key_filter ?P ?it) (?m |` {k. ?P k})
       ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 3)),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, t_empty)))),
             template_var 1)
           ))),
    ("SetIteratorGA.iterate_sel_no_map_correct",
     "[| set_iterator ?it ?S0.0; iterate_sel_no_map ?it ?P = Some ?x |]
      ==> ?x : ?S0.0 & ?P ?x",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 3), template_var 1),
          template_app (template_hole 2, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2)),
             template_app (template_var 1, template_var 0))
           ))),
    ("SetIteratorOperations.map_iterator_genord_foldri_correct",
     "[| distinct (map fst ?xs); sorted_wrt ?R (rev ?xs) |]
      ==> map_iterator_genord (foldri ?xs) (map_of ?xs) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("SetIterator.set_iterator_I",
     "[| distinct ?l0.0; ?S = set ?l0.0; ?iti = foldli ?l0.0 |]
      ==> set_iterator ?iti ?S",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_var 1, template_app (template_hole 3, template_var 2)),
        template_equation
         (template_var 0, template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("Gen_Iterator.map_to_sorted_list_itype",
     "map_to_sorted_list ?R ::\<^sub>i
      \<langle>?Rk, ?Rv\<rangle>\<^sub>i?i_map \<rightarrow>\<^sub>i
      \<langle>\<langle>\<langle>?Rk,
      ?Rv\<rangle>\<^sub>ii_prod\<rangle>\<^sub>ii_list\<rangle>\<^sub>ii_nres",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 7,
             template_app (template_hole 6, template_var 3)),
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 4, template_hole 3),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 2),
                       template_var 1)),
                   template_var 0))),
             template_app
              (template_app (template_hole 5, template_hole 2),
               template_app
                (template_app (template_hole 5, template_hole 1),
                 template_app
                  (template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_hole 0),
                       template_var 1)),
                   template_var 0)))))
         )),
    ("SetIteratorOperations.map_iterator_product_foldli_conv",
     "map_iterator_product (foldli ?as) (%a. foldli (?bs a)) =
      foldli (concat (map (%(k, v). map (Pair k) (?bs v)) ?as))",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         t_empty),
       template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_var 1))))),
    ("SetIteratorOperations.set_iterator_product_foldli_conv",
     "set_iterator_product (foldli ?as) (%a. foldli (?bs a)) =
      foldli (concat (map (%a. map (Pair a) (?bs a)) ?as))",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         t_empty),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1))))),
    ("Proper_Iterator.set_iterator_product_eq2",
     "ALL a:set ?la. ?itb a = ?itb' a ==>
      set_iterator_product (foldli ?la) ?itb =
      set_iterator_product (foldli ?la) ?itb'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 5,
                template_app (template_hole 4, template_var 2)),
              t_empty)
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 1),
         template_app
          (template_app
            (template_hole 1,
             template_app (template_hole 0, template_var 2)),
           template_var 0)))),
    ("SetIterator.map_iterator_foldli_conv",
     "map_iterator ?iti ?m =
      (EX l0. distinct (map fst l0) & ?m = map_of l0 & ?iti = foldli l0)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1),
         template_app (template_hole 9, template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("SetIteratorGA.iterate_to_list_genord_correct",
     "set_iterator_genord ?it ?S0.0 ?R ==>
      set (iterate_to_list ?it) = ?S0.0 &
      distinct (iterate_to_list ?it) &
      sorted_wrt ?R (rev (iterate_to_list ?it))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app
                  (template_hole 5,
                   template_app
                    (template_hole 4,
                     template_app (template_hole 3, template_var 2))),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 6,
                 template_app
                  (template_hole 2,
                   template_app (template_hole 3, template_var 2))),
               template_app
                (template_app (template_hole 1, template_var 0),
                 template_app
                  (template_hole 0,
                   template_app (template_hole 3, template_var 2)))))
           ))),
    ("Proper_Iterator.pi_product",
     "[| proper_it ?it_a ?it_a'; !!x. proper_it (?it_b x) (?it_b' x) |]
      ==> proper_it (set_iterator_product ?it_a ?it_b)
           (set_iterator_product ?it_a' ?it_b')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("SetIteratorOperations.set_iterator_image_correct",
     "[| set_iterator ?it ?S; inj_on ?g ?S; ?S' = ?g ` ?S |]
      ==> set_iterator (set_iterator_image ?g ?it) ?S'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_var 0)
           ))),
    ("SetIterator.map_iterator_I",
     "[| distinct (map fst ?l0.0); ?m = map_of ?l0.0; ?iti = foldli ?l0.0 |]
      ==> map_iterator ?iti ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 2))
            ),
        template_equation
         (template_var 1, template_app (template_hole 4, template_var 2)),
        template_equation
         (template_var 0, template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SetIterator.set_iterator_genord_foldli_conv",
     "set_iterator_genord ?iti ?S ?R =
      (EX l0.
          distinct l0 & ?S = set l0 & sorted_wrt ?R l0 & ?iti = foldli l0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 7, t_empty))),
    ("Proper_Iterator.proper_itE",
     "[| proper_it ?it ?it';
         !!l. [| ?it = foldli l; ?it' = foldli l |] ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("SetIteratorOperations.map_iterator_dom_filter_correct",
     "map_iterator ?it ?m ==>
      set_iterator (map_iterator_dom_filter ?P ?it)
       {k. EX v. ?m k = Some v & ?P (k, v)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 2)),
             template_app (template_hole 5, t_empty))
           ))),
    ("SetIteratorOperations.set_iterator_union_correct",
     "[| set_iterator ?it_a ?S_a; set_iterator ?it_b ?S_b;
         ?S_a Int ?S_b = {} |]
      ==> set_iterator (set_iterator_union ?it_a ?it_b) (?S_a Un ?S_b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("SetIterator.set_iterator_genord_I",
     "[| distinct ?l0.0; ?S = set ?l0.0; sorted_wrt ?R ?l0.0;
         ?iti = foldli ?l0.0 |]
      ==> set_iterator_genord ?iti ?S ?R",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_equation
         (template_var 2, template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3)
            ),
        template_equation
         (template_var 0, template_app (template_hole 1, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("SetIterator.map_iterator_genord_foldli_conv",
     "map_iterator_genord ?iti ?m ?R =
      (EX l0.
          distinct (map fst l0) &
          ?m = map_of l0 & sorted_wrt ?R l0 & ?iti = foldli l0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_var 2),
           template_app (template_hole 10, template_var 1)),
         template_var 0),
       template_app (template_hole 9, t_empty))),
    ("Idx_Iterator.idx_iteratei_aux_nth_conv_foldli_drop",
     "?i <= length ?xs ==>
      idx_iteratei_aux (!) (length ?xs) ?i ?xs ?c ?f ?\<sigma> =
      foldli (drop (length ?xs - ?i) ?xs) ?c ?f ?\<sigma>",
     template_implication
      ([template_inequation
         (less_equals, template_var 4,
          template_app (template_hole 6, template_var 3))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 4, template_hole 3),
                     template_app (template_hole 6, template_var 3)),
                   template_var 4),
                 template_var 3),
               template_var 2),
             template_var 1),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app
                    (template_hole 1,
                     template_app
                      (template_app
                        (template_hole 0,
                         template_app (template_hole 6, template_var 3)),
                       template_var 4)),
                   template_var 3)),
               template_var 2),
             template_var 1),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_product_it_b_cong",
     "[| set_iterator ?it_a ?S_a; !!a. a : ?S_a ==> ?it_b a = ?it_b' a |]
      ==> set_iterator_product ?it_a ?it_b =
          set_iterator_product ?it_a ?it_b'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_product_correct",
     "[| set_iterator ?it_a ?S_a;
         !!a. a : ?S_a ==> set_iterator (?it_b a) (?S_b a) |]
      ==> set_iterator (set_iterator_product ?it_a ?it_b)
           (Sigma ?S_a ?S_b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("SetIteratorGA.iterate_sel_no_map_map_correct",
     "[| map_iterator ?it ?m; iterate_sel_no_map ?it ?P = Some (?k, ?v) |]
      ==> ?m ?k = Some ?v & ?P (?k, ?v)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 4),
              template_app (template_hole 7, template_var 3))
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 4), template_var 2),
          template_app
           (template_hole 4,
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 0)))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app (template_var 3, template_var 1)),
                 template_app (template_hole 0, template_var 0))),
             template_app
              (template_var 2,
               template_app
                (template_app (template_hole 3, template_var 1),
                 template_var 0)))
           ))),
    ("SetIteratorGA.iterator_to_ordered_iterator_correct",
     "[| !!l. sorted_wrt ?R (?sort_fun l) & mset (?sort_fun l) = mset l;
         set_iterator ?it ?S0.0 |]
      ==> set_iterator_genord (iterator_to_ordered_iterator ?sort_fun ?it)
           ?S0.0 ?R",
     template_implication
      ([template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0),
             template_var 3)
           ))),
    ("SetIteratorGA.iterate_sel_no_map_map_correct",
     "map_iterator ?it ?m ==>
      (iterate_sel_no_map ?it ?P = None) =
      (ALL k v. ?m k = Some v --> ~ ?P (k, v))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 2),
              template_app (template_hole 11, template_var 1))
            )],
       template_equation
        (template_app
          (template_app
            (template_hole 9,
             template_app
              (template_app (template_hole 8, template_var 2),
               template_var 0)),
           template_hole 7),
         template_app (template_hole 6, t_empty)))),
    ("Gen_Iterator.det_fold_setI",
     "(!!l. [| distinct l; sorted_wrt ?R l |]
            ==> foldli l ?c ?f ?\<sigma> = ?result (set l)) ==>
      det_fold_set ?R ?c ?f ?\<sigma> ?result",
     template_implication
      ([template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("SetIterator.map_iterator_genord_I",
     "[| distinct (map fst ?l0.0); ?m = map_of ?l0.0; sorted_wrt ?R ?l0.0;
         ?iti = foldli ?l0.0 |]
      ==> map_iterator_genord ?iti ?m ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 3))
            ),
        template_equation
         (template_var 2, template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_equation
         (template_var 0, template_app (template_hole 2, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2)),
             template_var 1)
           ))),
    ("SetIteratorOperations.set_iterator_image_filter_correct",
     "[| set_iterator ?it ?S; inj_on ?g (?S Int dom ?g) |]
      ==> set_iterator (set_iterator_image_filter ?g ?it)
           {y. EX x. x : ?S & ?g x = Some y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app (template_hole 8, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 2)),
             template_app (template_hole 5, t_empty))
           ))),
    ("Gen_Iterator.det_fold_mapI",
     "(!!l. [| distinct (map fst l); sorted_wrt (key_rel ?R) l |]
            ==> foldli l ?c ?f ?\<sigma> = ?result (map_of l)) ==>
      det_fold_map ?R ?c ?f ?\<sigma> ?result",
     template_implication
      ([template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 4),
                   template_var 3),
                 template_var 2),
               template_var 1),
             template_var 0)
           ))),
    ("Proper_Iterator.proper_it_parE",
     "[| ALL x. proper_it (?it x) (?it' x);
         !!f. [| ?it = (%x. foldli (f x)); ?it' = (%x. foldli (f x)) |]
              ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate (template_var 0))),
    ("SetIteratorOperations.set_iterator_genord_product_correct",
     "[| set_iterator_genord ?it_a ?S_a ?R_a;
         !!a. a : ?S_a ==>
              set_iterator_genord (?it_b a) (?S_b a) (?R_b a) |]
      ==> set_iterator_genord (set_iterator_product ?it_a ?it_b)
           (Sigma ?S_a ?S_b) (set_iterator_product_order ?R_a ?R_b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("SetIteratorGA.iterate_sel_no_map_genord_correct",
     "[| set_iterator_genord ?it ?S0.0 ?R;
         iterate_sel_no_map ?it ?P = Some ?x |]
      ==> ?x : ?S0.0 & ?P ?x & (ALL x':?S0.0 - {?x}. ?P x' --> ?R ?x x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 10, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 8, template_var 4), template_var 1),
          template_app (template_hole 7, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 0),
                 template_var 3)),
             template_app
              (template_app
                (template_hole 6,
                 template_app (template_var 1, template_var 0)),
               template_app
                (template_app
                  (template_hole 4,
                   template_app
                    (template_app (template_hole 3, template_var 3),
                     template_app
                      (template_app (template_hole 2, template_var 0),
                       template_hole 1))),
                 t_empty)))
           ))),
    ("Idx_Iterator.idx_iteratei_aux_simps",
     "[| ?i ~= 0; ?c ?\<sigma> |]
      ==> idx_iteratei_aux ?get ?sz ?i ?l ?c ?f ?\<sigma> =
          idx_iteratei_aux ?get ?sz (?i - 1) ?l ?c ?f
           (?f (?get ?l (?sz - ?i)) ?\<sigma>)",
     template_implication
      ([template_negation
         (template_equation (template_var 6, template_hole 4)),
        template_predicate (template_app (template_var 5, template_var 4))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2),
                   template_var 6),
                 template_var 1),
               template_var 5),
             template_var 0),
           template_var 4),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app
                    (template_app (template_hole 2, template_var 3),
                     template_var 2),
                   template_app
                    (template_app (template_hole 1, template_var 6),
                     template_hole 0)),
                 template_var 1),
               template_var 5),
             template_var 0),
           template_app
            (template_app
              (template_var 0,
               template_app
                (template_app (template_var 3, template_var 1),
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_var 6))),
             template_var 4))))),
    ("Proper_Iterator.map_it_to_list_genord_correct",
     "map_iterator_genord (?it ?s) ?m (%(k, uu_) (k', uu_). ?R k k') ==>
      map_of (it_to_list ?it ?s) = ?m &
      distinct (map fst (it_to_list ?it ?s)) &
      sorted_wrt ?R (map fst (it_to_list ?it ?s))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_hole 11,
                  template_app (template_var 3, template_var 2)),
                template_app (template_hole 10, template_var 1)),
              template_app (template_hole 9, t_empty))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app
                  (template_hole 6,
                   template_app
                    (template_hole 5,
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_var 2))),
                 template_var 1)),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_hole 3,
                   template_app
                    (template_app (template_hole 2, template_hole 1),
                     template_app
                      (template_app (template_hole 4, template_var 3),
                       template_var 2)))),
               template_app
                (template_app (template_hole 0, template_var 0),
                 template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_app
                    (template_app (template_hole 4, template_var 3),
                     template_var 2)))))
           ))),
    ("Gen_Iterator.set_to_sorted_list_by_tsl",
     "[| MINOR_PRIO_TAG (- 11);
         SIDE_GEN_ALGO (is_set_to_sorted_list ?R ?Rk ?Rs ?tsl) |]
      ==> (%s. RETURN (?tsl s), set_to_sorted_list ?R)
          : \<langle>?Rk\<rangle>?Rs \<rightarrow>
            \<langle>\<langle>?Rk\<rangle>list_rel\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 21, template_hole 20),
              template_app
               (template_hole 19,
                template_app
                 (template_hole 18,
                  template_app
                   (template_hole 17,
                    template_app
                     (template_hole 17,
                      template_app (template_hole 16, template_hole 15))))))
            ),
        template_predicate
         (
            template_app
             (template_hole 14,
              template_app
               (template_hole 13,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 12, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 11,
               template_app
                (template_app (template_hole 10, t_empty),
                 template_app (template_hole 8, template_var 3))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2))),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2))))
           ))),
    ("Gen_Iterator.set_to_list_by_tsl",
     "[| PRIO_TAG_GEN_ALGO; SIDE_GEN_ALGO (is_set_to_list ?Rk ?Rs ?tsl) |]
      ==> (%s. RETURN (?tsl s), set_to_sorted_list (%_ _. True))
          : \<langle>?Rk\<rangle>?Rs \<rightarrow>
            \<langle>\<langle>?Rk\<rangle>list_rel\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 22, template_hole 21),
              template_app
               (template_hole 20,
                template_app
                 (template_hole 19,
                  template_app
                   (template_hole 18,
                    template_app
                     (template_hole 17,
                      template_app (template_hole 18, template_hole 16))))))
            ),
        template_predicate
         (
            template_app
             (template_hole 15,
              template_app
               (template_hole 14,
                template_app
                 (template_app
                   (template_app (template_hole 13, template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 12,
               template_app
                (template_app (template_hole 11, t_empty),
                 template_app (template_hole 9, t_empty))),
             template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 6, template_hole 5),
                   template_app
                    (template_app (template_hole 4, template_var 1),
                     template_var 2))),
               template_app
                (template_app (template_hole 3, template_hole 2),
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 2))))
           ))),
    ("Gen_Iterator.is_set_to_sorted_listE",
     "[| is_set_to_sorted_list ?ordR ?Rk ?Rs ?tsl;
         (?s, ?s') : \<langle>?Rk\<rangle>?Rs;
         !!l'. [| (?tsl ?s, l') : \<langle>?Rk\<rangle>list_rel;
                  RETURN l' <= it_to_sorted_list ?ordR ?s' |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 2),
                  template_var 1)),
              template_app
               (template_app (template_hole 8, template_var 4),
                template_var 5))
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate (template_var 0))),
    ("SetIteratorGA.iterate_sel_genord_correct",
     "[| set_iterator_genord ?it ?S0.0 ?R; iterate_sel ?it ?f = Some ?y |]
      ==> EX x:?S0.0.
             ?f x = Some ?y &
             (ALL x':?S0.0 - {x}. ALL y. ?f x' = Some ?y' --> ?R x x')",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_equation
         (template_app
           (template_app (template_hole 9, template_var 5), template_var 2),
          template_app (template_hole 8, template_var 1))],
       template_predicate
        (
           template_app
            (template_app (template_hole 7, template_var 4), t_empty)
           ))),
    ("Gen_Iterator.det_fold_map_aux",
     "[| [| distinct (map fst ?l); sorted_wrt (key_rel ?R) ?l |]
         ==> foldli ?l ?c ?f ?\<sigma> = ?result (map_of ?l);
         RETURN ?l <= it_to_sorted_list (key_rel ?R) (map_to_set ?m) |]
      ==> foldli ?l ?c ?f ?\<sigma> = ?result ?m",
     template_implication
      ([template_implication
         ([template_predicate
            (
               template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_var 6))
               )],
          template_implication
           ([template_predicate
              (
                 template_app
                  (template_app
                    (template_hole 8,
                     template_app (template_hole 7, template_var 5)),
                   template_var 6)
                 )],
            template_equation
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 5, template_var 6),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_app
               (template_var 1,
                template_app (template_hole 4, template_var 6))))),
        template_inequation
         (less_equals, template_app (template_hole 2, template_var 6),
          template_app
           (template_app
             (template_hole 1,
              template_app (template_hole 7, template_var 5)),
            template_app (template_hole 0, template_var 0)))],
       template_equation
        (template_app
          (template_app
            (template_app
              (template_app (template_hole 5, template_var 6),
               template_var 4),
             template_var 3),
           template_var 2),
         template_app (template_var 1, template_var 0)))),
    ("Idx_Iterator.idx_iteratei_eq_foldli",
     "[| (?sz, length) : ?arel \<rightarrow> nat_rel;
         (?get, (!)) : ?arel \<rightarrow> nat_rel \<rightarrow> Id;
         (?s, ?s') : ?arel |]
      ==> (idx_iteratei ?get ?sz ?s, foldli ?s') : Id",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_var 4),
                  template_hole 21)),
              template_app
               (template_app
                 (template_hole 20,
                  template_app
                   (template_app (template_hole 19, template_hole 18),
                    template_var 3)),
                template_hole 17))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 2),
                  template_hole 14)),
              template_app
               (template_app
                 (template_hole 13,
                  template_app
                   (template_app (template_hole 12, template_hole 11),
                    template_var 3)),
                template_app
                 (template_app
                   (template_hole 10,
                    template_app
                     (template_app (template_hole 9, template_hole 8),
                      template_hole 17)),
                  template_hole 7)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 6,
                template_app
                 (template_app (template_hole 5, template_var 1),
                  template_var 0)),
              template_var 3)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app
                  (template_hole 3,
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_var 2),
                       template_var 4),
                     template_var 1)),
                 template_app (template_hole 1, template_var 0))),
             template_hole 0)
           ))),
    ("SetIteratorOperations.map_iterator_product_correct",
     "[| map_iterator ?it_a ?m;
         !!k v. ?m k = Some v ==> set_iterator (?it_b v) (?S_b v) |]
      ==> set_iterator (map_iterator_product ?it_a ?it_b)
           {(k, e). EX v. ?m k = Some v & e : ?S_b v}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app (template_hole 12, template_var 2))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 1)),
             template_app
              (template_hole 4, template_app (template_hole 3, t_empty)))
           ))),
    ("Gen_Iterator.proper_it_mono_dres",
     "[| proper_it' ?it ?it'; !!kv x. ?f kv x <= ?f' kv x |]
      ==> ?it' ?s (case_dres False False ?c) (%kv s. s >>= ?f kv) ?\<sigma>
          <= ?it' ?s (case_dres False False ?c) (%kv s. s >>= ?f' kv)
              ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_var 5, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 1),
                 template_var 1)),
             t_empty),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_var 5, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 1),
                 template_var 1)),
             t_empty),
           template_var 0)))),
    ("Gen_Iterator.map_to_sorted_list_by_tsl",
     "[| MINOR_PRIO_TAG (- 11);
         SIDE_GEN_ALGO (is_map_to_sorted_list ?R ?Rk ?Rv ?Rs ?tsl) |]
      ==> (%s. RETURN (?tsl s), map_to_sorted_list ?R)
          : \<langle>?Rk, ?Rv\<rangle>?Rs \<rightarrow>
            \<langle>\<langle>?Rk \<times>\<^sub>r
                              ?Rv\<rangle>list_rel\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 25, template_hole 24),
              template_app
               (template_hole 23,
                template_app
                 (template_hole 22,
                  template_app
                   (template_hole 21,
                    template_app
                     (template_hole 21,
                      template_app (template_hole 20, template_hole 19))))))
            ),
        template_predicate
         (
            template_app
             (template_hole 18,
              template_app
               (template_hole 17,
                template_app
                 (template_app
                   (template_app
                     (template_app
                       (template_app (template_hole 16, template_var 4),
                        template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 15,
               template_app
                (template_app (template_hole 14, t_empty),
                 template_app (template_hole 12, template_var 4))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_var 1),
                         template_var 3)),
                     template_var 2))),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_hole 0),
                         template_var 3)),
                     template_var 2)))))
           ))),
    ("SetIteratorOperations.set_iterator_genord_image_correct",
     "[| set_iterator_genord ?it ?S ?R; inj_on ?g ?S;
         !!x y. [| x : ?S; y : ?S; ?R x y |] ==> ?R' (?g x) (?g y) |]
      ==> set_iterator_genord (set_iterator_image ?g ?it) (?g ` ?S) ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_var 0)
           ))),
    ("SetIteratorGA.iterator_to_ordered_iterator_mergesort_correct",
     "[| !!x y. ?R x y | ?R y x; !!x y z. [| ?R x y; ?R y z |] ==> ?R x z;
         set_iterator ?it ?S0.0 |]
      ==> set_iterator_genord
           (iterator_to_ordered_iterator_mergesort ?R ?it) ?S0.0 ?R",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0),
             template_var 2)
           ))),
    ("SetIteratorGA.iterator_to_ordered_iterator_quicksort_correct",
     "[| !!x y. ?R x y | ?R y x; !!x y z. [| ?R x y; ?R y z |] ==> ?R x z;
         set_iterator ?it ?S0.0 |]
      ==> set_iterator_genord
           (iterator_to_ordered_iterator_quicksort ?R ?it) ?S0.0 ?R",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app
                  (template_app (template_hole 0, template_var 2),
                   template_var 1)),
               template_var 0),
             template_var 2)
           ))),
    ("Gen_Iterator.map_to_list_by_tsl",
     "[| PRIO_TAG_GEN_ALGO;
         SIDE_GEN_ALGO (is_map_to_list ?Rk ?Rv ?Rs ?tsl) |]
      ==> (%s. RETURN (?tsl s), map_to_sorted_list (%_ _. True))
          : \<langle>?Rk, ?Rv\<rangle>?Rs \<rightarrow>
            \<langle>\<langle>?Rk \<times>\<^sub>r
                              ?Rv\<rangle>list_rel\<rangle>nres_rel",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 26, template_hole 25),
              template_app
               (template_hole 24,
                template_app
                 (template_hole 23,
                  template_app
                   (template_hole 22,
                    template_app
                     (template_hole 21,
                      template_app (template_hole 22, template_hole 20))))))
            ),
        template_predicate
         (
            template_app
             (template_hole 19,
              template_app
               (template_hole 18,
                template_app
                 (template_app
                   (template_app
                     (template_app (template_hole 17, template_var 3),
                      template_var 2),
                    template_var 1),
                  template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 16,
               template_app
                (template_app (template_hole 15, t_empty),
                 template_app (template_hole 13, t_empty))),
             template_app
              (template_app
                (template_hole 11,
                 template_app
                  (template_app (template_hole 10, template_hole 9),
                   template_app
                    (template_app
                      (template_hole 8,
                       template_app
                        (template_app (template_hole 7, template_var 1),
                         template_var 3)),
                     template_var 2))),
               template_app
                (template_app (template_hole 6, template_hole 5),
                 template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_app
                    (template_app
                      (template_hole 2,
                       template_app
                        (template_app (template_hole 1, template_hole 0),
                         template_var 3)),
                     template_var 2)))))
           ))),
    ("SetIteratorOperations.set_iterator_genord_union_correct",
     "[| set_iterator_genord ?it_a ?S_a ?R;
         set_iterator_genord ?it_b ?S_b ?R; ?S_a Int ?S_b = {};
         !!a b. [| a : ?S_a; b : ?S_b |] ==> ?R a b |]
      ==> set_iterator_genord (set_iterator_union ?it_a ?it_b)
           (?S_a Un ?S_b) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 0),
          template_hole 4),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2)
           ))),
    ("Gen_Iterator.param_it_to_list",
     "(it_to_list, it_to_list)
      : (?Rs \<rightarrow>
         (?Ra \<rightarrow> bool_rel) \<rightarrow>
         (?Rb \<rightarrow>
          \<langle>?Rb\<rangle>list_rel \<rightarrow>
          \<langle>?Rb\<rangle>list_rel) \<rightarrow>
         \<langle>?Rc\<rangle>list_rel \<rightarrow> ?Rd) \<rightarrow>
        ?Rs \<rightarrow> ?Rd",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 35,
             template_app
              (template_app (template_hole 34, template_hole 33),
               template_hole 32)),
           template_app
            (template_app
              (template_hole 31,
               template_app
                (template_app (template_hole 30, template_hole 29),
                 template_app
                  (template_app
                    (template_hole 28,
                     template_app
                      (template_app (template_hole 27, template_hole 26),
                       template_var 4)),
                   template_app
                    (template_app
                      (template_hole 25,
                       template_app
                        (template_app (template_hole 24, template_hole 23),
                         template_app
                          (template_app
                            (template_hole 22,
                             template_app
                              (template_app
                                (template_hole 21, template_hole 20),
                               template_var 3)),
                           template_hole 19))),
                     template_app
                      (template_app
                        (template_hole 18,
                         template_app
                          (template_app
                            (template_hole 17, template_hole 16),
                           template_app
                            (template_app
                              (template_hole 15,
                               template_app
                                (template_app
                                  (template_hole 14, template_hole 13),
                                 template_var 2)),
                             template_app
                              (template_app
                                (template_hole 12,
                                 template_app
                                  (template_app
                                    (template_hole 11, template_hole 10),
                                   template_app
                                    (template_app
(template_hole 9, template_hole 8),
                                     template_var 2))),
                               template_app
                                (template_app
                                  (template_hole 9, template_hole 8),
                                 template_var 2))))),
                       template_app
                        (template_app
                          (template_hole 7,
                           template_app
                            (template_app
                              (template_hole 6, template_hole 5),
                             template_app
                              (template_app
                                (template_hole 4, template_hole 3),
                               template_var 1))),
                         template_var 0)))))),
             template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_hole 0),
                   template_var 4)),
               template_var 0)))
         )),
    ("Gen_Iterator.proper_it_mono_dres_flat",
     "[| proper_it' ?it ?it'; !!kv x. flat_ge (?f kv x) (?f' kv x) |]
      ==> flat_ge
           (?it' ?s (case_dres False False ?c) (%kv s. s >>= ?f kv)
             ?\<sigma>)
           (?it' ?s (case_dres False False ?c) (%kv s. s >>= ?f' kv)
             ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 4, template_hole 3),
               template_app
                (template_app
                  (template_app
                    (template_app (template_var 5, template_var 2),
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_hole 1),
                       template_var 1)),
                   t_empty),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app (template_var 5, template_var 2),
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_hole 1),
                     template_var 1)),
                 t_empty),
               template_var 0))
           ))),
    ("Gen_Iterator.proper_it_mono_dres_dom",
     "[| proper_it' ?it ?it'; !!kv x. ?f kv x <= ?f' kv x |]
      ==> (map_iterator_dom o ?it') ?s (case_dres False False ?c)
           (%kv s. s >>= ?f kv) ?\<sigma>
          <= (map_iterator_dom o ?it') ?s (case_dres False False ?c)
              (%kv s. s >>= ?f' kv) ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 5),
                 template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 1),
                 template_var 1)),
             t_empty),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 4, template_hole 3),
                   template_var 5),
                 template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 2, template_hole 1),
                   template_hole 1),
                 template_var 1)),
             t_empty),
           template_var 0)))),
    ("SetIteratorOperations.map_iterator_genord_dom_correct",
     "[| map_iterator_genord ?it ?m ?R;
         !!k v k' v'.
            [| ?m k = Some v; ?m k' = Some v'; ?R (k, v) (k', v') |]
            ==> ?R' k k' |]
      ==> set_iterator_genord (map_iterator_dom ?it) (dom ?m) ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_app (template_hole 8, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("Gen_Iterator.is_map_to_sorted_listE",
     "[| is_map_to_sorted_list ?ordR ?Rk ?Rv ?Rm ?tsl;
         (?m, ?m') : \<langle>?Rk, ?Rv\<rangle>?Rm;
         !!l'. [| (?tsl ?m, l')
                  : \<langle>?Rk \<times>\<^sub>r ?Rv\<rangle>list_rel;
                  RETURN l'
                  <= it_to_sorted_list (key_rel ?ordR) (map_to_set ?m') |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 17, template_var 7),
                    template_var 6),
                  template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 2),
                  template_var 1)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_var 4),
                    template_var 6)),
                template_var 5))
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("Gen_Iterator.proper_it_mono_dres_dom_flat",
     "[| proper_it' ?it ?it'; !!kv x. flat_ge (?f kv x) (?f' kv x) |]
      ==> flat_ge
           ((map_iterator_dom o ?it') ?s (case_dres False False ?c)
             (%kv s. s >>= ?f kv) ?\<sigma>)
           ((map_iterator_dom o ?it') ?s (case_dres False False ?c)
             (%kv s. s >>= ?f' kv) ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 6, template_hole 5),
               template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app
                        (template_app (template_hole 4, template_hole 3),
                         template_var 5),
                       template_var 2),
                     template_app
                      (template_app
                        (template_app (template_hole 2, template_hole 1),
                         template_hole 1),
                       template_var 1)),
                   t_empty),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app
                    (template_app
                      (template_app (template_hole 4, template_hole 3),
                       template_var 5),
                     template_var 2),
                   template_app
                    (template_app
                      (template_app (template_hole 2, template_hole 1),
                       template_hole 1),
                     template_var 1)),
                 t_empty),
               template_var 0))
           ))),
    ("Gen_Iterator.proper_it_mono_dres_pair",
     "[| proper_it' ?it ?it'; !!k v x. ?f k v x <= ?f' k v x |]
      ==> ?it' ?s (case_dres False False ?c) (%(k, v) s. s >>= ?f k v)
           ?\<sigma>
          <= ?it' ?s (case_dres False False ?c) (%(k, v) s. s >>= ?f' k v)
              ?\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 8, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_inequation
        (less_equals,
         template_app
          (template_app
            (template_app
              (template_app (template_var 5, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 2),
                 template_var 1)),
             template_app (template_hole 1, t_empty)),
           template_var 0),
         template_app
          (template_app
            (template_app
              (template_app (template_var 5, template_var 2),
               template_app
                (template_app
                  (template_app (template_hole 3, template_hole 2),
                   template_hole 2),
                 template_var 1)),
             template_app (template_hole 1, t_empty)),
           template_var 0)))),
    ("Gen_Iterator.proper_it_mono_dres_pair_flat",
     "[| proper_it' ?it ?it'; !!k v x. flat_ge (?f k v x) (?f' k v x) |]
      ==> flat_ge
           (?it' ?s (case_dres False False ?c) (%(k, v) s. s >>= ?f k v)
             ?\<sigma>)
           (?it' ?s (case_dres False False ?c) (%(k, v) s. s >>= ?f' k v)
             ?\<sigma>)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 5, template_hole 4),
               template_app
                (template_app
                  (template_app
                    (template_app (template_var 5, template_var 2),
                     template_app
                      (template_app
                        (template_app (template_hole 3, template_hole 2),
                         template_hole 2),
                       template_var 1)),
                   template_app (template_hole 1, t_empty)),
                 template_var 0)),
             template_app
              (template_app
                (template_app
                  (template_app (template_var 5, template_var 2),
                   template_app
                    (template_app
                      (template_app (template_hole 3, template_hole 2),
                       template_hole 2),
                     template_var 1)),
                 template_app (template_hole 1, t_empty)),
               template_var 0))
           ))),
    ("SetIterator.set_iterator_no_cond_rule_insert_P",
     "[| set_iterator ?it ?S0.0; ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| x : ?S0.0 - S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (insert x S) (?f x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_hole 8),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetIterator.set_iterator_no_cond_rule_P",
     "[| set_iterator ?it ?S0.0; ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| x : S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (S - {x}) (?f x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 4), template_var 2)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("Gen_Iterator.det_fold_sorted_set",
     "[| det_fold_set ?ordR ?c' ?f' ?\<sigma>' ?result;
         is_set_to_sorted_list ?ordR ?Rk ?Rs ?tsl;
         (?s, ?s') : \<langle>?Rk\<rangle>?Rs;
         (?c, ?c') : ?R\<sigma> \<rightarrow> bool_rel;
         (?f, ?f') : ?Rk \<rightarrow> ?R\<sigma> \<rightarrow> ?R\<sigma>;
         (?\<sigma>, ?\<sigma>') : ?R\<sigma> |]
      ==> (foldli (?tsl ?s) ?c ?f ?\<sigma>, ?result ?s') : ?R\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 21, template_var 13),
                    template_var 12),
                  template_var 11),
                template_var 10),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 20, template_var 13),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 17, template_var 7),
                template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 3),
                  template_var 12)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_hole 12),
                    template_var 2)),
                template_hole 11))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 11)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_var 8)),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 2)),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 10)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 0,
                           template_app (template_var 6, template_var 5)),
                         template_var 3),
                       template_var 1),
                     template_var 0)),
                 template_app (template_var 9, template_var 4))),
             template_var 2)
           ))),
    ("Gen_Iterator.det_fold_set",
     "[| det_fold_set (%_ _. True) ?c' ?f' ?\<sigma>' ?result;
         is_set_to_list ?Rk ?Rs ?tsl; (?s, ?s') : \<langle>?Rk\<rangle>?Rs;
         (?c, ?c') : ?R\<sigma> \<rightarrow> bool_rel;
         (?f, ?f') : ?Rk \<rightarrow> ?R\<sigma> \<rightarrow> ?R\<sigma>;
         (?\<sigma>, ?\<sigma>') : ?R\<sigma> |]
      ==> (foldli (?tsl ?s) ?c ?f ?\<sigma>, ?result ?s') : ?R\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 22, t_empty),
                    template_var 12),
                  template_var 11),
                template_var 10),
              template_var 9)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 5),
                  template_var 4)),
              template_app
               (template_app (template_hole 17, template_var 7),
                template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 16,
                template_app
                 (template_app (template_hole 15, template_var 3),
                  template_var 12)),
              template_app
               (template_app
                 (template_hole 14,
                  template_app
                   (template_app (template_hole 13, template_hole 12),
                    template_var 2)),
                template_hole 11))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 10,
                template_app
                 (template_app (template_hole 9, template_var 1),
                  template_var 11)),
              template_app
               (template_app
                 (template_hole 8,
                  template_app
                   (template_app (template_hole 7, template_hole 6),
                    template_var 8)),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 2)),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 10)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 0,
                           template_app (template_var 6, template_var 5)),
                         template_var 3),
                       template_var 1),
                     template_var 0)),
                 template_app (template_var 9, template_var 4))),
             template_var 2)
           ))),
    ("SetIterator.map_iterator_no_cond_rule_P",
     "[| map_iterator ?it ?m; ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| k : it; ?m k = Some v; it <= dom ?m; ?I it \<sigma> |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_app (template_hole 14, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 3,
                template_app (template_hole 13, template_var 4)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetIteratorOperations.map_iterator_genord_dom_filter_correct",
     "[| map_iterator_genord ?it ?m ?R;
         !!k1 v1 k2 v2.
            [| ?m k1 = Some v1; ?P (k1, v1); ?m k2 = Some v2; ?P (k2, v2);
               ?R (k1, v1) (k2, v2) |]
            ==> ?R' k1 k2 |]
      ==> set_iterator_genord (map_iterator_dom_filter ?P ?it)
           {k. EX v. ?m k = Some v & ?P (k, v)} ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 4),
                template_app (template_hole 10, template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 4)),
               template_app (template_hole 2, t_empty)),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_genord_image_filter_correct",
     "[| set_iterator_genord ?it ?S ?R; inj_on ?g (?S Int dom ?g);
         !!x y x' y'.
            [| x : ?S; ?g x = Some x'; y : ?S; ?g y = Some y'; ?R x y |]
            ==> ?R' x' y' |]
      ==> set_iterator_genord (set_iterator_image_filter ?g ?it)
           {y. EX x. x : ?S & ?g x = Some y} ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_var 3),
                template_app (template_hole 10, template_var 1)))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 4)),
               template_app (template_hole 2, t_empty)),
             template_var 0)
           ))),
    ("SetIterator.map_iterator_no_cond_rule_insert_P",
     "[| map_iterator ?it ?m; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| k : dom ?m - it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma> |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_app (template_hole 14, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_hole 13),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("Gen_Iterator.det_fold_sorted_map",
     "[| det_fold_map ?ordR ?c' ?f' ?\<sigma>' ?result;
         is_map_to_sorted_list ?ordR ?Rk ?Rv ?Rm ?tsl;
         (?m, ?m') : \<langle>?Rk, ?Rv\<rangle>?Rm;
         (?c, ?c') : ?R\<sigma> \<rightarrow> bool_rel;
         (?f, ?f')
         : ?Rk \<times>\<^sub>r ?Rv \<rightarrow>
           ?R\<sigma> \<rightarrow> ?R\<sigma>;
         (?\<sigma>, ?\<sigma>') : ?R\<sigma> |]
      ==> (foldli (?tsl ?m) ?c ?f ?\<sigma>, ?result ?m') : ?R\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 25, template_var 14),
                    template_var 13),
                  template_var 12),
                template_var 11),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 24, template_var 14),
                    template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_app (template_hole 20, template_var 7),
                    template_var 9)),
                template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 3),
                  template_var 13)),
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app (template_hole 16, template_hole 15),
                    template_var 2)),
                template_hole 14))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_var 12)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_hole 6),
                          template_var 9)),
                      template_var 8))),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 2)),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 11)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 0,
                           template_app (template_var 6, template_var 5)),
                         template_var 3),
                       template_var 1),
                     template_var 0)),
                 template_app (template_var 10, template_var 4))),
             template_var 2)
           ))),
    ("Gen_Iterator.det_fold_map",
     "[| det_fold_map (%_ _. True) ?c' ?f' ?\<sigma>' ?result;
         is_map_to_list ?Rk ?Rv ?Rm ?tsl;
         (?m, ?m') : \<langle>?Rk, ?Rv\<rangle>?Rm;
         (?c, ?c') : ?R\<sigma> \<rightarrow> bool_rel;
         (?f, ?f')
         : ?Rk \<times>\<^sub>r ?Rv \<rightarrow>
           ?R\<sigma> \<rightarrow> ?R\<sigma>;
         (?\<sigma>, ?\<sigma>') : ?R\<sigma> |]
      ==> (foldli (?tsl ?m) ?c ?f ?\<sigma>, ?result ?m') : ?R\<sigma>",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 26, t_empty),
                    template_var 13),
                  template_var 12),
                template_var 11),
              template_var 10)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 24, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 23,
                template_app
                 (template_app (template_hole 22, template_var 5),
                  template_var 4)),
              template_app
               (template_app
                 (template_hole 21,
                  template_app
                   (template_app (template_hole 20, template_var 7),
                    template_var 9)),
                template_var 8))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 19,
                template_app
                 (template_app (template_hole 18, template_var 3),
                  template_var 13)),
              template_app
               (template_app
                 (template_hole 17,
                  template_app
                   (template_app (template_hole 16, template_hole 15),
                    template_var 2)),
                template_hole 14))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 13,
                template_app
                 (template_app (template_hole 12, template_var 1),
                  template_var 12)),
              template_app
               (template_app
                 (template_hole 11,
                  template_app
                   (template_app (template_hole 10, template_hole 9),
                    template_app
                     (template_app
                       (template_hole 8,
                        template_app
                         (template_app (template_hole 7, template_hole 6),
                          template_var 9)),
                      template_var 8))),
                template_app
                 (template_app
                   (template_hole 5,
                    template_app
                     (template_app (template_hole 4, template_hole 3),
                      template_var 2)),
                  template_var 2)))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_hole 2,
                template_app
                 (template_app (template_hole 1, template_var 0),
                  template_var 11)),
              template_var 2)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app
                  (template_hole 1,
                   template_app
                    (template_app
                      (template_app
                        (template_app
                          (template_hole 0,
                           template_app (template_var 6, template_var 5)),
                         template_var 3),
                       template_var 1),
                     template_var 0)),
                 template_app (template_var 10, template_var 4))),
             template_var 2)
           ))),
    ("SetIterator.set_iterator_rule_insert_P",
     "[| set_iterator ?it ?S0.0; ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; x : ?S0.0 - S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (insert x S) (?f x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= ?S0.0; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 9),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.set_iterator_rule_P",
     "[| set_iterator ?it ?S0.0; ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; x : S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (S - {x}) (?f x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= {}; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 5), template_var 3)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.map_iterator_rule_P",
     "[| map_iterator ?it ?m; ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma> |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= {}; ~ ?c \<sigma>; ?I it \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 6),
              template_app (template_hole 15, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 4,
                template_app (template_hole 14, template_var 5)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.map_iterator_rule_insert_P",
     "[| map_iterator ?it ?m; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : dom ?m - it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma> |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= dom ?m; ~ ?c \<sigma>; ?I it \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 6),
              template_app (template_hole 15, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 14),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIteratorOperations.map_iterator_genord_product_correct",
     "[| map_iterator_genord ?it_a ?m ?R_a;
         !!k v.
            ?m k = Some v ==>
            set_iterator_genord (?it_b v) (?S_b v) (?R_b v);
         !!k v u k' v' u'.
            [| ?m k = Some v; u : ?S_b v; ?m k' = Some v'; u' : ?S_b v';
               if k = k' then ?R_b v u u' else ?R_a (k, v) (k', v') |]
            ==> ?R_ab (k, u) (k', u') |]
      ==> set_iterator_genord (map_iterator_product ?it_a ?it_b)
           {(k, e). EX v. ?m k = Some v & e : ?S_b v} ?R_ab",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_var 6),
                template_app (template_hole 17, template_var 5)),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 6),
                   template_var 3)),
               template_app
                (template_hole 3, template_app (template_hole 2, t_empty))),
             template_var 0)
           ))),
    ("SetIterator.map_iterator_genord_rule_P",
     "[| map_iterator_genord ?it ?m ?R; ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma>;
               ALL k' v'.
                  k' : it - {k} & ?m k' = Some v' --> ?R (k, v) (k', v');
               ALL k' v'.
                  k' ~: it & ?m k' = Some v' --> ?R (k', v') (k, v) |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= {}; ~ ?c \<sigma>; ?I it \<sigma>;
               ALL k v k' v'.
                  k ~: it & ?m k = Some v & k' : it & ?m k' = Some v' -->
                  ?R (k, v) (k', v') |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 7),
                template_app (template_hole 19, template_var 6)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 4,
                template_app (template_hole 18, template_var 6)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.map_iterator_genord_rule_insert_P",
     "[| map_iterator_genord ?it ?m ?R; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : dom ?m - it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma>;
               ALL k' v'.
                  k' : dom ?m - it - {k} & ?m k' = Some v' -->
                  ?R (k, v) (k', v');
               ALL k' v'.
                  k' : it & ?m k' = Some v' --> ?R (k', v') (k, v) |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= dom ?m; ~ ?c \<sigma>; ?I it \<sigma>;
               ALL k v k' v'.
                  k : it & ?m k = Some v & k' ~: it & ?m k' = Some v' -->
                  ?R (k, v) (k', v') |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 7),
                template_app (template_hole 19, template_var 6)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 18),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 2),
                 template_var 1),
               template_var 3))
           )))]:
   (string * thm * template) list
### theory "Draft.IteratorTemplates"
### 0.565s elapsed time, 0.741s cpu time, 0.083s GC time
val it = (): unit
