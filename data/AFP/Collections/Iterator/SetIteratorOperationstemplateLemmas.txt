   [("SetIteratorOperations.set_iterator_genord_emp_correct",
     "set_iterator_genord set_iterator_emp {} ?R",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0),
           template_var 0)
         )),
    ("SetIteratorOperations.set_iterator_union_emp",
     "set_iterator_union set_iterator_emp ?it = ?it",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("SetIteratorOperations.set_iterator_union_emp",
     "set_iterator_union ?it set_iterator_emp = ?it",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("SetIteratorOperations.set_iterator_sng_correct",
     "set_iterator (set_iterator_sng ?x) {?x}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("SetIteratorOperations.set_iterator_sng_foldli_conv",
     "set_iterator_sng ?x = foldli [?x]",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("SetIteratorOperations.set_iterator_genord_sng_correct",
     "set_iterator_genord (set_iterator_sng ?x) {?x} ?R",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)
         )),
    ("SetIteratorOperations.map_iterator_dom_foldli_conv",
     "map_iterator_dom (foldli ?kvs) = foldli (map fst ?kvs)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_filter_foldli_conv",
     "set_iterator_filter ?P (foldli ?xs) = foldli (filter ?P ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_image_foldli_conv",
     "set_iterator_image ?g (foldli ?xs) = foldli (map ?g ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_image_filter_foldli_conv",
     "set_iterator_image_filter ?g (foldli ?xs) =
      foldli (List.map_filter ?g ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_foldli_correct",
     "distinct ?xs ==> set_iterator (foldli ?xs) (set ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SetIteratorOperations.set_iterator_foldri_correct",
     "distinct ?xs ==> set_iterator (foldri ?xs) (set ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SetIteratorOperations.set_iterator_union_foldli_conv",
     "set_iterator_union (foldli ?as) (foldli ?bs) = foldli (?as @ ?bs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIteratorOperations.map_iterator_dom_correct",
     "map_iterator ?it ?m ==> set_iterator (map_iterator_dom ?it) (dom ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SetIteratorOperations.map_iterator_foldli_correct",
     "distinct (map fst ?xs) ==> map_iterator (foldli ?xs) (map_of ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SetIteratorOperations.map_iterator_foldri_correct",
     "distinct (map fst ?xs) ==> map_iterator (foldri ?xs) (map_of ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SetIteratorOperations.map_iterator_key_filter_foldli_conv",
     "map_iterator_key_filter ?P (foldli ?kvs) =
      foldli (filter (%(k, v). ?P k) ?kvs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_genord_foldli_correct",
     "[| distinct ?xs; sorted_wrt ?R ?xs |]
      ==> set_iterator_genord (foldli ?xs) (set ?xs) ?R",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_genord_foldri_correct",
     "[| distinct ?xs; sorted_wrt ?R (rev ?xs) |]
      ==> set_iterator_genord (foldri ?xs) (set ?xs) ?R",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_filter_correct",
     "set_iterator ?it ?S ==>
      set_iterator (set_iterator_filter ?P ?it) {x: ?S. ?P x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 2)),
             template_app (template_hole 2, t_empty))
           ))),
    ("SetIteratorOperations.map_iterator_key_filter_correct",
     "map_iterator ?it ?m ==>
      map_iterator (map_iterator_key_filter ?P ?it) (?m |` {k. ?P k})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, t_empty))))
           ))),
    ("SetIteratorOperations.map_iterator_genord_foldli_correct",
     "[| distinct (map fst ?xs); sorted_wrt ?R ?xs |]
      ==> map_iterator_genord (foldli ?xs) (map_of ?xs) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_genord_filter_correct",
     "set_iterator_genord ?it ?S ?R ==>
      set_iterator_genord (set_iterator_filter ?P ?it) {x: ?S. ?P x} ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 3)),
               template_app (template_hole 2, t_empty)),
             template_var 1)
           ))),
    ("SetIteratorOperations.map_iterator_genord_key_filter_correct",
     "map_iterator_genord ?it ?m ?R ==>
      map_iterator_genord (map_iterator_key_filter ?P ?it) (?m |` {k. ?P k})
       ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 3)),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, t_empty)))),
             template_var 1)
           ))),
    ("SetIteratorOperations.map_iterator_genord_foldri_correct",
     "[| distinct (map fst ?xs); sorted_wrt ?R (rev ?xs) |]
      ==> map_iterator_genord (foldri ?xs) (map_of ?xs) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("SetIteratorOperations.map_iterator_product_foldli_conv",
     "map_iterator_product (foldli ?as) (%a. foldli (?bs a)) =
      foldli (concat (map (%(k, v). map (Pair k) (?bs v)) ?as))",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         t_empty),
       template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_var 1))))),
    ("SetIteratorOperations.set_iterator_product_foldli_conv",
     "set_iterator_product (foldli ?as) (%a. foldli (?bs a)) =
      foldli (concat (map (%a. map (Pair a) (?bs a)) ?as))",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         t_empty),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1))))),
    ("SetIteratorOperations.set_iterator_image_correct",
     "[| set_iterator ?it ?S; inj_on ?g ?S; ?S' = ?g ` ?S |]
      ==> set_iterator (set_iterator_image ?g ?it) ?S'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_var 0)
           ))),
    ("SetIteratorOperations.map_iterator_dom_filter_correct",
     "map_iterator ?it ?m ==>
      set_iterator (map_iterator_dom_filter ?P ?it)
       {k. EX v. ?m k = Some v & ?P (k, v)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 2)),
             template_app (template_hole 5, t_empty))
           ))),
    ("SetIteratorOperations.set_iterator_union_correct",
     "[| set_iterator ?it_a ?S_a; set_iterator ?it_b ?S_b;
         ?S_a Int ?S_b = {} |]
      ==> set_iterator (set_iterator_union ?it_a ?it_b) (?S_a Un ?S_b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("SetIteratorOperations.set_iterator_product_it_b_cong",
     "[| set_iterator ?it_a ?S_a; !!a. a : ?S_a ==> ?it_b a = ?it_b' a |]
      ==> set_iterator_product ?it_a ?it_b =
          set_iterator_product ?it_a ?it_b'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_product_correct",
     "[| set_iterator ?it_a ?S_a;
         !!a. a : ?S_a ==> set_iterator (?it_b a) (?S_b a) |]
      ==> set_iterator (set_iterator_product ?it_a ?it_b)
           (Sigma ?S_a ?S_b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("SetIteratorOperations.set_iterator_image_filter_correct",
     "[| set_iterator ?it ?S; inj_on ?g (?S Int dom ?g) |]
      ==> set_iterator (set_iterator_image_filter ?g ?it)
           {y. EX x. x : ?S & ?g x = Some y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app (template_hole 8, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 2)),
             template_app (template_hole 5, t_empty))
           ))),
    ("SetIteratorOperations.set_iterator_genord_product_correct",
     "[| set_iterator_genord ?it_a ?S_a ?R_a;
         !!a. a : ?S_a ==>
              set_iterator_genord (?it_b a) (?S_b a) (?R_b a) |]
      ==> set_iterator_genord (set_iterator_product ?it_a ?it_b)
           (Sigma ?S_a ?S_b) (set_iterator_product_order ?R_a ?R_b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("SetIteratorOperations.map_iterator_product_correct",
     "[| map_iterator ?it_a ?m;
         !!k v. ?m k = Some v ==> set_iterator (?it_b v) (?S_b v) |]
      ==> set_iterator (map_iterator_product ?it_a ?it_b)
           {(k, e). EX v. ?m k = Some v & e : ?S_b v}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app (template_hole 12, template_var 2))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 1)),
             template_app
              (template_hole 4, template_app (template_hole 3, t_empty)))
           ))),
    ("SetIteratorOperations.set_iterator_genord_image_correct",
     "[| set_iterator_genord ?it ?S ?R; inj_on ?g ?S;
         !!x y. [| x : ?S; y : ?S; ?R x y |] ==> ?R' (?g x) (?g y) |]
      ==> set_iterator_genord (set_iterator_image ?g ?it) (?g ` ?S) ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_genord_union_correct",
     "[| set_iterator_genord ?it_a ?S_a ?R;
         set_iterator_genord ?it_b ?S_b ?R; ?S_a Int ?S_b = {};
         !!a b. [| a : ?S_a; b : ?S_b |] ==> ?R a b |]
      ==> set_iterator_genord (set_iterator_union ?it_a ?it_b)
           (?S_a Un ?S_b) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 0),
          template_hole 4),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2)
           ))),
    ("SetIteratorOperations.map_iterator_genord_dom_correct",
     "[| map_iterator_genord ?it ?m ?R;
         !!k v k' v'.
            [| ?m k = Some v; ?m k' = Some v'; ?R (k, v) (k', v') |]
            ==> ?R' k k' |]
      ==> set_iterator_genord (map_iterator_dom ?it) (dom ?m) ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_app (template_hole 8, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("SetIteratorOperations.map_iterator_genord_dom_filter_correct",
     "[| map_iterator_genord ?it ?m ?R;
         !!k1 v1 k2 v2.
            [| ?m k1 = Some v1; ?P (k1, v1); ?m k2 = Some v2; ?P (k2, v2);
               ?R (k1, v1) (k2, v2) |]
            ==> ?R' k1 k2 |]
      ==> set_iterator_genord (map_iterator_dom_filter ?P ?it)
           {k. EX v. ?m k = Some v & ?P (k, v)} ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 4),
                template_app (template_hole 10, template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 4)),
               template_app (template_hole 2, t_empty)),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_genord_image_filter_correct",
     "[| set_iterator_genord ?it ?S ?R; inj_on ?g (?S Int dom ?g);
         !!x y x' y'.
            [| x : ?S; ?g x = Some x'; y : ?S; ?g y = Some y'; ?R x y |]
            ==> ?R' x' y' |]
      ==> set_iterator_genord (set_iterator_image_filter ?g ?it)
           {y. EX x. x : ?S & ?g x = Some y} ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_var 3),
                template_app (template_hole 10, template_var 1)))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 4)),
               template_app (template_hole 2, t_empty)),
             template_var 0)
           ))),
    ("SetIteratorOperations.map_iterator_genord_product_correct",
     "[| map_iterator_genord ?it_a ?m ?R_a;
         !!k v.
            ?m k = Some v ==>
            set_iterator_genord (?it_b v) (?S_b v) (?R_b v);
         !!k v u k' v' u'.
            [| ?m k = Some v; u : ?S_b v; ?m k' = Some v'; u' : ?S_b v';
               if k = k' then ?R_b v u u' else ?R_a (k, v) (k', v') |]
            ==> ?R_ab (k, u) (k', u') |]
      ==> set_iterator_genord (map_iterator_product ?it_a ?it_b)
           {(k, e). EX v. ?m k = Some v & e : ?S_b v} ?R_ab",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_var 6),
                template_app (template_hole 17, template_var 5)),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 6),
                   template_var 3)),
               template_app
                (template_hole 3, template_app (template_hole 2, t_empty))),
             template_var 0)
           )))]
