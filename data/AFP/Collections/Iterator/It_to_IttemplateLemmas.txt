   [("It_to_It.pi_it_to_it", "proper_it (it_to_it ?I) (it_to_it ?I)",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 2,
             template_app (template_hole 1, template_var 0)),
           template_app (template_hole 0, template_var 0))
         )),
    ("It_to_It.it_to_it_fold", "proper_it ?it ?it' ==> it_to_it ?it = ?it'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app (template_hole 0, template_var 1), template_var 0))),
    ("It_to_It.it_to_it_linord_correct",
     "set_iterator_linord ?it ?S ==> set_iterator_linord (it_to_it ?it) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("It_to_It.it_to_it_rev_linord_correct",
     "set_iterator_rev_linord ?it ?S ==>
      set_iterator_rev_linord (it_to_it ?it) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("It_to_It.it_to_it_correct",
     "set_iterator ?it ?S ==> set_iterator (it_to_it ?it) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("It_to_It.it_to_it_fold'",
     "proper_it' ?it ?it' ==> it_to_it (?it ?s) = ?it' ?s",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 2, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app
          (template_hole 0, template_app (template_var 2, template_var 0)),
         template_app (template_var 1, template_var 0)))),
    ("It_to_It.it_to_it_map_linord_correct",
     "map_iterator_linord ?it ?S ==> map_iterator_linord (it_to_it ?it) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("It_to_It.it_to_it_map_rev_linord_correct",
     "map_iterator_rev_linord ?it ?S ==>
      map_iterator_rev_linord (it_to_it ?it) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("It_to_It.it_to_it_map_correct",
     "map_iterator ?it ?S ==> map_iterator (it_to_it ?it) ?S",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_app (template_hole 2, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 1)),
             template_app (template_hole 2, template_var 0))
           ))),
    ("It_to_It.it_to_it_genord_correct",
     "set_iterator_genord ?it ?S ?R ==>
      set_iterator_genord (it_to_it ?it) ?S ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 2, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_var 1),
             template_var 0)
           ))),
    ("It_to_It.it_to_it_map_genord_correct",
     "map_iterator_genord ?it ?S ?R ==>
      map_iterator_genord (it_to_it ?it) ?S ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 3, template_var 2),
                template_app (template_hole 2, template_var 1)),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 2)),
               template_app (template_hole 2, template_var 1)),
             template_var 0)
           ))),
    ("It_to_It.proper_it_unfold",
     "proper_it ?it ?it' ==>
      ?it' = foldli (?it (%_. True) (%x l. l @ [x]) [])",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_var 0,
         template_app
          (template_hole 4,
           template_app
            (template_app (template_app (template_var 1, t_empty), t_empty),
             template_hole 0))))),
    ("It_to_It.proper_it_fold",
     "proper_it ?it ?it' ==>
      foldli (?it (%_. True) (%x l. l @ [x]) []) = ?it'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 1),
              template_var 0)
            )],
       template_equation
        (template_app
          (template_hole 4,
           template_app
            (template_app (template_app (template_var 1, t_empty), t_empty),
             template_hole 0)),
         template_var 0))),
    ("It_to_It.it_to_it_map_fold",
     "proper_it ?it ?it' ==>
      it_to_it (%c f. ?it c (f o ?f')) = (%c f. ?it' c (f o ?f'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_equation
        (template_app (template_hole 2, t_empty), t_empty))),
    ("It_to_It.it_to_it_map_fold'",
     "proper_it' ?it ?it' ==>
      it_to_it (%c f. ?it ?s c (f o ?f')) = (%c f. ?it' ?s c (f o ?f'))",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 3),
              template_var 2)
            )],
       template_equation
        (template_app (template_hole 2, t_empty), t_empty)))]
