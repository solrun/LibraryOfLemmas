Loading theory "Draft.SetIterator" (required by "Draft.SetIteratorOperationsTemplates" via "Draft.SetIteratorOperations")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SetIteratorOperationsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SetIteratorOperationsTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SetIteratorOperationsTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.166s elapsed time, 0.673s cpu time, 0.046s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SetIteratorOperationsTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Set_Algebras"
### 0.315s elapsed time, 1.244s cpu time, 0.133s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SetIteratorOperationsTemplates" via "Draft.ExtrEqs")
### theory "HOL-Library.Nat_Bijection"
### 0.347s elapsed time, 1.372s cpu time, 0.133s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SetIteratorOperationsTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  cycle :: "'a list => 'a stream"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
Found termination order: "size <*mlex*> {}"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  flat :: "'a list stream => 'a stream"
### theory "Draft.SetIterator"
### 1.339s elapsed time, 5.033s cpu time, 0.986s GC time
Loading theory "Draft.SetIteratorOperations" (required by "Draft.SetIteratorOperationsTemplates")
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.058s elapsed time, 3.904s cpu time, 0.908s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.143s elapsed time, 4.131s cpu time, 0.908s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 2.188s elapsed time, 6.746s cpu time, 1.175s GC time
Loading theory "Draft.Templates" (required by "Draft.SetIteratorOperationsTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.069s elapsed time, 0.154s cpu time, 0.050s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SetIteratorOperationsTemplates")
### theory "Draft.SetIteratorOperations"
### 1.605s elapsed time, 3.575s cpu time, 0.372s GC time
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.556s elapsed time, 1.138s cpu time, 0.087s GC time
Loading theory "Draft.SetIteratorOperationsTemplates"
val templateLemmas =
   [("SetIteratorOperations.set_iterator_genord_emp_correct",
     "set_iterator_genord set_iterator_emp {} ?R",
     template_predicate
      (
         template_app
          (template_app
            (template_app (template_hole 2, template_hole 1),
             template_hole 0),
           template_var 0)
         )),
    ("SetIteratorOperations.set_iterator_union_emp",
     "set_iterator_union set_iterator_emp ?it = ?it",
     template_equation
      (template_app
        (template_app (template_hole 1, template_hole 0), template_var 0),
       template_var 0)),
    ("SetIteratorOperations.set_iterator_union_emp",
     "set_iterator_union ?it set_iterator_emp = ?it",
     template_equation
      (template_app
        (template_app (template_hole 1, template_var 0), template_hole 0),
       template_var 0)),
    ("SetIteratorOperations.set_iterator_sng_correct",
     "set_iterator (set_iterator_sng ?x) {?x}",
     template_predicate
      (
         template_app
          (template_app
            (template_hole 3,
             template_app (template_hole 2, template_var 0)),
           template_app
            (template_app (template_hole 1, template_var 0),
             template_hole 0))
         )),
    ("SetIteratorOperations.set_iterator_sng_foldli_conv",
     "set_iterator_sng ?x = foldli [?x]",
     template_equation
      (template_app (template_hole 3, template_var 0),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_var 0),
           template_hole 0)))),
    ("SetIteratorOperations.set_iterator_genord_sng_correct",
     "set_iterator_genord (set_iterator_sng ?x) {?x} ?R",
     template_predicate
      (
         template_app
          (template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 1)),
             template_app
              (template_app (template_hole 1, template_var 1),
               template_hole 0)),
           template_var 0)
         )),
    ("SetIteratorOperations.map_iterator_dom_foldli_conv",
     "map_iterator_dom (foldli ?kvs) = foldli (map fst ?kvs)",
     template_equation
      (template_app
        (template_hole 4, template_app (template_hole 3, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app (template_hole 1, template_hole 0),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_filter_foldli_conv",
     "set_iterator_filter ?P (foldli ?xs) = foldli (filter ?P ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 2, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_image_foldli_conv",
     "set_iterator_image ?g (foldli ?xs) = foldli (map ?g ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_image_filter_foldli_conv",
     "set_iterator_image_filter ?g (foldli ?xs) =
      foldli (List.map_filter ?g ?xs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_foldli_correct",
     "distinct ?xs ==> set_iterator (foldli ?xs) (set ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SetIteratorOperations.set_iterator_foldri_correct",
     "distinct ?xs ==> set_iterator (foldri ?xs) (set ?xs)",
     template_implication
      ([template_predicate
         (template_app (template_hole 3, template_var 0))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 0)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SetIteratorOperations.set_iterator_union_foldli_conv",
     "set_iterator_union (foldli ?as) (foldli ?bs) = foldli (?as @ ?bs)",
     template_equation
      (template_app
        (template_app
          (template_hole 2, template_app (template_hole 1, template_var 1)),
         template_app (template_hole 1, template_var 0)),
       template_app
        (template_hole 1,
         template_app
          (template_app (template_hole 0, template_var 1),
           template_var 0)))),
    ("SetIteratorOperations.map_iterator_dom_correct",
     "map_iterator ?it ?m ==> set_iterator (map_iterator_dom ?it) (dom ?m)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_app (template_hole 3, template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app (template_hole 1, template_var 1)),
             template_app (template_hole 0, template_var 0))
           ))),
    ("SetIteratorOperations.map_iterator_foldli_correct",
     "distinct (map fst ?xs) ==> map_iterator (foldli ?xs) (map_of ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SetIteratorOperations.map_iterator_foldri_correct",
     "distinct (map fst ?xs) ==> map_iterator (foldri ?xs) (map_of ?xs)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 6,
              template_app
               (template_app (template_hole 5, template_hole 4),
                template_var 0))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 3,
               template_app (template_hole 2, template_var 0)),
             template_app
              (template_hole 1,
               template_app (template_hole 0, template_var 0)))
           ))),
    ("SetIteratorOperations.map_iterator_key_filter_foldli_conv",
     "map_iterator_key_filter ?P (foldli ?kvs) =
      foldli (filter (%(k, v). ?P k) ?kvs)",
     template_equation
      (template_app
        (template_app (template_hole 3, template_var 1),
         template_app (template_hole 2, template_var 0)),
       template_app
        (template_hole 2,
         template_app
          (template_app
            (template_hole 1, template_app (template_hole 0, t_empty)),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_genord_foldli_correct",
     "[| distinct ?xs; sorted_wrt ?R ?xs |]
      ==> set_iterator_genord (foldli ?xs) (set ?xs) ?R",
     template_implication
      ([template_predicate (template_app (template_hole 4, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_genord_foldri_correct",
     "[| distinct ?xs; sorted_wrt ?R (rev ?xs) |]
      ==> set_iterator_genord (foldri ?xs) (set ?xs) ?R",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 1)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 1)),
               template_app (template_hole 0, template_var 1)),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_filter_correct",
     "set_iterator ?it ?S ==>
      set_iterator (set_iterator_filter ?P ?it) {x: ?S. ?P x}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 3, template_var 0),
                 template_var 2)),
             template_app (template_hole 2, t_empty))
           ))),
    ("SetIteratorOperations.map_iterator_key_filter_correct",
     "map_iterator ?it ?m ==>
      map_iterator (map_iterator_key_filter ?P ?it) (?m |` {k. ?P k})",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 2),
              template_app (template_hole 3, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 4,
               template_app
                (template_app (template_hole 2, template_var 0),
                 template_var 2)),
             template_app
              (template_hole 3,
               template_app
                (template_app (template_hole 1, template_var 1),
                 template_app (template_hole 0, t_empty))))
           ))),
    ("SetIteratorOperations.map_iterator_genord_foldli_correct",
     "[| distinct (map fst ?xs); sorted_wrt ?R ?xs |]
      ==> map_iterator_genord (foldli ?xs) (map_of ?xs) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 7,
              template_app
               (template_app (template_hole 6, template_hole 5),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 0),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_genord_filter_correct",
     "set_iterator_genord ?it ?S ?R ==>
      set_iterator_genord (set_iterator_filter ?P ?it) {x: ?S. ?P x} ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_var 2),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 0),
                   template_var 3)),
               template_app (template_hole 2, t_empty)),
             template_var 1)
           ))),
    ("SetIteratorOperations.map_iterator_genord_key_filter_correct",
     "map_iterator_genord ?it ?m ?R ==>
      map_iterator_genord (map_iterator_key_filter ?P ?it) (?m |` {k. ?P k})
       ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 4, template_var 3),
                template_app (template_hole 3, template_var 2)),
              template_var 1)
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 2, template_var 0),
                   template_var 3)),
               template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 1, template_var 2),
                   template_app (template_hole 0, t_empty)))),
             template_var 1)
           ))),
    ("SetIteratorOperations.map_iterator_genord_foldri_correct",
     "[| distinct (map fst ?xs); sorted_wrt ?R (rev ?xs) |]
      ==> map_iterator_genord (foldri ?xs) (map_of ?xs) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 1))
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 0),
              template_app (template_hole 4, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app (template_hole 2, template_var 1)),
               template_app
                (template_hole 1,
                 template_app (template_hole 0, template_var 1))),
             template_var 0)
           ))),
    ("SetIteratorOperations.map_iterator_product_foldli_conv",
     "map_iterator_product (foldli ?as) (%a. foldli (?bs a)) =
      foldli (concat (map (%(k, v). map (Pair k) (?bs v)) ?as))",
     template_equation
      (template_app
        (template_app
          (template_hole 8, template_app (template_hole 7, template_var 1)),
         t_empty),
       template_app
        (template_hole 5,
         template_app
          (template_hole 4,
           template_app
            (template_app
              (template_hole 3, template_app (template_hole 2, t_empty)),
             template_var 1))))),
    ("SetIteratorOperations.set_iterator_product_foldli_conv",
     "set_iterator_product (foldli ?as) (%a. foldli (?bs a)) =
      foldli (concat (map (%a. map (Pair a) (?bs a)) ?as))",
     template_equation
      (template_app
        (template_app
          (template_hole 7, template_app (template_hole 6, template_var 1)),
         t_empty),
       template_app
        (template_hole 4,
         template_app
          (template_hole 3,
           template_app
            (template_app (template_hole 2, t_empty), template_var 1))))),
    ("SetIteratorOperations.set_iterator_image_correct",
     "[| set_iterator ?it ?S; inj_on ?g ?S; ?S' = ?g ` ?S |]
      ==> set_iterator (set_iterator_image ?g ?it) ?S'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 2)
            ),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 2, template_var 1),
            template_var 2))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 1,
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_var 0)
           ))),
    ("SetIteratorOperations.map_iterator_dom_filter_correct",
     "map_iterator ?it ?m ==>
      set_iterator (map_iterator_dom_filter ?P ?it)
       {k. EX v. ?m k = Some v & ?P (k, v)}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 2),
              template_app (template_hole 8, template_var 1))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 2)),
             template_app (template_hole 5, t_empty))
           ))),
    ("SetIteratorOperations.set_iterator_union_correct",
     "[| set_iterator ?it_a ?S_a; set_iterator ?it_b ?S_b;
         ?S_a Int ?S_b = {} |]
      ==> set_iterator (set_iterator_union ?it_a ?it_b) (?S_a Un ?S_b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 0)
            ),
        template_equation
         (template_app
           (template_app (template_hole 3, template_var 2), template_var 0),
          template_hole 2)],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 5,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("SetIteratorOperations.set_iterator_product_it_b_cong",
     "[| set_iterator ?it_a ?S_a; !!a. a : ?S_a ==> ?it_b a = ?it_b' a |]
      ==> set_iterator_product ?it_a ?it_b =
          set_iterator_product ?it_a ?it_b'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 0, template_var 3), template_var 1),
         template_app
          (template_app (template_hole 0, template_var 3),
           template_var 0)))),
    ("SetIteratorOperations.set_iterator_product_correct",
     "[| set_iterator ?it_a ?S_a;
         !!a. a : ?S_a ==> set_iterator (?it_b a) (?S_b a) |]
      ==> set_iterator (set_iterator_product ?it_a ?it_b)
           (Sigma ?S_a ?S_b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 6, template_var 3),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 2,
               template_app
                (template_app (template_hole 1, template_var 3),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 2),
               template_var 0))
           ))),
    ("SetIteratorOperations.set_iterator_image_filter_correct",
     "[| set_iterator ?it ?S; inj_on ?g (?S Int dom ?g) |]
      ==> set_iterator (set_iterator_image_filter ?g ?it)
           {y. EX x. x : ?S & ?g x = Some y}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 11, template_var 2),
              template_var 1)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 0),
              template_app
               (template_app (template_hole 9, template_var 1),
                template_app (template_hole 8, template_var 0)))
            )],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 7,
               template_app
                (template_app (template_hole 6, template_var 0),
                 template_var 2)),
             template_app (template_hole 5, t_empty))
           ))),
    ("SetIteratorOperations.set_iterator_genord_product_correct",
     "[| set_iterator_genord ?it_a ?S_a ?R_a;
         !!a. a : ?S_a ==>
              set_iterator_genord (?it_b a) (?S_b a) (?R_b a) |]
      ==> set_iterator_genord (set_iterator_product ?it_a ?it_b)
           (Sigma ?S_a ?S_b) (set_iterator_product_order ?R_a ?R_b)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 5),
                template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 3,
                 template_app
                  (template_app (template_hole 2, template_var 5),
                   template_var 2)),
               template_app
                (template_app (template_hole 1, template_var 4),
                 template_var 1)),
             template_app
              (template_app (template_hole 0, template_var 3),
               template_var 0))
           ))),
    ("SetIteratorOperations.map_iterator_product_correct",
     "[| map_iterator ?it_a ?m;
         !!k v. ?m k = Some v ==> set_iterator (?it_b v) (?S_b v) |]
      ==> set_iterator (map_iterator_product ?it_a ?it_b)
           {(k, e). EX v. ?m k = Some v & e : ?S_b v}",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 13, template_var 3),
              template_app (template_hole 12, template_var 2))
            ),
        template_predicate (template_app (template_hole 11, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_hole 6,
               template_app
                (template_app (template_hole 5, template_var 3),
                 template_var 1)),
             template_app
              (template_hole 4, template_app (template_hole 3, t_empty)))
           ))),
    ("SetIteratorOperations.set_iterator_genord_image_correct",
     "[| set_iterator_genord ?it ?S ?R; inj_on ?g ?S;
         !!x y. [| x : ?S; y : ?S; ?R x y |] ==> ?R' (?g x) (?g y) |]
      ==> set_iterator_genord (set_iterator_image ?g ?it) (?g ` ?S) ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 6, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 5, template_var 1),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app
                  (template_app (template_hole 1, template_var 1),
                   template_var 4)),
               template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 3)),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_genord_union_correct",
     "[| set_iterator_genord ?it_a ?S_a ?R;
         set_iterator_genord ?it_b ?S_b ?R; ?S_a Int ?S_b = {};
         !!a b. [| a : ?S_a; b : ?S_b |] ==> ?R a b |]
      ==> set_iterator_genord (set_iterator_union ?it_a ?it_b)
           (?S_a Un ?S_b) ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 1),
                template_var 0),
              template_var 2)
            ),
        template_equation
         (template_app
           (template_app (template_hole 5, template_var 3), template_var 0),
          template_hole 4),
        template_predicate (template_app (template_hole 3, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 7,
                 template_app
                  (template_app (template_hole 1, template_var 4),
                   template_var 1)),
               template_app
                (template_app (template_hole 0, template_var 3),
                 template_var 0)),
             template_var 2)
           ))),
    ("SetIteratorOperations.map_iterator_genord_dom_correct",
     "[| map_iterator_genord ?it ?m ?R;
         !!k v k' v'.
            [| ?m k = Some v; ?m k' = Some v'; ?R (k, v) (k', v') |]
            ==> ?R' k k' |]
      ==> set_iterator_genord (map_iterator_dom ?it) (dom ?m) ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 9, template_var 3),
                template_app (template_hole 8, template_var 2)),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 2,
                 template_app (template_hole 1, template_var 3)),
               template_app (template_hole 0, template_var 2)),
             template_var 0)
           ))),
    ("SetIteratorOperations.map_iterator_genord_dom_filter_correct",
     "[| map_iterator_genord ?it ?m ?R;
         !!k1 v1 k2 v2.
            [| ?m k1 = Some v1; ?P (k1, v1); ?m k2 = Some v2; ?P (k2, v2);
               ?R (k1, v1) (k2, v2) |]
            ==> ?R' k1 k2 |]
      ==> set_iterator_genord (map_iterator_dom_filter ?P ?it)
           {k. EX v. ?m k = Some v & ?P (k, v)} ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 4),
                template_app (template_hole 10, template_var 3)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 4)),
               template_app (template_hole 2, t_empty)),
             template_var 0)
           ))),
    ("SetIteratorOperations.set_iterator_genord_image_filter_correct",
     "[| set_iterator_genord ?it ?S ?R; inj_on ?g (?S Int dom ?g);
         !!x y x' y'.
            [| x : ?S; ?g x = Some x'; y : ?S; ?g y = Some y'; ?R x y |]
            ==> ?R' x' y' |]
      ==> set_iterator_genord (set_iterator_image_filter ?g ?it)
           {y. EX x. x : ?S & ?g x = Some y} ?R'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 13, template_var 4),
                template_var 3),
              template_var 2)
            ),
        template_predicate
         (
            template_app
             (template_app (template_hole 12, template_var 1),
              template_app
               (template_app (template_hole 11, template_var 3),
                template_app (template_hole 10, template_var 1)))
            ),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 4,
                 template_app
                  (template_app (template_hole 3, template_var 1),
                   template_var 4)),
               template_app (template_hole 2, t_empty)),
             template_var 0)
           ))),
    ("SetIteratorOperations.map_iterator_genord_product_correct",
     "[| map_iterator_genord ?it_a ?m ?R_a;
         !!k v.
            ?m k = Some v ==>
            set_iterator_genord (?it_b v) (?S_b v) (?R_b v);
         !!k v u k' v' u'.
            [| ?m k = Some v; u : ?S_b v; ?m k' = Some v'; u' : ?S_b v';
               if k = k' then ?R_b v u u' else ?R_a (k, v) (k', v') |]
            ==> ?R_ab (k, u) (k', u') |]
      ==> set_iterator_genord (map_iterator_product ?it_a ?it_b)
           {(k, e). EX v. ?m k = Some v & e : ?S_b v} ?R_ab",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 18, template_var 6),
                template_app (template_hole 17, template_var 5)),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 16, t_empty)),
        template_predicate (template_app (template_hole 16, t_empty))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_hole 5,
                 template_app
                  (template_app (template_hole 4, template_var 6),
                   template_var 3)),
               template_app
                (template_hole 3, template_app (template_hole 2, t_empty))),
             template_var 0)
           )))]:
   (string * thm * template) list
### theory "Draft.SetIteratorOperationsTemplates"
### 0.380s elapsed time, 0.544s cpu time, 0.047s GC time
val it = (): unit
