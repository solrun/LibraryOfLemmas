   [("SetAbstractionIterator.map_to_set_cong",
     "(map_to_set ?m1.0 = map_to_set ?m2.0) = (?m1.0 = ?m2.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("SetAbstractionIterator.set_iterator_abs_genord_trivial_simp",
     "[| ALL x. ?invar x; ALL x. ?\<alpha> x = x |]
      ==> set_iterator_abs_genord ?\<alpha> ?invar = set_iterator_genord",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("SetAbstractionIterator.set_iterator_abs_trivial_simp",
     "[| ALL x. ?invar x; ALL x. ?\<alpha> x = x |]
      ==> set_iterator_abs ?\<alpha> ?invar = set_iterator",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("SetAbstractionIterator.map_iterator_abs_trivial_simp",
     "[| ALL x. ?invar x; ALL x. ?\<alpha> x = x |]
      ==> map_iterator_abs ?\<alpha> ?invar = map_iterator",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         t_empty))),
    ("SetAbstractionIterator.map_iterator_abs_I2",
     "[| map_iterator ?iti ?m; !!k v. ?m k = Some v ==> ?invar v;
         ?m' = map_option ?\<alpha> o ?m |]
      ==> map_iterator_abs ?\<alpha> ?invar ?iti ?m'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app (template_hole 8, template_var 3))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0)),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 4),
             template_var 1)
           ))),
    ("SetAbstractionIterator.map_iterator_abs_genord_remove_abs2",
     "[| map_iterator_abs_genord ?\<alpha> ?invar ?iti ?m ?R;
         !!m'. [| map_iterator_genord ?iti m'
                   (%(k, v) (k', v').
                       ?R (k, ?\<alpha> v) (k', ?\<alpha> v'));
                  map_option ?\<alpha> o m' = ?m;
                  !!k v. m' k = Some v ==> ?invar v |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 13, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("SetAbstractionIterator.set_iterator_abs_I2",
     "[| set_iterator ?iti ?S0.0;
         !!xc1 xc2.
            [| ?invar xc1; ?invar xc2; xc1 : ?S0.0; xc2 : ?S0.0;
               ?\<alpha> xc1 = ?\<alpha> xc2 |]
            ==> xc1 = xc2;
         !!xc. xc : ?S0.0 ==> ?invar xc; ?S0' = ?\<alpha> ` ?S0.0 |]
      ==> set_iterator_abs ?\<alpha> ?invar ?iti ?S0'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 4),
             template_var 0)
           ))),
    ("SetAbstractionIterator.set_iterator_abs_no_cond_rule_insert_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0; ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?invar x; ?\<alpha> x : ?S0.0 - S; ?I S \<sigma>;
               S <= ?S0.0 |]
            ==> ?I (insert (?\<alpha> x) S) (?f x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_hole 8),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetAbstractionIterator.set_iterator_abs_no_cond_rule_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0; ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?invar x; ?\<alpha> x : S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (S - {?\<alpha> x}) (?f x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 4), template_var 2)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_genord_I2",
     "[| map_iterator_genord ?iti ?m ?R'; !!k v. ?m k = Some v ==> ?invar v;
         !!k v k' v'.
            [| ?invar v; ?invar v'; ?R' (k, v) (k', v') |]
            ==> ?R (k, ?\<alpha> v) (k', ?\<alpha> v');
         ?m' = map_option ?\<alpha> o ?m |]
      ==> map_iterator_abs_genord ?\<alpha> ?invar ?iti ?m' ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 6),
                template_app (template_hole 10, template_var 5)),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 6),
               template_var 0),
             template_var 2)
           ))),
    ("SetAbstractionIterator.set_iterator_abs_no_cond_simple_rule_insert_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0;
         !!xc. ?invar xc ==> ?f xc = ?f' (?\<alpha> xc); ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| x : ?S0.0 - S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (insert x S) (?f' x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 2, template_hole 8),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, t_empty), template_var 4),
               template_var 1))
           ))),
    ("SetAbstractionIterator.set_iterator_abs_simple_no_cond_rule_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0;
         !!xc. ?invar xc ==> ?f xc = ?f' (?\<alpha> xc);
         ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| x : S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (S - {x}) (?f' x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 5), template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, t_empty), template_var 4),
               template_var 1))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_no_cond_rule_P",
     "[| map_iterator_abs ?\<alpha> ?invar ?iti ?m;
         ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| k : it; ?invar v; ?m k = Some (?\<alpha> v); it <= dom ?m;
               ?I it \<sigma> |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?iti (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 3,
                template_app (template_hole 13, template_var 4)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_no_cond_rule_insert_P",
     "[| map_iterator_abs ?\<alpha> ?invar ?iti ?m; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| k : dom ?m - it; ?invar v; ?m k = Some (?\<alpha> v);
               it <= dom ?m; ?I it \<sigma> |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?iti (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_hole 13),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetAbstractionIterator.set_iterator_abs_genord_I2",
     "[| set_iterator_genord ?iti ?S0.0 ?Rc;
         !!xc1 xc2.
            [| ?invar xc1; ?invar xc2; ?Rc xc1 xc2 |]
            ==> ?Ra (?\<alpha> xc1) (?\<alpha> xc2);
         !!xc1 xc2.
            [| ?invar xc1; ?invar xc2; xc1 : ?S0.0; xc2 : ?S0.0;
               ?\<alpha> xc1 = ?\<alpha> xc2 |]
            ==> xc1 = xc2;
         !!xc. xc : ?S0.0 ==> ?invar xc; ?S0' = ?\<alpha> ` ?S0.0 |]
      ==> set_iterator_abs_genord ?\<alpha> ?invar ?iti ?S0' ?Ra",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 6),
               template_var 0),
             template_var 2)
           ))),
    ("SetAbstractionIterator.set_iterator_abs_rule_insert_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0; ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; ?invar x; ?\<alpha> x : ?S0.0 - S;
               ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (insert (?\<alpha> x) S) (?f x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= ?S0.0; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 9),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetAbstractionIterator.set_iterator_abs_rule_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0; ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; ?invar x; ?\<alpha> x : S; ?I S \<sigma>;
               S <= ?S0.0 |]
            ==> ?I (S - {?\<alpha> x}) (?f x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= {}; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 5), template_var 3)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetAbstractionIterator.set_iterator_abs_simple_rule_insert_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0;
         !!xc. ?invar xc ==> ?f xc = ?f' (?\<alpha> xc); ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; x : ?S0.0 - S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (insert x S) (?f' x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= ?S0.0; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_hole 9),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 1),
                 template_var 5),
               template_var 2))
           ))),
    ("SetAbstractionIterator.set_iterator_abs_simple_rule_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0;
         !!xc. ?invar xc ==> ?f xc = ?f' (?\<alpha> xc);
         ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; x : S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (S - {x}) (?f' x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= {}; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 6), template_var 2)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 1),
                 template_var 5),
               template_var 2))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_rule_P",
     "[| map_iterator_abs ?\<alpha> ?invar ?iti ?m;
         ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : it; ?invar v; ?m k = Some (?\<alpha> v);
               it <= dom ?m; ?I it \<sigma> |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= {}; ~ ?c \<sigma>; ?I it \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?iti ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 4,
                template_app (template_hole 14, template_var 5)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_rule_insert_P",
     "[| map_iterator_abs ?\<alpha> ?invar ?iti ?m; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : dom ?m - it; ?invar v;
               ?m k = Some (?\<alpha> v); it <= dom ?m; ?I it \<sigma> |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= dom ?m; ~ ?c \<sigma>; ?I it \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?iti ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 14),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_genord_rule_P",
     "[| map_iterator_abs_genord ?\<alpha> ?invar ?iti ?m ?R;
         ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : it; ?invar v; ?m k = Some (?\<alpha> v);
               it <= dom ?m; ?I it \<sigma>;
               ALL k' v'.
                  k' : it - {k} &
                  ?invar v' & ?m k' = Some (?\<alpha> v') -->
                  ?R (k, ?\<alpha> v) (k', ?\<alpha> v');
               ALL k' v'.
                  k' ~: it & ?invar v' & ?m k' = Some (?\<alpha> v') -->
                  ?R (k', ?\<alpha> v') (k, ?\<alpha> v) |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= {}; ~ ?c \<sigma>; ?I it \<sigma>;
               ALL k v k' v'.
                  k ~: it &
                  ?invar v &
                  ?m k = Some (?\<alpha> v) &
                  k' : it & ?invar v' & ?m k' = Some (?\<alpha> v') -->
                  ?R (k, ?\<alpha> v) (k', ?\<alpha> v') |]
            ==> ?P \<sigma> |]
      ==> ?P (?iti ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 20, template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 4,
                template_app (template_hole 19, template_var 6)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_genord_rule_insert_P",
     "[| map_iterator_abs_genord ?\<alpha> ?invar ?iti ?m ?R;
         ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : dom ?m - it; ?invar v;
               ?m k = Some (?\<alpha> v); it <= dom ?m; ?I it \<sigma>;
               ALL k' v'.
                  k' : dom ?m - it - {k} &
                  ?invar v' & ?m k' = Some (?\<alpha> v') -->
                  ?R (k, ?\<alpha> v) (k', ?\<alpha> v');
               ALL k' v'.
                  k' : it & ?invar v' & ?m k' = Some (?\<alpha> v') -->
                  ?R (k', ?\<alpha> v') (k, ?\<alpha> v) |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= dom ?m; ~ ?c \<sigma>; ?I it \<sigma>;
               ALL k v k' v'.
                  k : it &
                  ?invar v &
                  ?m k = Some (?\<alpha> v) &
                  k' ~: it & ?invar v' & ?m k' = Some (?\<alpha> v') -->
                  ?R (k, ?\<alpha> v) (k', ?\<alpha> v') |]
            ==> ?P \<sigma> |]
      ==> ?P (?iti ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 20, template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 19),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 2),
                 template_var 1),
               template_var 3))
           )))]
