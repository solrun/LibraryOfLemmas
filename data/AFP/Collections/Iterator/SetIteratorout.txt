Loading theory "Draft.SetIterator" (required by "Draft.SetIteratorTemplates")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SetIteratorTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SetIteratorTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SetIteratorTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.172s elapsed time, 0.689s cpu time, 0.047s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SetIteratorTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
### theory "HOL-Library.Set_Algebras"
### 0.257s elapsed time, 1.026s cpu time, 0.047s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SetIteratorTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.400s elapsed time, 1.575s cpu time, 0.146s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SetIteratorTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
Found termination order: "size <*mlex*> {}"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  cycle :: "'a list => 'a stream"
### theory "HOL-Library.BigO"
### 0.974s elapsed time, 3.598s cpu time, 0.877s GC time
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
### theory "Draft.SetIterator"
### 1.289s elapsed time, 4.801s cpu time, 0.924s GC time
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
Found termination order: "size <*mlex*> {}"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
### theory "HOL-Library.Stream"
### 1.023s elapsed time, 3.530s cpu time, 0.841s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.876s elapsed time, 5.199s cpu time, 1.038s GC time
Loading theory "Draft.Templates" (required by "Draft.SetIteratorTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.064s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SetIteratorTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.451s elapsed time, 0.499s cpu time, 0.062s GC time
Loading theory "Draft.SetIteratorTemplates"
val templateLemmas =
   [("SetIterator.set_iterator_intro",
     "set_iterator_genord ?it ?S0.0 ?R ==> set_iterator ?it ?S0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("SetIterator.set_iterator_foldli_conv",
     "set_iterator ?iti ?S =
      (EX l0. distinct l0 & ?S = set l0 & ?iti = foldli l0)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app (template_hole 6, t_empty))),
    ("SetIterator.set_iterator_I",
     "[| distinct ?l0.0; ?S = set ?l0.0; ?iti = foldli ?l0.0 |]
      ==> set_iterator ?iti ?S",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_var 1, template_app (template_hole 3, template_var 2)),
        template_equation
         (template_var 0, template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("SetIterator.map_iterator_foldli_conv",
     "map_iterator ?iti ?m =
      (EX l0. distinct (map fst l0) & ?m = map_of l0 & ?iti = foldli l0)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1),
         template_app (template_hole 9, template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("SetIterator.map_iterator_I",
     "[| distinct (map fst ?l0.0); ?m = map_of ?l0.0; ?iti = foldli ?l0.0 |]
      ==> map_iterator ?iti ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 2))
            ),
        template_equation
         (template_var 1, template_app (template_hole 4, template_var 2)),
        template_equation
         (template_var 0, template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SetIterator.set_iterator_genord_foldli_conv",
     "set_iterator_genord ?iti ?S ?R =
      (EX l0.
          distinct l0 & ?S = set l0 & sorted_wrt ?R l0 & ?iti = foldli l0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 7, t_empty))),
    ("SetIterator.set_iterator_genord_I",
     "[| distinct ?l0.0; ?S = set ?l0.0; sorted_wrt ?R ?l0.0;
         ?iti = foldli ?l0.0 |]
      ==> set_iterator_genord ?iti ?S ?R",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_equation
         (template_var 2, template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3)
            ),
        template_equation
         (template_var 0, template_app (template_hole 1, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("SetIterator.map_iterator_genord_foldli_conv",
     "map_iterator_genord ?iti ?m ?R =
      (EX l0.
          distinct (map fst l0) &
          ?m = map_of l0 & sorted_wrt ?R l0 & ?iti = foldli l0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_var 2),
           template_app (template_hole 10, template_var 1)),
         template_var 0),
       template_app (template_hole 9, t_empty))),
    ("SetIterator.map_iterator_genord_I",
     "[| distinct (map fst ?l0.0); ?m = map_of ?l0.0; sorted_wrt ?R ?l0.0;
         ?iti = foldli ?l0.0 |]
      ==> map_iterator_genord ?iti ?m ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 3))
            ),
        template_equation
         (template_var 2, template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_equation
         (template_var 0, template_app (template_hole 2, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2)),
             template_var 1)
           ))),
    ("SetIterator.set_iterator_no_cond_rule_insert_P",
     "[| set_iterator ?it ?S0.0; ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| x : ?S0.0 - S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (insert x S) (?f x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_hole 8),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetIterator.set_iterator_no_cond_rule_P",
     "[| set_iterator ?it ?S0.0; ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| x : S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (S - {x}) (?f x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 4), template_var 2)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetIterator.map_iterator_no_cond_rule_P",
     "[| map_iterator ?it ?m; ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| k : it; ?m k = Some v; it <= dom ?m; ?I it \<sigma> |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_app (template_hole 14, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 3,
                template_app (template_hole 13, template_var 4)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetIterator.map_iterator_no_cond_rule_insert_P",
     "[| map_iterator ?it ?m; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| k : dom ?m - it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma> |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_app (template_hole 14, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_hole 13),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetIterator.set_iterator_rule_insert_P",
     "[| set_iterator ?it ?S0.0; ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; x : ?S0.0 - S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (insert x S) (?f x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= ?S0.0; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 9),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.set_iterator_rule_P",
     "[| set_iterator ?it ?S0.0; ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; x : S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (S - {x}) (?f x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= {}; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 5), template_var 3)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.map_iterator_rule_P",
     "[| map_iterator ?it ?m; ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma> |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= {}; ~ ?c \<sigma>; ?I it \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 6),
              template_app (template_hole 15, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 4,
                template_app (template_hole 14, template_var 5)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.map_iterator_rule_insert_P",
     "[| map_iterator ?it ?m; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : dom ?m - it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma> |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= dom ?m; ~ ?c \<sigma>; ?I it \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 6),
              template_app (template_hole 15, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 14),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.map_iterator_genord_rule_P",
     "[| map_iterator_genord ?it ?m ?R; ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma>;
               ALL k' v'.
                  k' : it - {k} & ?m k' = Some v' --> ?R (k, v) (k', v');
               ALL k' v'.
                  k' ~: it & ?m k' = Some v' --> ?R (k', v') (k, v) |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= {}; ~ ?c \<sigma>; ?I it \<sigma>;
               ALL k v k' v'.
                  k ~: it & ?m k = Some v & k' : it & ?m k' = Some v' -->
                  ?R (k, v) (k', v') |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 7),
                template_app (template_hole 19, template_var 6)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 4,
                template_app (template_hole 18, template_var 6)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.map_iterator_genord_rule_insert_P",
     "[| map_iterator_genord ?it ?m ?R; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : dom ?m - it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma>;
               ALL k' v'.
                  k' : dom ?m - it - {k} & ?m k' = Some v' -->
                  ?R (k, v) (k', v');
               ALL k' v'.
                  k' : it & ?m k' = Some v' --> ?R (k', v') (k, v) |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= dom ?m; ~ ?c \<sigma>; ?I it \<sigma>;
               ALL k v k' v'.
                  k : it & ?m k = Some v & k' ~: it & ?m k' = Some v' -->
                  ?R (k, v) (k', v') |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 7),
                template_app (template_hole 19, template_var 6)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 18),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 2),
                 template_var 1),
               template_var 3))
           )))]:
   (string * thm * template) list
### theory "Draft.SetIteratorTemplates"
### 0.548s elapsed time, 1.134s cpu time, 0.645s GC time
val it = (): unit
