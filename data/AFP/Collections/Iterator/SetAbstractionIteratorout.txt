Loading theory "Draft.SetIterator" (required by "Draft.SetAbstractionIteratorTemplates" via "Draft.SetAbstractionIterator")
Loading theory "HOL-Library.Function_Algebras" (required by "Draft.SetAbstractionIteratorTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
Loading theory "HOL-Library.Nat_Bijection" (required by "Draft.SetAbstractionIteratorTemplates" via "Draft.ExtrEqs" via "HOL-Library.Stream")
Loading theory "HOL-Library.Set_Algebras" (required by "Draft.SetAbstractionIteratorTemplates" via "Draft.ExtrEqs" via "HOL-Library.BigO")
instantiation
  fun :: (type, plus) plus
  plus_fun == plus :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (plus) plus
  plus_set == plus :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, zero) zero
  zero_fun == zero_class.zero :: 'a => 'b
instantiation
  set :: (times) times
  times_set == times :: 'a set => 'a set => 'a set
instantiation
  fun :: (type, times) times
  times_fun == times :: ('a => 'b) => ('a => 'b) => 'a => 'b
instantiation
  set :: (zero) zero
  zero_set == zero_class.zero :: 'a set
instantiation
  fun :: (type, one) one
  one_fun == one_class.one :: 'a => 'b
instantiation
  set :: (one) one
  one_set == one_class.one :: 'a set
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
### theory "HOL-Library.Function_Algebras"
### 0.151s elapsed time, 0.618s cpu time, 0.050s GC time
Loading theory "HOL-Library.Tree" (required by "Draft.SetAbstractionIteratorTemplates" via "Draft.ExtrEqs" via "Draft.Templates")
locale set_iterator_genord
  fixes
    iti ::
      "('\<sigma> => bool)
       => ('x => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'x set"
    and R :: "'x => 'x => bool"
  assumes "set_iterator_genord iti S0 R"
### theory "HOL-Library.Set_Algebras"
### 0.232s elapsed time, 0.943s cpu time, 0.050s GC time
Loading theory "HOL-Library.BigO" (required by "Draft.SetAbstractionIteratorTemplates" via "Draft.ExtrEqs")
Found termination order: "size_list size <*mlex*> {}"
### theory "HOL-Library.Nat_Bijection"
### 0.381s elapsed time, 1.509s cpu time, 0.144s GC time
Loading theory "HOL-Library.Stream" (required by "Draft.SetAbstractionIteratorTemplates" via "Draft.ExtrEqs")
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  left :: "'a tree => 'a tree"
consts
  right :: "'a tree => 'a tree"
Found termination order: "size <*mlex*> {}"
consts
  shift :: "'a list => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
Proofs for coinductive predicate(s) "streamsp"
  Proving monotonicity ...
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
consts
  snth :: "'a stream => nat => 'a"
Found termination order: "size <*mlex*> {}"
consts
  stake :: "nat => 'a stream => 'a list"
consts
  sdrop :: "nat => 'a stream => 'a stream"
class height = type +
  fixes height :: "'a => nat"
instantiation
  tree :: (type) height
  height_tree == height :: 'a tree => nat
consts
  sfilter :: "('a => bool) => 'a stream => 'a stream"
consts
  cycle :: "'a list => 'a stream"
class linorder = order +
  assumes "linear": "!!x y. x <= y | y <= x"
Found termination order: "size <*mlex*> {}"
consts
  siterate :: "('a => 'a) => 'a => 'a stream"
### theory "Draft.SetIterator"
### 1.246s elapsed time, 4.694s cpu time, 0.875s GC time
Loading theory "Draft.SetAbstractionIterator" (required by "Draft.SetAbstractionIteratorTemplates")
locale set_iterator_abs_genord
  fixes \<alpha> :: "'xc => 'xa"
    and invar :: "'xc => bool"
    and
    iti ::
      "('\<sigma> => bool)
       => ('xc => '\<sigma> => '\<sigma>) => '\<sigma> => '\<sigma>"
    and S0 :: "'xa set"
    and R :: "'xa => 'xa => bool"
  assumes "set_iterator_abs_genord \<alpha> invar iti S0 R"
consts
  flat :: "'a list stream => 'a stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.BigO"
### 1.117s elapsed time, 4.150s cpu time, 0.902s GC time
consts
  sinterleave :: "'a stream => 'a stream => 'a stream"
Found termination order: "size <*mlex*> {}"
consts
  szip :: "'a stream => 'b stream => ('a * 'b) stream"
consts
  smap2 :: "('a => 'b => 'c) => 'a stream => 'b stream => 'c stream"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Stream"
### 1.064s elapsed time, 3.877s cpu time, 0.808s GC time
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "Draft.SetAbstractionIterator"
### 0.362s elapsed time, 1.123s cpu time, 0.153s GC time
Found termination order: "(%p. size (fst p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
Found termination order: "(%p. size (snd p)) <*mlex*> {}"
Found termination order: "size <*mlex*> {}"
### theory "HOL-Library.Tree"
### 1.949s elapsed time, 5.802s cpu time, 1.065s GC time
Loading theory "Draft.Templates" (required by "Draft.SetAbstractionIteratorTemplates" via "Draft.ExtrEqs")
datatype template_term
=
     t_empty
   | template_app of template_term * template_term
   | template_hole of int
   | template_var of int
datatype sign
= equals | greater_equals | greater_than | less_equals | less_than
datatype template
=
     template_bimplication of template * template
   | template_dunno
   | template_equation of template_term * template_term
   | template_implication of template list * template
   | template_inequation of sign * template_term * template_term
   | template_negation of template
   | template_predicate of template_term
constructor t_empty: template_term
constructor template_app: template_term * template_term -> template_term
constructor template_hole: int -> template_term
constructor template_var: int -> template_term
constructor equals: sign
constructor greater_equals: sign
constructor greater_than: sign
constructor less_equals: sign
constructor less_than: sign
constructor template_bimplication: template * template -> template
constructor template_dunno: template
constructor template_equation: template_term * template_term -> template
constructor template_implication: template list * template -> template
constructor template_inequation:
   sign * template_term * template_term -> template
constructor template_negation: template -> template
constructor template_predicate: template_term -> template
val vfs = fn: term -> (indexname * typ) list * (string * typ) list
val indexOf = fn: ''a list -> ''a -> int -> int
val has_eq = fn: term -> bool
val term2template = fn:
   (indexname * typ) list -> (string * typ) list -> term -> template_term
val lemma2predicate = fn: term -> term -> template
val makeTemplatewithContext = fn: term -> term -> template
val lemma2template = fn: term -> template
val thm2template = fn: thm -> template
val tterm2string = fn: template_term -> string
val template2string = fn: template -> string
val t = "height ?t <= size ?t": thm
val th =
   Const ("HOL.Trueprop", "bool => prop") $
     (Const ("Orderings.ord_class.less_eq", "nat => nat => bool") $
       (Const ("Tree.height_class.height", "?'a tree => nat") $
         Var (("t", 0), "?'a tree")) $
       (Const ("Nat.size_class.size", "?'a tree => nat") $
         Var (("t", 0), "?'a tree"))):
   term
### theory "Draft.Templates"
### 0.048s elapsed time, 0.065s cpu time, 0.000s GC time
Loading theory "Draft.ExtrEqs" (required by "Draft.SetAbstractionIteratorTemplates")
val eqpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Var (("_dummy_", 2), "?'a"))
       ):
   term Find_Theorems.criterion
val badeqpattern = Pattern (Const ("Pure.eq", "?'a => ?'a => prop")):
   term Find_Theorems.criterion
val undefpattern =
   Pattern
    (
       Const ("HOL.Trueprop", "bool => prop") $
         (Const ("HOL.eq", "?'a => ?'a => bool") $
           Var (("_dummy_", 1), "?'a") $ Const ("HOL.undefined", "?'a"))
       ):
   term Find_Theorems.criterion
val thmpattern =
   Pattern
    (Const ("HOL.Trueprop", "bool => prop") $ Var (("_dummy_", 1), "bool")):
   term Find_Theorems.criterion
val badnames =
   ["*nitpick*", "*Nitpick*", "*full_exhaustive*", "*_def*", "Enum.finite*",
    "*Quickcheck*", "ATP*", "*Nunchaku*", "*Code*", "*BNF*", "*SMT*",
    "*.*.*"]:
   string list
val unwanted_names =
   [(false, Name "*nitpick*"), (false, Name "*Nitpick*"),
    (false, Name "*full_exhaustive*"), (false, Name "*_def*"),
    (false, Name "Enum.finite*"), (false, Name "*Quickcheck*"),
    (false, Name "ATP*"), (false, Name "*Nunchaku*"),
    (false, Name "*Code*"), (false, Name "*BNF*"), (false, Name "*SMT*"),
    (false, Name "*.*.*")]:
   (bool * term Find_Theorems.criterion) list
val has_vars = fn: term -> bool
val get_all_eqs = fn: string -> Proof.context -> (string * thm) list
val get_all_thms = fn: string -> Proof.context -> (string * thm) list
val get_noneq_thms = fn: string -> Proof.context -> (string * thm) list
val template_eqs = fn:
   string -> Proof.context -> (string * thm * template) list
val template_thms = fn:
   string -> Proof.context -> (string * thm * template) list
### theory "Draft.ExtrEqs"
### 0.647s elapsed time, 1.135s cpu time, 0.677s GC time
Loading theory "Draft.SetAbstractionIteratorTemplates"
val templateLemmas =
   [("SetAbstractionIterator.map_to_set_cong",
     "(map_to_set ?m1.0 = map_to_set ?m2.0) = (?m1.0 = ?m2.0)",
     template_bimplication
      (template_equation
        (template_app (template_hole 1, template_var 1),
         template_app (template_hole 1, template_var 0)),
       template_equation (template_var 1, template_var 0))),
    ("SetAbstractionIterator.set_iterator_abs_genord_trivial_simp",
     "[| ALL x. ?invar x; ALL x. ?\<alpha> x = x |]
      ==> set_iterator_abs_genord ?\<alpha> ?invar = set_iterator_genord",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("SetAbstractionIterator.set_iterator_abs_trivial_simp",
     "[| ALL x. ?invar x; ALL x. ?\<alpha> x = x |]
      ==> set_iterator_abs ?\<alpha> ?invar = set_iterator",
     template_implication
      ([template_predicate (template_app (template_hole 4, t_empty)),
        template_predicate (template_app (template_hole 4, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 1, template_var 0), template_var 1),
         template_hole 0))),
    ("SetAbstractionIterator.map_iterator_abs_trivial_simp",
     "[| ALL x. ?invar x; ALL x. ?\<alpha> x = x |]
      ==> map_iterator_abs ?\<alpha> ?invar = map_iterator",
     template_implication
      ([template_predicate (template_app (template_hole 5, t_empty)),
        template_predicate (template_app (template_hole 5, t_empty))],
       template_equation
        (template_app
          (template_app (template_hole 2, template_var 0), template_var 1),
         t_empty))),
    ("SetAbstractionIterator.map_iterator_abs_I2",
     "[| map_iterator ?iti ?m; !!k v. ?m k = Some v ==> ?invar v;
         ?m' = map_option ?\<alpha> o ?m |]
      ==> map_iterator_abs ?\<alpha> ?invar ?iti ?m'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 4),
              template_app (template_hole 8, template_var 3))
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_equation
         (template_var 1,
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 0)),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 0),
                 template_var 2),
               template_var 4),
             template_var 1)
           ))),
    ("SetAbstractionIterator.map_iterator_abs_genord_remove_abs2",
     "[| map_iterator_abs_genord ?\<alpha> ?invar ?iti ?m ?R;
         !!m'. [| map_iterator_genord ?iti m'
                   (%(k, v) (k', v').
                       ?R (k, ?\<alpha> v) (k', ?\<alpha> v'));
                  map_option ?\<alpha> o m' = ?m;
                  !!k v. m' k = Some v ==> ?invar v |]
               ==> ?thesis |]
      ==> ?thesis",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 13, template_var 5),
                    template_var 4),
                  template_var 3),
                template_var 2),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 12, t_empty))],
       template_predicate (template_var 0))),
    ("SetAbstractionIterator.set_iterator_abs_I2",
     "[| set_iterator ?iti ?S0.0;
         !!xc1 xc2.
            [| ?invar xc1; ?invar xc2; xc1 : ?S0.0; xc2 : ?S0.0;
               ?\<alpha> xc1 = ?\<alpha> xc2 |]
            ==> xc1 = xc2;
         !!xc. xc : ?S0.0 ==> ?invar xc; ?S0' = ?\<alpha> ` ?S0.0 |]
      ==> set_iterator_abs ?\<alpha> ?invar ?iti ?S0'",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 7, template_var 4),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app (template_hole 0, template_var 1),
                 template_var 2),
               template_var 4),
             template_var 0)
           ))),
    ("SetAbstractionIterator.set_iterator_abs_no_cond_rule_insert_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0; ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?invar x; ?\<alpha> x : ?S0.0 - S; ?I S \<sigma>;
               S <= ?S0.0 |]
            ==> ?I (insert (?\<alpha> x) S) (?f x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_hole 8),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetAbstractionIterator.set_iterator_abs_no_cond_rule_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0; ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?invar x; ?\<alpha> x : S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (S - {?\<alpha> x}) (?f x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 9, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 4), template_var 2)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_genord_I2",
     "[| map_iterator_genord ?iti ?m ?R'; !!k v. ?m k = Some v ==> ?invar v;
         !!k v k' v'.
            [| ?invar v; ?invar v'; ?R' (k, v) (k', v') |]
            ==> ?R (k, ?\<alpha> v) (k', ?\<alpha> v');
         ?m' = map_option ?\<alpha> o ?m |]
      ==> map_iterator_abs_genord ?\<alpha> ?invar ?iti ?m' ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 11, template_var 6),
                template_app (template_hole 10, template_var 5)),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_equation
         (template_var 0,
          template_app
           (template_app
             (template_hole 2,
              template_app (template_hole 1, template_var 1)),
            template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 6),
               template_var 0),
             template_var 2)
           ))),
    ("SetAbstractionIterator.set_iterator_abs_no_cond_simple_rule_insert_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0;
         !!xc. ?invar xc ==> ?f xc = ?f' (?\<alpha> xc); ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| x : ?S0.0 - S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (insert x S) (?f' x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 2, template_hole 8),
              template_var 1)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, t_empty), template_var 4),
               template_var 1))
           ))),
    ("SetAbstractionIterator.set_iterator_abs_simple_no_cond_rule_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0;
         !!xc. ?invar xc ==> ?f xc = ?f' (?\<alpha> xc);
         ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| x : S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (S - {x}) (?f' x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 11, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 2, template_var 5), template_var 1)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, t_empty), template_var 4),
               template_var 1))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_no_cond_rule_P",
     "[| map_iterator_abs ?\<alpha> ?invar ?iti ?m;
         ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| k : it; ?invar v; ?m k = Some (?\<alpha> v); it <= dom ?m;
               ?I it \<sigma> |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?iti (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 3,
                template_app (template_hole 13, template_var 4)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_no_cond_rule_insert_P",
     "[| map_iterator_abs ?\<alpha> ?invar ?iti ?m; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| k : dom ?m - it; ?invar v; ?m k = Some (?\<alpha> v);
               it <= dom ?m; ?I it \<sigma> |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?iti (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 14, template_var 7),
                  template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_hole 13),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetAbstractionIterator.set_iterator_abs_genord_I2",
     "[| set_iterator_genord ?iti ?S0.0 ?Rc;
         !!xc1 xc2.
            [| ?invar xc1; ?invar xc2; ?Rc xc1 xc2 |]
            ==> ?Ra (?\<alpha> xc1) (?\<alpha> xc2);
         !!xc1 xc2.
            [| ?invar xc1; ?invar xc2; xc1 : ?S0.0; xc2 : ?S0.0;
               ?\<alpha> xc1 = ?\<alpha> xc2 |]
            ==> xc1 = xc2;
         !!xc. xc : ?S0.0 ==> ?invar xc; ?S0' = ?\<alpha> ` ?S0.0 |]
      ==> set_iterator_abs_genord ?\<alpha> ?invar ?iti ?S0' ?Ra",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 7, template_var 6),
                template_var 5),
              template_var 4)
            ),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty)),
        template_equation
         (template_var 0,
          template_app
           (template_app (template_hole 1, template_var 1),
            template_var 5))],
       template_predicate
        (
           template_app
            (template_app
              (template_app
                (template_app
                  (template_app (template_hole 0, template_var 1),
                   template_var 3),
                 template_var 6),
               template_var 0),
             template_var 2)
           ))),
    ("SetAbstractionIterator.set_iterator_abs_rule_insert_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0; ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; ?invar x; ?\<alpha> x : ?S0.0 - S;
               ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (insert (?\<alpha> x) S) (?f x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= ?S0.0; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 9),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetAbstractionIterator.set_iterator_abs_rule_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0; ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; ?invar x; ?\<alpha> x : S; ?I S \<sigma>;
               S <= ?S0.0 |]
            ==> ?I (S - {?\<alpha> x}) (?f x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= {}; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 10, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 5), template_var 3)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetAbstractionIterator.set_iterator_abs_simple_rule_insert_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0;
         !!xc. ?invar xc ==> ?f xc = ?f' (?\<alpha> xc); ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; x : ?S0.0 - S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (insert x S) (?f' x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= ?S0.0; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_hole 9),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 1),
                 template_var 5),
               template_var 2))
           ))),
    ("SetAbstractionIterator.set_iterator_abs_simple_rule_P",
     "[| set_iterator_abs ?\<alpha> ?invar ?it ?S0.0;
         !!xc. ?invar xc ==> ?f xc = ?f' (?\<alpha> xc);
         ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; x : S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (S - {x}) (?f' x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= {}; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 12, template_var 9),
                  template_var 8),
                template_var 7),
              template_var 6)
            ),
        template_predicate (template_app (template_hole 11, t_empty)),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 6), template_var 2)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 1),
                 template_var 5),
               template_var 2))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_rule_P",
     "[| map_iterator_abs ?\<alpha> ?invar ?iti ?m;
         ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : it; ?invar v; ?m k = Some (?\<alpha> v);
               it <= dom ?m; ?I it \<sigma> |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= {}; ~ ?c \<sigma>; ?I it \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?iti ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 4,
                template_app (template_hole 14, template_var 5)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_rule_insert_P",
     "[| map_iterator_abs ?\<alpha> ?invar ?iti ?m; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : dom ?m - it; ?invar v;
               ?m k = Some (?\<alpha> v); it <= dom ?m; ?I it \<sigma> |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= dom ?m; ~ ?c \<sigma>; ?I it \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?iti ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app (template_hole 15, template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 14),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_genord_rule_P",
     "[| map_iterator_abs_genord ?\<alpha> ?invar ?iti ?m ?R;
         ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : it; ?invar v; ?m k = Some (?\<alpha> v);
               it <= dom ?m; ?I it \<sigma>;
               ALL k' v'.
                  k' : it - {k} &
                  ?invar v' & ?m k' = Some (?\<alpha> v') -->
                  ?R (k, ?\<alpha> v) (k', ?\<alpha> v');
               ALL k' v'.
                  k' ~: it & ?invar v' & ?m k' = Some (?\<alpha> v') -->
                  ?R (k', ?\<alpha> v') (k, ?\<alpha> v) |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= {}; ~ ?c \<sigma>; ?I it \<sigma>;
               ALL k v k' v'.
                  k ~: it &
                  ?invar v &
                  ?m k = Some (?\<alpha> v) &
                  k' : it & ?invar v' & ?m k' = Some (?\<alpha> v') -->
                  ?R (k, ?\<alpha> v) (k', ?\<alpha> v') |]
            ==> ?P \<sigma> |]
      ==> ?P (?iti ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 20, template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 4,
                template_app (template_hole 19, template_var 6)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetAbstractionIterator.map_iterator_abs_genord_rule_insert_P",
     "[| map_iterator_abs_genord ?\<alpha> ?invar ?iti ?m ?R;
         ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : dom ?m - it; ?invar v;
               ?m k = Some (?\<alpha> v); it <= dom ?m; ?I it \<sigma>;
               ALL k' v'.
                  k' : dom ?m - it - {k} &
                  ?invar v' & ?m k' = Some (?\<alpha> v') -->
                  ?R (k, ?\<alpha> v) (k', ?\<alpha> v');
               ALL k' v'.
                  k' : it & ?invar v' & ?m k' = Some (?\<alpha> v') -->
                  ?R (k', ?\<alpha> v') (k, ?\<alpha> v) |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= dom ?m; ~ ?c \<sigma>; ?I it \<sigma>;
               ALL k v k' v'.
                  k : it &
                  ?invar v &
                  ?m k = Some (?\<alpha> v) &
                  k' ~: it & ?invar v' & ?m k' = Some (?\<alpha> v') -->
                  ?R (k, ?\<alpha> v) (k', ?\<alpha> v') |]
            ==> ?P \<sigma> |]
      ==> ?P (?iti ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app
                 (template_app
                   (template_app (template_hole 20, template_var 9),
                    template_var 8),
                  template_var 7),
                template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 19),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 18, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty)),
        template_predicate (template_app (template_hole 15, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 2),
                 template_var 1),
               template_var 3))
           )))]:
   (string * thm * template) list
### theory "Draft.SetAbstractionIteratorTemplates"
### 0.417s elapsed time, 0.553s cpu time, 0.046s GC time
val it = (): unit
