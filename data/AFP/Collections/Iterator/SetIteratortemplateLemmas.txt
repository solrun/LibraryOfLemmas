   [("SetIterator.set_iterator_intro",
     "set_iterator_genord ?it ?S0.0 ?R ==> set_iterator ?it ?S0.0",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 1, template_var 2),
                template_var 1),
              template_var 0)
            )],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 2), template_var 1)
           ))),
    ("SetIterator.set_iterator_foldli_conv",
     "set_iterator ?iti ?S =
      (EX l0. distinct l0 & ?S = set l0 & ?iti = foldli l0)",
     template_equation
      (template_app
        (template_app (template_hole 7, template_var 1), template_var 0),
       template_app (template_hole 6, t_empty))),
    ("SetIterator.set_iterator_I",
     "[| distinct ?l0.0; ?S = set ?l0.0; ?iti = foldli ?l0.0 |]
      ==> set_iterator ?iti ?S",
     template_implication
      ([template_predicate (template_app (template_hole 5, template_var 2)),
        template_equation
         (template_var 1, template_app (template_hole 3, template_var 2)),
        template_equation
         (template_var 0, template_app (template_hole 1, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 0, template_var 0), template_var 1)
           ))),
    ("SetIterator.map_iterator_foldli_conv",
     "map_iterator ?iti ?m =
      (EX l0. distinct (map fst l0) & ?m = map_of l0 & ?iti = foldli l0)",
     template_equation
      (template_app
        (template_app (template_hole 10, template_var 1),
         template_app (template_hole 9, template_var 0)),
       template_app (template_hole 8, t_empty))),
    ("SetIterator.map_iterator_I",
     "[| distinct (map fst ?l0.0); ?m = map_of ?l0.0; ?iti = foldli ?l0.0 |]
      ==> map_iterator ?iti ?m",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 8,
              template_app
               (template_app (template_hole 7, template_hole 6),
                template_var 2))
            ),
        template_equation
         (template_var 1, template_app (template_hole 4, template_var 2)),
        template_equation
         (template_var 0, template_app (template_hole 2, template_var 2))],
       template_predicate
        (
           template_app
            (template_app (template_hole 1, template_var 0),
             template_app (template_hole 0, template_var 1))
           ))),
    ("SetIterator.set_iterator_genord_foldli_conv",
     "set_iterator_genord ?iti ?S ?R =
      (EX l0.
          distinct l0 & ?S = set l0 & sorted_wrt ?R l0 & ?iti = foldli l0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 8, template_var 2), template_var 1),
         template_var 0),
       template_app (template_hole 7, t_empty))),
    ("SetIterator.set_iterator_genord_I",
     "[| distinct ?l0.0; ?S = set ?l0.0; sorted_wrt ?R ?l0.0;
         ?iti = foldli ?l0.0 |]
      ==> set_iterator_genord ?iti ?S ?R",
     template_implication
      ([template_predicate (template_app (template_hole 6, template_var 3)),
        template_equation
         (template_var 2, template_app (template_hole 4, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 3, template_var 1),
              template_var 3)
            ),
        template_equation
         (template_var 0, template_app (template_hole 1, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 0, template_var 0),
               template_var 2),
             template_var 1)
           ))),
    ("SetIterator.map_iterator_genord_foldli_conv",
     "map_iterator_genord ?iti ?m ?R =
      (EX l0.
          distinct (map fst l0) &
          ?m = map_of l0 & sorted_wrt ?R l0 & ?iti = foldli l0)",
     template_equation
      (template_app
        (template_app
          (template_app (template_hole 11, template_var 2),
           template_app (template_hole 10, template_var 1)),
         template_var 0),
       template_app (template_hole 9, t_empty))),
    ("SetIterator.map_iterator_genord_I",
     "[| distinct (map fst ?l0.0); ?m = map_of ?l0.0; sorted_wrt ?R ?l0.0;
         ?iti = foldli ?l0.0 |]
      ==> map_iterator_genord ?iti ?m ?R",
     template_implication
      ([template_predicate
         (
            template_app
             (template_hole 9,
              template_app
               (template_app (template_hole 8, template_hole 7),
                template_var 3))
            ),
        template_equation
         (template_var 2, template_app (template_hole 5, template_var 3)),
        template_predicate
         (
            template_app
             (template_app (template_hole 4, template_var 1),
              template_var 3)
            ),
        template_equation
         (template_var 0, template_app (template_hole 2, template_var 3))],
       template_predicate
        (
           template_app
            (template_app
              (template_app (template_hole 1, template_var 0),
               template_app (template_hole 0, template_var 2)),
             template_var 1)
           ))),
    ("SetIterator.set_iterator_no_cond_rule_insert_P",
     "[| set_iterator ?it ?S0.0; ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| x : ?S0.0 - S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (insert x S) (?f x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_hole 8),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 6, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetIterator.set_iterator_no_cond_rule_P",
     "[| set_iterator ?it ?S0.0; ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| x : S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (S - {x}) (?f x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 9, template_var 5),
              template_var 4)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_var 4), template_var 2)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetIterator.map_iterator_no_cond_rule_P",
     "[| map_iterator ?it ?m; ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| k : it; ?m k = Some v; it <= dom ?m; ?I it \<sigma> |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_app (template_hole 14, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 3,
                template_app (template_hole 13, template_var 4)),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetIterator.map_iterator_no_cond_rule_insert_P",
     "[| map_iterator ?it ?m; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| k : dom ?m - it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma> |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma> |]
      ==> ?P (?it (%_. True) ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 15, template_var 5),
              template_app (template_hole 14, template_var 4))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 3, template_hole 13),
              template_var 2)
            ),
        template_predicate (template_app (template_hole 12, t_empty)),
        template_predicate (template_app (template_hole 9, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 5, t_empty), template_var 1),
               template_var 2))
           ))),
    ("SetIterator.set_iterator_rule_insert_P",
     "[| set_iterator ?it ?S0.0; ?I {} ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; x : ?S0.0 - S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (insert x S) (?f x \<sigma>);
         !!\<sigma>. ?I ?S0.0 \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= ?S0.0; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 9),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty)),
        template_predicate (template_app (template_hole 7, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.set_iterator_rule_P",
     "[| set_iterator ?it ?S0.0; ?I ?S0.0 ?\<sigma>0.0;
         !!S \<sigma> x.
            [| ?c \<sigma>; x : S; ?I S \<sigma>; S <= ?S0.0 |]
            ==> ?I (S - {x}) (?f x \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> S.
            [| S <= ?S0.0; S ~= {}; ~ ?c \<sigma>; ?I S \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 10, template_var 6),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_var 5), template_var 3)
            ),
        template_predicate (template_app (template_hole 9, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty)),
        template_predicate (template_app (template_hole 8, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.map_iterator_rule_P",
     "[| map_iterator ?it ?m; ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma> |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= {}; ~ ?c \<sigma>; ?I it \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 6),
              template_app (template_hole 15, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 4,
                template_app (template_hole 14, template_var 5)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.map_iterator_rule_insert_P",
     "[| map_iterator ?it ?m; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : dom ?m - it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma> |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= dom ?m; ~ ?c \<sigma>; ?I it \<sigma> |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app (template_hole 16, template_var 6),
              template_app (template_hole 15, template_var 5))
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 14),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 13, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty)),
        template_predicate (template_app (template_hole 10, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 6, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.map_iterator_genord_rule_P",
     "[| map_iterator_genord ?it ?m ?R; ?I (dom ?m) ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma>;
               ALL k' v'.
                  k' : it - {k} & ?m k' = Some v' --> ?R (k, v) (k', v');
               ALL k' v'.
                  k' ~: it & ?m k' = Some v' --> ?R (k', v') (k, v) |]
            ==> ?I (it - {k}) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I {} \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= {}; ~ ?c \<sigma>; ?I it \<sigma>;
               ALL k v k' v'.
                  k ~: it & ?m k = Some v & k' : it & ?m k' = Some v' -->
                  ?R (k, v) (k', v') |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 7),
                template_app (template_hole 19, template_var 6)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app
               (template_var 4,
                template_app (template_hole 18, template_var 6)),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 2),
                 template_var 1),
               template_var 3))
           ))),
    ("SetIterator.map_iterator_genord_rule_insert_P",
     "[| map_iterator_genord ?it ?m ?R; ?I {} ?\<sigma>0.0;
         !!k v it \<sigma>.
            [| ?c \<sigma>; k : dom ?m - it; ?m k = Some v; it <= dom ?m;
               ?I it \<sigma>;
               ALL k' v'.
                  k' : dom ?m - it - {k} & ?m k' = Some v' -->
                  ?R (k, v) (k', v');
               ALL k' v'.
                  k' : it & ?m k' = Some v' --> ?R (k', v') (k, v) |]
            ==> ?I (insert k it) (?f (k, v) \<sigma>);
         !!\<sigma>. ?I (dom ?m) \<sigma> ==> ?P \<sigma>;
         !!\<sigma> it.
            [| it <= dom ?m; it ~= dom ?m; ~ ?c \<sigma>; ?I it \<sigma>;
               ALL k v k' v'.
                  k : it & ?m k = Some v & k' ~: it & ?m k' = Some v' -->
                  ?R (k, v) (k', v') |]
            ==> ?P \<sigma> |]
      ==> ?P (?it ?c ?f ?\<sigma>0.0)",
     template_implication
      ([template_predicate
         (
            template_app
             (template_app
               (template_app (template_hole 20, template_var 7),
                template_app (template_hole 19, template_var 6)),
              template_var 5)
            ),
        template_predicate
         (
            template_app
             (template_app (template_var 4, template_hole 18),
              template_var 3)
            ),
        template_predicate (template_app (template_hole 17, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty)),
        template_predicate (template_app (template_hole 14, t_empty))],
       template_predicate
        (
           template_app
            (template_var 0,
             template_app
              (template_app
                (template_app (template_var 7, template_var 2),
                 template_var 1),
               template_var 3))
           )))]
